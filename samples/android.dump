=== Search Paths ===
 android.jar

  |-+/
     |-+android
        |--Manifest
        |--Manifest$permission
        |--Manifest$permission_group
        |--R
        |--R$anim
        |--R$animator
        |--R$array
        |--R$attr
        |--R$bool
        |--R$color
        |--R$dimen
        |--R$drawable
        |--R$fraction
        |--R$id
        |--R$integer
        |--R$interpolator
        |--R$layout
        |--R$menu
        |--R$mipmap
        |--R$plurals
        |--R$raw
        |--R$string
        |--R$style
        |--R$transition
        |--R$xml
        |-+accessibilityservice
           |--AccessibilityService
           |--AccessibilityService$GestureResultCallback
           |--AccessibilityService$MagnificationController
           |--AccessibilityService$MagnificationController$OnMagnificationChangedListener
           |--AccessibilityService$SoftKeyboardController
           |--AccessibilityService$SoftKeyboardController$OnShowModeChangedListener
           |--AccessibilityServiceInfo
           |--GestureDescription
           |--GestureDescription$Builder
           |--GestureDescription$StrokeDescription
        |-+accounts
           |--AbstractAccountAuthenticator
           |--Account
           |--AccountAuthenticatorActivity
           |--AccountAuthenticatorResponse
           |--AccountManager
           |--AccountManagerCallback
           |--AccountManagerFuture
           |--AccountsException
           |--AuthenticatorDescription
           |--AuthenticatorException
           |--NetworkErrorException
           |--OnAccountsUpdateListener
           |--OperationCanceledException
        |-+animation
           |--Animator
           |--Animator$AnimatorListener
           |--Animator$AnimatorPauseListener
           |--AnimatorInflater
           |--AnimatorListenerAdapter
           |--AnimatorSet
           |--AnimatorSet$Builder
           |--ArgbEvaluator
           |--BidirectionalTypeConverter
           |--FloatArrayEvaluator
           |--FloatEvaluator
           |--IntArrayEvaluator
           |--IntEvaluator
           |--Keyframe
           |--LayoutTransition
           |--LayoutTransition$TransitionListener
           |--ObjectAnimator
           |--PointFEvaluator
           |--PropertyValuesHolder
           |--RectEvaluator
           |--StateListAnimator
           |--TimeAnimator
           |--TimeAnimator$TimeListener
           |--TimeInterpolator
           |--TypeConverter
           |--TypeEvaluator
           |--ValueAnimator
           |--ValueAnimator$AnimatorUpdateListener
        |-+annotation
           |--SuppressLint
           |--TargetApi
        |-+app
           |--ActionBar
           |--ActionBar$LayoutParams
           |--ActionBar$OnMenuVisibilityListener
           |--ActionBar$OnNavigationListener
           |--ActionBar$Tab
           |--ActionBar$TabListener
           |--Activity
           |--ActivityGroup
           |--ActivityManager
           |--ActivityManager$AppTask
           |--ActivityManager$MemoryInfo
           |--ActivityManager$ProcessErrorStateInfo
           |--ActivityManager$RecentTaskInfo
           |--ActivityManager$RunningAppProcessInfo
           |--ActivityManager$RunningServiceInfo
           |--ActivityManager$RunningTaskInfo
           |--ActivityManager$TaskDescription
           |--ActivityOptions
           |--AlarmManager
           |--AlarmManager$AlarmClockInfo
           |--AlarmManager$OnAlarmListener
           |--AlertDialog
           |--AlertDialog$Builder
           |--AliasActivity
           |--AppOpsManager
           |--AppOpsManager$OnOpChangedListener
           |--Application
           |--Application$ActivityLifecycleCallbacks
           |--Application$OnProvideAssistDataListener
           |--ApplicationErrorReport
           |--ApplicationErrorReport$AnrInfo
           |--ApplicationErrorReport$BatteryInfo
           |--ApplicationErrorReport$CrashInfo
           |--ApplicationErrorReport$RunningServiceInfo
           |--AutomaticZenRule
           |--DatePickerDialog
           |--DatePickerDialog$OnDateSetListener
           |--Dialog
           |--DialogFragment
           |--DownloadManager
           |--DownloadManager$Query
           |--DownloadManager$Request
           |--ExpandableListActivity
           |--Fragment
           |--Fragment$InstantiationException
           |--Fragment$SavedState
           |--FragmentBreadCrumbs
           |--FragmentBreadCrumbs$OnBreadCrumbClickListener
           |--FragmentContainer
           |--FragmentController
           |--FragmentHostCallback
           |--FragmentManager
           |--FragmentManager$BackStackEntry
           |--FragmentManager$OnBackStackChangedListener
           |--FragmentManagerNonConfig
           |--FragmentTransaction
           |--Instrumentation
           |--Instrumentation$ActivityMonitor
           |--Instrumentation$ActivityResult
           |--IntentService
           |--KeyguardManager
           |--KeyguardManager$KeyguardLock
           |--KeyguardManager$OnKeyguardExitResult
           |--LauncherActivity
           |--LauncherActivity$IconResizer
           |--LauncherActivity$ListItem
           |--ListActivity
           |--ListFragment
           |--LoaderManager
           |--LoaderManager$LoaderCallbacks
           |--LocalActivityManager
           |--MediaRouteActionProvider
           |--MediaRouteButton
           |--NativeActivity
           |--Notification
           |--Notification$Action
           |--Notification$Action$Builder
           |--Notification$Action$Extender
           |--Notification$Action$WearableExtender
           |--Notification$BigPictureStyle
           |--Notification$BigTextStyle
           |--Notification$Builder
           |--Notification$CarExtender
           |--Notification$CarExtender$Builder
           |--Notification$CarExtender$UnreadConversation
           |--Notification$DecoratedCustomViewStyle
           |--Notification$DecoratedMediaCustomViewStyle
           |--Notification$Extender
           |--Notification$InboxStyle
           |--Notification$MediaStyle
           |--Notification$MessagingStyle
           |--Notification$MessagingStyle$Message
           |--Notification$Style
           |--Notification$WearableExtender
           |--NotificationManager
           |--NotificationManager$Policy
           |--PendingIntent
           |--PendingIntent$CanceledException
           |--PendingIntent$OnFinished
           |--Presentation
           |--ProgressDialog
           |--RemoteInput
           |--RemoteInput$Builder
           |--SearchManager
           |--SearchManager$OnCancelListener
           |--SearchManager$OnDismissListener
           |--SearchableInfo
           |--Service
           |--SharedElementCallback
           |--SharedElementCallback$OnSharedElementsReadyListener
           |--TabActivity
           |--TaskStackBuilder
           |--TimePickerDialog
           |--TimePickerDialog$OnTimeSetListener
           |--UiAutomation
           |--UiAutomation$AccessibilityEventFilter
           |--UiAutomation$OnAccessibilityEventListener
           |--UiModeManager
           |--VoiceInteractor
           |--VoiceInteractor$AbortVoiceRequest
           |--VoiceInteractor$CommandRequest
           |--VoiceInteractor$CompleteVoiceRequest
           |--VoiceInteractor$ConfirmationRequest
           |--VoiceInteractor$PickOptionRequest
           |--VoiceInteractor$PickOptionRequest$Option
           |--VoiceInteractor$Prompt
           |--VoiceInteractor$Request
           |--WallpaperInfo
           |--WallpaperManager
           |-+admin
              |--DeviceAdminInfo
              |--DeviceAdminReceiver
              |--DevicePolicyManager
              |--SecurityLog
              |--SecurityLog$SecurityEvent
              |--SystemUpdatePolicy
           |-+assist
              |--AssistContent
              |--AssistStructure
              |--AssistStructure$ViewNode
              |--AssistStructure$WindowNode
           |-+backup
              |--BackupAgent
              |--BackupAgentHelper
              |--BackupDataInput
              |--BackupDataInputStream
              |--BackupDataOutput
              |--BackupHelper
              |--BackupManager
              |--FileBackupHelper
              |--FullBackupDataOutput
              |--RestoreObserver
              |--SharedPreferencesBackupHelper
           |-+job
              |--JobInfo
              |--JobInfo$Builder
              |--JobInfo$TriggerContentUri
              |--JobParameters
              |--JobScheduler
              |--JobService
           |-+usage
              |--ConfigurationStats
              |--NetworkStats
              |--NetworkStats$Bucket
              |--NetworkStatsManager
              |--NetworkStatsManager$UsageCallback
              |--UsageEvents
              |--UsageEvents$Event
              |--UsageStats
              |--UsageStatsManager
        |-+appwidget
           |--AppWidgetHost
           |--AppWidgetHostView
           |--AppWidgetManager
           |--AppWidgetProvider
           |--AppWidgetProviderInfo
        |-+bluetooth
           |--BluetoothA2dp
           |--BluetoothAdapter
           |--BluetoothAdapter$LeScanCallback
           |--BluetoothAssignedNumbers
           |--BluetoothClass
           |--BluetoothClass$Device
           |--BluetoothClass$Device$Major
           |--BluetoothClass$Service
           |--BluetoothDevice
           |--BluetoothGatt
           |--BluetoothGattCallback
           |--BluetoothGattCharacteristic
           |--BluetoothGattDescriptor
           |--BluetoothGattServer
           |--BluetoothGattServerCallback
           |--BluetoothGattService
           |--BluetoothHeadset
           |--BluetoothHealth
           |--BluetoothHealthAppConfiguration
           |--BluetoothHealthCallback
           |--BluetoothManager
           |--BluetoothProfile
           |--BluetoothProfile$ServiceListener
           |--BluetoothServerSocket
           |--BluetoothSocket
           |-+le
              |--AdvertiseCallback
              |--AdvertiseData
              |--AdvertiseData$Builder
              |--AdvertiseSettings
              |--AdvertiseSettings$Builder
              |--BluetoothLeAdvertiser
              |--BluetoothLeScanner
              |--ScanCallback
              |--ScanFilter
              |--ScanFilter$Builder
              |--ScanRecord
              |--ScanResult
              |--ScanSettings
              |--ScanSettings$Builder
        |-+content
           |--AbstractThreadedSyncAdapter
           |--ActivityNotFoundException
           |--AsyncQueryHandler
           |--AsyncQueryHandler$WorkerArgs
           |--AsyncQueryHandler$WorkerHandler
           |--AsyncTaskLoader
           |--BroadcastReceiver
           |--BroadcastReceiver$PendingResult
           |--ClipData
           |--ClipData$Item
           |--ClipDescription
           |--ClipboardManager
           |--ClipboardManager$OnPrimaryClipChangedListener
           |--ComponentCallbacks
           |--ComponentCallbacks2
           |--ComponentName
           |--ContentProvider
           |--ContentProvider$PipeDataWriter
           |--ContentProviderClient
           |--ContentProviderOperation
           |--ContentProviderOperation$Builder
           |--ContentProviderResult
           |--ContentQueryMap
           |--ContentResolver
           |--ContentUris
           |--ContentValues
           |--Context
           |--ContextWrapper
           |--CursorLoader
           |--DialogInterface
           |--DialogInterface$OnCancelListener
           |--DialogInterface$OnClickListener
           |--DialogInterface$OnDismissListener
           |--DialogInterface$OnKeyListener
           |--DialogInterface$OnMultiChoiceClickListener
           |--DialogInterface$OnShowListener
           |--Entity
           |--Entity$NamedContentValues
           |--EntityIterator
           |--Intent
           |--Intent$FilterComparison
           |--Intent$ShortcutIconResource
           |--IntentFilter
           |--IntentFilter$AuthorityEntry
           |--IntentFilter$MalformedMimeTypeException
           |--IntentSender
           |--IntentSender$OnFinished
           |--IntentSender$SendIntentException
           |--Loader
           |--Loader$ForceLoadContentObserver
           |--Loader$OnLoadCanceledListener
           |--Loader$OnLoadCompleteListener
           |--MutableContextWrapper
           |--OperationApplicationException
           |--PeriodicSync
           |--ReceiverCallNotAllowedException
           |--RestrictionEntry
           |--RestrictionsManager
           |--SearchRecentSuggestionsProvider
           |--ServiceConnection
           |--SharedPreferences
           |--SharedPreferences$Editor
           |--SharedPreferences$OnSharedPreferenceChangeListener
           |--SyncAdapterType
           |--SyncContext
           |--SyncInfo
           |--SyncRequest
           |--SyncRequest$Builder
           |--SyncResult
           |--SyncStats
           |--SyncStatusObserver
           |--UriMatcher
           |--UriPermission
           |-+pm
              |--ActivityInfo
              |--ActivityInfo$WindowLayout
              |--ApplicationInfo
              |--ApplicationInfo$DisplayNameComparator
              |--ComponentInfo
              |--ConfigurationInfo
              |--FeatureGroupInfo
              |--FeatureInfo
              |--InstrumentationInfo
              |--LabeledIntent
              |--LauncherActivityInfo
              |--LauncherApps
              |--LauncherApps$Callback
              |--PackageInfo
              |--PackageInstaller
              |--PackageInstaller$Session
              |--PackageInstaller$SessionCallback
              |--PackageInstaller$SessionInfo
              |--PackageInstaller$SessionParams
              |--PackageItemInfo
              |--PackageItemInfo$DisplayNameComparator
              |--PackageManager
              |--PackageManager$NameNotFoundException
              |--PackageStats
              |--PathPermission
              |--PermissionGroupInfo
              |--PermissionInfo
              |--ProviderInfo
              |--ResolveInfo
              |--ResolveInfo$DisplayNameComparator
              |--ServiceInfo
              |--Signature
           |-+res
              |--AssetFileDescriptor
              |--AssetFileDescriptor$AutoCloseInputStream
              |--AssetFileDescriptor$AutoCloseOutputStream
              |--AssetManager
              |--AssetManager$AssetInputStream
              |--ColorStateList
              |--Configuration
              |--ObbInfo
              |--ObbScanner
              |--Resources
              |--Resources$NotFoundException
              |--Resources$Theme
              |--TypedArray
              |--XmlResourceParser
        |-+database
           |--AbstractCursor
           |--AbstractCursor$SelfContentObserver
           |--AbstractWindowedCursor
           |--CharArrayBuffer
           |--ContentObservable
           |--ContentObserver
           |--CrossProcessCursor
           |--CrossProcessCursorWrapper
           |--Cursor
           |--CursorIndexOutOfBoundsException
           |--CursorJoiner
           |--CursorJoiner$Result
           |--CursorWindow
           |--CursorWrapper
           |--DataSetObservable
           |--DataSetObserver
           |--DatabaseErrorHandler
           |--DatabaseUtils
           |--DatabaseUtils$InsertHelper
           |--DefaultDatabaseErrorHandler
           |--MatrixCursor
           |--MatrixCursor$RowBuilder
           |--MergeCursor
           |--Observable
           |--SQLException
           |--StaleDataException
           |-+sqlite
              |--SQLiteAbortException
              |--SQLiteAccessPermException
              |--SQLiteBindOrColumnIndexOutOfRangeException
              |--SQLiteBlobTooBigException
              |--SQLiteCantOpenDatabaseException
              |--SQLiteClosable
              |--SQLiteConstraintException
              |--SQLiteCursor
              |--SQLiteCursorDriver
              |--SQLiteDatabase
              |--SQLiteDatabase$CursorFactory
              |--SQLiteDatabaseCorruptException
              |--SQLiteDatabaseLockedException
              |--SQLiteDatatypeMismatchException
              |--SQLiteDiskIOException
              |--SQLiteDoneException
              |--SQLiteException
              |--SQLiteFullException
              |--SQLiteMisuseException
              |--SQLiteOpenHelper
              |--SQLiteOutOfMemoryException
              |--SQLiteProgram
              |--SQLiteQuery
              |--SQLiteQueryBuilder
              |--SQLiteReadOnlyDatabaseException
              |--SQLiteStatement
              |--SQLiteTableLockedException
              |--SQLiteTransactionListener
        |-+drm
           |--DrmConvertedStatus
           |--DrmErrorEvent
           |--DrmEvent
           |--DrmInfo
           |--DrmInfoEvent
           |--DrmInfoRequest
           |--DrmInfoStatus
           |--DrmManagerClient
           |--DrmManagerClient$OnErrorListener
           |--DrmManagerClient$OnEventListener
           |--DrmManagerClient$OnInfoListener
           |--DrmRights
           |--DrmStore
           |--DrmStore$Action
           |--DrmStore$ConstraintsColumns
           |--DrmStore$DrmObjectType
           |--DrmStore$Playback
           |--DrmStore$RightsStatus
           |--DrmSupportInfo
           |--DrmUtils
           |--DrmUtils$ExtendedMetadataParser
           |--ProcessedData
        |-+gesture
           |--Gesture
           |--GestureLibraries
           |--GestureLibrary
           |--GestureOverlayView
           |--GestureOverlayView$OnGestureListener
           |--GestureOverlayView$OnGesturePerformedListener
           |--GestureOverlayView$OnGesturingListener
           |--GesturePoint
           |--GestureStore
           |--GestureStroke
           |--GestureUtils
           |--OrientedBoundingBox
           |--Prediction
        |-+graphics
           |--Bitmap
           |--Bitmap$CompressFormat
           |--Bitmap$Config
           |--BitmapFactory
           |--BitmapFactory$Options
           |--BitmapRegionDecoder
           |--BitmapShader
           |--BlurMaskFilter
           |--BlurMaskFilter$Blur
           |--Camera
           |--Canvas
           |--Canvas$EdgeType
           |--Canvas$VertexMode
           |--Color
           |--ColorFilter
           |--ColorMatrix
           |--ColorMatrixColorFilter
           |--ComposePathEffect
           |--ComposeShader
           |--CornerPathEffect
           |--DashPathEffect
           |--DiscretePathEffect
           |--DrawFilter
           |--EmbossMaskFilter
           |--ImageFormat
           |--Interpolator
           |--Interpolator$Result
           |--LayerRasterizer
           |--LightingColorFilter
           |--LinearGradient
           |--MaskFilter
           |--Matrix
           |--Matrix$ScaleToFit
           |--Movie
           |--NinePatch
           |--Outline
           |--Paint
           |--Paint$Align
           |--Paint$Cap
           |--Paint$FontMetrics
           |--Paint$FontMetricsInt
           |--Paint$Join
           |--Paint$Style
           |--PaintFlagsDrawFilter
           |--Path
           |--Path$Direction
           |--Path$FillType
           |--Path$Op
           |--PathDashPathEffect
           |--PathDashPathEffect$Style
           |--PathEffect
           |--PathMeasure
           |--Picture
           |--PixelFormat
           |--Point
           |--PointF
           |--PorterDuff
           |--PorterDuff$Mode
           |--PorterDuffColorFilter
           |--PorterDuffXfermode
           |--RadialGradient
           |--Rasterizer
           |--Rect
           |--RectF
           |--Region
           |--Region$Op
           |--RegionIterator
           |--Shader
           |--Shader$TileMode
           |--SumPathEffect
           |--SurfaceTexture
           |--SurfaceTexture$OnFrameAvailableListener
           |--SurfaceTexture$OutOfResourcesException
           |--SweepGradient
           |--Typeface
           |--Xfermode
           |--YuvImage
           |-+drawable
              |--Animatable
              |--Animatable2
              |--Animatable2$AnimationCallback
              |--AnimatedStateListDrawable
              |--AnimatedVectorDrawable
              |--AnimationDrawable
              |--BitmapDrawable
              |--ClipDrawable
              |--ColorDrawable
              |--Drawable
              |--Drawable$Callback
              |--Drawable$ConstantState
              |--DrawableContainer
              |--DrawableContainer$DrawableContainerState
              |--DrawableWrapper
              |--GradientDrawable
              |--GradientDrawable$Orientation
              |--Icon
              |--Icon$OnDrawableLoadedListener
              |--InsetDrawable
              |--LayerDrawable
              |--LevelListDrawable
              |--NinePatchDrawable
              |--PaintDrawable
              |--PictureDrawable
              |--RippleDrawable
              |--RotateDrawable
              |--ScaleDrawable
              |--ShapeDrawable
              |--ShapeDrawable$ShaderFactory
              |--StateListDrawable
              |--TransitionDrawable
              |--VectorDrawable
              |-+shapes
                 |--ArcShape
                 |--OvalShape
                 |--PathShape
                 |--RectShape
                 |--RoundRectShape
                 |--Shape
           |-+pdf
              |--PdfDocument
              |--PdfDocument$Page
              |--PdfDocument$PageInfo
              |--PdfDocument$PageInfo$Builder
              |--PdfRenderer
              |--PdfRenderer$Page
        |-+hardware
           |--Camera
           |--Camera$Area
           |--Camera$AutoFocusCallback
           |--Camera$AutoFocusMoveCallback
           |--Camera$CameraInfo
           |--Camera$ErrorCallback
           |--Camera$Face
           |--Camera$FaceDetectionListener
           |--Camera$OnZoomChangeListener
           |--Camera$Parameters
           |--Camera$PictureCallback
           |--Camera$PreviewCallback
           |--Camera$ShutterCallback
           |--Camera$Size
           |--ConsumerIrManager
           |--ConsumerIrManager$CarrierFrequencyRange
           |--GeomagneticField
           |--Sensor
           |--SensorAdditionalInfo
           |--SensorEvent
           |--SensorEventCallback
           |--SensorEventListener
           |--SensorEventListener2
           |--SensorListener
           |--SensorManager
           |--SensorManager$DynamicSensorCallback
           |--TriggerEvent
           |--TriggerEventListener
           |-+camera2
              |--CameraAccessException
              |--CameraCaptureSession
              |--CameraCaptureSession$CaptureCallback
              |--CameraCaptureSession$StateCallback
              |--CameraCharacteristics
              |--CameraCharacteristics$Key
              |--CameraConstrainedHighSpeedCaptureSession
              |--CameraDevice
              |--CameraDevice$StateCallback
              |--CameraManager
              |--CameraManager$AvailabilityCallback
              |--CameraManager$TorchCallback
              |--CameraMetadata
              |--CaptureFailure
              |--CaptureRequest
              |--CaptureRequest$Builder
              |--CaptureRequest$Key
              |--CaptureResult
              |--CaptureResult$Key
              |--DngCreator
              |--TotalCaptureResult
              |-+params
                 |--BlackLevelPattern
                 |--ColorSpaceTransform
                 |--Face
                 |--InputConfiguration
                 |--LensShadingMap
                 |--MeteringRectangle
                 |--OutputConfiguration
                 |--RggbChannelVector
                 |--StreamConfigurationMap
                 |--TonemapCurve
           |-+display
              |--DisplayManager
              |--DisplayManager$DisplayListener
              |--VirtualDisplay
              |--VirtualDisplay$Callback
           |-+fingerprint
              |--FingerprintManager
              |--FingerprintManager$AuthenticationCallback
              |--FingerprintManager$AuthenticationResult
              |--FingerprintManager$CryptoObject
           |-+input
              |--InputManager
              |--InputManager$InputDeviceListener
           |-+usb
              |--UsbAccessory
              |--UsbConfiguration
              |--UsbConstants
              |--UsbDevice
              |--UsbDeviceConnection
              |--UsbEndpoint
              |--UsbInterface
              |--UsbManager
              |--UsbRequest
        |-+icu
           |-+lang
              |--UCharacter
              |--UCharacter$BidiPairedBracketType
              |--UCharacter$DecompositionType
              |--UCharacter$EastAsianWidth
              |--UCharacter$GraphemeClusterBreak
              |--UCharacter$HangulSyllableType
              |--UCharacter$JoiningGroup
              |--UCharacter$JoiningType
              |--UCharacter$LineBreak
              |--UCharacter$NumericType
              |--UCharacter$SentenceBreak
              |--UCharacter$UnicodeBlock
              |--UCharacter$WordBreak
              |--UCharacterCategory
              |--UCharacterDirection
              |--UCharacterEnums
              |--UCharacterEnums$ECharacterCategory
              |--UCharacterEnums$ECharacterDirection
              |--UProperty
              |--UProperty$NameChoice
              |--UScript
              |--UScript$ScriptUsage
           |-+math
              |--BigDecimal
              |--MathContext
           |-+text
              |--AlphabeticIndex
              |--AlphabeticIndex$Bucket
              |--AlphabeticIndex$Bucket$LabelType
              |--AlphabeticIndex$ImmutableIndex
              |--AlphabeticIndex$Record
              |--BreakIterator
              |--CollationElementIterator
              |--CollationKey
              |--CollationKey$BoundMode
              |--Collator
              |--Collator$ReorderCodes
              |--CompactDecimalFormat
              |--CompactDecimalFormat$CompactStyle
              |--CurrencyPluralInfo
              |--DateFormat
              |--DateFormat$BooleanAttribute
              |--DateFormat$Field
              |--DateFormatSymbols
              |--DateIntervalFormat
              |--DateIntervalInfo
              |--DateIntervalInfo$PatternInfo
              |--DateTimePatternGenerator
              |--DateTimePatternGenerator$PatternInfo
              |--DecimalFormat
              |--DecimalFormatSymbols
              |--DisplayContext
              |--DisplayContext$Type
              |--IDNA
              |--IDNA$Error
              |--IDNA$Info
              |--LocaleDisplayNames
              |--LocaleDisplayNames$DialectHandling
              |--MeasureFormat
              |--MeasureFormat$FormatWidth
              |--MessageFormat
              |--MessageFormat$Field
              |--MessagePattern
              |--MessagePattern$ApostropheMode
              |--MessagePattern$ArgType
              |--MessagePattern$Part
              |--MessagePattern$Part$Type
              |--Normalizer
              |--Normalizer$QuickCheckResult
              |--Normalizer2
              |--Normalizer2$Mode
              |--NumberFormat
              |--NumberFormat$Field
              |--NumberingSystem
              |--PluralFormat
              |--PluralRules
              |--PluralRules$PluralType
              |--RelativeDateTimeFormatter
              |--RelativeDateTimeFormatter$AbsoluteUnit
              |--RelativeDateTimeFormatter$Direction
              |--RelativeDateTimeFormatter$RelativeUnit
              |--RelativeDateTimeFormatter$Style
              |--Replaceable
              |--RuleBasedCollator
              |--SearchIterator
              |--SearchIterator$ElementComparisonType
              |--SelectFormat
              |--SimpleDateFormat
              |--StringPrepParseException
              |--StringSearch
              |--SymbolTable
              |--TimeZoneFormat
              |--TimeZoneFormat$GMTOffsetPatternType
              |--TimeZoneFormat$ParseOption
              |--TimeZoneFormat$Style
              |--TimeZoneFormat$TimeType
              |--TimeZoneNames
              |--TimeZoneNames$NameType
              |--UCharacterIterator
              |--UFormat
              |--UnicodeFilter
              |--UnicodeMatcher
              |--UnicodeSet
              |--UnicodeSet$ComparisonStyle
              |--UnicodeSet$EntryRange
              |--UnicodeSet$SpanCondition
              |--UnicodeSetIterator
              |--UnicodeSetSpanner
              |--UnicodeSetSpanner$CountMethod
              |--UnicodeSetSpanner$TrimOption
           |-+util
              |--BuddhistCalendar
              |--Calendar
              |--Calendar$WeekData
              |--ChineseCalendar
              |--CopticCalendar
              |--Currency
              |--Currency$CurrencyUsage
              |--CurrencyAmount
              |--DateInterval
              |--Freezable
              |--GregorianCalendar
              |--HebrewCalendar
              |--ICUUncheckedIOException
              |--IndianCalendar
              |--IslamicCalendar
              |--IslamicCalendar$CalculationType
              |--JapaneseCalendar
              |--Measure
              |--MeasureUnit
              |--Output
              |--RangeValueIterator
              |--RangeValueIterator$Element
              |--TaiwanCalendar
              |--TimeUnit
              |--TimeZone
              |--TimeZone$SystemTimeZoneType
              |--ULocale
              |--ULocale$Builder
              |--ULocale$Category
              |--ValueIterator
              |--ValueIterator$Element
              |--VersionInfo
        |-+inputmethodservice
           |--AbstractInputMethodService
           |--AbstractInputMethodService$AbstractInputMethodImpl
           |--AbstractInputMethodService$AbstractInputMethodSessionImpl
           |--ExtractEditText
           |--InputMethodService
           |--InputMethodService$InputMethodImpl
           |--InputMethodService$InputMethodSessionImpl
           |--InputMethodService$Insets
           |--Keyboard
           |--Keyboard$Key
           |--Keyboard$Row
           |--KeyboardView
           |--KeyboardView$OnKeyboardActionListener
        |-+location
           |--Address
           |--Criteria
           |--Geocoder
           |--GnssClock
           |--GnssMeasurement
           |--GnssMeasurementsEvent
           |--GnssMeasurementsEvent$Callback
           |--GnssNavigationMessage
           |--GnssNavigationMessage$Callback
           |--GnssStatus
           |--GnssStatus$Callback
           |--GpsSatellite
           |--GpsStatus
           |--GpsStatus$Listener
           |--GpsStatus$NmeaListener
           |--Location
           |--LocationListener
           |--LocationManager
           |--LocationProvider
           |--OnNmeaMessageListener
           |--SettingInjectorService
        |-+media
           |--AsyncPlayer
           |--AudioAttributes
           |--AudioAttributes$Builder
           |--AudioDeviceCallback
           |--AudioDeviceInfo
           |--AudioFormat
           |--AudioFormat$Builder
           |--AudioManager
           |--AudioManager$AudioRecordingCallback
           |--AudioManager$OnAudioFocusChangeListener
           |--AudioRecord
           |--AudioRecord$Builder
           |--AudioRecord$OnRecordPositionUpdateListener
           |--AudioRecord$OnRoutingChangedListener
           |--AudioRecordingConfiguration
           |--AudioRouting
           |--AudioRouting$OnRoutingChangedListener
           |--AudioTimestamp
           |--AudioTrack
           |--AudioTrack$Builder
           |--AudioTrack$OnPlaybackPositionUpdateListener
           |--AudioTrack$OnRoutingChangedListener
           |--CamcorderProfile
           |--CameraProfile
           |--DeniedByServerException
           |--DrmInitData
           |--DrmInitData$SchemeInitData
           |--ExifInterface
           |--FaceDetector
           |--FaceDetector$Face
           |--Image
           |--Image$Plane
           |--ImageReader
           |--ImageReader$OnImageAvailableListener
           |--ImageWriter
           |--ImageWriter$OnImageReleasedListener
           |--JetPlayer
           |--JetPlayer$OnJetEventListener
           |--MediaActionSound
           |--MediaCodec
           |--MediaCodec$BufferInfo
           |--MediaCodec$Callback
           |--MediaCodec$CodecException
           |--MediaCodec$CryptoException
           |--MediaCodec$CryptoInfo
           |--MediaCodec$CryptoInfo$Pattern
           |--MediaCodec$OnFrameRenderedListener
           |--MediaCodecInfo
           |--MediaCodecInfo$AudioCapabilities
           |--MediaCodecInfo$CodecCapabilities
           |--MediaCodecInfo$CodecProfileLevel
           |--MediaCodecInfo$EncoderCapabilities
           |--MediaCodecInfo$VideoCapabilities
           |--MediaCodecList
           |--MediaCrypto
           |--MediaCryptoException
           |--MediaDataSource
           |--MediaDescription
           |--MediaDescription$Builder
           |--MediaDrm
           |--MediaDrm$CryptoSession
           |--MediaDrm$KeyRequest
           |--MediaDrm$KeyStatus
           |--MediaDrm$MediaDrmStateException
           |--MediaDrm$OnEventListener
           |--MediaDrm$OnExpirationUpdateListener
           |--MediaDrm$OnKeyStatusChangeListener
           |--MediaDrm$ProvisionRequest
           |--MediaDrmException
           |--MediaDrmResetException
           |--MediaExtractor
           |--MediaFormat
           |--MediaMetadata
           |--MediaMetadata$Builder
           |--MediaMetadataEditor
           |--MediaMetadataRetriever
           |--MediaMuxer
           |--MediaMuxer$OutputFormat
           |--MediaPlayer
           |--MediaPlayer$OnBufferingUpdateListener
           |--MediaPlayer$OnCompletionListener
           |--MediaPlayer$OnErrorListener
           |--MediaPlayer$OnInfoListener
           |--MediaPlayer$OnPreparedListener
           |--MediaPlayer$OnSeekCompleteListener
           |--MediaPlayer$OnTimedMetaDataAvailableListener
           |--MediaPlayer$OnTimedTextListener
           |--MediaPlayer$OnVideoSizeChangedListener
           |--MediaPlayer$TrackInfo
           |--MediaRecorder
           |--MediaRecorder$AudioEncoder
           |--MediaRecorder$AudioSource
           |--MediaRecorder$OnErrorListener
           |--MediaRecorder$OnInfoListener
           |--MediaRecorder$OutputFormat
           |--MediaRecorder$VideoEncoder
           |--MediaRecorder$VideoSource
           |--MediaRouter
           |--MediaRouter$Callback
           |--MediaRouter$RouteCategory
           |--MediaRouter$RouteGroup
           |--MediaRouter$RouteInfo
           |--MediaRouter$SimpleCallback
           |--MediaRouter$UserRouteInfo
           |--MediaRouter$VolumeCallback
           |--MediaScannerConnection
           |--MediaScannerConnection$MediaScannerConnectionClient
           |--MediaScannerConnection$OnScanCompletedListener
           |--MediaSync
           |--MediaSync$Callback
           |--MediaSync$OnErrorListener
           |--MediaSyncEvent
           |--MediaTimestamp
           |--NotProvisionedException
           |--PlaybackParams
           |--Rating
           |--RemoteControlClient
           |--RemoteControlClient$MetadataEditor
           |--RemoteControlClient$OnGetPlaybackPositionListener
           |--RemoteControlClient$OnMetadataUpdateListener
           |--RemoteControlClient$OnPlaybackPositionUpdateListener
           |--RemoteController
           |--RemoteController$MetadataEditor
           |--RemoteController$OnClientUpdateListener
           |--ResourceBusyException
           |--Ringtone
           |--RingtoneManager
           |--SoundPool
           |--SoundPool$Builder
           |--SoundPool$OnLoadCompleteListener
           |--SyncParams
           |--ThumbnailUtils
           |--TimedMetaData
           |--TimedText
           |--ToneGenerator
           |--UnsupportedSchemeException
           |--VolumeProvider
           |-+audiofx
              |--AcousticEchoCanceler
              |--AudioEffect
              |--AudioEffect$Descriptor
              |--AudioEffect$OnControlStatusChangeListener
              |--AudioEffect$OnEnableStatusChangeListener
              |--AutomaticGainControl
              |--BassBoost
              |--BassBoost$OnParameterChangeListener
              |--BassBoost$Settings
              |--EnvironmentalReverb
              |--EnvironmentalReverb$OnParameterChangeListener
              |--EnvironmentalReverb$Settings
              |--Equalizer
              |--Equalizer$OnParameterChangeListener
              |--Equalizer$Settings
              |--LoudnessEnhancer
              |--NoiseSuppressor
              |--PresetReverb
              |--PresetReverb$OnParameterChangeListener
              |--PresetReverb$Settings
              |--Virtualizer
              |--Virtualizer$OnParameterChangeListener
              |--Virtualizer$Settings
              |--Visualizer
              |--Visualizer$MeasurementPeakRms
              |--Visualizer$OnDataCaptureListener
           |-+browse
              |--MediaBrowser
              |--MediaBrowser$ConnectionCallback
              |--MediaBrowser$ItemCallback
              |--MediaBrowser$MediaItem
              |--MediaBrowser$SubscriptionCallback
           |-+effect
              |--Effect
              |--EffectContext
              |--EffectFactory
              |--EffectUpdateListener
           |-+midi
              |--MidiDevice
              |--MidiDevice$MidiConnection
              |--MidiDeviceInfo
              |--MidiDeviceInfo$PortInfo
              |--MidiDeviceService
              |--MidiDeviceStatus
              |--MidiInputPort
              |--MidiManager
              |--MidiManager$DeviceCallback
              |--MidiManager$OnDeviceOpenedListener
              |--MidiOutputPort
              |--MidiReceiver
              |--MidiSender
           |-+projection
              |--MediaProjection
              |--MediaProjection$Callback
              |--MediaProjectionManager
           |-+session
              |--MediaController
              |--MediaController$Callback
              |--MediaController$PlaybackInfo
              |--MediaController$TransportControls
              |--MediaSession
              |--MediaSession$Callback
              |--MediaSession$QueueItem
              |--MediaSession$Token
              |--MediaSessionManager
              |--MediaSessionManager$OnActiveSessionsChangedListener
              |--PlaybackState
              |--PlaybackState$Builder
              |--PlaybackState$CustomAction
              |--PlaybackState$CustomAction$Builder
           |-+tv
              |--TvContentRating
              |--TvContract
              |--TvContract$BaseTvColumns
              |--TvContract$Channels
              |--TvContract$Channels$Logo
              |--TvContract$Programs
              |--TvContract$Programs$Genres
              |--TvContract$RecordedPrograms
              |--TvInputInfo
              |--TvInputInfo$Builder
              |--TvInputManager
              |--TvInputManager$TvInputCallback
              |--TvInputService
              |--TvInputService$HardwareSession
              |--TvInputService$RecordingSession
              |--TvInputService$Session
              |--TvRecordingClient
              |--TvRecordingClient$RecordingCallback
              |--TvTrackInfo
              |--TvTrackInfo$Builder
              |--TvView
              |--TvView$OnUnhandledInputEventListener
              |--TvView$TimeShiftPositionCallback
              |--TvView$TvInputCallback
        |-+mtp
           |--MtpConstants
           |--MtpDevice
           |--MtpDeviceInfo
           |--MtpEvent
           |--MtpObjectInfo
           |--MtpObjectInfo$Builder
           |--MtpStorageInfo
        |-+net
           |--CaptivePortal
           |--ConnectivityManager
           |--ConnectivityManager$NetworkCallback
           |--ConnectivityManager$OnNetworkActiveListener
           |--Credentials
           |--DhcpInfo
           |--IpPrefix
           |--LinkAddress
           |--LinkProperties
           |--LocalServerSocket
           |--LocalSocket
           |--LocalSocketAddress
           |--LocalSocketAddress$Namespace
           |--MailTo
           |--Network
           |--NetworkCapabilities
           |--NetworkInfo
           |--NetworkInfo$DetailedState
           |--NetworkInfo$State
           |--NetworkRequest
           |--NetworkRequest$Builder
           |--ParseException
           |--Proxy
           |--ProxyInfo
           |--PskKeyManager
           |--RouteInfo
           |--SSLCertificateSocketFactory
           |--SSLSessionCache
           |--TrafficStats
           |--Uri
           |--Uri$Builder
           |--UrlQuerySanitizer
           |--UrlQuerySanitizer$IllegalCharacterValueSanitizer
           |--UrlQuerySanitizer$ParameterValuePair
           |--UrlQuerySanitizer$ValueSanitizer
           |--VpnService
           |--VpnService$Builder
           |-+http
              |--HttpResponseCache
              |--SslCertificate
              |--SslCertificate$DName
              |--SslError
              |--X509TrustManagerExtensions
           |-+nsd
              |--NsdManager
              |--NsdManager$DiscoveryListener
              |--NsdManager$RegistrationListener
              |--NsdManager$ResolveListener
              |--NsdServiceInfo
           |-+rtp
              |--AudioCodec
              |--AudioGroup
              |--AudioStream
              |--RtpStream
           |-+sip
              |--SipAudioCall
              |--SipAudioCall$Listener
              |--SipErrorCode
              |--SipException
              |--SipManager
              |--SipProfile
              |--SipProfile$Builder
              |--SipRegistrationListener
              |--SipSession
              |--SipSession$Listener
              |--SipSession$State
           |-+wifi
              |--ScanResult
              |--SupplicantState
              |--WifiConfiguration
              |--WifiConfiguration$AuthAlgorithm
              |--WifiConfiguration$GroupCipher
              |--WifiConfiguration$KeyMgmt
              |--WifiConfiguration$PairwiseCipher
              |--WifiConfiguration$Protocol
              |--WifiConfiguration$Status
              |--WifiEnterpriseConfig
              |--WifiEnterpriseConfig$Eap
              |--WifiEnterpriseConfig$Phase2
              |--WifiInfo
              |--WifiManager
              |--WifiManager$MulticastLock
              |--WifiManager$WifiLock
              |--WifiManager$WpsCallback
              |--WpsInfo
              |-+p2p
                 |--WifiP2pConfig
                 |--WifiP2pDevice
                 |--WifiP2pDeviceList
                 |--WifiP2pGroup
                 |--WifiP2pInfo
                 |--WifiP2pManager
                 |--WifiP2pManager$ActionListener
                 |--WifiP2pManager$Channel
                 |--WifiP2pManager$ChannelListener
                 |--WifiP2pManager$ConnectionInfoListener
                 |--WifiP2pManager$DnsSdServiceResponseListener
                 |--WifiP2pManager$DnsSdTxtRecordListener
                 |--WifiP2pManager$GroupInfoListener
                 |--WifiP2pManager$PeerListListener
                 |--WifiP2pManager$ServiceResponseListener
                 |--WifiP2pManager$UpnpServiceResponseListener
                 |-+nsd
                    |--WifiP2pDnsSdServiceInfo
                    |--WifiP2pDnsSdServiceRequest
                    |--WifiP2pServiceInfo
                    |--WifiP2pServiceRequest
                    |--WifiP2pUpnpServiceInfo
                    |--WifiP2pUpnpServiceRequest
        |-+nfc
           |--FormatException
           |--NdefMessage
           |--NdefRecord
           |--NfcAdapter
           |--NfcAdapter$CreateBeamUrisCallback
           |--NfcAdapter$CreateNdefMessageCallback
           |--NfcAdapter$OnNdefPushCompleteCallback
           |--NfcAdapter$OnTagRemovedListener
           |--NfcAdapter$ReaderCallback
           |--NfcEvent
           |--NfcManager
           |--Tag
           |--TagLostException
           |-+cardemulation
              |--CardEmulation
              |--HostApduService
              |--HostNfcFService
              |--NfcFCardEmulation
              |--OffHostApduService
           |-+tech
              |--IsoDep
              |--MifareClassic
              |--MifareUltralight
              |--Ndef
              |--NdefFormatable
              |--NfcA
              |--NfcB
              |--NfcBarcode
              |--NfcF
              |--NfcV
              |--TagTechnology
        |-+opengl
           |--EGL14
           |--EGLConfig
           |--EGLContext
           |--EGLDisplay
           |--EGLExt
           |--EGLObjectHandle
           |--EGLSurface
           |--ETC1
           |--ETC1Util
           |--ETC1Util$ETC1Texture
           |--GLDebugHelper
           |--GLES10
           |--GLES10Ext
           |--GLES11
           |--GLES11Ext
           |--GLES20
           |--GLES30
           |--GLES31
           |--GLES31Ext
           |--GLES31Ext$DebugProcKHR
           |--GLES32
           |--GLES32$DebugProc
           |--GLException
           |--GLSurfaceView
           |--GLSurfaceView$EGLConfigChooser
           |--GLSurfaceView$EGLContextFactory
           |--GLSurfaceView$EGLWindowSurfaceFactory
           |--GLSurfaceView$GLWrapper
           |--GLSurfaceView$Renderer
           |--GLU
           |--GLUtils
           |--Matrix
           |--Visibility
        |-+os
           |--AsyncTask
           |--AsyncTask$Status
           |--BadParcelableException
           |--BaseBundle
           |--BatteryManager
           |--Binder
           |--Build
           |--Build$VERSION
           |--Build$VERSION_CODES
           |--Bundle
           |--CancellationSignal
           |--CancellationSignal$OnCancelListener
           |--ConditionVariable
           |--CountDownTimer
           |--CpuUsageInfo
           |--DeadObjectException
           |--DeadSystemException
           |--Debug
           |--Debug$InstructionCount
           |--Debug$MemoryInfo
           |--DropBoxManager
           |--DropBoxManager$Entry
           |--Environment
           |--FileObserver
           |--FileUriExposedException
           |--Handler
           |--Handler$Callback
           |--HandlerThread
           |--HardwarePropertiesManager
           |--IBinder
           |--IBinder$DeathRecipient
           |--IInterface
           |--LocaleList
           |--Looper
           |--MemoryFile
           |--Message
           |--MessageQueue
           |--MessageQueue$IdleHandler
           |--MessageQueue$OnFileDescriptorEventListener
           |--Messenger
           |--NetworkOnMainThreadException
           |--OperationCanceledException
           |--Parcel
           |--ParcelFileDescriptor
           |--ParcelFileDescriptor$AutoCloseInputStream
           |--ParcelFileDescriptor$AutoCloseOutputStream
           |--ParcelFileDescriptor$FileDescriptorDetachedException
           |--ParcelFileDescriptor$OnCloseListener
           |--ParcelFormatException
           |--ParcelUuid
           |--Parcelable
           |--Parcelable$ClassLoaderCreator
           |--Parcelable$Creator
           |--PatternMatcher
           |--PersistableBundle
           |--PowerManager
           |--PowerManager$WakeLock
           |--Process
           |--RecoverySystem
           |--RecoverySystem$ProgressListener
           |--RemoteCallbackList
           |--RemoteException
           |--ResultReceiver
           |--StatFs
           |--StrictMode
           |--StrictMode$ThreadPolicy
           |--StrictMode$ThreadPolicy$Builder
           |--StrictMode$VmPolicy
           |--StrictMode$VmPolicy$Builder
           |--SystemClock
           |--TokenWatcher
           |--Trace
           |--TransactionTooLargeException
           |--UserHandle
           |--UserManager
           |--Vibrator
           |--WorkSource
           |-+health
              |--HealthStats
              |--PackageHealthStats
              |--PidHealthStats
              |--ProcessHealthStats
              |--ServiceHealthStats
              |--SystemHealthManager
              |--TimerStat
              |--UidHealthStats
           |-+storage
              |--OnObbStateChangeListener
              |--StorageManager
              |--StorageVolume
        |-+preference
           |--CheckBoxPreference
           |--DialogPreference
           |--EditTextPreference
           |--ListPreference
           |--MultiSelectListPreference
           |--Preference
           |--Preference$BaseSavedState
           |--Preference$OnPreferenceChangeListener
           |--Preference$OnPreferenceClickListener
           |--PreferenceActivity
           |--PreferenceActivity$Header
           |--PreferenceCategory
           |--PreferenceFragment
           |--PreferenceFragment$OnPreferenceStartFragmentCallback
           |--PreferenceGroup
           |--PreferenceManager
           |--PreferenceManager$OnActivityDestroyListener
           |--PreferenceManager$OnActivityResultListener
           |--PreferenceManager$OnActivityStopListener
           |--PreferenceScreen
           |--RingtonePreference
           |--SwitchPreference
           |--TwoStatePreference
        |-+print
           |--PageRange
           |--PrintAttributes
           |--PrintAttributes$Builder
           |--PrintAttributes$Margins
           |--PrintAttributes$MediaSize
           |--PrintAttributes$Resolution
           |--PrintDocumentAdapter
           |--PrintDocumentAdapter$LayoutResultCallback
           |--PrintDocumentAdapter$WriteResultCallback
           |--PrintDocumentInfo
           |--PrintDocumentInfo$Builder
           |--PrintJob
           |--PrintJobId
           |--PrintJobInfo
           |--PrintJobInfo$Builder
           |--PrintManager
           |--PrinterCapabilitiesInfo
           |--PrinterCapabilitiesInfo$Builder
           |--PrinterId
           |--PrinterInfo
           |--PrinterInfo$Builder
           |-+pdf
              |--PrintedPdfDocument
        |-+printservice
           |--CustomPrinterIconCallback
           |--PrintDocument
           |--PrintJob
           |--PrintService
           |--PrinterDiscoverySession
        |-+provider
           |--AlarmClock
           |--BaseColumns
           |--BlockedNumberContract
           |--BlockedNumberContract$BlockedNumbers
           |--Browser
           |--CalendarContract
           |--CalendarContract$Attendees
           |--CalendarContract$AttendeesColumns
           |--CalendarContract$CalendarAlerts
           |--CalendarContract$CalendarAlertsColumns
           |--CalendarContract$CalendarCache
           |--CalendarContract$CalendarCacheColumns
           |--CalendarContract$CalendarColumns
           |--CalendarContract$CalendarEntity
           |--CalendarContract$CalendarSyncColumns
           |--CalendarContract$Calendars
           |--CalendarContract$Colors
           |--CalendarContract$ColorsColumns
           |--CalendarContract$EventDays
           |--CalendarContract$EventDaysColumns
           |--CalendarContract$Events
           |--CalendarContract$EventsColumns
           |--CalendarContract$EventsEntity
           |--CalendarContract$ExtendedProperties
           |--CalendarContract$ExtendedPropertiesColumns
           |--CalendarContract$Instances
           |--CalendarContract$Reminders
           |--CalendarContract$RemindersColumns
           |--CalendarContract$SyncColumns
           |--CalendarContract$SyncState
           |--CallLog
           |--CallLog$Calls
           |--Contacts
           |--Contacts$ContactMethods
           |--Contacts$ContactMethodsColumns
           |--Contacts$Extensions
           |--Contacts$ExtensionsColumns
           |--Contacts$GroupMembership
           |--Contacts$Groups
           |--Contacts$GroupsColumns
           |--Contacts$Intents
           |--Contacts$Intents$Insert
           |--Contacts$Intents$UI
           |--Contacts$OrganizationColumns
           |--Contacts$Organizations
           |--Contacts$People
           |--Contacts$People$ContactMethods
           |--Contacts$People$Extensions
           |--Contacts$People$Phones
           |--Contacts$PeopleColumns
           |--Contacts$Phones
           |--Contacts$PhonesColumns
           |--Contacts$Photos
           |--Contacts$PhotosColumns
           |--Contacts$PresenceColumns
           |--Contacts$Settings
           |--Contacts$SettingsColumns
           |--ContactsContract
           |--ContactsContract$AggregationExceptions
           |--ContactsContract$BaseSyncColumns
           |--ContactsContract$CommonDataKinds
           |--ContactsContract$CommonDataKinds$BaseTypes
           |--ContactsContract$CommonDataKinds$Callable
           |--ContactsContract$CommonDataKinds$CommonColumns
           |--ContactsContract$CommonDataKinds$Contactables
           |--ContactsContract$CommonDataKinds$Email
           |--ContactsContract$CommonDataKinds$Event
           |--ContactsContract$CommonDataKinds$GroupMembership
           |--ContactsContract$CommonDataKinds$Identity
           |--ContactsContract$CommonDataKinds$Im
           |--ContactsContract$CommonDataKinds$Nickname
           |--ContactsContract$CommonDataKinds$Note
           |--ContactsContract$CommonDataKinds$Organization
           |--ContactsContract$CommonDataKinds$Phone
           |--ContactsContract$CommonDataKinds$Photo
           |--ContactsContract$CommonDataKinds$Relation
           |--ContactsContract$CommonDataKinds$SipAddress
           |--ContactsContract$CommonDataKinds$StructuredName
           |--ContactsContract$CommonDataKinds$StructuredPostal
           |--ContactsContract$CommonDataKinds$Website
           |--ContactsContract$ContactNameColumns
           |--ContactsContract$ContactOptionsColumns
           |--ContactsContract$ContactStatusColumns
           |--ContactsContract$Contacts
           |--ContactsContract$Contacts$AggregationSuggestions
           |--ContactsContract$Contacts$AggregationSuggestions$Builder
           |--ContactsContract$Contacts$Data
           |--ContactsContract$Contacts$Entity
           |--ContactsContract$Contacts$Photo
           |--ContactsContract$ContactsColumns
           |--ContactsContract$Data
           |--ContactsContract$DataColumns
           |--ContactsContract$DataColumnsWithJoins
           |--ContactsContract$DataUsageFeedback
           |--ContactsContract$DataUsageStatColumns
           |--ContactsContract$DeletedContacts
           |--ContactsContract$DeletedContactsColumns
           |--ContactsContract$Directory
           |--ContactsContract$DisplayNameSources
           |--ContactsContract$DisplayPhoto
           |--ContactsContract$FullNameStyle
           |--ContactsContract$Groups
           |--ContactsContract$GroupsColumns
           |--ContactsContract$Intents
           |--ContactsContract$Intents$Insert
           |--ContactsContract$PhoneLookup
           |--ContactsContract$PhoneLookupColumns
           |--ContactsContract$PhoneticNameStyle
           |--ContactsContract$PinnedPositions
           |--ContactsContract$Presence
           |--ContactsContract$PresenceColumns
           |--ContactsContract$Profile
           |--ContactsContract$ProfileSyncState
           |--ContactsContract$ProviderStatus
           |--ContactsContract$QuickContact
           |--ContactsContract$RawContacts
           |--ContactsContract$RawContacts$Data
           |--ContactsContract$RawContacts$DisplayPhoto
           |--ContactsContract$RawContacts$Entity
           |--ContactsContract$RawContactsColumns
           |--ContactsContract$RawContactsEntity
           |--ContactsContract$SearchSnippets
           |--ContactsContract$Settings
           |--ContactsContract$SettingsColumns
           |--ContactsContract$StatusColumns
           |--ContactsContract$StatusUpdates
           |--ContactsContract$SyncColumns
           |--ContactsContract$SyncState
           |--DocumentsContract
           |--DocumentsContract$Document
           |--DocumentsContract$Root
           |--DocumentsProvider
           |--LiveFolders
           |--MediaStore
           |--MediaStore$Audio
           |--MediaStore$Audio$AlbumColumns
           |--MediaStore$Audio$Albums
           |--MediaStore$Audio$ArtistColumns
           |--MediaStore$Audio$Artists
           |--MediaStore$Audio$Artists$Albums
           |--MediaStore$Audio$AudioColumns
           |--MediaStore$Audio$Genres
           |--MediaStore$Audio$Genres$Members
           |--MediaStore$Audio$GenresColumns
           |--MediaStore$Audio$Media
           |--MediaStore$Audio$Playlists
           |--MediaStore$Audio$Playlists$Members
           |--MediaStore$Audio$PlaylistsColumns
           |--MediaStore$Audio$Radio
           |--MediaStore$Files
           |--MediaStore$Files$FileColumns
           |--MediaStore$Images
           |--MediaStore$Images$ImageColumns
           |--MediaStore$Images$Media
           |--MediaStore$Images$Thumbnails
           |--MediaStore$MediaColumns
           |--MediaStore$Video
           |--MediaStore$Video$Media
           |--MediaStore$Video$Thumbnails
           |--MediaStore$Video$VideoColumns
           |--OpenableColumns
           |--SearchRecentSuggestions
           |--Settings
           |--Settings$Global
           |--Settings$NameValueTable
           |--Settings$Secure
           |--Settings$SettingNotFoundException
           |--Settings$System
           |--SyncStateContract
           |--SyncStateContract$Columns
           |--SyncStateContract$Constants
           |--SyncStateContract$Helpers
           |--Telephony
           |--Telephony$BaseMmsColumns
           |--Telephony$CanonicalAddressesColumns
           |--Telephony$Carriers
           |--Telephony$Mms
           |--Telephony$Mms$Addr
           |--Telephony$Mms$Draft
           |--Telephony$Mms$Inbox
           |--Telephony$Mms$Intents
           |--Telephony$Mms$Outbox
           |--Telephony$Mms$Part
           |--Telephony$Mms$Rate
           |--Telephony$Mms$Sent
           |--Telephony$MmsSms
           |--Telephony$MmsSms$PendingMessages
           |--Telephony$Sms
           |--Telephony$Sms$Conversations
           |--Telephony$Sms$Draft
           |--Telephony$Sms$Inbox
           |--Telephony$Sms$Intents
           |--Telephony$Sms$Outbox
           |--Telephony$Sms$Sent
           |--Telephony$TextBasedSmsColumns
           |--Telephony$Threads
           |--Telephony$ThreadsColumns
           |--UserDictionary
           |--UserDictionary$Words
           |--VoicemailContract
           |--VoicemailContract$Status
           |--VoicemailContract$Voicemails
        |-+renderscript
           |--Allocation
           |--Allocation$MipmapControl
           |--Allocation$OnBufferAvailableListener
           |--AllocationAdapter
           |--BaseObj
           |--Byte2
           |--Byte3
           |--Byte4
           |--Double2
           |--Double3
           |--Double4
           |--Element
           |--Element$Builder
           |--Element$DataKind
           |--Element$DataType
           |--FieldPacker
           |--Float2
           |--Float3
           |--Float4
           |--Int2
           |--Int3
           |--Int4
           |--Long2
           |--Long3
           |--Long4
           |--Matrix2f
           |--Matrix3f
           |--Matrix4f
           |--RSDriverException
           |--RSIllegalArgumentException
           |--RSInvalidStateException
           |--RSRuntimeException
           |--RenderScript
           |--RenderScript$ContextType
           |--RenderScript$Priority
           |--RenderScript$RSErrorHandler
           |--RenderScript$RSMessageHandler
           |--Sampler
           |--Sampler$Builder
           |--Sampler$Value
           |--Script
           |--Script$Builder
           |--Script$FieldBase
           |--Script$FieldID
           |--Script$InvokeID
           |--Script$KernelID
           |--Script$LaunchOptions
           |--ScriptC
           |--ScriptGroup
           |--ScriptGroup$Binding
           |--ScriptGroup$Builder
           |--ScriptGroup$Builder2
           |--ScriptGroup$Closure
           |--ScriptGroup$Future
           |--ScriptGroup$Input
           |--ScriptIntrinsic
           |--ScriptIntrinsic3DLUT
           |--ScriptIntrinsicBLAS
           |--ScriptIntrinsicBlend
           |--ScriptIntrinsicBlur
           |--ScriptIntrinsicColorMatrix
           |--ScriptIntrinsicConvolve3x3
           |--ScriptIntrinsicConvolve5x5
           |--ScriptIntrinsicHistogram
           |--ScriptIntrinsicLUT
           |--ScriptIntrinsicResize
           |--ScriptIntrinsicYuvToRGB
           |--Short2
           |--Short3
           |--Short4
           |--Type
           |--Type$Builder
           |--Type$CubemapFace
        |-+sax
           |--Element
           |--ElementListener
           |--EndElementListener
           |--EndTextElementListener
           |--RootElement
           |--StartElementListener
           |--TextElementListener
        |-+security
           |--KeyChain
           |--KeyChainAliasCallback
           |--KeyChainException
           |--KeyPairGeneratorSpec
           |--KeyPairGeneratorSpec$Builder
           |--KeyStoreParameter
           |--KeyStoreParameter$Builder
           |--NetworkSecurityPolicy
           |-+keystore
              |--KeyExpiredException
              |--KeyGenParameterSpec
              |--KeyGenParameterSpec$Builder
              |--KeyInfo
              |--KeyNotYetValidException
              |--KeyPermanentlyInvalidatedException
              |--KeyProperties
              |--KeyProtection
              |--KeyProtection$Builder
              |--UserNotAuthenticatedException
        |-+service
           |-+carrier
              |--CarrierIdentifier
              |--CarrierMessagingService
              |--CarrierMessagingService$ResultCallback
              |--CarrierMessagingService$SendMmsResult
              |--CarrierMessagingService$SendMultipartSmsResult
              |--CarrierMessagingService$SendSmsResult
              |--CarrierService
              |--MessagePdu
           |-+chooser
              |--ChooserTarget
              |--ChooserTargetService
           |-+dreams
              |--DreamService
           |-+media
              |--CameraPrewarmService
              |--MediaBrowserService
              |--MediaBrowserService$BrowserRoot
              |--MediaBrowserService$Result
           |-+notification
              |--Condition
              |--ConditionProviderService
              |--NotificationListenerService
              |--NotificationListenerService$Ranking
              |--NotificationListenerService$RankingMap
              |--StatusBarNotification
           |-+quicksettings
              |--Tile
              |--TileService
           |-+restrictions
              |--RestrictionsReceiver
           |-+textservice
              |--SpellCheckerService
              |--SpellCheckerService$Session
           |-+voice
              |--AlwaysOnHotwordDetector
              |--AlwaysOnHotwordDetector$Callback
              |--AlwaysOnHotwordDetector$EventPayload
              |--VoiceInteractionService
              |--VoiceInteractionSession
              |--VoiceInteractionSession$AbortVoiceRequest
              |--VoiceInteractionSession$CommandRequest
              |--VoiceInteractionSession$CompleteVoiceRequest
              |--VoiceInteractionSession$ConfirmationRequest
              |--VoiceInteractionSession$Insets
              |--VoiceInteractionSession$PickOptionRequest
              |--VoiceInteractionSession$Request
              |--VoiceInteractionSessionService
           |-+vr
              |--VrListenerService
           |-+wallpaper
              |--WallpaperService
              |--WallpaperService$Engine
        |-+speech
           |--RecognitionListener
           |--RecognitionService
           |--RecognitionService$Callback
           |--RecognizerIntent
           |--RecognizerResultsIntent
           |--SpeechRecognizer
           |-+tts
              |--SynthesisCallback
              |--SynthesisRequest
              |--TextToSpeech
              |--TextToSpeech$Engine
              |--TextToSpeech$EngineInfo
              |--TextToSpeech$OnInitListener
              |--TextToSpeech$OnUtteranceCompletedListener
              |--TextToSpeechService
              |--UtteranceProgressListener
              |--Voice
        |-+system
           |--ErrnoException
           |--Os
           |--OsConstants
           |--StructPollfd
           |--StructStat
           |--StructStatVfs
           |--StructUtsname
        |-+telecom
           |--Call
           |--Call$Callback
           |--Call$Details
           |--CallAudioState
           |--CallScreeningService
           |--CallScreeningService$CallResponse
           |--CallScreeningService$CallResponse$Builder
           |--Conference
           |--Conferenceable
           |--Connection
           |--Connection$VideoProvider
           |--ConnectionRequest
           |--ConnectionService
           |--DisconnectCause
           |--GatewayInfo
           |--InCallService
           |--InCallService$VideoCall
           |--InCallService$VideoCall$Callback
           |--PhoneAccount
           |--PhoneAccount$Builder
           |--PhoneAccountHandle
           |--RemoteConference
           |--RemoteConference$Callback
           |--RemoteConnection
           |--RemoteConnection$Callback
           |--RemoteConnection$VideoProvider
           |--RemoteConnection$VideoProvider$Callback
           |--StatusHints
           |--TelecomManager
           |--VideoProfile
           |--VideoProfile$CameraCapabilities
        |-+telephony
           |--CarrierConfigManager
           |--CellIdentityCdma
           |--CellIdentityGsm
           |--CellIdentityLte
           |--CellIdentityWcdma
           |--CellInfo
           |--CellInfoCdma
           |--CellInfoGsm
           |--CellInfoLte
           |--CellInfoWcdma
           |--CellLocation
           |--CellSignalStrength
           |--CellSignalStrengthCdma
           |--CellSignalStrengthGsm
           |--CellSignalStrengthLte
           |--CellSignalStrengthWcdma
           |--IccOpenLogicalChannelResponse
           |--NeighboringCellInfo
           |--PhoneNumberFormattingTextWatcher
           |--PhoneNumberUtils
           |--PhoneStateListener
           |--ServiceState
           |--SignalStrength
           |--SmsManager
           |--SmsMessage
           |--SmsMessage$MessageClass
           |--SmsMessage$SubmitPdu
           |--SubscriptionInfo
           |--SubscriptionManager
           |--SubscriptionManager$OnSubscriptionsChangedListener
           |--TelephonyManager
           |-+cdma
              |--CdmaCellLocation
           |-+gsm
              |--GsmCellLocation
              |--SmsManager
              |--SmsMessage
              |--SmsMessage$MessageClass
              |--SmsMessage$SubmitPdu
        |-+test
           |--ActivityInstrumentationTestCase
           |--ActivityInstrumentationTestCase2
           |--ActivityTestCase
           |--ActivityUnitTestCase
           |--AndroidTestCase
           |--AndroidTestRunner
           |--ApplicationTestCase
           |--AssertionFailedError
           |--ComparisonFailure
           |--FlakyTest
           |--InstrumentationTestCase
           |--InstrumentationTestRunner
           |--InstrumentationTestSuite
           |--IsolatedContext
           |--LoaderTestCase
           |--MoreAsserts
           |--PerformanceTestCase
           |--PerformanceTestCase$Intermediates
           |--ProviderTestCase
           |--ProviderTestCase2
           |--RenamingDelegatingContext
           |--ServiceTestCase
           |--SingleLaunchActivityTestCase
           |--SyncBaseInstrumentation
           |--TestSuiteProvider
           |--TouchUtils
           |--UiThreadTest
           |--ViewAsserts
           |-+mock
              |--MockApplication
              |--MockContentProvider
              |--MockContentResolver
              |--MockContext
              |--MockCursor
              |--MockDialogInterface
              |--MockPackageManager
              |--MockResources
           |-+suitebuilder
              |--TestMethod
              |--TestSuiteBuilder
              |--TestSuiteBuilder$FailedToCreateTests
              |-+annotation
                 |--LargeTest
                 |--MediumTest
                 |--SmallTest
                 |--Smoke
                 |--Suppress
        |-+text
           |--AlteredCharSequence
           |--AndroidCharacter
           |--Annotation
           |--AutoText
           |--BidiFormatter
           |--BidiFormatter$Builder
           |--BoringLayout
           |--BoringLayout$Metrics
           |--ClipboardManager
           |--DynamicLayout
           |--Editable
           |--Editable$Factory
           |--GetChars
           |--Html
           |--Html$ImageGetter
           |--Html$TagHandler
           |--InputFilter
           |--InputFilter$AllCaps
           |--InputFilter$LengthFilter
           |--InputType
           |--Layout
           |--Layout$Alignment
           |--Layout$Directions
           |--LoginFilter
           |--LoginFilter$PasswordFilterGMail
           |--LoginFilter$UsernameFilterGMail
           |--LoginFilter$UsernameFilterGeneric
           |--NoCopySpan
           |--NoCopySpan$Concrete
           |--ParcelableSpan
           |--Selection
           |--SpanWatcher
           |--Spannable
           |--Spannable$Factory
           |--SpannableString
           |--SpannableStringBuilder
           |--Spanned
           |--SpannedString
           |--StaticLayout
           |--StaticLayout$Builder
           |--TextDirectionHeuristic
           |--TextDirectionHeuristics
           |--TextPaint
           |--TextUtils
           |--TextUtils$EllipsizeCallback
           |--TextUtils$SimpleStringSplitter
           |--TextUtils$StringSplitter
           |--TextUtils$TruncateAt
           |--TextWatcher
           |-+format
              |--DateFormat
              |--DateUtils
              |--Formatter
              |--Time
           |-+method
              |--ArrowKeyMovementMethod
              |--BaseKeyListener
              |--BaseMovementMethod
              |--CharacterPickerDialog
              |--DateKeyListener
              |--DateTimeKeyListener
              |--DialerKeyListener
              |--DigitsKeyListener
              |--HideReturnsTransformationMethod
              |--KeyListener
              |--LinkMovementMethod
              |--MetaKeyKeyListener
              |--MovementMethod
              |--MultiTapKeyListener
              |--NumberKeyListener
              |--PasswordTransformationMethod
              |--QwertyKeyListener
              |--ReplacementTransformationMethod
              |--ScrollingMovementMethod
              |--SingleLineTransformationMethod
              |--TextKeyListener
              |--TextKeyListener$Capitalize
              |--TimeKeyListener
              |--Touch
              |--TransformationMethod
           |-+style
              |--AbsoluteSizeSpan
              |--AlignmentSpan
              |--AlignmentSpan$Standard
              |--BackgroundColorSpan
              |--BulletSpan
              |--CharacterStyle
              |--ClickableSpan
              |--DrawableMarginSpan
              |--DynamicDrawableSpan
              |--EasyEditSpan
              |--ForegroundColorSpan
              |--IconMarginSpan
              |--ImageSpan
              |--LeadingMarginSpan
              |--LeadingMarginSpan$LeadingMarginSpan2
              |--LeadingMarginSpan$Standard
              |--LineBackgroundSpan
              |--LineHeightSpan
              |--LineHeightSpan$WithDensity
              |--LocaleSpan
              |--MaskFilterSpan
              |--MetricAffectingSpan
              |--ParagraphStyle
              |--QuoteSpan
              |--RasterizerSpan
              |--RelativeSizeSpan
              |--ReplacementSpan
              |--ScaleXSpan
              |--StrikethroughSpan
              |--StyleSpan
              |--SubscriptSpan
              |--SuggestionSpan
              |--SuperscriptSpan
              |--TabStopSpan
              |--TabStopSpan$Standard
              |--TextAppearanceSpan
              |--TtsSpan
              |--TtsSpan$Builder
              |--TtsSpan$CardinalBuilder
              |--TtsSpan$DateBuilder
              |--TtsSpan$DecimalBuilder
              |--TtsSpan$DigitsBuilder
              |--TtsSpan$ElectronicBuilder
              |--TtsSpan$FractionBuilder
              |--TtsSpan$MeasureBuilder
              |--TtsSpan$MoneyBuilder
              |--TtsSpan$OrdinalBuilder
              |--TtsSpan$SemioticClassBuilder
              |--TtsSpan$TelephoneBuilder
              |--TtsSpan$TextBuilder
              |--TtsSpan$TimeBuilder
              |--TtsSpan$VerbatimBuilder
              |--TypefaceSpan
              |--URLSpan
              |--UnderlineSpan
              |--UpdateAppearance
              |--UpdateLayout
              |--WrapTogetherSpan
           |-+util
              |--Linkify
              |--Linkify$MatchFilter
              |--Linkify$TransformFilter
              |--Rfc822Token
              |--Rfc822Tokenizer
        |-+transition
           |--ArcMotion
           |--AutoTransition
           |--ChangeBounds
           |--ChangeClipBounds
           |--ChangeImageTransform
           |--ChangeScroll
           |--ChangeTransform
           |--CircularPropagation
           |--Explode
           |--Fade
           |--PathMotion
           |--PatternPathMotion
           |--Scene
           |--SidePropagation
           |--Slide
           |--Transition
           |--Transition$EpicenterCallback
           |--Transition$TransitionListener
           |--TransitionInflater
           |--TransitionManager
           |--TransitionPropagation
           |--TransitionSet
           |--TransitionValues
           |--Visibility
           |--VisibilityPropagation
        |-+util
           |--AndroidException
           |--AndroidRuntimeException
           |--ArrayMap
           |--ArraySet
           |--AtomicFile
           |--AttributeSet
           |--Base64
           |--Base64DataException
           |--Base64InputStream
           |--Base64OutputStream
           |--Config
           |--DebugUtils
           |--DisplayMetrics
           |--EventLog
           |--EventLog$Event
           |--EventLogTags
           |--EventLogTags$Description
           |--FloatMath
           |--FloatProperty
           |--IntProperty
           |--JsonReader
           |--JsonToken
           |--JsonWriter
           |--LayoutDirection
           |--Log
           |--LogPrinter
           |--LongSparseArray
           |--LruCache
           |--MalformedJsonException
           |--MonthDisplayHelper
           |--MutableBoolean
           |--MutableByte
           |--MutableChar
           |--MutableDouble
           |--MutableFloat
           |--MutableInt
           |--MutableLong
           |--MutableShort
           |--NoSuchPropertyException
           |--Pair
           |--Patterns
           |--PrintStreamPrinter
           |--PrintWriterPrinter
           |--Printer
           |--Property
           |--Range
           |--Rational
           |--Size
           |--SizeF
           |--SparseArray
           |--SparseBooleanArray
           |--SparseIntArray
           |--SparseLongArray
           |--StateSet
           |--StringBuilderPrinter
           |--TimeFormatException
           |--TimeUtils
           |--TimingLogger
           |--TypedValue
           |--Xml
           |--Xml$Encoding
        |-+view
           |--AbsSavedState
           |--ActionMode
           |--ActionMode$Callback
           |--ActionMode$Callback2
           |--ActionProvider
           |--ActionProvider$VisibilityListener
           |--Choreographer
           |--Choreographer$FrameCallback
           |--CollapsibleActionView
           |--ContextMenu
           |--ContextMenu$ContextMenuInfo
           |--ContextThemeWrapper
           |--Display
           |--Display$HdrCapabilities
           |--Display$Mode
           |--DragAndDropPermissions
           |--DragEvent
           |--FocusFinder
           |--FrameMetrics
           |--FrameStats
           |--GestureDetector
           |--GestureDetector$OnContextClickListener
           |--GestureDetector$OnDoubleTapListener
           |--GestureDetector$OnGestureListener
           |--GestureDetector$SimpleOnGestureListener
           |--Gravity
           |--HapticFeedbackConstants
           |--InflateException
           |--InputDevice
           |--InputDevice$MotionRange
           |--InputEvent
           |--InputQueue
           |--InputQueue$Callback
           |--KeyCharacterMap
           |--KeyCharacterMap$KeyData
           |--KeyCharacterMap$UnavailableException
           |--KeyEvent
           |--KeyEvent$Callback
           |--KeyEvent$DispatcherState
           |--KeyboardShortcutGroup
           |--KeyboardShortcutInfo
           |--LayoutInflater
           |--LayoutInflater$Factory
           |--LayoutInflater$Factory2
           |--LayoutInflater$Filter
           |--Menu
           |--MenuInflater
           |--MenuItem
           |--MenuItem$OnActionExpandListener
           |--MenuItem$OnMenuItemClickListener
           |--MotionEvent
           |--MotionEvent$PointerCoords
           |--MotionEvent$PointerProperties
           |--OrientationEventListener
           |--OrientationListener
           |--PixelCopy
           |--PixelCopy$OnPixelCopyFinishedListener
           |--PointerIcon
           |--ScaleGestureDetector
           |--ScaleGestureDetector$OnScaleGestureListener
           |--ScaleGestureDetector$SimpleOnScaleGestureListener
           |--SearchEvent
           |--SoundEffectConstants
           |--SubMenu
           |--Surface
           |--Surface$OutOfResourcesException
           |--SurfaceHolder
           |--SurfaceHolder$BadSurfaceTypeException
           |--SurfaceHolder$Callback
           |--SurfaceHolder$Callback2
           |--SurfaceView
           |--TextureView
           |--TextureView$SurfaceTextureListener
           |--TouchDelegate
           |--VelocityTracker
           |--View
           |--View$AccessibilityDelegate
           |--View$BaseSavedState
           |--View$DragShadowBuilder
           |--View$MeasureSpec
           |--View$OnApplyWindowInsetsListener
           |--View$OnAttachStateChangeListener
           |--View$OnClickListener
           |--View$OnContextClickListener
           |--View$OnCreateContextMenuListener
           |--View$OnDragListener
           |--View$OnFocusChangeListener
           |--View$OnGenericMotionListener
           |--View$OnHoverListener
           |--View$OnKeyListener
           |--View$OnLayoutChangeListener
           |--View$OnLongClickListener
           |--View$OnScrollChangeListener
           |--View$OnSystemUiVisibilityChangeListener
           |--View$OnTouchListener
           |--ViewAnimationUtils
           |--ViewConfiguration
           |--ViewDebug
           |--ViewDebug$CapturedViewProperty
           |--ViewDebug$ExportedProperty
           |--ViewDebug$FlagToString
           |--ViewDebug$HierarchyTraceType
           |--ViewDebug$IntToString
           |--ViewDebug$RecyclerTraceType
           |--ViewGroup
           |--ViewGroup$LayoutParams
           |--ViewGroup$MarginLayoutParams
           |--ViewGroup$OnHierarchyChangeListener
           |--ViewGroupOverlay
           |--ViewManager
           |--ViewOutlineProvider
           |--ViewOverlay
           |--ViewParent
           |--ViewPropertyAnimator
           |--ViewStructure
           |--ViewStub
           |--ViewStub$OnInflateListener
           |--ViewTreeObserver
           |--ViewTreeObserver$OnDrawListener
           |--ViewTreeObserver$OnGlobalFocusChangeListener
           |--ViewTreeObserver$OnGlobalLayoutListener
           |--ViewTreeObserver$OnPreDrawListener
           |--ViewTreeObserver$OnScrollChangedListener
           |--ViewTreeObserver$OnTouchModeChangeListener
           |--ViewTreeObserver$OnWindowAttachListener
           |--ViewTreeObserver$OnWindowFocusChangeListener
           |--Window
           |--Window$Callback
           |--Window$OnFrameMetricsAvailableListener
           |--Window$OnRestrictedCaptionAreaChangedListener
           |--WindowAnimationFrameStats
           |--WindowContentFrameStats
           |--WindowId
           |--WindowId$FocusObserver
           |--WindowInsets
           |--WindowManager
           |--WindowManager$BadTokenException
           |--WindowManager$InvalidDisplayException
           |--WindowManager$LayoutParams
           |-+accessibility
              |--AccessibilityEvent
              |--AccessibilityEventSource
              |--AccessibilityManager
              |--AccessibilityManager$AccessibilityStateChangeListener
              |--AccessibilityManager$TouchExplorationStateChangeListener
              |--AccessibilityNodeInfo
              |--AccessibilityNodeInfo$AccessibilityAction
              |--AccessibilityNodeInfo$CollectionInfo
              |--AccessibilityNodeInfo$CollectionItemInfo
              |--AccessibilityNodeInfo$RangeInfo
              |--AccessibilityNodeProvider
              |--AccessibilityRecord
              |--AccessibilityWindowInfo
              |--CaptioningManager
              |--CaptioningManager$CaptionStyle
              |--CaptioningManager$CaptioningChangeListener
           |-+animation
              |--AccelerateDecelerateInterpolator
              |--AccelerateInterpolator
              |--AlphaAnimation
              |--Animation
              |--Animation$AnimationListener
              |--Animation$Description
              |--AnimationSet
              |--AnimationUtils
              |--AnticipateInterpolator
              |--AnticipateOvershootInterpolator
              |--BaseInterpolator
              |--BounceInterpolator
              |--CycleInterpolator
              |--DecelerateInterpolator
              |--GridLayoutAnimationController
              |--GridLayoutAnimationController$AnimationParameters
              |--Interpolator
              |--LayoutAnimationController
              |--LayoutAnimationController$AnimationParameters
              |--LinearInterpolator
              |--OvershootInterpolator
              |--PathInterpolator
              |--RotateAnimation
              |--ScaleAnimation
              |--Transformation
              |--TranslateAnimation
           |-+inputmethod
              |--BaseInputConnection
              |--CompletionInfo
              |--CorrectionInfo
              |--CursorAnchorInfo
              |--CursorAnchorInfo$Builder
              |--EditorInfo
              |--ExtractedText
              |--ExtractedTextRequest
              |--InputBinding
              |--InputConnection
              |--InputConnectionWrapper
              |--InputMethod
              |--InputMethod$SessionCallback
              |--InputMethodInfo
              |--InputMethodManager
              |--InputMethodSession
              |--InputMethodSession$EventCallback
              |--InputMethodSubtype
              |--InputMethodSubtype$InputMethodSubtypeBuilder
           |-+textservice
              |--SentenceSuggestionsInfo
              |--SpellCheckerInfo
              |--SpellCheckerSession
              |--SpellCheckerSession$SpellCheckerSessionListener
              |--SpellCheckerSubtype
              |--SuggestionsInfo
              |--TextInfo
              |--TextServicesManager
        |-+webkit
           |--ClientCertRequest
           |--ConsoleMessage
           |--ConsoleMessage$MessageLevel
           |--CookieManager
           |--CookieSyncManager
           |--DateSorter
           |--DownloadListener
           |--GeolocationPermissions
           |--GeolocationPermissions$Callback
           |--HttpAuthHandler
           |--JavascriptInterface
           |--JsPromptResult
           |--JsResult
           |--MimeTypeMap
           |--PermissionRequest
           |--PluginStub
           |--ServiceWorkerClient
           |--ServiceWorkerController
           |--ServiceWorkerWebSettings
           |--SslErrorHandler
           |--URLUtil
           |--ValueCallback
           |--WebBackForwardList
           |--WebChromeClient
           |--WebChromeClient$CustomViewCallback
           |--WebChromeClient$FileChooserParams
           |--WebHistoryItem
           |--WebIconDatabase
           |--WebIconDatabase$IconListener
           |--WebMessage
           |--WebMessagePort
           |--WebMessagePort$WebMessageCallback
           |--WebResourceError
           |--WebResourceRequest
           |--WebResourceResponse
           |--WebSettings
           |--WebSettings$LayoutAlgorithm
           |--WebSettings$PluginState
           |--WebSettings$RenderPriority
           |--WebSettings$TextSize
           |--WebSettings$ZoomDensity
           |--WebStorage
           |--WebStorage$Origin
           |--WebStorage$QuotaUpdater
           |--WebView
           |--WebView$FindListener
           |--WebView$HitTestResult
           |--WebView$PictureListener
           |--WebView$VisualStateCallback
           |--WebView$WebViewTransport
           |--WebViewClient
           |--WebViewDatabase
           |--WebViewFragment
        |-+widget
           |--AbsListView
           |--AbsListView$LayoutParams
           |--AbsListView$MultiChoiceModeListener
           |--AbsListView$OnScrollListener
           |--AbsListView$RecyclerListener
           |--AbsListView$SelectionBoundsAdjuster
           |--AbsSeekBar
           |--AbsSpinner
           |--AbsoluteLayout
           |--AbsoluteLayout$LayoutParams
           |--ActionMenuView
           |--ActionMenuView$LayoutParams
           |--ActionMenuView$OnMenuItemClickListener
           |--Adapter
           |--AdapterView
           |--AdapterView$AdapterContextMenuInfo
           |--AdapterView$OnItemClickListener
           |--AdapterView$OnItemLongClickListener
           |--AdapterView$OnItemSelectedListener
           |--AdapterViewAnimator
           |--AdapterViewFlipper
           |--Advanceable
           |--AlphabetIndexer
           |--AnalogClock
           |--ArrayAdapter
           |--AutoCompleteTextView
           |--AutoCompleteTextView$OnDismissListener
           |--AutoCompleteTextView$Validator
           |--BaseAdapter
           |--BaseExpandableListAdapter
           |--Button
           |--CalendarView
           |--CalendarView$OnDateChangeListener
           |--CheckBox
           |--Checkable
           |--CheckedTextView
           |--Chronometer
           |--Chronometer$OnChronometerTickListener
           |--CompoundButton
           |--CompoundButton$OnCheckedChangeListener
           |--CursorAdapter
           |--CursorTreeAdapter
           |--DatePicker
           |--DatePicker$OnDateChangedListener
           |--DialerFilter
           |--DigitalClock
           |--EdgeEffect
           |--EditText
           |--ExpandableListAdapter
           |--ExpandableListView
           |--ExpandableListView$ExpandableListContextMenuInfo
           |--ExpandableListView$OnChildClickListener
           |--ExpandableListView$OnGroupClickListener
           |--ExpandableListView$OnGroupCollapseListener
           |--ExpandableListView$OnGroupExpandListener
           |--Filter
           |--Filter$FilterListener
           |--Filter$FilterResults
           |--FilterQueryProvider
           |--Filterable
           |--FrameLayout
           |--FrameLayout$LayoutParams
           |--Gallery
           |--Gallery$LayoutParams
           |--GridLayout
           |--GridLayout$Alignment
           |--GridLayout$LayoutParams
           |--GridLayout$Spec
           |--GridView
           |--HeaderViewListAdapter
           |--HeterogeneousExpandableList
           |--HorizontalScrollView
           |--ImageButton
           |--ImageSwitcher
           |--ImageView
           |--ImageView$ScaleType
           |--LinearLayout
           |--LinearLayout$LayoutParams
           |--ListAdapter
           |--ListPopupWindow
           |--ListView
           |--ListView$FixedViewInfo
           |--MediaController
           |--MediaController$MediaPlayerControl
           |--MultiAutoCompleteTextView
           |--MultiAutoCompleteTextView$CommaTokenizer
           |--MultiAutoCompleteTextView$Tokenizer
           |--NumberPicker
           |--NumberPicker$Formatter
           |--NumberPicker$OnScrollListener
           |--NumberPicker$OnValueChangeListener
           |--OverScroller
           |--PopupMenu
           |--PopupMenu$OnDismissListener
           |--PopupMenu$OnMenuItemClickListener
           |--PopupWindow
           |--PopupWindow$OnDismissListener
           |--ProgressBar
           |--QuickContactBadge
           |--RadioButton
           |--RadioGroup
           |--RadioGroup$LayoutParams
           |--RadioGroup$OnCheckedChangeListener
           |--RatingBar
           |--RatingBar$OnRatingBarChangeListener
           |--RelativeLayout
           |--RelativeLayout$LayoutParams
           |--RemoteViews
           |--RemoteViews$ActionException
           |--RemoteViews$RemoteView
           |--RemoteViewsService
           |--RemoteViewsService$RemoteViewsFactory
           |--ResourceCursorAdapter
           |--ResourceCursorTreeAdapter
           |--ScrollView
           |--Scroller
           |--SearchView
           |--SearchView$OnCloseListener
           |--SearchView$OnQueryTextListener
           |--SearchView$OnSuggestionListener
           |--SectionIndexer
           |--SeekBar
           |--SeekBar$OnSeekBarChangeListener
           |--ShareActionProvider
           |--ShareActionProvider$OnShareTargetSelectedListener
           |--SimpleAdapter
           |--SimpleAdapter$ViewBinder
           |--SimpleCursorAdapter
           |--SimpleCursorAdapter$CursorToStringConverter
           |--SimpleCursorAdapter$ViewBinder
           |--SimpleCursorTreeAdapter
           |--SimpleCursorTreeAdapter$ViewBinder
           |--SimpleExpandableListAdapter
           |--SlidingDrawer
           |--SlidingDrawer$OnDrawerCloseListener
           |--SlidingDrawer$OnDrawerOpenListener
           |--SlidingDrawer$OnDrawerScrollListener
           |--Space
           |--Spinner
           |--SpinnerAdapter
           |--StackView
           |--Switch
           |--TabHost
           |--TabHost$OnTabChangeListener
           |--TabHost$TabContentFactory
           |--TabHost$TabSpec
           |--TabWidget
           |--TableLayout
           |--TableLayout$LayoutParams
           |--TableRow
           |--TableRow$LayoutParams
           |--TextClock
           |--TextSwitcher
           |--TextView
           |--TextView$BufferType
           |--TextView$OnEditorActionListener
           |--TextView$SavedState
           |--ThemedSpinnerAdapter
           |--TimePicker
           |--TimePicker$OnTimeChangedListener
           |--Toast
           |--ToggleButton
           |--Toolbar
           |--Toolbar$LayoutParams
           |--Toolbar$OnMenuItemClickListener
           |--TwoLineListItem
           |--VideoView
           |--ViewAnimator
           |--ViewFlipper
           |--ViewSwitcher
           |--ViewSwitcher$ViewFactory
           |--WrapperListAdapter
           |--ZoomButton
           |--ZoomButtonsController
           |--ZoomButtonsController$OnZoomListener
           |--ZoomControls
     |-+com
        |-+android
           |-+internal
              |-+util
                 |--Predicate
     |-+dalvik
        |-+annotation
           |--TestTarget
           |--TestTargetClass
        |-+bytecode
           |--OpcodeInfo
           |--Opcodes
        |-+system
           |--BaseDexClassLoader
           |--DexClassLoader
           |--DexFile
           |--PathClassLoader
     |-+java
        |-+awt
           |-+font
              |--NumericShaper
              |--NumericShaper$Range
              |--TextAttribute
        |-+beans
           |--IndexedPropertyChangeEvent
           |--PropertyChangeEvent
           |--PropertyChangeListener
           |--PropertyChangeListenerProxy
           |--PropertyChangeSupport
        |-+io
           |--BufferedInputStream
           |--BufferedOutputStream
           |--BufferedReader
           |--BufferedWriter
           |--ByteArrayInputStream
           |--ByteArrayOutputStream
           |--CharArrayReader
           |--CharArrayWriter
           |--CharConversionException
           |--Closeable
           |--Console
           |--DataInput
           |--DataInputStream
           |--DataOutput
           |--DataOutputStream
           |--EOFException
           |--Externalizable
           |--File
           |--FileDescriptor
           |--FileFilter
           |--FileInputStream
           |--FileNotFoundException
           |--FileOutputStream
           |--FilePermission
           |--FileReader
           |--FileWriter
           |--FilenameFilter
           |--FilterInputStream
           |--FilterOutputStream
           |--FilterReader
           |--FilterWriter
           |--Flushable
           |--IOError
           |--IOException
           |--InputStream
           |--InputStreamReader
           |--InterruptedIOException
           |--InvalidClassException
           |--InvalidObjectException
           |--LineNumberInputStream
           |--LineNumberReader
           |--NotActiveException
           |--NotSerializableException
           |--ObjectInput
           |--ObjectInputStream
           |--ObjectInputStream$GetField
           |--ObjectInputValidation
           |--ObjectOutput
           |--ObjectOutputStream
           |--ObjectOutputStream$PutField
           |--ObjectStreamClass
           |--ObjectStreamConstants
           |--ObjectStreamException
           |--ObjectStreamField
           |--OptionalDataException
           |--OutputStream
           |--OutputStreamWriter
           |--PipedInputStream
           |--PipedOutputStream
           |--PipedReader
           |--PipedWriter
           |--PrintStream
           |--PrintWriter
           |--PushbackInputStream
           |--PushbackReader
           |--RandomAccessFile
           |--Reader
           |--SequenceInputStream
           |--Serializable
           |--SerializablePermission
           |--StreamCorruptedException
           |--StreamTokenizer
           |--StringBufferInputStream
           |--StringReader
           |--StringWriter
           |--SyncFailedException
           |--UTFDataFormatException
           |--UncheckedIOException
           |--UnsupportedEncodingException
           |--WriteAbortedException
           |--Writer
        |-+lang
           |--AbstractMethodError
           |--Appendable
           |--ArithmeticException
           |--ArrayIndexOutOfBoundsException
           |--ArrayStoreException
           |--AssertionError
           |--AutoCloseable
           |--Boolean
           |--Byte
           |--CharSequence
           |--Character
           |--Character$Subset
           |--Character$UnicodeBlock
           |--Character$UnicodeScript
           |--Class
           |--ClassCastException
           |--ClassCircularityError
           |--ClassFormatError
           |--ClassLoader
           |--ClassNotFoundException
           |--CloneNotSupportedException
           |--Cloneable
           |--Comparable
           |--Compiler
           |--Deprecated
           |--Double
           |--Enum
           |--EnumConstantNotPresentException
           |--Error
           |--Exception
           |--ExceptionInInitializerError
           |--Float
           |--FunctionalInterface
           |--IllegalAccessError
           |--IllegalAccessException
           |--IllegalArgumentException
           |--IllegalMonitorStateException
           |--IllegalStateException
           |--IllegalThreadStateException
           |--IncompatibleClassChangeError
           |--IndexOutOfBoundsException
           |--InheritableThreadLocal
           |--InstantiationError
           |--InstantiationException
           |--Integer
           |--InternalError
           |--InterruptedException
           |--Iterable
           |--LinkageError
           |--Long
           |--Math
           |--NegativeArraySizeException
           |--NoClassDefFoundError
           |--NoSuchFieldError
           |--NoSuchFieldException
           |--NoSuchMethodError
           |--NoSuchMethodException
           |--NullPointerException
           |--Number
           |--NumberFormatException
           |--Object
           |--OutOfMemoryError
           |--Override
           |--Package
           |--Process
           |--ProcessBuilder
           |--Readable
           |--ReflectiveOperationException
           |--Runnable
           |--Runtime
           |--RuntimeException
           |--RuntimePermission
           |--SafeVarargs
           |--SecurityException
           |--SecurityManager
           |--Short
           |--StackOverflowError
           |--StackTraceElement
           |--StrictMath
           |--String
           |--StringBuffer
           |--StringBuilder
           |--StringIndexOutOfBoundsException
           |--SuppressWarnings
           |--System
           |--Thread
           |--Thread$State
           |--Thread$UncaughtExceptionHandler
           |--ThreadDeath
           |--ThreadGroup
           |--ThreadLocal
           |--Throwable
           |--TypeNotPresentException
           |--UnknownError
           |--UnsatisfiedLinkError
           |--UnsupportedClassVersionError
           |--UnsupportedOperationException
           |--VerifyError
           |--VirtualMachineError
           |--Void
           |-+annotation
              |--Annotation
              |--AnnotationFormatError
              |--AnnotationTypeMismatchException
              |--Documented
              |--ElementType
              |--IncompleteAnnotationException
              |--Inherited
              |--Repeatable
              |--Retention
              |--RetentionPolicy
              |--Target
           |-+ref
              |--PhantomReference
              |--Reference
              |--ReferenceQueue
              |--SoftReference
              |--WeakReference
           |-+reflect
              |--AccessibleObject
              |--AnnotatedElement
              |--Array
              |--Constructor
              |--Field
              |--GenericArrayType
              |--GenericDeclaration
              |--GenericSignatureFormatError
              |--InvocationHandler
              |--InvocationTargetException
              |--MalformedParameterizedTypeException
              |--Member
              |--Method
              |--Modifier
              |--ParameterizedType
              |--Proxy
              |--ReflectPermission
              |--Type
              |--TypeVariable
              |--UndeclaredThrowableException
              |--WildcardType
        |-+math
           |--BigDecimal
           |--BigInteger
           |--MathContext
           |--RoundingMode
        |-+net
           |--Authenticator
           |--Authenticator$RequestorType
           |--BindException
           |--CacheRequest
           |--CacheResponse
           |--ConnectException
           |--ContentHandler
           |--ContentHandlerFactory
           |--CookieHandler
           |--CookieManager
           |--CookiePolicy
           |--CookieStore
           |--DatagramPacket
           |--DatagramSocket
           |--DatagramSocketImpl
           |--DatagramSocketImplFactory
           |--FileNameMap
           |--HttpCookie
           |--HttpRetryException
           |--HttpURLConnection
           |--IDN
           |--Inet4Address
           |--Inet6Address
           |--InetAddress
           |--InetSocketAddress
           |--InterfaceAddress
           |--JarURLConnection
           |--MalformedURLException
           |--MulticastSocket
           |--NetPermission
           |--NetworkInterface
           |--NoRouteToHostException
           |--PasswordAuthentication
           |--PortUnreachableException
           |--ProtocolException
           |--ProtocolFamily
           |--Proxy
           |--Proxy$Type
           |--ProxySelector
           |--ResponseCache
           |--SecureCacheResponse
           |--ServerSocket
           |--Socket
           |--SocketAddress
           |--SocketException
           |--SocketImpl
           |--SocketImplFactory
           |--SocketOption
           |--SocketOptions
           |--SocketPermission
           |--SocketTimeoutException
           |--StandardProtocolFamily
           |--StandardSocketOptions
           |--URI
           |--URISyntaxException
           |--URL
           |--URLClassLoader
           |--URLConnection
           |--URLDecoder
           |--URLEncoder
           |--URLStreamHandler
           |--URLStreamHandlerFactory
           |--UnknownHostException
           |--UnknownServiceException
        |-+nio
           |--Buffer
           |--BufferOverflowException
           |--BufferUnderflowException
           |--ByteBuffer
           |--ByteOrder
           |--CharBuffer
           |--DoubleBuffer
           |--FloatBuffer
           |--IntBuffer
           |--InvalidMarkException
           |--LongBuffer
           |--MappedByteBuffer
           |--ReadOnlyBufferException
           |--ShortBuffer
           |-+channels
              |--AlreadyBoundException
              |--AlreadyConnectedException
              |--AsynchronousCloseException
              |--ByteChannel
              |--CancelledKeyException
              |--Channel
              |--Channels
              |--ClosedByInterruptException
              |--ClosedChannelException
              |--ClosedSelectorException
              |--ConnectionPendingException
              |--DatagramChannel
              |--FileChannel
              |--FileChannel$MapMode
              |--FileLock
              |--FileLockInterruptionException
              |--GatheringByteChannel
              |--IllegalBlockingModeException
              |--IllegalSelectorException
              |--InterruptibleChannel
              |--NetworkChannel
              |--NoConnectionPendingException
              |--NonReadableChannelException
              |--NonWritableChannelException
              |--NotYetBoundException
              |--NotYetConnectedException
              |--OverlappingFileLockException
              |--Pipe
              |--Pipe$SinkChannel
              |--Pipe$SourceChannel
              |--ReadableByteChannel
              |--ScatteringByteChannel
              |--SeekableByteChannel
              |--SelectableChannel
              |--SelectionKey
              |--Selector
              |--ServerSocketChannel
              |--SocketChannel
              |--UnresolvedAddressException
              |--UnsupportedAddressTypeException
              |--WritableByteChannel
              |-+spi
                 |--AbstractInterruptibleChannel
                 |--AbstractSelectableChannel
                 |--AbstractSelectionKey
                 |--AbstractSelector
                 |--SelectorProvider
           |-+charset
              |--CharacterCodingException
              |--Charset
              |--CharsetDecoder
              |--CharsetEncoder
              |--CoderMalfunctionError
              |--CoderResult
              |--CodingErrorAction
              |--IllegalCharsetNameException
              |--MalformedInputException
              |--StandardCharsets
              |--UnmappableCharacterException
              |--UnsupportedCharsetException
              |-+spi
                 |--CharsetProvider
        |-+security
           |--AccessControlContext
           |--AccessControlException
           |--AccessController
           |--AlgorithmConstraints
           |--AlgorithmParameterGenerator
           |--AlgorithmParameterGeneratorSpi
           |--AlgorithmParameters
           |--AlgorithmParametersSpi
           |--AllPermission
           |--AuthProvider
           |--BasicPermission
           |--Certificate
           |--CodeSigner
           |--CodeSource
           |--CryptoPrimitive
           |--DigestException
           |--DigestInputStream
           |--DigestOutputStream
           |--DomainCombiner
           |--GeneralSecurityException
           |--Guard
           |--GuardedObject
           |--Identity
           |--IdentityScope
           |--InvalidAlgorithmParameterException
           |--InvalidKeyException
           |--InvalidParameterException
           |--Key
           |--KeyException
           |--KeyFactory
           |--KeyFactorySpi
           |--KeyManagementException
           |--KeyPair
           |--KeyPairGenerator
           |--KeyPairGeneratorSpi
           |--KeyRep
           |--KeyRep$Type
           |--KeyStore
           |--KeyStore$Builder
           |--KeyStore$CallbackHandlerProtection
           |--KeyStore$Entry
           |--KeyStore$LoadStoreParameter
           |--KeyStore$PasswordProtection
           |--KeyStore$PrivateKeyEntry
           |--KeyStore$ProtectionParameter
           |--KeyStore$SecretKeyEntry
           |--KeyStore$TrustedCertificateEntry
           |--KeyStoreException
           |--KeyStoreSpi
           |--MessageDigest
           |--MessageDigestSpi
           |--NoSuchAlgorithmException
           |--NoSuchProviderException
           |--Permission
           |--PermissionCollection
           |--Permissions
           |--Policy
           |--Policy$Parameters
           |--PolicySpi
           |--Principal
           |--PrivateKey
           |--PrivilegedAction
           |--PrivilegedActionException
           |--PrivilegedExceptionAction
           |--ProtectionDomain
           |--Provider
           |--Provider$Service
           |--ProviderException
           |--PublicKey
           |--SecureClassLoader
           |--SecureRandom
           |--SecureRandomSpi
           |--Security
           |--SecurityPermission
           |--Signature
           |--SignatureException
           |--SignatureSpi
           |--SignedObject
           |--Signer
           |--Timestamp
           |--UnrecoverableEntryException
           |--UnrecoverableKeyException
           |--UnresolvedPermission
           |-+acl
              |--Acl
              |--AclEntry
              |--AclNotFoundException
              |--Group
              |--LastOwnerException
              |--NotOwnerException
              |--Owner
              |--Permission
           |-+cert
              |--CRL
              |--CRLException
              |--CRLReason
              |--CRLSelector
              |--CertPath
              |--CertPath$CertPathRep
              |--CertPathBuilder
              |--CertPathBuilderException
              |--CertPathBuilderResult
              |--CertPathBuilderSpi
              |--CertPathChecker
              |--CertPathParameters
              |--CertPathValidator
              |--CertPathValidatorException
              |--CertPathValidatorException$BasicReason
              |--CertPathValidatorException$Reason
              |--CertPathValidatorResult
              |--CertPathValidatorSpi
              |--CertSelector
              |--CertStore
              |--CertStoreException
              |--CertStoreParameters
              |--CertStoreSpi
              |--Certificate
              |--Certificate$CertificateRep
              |--CertificateEncodingException
              |--CertificateException
              |--CertificateExpiredException
              |--CertificateFactory
              |--CertificateFactorySpi
              |--CertificateNotYetValidException
              |--CertificateParsingException
              |--CertificateRevokedException
              |--CollectionCertStoreParameters
              |--Extension
              |--LDAPCertStoreParameters
              |--PKIXBuilderParameters
              |--PKIXCertPathBuilderResult
              |--PKIXCertPathChecker
              |--PKIXCertPathValidatorResult
              |--PKIXParameters
              |--PKIXReason
              |--PKIXRevocationChecker
              |--PKIXRevocationChecker$Option
              |--PolicyNode
              |--PolicyQualifierInfo
              |--TrustAnchor
              |--X509CRL
              |--X509CRLEntry
              |--X509CRLSelector
              |--X509CertSelector
              |--X509Certificate
              |--X509Extension
           |-+interfaces
              |--DSAKey
              |--DSAKeyPairGenerator
              |--DSAParams
              |--DSAPrivateKey
              |--DSAPublicKey
              |--ECKey
              |--ECPrivateKey
              |--ECPublicKey
              |--RSAKey
              |--RSAMultiPrimePrivateCrtKey
              |--RSAPrivateCrtKey
              |--RSAPrivateKey
              |--RSAPublicKey
           |-+spec
              |--AlgorithmParameterSpec
              |--DSAParameterSpec
              |--DSAPrivateKeySpec
              |--DSAPublicKeySpec
              |--ECField
              |--ECFieldF2m
              |--ECFieldFp
              |--ECGenParameterSpec
              |--ECParameterSpec
              |--ECPoint
              |--ECPrivateKeySpec
              |--ECPublicKeySpec
              |--EllipticCurve
              |--EncodedKeySpec
              |--InvalidKeySpecException
              |--InvalidParameterSpecException
              |--KeySpec
              |--MGF1ParameterSpec
              |--PKCS8EncodedKeySpec
              |--PSSParameterSpec
              |--RSAKeyGenParameterSpec
              |--RSAMultiPrimePrivateCrtKeySpec
              |--RSAOtherPrimeInfo
              |--RSAPrivateCrtKeySpec
              |--RSAPrivateKeySpec
              |--RSAPublicKeySpec
              |--X509EncodedKeySpec
        |-+sql
           |--Array
           |--BatchUpdateException
           |--Blob
           |--CallableStatement
           |--ClientInfoStatus
           |--Clob
           |--Connection
           |--DataTruncation
           |--DatabaseMetaData
           |--Date
           |--Driver
           |--DriverManager
           |--DriverPropertyInfo
           |--NClob
           |--ParameterMetaData
           |--PreparedStatement
           |--Ref
           |--ResultSet
           |--ResultSetMetaData
           |--RowId
           |--RowIdLifetime
           |--SQLClientInfoException
           |--SQLData
           |--SQLDataException
           |--SQLException
           |--SQLFeatureNotSupportedException
           |--SQLInput
           |--SQLIntegrityConstraintViolationException
           |--SQLInvalidAuthorizationSpecException
           |--SQLNonTransientConnectionException
           |--SQLNonTransientException
           |--SQLOutput
           |--SQLPermission
           |--SQLRecoverableException
           |--SQLSyntaxErrorException
           |--SQLTimeoutException
           |--SQLTransactionRollbackException
           |--SQLTransientConnectionException
           |--SQLTransientException
           |--SQLWarning
           |--SQLXML
           |--Savepoint
           |--Statement
           |--Struct
           |--Time
           |--Timestamp
           |--Types
           |--Wrapper
        |-+text
           |--Annotation
           |--AttributedCharacterIterator
           |--AttributedCharacterIterator$Attribute
           |--AttributedString
           |--Bidi
           |--BreakIterator
           |--CharacterIterator
           |--ChoiceFormat
           |--CollationElementIterator
           |--CollationKey
           |--Collator
           |--DateFormat
           |--DateFormat$Field
           |--DateFormatSymbols
           |--DecimalFormat
           |--DecimalFormatSymbols
           |--FieldPosition
           |--Format
           |--Format$Field
           |--MessageFormat
           |--MessageFormat$Field
           |--Normalizer
           |--Normalizer$Form
           |--NumberFormat
           |--NumberFormat$Field
           |--ParseException
           |--ParsePosition
           |--RuleBasedCollator
           |--SimpleDateFormat
           |--StringCharacterIterator
        |-+util
           |--AbstractCollection
           |--AbstractList
           |--AbstractMap
           |--AbstractMap$SimpleEntry
           |--AbstractMap$SimpleImmutableEntry
           |--AbstractQueue
           |--AbstractSequentialList
           |--AbstractSet
           |--ArrayDeque
           |--ArrayList
           |--Arrays
           |--BitSet
           |--Calendar
           |--Collection
           |--Collections
           |--Comparator
           |--ConcurrentModificationException
           |--Currency
           |--Date
           |--Deque
           |--Dictionary
           |--DoubleSummaryStatistics
           |--DuplicateFormatFlagsException
           |--EmptyStackException
           |--EnumMap
           |--EnumSet
           |--Enumeration
           |--EventListener
           |--EventListenerProxy
           |--EventObject
           |--FormatFlagsConversionMismatchException
           |--Formattable
           |--FormattableFlags
           |--Formatter
           |--Formatter$BigDecimalLayoutForm
           |--FormatterClosedException
           |--GregorianCalendar
           |--HashMap
           |--HashSet
           |--Hashtable
           |--IdentityHashMap
           |--IllegalFormatCodePointException
           |--IllegalFormatConversionException
           |--IllegalFormatException
           |--IllegalFormatFlagsException
           |--IllegalFormatPrecisionException
           |--IllegalFormatWidthException
           |--IllformedLocaleException
           |--InputMismatchException
           |--IntSummaryStatistics
           |--InvalidPropertiesFormatException
           |--Iterator
           |--LinkedHashMap
           |--LinkedHashSet
           |--LinkedList
           |--List
           |--ListIterator
           |--ListResourceBundle
           |--Locale
           |--Locale$Builder
           |--Locale$Category
           |--LongSummaryStatistics
           |--Map
           |--Map$Entry
           |--MissingFormatArgumentException
           |--MissingFormatWidthException
           |--MissingResourceException
           |--NavigableMap
           |--NavigableSet
           |--NoSuchElementException
           |--Objects
           |--Observable
           |--Observer
           |--Optional
           |--OptionalDouble
           |--OptionalInt
           |--OptionalLong
           |--PrimitiveIterator
           |--PrimitiveIterator$OfDouble
           |--PrimitiveIterator$OfInt
           |--PrimitiveIterator$OfLong
           |--PriorityQueue
           |--Properties
           |--PropertyPermission
           |--PropertyResourceBundle
           |--Queue
           |--Random
           |--RandomAccess
           |--ResourceBundle
           |--ResourceBundle$Control
           |--Scanner
           |--ServiceConfigurationError
           |--ServiceLoader
           |--Set
           |--SimpleTimeZone
           |--SortedMap
           |--SortedSet
           |--Spliterator
           |--Spliterator$OfDouble
           |--Spliterator$OfInt
           |--Spliterator$OfLong
           |--Spliterator$OfPrimitive
           |--Spliterators
           |--Spliterators$AbstractDoubleSpliterator
           |--Spliterators$AbstractIntSpliterator
           |--Spliterators$AbstractLongSpliterator
           |--Spliterators$AbstractSpliterator
           |--SplittableRandom
           |--Stack
           |--StringJoiner
           |--StringTokenizer
           |--TimeZone
           |--Timer
           |--TimerTask
           |--TooManyListenersException
           |--TreeMap
           |--TreeSet
           |--UUID
           |--UnknownFormatConversionException
           |--UnknownFormatFlagsException
           |--Vector
           |--WeakHashMap
           |-+concurrent
              |--AbstractExecutorService
              |--ArrayBlockingQueue
              |--BlockingDeque
              |--BlockingQueue
              |--BrokenBarrierException
              |--Callable
              |--CancellationException
              |--CompletableFuture
              |--CompletableFuture$AsynchronousCompletionTask
              |--CompletionException
              |--CompletionService
              |--CompletionStage
              |--ConcurrentHashMap
              |--ConcurrentHashMap$KeySetView
              |--ConcurrentLinkedDeque
              |--ConcurrentLinkedQueue
              |--ConcurrentMap
              |--ConcurrentNavigableMap
              |--ConcurrentSkipListMap
              |--ConcurrentSkipListSet
              |--CopyOnWriteArrayList
              |--CopyOnWriteArraySet
              |--CountDownLatch
              |--CountedCompleter
              |--CyclicBarrier
              |--DelayQueue
              |--Delayed
              |--Exchanger
              |--ExecutionException
              |--Executor
              |--ExecutorCompletionService
              |--ExecutorService
              |--Executors
              |--ForkJoinPool
              |--ForkJoinPool$ForkJoinWorkerThreadFactory
              |--ForkJoinPool$ManagedBlocker
              |--ForkJoinTask
              |--ForkJoinWorkerThread
              |--Future
              |--FutureTask
              |--LinkedBlockingDeque
              |--LinkedBlockingQueue
              |--LinkedTransferQueue
              |--Phaser
              |--PriorityBlockingQueue
              |--RecursiveAction
              |--RecursiveTask
              |--RejectedExecutionException
              |--RejectedExecutionHandler
              |--RunnableFuture
              |--RunnableScheduledFuture
              |--ScheduledExecutorService
              |--ScheduledFuture
              |--ScheduledThreadPoolExecutor
              |--Semaphore
              |--SynchronousQueue
              |--ThreadFactory
              |--ThreadLocalRandom
              |--ThreadPoolExecutor
              |--ThreadPoolExecutor$AbortPolicy
              |--ThreadPoolExecutor$CallerRunsPolicy
              |--ThreadPoolExecutor$DiscardOldestPolicy
              |--ThreadPoolExecutor$DiscardPolicy
              |--TimeUnit
              |--TimeoutException
              |--TransferQueue
              |-+atomic
                 |--AtomicBoolean
                 |--AtomicInteger
                 |--AtomicIntegerArray
                 |--AtomicIntegerFieldUpdater
                 |--AtomicLong
                 |--AtomicLongArray
                 |--AtomicLongFieldUpdater
                 |--AtomicMarkableReference
                 |--AtomicReference
                 |--AtomicReferenceArray
                 |--AtomicReferenceFieldUpdater
                 |--AtomicStampedReference
                 |--DoubleAccumulator
                 |--DoubleAdder
                 |--LongAccumulator
                 |--LongAdder
              |-+locks
                 |--AbstractOwnableSynchronizer
                 |--AbstractQueuedLongSynchronizer
                 |--AbstractQueuedLongSynchronizer$ConditionObject
                 |--AbstractQueuedSynchronizer
                 |--AbstractQueuedSynchronizer$ConditionObject
                 |--Condition
                 |--Lock
                 |--LockSupport
                 |--ReadWriteLock
                 |--ReentrantLock
                 |--ReentrantReadWriteLock
                 |--ReentrantReadWriteLock$ReadLock
                 |--ReentrantReadWriteLock$WriteLock
                 |--StampedLock
           |-+function
              |--BiConsumer
              |--BiFunction
              |--BiPredicate
              |--BinaryOperator
              |--BooleanSupplier
              |--Consumer
              |--DoubleBinaryOperator
              |--DoubleConsumer
              |--DoubleFunction
              |--DoublePredicate
              |--DoubleSupplier
              |--DoubleToIntFunction
              |--DoubleToLongFunction
              |--DoubleUnaryOperator
              |--Function
              |--IntBinaryOperator
              |--IntConsumer
              |--IntFunction
              |--IntPredicate
              |--IntSupplier
              |--IntToDoubleFunction
              |--IntToLongFunction
              |--IntUnaryOperator
              |--LongBinaryOperator
              |--LongConsumer
              |--LongFunction
              |--LongPredicate
              |--LongSupplier
              |--LongToDoubleFunction
              |--LongToIntFunction
              |--LongUnaryOperator
              |--ObjDoubleConsumer
              |--ObjIntConsumer
              |--ObjLongConsumer
              |--Predicate
              |--Supplier
              |--ToDoubleBiFunction
              |--ToDoubleFunction
              |--ToIntBiFunction
              |--ToIntFunction
              |--ToLongBiFunction
              |--ToLongFunction
              |--UnaryOperator
           |-+jar
              |--Attributes
              |--Attributes$Name
              |--JarEntry
              |--JarException
              |--JarFile
              |--JarInputStream
              |--JarOutputStream
              |--Manifest
              |--Pack200
              |--Pack200$Packer
              |--Pack200$Unpacker
           |-+logging
              |--ConsoleHandler
              |--ErrorManager
              |--FileHandler
              |--Filter
              |--Formatter
              |--Handler
              |--Level
              |--LogManager
              |--LogRecord
              |--Logger
              |--LoggingMXBean
              |--LoggingPermission
              |--MemoryHandler
              |--SimpleFormatter
              |--SocketHandler
              |--StreamHandler
              |--XMLFormatter
           |-+prefs
              |--AbstractPreferences
              |--BackingStoreException
              |--InvalidPreferencesFormatException
              |--NodeChangeEvent
              |--NodeChangeListener
              |--PreferenceChangeEvent
              |--PreferenceChangeListener
              |--Preferences
              |--PreferencesFactory
           |-+regex
              |--MatchResult
              |--Matcher
              |--Pattern
              |--PatternSyntaxException
           |-+stream
              |--BaseStream
              |--Collector
              |--Collector$Characteristics
              |--Collectors
              |--DoubleStream
              |--DoubleStream$Builder
              |--IntStream
              |--IntStream$Builder
              |--LongStream
              |--LongStream$Builder
              |--Stream
              |--Stream$Builder
              |--StreamSupport
           |-+zip
              |--Adler32
              |--CRC32
              |--CheckedInputStream
              |--CheckedOutputStream
              |--Checksum
              |--DataFormatException
              |--Deflater
              |--DeflaterInputStream
              |--DeflaterOutputStream
              |--GZIPInputStream
              |--GZIPOutputStream
              |--Inflater
              |--InflaterInputStream
              |--InflaterOutputStream
              |--ZipEntry
              |--ZipError
              |--ZipException
              |--ZipFile
              |--ZipInputStream
              |--ZipOutputStream
     |-+javax
        |-+crypto
           |--AEADBadTagException
           |--BadPaddingException
           |--Cipher
           |--CipherInputStream
           |--CipherOutputStream
           |--CipherSpi
           |--EncryptedPrivateKeyInfo
           |--ExemptionMechanism
           |--ExemptionMechanismException
           |--ExemptionMechanismSpi
           |--IllegalBlockSizeException
           |--KeyAgreement
           |--KeyAgreementSpi
           |--KeyGenerator
           |--KeyGeneratorSpi
           |--Mac
           |--MacSpi
           |--NoSuchPaddingException
           |--NullCipher
           |--SealedObject
           |--SecretKey
           |--SecretKeyFactory
           |--SecretKeyFactorySpi
           |--ShortBufferException
           |-+interfaces
              |--DHKey
              |--DHPrivateKey
              |--DHPublicKey
              |--PBEKey
           |-+spec
              |--DESKeySpec
              |--DESedeKeySpec
              |--DHGenParameterSpec
              |--DHParameterSpec
              |--DHPrivateKeySpec
              |--DHPublicKeySpec
              |--GCMParameterSpec
              |--IvParameterSpec
              |--OAEPParameterSpec
              |--PBEKeySpec
              |--PBEParameterSpec
              |--PSource
              |--PSource$PSpecified
              |--RC2ParameterSpec
              |--RC5ParameterSpec
              |--SecretKeySpec
        |-+microedition
           |-+khronos
              |-+egl
                 |--EGL
                 |--EGL10
                 |--EGL11
                 |--EGLConfig
                 |--EGLContext
                 |--EGLDisplay
                 |--EGLSurface
              |-+opengles
                 |--GL
                 |--GL10
                 |--GL10Ext
                 |--GL11
                 |--GL11Ext
                 |--GL11ExtensionPack
        |-+net
           |--ServerSocketFactory
           |--SocketFactory
           |-+ssl
              |--CertPathTrustManagerParameters
              |--ExtendedSSLSession
              |--HandshakeCompletedEvent
              |--HandshakeCompletedListener
              |--HostnameVerifier
              |--HttpsURLConnection
              |--KeyManager
              |--KeyManagerFactory
              |--KeyManagerFactorySpi
              |--KeyStoreBuilderParameters
              |--ManagerFactoryParameters
              |--SNIHostName
              |--SNIMatcher
              |--SNIServerName
              |--SSLContext
              |--SSLContextSpi
              |--SSLEngine
              |--SSLEngineResult
              |--SSLEngineResult$HandshakeStatus
              |--SSLEngineResult$Status
              |--SSLException
              |--SSLHandshakeException
              |--SSLKeyException
              |--SSLParameters
              |--SSLPeerUnverifiedException
              |--SSLPermission
              |--SSLProtocolException
              |--SSLServerSocket
              |--SSLServerSocketFactory
              |--SSLSession
              |--SSLSessionBindingEvent
              |--SSLSessionBindingListener
              |--SSLSessionContext
              |--SSLSocket
              |--SSLSocketFactory
              |--StandardConstants
              |--TrustManager
              |--TrustManagerFactory
              |--TrustManagerFactorySpi
              |--X509ExtendedKeyManager
              |--X509ExtendedTrustManager
              |--X509KeyManager
              |--X509TrustManager
        |-+security
           |-+auth
              |--AuthPermission
              |--DestroyFailedException
              |--Destroyable
              |--PrivateCredentialPermission
              |--Subject
              |--SubjectDomainCombiner
              |-+callback
                 |--Callback
                 |--CallbackHandler
                 |--PasswordCallback
                 |--UnsupportedCallbackException
              |-+login
                 |--LoginException
              |-+x500
                 |--X500Principal
           |-+cert
              |--Certificate
              |--CertificateEncodingException
              |--CertificateException
              |--CertificateExpiredException
              |--CertificateNotYetValidException
              |--CertificateParsingException
              |--X509Certificate
        |-+sql
           |--CommonDataSource
           |--ConnectionEvent
           |--ConnectionEventListener
           |--ConnectionPoolDataSource
           |--DataSource
           |--PooledConnection
           |--RowSet
           |--RowSetEvent
           |--RowSetInternal
           |--RowSetListener
           |--RowSetMetaData
           |--RowSetReader
           |--RowSetWriter
           |--StatementEvent
           |--StatementEventListener
        |-+xml
           |--XMLConstants
           |-+datatype
              |--DatatypeConfigurationException
              |--DatatypeConstants
              |--DatatypeConstants$Field
              |--DatatypeFactory
              |--Duration
              |--XMLGregorianCalendar
           |-+namespace
              |--NamespaceContext
              |--QName
           |-+parsers
              |--DocumentBuilder
              |--DocumentBuilderFactory
              |--FactoryConfigurationError
              |--ParserConfigurationException
              |--SAXParser
              |--SAXParserFactory
           |-+transform
              |--ErrorListener
              |--OutputKeys
              |--Result
              |--Source
              |--SourceLocator
              |--Templates
              |--Transformer
              |--TransformerConfigurationException
              |--TransformerException
              |--TransformerFactory
              |--TransformerFactoryConfigurationError
              |--URIResolver
              |-+dom
                 |--DOMLocator
                 |--DOMResult
                 |--DOMSource
              |-+sax
                 |--SAXResult
                 |--SAXSource
                 |--SAXTransformerFactory
                 |--TemplatesHandler
                 |--TransformerHandler
              |-+stream
                 |--StreamResult
                 |--StreamSource
           |-+validation
              |--Schema
              |--SchemaFactory
              |--SchemaFactoryLoader
              |--TypeInfoProvider
              |--Validator
              |--ValidatorHandler
           |-+xpath
              |--XPath
              |--XPathConstants
              |--XPathException
              |--XPathExpression
              |--XPathExpressionException
              |--XPathFactory
              |--XPathFactoryConfigurationException
              |--XPathFunction
              |--XPathFunctionException
              |--XPathFunctionResolver
              |--XPathVariableResolver
     |-+junit
        |-+framework
           |--Assert
           |--AssertionFailedError
           |--ComparisonFailure
           |--Protectable
           |--Test
           |--TestCase
           |--TestFailure
           |--TestListener
           |--TestResult
           |--TestSuite
        |-+runner
           |--BaseTestRunner
           |--TestSuiteLoader
           |--Version
     |-+org
        |-+apache
           |-+http
              |-+conn
                 |--ConnectTimeoutException
                 |-+scheme
                    |--HostNameResolver
                    |--LayeredSocketFactory
                    |--SocketFactory
                 |-+ssl
                    |--AbstractVerifier
                    |--AllowAllHostnameVerifier
                    |--BrowserCompatHostnameVerifier
                    |--SSLSocketFactory
                    |--StrictHostnameVerifier
                    |--X509HostnameVerifier
              |-+params
                 |--CoreConnectionPNames
                 |--HttpConnectionParams
                 |--HttpParams
        |-+json
           |--JSONArray
           |--JSONException
           |--JSONObject
           |--JSONStringer
           |--JSONTokener
        |-+w3c
           |-+dom
              |--Attr
              |--CDATASection
              |--CharacterData
              |--Comment
              |--DOMConfiguration
              |--DOMError
              |--DOMErrorHandler
              |--DOMException
              |--DOMImplementation
              |--DOMImplementationList
              |--DOMImplementationSource
              |--DOMLocator
              |--DOMStringList
              |--Document
              |--DocumentFragment
              |--DocumentType
              |--Element
              |--Entity
              |--EntityReference
              |--NameList
              |--NamedNodeMap
              |--Node
              |--NodeList
              |--Notation
              |--ProcessingInstruction
              |--Text
              |--TypeInfo
              |--UserDataHandler
              |-+ls
                 |--DOMImplementationLS
                 |--LSException
                 |--LSInput
                 |--LSOutput
                 |--LSParser
                 |--LSParserFilter
                 |--LSResourceResolver
                 |--LSSerializer
        |-+xml
           |-+sax
              |--AttributeList
              |--Attributes
              |--ContentHandler
              |--DTDHandler
              |--DocumentHandler
              |--EntityResolver
              |--ErrorHandler
              |--HandlerBase
              |--InputSource
              |--Locator
              |--Parser
              |--SAXException
              |--SAXNotRecognizedException
              |--SAXNotSupportedException
              |--SAXParseException
              |--XMLFilter
              |--XMLReader
              |-+ext
                 |--Attributes2
                 |--Attributes2Impl
                 |--DeclHandler
                 |--DefaultHandler2
                 |--EntityResolver2
                 |--LexicalHandler
                 |--Locator2
                 |--Locator2Impl
              |-+helpers
                 |--AttributeListImpl
                 |--AttributesImpl
                 |--DefaultHandler
                 |--LocatorImpl
                 |--NamespaceSupport
                 |--ParserAdapter
                 |--ParserFactory
                 |--XMLFilterImpl
                 |--XMLReaderAdapter
                 |--XMLReaderFactory
        |-+xmlpull
           |-+v1
              |--XmlPullParser
              |--XmlPullParserException
              |--XmlPullParserFactory
              |--XmlSerializer
              |-+sax2
                 |--Driver

public final class android.Manifest
  extends java.lang.Object
{
  public void <init>();
}
public final class android.Manifest$permission
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String ACCESS_CHECKIN_PROPERTIES;
  public static final java.lang.String ACCESS_COARSE_LOCATION;
  public static final java.lang.String ACCESS_FINE_LOCATION;
  public static final java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS;
  public static final java.lang.String ACCESS_NETWORK_STATE;
  public static final java.lang.String ACCESS_NOTIFICATION_POLICY;
  public static final java.lang.String ACCESS_WIFI_STATE;
  public static final java.lang.String ACCOUNT_MANAGER;
  public static final java.lang.String ADD_VOICEMAIL;
  public static final java.lang.String BATTERY_STATS;
  public static final java.lang.String BIND_ACCESSIBILITY_SERVICE;
  public static final java.lang.String BIND_APPWIDGET;
  public static final java.lang.String BIND_CARRIER_MESSAGING_SERVICE;
  public static final java.lang.String BIND_CARRIER_SERVICES;
  public static final java.lang.String BIND_CHOOSER_TARGET_SERVICE;
  public static final java.lang.String BIND_CONDITION_PROVIDER_SERVICE;
  public static final java.lang.String BIND_DEVICE_ADMIN;
  public static final java.lang.String BIND_DREAM_SERVICE;
  public static final java.lang.String BIND_INCALL_SERVICE;
  public static final java.lang.String BIND_INPUT_METHOD;
  public static final java.lang.String BIND_MIDI_DEVICE_SERVICE;
  public static final java.lang.String BIND_NFC_SERVICE;
  public static final java.lang.String BIND_NOTIFICATION_LISTENER_SERVICE;
  public static final java.lang.String BIND_PRINT_SERVICE;
  public static final java.lang.String BIND_QUICK_SETTINGS_TILE;
  public static final java.lang.String BIND_REMOTEVIEWS;
  public static final java.lang.String BIND_SCREENING_SERVICE;
  public static final java.lang.String BIND_TELECOM_CONNECTION_SERVICE;
  public static final java.lang.String BIND_TEXT_SERVICE;
  public static final java.lang.String BIND_TV_INPUT;
  public static final java.lang.String BIND_VOICE_INTERACTION;
  public static final java.lang.String BIND_VPN_SERVICE;
  public static final java.lang.String BIND_VR_LISTENER_SERVICE;
  public static final java.lang.String BIND_WALLPAPER;
  public static final java.lang.String BLUETOOTH;
  public static final java.lang.String BLUETOOTH_ADMIN;
  public static final java.lang.String BLUETOOTH_PRIVILEGED;
  public static final java.lang.String BODY_SENSORS;
  public static final java.lang.String BROADCAST_PACKAGE_REMOVED;
  public static final java.lang.String BROADCAST_SMS;
  public static final java.lang.String BROADCAST_STICKY;
  public static final java.lang.String BROADCAST_WAP_PUSH;
  public static final java.lang.String CALL_PHONE;
  public static final java.lang.String CALL_PRIVILEGED;
  public static final java.lang.String CAMERA;
  public static final java.lang.String CAPTURE_AUDIO_OUTPUT;
  public static final java.lang.String CAPTURE_SECURE_VIDEO_OUTPUT;
  public static final java.lang.String CAPTURE_VIDEO_OUTPUT;
  public static final java.lang.String CHANGE_COMPONENT_ENABLED_STATE;
  public static final java.lang.String CHANGE_CONFIGURATION;
  public static final java.lang.String CHANGE_NETWORK_STATE;
  public static final java.lang.String CHANGE_WIFI_MULTICAST_STATE;
  public static final java.lang.String CHANGE_WIFI_STATE;
  public static final java.lang.String CLEAR_APP_CACHE;
  public static final java.lang.String CONTROL_LOCATION_UPDATES;
  public static final java.lang.String DELETE_CACHE_FILES;
  public static final java.lang.String DELETE_PACKAGES;
  public static final java.lang.String DIAGNOSTIC;
  public static final java.lang.String DISABLE_KEYGUARD;
  public static final java.lang.String DUMP;
  public static final java.lang.String EXPAND_STATUS_BAR;
  public static final java.lang.String FACTORY_TEST;
  public static final java.lang.String GET_ACCOUNTS;
  public static final java.lang.String GET_ACCOUNTS_PRIVILEGED;
  public static final java.lang.String GET_PACKAGE_SIZE;
  public static final java.lang.String GET_TASKS;
  public static final java.lang.String GLOBAL_SEARCH;
  public static final java.lang.String INSTALL_LOCATION_PROVIDER;
  public static final java.lang.String INSTALL_PACKAGES;
  public static final java.lang.String INSTALL_SHORTCUT;
  public static final java.lang.String INTERNET;
  public static final java.lang.String KILL_BACKGROUND_PROCESSES;
  public static final java.lang.String LOCATION_HARDWARE;
  public static final java.lang.String MANAGE_DOCUMENTS;
  public static final java.lang.String MASTER_CLEAR;
  public static final java.lang.String MEDIA_CONTENT_CONTROL;
  public static final java.lang.String MODIFY_AUDIO_SETTINGS;
  public static final java.lang.String MODIFY_PHONE_STATE;
  public static final java.lang.String MOUNT_FORMAT_FILESYSTEMS;
  public static final java.lang.String MOUNT_UNMOUNT_FILESYSTEMS;
  public static final java.lang.String NFC;
  public static final java.lang.String PACKAGE_USAGE_STATS;
  public static final java.lang.String PERSISTENT_ACTIVITY;
  public static final java.lang.String PROCESS_OUTGOING_CALLS;
  public static final java.lang.String READ_CALENDAR;
  public static final java.lang.String READ_CALL_LOG;
  public static final java.lang.String READ_CONTACTS;
  public static final java.lang.String READ_EXTERNAL_STORAGE;
  public static final java.lang.String READ_FRAME_BUFFER;
  public static final java.lang.String READ_INPUT_STATE;
  public static final java.lang.String READ_LOGS;
  public static final java.lang.String READ_PHONE_STATE;
  public static final java.lang.String READ_SMS;
  public static final java.lang.String READ_SYNC_SETTINGS;
  public static final java.lang.String READ_SYNC_STATS;
  public static final java.lang.String READ_VOICEMAIL;
  public static final java.lang.String REBOOT;
  public static final java.lang.String RECEIVE_BOOT_COMPLETED;
  public static final java.lang.String RECEIVE_MMS;
  public static final java.lang.String RECEIVE_SMS;
  public static final java.lang.String RECEIVE_WAP_PUSH;
  public static final java.lang.String RECORD_AUDIO;
  public static final java.lang.String REORDER_TASKS;
  public static final java.lang.String REQUEST_IGNORE_BATTERY_OPTIMIZATIONS;
  public static final java.lang.String REQUEST_INSTALL_PACKAGES;
  public static final java.lang.String RESTART_PACKAGES;
  public static final java.lang.String SEND_RESPOND_VIA_MESSAGE;
  public static final java.lang.String SEND_SMS;
  public static final java.lang.String SET_ALARM;
  public static final java.lang.String SET_ALWAYS_FINISH;
  public static final java.lang.String SET_ANIMATION_SCALE;
  public static final java.lang.String SET_DEBUG_APP;
  public static final java.lang.String SET_PREFERRED_APPLICATIONS;
  public static final java.lang.String SET_PROCESS_LIMIT;
  public static final java.lang.String SET_TIME;
  public static final java.lang.String SET_TIME_ZONE;
  public static final java.lang.String SET_WALLPAPER;
  public static final java.lang.String SET_WALLPAPER_HINTS;
  public static final java.lang.String SIGNAL_PERSISTENT_PROCESSES;
  public static final java.lang.String STATUS_BAR;
  public static final java.lang.String SYSTEM_ALERT_WINDOW;
  public static final java.lang.String TRANSMIT_IR;
  public static final java.lang.String UNINSTALL_SHORTCUT;
  public static final java.lang.String UPDATE_DEVICE_STATS;
  public static final java.lang.String USE_FINGERPRINT;
  public static final java.lang.String USE_SIP;
  public static final java.lang.String VIBRATE;
  public static final java.lang.String WAKE_LOCK;
  public static final java.lang.String WRITE_APN_SETTINGS;
  public static final java.lang.String WRITE_CALENDAR;
  public static final java.lang.String WRITE_CALL_LOG;
  public static final java.lang.String WRITE_CONTACTS;
  public static final java.lang.String WRITE_EXTERNAL_STORAGE;
  public static final java.lang.String WRITE_GSERVICES;
  public static final java.lang.String WRITE_SECURE_SETTINGS;
  public static final java.lang.String WRITE_SETTINGS;
  public static final java.lang.String WRITE_SYNC_SETTINGS;
  public static final java.lang.String WRITE_VOICEMAIL;
}
public final class android.Manifest$permission_group
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String CALENDAR;
  public static final java.lang.String CAMERA;
  public static final java.lang.String CONTACTS;
  public static final java.lang.String LOCATION;
  public static final java.lang.String MICROPHONE;
  public static final java.lang.String PHONE;
  public static final java.lang.String SENSORS;
  public static final java.lang.String SMS;
  public static final java.lang.String STORAGE;
}
public final class android.R
  extends java.lang.Object
{
  public void <init>();
}
public final class android.R$anim
  extends java.lang.Object
{
  public void <init>();
  public static final int accelerate_decelerate_interpolator;
  public static final int accelerate_interpolator;
  public static final int anticipate_interpolator;
  public static final int anticipate_overshoot_interpolator;
  public static final int bounce_interpolator;
  public static final int cycle_interpolator;
  public static final int decelerate_interpolator;
  public static final int fade_in;
  public static final int fade_out;
  public static final int linear_interpolator;
  public static final int overshoot_interpolator;
  public static final int slide_in_left;
  public static final int slide_out_right;
}
public final class android.R$animator
  extends java.lang.Object
{
  public void <init>();
  public static final int fade_in;
  public static final int fade_out;
}
public final class android.R$array
  extends java.lang.Object
{
  public void <init>();
  public static final int emailAddressTypes;
  public static final int imProtocols;
  public static final int organizationTypes;
  public static final int phoneTypes;
  public static final int postalAddressTypes;
}
public final class android.R$attr
  extends java.lang.Object
{
  public void <init>();
  public static final int absListViewStyle;
  public static final int accessibilityEventTypes;
  public static final int accessibilityFeedbackType;
  public static final int accessibilityFlags;
  public static final int accessibilityLiveRegion;
  public static final int accessibilityTraversalAfter;
  public static final int accessibilityTraversalBefore;
  public static final int accountPreferences;
  public static final int accountType;
  public static final int action;
  public static final int actionBarDivider;
  public static final int actionBarItemBackground;
  public static final int actionBarPopupTheme;
  public static final int actionBarSize;
  public static final int actionBarSplitStyle;
  public static final int actionBarStyle;
  public static final int actionBarTabBarStyle;
  public static final int actionBarTabStyle;
  public static final int actionBarTabTextStyle;
  public static final int actionBarTheme;
  public static final int actionBarWidgetTheme;
  public static final int actionButtonStyle;
  public static final int actionDropDownStyle;
  public static final int actionLayout;
  public static final int actionMenuTextAppearance;
  public static final int actionMenuTextColor;
  public static final int actionModeBackground;
  public static final int actionModeCloseButtonStyle;
  public static final int actionModeCloseDrawable;
  public static final int actionModeCopyDrawable;
  public static final int actionModeCutDrawable;
  public static final int actionModeFindDrawable;
  public static final int actionModePasteDrawable;
  public static final int actionModeSelectAllDrawable;
  public static final int actionModeShareDrawable;
  public static final int actionModeSplitBackground;
  public static final int actionModeStyle;
  public static final int actionModeWebSearchDrawable;
  public static final int actionOverflowButtonStyle;
  public static final int actionOverflowMenuStyle;
  public static final int actionProviderClass;
  public static final int actionViewClass;
  public static final int activatedBackgroundIndicator;
  public static final int activityCloseEnterAnimation;
  public static final int activityCloseExitAnimation;
  public static final int activityOpenEnterAnimation;
  public static final int activityOpenExitAnimation;
  public static final int addPrintersActivity;
  public static final int addStatesFromChildren;
  public static final int adjustViewBounds;
  public static final int advancedPrintOptionsActivity;
  public static final int alertDialogIcon;
  public static final int alertDialogStyle;
  public static final int alertDialogTheme;
  public static final int alignmentMode;
  public static final int allContactsName;
  public static final int allowBackup;
  public static final int allowClearUserData;
  public static final int allowEmbedded;
  public static final int allowParallelSyncs;
  public static final int allowSingleTap;
  public static final int allowTaskReparenting;
  public static final int allowUndo;
  public static final int alpha;
  public static final int alphabeticShortcut;
  public static final int alwaysDrawnWithCache;
  public static final int alwaysRetainTaskState;
  public static final int amPmBackgroundColor;
  public static final int amPmTextColor;
  public static final int ambientShadowAlpha;
  public static final int angle;
  public static final int animateFirstView;
  public static final int animateLayoutChanges;
  public static final int animateOnClick;
  public static final int animation;
  public static final int animationCache;
  public static final int animationDuration;
  public static final int animationOrder;
  public static final int animationResolution;
  public static final int antialias;
  public static final int anyDensity;
  public static final int apduServiceBanner;
  public static final int apiKey;
  public static final int author;
  public static final int authorities;
  public static final int autoAdvanceViewId;
  public static final int autoCompleteTextViewStyle;
  public static final int autoLink;
  public static final int autoMirrored;
  public static final int autoRemoveFromRecents;
  public static final int autoStart;
  public static final int autoText;
  public static final int autoUrlDetect;
  public static final int autoVerify;
  public static final int background;
  public static final int backgroundDimAmount;
  public static final int backgroundDimEnabled;
  public static final int backgroundSplit;
  public static final int backgroundStacked;
  public static final int backgroundTint;
  public static final int backgroundTintMode;
  public static final int backupAgent;
  public static final int backupInForeground;
  public static final int banner;
  public static final int baseline;
  public static final int baselineAlignBottom;
  public static final int baselineAligned;
  public static final int baselineAlignedChildIndex;
  public static final int bitmap;
  public static final int borderlessButtonStyle;
  public static final int bottom;
  public static final int bottomBright;
  public static final int bottomDark;
  public static final int bottomLeftRadius;
  public static final int bottomMedium;
  public static final int bottomOffset;
  public static final int bottomRightRadius;
  public static final int breadCrumbShortTitle;
  public static final int breadCrumbTitle;
  public static final int breakStrategy;
  public static final int bufferType;
  public static final int button;
  public static final int buttonBarButtonStyle;
  public static final int buttonBarNegativeButtonStyle;
  public static final int buttonBarNeutralButtonStyle;
  public static final int buttonBarPositiveButtonStyle;
  public static final int buttonBarStyle;
  public static final int buttonGravity;
  public static final int buttonStyle;
  public static final int buttonStyleInset;
  public static final int buttonStyleSmall;
  public static final int buttonStyleToggle;
  public static final int buttonTint;
  public static final int buttonTintMode;
  public static final int cacheColorHint;
  public static final int calendarTextColor;
  public static final int calendarViewShown;
  public static final int calendarViewStyle;
  public static final int canControlMagnification;
  public static final int canPerformGestures;
  public static final int canRecord;
  public static final int canRequestEnhancedWebAccessibility;
  public static final int canRequestFilterKeyEvents;
  public static final int canRequestTouchExplorationMode;
  public static final int canRetrieveWindowContent;
  public static final int candidatesTextStyleSpans;
  public static final int capitalize;
  public static final int category;
  public static final int centerBright;
  public static final int centerColor;
  public static final int centerDark;
  public static final int centerMedium;
  public static final int centerX;
  public static final int centerY;
  public static final int checkBoxPreferenceStyle;
  public static final int checkMark;
  public static final int checkMarkTint;
  public static final int checkMarkTintMode;
  public static final int checkable;
  public static final int checkableBehavior;
  public static final int checkboxStyle;
  public static final int checked;
  public static final int checkedButton;
  public static final int checkedTextViewStyle;
  public static final int childDivider;
  public static final int childIndicator;
  public static final int childIndicatorEnd;
  public static final int childIndicatorLeft;
  public static final int childIndicatorRight;
  public static final int childIndicatorStart;
  public static final int choiceMode;
  public static final int clearTaskOnLaunch;
  public static final int clickable;
  public static final int clipChildren;
  public static final int clipOrientation;
  public static final int clipToPadding;
  public static final int closeIcon;
  public static final int codes;
  public static final int collapseColumns;
  public static final int collapseContentDescription;
  public static final int collapseIcon;
  public static final int color;
  public static final int colorAccent;
  public static final int colorActivatedHighlight;
  public static final int colorBackground;
  public static final int colorBackgroundCacheHint;
  public static final int colorBackgroundFloating;
  public static final int colorButtonNormal;
  public static final int colorControlActivated;
  public static final int colorControlHighlight;
  public static final int colorControlNormal;
  public static final int colorEdgeEffect;
  public static final int colorFocusedHighlight;
  public static final int colorForeground;
  public static final int colorForegroundInverse;
  public static final int colorLongPressedHighlight;
  public static final int colorMultiSelectHighlight;
  public static final int colorPressedHighlight;
  public static final int colorPrimary;
  public static final int colorPrimaryDark;
  public static final int columnCount;
  public static final int columnDelay;
  public static final int columnOrderPreserved;
  public static final int columnWidth;
  public static final int commitIcon;
  public static final int compatibleWidthLimitDp;
  public static final int completionHint;
  public static final int completionHintView;
  public static final int completionThreshold;
  public static final int configChanges;
  public static final int configure;
  public static final int constantSize;
  public static final int content;
  public static final int contentAgeHint;
  public static final int contentAuthority;
  public static final int contentDescription;
  public static final int contentInsetEnd;
  public static final int contentInsetEndWithActions;
  public static final int contentInsetLeft;
  public static final int contentInsetRight;
  public static final int contentInsetStart;
  public static final int contentInsetStartWithNavigation;
  public static final int contextClickable;
  public static final int contextPopupMenuStyle;
  public static final int controlX1;
  public static final int controlX2;
  public static final int controlY1;
  public static final int controlY2;
  public static final int countDown;
  public static final int country;
  public static final int cropToPadding;
  public static final int cursorVisible;
  public static final int customNavigationLayout;
  public static final int customTokens;
  public static final int cycles;
  public static final int dashGap;
  public static final int dashWidth;
  public static final int data;
  public static final int datePickerDialogTheme;
  public static final int datePickerMode;
  public static final int datePickerStyle;
  public static final int dateTextAppearance;
  public static final int dayOfWeekBackground;
  public static final int dayOfWeekTextAppearance;
  public static final int debuggable;
  public static final int defaultHeight;
  public static final int defaultToDeviceProtectedStorage;
  public static final int defaultValue;
  public static final int defaultWidth;
  public static final int delay;
  public static final int dependency;
  public static final int descendantFocusability;
  public static final int description;
  public static final int detachWallpaper;
  public static final int detailColumn;
  public static final int detailSocialSummary;
  public static final int detailsElementBackground;
  public static final int dial;
  public static final int dialogIcon;
  public static final int dialogLayout;
  public static final int dialogMessage;
  public static final int dialogPreferenceStyle;
  public static final int dialogPreferredPadding;
  public static final int dialogTheme;
  public static final int dialogTitle;
  public static final int digits;
  public static final int directBootAware;
  public static final int direction;
  public static final int directionDescriptions;
  public static final int directionPriority;
  public static final int disableDependentsState;
  public static final int disabledAlpha;
  public static final int displayOptions;
  public static final int dither;
  public static final int divider;
  public static final int dividerHeight;
  public static final int dividerHorizontal;
  public static final int dividerPadding;
  public static final int dividerVertical;
  public static final int documentLaunchMode;
  public static final int drawSelectorOnTop;
  public static final int drawable;
  public static final int drawableBottom;
  public static final int drawableEnd;
  public static final int drawableLeft;
  public static final int drawablePadding;
  public static final int drawableRight;
  public static final int drawableStart;
  public static final int drawableTint;
  public static final int drawableTintMode;
  public static final int drawableTop;
  public static final int drawingCacheQuality;
  public static final int dropDownAnchor;
  public static final int dropDownHeight;
  public static final int dropDownHintAppearance;
  public static final int dropDownHorizontalOffset;
  public static final int dropDownItemStyle;
  public static final int dropDownListViewStyle;
  public static final int dropDownSelector;
  public static final int dropDownSpinnerStyle;
  public static final int dropDownVerticalOffset;
  public static final int dropDownWidth;
  public static final int duplicateParentState;
  public static final int duration;
  public static final int editTextBackground;
  public static final int editTextColor;
  public static final int editTextPreferenceStyle;
  public static final int editTextStyle;
  public static final int editable;
  public static final int editorExtras;
  public static final int elegantTextHeight;
  public static final int elevation;
  public static final int ellipsize;
  public static final int ems;
  public static final int enableVrMode;
  public static final int enabled;
  public static final int end;
  public static final int endColor;
  public static final int endX;
  public static final int endY;
  public static final int endYear;
  public static final int enterFadeDuration;
  public static final int entries;
  public static final int entryValues;
  public static final int eventsInterceptionEnabled;
  public static final int excludeClass;
  public static final int excludeFromRecents;
  public static final int excludeId;
  public static final int excludeName;
  public static final int exitFadeDuration;
  public static final int expandableListPreferredChildIndicatorLeft;
  public static final int expandableListPreferredChildIndicatorRight;
  public static final int expandableListPreferredChildPaddingLeft;
  public static final int expandableListPreferredItemIndicatorLeft;
  public static final int expandableListPreferredItemIndicatorRight;
  public static final int expandableListPreferredItemPaddingLeft;
  public static final int expandableListViewStyle;
  public static final int expandableListViewWhiteStyle;
  public static final int exported;
  public static final int externalService;
  public static final int extraTension;
  public static final int extractNativeLibs;
  public static final int factor;
  public static final int fadeDuration;
  public static final int fadeEnabled;
  public static final int fadeOffset;
  public static final int fadeScrollbars;
  public static final int fadingEdge;
  public static final int fadingEdgeLength;
  public static final int fadingMode;
  public static final int fastScrollAlwaysVisible;
  public static final int fastScrollEnabled;
  public static final int fastScrollOverlayPosition;
  public static final int fastScrollPreviewBackgroundLeft;
  public static final int fastScrollPreviewBackgroundRight;
  public static final int fastScrollStyle;
  public static final int fastScrollTextColor;
  public static final int fastScrollThumbDrawable;
  public static final int fastScrollTrackDrawable;
  public static final int fillAfter;
  public static final int fillAlpha;
  public static final int fillBefore;
  public static final int fillColor;
  public static final int fillEnabled;
  public static final int fillType;
  public static final int fillViewport;
  public static final int filter;
  public static final int filterTouchesWhenObscured;
  public static final int fingerprintAuthDrawable;
  public static final int finishOnCloseSystemDialogs;
  public static final int finishOnTaskLaunch;
  public static final int firstDayOfWeek;
  public static final int fitsSystemWindows;
  public static final int flipInterval;
  public static final int focusable;
  public static final int focusableInTouchMode;
  public static final int focusedMonthDateColor;
  public static final int fontFamily;
  public static final int fontFeatureSettings;
  public static final int footerDividersEnabled;
  public static final int forceHasOverlappingRendering;
  public static final int foreground;
  public static final int foregroundGravity;
  public static final int foregroundTint;
  public static final int foregroundTintMode;
  public static final int format12Hour;
  public static final int format24Hour;
  public static final int format;
  public static final int fraction;
  public static final int fragment;
  public static final int fragmentAllowEnterTransitionOverlap;
  public static final int fragmentAllowReturnTransitionOverlap;
  public static final int fragmentCloseEnterAnimation;
  public static final int fragmentCloseExitAnimation;
  public static final int fragmentEnterTransition;
  public static final int fragmentExitTransition;
  public static final int fragmentFadeEnterAnimation;
  public static final int fragmentFadeExitAnimation;
  public static final int fragmentOpenEnterAnimation;
  public static final int fragmentOpenExitAnimation;
  public static final int fragmentReenterTransition;
  public static final int fragmentReturnTransition;
  public static final int fragmentSharedElementEnterTransition;
  public static final int fragmentSharedElementReturnTransition;
  public static final int freezesText;
  public static final int fromAlpha;
  public static final int fromDegrees;
  public static final int fromId;
  public static final int fromScene;
  public static final int fromXDelta;
  public static final int fromXScale;
  public static final int fromYDelta;
  public static final int fromYScale;
  public static final int fullBackupContent;
  public static final int fullBackupOnly;
  public static final int fullBright;
  public static final int fullDark;
  public static final int functionalTest;
  public static final int galleryItemBackground;
  public static final int galleryStyle;
  public static final int gestureColor;
  public static final int gestureStrokeAngleThreshold;
  public static final int gestureStrokeLengthThreshold;
  public static final int gestureStrokeSquarenessThreshold;
  public static final int gestureStrokeType;
  public static final int gestureStrokeWidth;
  public static final int glEsVersion;
  public static final int goIcon;
  public static final int gradientRadius;
  public static final int grantUriPermissions;
  public static final int gravity;
  public static final int gridViewStyle;
  public static final int groupIndicator;
  public static final int hand_hour;
  public static final int hand_minute;
  public static final int handle;
  public static final int handleProfiling;
  public static final int hapticFeedbackEnabled;
  public static final int hardwareAccelerated;
  public static final int hasCode;
  public static final int headerAmPmTextAppearance;
  public static final int headerBackground;
  public static final int headerDayOfMonthTextAppearance;
  public static final int headerDividersEnabled;
  public static final int headerMonthTextAppearance;
  public static final int headerTimeTextAppearance;
  public static final int headerYearTextAppearance;
  public static final int height;
  public static final int hideOnContentScroll;
  public static final int hint;
  public static final int homeAsUpIndicator;
  public static final int homeLayout;
  public static final int horizontalDivider;
  public static final int horizontalGap;
  public static final int horizontalScrollViewStyle;
  public static final int horizontalSpacing;
  public static final int host;
  public static final int hotSpotX;
  public static final int hotSpotY;
  public static final int hyphenationFrequency;
  public static final int icon;
  public static final int iconPreview;
  public static final int iconifiedByDefault;
  public static final int id;
  public static final int ignoreGravity;
  public static final int imageButtonStyle;
  public static final int imageWellStyle;
  public static final int imeActionId;
  public static final int imeActionLabel;
  public static final int imeExtractEnterAnimation;
  public static final int imeExtractExitAnimation;
  public static final int imeFullscreenBackground;
  public static final int imeOptions;
  public static final int imeSubtypeExtraValue;
  public static final int imeSubtypeLocale;
  public static final int imeSubtypeMode;
  public static final int immersive;
  public static final int importantForAccessibility;
  public static final int inAnimation;
  public static final int includeFontPadding;
  public static final int includeInGlobalSearch;
  public static final int indeterminate;
  public static final int indeterminateBehavior;
  public static final int indeterminateDrawable;
  public static final int indeterminateDuration;
  public static final int indeterminateOnly;
  public static final int indeterminateProgressStyle;
  public static final int indeterminateTint;
  public static final int indeterminateTintMode;
  public static final int indicatorEnd;
  public static final int indicatorLeft;
  public static final int indicatorRight;
  public static final int indicatorStart;
  public static final int inflatedId;
  public static final int initOrder;
  public static final int initialKeyguardLayout;
  public static final int initialLayout;
  public static final int innerRadius;
  public static final int innerRadiusRatio;
  public static final int inputMethod;
  public static final int inputType;
  public static final int inset;
  public static final int insetBottom;
  public static final int insetLeft;
  public static final int insetRight;
  public static final int insetTop;
  public static final int installLocation;
  public static final int interpolator;
  public static final int isAlwaysSyncable;
  public static final int isAsciiCapable;
  public static final int isAuxiliary;
  public static final int isDefault;
  public static final int isGame;
  public static final int isIndicator;
  public static final int isModifier;
  public static final int isRepeatable;
  public static final int isScrollContainer;
  public static final int isSticky;
  public static final int isolatedProcess;
  public static final int itemBackground;
  public static final int itemIconDisabledAlpha;
  public static final int itemPadding;
  public static final int itemTextAppearance;
  public static final int keepScreenOn;
  public static final int key;
  public static final int keyBackground;
  public static final int keyEdgeFlags;
  public static final int keyHeight;
  public static final int keyIcon;
  public static final int keyLabel;
  public static final int keyOutputText;
  public static final int keyPreviewHeight;
  public static final int keyPreviewLayout;
  public static final int keyPreviewOffset;
  public static final int keySet;
  public static final int keyTextColor;
  public static final int keyTextSize;
  public static final int keyWidth;
  public static final int keyboardLayout;
  public static final int keyboardMode;
  public static final int keycode;
  public static final int killAfterRestore;
  public static final int label;
  public static final int labelFor;
  public static final int labelTextSize;
  public static final int languageTag;
  public static final int largeHeap;
  public static final int largeScreens;
  public static final int largestWidthLimitDp;
  public static final int launchMode;
  public static final int launchTaskBehindSourceAnimation;
  public static final int launchTaskBehindTargetAnimation;
  public static final int layerType;
  public static final int layout;
  public static final int layoutAnimation;
  public static final int layoutDirection;
  public static final int layoutMode;
  public static final int layout_above;
  public static final int layout_alignBaseline;
  public static final int layout_alignBottom;
  public static final int layout_alignEnd;
  public static final int layout_alignLeft;
  public static final int layout_alignParentBottom;
  public static final int layout_alignParentEnd;
  public static final int layout_alignParentLeft;
  public static final int layout_alignParentRight;
  public static final int layout_alignParentStart;
  public static final int layout_alignParentTop;
  public static final int layout_alignRight;
  public static final int layout_alignStart;
  public static final int layout_alignTop;
  public static final int layout_alignWithParentIfMissing;
  public static final int layout_below;
  public static final int layout_centerHorizontal;
  public static final int layout_centerInParent;
  public static final int layout_centerVertical;
  public static final int layout_column;
  public static final int layout_columnSpan;
  public static final int layout_columnWeight;
  public static final int layout_gravity;
  public static final int layout_height;
  public static final int layout_margin;
  public static final int layout_marginBottom;
  public static final int layout_marginEnd;
  public static final int layout_marginLeft;
  public static final int layout_marginRight;
  public static final int layout_marginStart;
  public static final int layout_marginTop;
  public static final int layout_row;
  public static final int layout_rowSpan;
  public static final int layout_rowWeight;
  public static final int layout_scale;
  public static final int layout_span;
  public static final int layout_toEndOf;
  public static final int layout_toLeftOf;
  public static final int layout_toRightOf;
  public static final int layout_toStartOf;
  public static final int layout_weight;
  public static final int layout_width;
  public static final int layout_x;
  public static final int layout_y;
  public static final int left;
  public static final int letterSpacing;
  public static final int level;
  public static final int lineSpacingExtra;
  public static final int lineSpacingMultiplier;
  public static final int lines;
  public static final int linksClickable;
  public static final int listChoiceBackgroundIndicator;
  public static final int listChoiceIndicatorMultiple;
  public static final int listChoiceIndicatorSingle;
  public static final int listDivider;
  public static final int listDividerAlertDialog;
  public static final int listMenuViewStyle;
  public static final int listPopupWindowStyle;
  public static final int listPreferredItemHeight;
  public static final int listPreferredItemHeightLarge;
  public static final int listPreferredItemHeightSmall;
  public static final int listPreferredItemPaddingEnd;
  public static final int listPreferredItemPaddingLeft;
  public static final int listPreferredItemPaddingRight;
  public static final int listPreferredItemPaddingStart;
  public static final int listSelector;
  public static final int listSeparatorTextViewStyle;
  public static final int listViewStyle;
  public static final int listViewWhiteStyle;
  public static final int lockTaskMode;
  public static final int logo;
  public static final int logoDescription;
  public static final int longClickable;
  public static final int loopViews;
  public static final int manageSpaceActivity;
  public static final int mapViewStyle;
  public static final int marqueeRepeatLimit;
  public static final int matchOrder;
  public static final int max;
  public static final int maxButtonHeight;
  public static final int maxDate;
  public static final int maxEms;
  public static final int maxHeight;
  public static final int maxItemsPerRow;
  public static final int maxLength;
  public static final int maxLevel;
  public static final int maxLines;
  public static final int maxRecents;
  public static final int maxRows;
  public static final int maxSdkVersion;
  public static final int maxWidth;
  public static final int maximumAngle;
  public static final int measureAllChildren;
  public static final int measureWithLargestChild;
  public static final int mediaRouteButtonStyle;
  public static final int mediaRouteTypes;
  public static final int menuCategory;
  public static final int mimeType;
  public static final int minDate;
  public static final int minEms;
  public static final int minHeight;
  public static final int minLevel;
  public static final int minLines;
  public static final int minResizeHeight;
  public static final int minResizeWidth;
  public static final int minSdkVersion;
  public static final int minWidth;
  public static final int minimumHorizontalAngle;
  public static final int minimumVerticalAngle;
  public static final int mipMap;
  public static final int mirrorForRtl;
  public static final int mode;
  public static final int moreIcon;
  public static final int multiArch;
  public static final int multiprocess;
  public static final int name;
  public static final int navigationBarColor;
  public static final int navigationContentDescription;
  public static final int navigationIcon;
  public static final int navigationMode;
  public static final int negativeButtonText;
  public static final int nestedScrollingEnabled;
  public static final int networkSecurityConfig;
  public static final int nextFocusDown;
  public static final int nextFocusForward;
  public static final int nextFocusLeft;
  public static final int nextFocusRight;
  public static final int nextFocusUp;
  public static final int noHistory;
  public static final int normalScreens;
  public static final int notificationTimeout;
  public static final int numColumns;
  public static final int numStars;
  public static final int numberPickerStyle;
  public static final int numbersBackgroundColor;
  public static final int numbersInnerTextColor;
  public static final int numbersSelectorColor;
  public static final int numbersTextColor;
  public static final int numeric;
  public static final int numericShortcut;
  public static final int offset;
  public static final int onClick;
  public static final int oneshot;
  public static final int opacity;
  public static final int order;
  public static final int orderInCategory;
  public static final int ordering;
  public static final int orderingFromXml;
  public static final int orientation;
  public static final int outAnimation;
  public static final int outlineProvider;
  public static final int overScrollFooter;
  public static final int overScrollHeader;
  public static final int overScrollMode;
  public static final int overlapAnchor;
  public static final int overridesImplicitlyEnabledSubtype;
  public static final int packageNames;
  public static final int padding;
  public static final int paddingBottom;
  public static final int paddingEnd;
  public static final int paddingLeft;
  public static final int paddingMode;
  public static final int paddingRight;
  public static final int paddingStart;
  public static final int paddingTop;
  public static final int panelBackground;
  public static final int panelColorBackground;
  public static final int panelColorForeground;
  public static final int panelFullBackground;
  public static final int panelTextAppearance;
  public static final int parentActivityName;
  public static final int password;
  public static final int path;
  public static final int pathData;
  public static final int pathPattern;
  public static final int pathPrefix;
  public static final int patternPathData;
  public static final int permission;
  public static final int permissionFlags;
  public static final int permissionGroup;
  public static final int permissionGroupFlags;
  public static final int persistableMode;
  public static final int persistent;
  public static final int persistentDrawingCache;
  public static final int phoneNumber;
  public static final int pivotX;
  public static final int pivotY;
  public static final int pointerIcon;
  public static final int popupAnimationStyle;
  public static final int popupBackground;
  public static final int popupCharacters;
  public static final int popupElevation;
  public static final int popupEnterTransition;
  public static final int popupExitTransition;
  public static final int popupKeyboard;
  public static final int popupLayout;
  public static final int popupMenuStyle;
  public static final int popupTheme;
  public static final int popupWindowStyle;
  public static final int port;
  public static final int positiveButtonText;
  public static final int preferenceCategoryStyle;
  public static final int preferenceFragmentStyle;
  public static final int preferenceInformationStyle;
  public static final int preferenceLayoutChild;
  public static final int preferenceScreenStyle;
  public static final int preferenceStyle;
  public static final int presentationTheme;
  public static final int previewImage;
  public static final int priority;
  public static final int privateImeOptions;
  public static final int process;
  public static final int progress;
  public static final int progressBackgroundTint;
  public static final int progressBackgroundTintMode;
  public static final int progressBarPadding;
  public static final int progressBarStyle;
  public static final int progressBarStyleHorizontal;
  public static final int progressBarStyleInverse;
  public static final int progressBarStyleLarge;
  public static final int progressBarStyleLargeInverse;
  public static final int progressBarStyleSmall;
  public static final int progressBarStyleSmallInverse;
  public static final int progressBarStyleSmallTitle;
  public static final int progressDrawable;
  public static final int progressTint;
  public static final int progressTintMode;
  public static final int prompt;
  public static final int propertyName;
  public static final int propertyXName;
  public static final int propertyYName;
  public static final int protectionLevel;
  public static final int publicKey;
  public static final int queryActionMsg;
  public static final int queryAfterZeroResults;
  public static final int queryBackground;
  public static final int queryHint;
  public static final int quickContactBadgeStyleSmallWindowLarge;
  public static final int quickContactBadgeStyleSmallWindowMedium;
  public static final int quickContactBadgeStyleSmallWindowSmall;
  public static final int quickContactBadgeStyleWindowLarge;
  public static final int quickContactBadgeStyleWindowMedium;
  public static final int quickContactBadgeStyleWindowSmall;
  public static final int radioButtonStyle;
  public static final int radius;
  public static final int rating;
  public static final int ratingBarStyle;
  public static final int ratingBarStyleIndicator;
  public static final int ratingBarStyleSmall;
  public static final int readPermission;
  public static final int recognitionService;
  public static final int relinquishTaskIdentity;
  public static final int reparent;
  public static final int reparentWithOverlay;
  public static final int repeatCount;
  public static final int repeatMode;
  public static final int reqFiveWayNav;
  public static final int reqHardKeyboard;
  public static final int reqKeyboardType;
  public static final int reqNavigation;
  public static final int reqTouchScreen;
  public static final int requireDeviceUnlock;
  public static final int required;
  public static final int requiredAccountType;
  public static final int requiredForAllUsers;
  public static final int requiresFadingEdge;
  public static final int requiresSmallestWidthDp;
  public static final int resizeClip;
  public static final int resizeMode;
  public static final int resizeable;
  public static final int resizeableActivity;
  public static final int resource;
  public static final int restoreAnyVersion;
  public static final int restoreNeedsApplication;
  public static final int restrictedAccountType;
  public static final int restrictionType;
  public static final int resumeWhilePausing;
  public static final int reversible;
  public static final int revisionCode;
  public static final int right;
  public static final int ringtonePreferenceStyle;
  public static final int ringtoneType;
  public static final int rotation;
  public static final int rotationX;
  public static final int rotationY;
  public static final int rowCount;
  public static final int rowDelay;
  public static final int rowEdgeFlags;
  public static final int rowHeight;
  public static final int rowOrderPreserved;
  public static final int saveEnabled;
  public static final int scaleGravity;
  public static final int scaleHeight;
  public static final int scaleType;
  public static final int scaleWidth;
  public static final int scaleX;
  public static final int scaleY;
  public static final int scheme;
  public static final int screenDensity;
  public static final int screenOrientation;
  public static final int screenSize;
  public static final int scrollHorizontally;
  public static final int scrollIndicators;
  public static final int scrollViewStyle;
  public static final int scrollX;
  public static final int scrollY;
  public static final int scrollbarAlwaysDrawHorizontalTrack;
  public static final int scrollbarAlwaysDrawVerticalTrack;
  public static final int scrollbarDefaultDelayBeforeFade;
  public static final int scrollbarFadeDuration;
  public static final int scrollbarSize;
  public static final int scrollbarStyle;
  public static final int scrollbarThumbHorizontal;
  public static final int scrollbarThumbVertical;
  public static final int scrollbarTrackHorizontal;
  public static final int scrollbarTrackVertical;
  public static final int scrollbars;
  public static final int scrollingCache;
  public static final int searchButtonText;
  public static final int searchHintIcon;
  public static final int searchIcon;
  public static final int searchMode;
  public static final int searchSettingsDescription;
  public static final int searchSuggestAuthority;
  public static final int searchSuggestIntentAction;
  public static final int searchSuggestIntentData;
  public static final int searchSuggestPath;
  public static final int searchSuggestSelection;
  public static final int searchSuggestThreshold;
  public static final int searchViewStyle;
  public static final int secondaryProgress;
  public static final int secondaryProgressTint;
  public static final int secondaryProgressTintMode;
  public static final int seekBarStyle;
  public static final int segmentedButtonStyle;
  public static final int selectAllOnFocus;
  public static final int selectable;
  public static final int selectableItemBackground;
  public static final int selectableItemBackgroundBorderless;
  public static final int selectedDateVerticalBar;
  public static final int selectedWeekBackgroundColor;
  public static final int sessionService;
  public static final int settingsActivity;
  public static final int setupActivity;
  public static final int shadowColor;
  public static final int shadowDx;
  public static final int shadowDy;
  public static final int shadowRadius;
  public static final int shape;
  public static final int shareInterpolator;
  public static final int sharedUserId;
  public static final int sharedUserLabel;
  public static final int shouldDisableView;
  public static final int showAsAction;
  public static final int showDefault;
  public static final int showDividers;
  public static final int showForAllUsers;
  public static final int showOnLockScreen;
  public static final int showSilent;
  public static final int showText;
  public static final int showWeekNumber;
  public static final int shownWeekCount;
  public static final int shrinkColumns;
  public static final int singleLine;
  public static final int singleUser;
  public static final int slideEdge;
  public static final int smallIcon;
  public static final int smallScreens;
  public static final int smoothScrollbar;
  public static final int soundEffectsEnabled;
  public static final int spacing;
  public static final int spinnerDropDownItemStyle;
  public static final int spinnerItemStyle;
  public static final int spinnerMode;
  public static final int spinnerStyle;
  public static final int spinnersShown;
  public static final int splitMotionEvents;
  public static final int splitTrack;
  public static final int spotShadowAlpha;
  public static final int src;
  public static final int ssp;
  public static final int sspPattern;
  public static final int sspPrefix;
  public static final int stackFromBottom;
  public static final int stackViewStyle;
  public static final int starStyle;
  public static final int start;
  public static final int startColor;
  public static final int startDelay;
  public static final int startOffset;
  public static final int startX;
  public static final int startY;
  public static final int startYear;
  public static final int stateListAnimator;
  public static final int stateNotNeeded;
  public static final int state_above_anchor;
  public static final int state_accelerated;
  public static final int state_activated;
  public static final int state_active;
  public static final int state_checkable;
  public static final int state_checked;
  public static final int state_drag_can_accept;
  public static final int state_drag_hovered;
  public static final int state_empty;
  public static final int state_enabled;
  public static final int state_expanded;
  public static final int state_first;
  public static final int state_focused;
  public static final int state_hovered;
  public static final int state_last;
  public static final int state_long_pressable;
  public static final int state_middle;
  public static final int state_multiline;
  public static final int state_pressed;
  public static final int state_selected;
  public static final int state_single;
  public static final int state_window_focused;
  public static final int staticWallpaperPreview;
  public static final int statusBarColor;
  public static final int stepSize;
  public static final int stopWithTask;
  public static final int streamType;
  public static final int stretchColumns;
  public static final int stretchMode;
  public static final int strokeAlpha;
  public static final int strokeColor;
  public static final int strokeLineCap;
  public static final int strokeLineJoin;
  public static final int strokeMiterLimit;
  public static final int strokeWidth;
  public static final int subMenuArrow;
  public static final int submitBackground;
  public static final int subtitle;
  public static final int subtitleTextAppearance;
  public static final int subtitleTextColor;
  public static final int subtitleTextStyle;
  public static final int subtypeExtraValue;
  public static final int subtypeId;
  public static final int subtypeLocale;
  public static final int suggestActionMsg;
  public static final int suggestActionMsgColumn;
  public static final int suggestionRowLayout;
  public static final int summary;
  public static final int summaryColumn;
  public static final int summaryOff;
  public static final int summaryOn;
  public static final int supportsAssist;
  public static final int supportsLaunchVoiceAssistFromKeyguard;
  public static final int supportsLocalInteraction;
  public static final int supportsPictureInPicture;
  public static final int supportsRtl;
  public static final int supportsSwitchingToNextInputMethod;
  public static final int supportsUploading;
  public static final int switchMinWidth;
  public static final int switchPadding;
  public static final int switchPreferenceStyle;
  public static final int switchStyle;
  public static final int switchTextAppearance;
  public static final int switchTextOff;
  public static final int switchTextOn;
  public static final int syncable;
  public static final int tabStripEnabled;
  public static final int tabStripLeft;
  public static final int tabStripRight;
  public static final int tabWidgetStyle;
  public static final int tag;
  public static final int targetActivity;
  public static final int targetClass;
  public static final int targetDescriptions;
  public static final int targetId;
  public static final int targetName;
  public static final int targetPackage;
  public static final int targetSdkVersion;
  public static final int taskAffinity;
  public static final int taskCloseEnterAnimation;
  public static final int taskCloseExitAnimation;
  public static final int taskOpenEnterAnimation;
  public static final int taskOpenExitAnimation;
  public static final int taskToBackEnterAnimation;
  public static final int taskToBackExitAnimation;
  public static final int taskToFrontEnterAnimation;
  public static final int taskToFrontExitAnimation;
  public static final int tension;
  public static final int testOnly;
  public static final int text;
  public static final int textAlignment;
  public static final int textAllCaps;
  public static final int textAppearance;
  public static final int textAppearanceButton;
  public static final int textAppearanceInverse;
  public static final int textAppearanceLarge;
  public static final int textAppearanceLargeInverse;
  public static final int textAppearanceLargePopupMenu;
  public static final int textAppearanceListItem;
  public static final int textAppearanceListItemSecondary;
  public static final int textAppearanceListItemSmall;
  public static final int textAppearanceMedium;
  public static final int textAppearanceMediumInverse;
  public static final int textAppearancePopupMenuHeader;
  public static final int textAppearanceSearchResultSubtitle;
  public static final int textAppearanceSearchResultTitle;
  public static final int textAppearanceSmall;
  public static final int textAppearanceSmallInverse;
  public static final int textAppearanceSmallPopupMenu;
  public static final int textCheckMark;
  public static final int textCheckMarkInverse;
  public static final int textColor;
  public static final int textColorAlertDialogListItem;
  public static final int textColorHighlight;
  public static final int textColorHighlightInverse;
  public static final int textColorHint;
  public static final int textColorHintInverse;
  public static final int textColorLink;
  public static final int textColorLinkInverse;
  public static final int textColorPrimary;
  public static final int textColorPrimaryDisableOnly;
  public static final int textColorPrimaryInverse;
  public static final int textColorPrimaryInverseDisableOnly;
  public static final int textColorPrimaryInverseNoDisable;
  public static final int textColorPrimaryNoDisable;
  public static final int textColorSecondary;
  public static final int textColorSecondaryInverse;
  public static final int textColorSecondaryInverseNoDisable;
  public static final int textColorSecondaryNoDisable;
  public static final int textColorTertiary;
  public static final int textColorTertiaryInverse;
  public static final int textCursorDrawable;
  public static final int textDirection;
  public static final int textEditNoPasteWindowLayout;
  public static final int textEditPasteWindowLayout;
  public static final int textEditSideNoPasteWindowLayout;
  public static final int textEditSidePasteWindowLayout;
  public static final int textEditSuggestionItemLayout;
  public static final int textFilterEnabled;
  public static final int textIsSelectable;
  public static final int textOff;
  public static final int textOn;
  public static final int textScaleX;
  public static final int textSelectHandle;
  public static final int textSelectHandleLeft;
  public static final int textSelectHandleRight;
  public static final int textSelectHandleWindowStyle;
  public static final int textSize;
  public static final int textStyle;
  public static final int textSuggestionsWindowStyle;
  public static final int textViewStyle;
  public static final int theme;
  public static final int thickness;
  public static final int thicknessRatio;
  public static final int thumb;
  public static final int thumbOffset;
  public static final int thumbPosition;
  public static final int thumbTextPadding;
  public static final int thumbTint;
  public static final int thumbTintMode;
  public static final int thumbnail;
  public static final int tickMark;
  public static final int tickMarkTint;
  public static final int tickMarkTintMode;
  public static final int tileMode;
  public static final int tileModeX;
  public static final int tileModeY;
  public static final int timePickerDialogTheme;
  public static final int timePickerMode;
  public static final int timePickerStyle;
  public static final int timeZone;
  public static final int tint;
  public static final int tintMode;
  public static final int title;
  public static final int titleCondensed;
  public static final int titleMargin;
  public static final int titleMarginBottom;
  public static final int titleMarginEnd;
  public static final int titleMarginStart;
  public static final int titleMarginTop;
  public static final int titleTextAppearance;
  public static final int titleTextColor;
  public static final int titleTextStyle;
  public static final int toAlpha;
  public static final int toDegrees;
  public static final int toId;
  public static final int toScene;
  public static final int toXDelta;
  public static final int toXScale;
  public static final int toYDelta;
  public static final int toYScale;
  public static final int toolbarStyle;
  public static final int top;
  public static final int topBright;
  public static final int topDark;
  public static final int topLeftRadius;
  public static final int topOffset;
  public static final int topRightRadius;
  public static final int touchscreenBlocksFocus;
  public static final int track;
  public static final int trackTint;
  public static final int trackTintMode;
  public static final int transcriptMode;
  public static final int transformPivotX;
  public static final int transformPivotY;
  public static final int transition;
  public static final int transitionGroup;
  public static final int transitionName;
  public static final int transitionOrdering;
  public static final int transitionVisibilityMode;
  public static final int translateX;
  public static final int translateY;
  public static final int translationX;
  public static final int translationY;
  public static final int translationZ;
  public static final int trimPathEnd;
  public static final int trimPathOffset;
  public static final int trimPathStart;
  public static final int tunerCount;
  public static final int type;
  public static final int typeface;
  public static final int uiOptions;
  public static final int uncertainGestureColor;
  public static final int unfocusedMonthDateColor;
  public static final int unselectedAlpha;
  public static final int updatePeriodMillis;
  public static final int use32bitAbi;
  public static final int useDefaultMargins;
  public static final int useIntrinsicSizeAsMinimum;
  public static final int useLevel;
  public static final int userVisible;
  public static final int usesCleartextTraffic;
  public static final int value;
  public static final int valueFrom;
  public static final int valueTo;
  public static final int valueType;
  public static final int variablePadding;
  public static final int vendor;
  public static final int version;
  public static final int versionCode;
  public static final int versionName;
  public static final int verticalCorrection;
  public static final int verticalDivider;
  public static final int verticalGap;
  public static final int verticalScrollbarPosition;
  public static final int verticalSpacing;
  public static final int viewportHeight;
  public static final int viewportWidth;
  public static final int visibility;
  public static final int visible;
  public static final int vmSafeMode;
  public static final int voiceIcon;
  public static final int voiceLanguage;
  public static final int voiceLanguageModel;
  public static final int voiceMaxResults;
  public static final int voicePromptText;
  public static final int voiceSearchMode;
  public static final int wallpaperCloseEnterAnimation;
  public static final int wallpaperCloseExitAnimation;
  public static final int wallpaperIntraCloseEnterAnimation;
  public static final int wallpaperIntraCloseExitAnimation;
  public static final int wallpaperIntraOpenEnterAnimation;
  public static final int wallpaperIntraOpenExitAnimation;
  public static final int wallpaperOpenEnterAnimation;
  public static final int wallpaperOpenExitAnimation;
  public static final int webTextViewStyle;
  public static final int webViewStyle;
  public static final int weekDayTextAppearance;
  public static final int weekNumberColor;
  public static final int weekSeparatorLineColor;
  public static final int weightSum;
  public static final int widgetCategory;
  public static final int widgetLayout;
  public static final int width;
  public static final int windowActionBar;
  public static final int windowActionBarOverlay;
  public static final int windowActionModeOverlay;
  public static final int windowActivityTransitions;
  public static final int windowAllowEnterTransitionOverlap;
  public static final int windowAllowReturnTransitionOverlap;
  public static final int windowAnimationStyle;
  public static final int windowBackground;
  public static final int windowBackgroundFallback;
  public static final int windowClipToOutline;
  public static final int windowCloseOnTouchOutside;
  public static final int windowContentOverlay;
  public static final int windowContentTransitionManager;
  public static final int windowContentTransitions;
  public static final int windowDisablePreview;
  public static final int windowDrawsSystemBarBackgrounds;
  public static final int windowElevation;
  public static final int windowEnableSplitTouch;
  public static final int windowEnterAnimation;
  public static final int windowEnterTransition;
  public static final int windowExitAnimation;
  public static final int windowExitTransition;
  public static final int windowFrame;
  public static final int windowFullscreen;
  public static final int windowHideAnimation;
  public static final int windowIsFloating;
  public static final int windowIsTranslucent;
  public static final int windowLightStatusBar;
  public static final int windowMinWidthMajor;
  public static final int windowMinWidthMinor;
  public static final int windowNoDisplay;
  public static final int windowNoTitle;
  public static final int windowOverscan;
  public static final int windowReenterTransition;
  public static final int windowReturnTransition;
  public static final int windowSharedElementEnterTransition;
  public static final int windowSharedElementExitTransition;
  public static final int windowSharedElementReenterTransition;
  public static final int windowSharedElementReturnTransition;
  public static final int windowSharedElementsUseOverlay;
  public static final int windowShowAnimation;
  public static final int windowShowWallpaper;
  public static final int windowSoftInputMode;
  public static final int windowSwipeToDismiss;
  public static final int windowTitleBackgroundStyle;
  public static final int windowTitleSize;
  public static final int windowTitleStyle;
  public static final int windowTransitionBackgroundFadeDuration;
  public static final int windowTranslucentNavigation;
  public static final int windowTranslucentStatus;
  public static final int writePermission;
  public static final int x;
  public static final int xlargeScreens;
  public static final int y;
  public static final int yearListItemTextAppearance;
  public static final int yearListSelectorColor;
  public static final int yesNoPreferenceStyle;
  public static final int zAdjustment;
}
public final class android.R$bool
  extends java.lang.Object
{
  public void <init>();
}
public final class android.R$color
  extends java.lang.Object
{
  public void <init>();
  public static final int background_dark;
  public static final int background_light;
  public static final int black;
  public static final int darker_gray;
  public static final int holo_blue_bright;
  public static final int holo_blue_dark;
  public static final int holo_blue_light;
  public static final int holo_green_dark;
  public static final int holo_green_light;
  public static final int holo_orange_dark;
  public static final int holo_orange_light;
  public static final int holo_purple;
  public static final int holo_red_dark;
  public static final int holo_red_light;
  public static final int primary_text_dark;
  public static final int primary_text_dark_nodisable;
  public static final int primary_text_light;
  public static final int primary_text_light_nodisable;
  public static final int secondary_text_dark;
  public static final int secondary_text_dark_nodisable;
  public static final int secondary_text_light;
  public static final int secondary_text_light_nodisable;
  public static final int tab_indicator_text;
  public static final int tertiary_text_dark;
  public static final int tertiary_text_light;
  public static final int transparent;
  public static final int white;
  public static final int widget_edittext_dark;
}
public final class android.R$dimen
  extends java.lang.Object
{
  public void <init>();
  public static final int app_icon_size;
  public static final int dialog_min_width_major;
  public static final int dialog_min_width_minor;
  public static final int notification_large_icon_height;
  public static final int notification_large_icon_width;
  public static final int thumbnail_height;
  public static final int thumbnail_width;
}
public final class android.R$drawable
  extends java.lang.Object
{
  public void <init>();
  public static final int alert_dark_frame;
  public static final int alert_light_frame;
  public static final int arrow_down_float;
  public static final int arrow_up_float;
  public static final int bottom_bar;
  public static final int btn_default;
  public static final int btn_default_small;
  public static final int btn_dialog;
  public static final int btn_dropdown;
  public static final int btn_minus;
  public static final int btn_plus;
  public static final int btn_radio;
  public static final int btn_star;
  public static final int btn_star_big_off;
  public static final int btn_star_big_on;
  public static final int button_onoff_indicator_off;
  public static final int button_onoff_indicator_on;
  public static final int checkbox_off_background;
  public static final int checkbox_on_background;
  public static final int dark_header;
  public static final int dialog_frame;
  public static final int dialog_holo_dark_frame;
  public static final int dialog_holo_light_frame;
  public static final int divider_horizontal_bright;
  public static final int divider_horizontal_dark;
  public static final int divider_horizontal_dim_dark;
  public static final int divider_horizontal_textfield;
  public static final int edit_text;
  public static final int editbox_background;
  public static final int editbox_background_normal;
  public static final int editbox_dropdown_dark_frame;
  public static final int editbox_dropdown_light_frame;
  public static final int gallery_thumb;
  public static final int ic_btn_speak_now;
  public static final int ic_delete;
  public static final int ic_dialog_alert;
  public static final int ic_dialog_dialer;
  public static final int ic_dialog_email;
  public static final int ic_dialog_info;
  public static final int ic_dialog_map;
  public static final int ic_input_add;
  public static final int ic_input_delete;
  public static final int ic_input_get;
  public static final int ic_lock_idle_alarm;
  public static final int ic_lock_idle_charging;
  public static final int ic_lock_idle_lock;
  public static final int ic_lock_idle_low_battery;
  public static final int ic_lock_lock;
  public static final int ic_lock_power_off;
  public static final int ic_lock_silent_mode;
  public static final int ic_lock_silent_mode_off;
  public static final int ic_media_ff;
  public static final int ic_media_next;
  public static final int ic_media_pause;
  public static final int ic_media_play;
  public static final int ic_media_previous;
  public static final int ic_media_rew;
  public static final int ic_menu_add;
  public static final int ic_menu_agenda;
  public static final int ic_menu_always_landscape_portrait;
  public static final int ic_menu_call;
  public static final int ic_menu_camera;
  public static final int ic_menu_close_clear_cancel;
  public static final int ic_menu_compass;
  public static final int ic_menu_crop;
  public static final int ic_menu_day;
  public static final int ic_menu_delete;
  public static final int ic_menu_directions;
  public static final int ic_menu_edit;
  public static final int ic_menu_gallery;
  public static final int ic_menu_help;
  public static final int ic_menu_info_details;
  public static final int ic_menu_manage;
  public static final int ic_menu_mapmode;
  public static final int ic_menu_month;
  public static final int ic_menu_more;
  public static final int ic_menu_my_calendar;
  public static final int ic_menu_mylocation;
  public static final int ic_menu_myplaces;
  public static final int ic_menu_preferences;
  public static final int ic_menu_recent_history;
  public static final int ic_menu_report_image;
  public static final int ic_menu_revert;
  public static final int ic_menu_rotate;
  public static final int ic_menu_save;
  public static final int ic_menu_search;
  public static final int ic_menu_send;
  public static final int ic_menu_set_as;
  public static final int ic_menu_share;
  public static final int ic_menu_slideshow;
  public static final int ic_menu_sort_alphabetically;
  public static final int ic_menu_sort_by_size;
  public static final int ic_menu_today;
  public static final int ic_menu_upload;
  public static final int ic_menu_upload_you_tube;
  public static final int ic_menu_view;
  public static final int ic_menu_week;
  public static final int ic_menu_zoom;
  public static final int ic_notification_clear_all;
  public static final int ic_notification_overlay;
  public static final int ic_partial_secure;
  public static final int ic_popup_disk_full;
  public static final int ic_popup_reminder;
  public static final int ic_popup_sync;
  public static final int ic_search_category_default;
  public static final int ic_secure;
  public static final int list_selector_background;
  public static final int menu_frame;
  public static final int menu_full_frame;
  public static final int menuitem_background;
  public static final int picture_frame;
  public static final int presence_audio_away;
  public static final int presence_audio_busy;
  public static final int presence_audio_online;
  public static final int presence_away;
  public static final int presence_busy;
  public static final int presence_invisible;
  public static final int presence_offline;
  public static final int presence_online;
  public static final int presence_video_away;
  public static final int presence_video_busy;
  public static final int presence_video_online;
  public static final int progress_horizontal;
  public static final int progress_indeterminate_horizontal;
  public static final int radiobutton_off_background;
  public static final int radiobutton_on_background;
  public static final int screen_background_dark;
  public static final int screen_background_dark_transparent;
  public static final int screen_background_light;
  public static final int screen_background_light_transparent;
  public static final int spinner_background;
  public static final int spinner_dropdown_background;
  public static final int star_big_off;
  public static final int star_big_on;
  public static final int star_off;
  public static final int star_on;
  public static final int stat_notify_call_mute;
  public static final int stat_notify_chat;
  public static final int stat_notify_error;
  public static final int stat_notify_missed_call;
  public static final int stat_notify_more;
  public static final int stat_notify_sdcard;
  public static final int stat_notify_sdcard_prepare;
  public static final int stat_notify_sdcard_usb;
  public static final int stat_notify_sync;
  public static final int stat_notify_sync_noanim;
  public static final int stat_notify_voicemail;
  public static final int stat_sys_data_bluetooth;
  public static final int stat_sys_download;
  public static final int stat_sys_download_done;
  public static final int stat_sys_headset;
  public static final int stat_sys_phone_call;
  public static final int stat_sys_phone_call_forward;
  public static final int stat_sys_phone_call_on_hold;
  public static final int stat_sys_speakerphone;
  public static final int stat_sys_upload;
  public static final int stat_sys_upload_done;
  public static final int stat_sys_vp_phone_call;
  public static final int stat_sys_vp_phone_call_on_hold;
  public static final int stat_sys_warning;
  public static final int status_bar_item_app_background;
  public static final int status_bar_item_background;
  public static final int sym_action_call;
  public static final int sym_action_chat;
  public static final int sym_action_email;
  public static final int sym_call_incoming;
  public static final int sym_call_missed;
  public static final int sym_call_outgoing;
  public static final int sym_contact_card;
  public static final int sym_def_app_icon;
  public static final int title_bar;
  public static final int title_bar_tall;
  public static final int toast_frame;
  public static final int zoom_plate;
}
public final class android.R$fraction
  extends java.lang.Object
{
  public void <init>();
}
public final class android.R$id
  extends java.lang.Object
{
  public void <init>();
  public static final int accessibilityActionContextClick;
  public static final int accessibilityActionScrollDown;
  public static final int accessibilityActionScrollLeft;
  public static final int accessibilityActionScrollRight;
  public static final int accessibilityActionScrollToPosition;
  public static final int accessibilityActionScrollUp;
  public static final int accessibilityActionSetProgress;
  public static final int accessibilityActionShowOnScreen;
  public static final int addToDictionary;
  public static final int background;
  public static final int button1;
  public static final int button2;
  public static final int button3;
  public static final int candidatesArea;
  public static final int checkbox;
  public static final int closeButton;
  public static final int content;
  public static final int copy;
  public static final int copyUrl;
  public static final int custom;
  public static final int cut;
  public static final int edit;
  public static final int empty;
  public static final int extractArea;
  public static final int hint;
  public static final int home;
  public static final int icon1;
  public static final int icon2;
  public static final int icon;
  public static final int icon_frame;
  public static final int input;
  public static final int inputArea;
  public static final int inputExtractEditText;
  public static final int keyboardView;
  public static final int list;
  public static final int list_container;
  public static final int mask;
  public static final int message;
  public static final int navigationBarBackground;
  public static final int paste;
  public static final int pasteAsPlainText;
  public static final int primary;
  public static final int progress;
  public static final int redo;
  public static final int replaceText;
  public static final int secondaryProgress;
  public static final int selectAll;
  public static final int selectTextMode;
  public static final int selectedIcon;
  public static final int shareText;
  public static final int startSelectingText;
  public static final int statusBarBackground;
  public static final int stopSelectingText;
  public static final int summary;
  public static final int switchInputMethod;
  public static final int switch_widget;
  public static final int tabcontent;
  public static final int tabhost;
  public static final int tabs;
  public static final int text1;
  public static final int text2;
  public static final int title;
  public static final int toggle;
  public static final int undo;
  public static final int widget_frame;
}
public final class android.R$integer
  extends java.lang.Object
{
  public void <init>();
  public static final int config_longAnimTime;
  public static final int config_mediumAnimTime;
  public static final int config_shortAnimTime;
  public static final int status_bar_notification_info_maxnum;
}
public final class android.R$interpolator
  extends java.lang.Object
{
  public void <init>();
  public static final int accelerate_cubic;
  public static final int accelerate_decelerate;
  public static final int accelerate_quad;
  public static final int accelerate_quint;
  public static final int anticipate;
  public static final int anticipate_overshoot;
  public static final int bounce;
  public static final int cycle;
  public static final int decelerate_cubic;
  public static final int decelerate_quad;
  public static final int decelerate_quint;
  public static final int fast_out_linear_in;
  public static final int fast_out_slow_in;
  public static final int linear;
  public static final int linear_out_slow_in;
  public static final int overshoot;
}
public final class android.R$layout
  extends java.lang.Object
{
  public void <init>();
  public static final int activity_list_item;
  public static final int browser_link_context_header;
  public static final int expandable_list_content;
  public static final int list_content;
  public static final int preference_category;
  public static final int select_dialog_item;
  public static final int select_dialog_multichoice;
  public static final int select_dialog_singlechoice;
  public static final int simple_dropdown_item_1line;
  public static final int simple_expandable_list_item_1;
  public static final int simple_expandable_list_item_2;
  public static final int simple_gallery_item;
  public static final int simple_list_item_1;
  public static final int simple_list_item_2;
  public static final int simple_list_item_activated_1;
  public static final int simple_list_item_activated_2;
  public static final int simple_list_item_checked;
  public static final int simple_list_item_multiple_choice;
  public static final int simple_list_item_single_choice;
  public static final int simple_selectable_list_item;
  public static final int simple_spinner_dropdown_item;
  public static final int simple_spinner_item;
  public static final int test_list_item;
  public static final int two_line_list_item;
}
public final class android.R$menu
  extends java.lang.Object
{
  public void <init>();
}
public final class android.R$mipmap
  extends java.lang.Object
{
  public void <init>();
  public static final int sym_def_app_icon;
}
public final class android.R$plurals
  extends java.lang.Object
{
  public void <init>();
}
public final class android.R$raw
  extends java.lang.Object
{
  public void <init>();
}
public final class android.R$string
  extends java.lang.Object
{
  public void <init>();
  public static final int VideoView_error_button;
  public static final int VideoView_error_text_invalid_progressive_playback;
  public static final int VideoView_error_text_unknown;
  public static final int VideoView_error_title;
  public static final int cancel;
  public static final int copy;
  public static final int copyUrl;
  public static final int cut;
  public static final int defaultMsisdnAlphaTag;
  public static final int defaultVoiceMailAlphaTag;
  public static final int dialog_alert_title;
  public static final int emptyPhoneNumber;
  public static final int fingerprint_icon_content_description;
  public static final int httpErrorBadUrl;
  public static final int httpErrorUnsupportedScheme;
  public static final int no;
  public static final int ok;
  public static final int paste;
  public static final int search_go;
  public static final int selectAll;
  public static final int selectTextMode;
  public static final int status_bar_notification_info_overflow;
  public static final int unknownName;
  public static final int untitled;
  public static final int yes;
}
public final class android.R$style
  extends java.lang.Object
{
  public void <init>();
  public static final int Animation;
  public static final int Animation_Activity;
  public static final int Animation_Dialog;
  public static final int Animation_InputMethod;
  public static final int Animation_Toast;
  public static final int Animation_Translucent;
  public static final int DeviceDefault_ButtonBar;
  public static final int DeviceDefault_ButtonBar_AlertDialog;
  public static final int DeviceDefault_Light_ButtonBar;
  public static final int DeviceDefault_Light_ButtonBar_AlertDialog;
  public static final int DeviceDefault_Light_SegmentedButton;
  public static final int DeviceDefault_SegmentedButton;
  public static final int Holo_ButtonBar;
  public static final int Holo_ButtonBar_AlertDialog;
  public static final int Holo_Light_ButtonBar;
  public static final int Holo_Light_ButtonBar_AlertDialog;
  public static final int Holo_Light_SegmentedButton;
  public static final int Holo_SegmentedButton;
  public static final int MediaButton;
  public static final int MediaButton_Ffwd;
  public static final int MediaButton_Next;
  public static final int MediaButton_Pause;
  public static final int MediaButton_Play;
  public static final int MediaButton_Previous;
  public static final int MediaButton_Rew;
  public static final int TextAppearance;
  public static final int TextAppearance_DeviceDefault;
  public static final int TextAppearance_DeviceDefault_DialogWindowTitle;
  public static final int TextAppearance_DeviceDefault_Inverse;
  public static final int TextAppearance_DeviceDefault_Large;
  public static final int TextAppearance_DeviceDefault_Large_Inverse;
  public static final int TextAppearance_DeviceDefault_Medium;
  public static final int TextAppearance_DeviceDefault_Medium_Inverse;
  public static final int TextAppearance_DeviceDefault_SearchResult_Subtitle;
  public static final int TextAppearance_DeviceDefault_SearchResult_Title;
  public static final int TextAppearance_DeviceDefault_Small;
  public static final int TextAppearance_DeviceDefault_Small_Inverse;
  public static final int TextAppearance_DeviceDefault_Widget;
  public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Menu;
  public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle;
  public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse;
  public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title;
  public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse;
  public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle;
  public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse;
  public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title;
  public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse;
  public static final int TextAppearance_DeviceDefault_Widget_Button;
  public static final int TextAppearance_DeviceDefault_Widget_DropDownHint;
  public static final int TextAppearance_DeviceDefault_Widget_DropDownItem;
  public static final int TextAppearance_DeviceDefault_Widget_EditText;
  public static final int TextAppearance_DeviceDefault_Widget_IconMenu_Item;
  public static final int TextAppearance_DeviceDefault_Widget_PopupMenu;
  public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Large;
  public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Small;
  public static final int TextAppearance_DeviceDefault_Widget_TabWidget;
  public static final int TextAppearance_DeviceDefault_Widget_TextView;
  public static final int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu;
  public static final int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem;
  public static final int TextAppearance_DeviceDefault_WindowTitle;
  public static final int TextAppearance_DialogWindowTitle;
  public static final int TextAppearance_Holo;
  public static final int TextAppearance_Holo_DialogWindowTitle;
  public static final int TextAppearance_Holo_Inverse;
  public static final int TextAppearance_Holo_Large;
  public static final int TextAppearance_Holo_Large_Inverse;
  public static final int TextAppearance_Holo_Medium;
  public static final int TextAppearance_Holo_Medium_Inverse;
  public static final int TextAppearance_Holo_SearchResult_Subtitle;
  public static final int TextAppearance_Holo_SearchResult_Title;
  public static final int TextAppearance_Holo_Small;
  public static final int TextAppearance_Holo_Small_Inverse;
  public static final int TextAppearance_Holo_Widget;
  public static final int TextAppearance_Holo_Widget_ActionBar_Menu;
  public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle;
  public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse;
  public static final int TextAppearance_Holo_Widget_ActionBar_Title;
  public static final int TextAppearance_Holo_Widget_ActionBar_Title_Inverse;
  public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle;
  public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse;
  public static final int TextAppearance_Holo_Widget_ActionMode_Title;
  public static final int TextAppearance_Holo_Widget_ActionMode_Title_Inverse;
  public static final int TextAppearance_Holo_Widget_Button;
  public static final int TextAppearance_Holo_Widget_DropDownHint;
  public static final int TextAppearance_Holo_Widget_DropDownItem;
  public static final int TextAppearance_Holo_Widget_EditText;
  public static final int TextAppearance_Holo_Widget_IconMenu_Item;
  public static final int TextAppearance_Holo_Widget_PopupMenu;
  public static final int TextAppearance_Holo_Widget_PopupMenu_Large;
  public static final int TextAppearance_Holo_Widget_PopupMenu_Small;
  public static final int TextAppearance_Holo_Widget_TabWidget;
  public static final int TextAppearance_Holo_Widget_TextView;
  public static final int TextAppearance_Holo_Widget_TextView_PopupMenu;
  public static final int TextAppearance_Holo_Widget_TextView_SpinnerItem;
  public static final int TextAppearance_Holo_WindowTitle;
  public static final int TextAppearance_Inverse;
  public static final int TextAppearance_Large;
  public static final int TextAppearance_Large_Inverse;
  public static final int TextAppearance_Material;
  public static final int TextAppearance_Material_Body1;
  public static final int TextAppearance_Material_Body2;
  public static final int TextAppearance_Material_Button;
  public static final int TextAppearance_Material_Caption;
  public static final int TextAppearance_Material_DialogWindowTitle;
  public static final int TextAppearance_Material_Display1;
  public static final int TextAppearance_Material_Display2;
  public static final int TextAppearance_Material_Display3;
  public static final int TextAppearance_Material_Display4;
  public static final int TextAppearance_Material_Headline;
  public static final int TextAppearance_Material_Inverse;
  public static final int TextAppearance_Material_Large;
  public static final int TextAppearance_Material_Large_Inverse;
  public static final int TextAppearance_Material_Medium;
  public static final int TextAppearance_Material_Medium_Inverse;
  public static final int TextAppearance_Material_Menu;
  public static final int TextAppearance_Material_Notification;
  public static final int TextAppearance_Material_Notification_Emphasis;
  public static final int TextAppearance_Material_Notification_Info;
  public static final int TextAppearance_Material_Notification_Line2;
  public static final int TextAppearance_Material_Notification_Time;
  public static final int TextAppearance_Material_Notification_Title;
  public static final int TextAppearance_Material_SearchResult_Subtitle;
  public static final int TextAppearance_Material_SearchResult_Title;
  public static final int TextAppearance_Material_Small;
  public static final int TextAppearance_Material_Small_Inverse;
  public static final int TextAppearance_Material_Subhead;
  public static final int TextAppearance_Material_Title;
  public static final int TextAppearance_Material_Widget;
  public static final int TextAppearance_Material_Widget_ActionBar_Menu;
  public static final int TextAppearance_Material_Widget_ActionBar_Subtitle;
  public static final int TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse;
  public static final int TextAppearance_Material_Widget_ActionBar_Title;
  public static final int TextAppearance_Material_Widget_ActionBar_Title_Inverse;
  public static final int TextAppearance_Material_Widget_ActionMode_Subtitle;
  public static final int TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse;
  public static final int TextAppearance_Material_Widget_ActionMode_Title;
  public static final int TextAppearance_Material_Widget_ActionMode_Title_Inverse;
  public static final int TextAppearance_Material_Widget_Button;
  public static final int TextAppearance_Material_Widget_Button_Borderless_Colored;
  public static final int TextAppearance_Material_Widget_Button_Colored;
  public static final int TextAppearance_Material_Widget_Button_Inverse;
  public static final int TextAppearance_Material_Widget_DropDownHint;
  public static final int TextAppearance_Material_Widget_DropDownItem;
  public static final int TextAppearance_Material_Widget_EditText;
  public static final int TextAppearance_Material_Widget_IconMenu_Item;
  public static final int TextAppearance_Material_Widget_PopupMenu;
  public static final int TextAppearance_Material_Widget_PopupMenu_Large;
  public static final int TextAppearance_Material_Widget_PopupMenu_Small;
  public static final int TextAppearance_Material_Widget_TabWidget;
  public static final int TextAppearance_Material_Widget_TextView;
  public static final int TextAppearance_Material_Widget_TextView_PopupMenu;
  public static final int TextAppearance_Material_Widget_TextView_SpinnerItem;
  public static final int TextAppearance_Material_Widget_Toolbar_Subtitle;
  public static final int TextAppearance_Material_Widget_Toolbar_Title;
  public static final int TextAppearance_Material_WindowTitle;
  public static final int TextAppearance_Medium;
  public static final int TextAppearance_Medium_Inverse;
  public static final int TextAppearance_Small;
  public static final int TextAppearance_Small_Inverse;
  public static final int TextAppearance_StatusBar_EventContent;
  public static final int TextAppearance_StatusBar_EventContent_Title;
  public static final int TextAppearance_StatusBar_Icon;
  public static final int TextAppearance_StatusBar_Title;
  public static final int TextAppearance_SuggestionHighlight;
  public static final int TextAppearance_Theme;
  public static final int TextAppearance_Theme_Dialog;
  public static final int TextAppearance_Widget;
  public static final int TextAppearance_Widget_Button;
  public static final int TextAppearance_Widget_DropDownHint;
  public static final int TextAppearance_Widget_DropDownItem;
  public static final int TextAppearance_Widget_EditText;
  public static final int TextAppearance_Widget_IconMenu_Item;
  public static final int TextAppearance_Widget_PopupMenu_Large;
  public static final int TextAppearance_Widget_PopupMenu_Small;
  public static final int TextAppearance_Widget_TabWidget;
  public static final int TextAppearance_Widget_TextView;
  public static final int TextAppearance_Widget_TextView_PopupMenu;
  public static final int TextAppearance_Widget_TextView_SpinnerItem;
  public static final int TextAppearance_WindowTitle;
  public static final int Theme;
  public static final int ThemeOverlay;
  public static final int ThemeOverlay_Material;
  public static final int ThemeOverlay_Material_ActionBar;
  public static final int ThemeOverlay_Material_Dark;
  public static final int ThemeOverlay_Material_Dark_ActionBar;
  public static final int ThemeOverlay_Material_Dialog;
  public static final int ThemeOverlay_Material_Dialog_Alert;
  public static final int ThemeOverlay_Material_Light;
  public static final int Theme_Black;
  public static final int Theme_Black_NoTitleBar;
  public static final int Theme_Black_NoTitleBar_Fullscreen;
  public static final int Theme_DeviceDefault;
  public static final int Theme_DeviceDefault_Dialog;
  public static final int Theme_DeviceDefault_DialogWhenLarge;
  public static final int Theme_DeviceDefault_DialogWhenLarge_NoActionBar;
  public static final int Theme_DeviceDefault_Dialog_Alert;
  public static final int Theme_DeviceDefault_Dialog_MinWidth;
  public static final int Theme_DeviceDefault_Dialog_NoActionBar;
  public static final int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth;
  public static final int Theme_DeviceDefault_InputMethod;
  public static final int Theme_DeviceDefault_Light;
  public static final int Theme_DeviceDefault_Light_DarkActionBar;
  public static final int Theme_DeviceDefault_Light_Dialog;
  public static final int Theme_DeviceDefault_Light_DialogWhenLarge;
  public static final int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar;
  public static final int Theme_DeviceDefault_Light_Dialog_Alert;
  public static final int Theme_DeviceDefault_Light_Dialog_MinWidth;
  public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar;
  public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth;
  public static final int Theme_DeviceDefault_Light_NoActionBar;
  public static final int Theme_DeviceDefault_Light_NoActionBar_Fullscreen;
  public static final int Theme_DeviceDefault_Light_NoActionBar_Overscan;
  public static final int Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor;
  public static final int Theme_DeviceDefault_Light_Panel;
  public static final int Theme_DeviceDefault_NoActionBar;
  public static final int Theme_DeviceDefault_NoActionBar_Fullscreen;
  public static final int Theme_DeviceDefault_NoActionBar_Overscan;
  public static final int Theme_DeviceDefault_NoActionBar_TranslucentDecor;
  public static final int Theme_DeviceDefault_Panel;
  public static final int Theme_DeviceDefault_Settings;
  public static final int Theme_DeviceDefault_Wallpaper;
  public static final int Theme_DeviceDefault_Wallpaper_NoTitleBar;
  public static final int Theme_Dialog;
  public static final int Theme_Holo;
  public static final int Theme_Holo_Dialog;
  public static final int Theme_Holo_DialogWhenLarge;
  public static final int Theme_Holo_DialogWhenLarge_NoActionBar;
  public static final int Theme_Holo_Dialog_MinWidth;
  public static final int Theme_Holo_Dialog_NoActionBar;
  public static final int Theme_Holo_Dialog_NoActionBar_MinWidth;
  public static final int Theme_Holo_InputMethod;
  public static final int Theme_Holo_Light;
  public static final int Theme_Holo_Light_DarkActionBar;
  public static final int Theme_Holo_Light_Dialog;
  public static final int Theme_Holo_Light_DialogWhenLarge;
  public static final int Theme_Holo_Light_DialogWhenLarge_NoActionBar;
  public static final int Theme_Holo_Light_Dialog_MinWidth;
  public static final int Theme_Holo_Light_Dialog_NoActionBar;
  public static final int Theme_Holo_Light_Dialog_NoActionBar_MinWidth;
  public static final int Theme_Holo_Light_NoActionBar;
  public static final int Theme_Holo_Light_NoActionBar_Fullscreen;
  public static final int Theme_Holo_Light_NoActionBar_Overscan;
  public static final int Theme_Holo_Light_NoActionBar_TranslucentDecor;
  public static final int Theme_Holo_Light_Panel;
  public static final int Theme_Holo_NoActionBar;
  public static final int Theme_Holo_NoActionBar_Fullscreen;
  public static final int Theme_Holo_NoActionBar_Overscan;
  public static final int Theme_Holo_NoActionBar_TranslucentDecor;
  public static final int Theme_Holo_Panel;
  public static final int Theme_Holo_Wallpaper;
  public static final int Theme_Holo_Wallpaper_NoTitleBar;
  public static final int Theme_InputMethod;
  public static final int Theme_Light;
  public static final int Theme_Light_NoTitleBar;
  public static final int Theme_Light_NoTitleBar_Fullscreen;
  public static final int Theme_Light_Panel;
  public static final int Theme_Light_WallpaperSettings;
  public static final int Theme_Material;
  public static final int Theme_Material_Dialog;
  public static final int Theme_Material_DialogWhenLarge;
  public static final int Theme_Material_DialogWhenLarge_NoActionBar;
  public static final int Theme_Material_Dialog_Alert;
  public static final int Theme_Material_Dialog_MinWidth;
  public static final int Theme_Material_Dialog_NoActionBar;
  public static final int Theme_Material_Dialog_NoActionBar_MinWidth;
  public static final int Theme_Material_Dialog_Presentation;
  public static final int Theme_Material_InputMethod;
  public static final int Theme_Material_Light;
  public static final int Theme_Material_Light_DarkActionBar;
  public static final int Theme_Material_Light_Dialog;
  public static final int Theme_Material_Light_DialogWhenLarge;
  public static final int Theme_Material_Light_DialogWhenLarge_DarkActionBar;
  public static final int Theme_Material_Light_DialogWhenLarge_NoActionBar;
  public static final int Theme_Material_Light_Dialog_Alert;
  public static final int Theme_Material_Light_Dialog_MinWidth;
  public static final int Theme_Material_Light_Dialog_NoActionBar;
  public static final int Theme_Material_Light_Dialog_NoActionBar_MinWidth;
  public static final int Theme_Material_Light_Dialog_Presentation;
  public static final int Theme_Material_Light_LightStatusBar;
  public static final int Theme_Material_Light_NoActionBar;
  public static final int Theme_Material_Light_NoActionBar_Fullscreen;
  public static final int Theme_Material_Light_NoActionBar_Overscan;
  public static final int Theme_Material_Light_NoActionBar_TranslucentDecor;
  public static final int Theme_Material_Light_Panel;
  public static final int Theme_Material_Light_Voice;
  public static final int Theme_Material_NoActionBar;
  public static final int Theme_Material_NoActionBar_Fullscreen;
  public static final int Theme_Material_NoActionBar_Overscan;
  public static final int Theme_Material_NoActionBar_TranslucentDecor;
  public static final int Theme_Material_Panel;
  public static final int Theme_Material_Settings;
  public static final int Theme_Material_Voice;
  public static final int Theme_Material_Wallpaper;
  public static final int Theme_Material_Wallpaper_NoTitleBar;
  public static final int Theme_NoDisplay;
  public static final int Theme_NoTitleBar;
  public static final int Theme_NoTitleBar_Fullscreen;
  public static final int Theme_NoTitleBar_OverlayActionModes;
  public static final int Theme_Panel;
  public static final int Theme_Translucent;
  public static final int Theme_Translucent_NoTitleBar;
  public static final int Theme_Translucent_NoTitleBar_Fullscreen;
  public static final int Theme_Wallpaper;
  public static final int Theme_WallpaperSettings;
  public static final int Theme_Wallpaper_NoTitleBar;
  public static final int Theme_Wallpaper_NoTitleBar_Fullscreen;
  public static final int Theme_WithActionBar;
  public static final int Widget;
  public static final int Widget_AbsListView;
  public static final int Widget_ActionBar;
  public static final int Widget_ActionBar_TabBar;
  public static final int Widget_ActionBar_TabText;
  public static final int Widget_ActionBar_TabView;
  public static final int Widget_ActionButton;
  public static final int Widget_ActionButton_CloseMode;
  public static final int Widget_ActionButton_Overflow;
  public static final int Widget_AutoCompleteTextView;
  public static final int Widget_Button;
  public static final int Widget_Button_Inset;
  public static final int Widget_Button_Small;
  public static final int Widget_Button_Toggle;
  public static final int Widget_CalendarView;
  public static final int Widget_CompoundButton;
  public static final int Widget_CompoundButton_CheckBox;
  public static final int Widget_CompoundButton_RadioButton;
  public static final int Widget_CompoundButton_Star;
  public static final int Widget_DatePicker;
  public static final int Widget_DeviceDefault;
  public static final int Widget_DeviceDefault_ActionBar;
  public static final int Widget_DeviceDefault_ActionBar_Solid;
  public static final int Widget_DeviceDefault_ActionBar_TabBar;
  public static final int Widget_DeviceDefault_ActionBar_TabText;
  public static final int Widget_DeviceDefault_ActionBar_TabView;
  public static final int Widget_DeviceDefault_ActionButton;
  public static final int Widget_DeviceDefault_ActionButton_CloseMode;
  public static final int Widget_DeviceDefault_ActionButton_Overflow;
  public static final int Widget_DeviceDefault_ActionButton_TextButton;
  public static final int Widget_DeviceDefault_ActionMode;
  public static final int Widget_DeviceDefault_AutoCompleteTextView;
  public static final int Widget_DeviceDefault_Button;
  public static final int Widget_DeviceDefault_Button_Borderless;
  public static final int Widget_DeviceDefault_Button_Borderless_Small;
  public static final int Widget_DeviceDefault_Button_Inset;
  public static final int Widget_DeviceDefault_Button_Small;
  public static final int Widget_DeviceDefault_Button_Toggle;
  public static final int Widget_DeviceDefault_CalendarView;
  public static final int Widget_DeviceDefault_CheckedTextView;
  public static final int Widget_DeviceDefault_CompoundButton_CheckBox;
  public static final int Widget_DeviceDefault_CompoundButton_RadioButton;
  public static final int Widget_DeviceDefault_CompoundButton_Star;
  public static final int Widget_DeviceDefault_DatePicker;
  public static final int Widget_DeviceDefault_DropDownItem;
  public static final int Widget_DeviceDefault_DropDownItem_Spinner;
  public static final int Widget_DeviceDefault_EditText;
  public static final int Widget_DeviceDefault_ExpandableListView;
  public static final int Widget_DeviceDefault_FastScroll;
  public static final int Widget_DeviceDefault_GridView;
  public static final int Widget_DeviceDefault_HorizontalScrollView;
  public static final int Widget_DeviceDefault_ImageButton;
  public static final int Widget_DeviceDefault_Light;
  public static final int Widget_DeviceDefault_Light_ActionBar;
  public static final int Widget_DeviceDefault_Light_ActionBar_Solid;
  public static final int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse;
  public static final int Widget_DeviceDefault_Light_ActionBar_TabBar;
  public static final int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse;
  public static final int Widget_DeviceDefault_Light_ActionBar_TabText;
  public static final int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse;
  public static final int Widget_DeviceDefault_Light_ActionBar_TabView;
  public static final int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse;
  public static final int Widget_DeviceDefault_Light_ActionButton;
  public static final int Widget_DeviceDefault_Light_ActionButton_CloseMode;
  public static final int Widget_DeviceDefault_Light_ActionButton_Overflow;
  public static final int Widget_DeviceDefault_Light_ActionMode;
  public static final int Widget_DeviceDefault_Light_ActionMode_Inverse;
  public static final int Widget_DeviceDefault_Light_AutoCompleteTextView;
  public static final int Widget_DeviceDefault_Light_Button;
  public static final int Widget_DeviceDefault_Light_Button_Borderless_Small;
  public static final int Widget_DeviceDefault_Light_Button_Inset;
  public static final int Widget_DeviceDefault_Light_Button_Small;
  public static final int Widget_DeviceDefault_Light_Button_Toggle;
  public static final int Widget_DeviceDefault_Light_CalendarView;
  public static final int Widget_DeviceDefault_Light_CheckedTextView;
  public static final int Widget_DeviceDefault_Light_CompoundButton_CheckBox;
  public static final int Widget_DeviceDefault_Light_CompoundButton_RadioButton;
  public static final int Widget_DeviceDefault_Light_CompoundButton_Star;
  public static final int Widget_DeviceDefault_Light_DropDownItem;
  public static final int Widget_DeviceDefault_Light_DropDownItem_Spinner;
  public static final int Widget_DeviceDefault_Light_EditText;
  public static final int Widget_DeviceDefault_Light_ExpandableListView;
  public static final int Widget_DeviceDefault_Light_FastScroll;
  public static final int Widget_DeviceDefault_Light_GridView;
  public static final int Widget_DeviceDefault_Light_HorizontalScrollView;
  public static final int Widget_DeviceDefault_Light_ImageButton;
  public static final int Widget_DeviceDefault_Light_ListPopupWindow;
  public static final int Widget_DeviceDefault_Light_ListView;
  public static final int Widget_DeviceDefault_Light_ListView_DropDown;
  public static final int Widget_DeviceDefault_Light_MediaRouteButton;
  public static final int Widget_DeviceDefault_Light_PopupMenu;
  public static final int Widget_DeviceDefault_Light_PopupWindow;
  public static final int Widget_DeviceDefault_Light_ProgressBar;
  public static final int Widget_DeviceDefault_Light_ProgressBar_Horizontal;
  public static final int Widget_DeviceDefault_Light_ProgressBar_Inverse;
  public static final int Widget_DeviceDefault_Light_ProgressBar_Large;
  public static final int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse;
  public static final int Widget_DeviceDefault_Light_ProgressBar_Small;
  public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse;
  public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Title;
  public static final int Widget_DeviceDefault_Light_RatingBar;
  public static final int Widget_DeviceDefault_Light_RatingBar_Indicator;
  public static final int Widget_DeviceDefault_Light_RatingBar_Small;
  public static final int Widget_DeviceDefault_Light_ScrollView;
  public static final int Widget_DeviceDefault_Light_SeekBar;
  public static final int Widget_DeviceDefault_Light_Spinner;
  public static final int Widget_DeviceDefault_Light_StackView;
  public static final int Widget_DeviceDefault_Light_Tab;
  public static final int Widget_DeviceDefault_Light_TabWidget;
  public static final int Widget_DeviceDefault_Light_TextView;
  public static final int Widget_DeviceDefault_Light_TextView_SpinnerItem;
  public static final int Widget_DeviceDefault_Light_WebTextView;
  public static final int Widget_DeviceDefault_Light_WebView;
  public static final int Widget_DeviceDefault_ListPopupWindow;
  public static final int Widget_DeviceDefault_ListView;
  public static final int Widget_DeviceDefault_ListView_DropDown;
  public static final int Widget_DeviceDefault_MediaRouteButton;
  public static final int Widget_DeviceDefault_PopupMenu;
  public static final int Widget_DeviceDefault_PopupWindow;
  public static final int Widget_DeviceDefault_ProgressBar;
  public static final int Widget_DeviceDefault_ProgressBar_Horizontal;
  public static final int Widget_DeviceDefault_ProgressBar_Large;
  public static final int Widget_DeviceDefault_ProgressBar_Small;
  public static final int Widget_DeviceDefault_ProgressBar_Small_Title;
  public static final int Widget_DeviceDefault_RatingBar;
  public static final int Widget_DeviceDefault_RatingBar_Indicator;
  public static final int Widget_DeviceDefault_RatingBar_Small;
  public static final int Widget_DeviceDefault_ScrollView;
  public static final int Widget_DeviceDefault_SeekBar;
  public static final int Widget_DeviceDefault_Spinner;
  public static final int Widget_DeviceDefault_StackView;
  public static final int Widget_DeviceDefault_Tab;
  public static final int Widget_DeviceDefault_TabWidget;
  public static final int Widget_DeviceDefault_TextView;
  public static final int Widget_DeviceDefault_TextView_SpinnerItem;
  public static final int Widget_DeviceDefault_WebTextView;
  public static final int Widget_DeviceDefault_WebView;
  public static final int Widget_DropDownItem;
  public static final int Widget_DropDownItem_Spinner;
  public static final int Widget_EditText;
  public static final int Widget_ExpandableListView;
  public static final int Widget_FastScroll;
  public static final int Widget_FragmentBreadCrumbs;
  public static final int Widget_Gallery;
  public static final int Widget_GridView;
  public static final int Widget_Holo;
  public static final int Widget_Holo_ActionBar;
  public static final int Widget_Holo_ActionBar_Solid;
  public static final int Widget_Holo_ActionBar_TabBar;
  public static final int Widget_Holo_ActionBar_TabText;
  public static final int Widget_Holo_ActionBar_TabView;
  public static final int Widget_Holo_ActionButton;
  public static final int Widget_Holo_ActionButton_CloseMode;
  public static final int Widget_Holo_ActionButton_Overflow;
  public static final int Widget_Holo_ActionButton_TextButton;
  public static final int Widget_Holo_ActionMode;
  public static final int Widget_Holo_AutoCompleteTextView;
  public static final int Widget_Holo_Button;
  public static final int Widget_Holo_Button_Borderless;
  public static final int Widget_Holo_Button_Borderless_Small;
  public static final int Widget_Holo_Button_Inset;
  public static final int Widget_Holo_Button_Small;
  public static final int Widget_Holo_Button_Toggle;
  public static final int Widget_Holo_CalendarView;
  public static final int Widget_Holo_CheckedTextView;
  public static final int Widget_Holo_CompoundButton_CheckBox;
  public static final int Widget_Holo_CompoundButton_RadioButton;
  public static final int Widget_Holo_CompoundButton_Star;
  public static final int Widget_Holo_DatePicker;
  public static final int Widget_Holo_DropDownItem;
  public static final int Widget_Holo_DropDownItem_Spinner;
  public static final int Widget_Holo_EditText;
  public static final int Widget_Holo_ExpandableListView;
  public static final int Widget_Holo_GridView;
  public static final int Widget_Holo_HorizontalScrollView;
  public static final int Widget_Holo_ImageButton;
  public static final int Widget_Holo_Light;
  public static final int Widget_Holo_Light_ActionBar;
  public static final int Widget_Holo_Light_ActionBar_Solid;
  public static final int Widget_Holo_Light_ActionBar_Solid_Inverse;
  public static final int Widget_Holo_Light_ActionBar_TabBar;
  public static final int Widget_Holo_Light_ActionBar_TabBar_Inverse;
  public static final int Widget_Holo_Light_ActionBar_TabText;
  public static final int Widget_Holo_Light_ActionBar_TabText_Inverse;
  public static final int Widget_Holo_Light_ActionBar_TabView;
  public static final int Widget_Holo_Light_ActionBar_TabView_Inverse;
  public static final int Widget_Holo_Light_ActionButton;
  public static final int Widget_Holo_Light_ActionButton_CloseMode;
  public static final int Widget_Holo_Light_ActionButton_Overflow;
  public static final int Widget_Holo_Light_ActionMode;
  public static final int Widget_Holo_Light_ActionMode_Inverse;
  public static final int Widget_Holo_Light_AutoCompleteTextView;
  public static final int Widget_Holo_Light_Button;
  public static final int Widget_Holo_Light_Button_Borderless_Small;
  public static final int Widget_Holo_Light_Button_Inset;
  public static final int Widget_Holo_Light_Button_Small;
  public static final int Widget_Holo_Light_Button_Toggle;
  public static final int Widget_Holo_Light_CalendarView;
  public static final int Widget_Holo_Light_CheckedTextView;
  public static final int Widget_Holo_Light_CompoundButton_CheckBox;
  public static final int Widget_Holo_Light_CompoundButton_RadioButton;
  public static final int Widget_Holo_Light_CompoundButton_Star;
  public static final int Widget_Holo_Light_DropDownItem;
  public static final int Widget_Holo_Light_DropDownItem_Spinner;
  public static final int Widget_Holo_Light_EditText;
  public static final int Widget_Holo_Light_ExpandableListView;
  public static final int Widget_Holo_Light_GridView;
  public static final int Widget_Holo_Light_HorizontalScrollView;
  public static final int Widget_Holo_Light_ImageButton;
  public static final int Widget_Holo_Light_ListPopupWindow;
  public static final int Widget_Holo_Light_ListView;
  public static final int Widget_Holo_Light_ListView_DropDown;
  public static final int Widget_Holo_Light_MediaRouteButton;
  public static final int Widget_Holo_Light_PopupMenu;
  public static final int Widget_Holo_Light_PopupWindow;
  public static final int Widget_Holo_Light_ProgressBar;
  public static final int Widget_Holo_Light_ProgressBar_Horizontal;
  public static final int Widget_Holo_Light_ProgressBar_Inverse;
  public static final int Widget_Holo_Light_ProgressBar_Large;
  public static final int Widget_Holo_Light_ProgressBar_Large_Inverse;
  public static final int Widget_Holo_Light_ProgressBar_Small;
  public static final int Widget_Holo_Light_ProgressBar_Small_Inverse;
  public static final int Widget_Holo_Light_ProgressBar_Small_Title;
  public static final int Widget_Holo_Light_RatingBar;
  public static final int Widget_Holo_Light_RatingBar_Indicator;
  public static final int Widget_Holo_Light_RatingBar_Small;
  public static final int Widget_Holo_Light_ScrollView;
  public static final int Widget_Holo_Light_SeekBar;
  public static final int Widget_Holo_Light_Spinner;
  public static final int Widget_Holo_Light_Tab;
  public static final int Widget_Holo_Light_TabWidget;
  public static final int Widget_Holo_Light_TextView;
  public static final int Widget_Holo_Light_TextView_SpinnerItem;
  public static final int Widget_Holo_Light_WebTextView;
  public static final int Widget_Holo_Light_WebView;
  public static final int Widget_Holo_ListPopupWindow;
  public static final int Widget_Holo_ListView;
  public static final int Widget_Holo_ListView_DropDown;
  public static final int Widget_Holo_MediaRouteButton;
  public static final int Widget_Holo_PopupMenu;
  public static final int Widget_Holo_PopupWindow;
  public static final int Widget_Holo_ProgressBar;
  public static final int Widget_Holo_ProgressBar_Horizontal;
  public static final int Widget_Holo_ProgressBar_Large;
  public static final int Widget_Holo_ProgressBar_Small;
  public static final int Widget_Holo_ProgressBar_Small_Title;
  public static final int Widget_Holo_RatingBar;
  public static final int Widget_Holo_RatingBar_Indicator;
  public static final int Widget_Holo_RatingBar_Small;
  public static final int Widget_Holo_ScrollView;
  public static final int Widget_Holo_SeekBar;
  public static final int Widget_Holo_Spinner;
  public static final int Widget_Holo_Tab;
  public static final int Widget_Holo_TabWidget;
  public static final int Widget_Holo_TextView;
  public static final int Widget_Holo_TextView_SpinnerItem;
  public static final int Widget_Holo_WebTextView;
  public static final int Widget_Holo_WebView;
  public static final int Widget_ImageButton;
  public static final int Widget_ImageWell;
  public static final int Widget_KeyboardView;
  public static final int Widget_ListPopupWindow;
  public static final int Widget_ListView;
  public static final int Widget_ListView_DropDown;
  public static final int Widget_ListView_Menu;
  public static final int Widget_ListView_White;
  public static final int Widget_Material;
  public static final int Widget_Material_ActionBar;
  public static final int Widget_Material_ActionBar_Solid;
  public static final int Widget_Material_ActionBar_TabBar;
  public static final int Widget_Material_ActionBar_TabText;
  public static final int Widget_Material_ActionBar_TabView;
  public static final int Widget_Material_ActionButton;
  public static final int Widget_Material_ActionButton_CloseMode;
  public static final int Widget_Material_ActionButton_Overflow;
  public static final int Widget_Material_ActionMode;
  public static final int Widget_Material_AutoCompleteTextView;
  public static final int Widget_Material_Button;
  public static final int Widget_Material_ButtonBar;
  public static final int Widget_Material_ButtonBar_AlertDialog;
  public static final int Widget_Material_Button_Borderless;
  public static final int Widget_Material_Button_Borderless_Colored;
  public static final int Widget_Material_Button_Borderless_Small;
  public static final int Widget_Material_Button_Colored;
  public static final int Widget_Material_Button_Inset;
  public static final int Widget_Material_Button_Small;
  public static final int Widget_Material_Button_Toggle;
  public static final int Widget_Material_CalendarView;
  public static final int Widget_Material_CheckedTextView;
  public static final int Widget_Material_CompoundButton_CheckBox;
  public static final int Widget_Material_CompoundButton_RadioButton;
  public static final int Widget_Material_CompoundButton_Star;
  public static final int Widget_Material_CompoundButton_Switch;
  public static final int Widget_Material_DatePicker;
  public static final int Widget_Material_DropDownItem;
  public static final int Widget_Material_DropDownItem_Spinner;
  public static final int Widget_Material_EditText;
  public static final int Widget_Material_ExpandableListView;
  public static final int Widget_Material_FastScroll;
  public static final int Widget_Material_GridView;
  public static final int Widget_Material_HorizontalScrollView;
  public static final int Widget_Material_ImageButton;
  public static final int Widget_Material_Light;
  public static final int Widget_Material_Light_ActionBar;
  public static final int Widget_Material_Light_ActionBar_Solid;
  public static final int Widget_Material_Light_ActionBar_TabBar;
  public static final int Widget_Material_Light_ActionBar_TabText;
  public static final int Widget_Material_Light_ActionBar_TabView;
  public static final int Widget_Material_Light_ActionButton;
  public static final int Widget_Material_Light_ActionButton_CloseMode;
  public static final int Widget_Material_Light_ActionButton_Overflow;
  public static final int Widget_Material_Light_ActionMode;
  public static final int Widget_Material_Light_AutoCompleteTextView;
  public static final int Widget_Material_Light_Button;
  public static final int Widget_Material_Light_ButtonBar;
  public static final int Widget_Material_Light_ButtonBar_AlertDialog;
  public static final int Widget_Material_Light_Button_Borderless;
  public static final int Widget_Material_Light_Button_Borderless_Colored;
  public static final int Widget_Material_Light_Button_Borderless_Small;
  public static final int Widget_Material_Light_Button_Inset;
  public static final int Widget_Material_Light_Button_Small;
  public static final int Widget_Material_Light_Button_Toggle;
  public static final int Widget_Material_Light_CalendarView;
  public static final int Widget_Material_Light_CheckedTextView;
  public static final int Widget_Material_Light_CompoundButton_CheckBox;
  public static final int Widget_Material_Light_CompoundButton_RadioButton;
  public static final int Widget_Material_Light_CompoundButton_Star;
  public static final int Widget_Material_Light_CompoundButton_Switch;
  public static final int Widget_Material_Light_DatePicker;
  public static final int Widget_Material_Light_DropDownItem;
  public static final int Widget_Material_Light_DropDownItem_Spinner;
  public static final int Widget_Material_Light_EditText;
  public static final int Widget_Material_Light_ExpandableListView;
  public static final int Widget_Material_Light_FastScroll;
  public static final int Widget_Material_Light_GridView;
  public static final int Widget_Material_Light_HorizontalScrollView;
  public static final int Widget_Material_Light_ImageButton;
  public static final int Widget_Material_Light_ListPopupWindow;
  public static final int Widget_Material_Light_ListView;
  public static final int Widget_Material_Light_ListView_DropDown;
  public static final int Widget_Material_Light_MediaRouteButton;
  public static final int Widget_Material_Light_NumberPicker;
  public static final int Widget_Material_Light_PopupMenu;
  public static final int Widget_Material_Light_PopupMenu_Overflow;
  public static final int Widget_Material_Light_PopupWindow;
  public static final int Widget_Material_Light_ProgressBar;
  public static final int Widget_Material_Light_ProgressBar_Horizontal;
  public static final int Widget_Material_Light_ProgressBar_Inverse;
  public static final int Widget_Material_Light_ProgressBar_Large;
  public static final int Widget_Material_Light_ProgressBar_Large_Inverse;
  public static final int Widget_Material_Light_ProgressBar_Small;
  public static final int Widget_Material_Light_ProgressBar_Small_Inverse;
  public static final int Widget_Material_Light_ProgressBar_Small_Title;
  public static final int Widget_Material_Light_RatingBar;
  public static final int Widget_Material_Light_RatingBar_Indicator;
  public static final int Widget_Material_Light_RatingBar_Small;
  public static final int Widget_Material_Light_ScrollView;
  public static final int Widget_Material_Light_SearchView;
  public static final int Widget_Material_Light_SeekBar;
  public static final int Widget_Material_Light_SegmentedButton;
  public static final int Widget_Material_Light_Spinner;
  public static final int Widget_Material_Light_Spinner_Underlined;
  public static final int Widget_Material_Light_StackView;
  public static final int Widget_Material_Light_Tab;
  public static final int Widget_Material_Light_TabWidget;
  public static final int Widget_Material_Light_TextView;
  public static final int Widget_Material_Light_TextView_SpinnerItem;
  public static final int Widget_Material_Light_TimePicker;
  public static final int Widget_Material_Light_WebTextView;
  public static final int Widget_Material_Light_WebView;
  public static final int Widget_Material_ListPopupWindow;
  public static final int Widget_Material_ListView;
  public static final int Widget_Material_ListView_DropDown;
  public static final int Widget_Material_MediaRouteButton;
  public static final int Widget_Material_NumberPicker;
  public static final int Widget_Material_PopupMenu;
  public static final int Widget_Material_PopupMenu_Overflow;
  public static final int Widget_Material_PopupWindow;
  public static final int Widget_Material_ProgressBar;
  public static final int Widget_Material_ProgressBar_Horizontal;
  public static final int Widget_Material_ProgressBar_Large;
  public static final int Widget_Material_ProgressBar_Small;
  public static final int Widget_Material_ProgressBar_Small_Title;
  public static final int Widget_Material_RatingBar;
  public static final int Widget_Material_RatingBar_Indicator;
  public static final int Widget_Material_RatingBar_Small;
  public static final int Widget_Material_ScrollView;
  public static final int Widget_Material_SearchView;
  public static final int Widget_Material_SeekBar;
  public static final int Widget_Material_SeekBar_Discrete;
  public static final int Widget_Material_SegmentedButton;
  public static final int Widget_Material_Spinner;
  public static final int Widget_Material_Spinner_Underlined;
  public static final int Widget_Material_StackView;
  public static final int Widget_Material_Tab;
  public static final int Widget_Material_TabWidget;
  public static final int Widget_Material_TextView;
  public static final int Widget_Material_TextView_SpinnerItem;
  public static final int Widget_Material_TimePicker;
  public static final int Widget_Material_Toolbar;
  public static final int Widget_Material_Toolbar_Button_Navigation;
  public static final int Widget_Material_WebTextView;
  public static final int Widget_Material_WebView;
  public static final int Widget_PopupMenu;
  public static final int Widget_PopupWindow;
  public static final int Widget_ProgressBar;
  public static final int Widget_ProgressBar_Horizontal;
  public static final int Widget_ProgressBar_Inverse;
  public static final int Widget_ProgressBar_Large;
  public static final int Widget_ProgressBar_Large_Inverse;
  public static final int Widget_ProgressBar_Small;
  public static final int Widget_ProgressBar_Small_Inverse;
  public static final int Widget_RatingBar;
  public static final int Widget_ScrollView;
  public static final int Widget_SeekBar;
  public static final int Widget_Spinner;
  public static final int Widget_Spinner_DropDown;
  public static final int Widget_StackView;
  public static final int Widget_TabWidget;
  public static final int Widget_TextView;
  public static final int Widget_TextView_PopupMenu;
  public static final int Widget_TextView_SpinnerItem;
  public static final int Widget_Toolbar;
  public static final int Widget_Toolbar_Button_Navigation;
  public static final int Widget_WebView;
}
public final class android.R$transition
  extends java.lang.Object
{
  public void <init>();
  public static final int explode;
  public static final int fade;
  public static final int move;
  public static final int no_transition;
  public static final int slide_bottom;
  public static final int slide_left;
  public static final int slide_right;
  public static final int slide_top;
}
public final class android.R$xml
  extends java.lang.Object
{
  public void <init>();
}
public abstract class android.accessibilityservice.AccessibilityService
  extends android.app.Service
{
  public void <init>();
  public final boolean dispatchGesture(android.accessibilityservice.GestureDescription, android.accessibilityservice.AccessibilityService$GestureResultCallback, android.os.Handler);
  public final boolean performGlobalAction(int);
  public final void disableSelf();
  public final void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo);
  public final android.accessibilityservice.AccessibilityService$MagnificationController getMagnificationController();
  public final android.accessibilityservice.AccessibilityService$SoftKeyboardController getSoftKeyboardController();
  public final android.accessibilityservice.AccessibilityServiceInfo getServiceInfo();
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public abstract void onInterrupt();
  public android.view.accessibility.AccessibilityNodeInfo findFocus(int);
  public android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow();
  public java.lang.Object getSystemService(java.lang.String);
  public java.util.List getWindows();
  protected boolean onGesture(int);
  protected boolean onKeyEvent(android.view.KeyEvent);
  protected void onServiceConnected();
  public static final int GESTURE_SWIPE_DOWN;
  public static final int GESTURE_SWIPE_DOWN_AND_LEFT;
  public static final int GESTURE_SWIPE_DOWN_AND_RIGHT;
  public static final int GESTURE_SWIPE_DOWN_AND_UP;
  public static final int GESTURE_SWIPE_LEFT;
  public static final int GESTURE_SWIPE_LEFT_AND_DOWN;
  public static final int GESTURE_SWIPE_LEFT_AND_RIGHT;
  public static final int GESTURE_SWIPE_LEFT_AND_UP;
  public static final int GESTURE_SWIPE_RIGHT;
  public static final int GESTURE_SWIPE_RIGHT_AND_DOWN;
  public static final int GESTURE_SWIPE_RIGHT_AND_LEFT;
  public static final int GESTURE_SWIPE_RIGHT_AND_UP;
  public static final int GESTURE_SWIPE_UP;
  public static final int GESTURE_SWIPE_UP_AND_DOWN;
  public static final int GESTURE_SWIPE_UP_AND_LEFT;
  public static final int GESTURE_SWIPE_UP_AND_RIGHT;
  public static final int GLOBAL_ACTION_BACK;
  public static final int GLOBAL_ACTION_HOME;
  public static final int GLOBAL_ACTION_NOTIFICATIONS;
  public static final int GLOBAL_ACTION_POWER_DIALOG;
  public static final int GLOBAL_ACTION_QUICK_SETTINGS;
  public static final int GLOBAL_ACTION_RECENTS;
  public static final int GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN;
  public static final int SHOW_MODE_AUTO;
  public static final int SHOW_MODE_HIDDEN;
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public abstract class android.accessibilityservice.AccessibilityService$GestureResultCallback
  extends java.lang.Object
{
  public void <init>();
  public void onCancelled(android.accessibilityservice.GestureDescription);
  public void onCompleted(android.accessibilityservice.GestureDescription);
}
public final class android.accessibilityservice.AccessibilityService$MagnificationController
  extends java.lang.Object
{
  public boolean removeListener(android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener);
  public boolean reset(boolean);
  public boolean setCenter(float, float, boolean);
  public boolean setScale(float, boolean);
  public float getCenterX();
  public float getCenterY();
  public float getScale();
  public void addListener(android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener);
  public void addListener(android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener, android.os.Handler);
  public android.graphics.Region getMagnificationRegion();
}
public interface android.accessibilityservice.AccessibilityService$MagnificationController$OnMagnificationChangedListener
{
  public abstract void onMagnificationChanged(android.accessibilityservice.AccessibilityService$MagnificationController, android.graphics.Region, float, float, float);
}
public final class android.accessibilityservice.AccessibilityService$SoftKeyboardController
  extends java.lang.Object
{
  public boolean removeOnShowModeChangedListener(android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener);
  public boolean setShowMode(int);
  public int getShowMode();
  public void addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener);
  public void addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener, android.os.Handler);
}
public interface android.accessibilityservice.AccessibilityService$SoftKeyboardController$OnShowModeChangedListener
{
  public abstract void onShowModeChanged(android.accessibilityservice.AccessibilityService$SoftKeyboardController, int);
}
public class android.accessibilityservice.AccessibilityServiceInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static java.lang.String capabilityToString(int);
  public static java.lang.String feedbackTypeToString(int);
  public static java.lang.String flagToString(int);
  public void <init>();
  public boolean equals(java.lang.Object);
  public boolean getCanRetrieveWindowContent();
  public int describeContents();
  public int getCapabilities();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.pm.ResolveInfo getResolveInfo();
  public java.lang.String getDescription();
  public java.lang.String getId();
  public java.lang.String getSettingsActivityName();
  public java.lang.String loadDescription(android.content.pm.PackageManager);
  public java.lang.String toString();
  public static final int CAPABILITY_CAN_CONTROL_MAGNIFICATION;
  public static final int CAPABILITY_CAN_PERFORM_GESTURES;
  public static final int CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY;
  public static final int CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS;
  public static final int CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION;
  public static final int CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT;
  public static final int DEFAULT;
  public static final int FEEDBACK_ALL_MASK;
  public static final int FEEDBACK_AUDIBLE;
  public static final int FEEDBACK_BRAILLE;
  public static final int FEEDBACK_GENERIC;
  public static final int FEEDBACK_HAPTIC;
  public static final int FEEDBACK_SPOKEN;
  public static final int FEEDBACK_VISUAL;
  public static final int FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
  public static final int FLAG_REPORT_VIEW_IDS;
  public static final int FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY;
  public static final int FLAG_REQUEST_FILTER_KEY_EVENTS;
  public static final int FLAG_REQUEST_TOUCH_EXPLORATION_MODE;
  public static final int FLAG_RETRIEVE_INTERACTIVE_WINDOWS;
  public static final android.os.Parcelable$Creator CREATOR;
  public int eventTypes;
  public int feedbackType;
  public int flags;
  public long notificationTimeout;
  public java.lang.String[] packageNames;
}
public final class android.accessibilityservice.GestureDescription
  extends java.lang.Object
{
  public static int getMaxStrokeCount();
  public static long getMaxGestureDuration();
  public int getStrokeCount();
  public android.accessibilityservice.GestureDescription$StrokeDescription getStroke(int);
}
public class android.accessibilityservice.GestureDescription$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.accessibilityservice.GestureDescription build();
  public android.accessibilityservice.GestureDescription$Builder addStroke(android.accessibilityservice.GestureDescription$StrokeDescription);
}
public class android.accessibilityservice.GestureDescription$StrokeDescription
  extends java.lang.Object
{
  public void <init>(android.graphics.Path, long, long);
  public long getDuration();
  public long getStartTime();
  public android.graphics.Path getPath();
}
public abstract class android.accounts.AbstractAccountAuthenticator
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public final android.os.IBinder getIBinder();
  public abstract android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse, java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle)  throws android.accounts.NetworkErrorException;
  public abstract android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, android.os.Bundle)  throws android.accounts.NetworkErrorException;
  public abstract android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse, java.lang.String);
  public abstract android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String, android.os.Bundle)  throws android.accounts.NetworkErrorException;
  public abstract android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String[])  throws android.accounts.NetworkErrorException;
  public abstract android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, java.lang.String, android.os.Bundle)  throws android.accounts.NetworkErrorException;
  public abstract java.lang.String getAuthTokenLabel(java.lang.String);
  public android.os.Bundle addAccountFromCredentials(android.accounts.AccountAuthenticatorResponse, android.accounts.Account, android.os.Bundle)  throws android.accounts.NetworkErrorException;
  public android.os.Bundle getAccountCredentialsForCloning(android.accounts.AccountAuthenticatorResponse, android.accounts.Account)  throws android.accounts.NetworkErrorException;
  public android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse, android.accounts.Account)  throws android.accounts.NetworkErrorException;
  public static final java.lang.String KEY_CUSTOM_TOKEN_EXPIRY;
}
public class android.accounts.Account
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public final java.lang.String name;
  public final java.lang.String type;
}
public class android.accounts.AccountAuthenticatorActivity
  extends android.app.Activity
{
  public void <init>();
  public final void setAccountAuthenticatorResult(android.os.Bundle);
  public void finish();
  protected void onCreate(android.os.Bundle);
}
public class android.accounts.AccountAuthenticatorResponse
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public int describeContents();
  public void onError(int, java.lang.String);
  public void onRequestContinued();
  public void onResult(android.os.Bundle);
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.accounts.AccountManager
  extends java.lang.Object
{
  public static android.accounts.AccountManager get(android.content.Context);
  public static android.content.Intent newChooseAccountIntent(android.accounts.Account, java.util.ArrayList, java.lang.String[], boolean, java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle);
  public static android.content.Intent newChooseAccountIntent(android.accounts.Account, java.util.List, java.lang.String[], java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle);
  public boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle);
  public boolean notifyAccountAuthenticated(android.accounts.Account);
  public boolean removeAccountExplicitly(android.accounts.Account);
  public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean);
  public void clearPassword(android.accounts.Account);
  public void invalidateAuthToken(java.lang.String, java.lang.String);
  public void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener);
  public void setAuthToken(android.accounts.Account, java.lang.String, java.lang.String);
  public void setPassword(android.accounts.Account, java.lang.String);
  public void setUserData(android.accounts.Account, java.lang.String, java.lang.String);
  public android.accounts.AccountManagerFuture addAccount(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture editProperties(java.lang.String, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, boolean, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, boolean, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String, java.lang.String, java.lang.String[], android.app.Activity, android.os.Bundle, android.os.Bundle, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture removeAccount(android.accounts.Account, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture removeAccount(android.accounts.Account, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture renameAccount(android.accounts.Account, java.lang.String, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler);
  public android.accounts.Account[] getAccounts();
  public android.accounts.Account[] getAccountsByType(java.lang.String);
  public android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String, java.lang.String);
  public android.accounts.AuthenticatorDescription[] getAuthenticatorTypes();
  public java.lang.String blockingGetAuthToken(android.accounts.Account, java.lang.String, boolean)  throws android.accounts.AuthenticatorException, android.accounts.OperationCanceledException, java.io.IOException;
  public java.lang.String getPassword(android.accounts.Account);
  public java.lang.String getPreviousName(android.accounts.Account);
  public java.lang.String getUserData(android.accounts.Account, java.lang.String);
  public java.lang.String peekAuthToken(android.accounts.Account, java.lang.String);
  public static final int ERROR_CODE_BAD_ARGUMENTS;
  public static final int ERROR_CODE_BAD_AUTHENTICATION;
  public static final int ERROR_CODE_BAD_REQUEST;
  public static final int ERROR_CODE_CANCELED;
  public static final int ERROR_CODE_INVALID_RESPONSE;
  public static final int ERROR_CODE_NETWORK_ERROR;
  public static final int ERROR_CODE_REMOTE_EXCEPTION;
  public static final int ERROR_CODE_UNSUPPORTED_OPERATION;
  public static final java.lang.String ACTION_AUTHENTICATOR_INTENT;
  public static final java.lang.String AUTHENTICATOR_ATTRIBUTES_NAME;
  public static final java.lang.String AUTHENTICATOR_META_DATA_NAME;
  public static final java.lang.String KEY_ACCOUNTS;
  public static final java.lang.String KEY_ACCOUNT_AUTHENTICATOR_RESPONSE;
  public static final java.lang.String KEY_ACCOUNT_MANAGER_RESPONSE;
  public static final java.lang.String KEY_ACCOUNT_NAME;
  public static final java.lang.String KEY_ACCOUNT_TYPE;
  public static final java.lang.String KEY_ANDROID_PACKAGE_NAME;
  public static final java.lang.String KEY_AUTHENTICATOR_TYPES;
  public static final java.lang.String KEY_AUTHTOKEN;
  public static final java.lang.String KEY_AUTH_FAILED_MESSAGE;
  public static final java.lang.String KEY_AUTH_TOKEN_LABEL;
  public static final java.lang.String KEY_BOOLEAN_RESULT;
  public static final java.lang.String KEY_CALLER_PID;
  public static final java.lang.String KEY_CALLER_UID;
  public static final java.lang.String KEY_ERROR_CODE;
  public static final java.lang.String KEY_ERROR_MESSAGE;
  public static final java.lang.String KEY_INTENT;
  public static final java.lang.String KEY_LAST_AUTHENTICATED_TIME;
  public static final java.lang.String KEY_PASSWORD;
  public static final java.lang.String KEY_USERDATA;
  public static final java.lang.String LOGIN_ACCOUNTS_CHANGED_ACTION;
}
public interface android.accounts.AccountManagerCallback
{
  public abstract void run(android.accounts.AccountManagerFuture);
}
public interface android.accounts.AccountManagerFuture
{
  public abstract boolean cancel(boolean);
  public abstract boolean isCancelled();
  public abstract boolean isDone();
  public abstract java.lang.Object getResult()  throws android.accounts.AuthenticatorException, android.accounts.OperationCanceledException, java.io.IOException;
  public abstract java.lang.Object getResult(long, java.util.concurrent.TimeUnit)  throws android.accounts.AuthenticatorException, android.accounts.OperationCanceledException, java.io.IOException;
}
public class android.accounts.AccountsException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class android.accounts.AuthenticatorDescription
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.accounts.AuthenticatorDescription newKey(java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int, int, int, int);
  public void <init>(java.lang.String, java.lang.String, int, int, int, int, boolean);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public final boolean customTokens;
  public final int accountPreferencesId;
  public final int iconId;
  public final int labelId;
  public final int smallIconId;
  public final java.lang.String packageName;
  public final java.lang.String type;
}
public class android.accounts.AuthenticatorException
  extends android.accounts.AccountsException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class android.accounts.NetworkErrorException
  extends android.accounts.AccountsException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface android.accounts.OnAccountsUpdateListener
{
  public abstract void onAccountsUpdated(android.accounts.Account[]);
}
public class android.accounts.OperationCanceledException
  extends android.accounts.AccountsException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public abstract class android.animation.Animator
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public abstract boolean isRunning();
  public abstract long getDuration();
  public abstract long getStartDelay();
  public abstract void setInterpolator(android.animation.TimeInterpolator);
  public abstract void setStartDelay(long);
  public abstract android.animation.Animator setDuration(long);
  public boolean isPaused();
  public boolean isStarted();
  public long getTotalDuration();
  public void addListener(android.animation.Animator$AnimatorListener);
  public void addPauseListener(android.animation.Animator$AnimatorPauseListener);
  public void cancel();
  public void end();
  public void pause();
  public void removeAllListeners();
  public void removeListener(android.animation.Animator$AnimatorListener);
  public void removePauseListener(android.animation.Animator$AnimatorPauseListener);
  public void resume();
  public void setTarget(java.lang.Object);
  public void setupEndValues();
  public void setupStartValues();
  public void start();
  public android.animation.Animator clone();
  public android.animation.TimeInterpolator getInterpolator();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.util.ArrayList getListeners();
  public static final long DURATION_INFINITE;
}
public interface android.animation.Animator$AnimatorListener
{
  public abstract void onAnimationCancel(android.animation.Animator);
  public abstract void onAnimationEnd(android.animation.Animator);
  public abstract void onAnimationRepeat(android.animation.Animator);
  public abstract void onAnimationStart(android.animation.Animator);
}
public interface android.animation.Animator$AnimatorPauseListener
{
  public abstract void onAnimationPause(android.animation.Animator);
  public abstract void onAnimationResume(android.animation.Animator);
}
public class android.animation.AnimatorInflater
  extends java.lang.Object
{
  public static android.animation.Animator loadAnimator(android.content.Context, int)  throws android.content.res.Resources$NotFoundException;
  public static android.animation.StateListAnimator loadStateListAnimator(android.content.Context, int)  throws android.content.res.Resources$NotFoundException;
  public void <init>();
}
public abstract class android.animation.AnimatorListenerAdapter
  extends java.lang.Object
  implements android.animation.Animator$AnimatorListener, android.animation.Animator$AnimatorPauseListener
{
  public void <init>();
  public void onAnimationCancel(android.animation.Animator);
  public void onAnimationEnd(android.animation.Animator);
  public void onAnimationPause(android.animation.Animator);
  public void onAnimationRepeat(android.animation.Animator);
  public void onAnimationResume(android.animation.Animator);
  public void onAnimationStart(android.animation.Animator);
}
public final class android.animation.AnimatorSet
  extends android.animation.Animator
{
  public void <init>();
  public boolean isRunning();
  public boolean isStarted();
  public long getDuration();
  public long getStartDelay();
  public long getTotalDuration();
  public void cancel();
  public void end();
  public void pause();
  public void playSequentially(android.animation.Animator[]);
  public void playSequentially(java.util.List);
  public void playTogether(android.animation.Animator[]);
  public void playTogether(java.util.Collection);
  public void resume();
  public void setInterpolator(android.animation.TimeInterpolator);
  public void setStartDelay(long);
  public void setTarget(java.lang.Object);
  public void setupEndValues();
  public void setupStartValues();
  public void start();
  public android.animation.Animator clone();
  public android.animation.Animator setDuration(long);
  public android.animation.AnimatorSet clone();
  public android.animation.AnimatorSet setDuration(long);
  public android.animation.AnimatorSet$Builder play(android.animation.Animator);
  public android.animation.TimeInterpolator getInterpolator();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
  public java.util.ArrayList getChildAnimations();
}
public class android.animation.AnimatorSet$Builder
  extends java.lang.Object
{
  public android.animation.AnimatorSet$Builder after(android.animation.Animator);
  public android.animation.AnimatorSet$Builder after(long);
  public android.animation.AnimatorSet$Builder before(android.animation.Animator);
  public android.animation.AnimatorSet$Builder with(android.animation.Animator);
}
public class android.animation.ArgbEvaluator
  extends java.lang.Object
  implements android.animation.TypeEvaluator
{
  public void <init>();
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public abstract class android.animation.BidirectionalTypeConverter
  extends android.animation.TypeConverter
{
  public void <init>(java.lang.Class, java.lang.Class);
  public abstract java.lang.Object convertBack(java.lang.Object);
  public android.animation.BidirectionalTypeConverter invert();
}
public class android.animation.FloatArrayEvaluator
  extends java.lang.Object
  implements android.animation.TypeEvaluator
{
  public void <init>();
  public void <init>(float[]);
  public float[] evaluate(float, float[], float[]);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public class android.animation.FloatEvaluator
  extends java.lang.Object
  implements android.animation.TypeEvaluator
{
  public void <init>();
  public java.lang.Float evaluate(float, java.lang.Number, java.lang.Number);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public class android.animation.IntArrayEvaluator
  extends java.lang.Object
  implements android.animation.TypeEvaluator
{
  public void <init>();
  public void <init>(int[]);
  public int[] evaluate(float, int[], int[]);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public class android.animation.IntEvaluator
  extends java.lang.Object
  implements android.animation.TypeEvaluator
{
  public void <init>();
  public java.lang.Integer evaluate(float, java.lang.Integer, java.lang.Integer);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public abstract class android.animation.Keyframe
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static android.animation.Keyframe ofFloat(float);
  public static android.animation.Keyframe ofFloat(float, float);
  public static android.animation.Keyframe ofInt(float);
  public static android.animation.Keyframe ofInt(float, int);
  public static android.animation.Keyframe ofObject(float);
  public static android.animation.Keyframe ofObject(float, java.lang.Object);
  public void <init>();
  public abstract void setValue(java.lang.Object);
  public abstract android.animation.Keyframe clone();
  public abstract java.lang.Object getValue();
  public boolean hasValue();
  public float getFraction();
  public void setFraction(float);
  public void setInterpolator(android.animation.TimeInterpolator);
  public android.animation.TimeInterpolator getInterpolator();
  public java.lang.Class getType();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class android.animation.LayoutTransition
  extends java.lang.Object
{
  public void <init>();
  public boolean isChangingLayout();
  public boolean isRunning();
  public boolean isTransitionTypeEnabled(int);
  public long getDuration(int);
  public long getStagger(int);
  public long getStartDelay(int);
  public void addChild(android.view.ViewGroup, android.view.View);
  public void addTransitionListener(android.animation.LayoutTransition$TransitionListener);
  public void disableTransitionType(int);
  public void enableTransitionType(int);
  public void hideChild(android.view.ViewGroup, android.view.View);
  public void hideChild(android.view.ViewGroup, android.view.View, int);
  public void removeChild(android.view.ViewGroup, android.view.View);
  public void removeTransitionListener(android.animation.LayoutTransition$TransitionListener);
  public void setAnimateParentHierarchy(boolean);
  public void setAnimator(int, android.animation.Animator);
  public void setDuration(int, long);
  public void setDuration(long);
  public void setInterpolator(int, android.animation.TimeInterpolator);
  public void setStagger(int, long);
  public void setStartDelay(int, long);
  public void showChild(android.view.ViewGroup, android.view.View);
  public void showChild(android.view.ViewGroup, android.view.View, int);
  public android.animation.Animator getAnimator(int);
  public android.animation.TimeInterpolator getInterpolator(int);
  public java.util.List getTransitionListeners();
  public static final int APPEARING;
  public static final int CHANGE_APPEARING;
  public static final int CHANGE_DISAPPEARING;
  public static final int CHANGING;
  public static final int DISAPPEARING;
}
public interface android.animation.LayoutTransition$TransitionListener
{
  public abstract void endTransition(android.animation.LayoutTransition, android.view.ViewGroup, android.view.View, int);
  public abstract void startTransition(android.animation.LayoutTransition, android.view.ViewGroup, android.view.View, int);
}
public final class android.animation.ObjectAnimator
  extends android.animation.ValueAnimator
{
  public static android.animation.ObjectAnimator ofArgb(java.lang.Object, android.util.Property, int[]);
  public static android.animation.ObjectAnimator ofArgb(java.lang.Object, java.lang.String, int[]);
  public static android.animation.ObjectAnimator ofFloat(java.lang.Object, android.util.Property, android.util.Property, android.graphics.Path);
  public static android.animation.ObjectAnimator ofFloat(java.lang.Object, android.util.Property, float[]);
  public static android.animation.ObjectAnimator ofFloat(java.lang.Object, java.lang.String, float[]);
  public static android.animation.ObjectAnimator ofFloat(java.lang.Object, java.lang.String, java.lang.String, android.graphics.Path);
  public static android.animation.ObjectAnimator ofInt(java.lang.Object, android.util.Property, android.util.Property, android.graphics.Path);
  public static android.animation.ObjectAnimator ofInt(java.lang.Object, android.util.Property, int[]);
  public static android.animation.ObjectAnimator ofInt(java.lang.Object, java.lang.String, int[]);
  public static android.animation.ObjectAnimator ofInt(java.lang.Object, java.lang.String, java.lang.String, android.graphics.Path);
  public static android.animation.ObjectAnimator ofMultiFloat(java.lang.Object, java.lang.String, android.animation.TypeConverter, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.ObjectAnimator ofMultiFloat(java.lang.Object, java.lang.String, android.graphics.Path);
  public static android.animation.ObjectAnimator ofMultiFloat(java.lang.Object, java.lang.String, float[][]);
  public static android.animation.ObjectAnimator ofMultiInt(java.lang.Object, java.lang.String, android.animation.TypeConverter, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.ObjectAnimator ofMultiInt(java.lang.Object, java.lang.String, android.graphics.Path);
  public static android.animation.ObjectAnimator ofMultiInt(java.lang.Object, java.lang.String, int[][]);
  public static android.animation.ObjectAnimator ofObject(java.lang.Object, android.util.Property, android.animation.TypeConverter, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.ObjectAnimator ofObject(java.lang.Object, android.util.Property, android.animation.TypeConverter, android.graphics.Path);
  public static android.animation.ObjectAnimator ofObject(java.lang.Object, android.util.Property, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.ObjectAnimator ofObject(java.lang.Object, java.lang.String, android.animation.TypeConverter, android.graphics.Path);
  public static android.animation.ObjectAnimator ofObject(java.lang.Object, java.lang.String, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder[]);
  public void <init>();
  public void setAutoCancel(boolean);
  public void setFloatValues(float[]);
  public void setIntValues(int[]);
  public void setObjectValues(java.lang.Object[]);
  public void setProperty(android.util.Property);
  public void setPropertyName(java.lang.String);
  public void setTarget(java.lang.Object);
  public void setupEndValues();
  public void setupStartValues();
  public void start();
  public android.animation.Animator clone();
  public android.animation.Animator setDuration(long);
  public android.animation.ObjectAnimator clone();
  public android.animation.ObjectAnimator setDuration(long);
  public android.animation.ValueAnimator clone();
  public android.animation.ValueAnimator setDuration(long);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object getTarget();
  public java.lang.String getPropertyName();
  public java.lang.String toString();
}
public class android.animation.PointFEvaluator
  extends java.lang.Object
  implements android.animation.TypeEvaluator
{
  public void <init>();
  public void <init>(android.graphics.PointF);
  public android.graphics.PointF evaluate(float, android.graphics.PointF, android.graphics.PointF);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public class android.animation.PropertyValuesHolder
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static android.animation.PropertyValuesHolder ofFloat(android.util.Property, float[]);
  public static android.animation.PropertyValuesHolder ofFloat(java.lang.String, float[]);
  public static android.animation.PropertyValuesHolder ofInt(android.util.Property, int[]);
  public static android.animation.PropertyValuesHolder ofInt(java.lang.String, int[]);
  public static android.animation.PropertyValuesHolder ofKeyframe(android.util.Property, android.animation.Keyframe[]);
  public static android.animation.PropertyValuesHolder ofKeyframe(java.lang.String, android.animation.Keyframe[]);
  public static android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, android.animation.TypeConverter, android.animation.TypeEvaluator, android.animation.Keyframe[]);
  public static android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, android.animation.TypeConverter, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, android.graphics.Path);
  public static android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String, float[][]);
  public static android.animation.PropertyValuesHolder ofMultiInt(java.lang.String, android.animation.TypeConverter, android.animation.TypeEvaluator, android.animation.Keyframe[]);
  public static android.animation.PropertyValuesHolder ofMultiInt(java.lang.String, android.animation.TypeConverter, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.PropertyValuesHolder ofMultiInt(java.lang.String, android.graphics.Path);
  public static android.animation.PropertyValuesHolder ofMultiInt(java.lang.String, int[][]);
  public static android.animation.PropertyValuesHolder ofObject(android.util.Property, android.animation.TypeConverter, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.PropertyValuesHolder ofObject(android.util.Property, android.animation.TypeConverter, android.graphics.Path);
  public static android.animation.PropertyValuesHolder ofObject(android.util.Property, android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.PropertyValuesHolder ofObject(java.lang.String, android.animation.TypeConverter, android.graphics.Path);
  public static android.animation.PropertyValuesHolder ofObject(java.lang.String, android.animation.TypeEvaluator, java.lang.Object[]);
  public void setConverter(android.animation.TypeConverter);
  public void setEvaluator(android.animation.TypeEvaluator);
  public void setFloatValues(float[]);
  public void setIntValues(int[]);
  public void setKeyframes(android.animation.Keyframe[]);
  public void setObjectValues(java.lang.Object[]);
  public void setProperty(android.util.Property);
  public void setPropertyName(java.lang.String);
  public android.animation.PropertyValuesHolder clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String getPropertyName();
  public java.lang.String toString();
}
public class android.animation.RectEvaluator
  extends java.lang.Object
  implements android.animation.TypeEvaluator
{
  public void <init>();
  public void <init>(android.graphics.Rect);
  public android.graphics.Rect evaluate(float, android.graphics.Rect, android.graphics.Rect);
  public java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public class android.animation.StateListAnimator
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void addState(int[], android.animation.Animator);
  public void jumpToCurrentState();
  public android.animation.StateListAnimator clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class android.animation.TimeAnimator
  extends android.animation.ValueAnimator
{
  public void <init>();
  public void setCurrentPlayTime(long);
  public void setTimeListener(android.animation.TimeAnimator$TimeListener);
  public void start();
}
public interface android.animation.TimeAnimator$TimeListener
{
  public abstract void onTimeUpdate(android.animation.TimeAnimator, long, long);
}
public interface android.animation.TimeInterpolator
{
  public abstract float getInterpolation(float);
}
public abstract class android.animation.TypeConverter
  extends java.lang.Object
{
  public void <init>(java.lang.Class, java.lang.Class);
  public abstract java.lang.Object convert(java.lang.Object);
}
public interface android.animation.TypeEvaluator
{
  public abstract java.lang.Object evaluate(float, java.lang.Object, java.lang.Object);
}
public class android.animation.ValueAnimator
  extends android.animation.Animator
{
  public static long getFrameDelay();
  public static void setFrameDelay(long);
  public static android.animation.ValueAnimator ofArgb(int[]);
  public static android.animation.ValueAnimator ofFloat(float[]);
  public static android.animation.ValueAnimator ofInt(int[]);
  public static android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator, java.lang.Object[]);
  public static android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[]);
  public void <init>();
  public boolean isRunning();
  public boolean isStarted();
  public float getAnimatedFraction();
  public int getRepeatCount();
  public int getRepeatMode();
  public long getCurrentPlayTime();
  public long getDuration();
  public long getStartDelay();
  public long getTotalDuration();
  public void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener);
  public void cancel();
  public void end();
  public void pause();
  public void removeAllUpdateListeners();
  public void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener);
  public void resume();
  public void reverse();
  public void setCurrentFraction(float);
  public void setCurrentPlayTime(long);
  public void setEvaluator(android.animation.TypeEvaluator);
  public void setFloatValues(float[]);
  public void setIntValues(int[]);
  public void setInterpolator(android.animation.TimeInterpolator);
  public void setObjectValues(java.lang.Object[]);
  public void setRepeatCount(int);
  public void setRepeatMode(int);
  public void setStartDelay(long);
  public void setValues(android.animation.PropertyValuesHolder[]);
  public void start();
  public android.animation.Animator clone();
  public android.animation.Animator setDuration(long);
  public android.animation.PropertyValuesHolder[] getValues();
  public android.animation.TimeInterpolator getInterpolator();
  public android.animation.ValueAnimator clone();
  public android.animation.ValueAnimator setDuration(long);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object getAnimatedValue();
  public java.lang.Object getAnimatedValue(java.lang.String);
  public java.lang.String toString();
  public static final int INFINITE;
  public static final int RESTART;
  public static final int REVERSE;
}
public interface android.animation.ValueAnimator$AnimatorUpdateListener
{
  public abstract void onAnimationUpdate(android.animation.ValueAnimator);
}
public interface android.annotation.SuppressLint
  extends java.lang.annotation.Annotation
{
  public abstract java.lang.String[] value();
}
public interface android.annotation.TargetApi
  extends java.lang.annotation.Annotation
{
  public abstract int value();
}
public abstract class android.app.ActionBar
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean isShowing();
  public abstract int getDisplayOptions();
  public abstract int getHeight();
  public abstract int getNavigationItemCount();
  public abstract int getNavigationMode();
  public abstract int getSelectedNavigationIndex();
  public abstract int getTabCount();
  public abstract void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener);
  public abstract void addTab(android.app.ActionBar$Tab);
  public abstract void addTab(android.app.ActionBar$Tab, boolean);
  public abstract void addTab(android.app.ActionBar$Tab, int);
  public abstract void addTab(android.app.ActionBar$Tab, int, boolean);
  public abstract void hide();
  public abstract void removeAllTabs();
  public abstract void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener);
  public abstract void removeTab(android.app.ActionBar$Tab);
  public abstract void removeTabAt(int);
  public abstract void selectTab(android.app.ActionBar$Tab);
  public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public abstract void setCustomView(android.view.View);
  public abstract void setCustomView(android.view.View, android.app.ActionBar$LayoutParams);
  public abstract void setCustomView(int);
  public abstract void setDisplayHomeAsUpEnabled(boolean);
  public abstract void setDisplayOptions(int);
  public abstract void setDisplayOptions(int, int);
  public abstract void setDisplayShowCustomEnabled(boolean);
  public abstract void setDisplayShowHomeEnabled(boolean);
  public abstract void setDisplayShowTitleEnabled(boolean);
  public abstract void setDisplayUseLogoEnabled(boolean);
  public abstract void setIcon(android.graphics.drawable.Drawable);
  public abstract void setIcon(int);
  public abstract void setListNavigationCallbacks(android.widget.SpinnerAdapter, android.app.ActionBar$OnNavigationListener);
  public abstract void setLogo(android.graphics.drawable.Drawable);
  public abstract void setLogo(int);
  public abstract void setNavigationMode(int);
  public abstract void setSelectedNavigationItem(int);
  public abstract void setSubtitle(int);
  public abstract void setSubtitle(java.lang.CharSequence);
  public abstract void setTitle(int);
  public abstract void setTitle(java.lang.CharSequence);
  public abstract void show();
  public abstract android.app.ActionBar$Tab getSelectedTab();
  public abstract android.app.ActionBar$Tab getTabAt(int);
  public abstract android.app.ActionBar$Tab newTab();
  public abstract android.view.View getCustomView();
  public abstract java.lang.CharSequence getSubtitle();
  public abstract java.lang.CharSequence getTitle();
  public boolean isHideOnContentScrollEnabled();
  public float getElevation();
  public int getHideOffset();
  public void setElevation(float);
  public void setHideOffset(int);
  public void setHideOnContentScrollEnabled(boolean);
  public void setHomeActionContentDescription(int);
  public void setHomeActionContentDescription(java.lang.CharSequence);
  public void setHomeAsUpIndicator(android.graphics.drawable.Drawable);
  public void setHomeAsUpIndicator(int);
  public void setHomeButtonEnabled(boolean);
  public void setSplitBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setStackedBackgroundDrawable(android.graphics.drawable.Drawable);
  public android.content.Context getThemedContext();
  public static final int DISPLAY_HOME_AS_UP;
  public static final int DISPLAY_SHOW_CUSTOM;
  public static final int DISPLAY_SHOW_HOME;
  public static final int DISPLAY_SHOW_TITLE;
  public static final int DISPLAY_USE_LOGO;
  public static final int NAVIGATION_MODE_LIST;
  public static final int NAVIGATION_MODE_STANDARD;
  public static final int NAVIGATION_MODE_TABS;
}
public class android.app.ActionBar$LayoutParams
  extends android.view.ViewGroup$MarginLayoutParams
{
  public void <init>(android.app.ActionBar$LayoutParams);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(int);
  public void <init>(int, int);
  public void <init>(int, int, int);
  public int gravity;
}
public interface android.app.ActionBar$OnMenuVisibilityListener
{
  public abstract void onMenuVisibilityChanged(boolean);
}
public interface android.app.ActionBar$OnNavigationListener
{
  public abstract boolean onNavigationItemSelected(int, long);
}
public abstract class android.app.ActionBar$Tab
  extends java.lang.Object
{
  public void <init>();
  public abstract int getPosition();
  public abstract void select();
  public abstract android.app.ActionBar$Tab setContentDescription(int);
  public abstract android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence);
  public abstract android.app.ActionBar$Tab setCustomView(android.view.View);
  public abstract android.app.ActionBar$Tab setCustomView(int);
  public abstract android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable);
  public abstract android.app.ActionBar$Tab setIcon(int);
  public abstract android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener);
  public abstract android.app.ActionBar$Tab setTag(java.lang.Object);
  public abstract android.app.ActionBar$Tab setText(int);
  public abstract android.app.ActionBar$Tab setText(java.lang.CharSequence);
  public abstract android.graphics.drawable.Drawable getIcon();
  public abstract android.view.View getCustomView();
  public abstract java.lang.CharSequence getContentDescription();
  public abstract java.lang.CharSequence getText();
  public abstract java.lang.Object getTag();
  public static final int INVALID_POSITION;
}
public interface android.app.ActionBar$TabListener
{
  public abstract void onTabReselected(android.app.ActionBar$Tab, android.app.FragmentTransaction);
  public abstract void onTabSelected(android.app.ActionBar$Tab, android.app.FragmentTransaction);
  public abstract void onTabUnselected(android.app.ActionBar$Tab, android.app.FragmentTransaction);
}
public class android.app.Activity
  extends android.view.ContextThemeWrapper
  implements android.view.LayoutInflater$Factory2, android.view.Window$Callback, android.view.KeyEvent$Callback, android.view.View$OnCreateContextMenuListener, android.content.ComponentCallbacks2
{
  public void <init>();
  public final boolean isChild();
  public final boolean requestWindowFeature(int);
  public final boolean showDialog(int, android.os.Bundle);
  public final int getTitleColor();
  public final int getVolumeControlStream();
  public final void dismissDialog(int);
  public final void dismissKeyboardShortcutsHelper();
  public final void removeDialog(int);
  public final void requestPermissions(java.lang.String[], int);
  public final void requestShowKeyboardShortcuts();
  public final void runOnUiThread(java.lang.Runnable);
  public final void setDefaultKeyMode(int);
  public final void setFeatureDrawable(int, android.graphics.drawable.Drawable);
  public final void setFeatureDrawableAlpha(int, int);
  public final void setFeatureDrawableResource(int, int);
  public final void setFeatureDrawableUri(int, android.net.Uri);
  public final void setMediaController(android.media.session.MediaController);
  public final void setProgress(int);
  public final void setProgressBarIndeterminate(boolean);
  public final void setProgressBarIndeterminateVisibility(boolean);
  public final void setProgressBarVisibility(boolean);
  public final void setResult(int);
  public final void setResult(int, android.content.Intent);
  public final void setSecondaryProgress(int);
  public final void setVolumeControlStream(int);
  public final void showDialog(int);
  public final android.app.Activity getParent();
  public final android.app.Application getApplication();
  public final android.database.Cursor managedQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public final android.media.session.MediaController getMediaController();
  public final android.view.SearchEvent getSearchEvent();
  public final java.lang.CharSequence getTitle();
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean hasWindowFocus();
  public boolean isChangingConfigurations();
  public boolean isDestroyed();
  public boolean isFinishing();
  public boolean isImmersive();
  public boolean isInMultiWindowMode();
  public boolean isInPictureInPictureMode();
  public boolean isLocalVoiceInteractionSupported();
  public boolean isTaskRoot();
  public boolean isVoiceInteraction();
  public boolean isVoiceInteractionRoot();
  public boolean moveTaskToBack(boolean);
  public boolean navigateUpTo(android.content.Intent);
  public boolean navigateUpToFromChild(android.app.Activity, android.content.Intent);
  public boolean onContextItemSelected(android.view.MenuItem);
  public boolean onCreateOptionsMenu(android.view.Menu);
  public boolean onCreatePanelMenu(int, android.view.Menu);
  public boolean onCreateThumbnail(android.graphics.Bitmap, android.graphics.Canvas);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onMenuItemSelected(int, android.view.MenuItem);
  public boolean onMenuOpened(int, android.view.Menu);
  public boolean onNavigateUp();
  public boolean onNavigateUpFromChild(android.app.Activity);
  public boolean onOptionsItemSelected(android.view.MenuItem);
  public boolean onPrepareOptionsMenu(android.view.Menu);
  public boolean onPreparePanel(int, android.view.View, android.view.Menu);
  public boolean onSearchRequested();
  public boolean onSearchRequested(android.view.SearchEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean releaseInstance();
  public boolean requestVisibleBehind(boolean);
  public boolean shouldShowRequestPermissionRationale(java.lang.String);
  public boolean shouldUpRecreateTask(android.content.Intent);
  public boolean showAssist(android.os.Bundle);
  public boolean startActivityIfNeeded(android.content.Intent, int);
  public boolean startActivityIfNeeded(android.content.Intent, int, android.os.Bundle);
  public boolean startNextMatchingActivity(android.content.Intent);
  public boolean startNextMatchingActivity(android.content.Intent, android.os.Bundle);
  public int getChangingConfigurations();
  public int getRequestedOrientation();
  public int getTaskId();
  public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void closeContextMenu();
  public void closeOptionsMenu();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void enterPictureInPictureMode();
  public void finish();
  public void finishActivity(int);
  public void finishActivityFromChild(android.app.Activity, int);
  public void finishAffinity();
  public void finishAfterTransition();
  public void finishAndRemoveTask();
  public void finishFromChild(android.app.Activity);
  public void invalidateOptionsMenu();
  public void onActionModeFinished(android.view.ActionMode);
  public void onActionModeStarted(android.view.ActionMode);
  public void onActivityReenter(int, android.content.Intent);
  public void onAttachFragment(android.app.Fragment);
  public void onAttachedToWindow();
  public void onBackPressed();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onContentChanged();
  public void onContextMenuClosed(android.view.Menu);
  public void onCreate(android.os.Bundle, android.os.PersistableBundle);
  public void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
  public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder);
  public void onDetachedFromWindow();
  public void onEnterAnimationComplete();
  public void onLocalVoiceInteractionStarted();
  public void onLocalVoiceInteractionStopped();
  public void onLowMemory();
  public void onMultiWindowModeChanged(boolean);
  public void onOptionsMenuClosed(android.view.Menu);
  public void onPanelClosed(int, android.view.Menu);
  public void onPictureInPictureModeChanged(boolean);
  public void onPostCreate(android.os.Bundle, android.os.PersistableBundle);
  public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder);
  public void onProvideAssistContent(android.app.assist.AssistContent);
  public void onProvideAssistData(android.os.Bundle);
  public void onProvideKeyboardShortcuts(java.util.List, android.view.Menu, int);
  public void onRequestPermissionsResult(int, java.lang.String[], int[]);
  public void onRestoreInstanceState(android.os.Bundle, android.os.PersistableBundle);
  public void onSaveInstanceState(android.os.Bundle, android.os.PersistableBundle);
  public void onStateNotSaved();
  public void onTrimMemory(int);
  public void onUserInteraction();
  public void onVisibleBehindCanceled();
  public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
  public void onWindowFocusChanged(boolean);
  public void openContextMenu(android.view.View);
  public void openOptionsMenu();
  public void overridePendingTransition(int, int);
  public void postponeEnterTransition();
  public void recreate();
  public void registerForContextMenu(android.view.View);
  public void reportFullyDrawn();
  public void setActionBar(android.widget.Toolbar);
  public void setContentTransitionManager(android.transition.TransitionManager);
  public void setContentView(android.view.View);
  public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void setContentView(int);
  public void setEnterSharedElementCallback(android.app.SharedElementCallback);
  public void setExitSharedElementCallback(android.app.SharedElementCallback);
  public void setFinishOnTouchOutside(boolean);
  public void setImmersive(boolean);
  public void setIntent(android.content.Intent);
  public void setRequestedOrientation(int);
  public void setTaskDescription(android.app.ActivityManager$TaskDescription);
  public void setTheme(int);
  public void setTitle(int);
  public void setTitle(java.lang.CharSequence);
  public void setTitleColor(int);
  public void setVisible(boolean);
  public void setVrModeEnabled(boolean, android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public void showLockTaskEscapeMessage();
  public void startActivities(android.content.Intent[]);
  public void startActivities(android.content.Intent[], android.os.Bundle);
  public void startActivity(android.content.Intent);
  public void startActivity(android.content.Intent, android.os.Bundle);
  public void startActivityForResult(android.content.Intent, int);
  public void startActivityForResult(android.content.Intent, int, android.os.Bundle);
  public void startActivityFromChild(android.app.Activity, android.content.Intent, int);
  public void startActivityFromChild(android.app.Activity, android.content.Intent, int, android.os.Bundle);
  public void startActivityFromFragment(android.app.Fragment, android.content.Intent, int);
  public void startActivityFromFragment(android.app.Fragment, android.content.Intent, int, android.os.Bundle);
  public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)  throws android.content.IntentSender$SendIntentException;
  public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public void startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int)  throws android.content.IntentSender$SendIntentException;
  public void startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public void startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int)  throws android.content.IntentSender$SendIntentException;
  public void startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public void startLocalVoiceInteraction(android.os.Bundle);
  public void startLockTask();
  public void startManagingCursor(android.database.Cursor);
  public void startPostponedEnterTransition();
  public void startSearch(java.lang.String, boolean, android.os.Bundle, boolean);
  public void stopLocalVoiceInteraction();
  public void stopLockTask();
  public void stopManagingCursor(android.database.Cursor);
  public void takeKeyEvents(boolean);
  public void triggerSearch(java.lang.String, android.os.Bundle);
  public void unregisterForContextMenu(android.view.View);
  public android.app.ActionBar getActionBar();
  public android.app.FragmentManager getFragmentManager();
  public android.app.LoaderManager getLoaderManager();
  public android.app.PendingIntent createPendingResult(int, android.content.Intent, int);
  public android.app.VoiceInteractor getVoiceInteractor();
  public android.content.ComponentName getCallingActivity();
  public android.content.ComponentName getComponentName();
  public android.content.Intent getIntent();
  public android.content.Intent getParentActivityIntent();
  public android.content.SharedPreferences getPreferences(int);
  public android.net.Uri getReferrer();
  public android.net.Uri onProvideReferrer();
  public android.transition.Scene getContentScene();
  public android.transition.TransitionManager getContentTransitionManager();
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback, int);
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback);
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback, int);
  public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent);
  public android.view.LayoutInflater getLayoutInflater();
  public android.view.MenuInflater getMenuInflater();
  public android.view.View findViewById(int);
  public android.view.View getCurrentFocus();
  public android.view.View onCreatePanelView(int);
  public android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet);
  public android.view.View onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet);
  public android.view.Window getWindow();
  public android.view.WindowManager getWindowManager();
  public java.lang.CharSequence onCreateDescription();
  public java.lang.Object getLastNonConfigurationInstance();
  public java.lang.Object getSystemService(java.lang.String);
  public java.lang.Object onRetainNonConfigurationInstance();
  public java.lang.String getCallingPackage();
  public java.lang.String getLocalClassName();
  protected void onActivityResult(int, int, android.content.Intent);
  protected void onApplyThemeResource(android.content.res.Resources$Theme, int, boolean);
  protected void onChildTitleChanged(android.app.Activity, java.lang.CharSequence);
  protected void onCreate(android.os.Bundle);
  protected void onDestroy();
  protected void onNewIntent(android.content.Intent);
  protected void onPause();
  protected void onPostCreate(android.os.Bundle);
  protected void onPostResume();
  protected void onPrepareDialog(int, android.app.Dialog);
  protected void onPrepareDialog(int, android.app.Dialog, android.os.Bundle);
  protected void onRestart();
  protected void onRestoreInstanceState(android.os.Bundle);
  protected void onResume();
  protected void onSaveInstanceState(android.os.Bundle);
  protected void onStart();
  protected void onStop();
  protected void onTitleChanged(java.lang.CharSequence, int);
  protected void onUserLeaveHint();
  protected android.app.Dialog onCreateDialog(int);
  protected android.app.Dialog onCreateDialog(int, android.os.Bundle);
  public static final int DEFAULT_KEYS_DIALER;
  public static final int DEFAULT_KEYS_DISABLE;
  public static final int DEFAULT_KEYS_SEARCH_GLOBAL;
  public static final int DEFAULT_KEYS_SEARCH_LOCAL;
  public static final int DEFAULT_KEYS_SHORTCUT;
  public static final int RESULT_CANCELED;
  public static final int RESULT_FIRST_USER;
  public static final int RESULT_OK;
  protected static final int[] FOCUSED_STATE_SET;
}
public class android.app.ActivityGroup
  extends android.app.Activity
{
  public void <init>();
  public void <init>(boolean);
  public final android.app.LocalActivityManager getLocalActivityManager();
  public android.app.Activity getCurrentActivity();
  protected void onCreate(android.os.Bundle);
  protected void onDestroy();
  protected void onPause();
  protected void onResume();
  protected void onSaveInstanceState(android.os.Bundle);
  protected void onStop();
}
public class android.app.ActivityManager
  extends java.lang.Object
{
  public static boolean isRunningInTestHarness();
  public static boolean isUserAMonkey();
  public static void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo);
  public boolean clearApplicationUserData();
  public boolean isInLockTaskMode();
  public boolean isLowRamDevice();
  public int addAppTask(android.app.Activity, android.content.Intent, android.app.ActivityManager$TaskDescription, android.graphics.Bitmap);
  public int getLargeMemoryClass();
  public int getLauncherLargeIconDensity();
  public int getLauncherLargeIconSize();
  public int getLockTaskModeState();
  public int getMemoryClass();
  public void clearWatchHeapLimit();
  public void dumpPackageState(java.io.FileDescriptor, java.lang.String);
  public void getMemoryInfo(android.app.ActivityManager$MemoryInfo);
  public void killBackgroundProcesses(java.lang.String);
  public void moveTaskToFront(int, int);
  public void moveTaskToFront(int, int, android.os.Bundle);
  public void restartPackage(java.lang.String);
  public void setWatchHeapLimit(long);
  public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)  throws java.lang.SecurityException;
  public android.content.pm.ConfigurationInfo getDeviceConfigurationInfo();
  public android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[]);
  public android.util.Size getAppTaskThumbnailSize();
  public java.util.List getAppTasks();
  public java.util.List getProcessesInErrorState();
  public java.util.List getRecentTasks(int, int)  throws java.lang.SecurityException;
  public java.util.List getRunningAppProcesses();
  public java.util.List getRunningServices(int)  throws java.lang.SecurityException;
  public java.util.List getRunningTasks(int)  throws java.lang.SecurityException;
  public static final int LOCK_TASK_MODE_LOCKED;
  public static final int LOCK_TASK_MODE_NONE;
  public static final int LOCK_TASK_MODE_PINNED;
  public static final int MOVE_TASK_NO_USER_ACTION;
  public static final int MOVE_TASK_WITH_HOME;
  public static final int RECENT_IGNORE_UNAVAILABLE;
  public static final int RECENT_WITH_EXCLUDED;
  public static final java.lang.String ACTION_REPORT_HEAP_LIMIT;
  public static final java.lang.String META_HOME_ALTERNATE;
}
public class android.app.ActivityManager$AppTask
  extends java.lang.Object
{
  public void finishAndRemoveTask();
  public void moveToFront();
  public void setExcludeFromRecents(boolean);
  public void startActivity(android.content.Context, android.content.Intent, android.os.Bundle);
  public android.app.ActivityManager$RecentTaskInfo getTaskInfo();
}
public class android.app.ActivityManager$MemoryInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean lowMemory;
  public long availMem;
  public long threshold;
  public long totalMem;
}
public class android.app.ActivityManager$ProcessErrorStateInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public static final int CRASHED;
  public static final int NOT_RESPONDING;
  public static final int NO_ERROR;
  public static final android.os.Parcelable$Creator CREATOR;
  public int condition;
  public int pid;
  public int uid;
  public byte[] crashData;
  public java.lang.String longMsg;
  public java.lang.String processName;
  public java.lang.String shortMsg;
  public java.lang.String stackTrace;
  public java.lang.String tag;
}
public class android.app.ActivityManager$RecentTaskInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
  public int affiliatedTaskId;
  public int id;
  public int numActivities;
  public int persistentId;
  public android.app.ActivityManager$TaskDescription taskDescription;
  public android.content.ComponentName baseActivity;
  public android.content.ComponentName origActivity;
  public android.content.ComponentName topActivity;
  public android.content.Intent baseIntent;
  public java.lang.CharSequence description;
}
public class android.app.ActivityManager$RunningAppProcessInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(java.lang.String, int, java.lang.String[]);
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public static final int IMPORTANCE_BACKGROUND;
  public static final int IMPORTANCE_EMPTY;
  public static final int IMPORTANCE_FOREGROUND;
  public static final int IMPORTANCE_FOREGROUND_SERVICE;
  public static final int IMPORTANCE_GONE;
  public static final int IMPORTANCE_PERCEPTIBLE;
  public static final int IMPORTANCE_SERVICE;
  public static final int IMPORTANCE_TOP_SLEEPING;
  public static final int IMPORTANCE_VISIBLE;
  public static final int REASON_PROVIDER_IN_USE;
  public static final int REASON_SERVICE_IN_USE;
  public static final int REASON_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
  public int importance;
  public int importanceReasonCode;
  public int importanceReasonPid;
  public int lastTrimLevel;
  public int lru;
  public int pid;
  public int uid;
  public android.content.ComponentName importanceReasonComponent;
  public java.lang.String processName;
  public java.lang.String[] pkgList;
}
public class android.app.ActivityManager$RunningServiceInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public static final int FLAG_FOREGROUND;
  public static final int FLAG_PERSISTENT_PROCESS;
  public static final int FLAG_STARTED;
  public static final int FLAG_SYSTEM_PROCESS;
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean foreground;
  public boolean started;
  public int clientCount;
  public int clientLabel;
  public int crashCount;
  public int flags;
  public int pid;
  public int uid;
  public long activeSince;
  public long lastActivityTime;
  public long restarting;
  public android.content.ComponentName service;
  public java.lang.String clientPackage;
  public java.lang.String process;
}
public class android.app.ActivityManager$RunningTaskInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
  public int id;
  public int numActivities;
  public int numRunning;
  public android.content.ComponentName baseActivity;
  public android.content.ComponentName topActivity;
  public android.graphics.Bitmap thumbnail;
  public java.lang.CharSequence description;
}
public class android.app.ActivityManager$TaskDescription
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.app.ActivityManager$TaskDescription);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, android.graphics.Bitmap);
  public void <init>(java.lang.String, android.graphics.Bitmap, int);
  public int describeContents();
  public int getPrimaryColor();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Bitmap getIcon();
  public java.lang.String getLabel();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.ActivityOptions
  extends java.lang.Object
{
  public static android.app.ActivityOptions makeBasic();
  public static android.app.ActivityOptions makeClipRevealAnimation(android.view.View, int, int, int, int);
  public static android.app.ActivityOptions makeCustomAnimation(android.content.Context, int, int);
  public static android.app.ActivityOptions makeScaleUpAnimation(android.view.View, int, int, int, int);
  public static android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity, android.util.Pair[]);
  public static android.app.ActivityOptions makeSceneTransitionAnimation(android.app.Activity, android.view.View, java.lang.String);
  public static android.app.ActivityOptions makeTaskLaunchBehind();
  public static android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View, android.graphics.Bitmap, int, int);
  public void requestUsageTimeReport(android.app.PendingIntent);
  public void update(android.app.ActivityOptions);
  public android.app.ActivityOptions setLaunchBounds(android.graphics.Rect);
  public android.graphics.Rect getLaunchBounds();
  public android.os.Bundle toBundle();
  public static final java.lang.String EXTRA_USAGE_TIME_REPORT;
  public static final java.lang.String EXTRA_USAGE_TIME_REPORT_PACKAGES;
}
public class android.app.AlarmManager
  extends java.lang.Object
{
  public void cancel(android.app.AlarmManager$OnAlarmListener);
  public void cancel(android.app.PendingIntent);
  public void set(int, long, android.app.PendingIntent);
  public void set(int, long, java.lang.String, android.app.AlarmManager$OnAlarmListener, android.os.Handler);
  public void setAlarmClock(android.app.AlarmManager$AlarmClockInfo, android.app.PendingIntent);
  public void setAndAllowWhileIdle(int, long, android.app.PendingIntent);
  public void setExact(int, long, android.app.PendingIntent);
  public void setExact(int, long, java.lang.String, android.app.AlarmManager$OnAlarmListener, android.os.Handler);
  public void setExactAndAllowWhileIdle(int, long, android.app.PendingIntent);
  public void setInexactRepeating(int, long, long, android.app.PendingIntent);
  public void setRepeating(int, long, long, android.app.PendingIntent);
  public void setTime(long);
  public void setTimeZone(java.lang.String);
  public void setWindow(int, long, long, android.app.PendingIntent);
  public void setWindow(int, long, long, java.lang.String, android.app.AlarmManager$OnAlarmListener, android.os.Handler);
  public android.app.AlarmManager$AlarmClockInfo getNextAlarmClock();
  public static final int ELAPSED_REALTIME;
  public static final int ELAPSED_REALTIME_WAKEUP;
  public static final int RTC;
  public static final int RTC_WAKEUP;
  public static final long INTERVAL_DAY;
  public static final long INTERVAL_FIFTEEN_MINUTES;
  public static final long INTERVAL_HALF_DAY;
  public static final long INTERVAL_HALF_HOUR;
  public static final long INTERVAL_HOUR;
  public static final java.lang.String ACTION_NEXT_ALARM_CLOCK_CHANGED;
}
public final class android.app.AlarmManager$AlarmClockInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(long, android.app.PendingIntent);
  public int describeContents();
  public long getTriggerTime();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.PendingIntent getShowIntent();
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.app.AlarmManager$OnAlarmListener
{
  public abstract void onAlarm();
}
public class android.app.AlertDialog
  extends android.app.Dialog
  implements android.content.DialogInterface
{
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public void setButton(int, java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setButton(int, java.lang.CharSequence, android.os.Message);
  public void setButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setButton(java.lang.CharSequence, android.os.Message);
  public void setButton2(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setButton2(java.lang.CharSequence, android.os.Message);
  public void setButton3(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public void setButton3(java.lang.CharSequence, android.os.Message);
  public void setCustomTitle(android.view.View);
  public void setIcon(android.graphics.drawable.Drawable);
  public void setIcon(int);
  public void setIconAttribute(int);
  public void setInverseBackgroundForced(boolean);
  public void setMessage(java.lang.CharSequence);
  public void setTitle(java.lang.CharSequence);
  public void setView(android.view.View);
  public void setView(android.view.View, int, int, int, int);
  public android.widget.Button getButton(int);
  public android.widget.ListView getListView();
  protected void <init>(android.content.Context);
  protected void <init>(android.content.Context, boolean, android.content.DialogInterface$OnCancelListener);
  protected void <init>(android.content.Context, int);
  protected void onCreate(android.os.Bundle);
  public static final int THEME_DEVICE_DEFAULT_DARK;
  public static final int THEME_DEVICE_DEFAULT_LIGHT;
  public static final int THEME_HOLO_DARK;
  public static final int THEME_HOLO_LIGHT;
  public static final int THEME_TRADITIONAL;
}
public class android.app.AlertDialog$Builder
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, int);
  public android.app.AlertDialog create();
  public android.app.AlertDialog show();
  public android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setCancelable(boolean);
  public android.app.AlertDialog$Builder setCursor(android.database.Cursor, android.content.DialogInterface$OnClickListener, java.lang.String);
  public android.app.AlertDialog$Builder setCustomTitle(android.view.View);
  public android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable);
  public android.app.AlertDialog$Builder setIcon(int);
  public android.app.AlertDialog$Builder setIconAttribute(int);
  public android.app.AlertDialog$Builder setInverseBackgroundForced(boolean);
  public android.app.AlertDialog$Builder setItems(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setItems(java.lang.CharSequence[], android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setMessage(int);
  public android.app.AlertDialog$Builder setMessage(java.lang.CharSequence);
  public android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor, java.lang.String, java.lang.String, android.content.DialogInterface$OnMultiChoiceClickListener);
  public android.app.AlertDialog$Builder setMultiChoiceItems(int, boolean[], android.content.DialogInterface$OnMultiChoiceClickListener);
  public android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[], boolean[], android.content.DialogInterface$OnMultiChoiceClickListener);
  public android.app.AlertDialog$Builder setNegativeButton(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setNeutralButton(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener);
  public android.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener);
  public android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener);
  public android.app.AlertDialog$Builder setPositiveButton(int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor, int, java.lang.String, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter, int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(int, int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[], int, android.content.DialogInterface$OnClickListener);
  public android.app.AlertDialog$Builder setTitle(int);
  public android.app.AlertDialog$Builder setTitle(java.lang.CharSequence);
  public android.app.AlertDialog$Builder setView(android.view.View);
  public android.app.AlertDialog$Builder setView(int);
  public android.content.Context getContext();
}
public class android.app.AliasActivity
  extends android.app.Activity
{
  public void <init>();
  protected void onCreate(android.os.Bundle);
}
public class android.app.AppOpsManager
  extends java.lang.Object
{
  public static java.lang.String permissionToOp(java.lang.String);
  public int checkOp(java.lang.String, int, java.lang.String);
  public int checkOpNoThrow(java.lang.String, int, java.lang.String);
  public int noteOp(java.lang.String, int, java.lang.String);
  public int noteOpNoThrow(java.lang.String, int, java.lang.String);
  public int noteProxyOp(java.lang.String, java.lang.String);
  public int noteProxyOpNoThrow(java.lang.String, java.lang.String);
  public int startOp(java.lang.String, int, java.lang.String);
  public int startOpNoThrow(java.lang.String, int, java.lang.String);
  public void checkPackage(int, java.lang.String);
  public void finishOp(java.lang.String, int, java.lang.String);
  public void startWatchingMode(java.lang.String, java.lang.String, android.app.AppOpsManager$OnOpChangedListener);
  public void stopWatchingMode(android.app.AppOpsManager$OnOpChangedListener);
  public static final int MODE_ALLOWED;
  public static final int MODE_DEFAULT;
  public static final int MODE_ERRORED;
  public static final int MODE_IGNORED;
  public static final java.lang.String OPSTR_ADD_VOICEMAIL;
  public static final java.lang.String OPSTR_BODY_SENSORS;
  public static final java.lang.String OPSTR_CALL_PHONE;
  public static final java.lang.String OPSTR_CAMERA;
  public static final java.lang.String OPSTR_COARSE_LOCATION;
  public static final java.lang.String OPSTR_FINE_LOCATION;
  public static final java.lang.String OPSTR_GET_USAGE_STATS;
  public static final java.lang.String OPSTR_MOCK_LOCATION;
  public static final java.lang.String OPSTR_MONITOR_HIGH_POWER_LOCATION;
  public static final java.lang.String OPSTR_MONITOR_LOCATION;
  public static final java.lang.String OPSTR_READ_CALENDAR;
  public static final java.lang.String OPSTR_READ_CALL_LOG;
  public static final java.lang.String OPSTR_READ_CELL_BROADCASTS;
  public static final java.lang.String OPSTR_READ_CONTACTS;
  public static final java.lang.String OPSTR_READ_EXTERNAL_STORAGE;
  public static final java.lang.String OPSTR_READ_PHONE_STATE;
  public static final java.lang.String OPSTR_READ_SMS;
  public static final java.lang.String OPSTR_RECEIVE_MMS;
  public static final java.lang.String OPSTR_RECEIVE_SMS;
  public static final java.lang.String OPSTR_RECEIVE_WAP_PUSH;
  public static final java.lang.String OPSTR_RECORD_AUDIO;
  public static final java.lang.String OPSTR_SEND_SMS;
  public static final java.lang.String OPSTR_SYSTEM_ALERT_WINDOW;
  public static final java.lang.String OPSTR_USE_FINGERPRINT;
  public static final java.lang.String OPSTR_USE_SIP;
  public static final java.lang.String OPSTR_WRITE_CALENDAR;
  public static final java.lang.String OPSTR_WRITE_CALL_LOG;
  public static final java.lang.String OPSTR_WRITE_CONTACTS;
  public static final java.lang.String OPSTR_WRITE_EXTERNAL_STORAGE;
  public static final java.lang.String OPSTR_WRITE_SETTINGS;
}
public interface android.app.AppOpsManager$OnOpChangedListener
{
  public abstract void onOpChanged(java.lang.String, java.lang.String);
}
public class android.app.Application
  extends android.content.ContextWrapper
  implements android.content.ComponentCallbacks2
{
  public void <init>();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onCreate();
  public void onLowMemory();
  public void onTerminate();
  public void onTrimMemory(int);
  public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks);
  public void registerComponentCallbacks(android.content.ComponentCallbacks);
  public void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener);
  public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks);
  public void unregisterComponentCallbacks(android.content.ComponentCallbacks);
  public void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener);
}
public interface android.app.Application$ActivityLifecycleCallbacks
{
  public abstract void onActivityCreated(android.app.Activity, android.os.Bundle);
  public abstract void onActivityDestroyed(android.app.Activity);
  public abstract void onActivityPaused(android.app.Activity);
  public abstract void onActivityResumed(android.app.Activity);
  public abstract void onActivitySaveInstanceState(android.app.Activity, android.os.Bundle);
  public abstract void onActivityStarted(android.app.Activity);
  public abstract void onActivityStopped(android.app.Activity);
}
public interface android.app.Application$OnProvideAssistDataListener
{
  public abstract void onProvideAssistData(android.app.Activity, android.os.Bundle);
}
public class android.app.ApplicationErrorReport
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.ComponentName getErrorReportReceiver(android.content.Context, java.lang.String, int);
  public void <init>();
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public static final int TYPE_ANR;
  public static final int TYPE_BATTERY;
  public static final int TYPE_CRASH;
  public static final int TYPE_NONE;
  public static final int TYPE_RUNNING_SERVICE;
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean systemApp;
  public int type;
  public long time;
  public android.app.ApplicationErrorReport$AnrInfo anrInfo;
  public android.app.ApplicationErrorReport$BatteryInfo batteryInfo;
  public android.app.ApplicationErrorReport$CrashInfo crashInfo;
  public android.app.ApplicationErrorReport$RunningServiceInfo runningServiceInfo;
  public java.lang.String installerPackageName;
  public java.lang.String packageName;
  public java.lang.String processName;
}
public class android.app.ApplicationErrorReport$AnrInfo
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String activity;
  public java.lang.String cause;
  public java.lang.String info;
}
public class android.app.ApplicationErrorReport$BatteryInfo
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public int usagePercent;
  public long durationMicros;
  public java.lang.String checkinDetails;
  public java.lang.String usageDetails;
}
public class android.app.ApplicationErrorReport$CrashInfo
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.Throwable);
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public int throwLineNumber;
  public java.lang.String exceptionClassName;
  public java.lang.String exceptionMessage;
  public java.lang.String stackTrace;
  public java.lang.String throwClassName;
  public java.lang.String throwFileName;
  public java.lang.String throwMethodName;
}
public class android.app.ApplicationErrorReport$RunningServiceInfo
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public long durationMillis;
  public java.lang.String serviceDetails;
}
public final class android.app.AutomaticZenRule
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, android.content.ComponentName, android.net.Uri, int, boolean);
  public boolean equals(java.lang.Object);
  public boolean isEnabled();
  public int describeContents();
  public int getInterruptionFilter();
  public int hashCode();
  public long getCreationTime();
  public void setConditionId(android.net.Uri);
  public void setEnabled(boolean);
  public void setInterruptionFilter(int);
  public void setName(java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getOwner();
  public android.net.Uri getConditionId();
  public java.lang.String getName();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.DatePickerDialog
  extends android.app.AlertDialog
  implements android.content.DialogInterface$OnClickListener, android.widget.DatePicker$OnDateChangedListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.app.DatePickerDialog$OnDateSetListener, int, int, int);
  public void <init>(android.content.Context, int);
  public void <init>(android.content.Context, int, android.app.DatePickerDialog$OnDateSetListener, int, int, int);
  public void onClick(android.content.DialogInterface, int);
  public void onDateChanged(android.widget.DatePicker, int, int, int);
  public void onRestoreInstanceState(android.os.Bundle);
  public void setOnDateSetListener(android.app.DatePickerDialog$OnDateSetListener);
  public void updateDate(int, int, int);
  public android.os.Bundle onSaveInstanceState();
  public android.widget.DatePicker getDatePicker();
}
public interface android.app.DatePickerDialog$OnDateSetListener
{
  public abstract void onDateSet(android.widget.DatePicker, int, int, int);
}
public class android.app.Dialog
  extends java.lang.Object
  implements android.content.DialogInterface, android.view.Window$Callback, android.view.KeyEvent$Callback, android.view.View$OnCreateContextMenuListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, int);
  public final boolean requestWindowFeature(int);
  public final int getVolumeControlStream();
  public final void setFeatureDrawable(int, android.graphics.drawable.Drawable);
  public final void setFeatureDrawableAlpha(int, int);
  public final void setFeatureDrawableResource(int, int);
  public final void setFeatureDrawableUri(int, android.net.Uri);
  public final void setOwnerActivity(android.app.Activity);
  public final void setVolumeControlStream(int);
  public final android.app.Activity getOwnerActivity();
  public final android.content.Context getContext();
  public final android.view.SearchEvent getSearchEvent();
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean isShowing();
  public boolean onContextItemSelected(android.view.MenuItem);
  public boolean onCreateOptionsMenu(android.view.Menu);
  public boolean onCreatePanelMenu(int, android.view.Menu);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onMenuItemSelected(int, android.view.MenuItem);
  public boolean onMenuOpened(int, android.view.Menu);
  public boolean onOptionsItemSelected(android.view.MenuItem);
  public boolean onPrepareOptionsMenu(android.view.Menu);
  public boolean onPreparePanel(int, android.view.View, android.view.Menu);
  public boolean onSearchRequested();
  public boolean onSearchRequested(android.view.SearchEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void cancel();
  public void closeOptionsMenu();
  public void create();
  public void dismiss();
  public void hide();
  public void invalidateOptionsMenu();
  public void onActionModeFinished(android.view.ActionMode);
  public void onActionModeStarted(android.view.ActionMode);
  public void onAttachedToWindow();
  public void onBackPressed();
  public void onContentChanged();
  public void onContextMenuClosed(android.view.Menu);
  public void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
  public void onDetachedFromWindow();
  public void onOptionsMenuClosed(android.view.Menu);
  public void onPanelClosed(int, android.view.Menu);
  public void onRestoreInstanceState(android.os.Bundle);
  public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
  public void onWindowFocusChanged(boolean);
  public void openContextMenu(android.view.View);
  public void openOptionsMenu();
  public void registerForContextMenu(android.view.View);
  public void setCancelMessage(android.os.Message);
  public void setCancelable(boolean);
  public void setCanceledOnTouchOutside(boolean);
  public void setContentView(android.view.View);
  public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void setContentView(int);
  public void setDismissMessage(android.os.Message);
  public void setOnCancelListener(android.content.DialogInterface$OnCancelListener);
  public void setOnDismissListener(android.content.DialogInterface$OnDismissListener);
  public void setOnKeyListener(android.content.DialogInterface$OnKeyListener);
  public void setOnShowListener(android.content.DialogInterface$OnShowListener);
  public void setTitle(int);
  public void setTitle(java.lang.CharSequence);
  public void show();
  public void takeKeyEvents(boolean);
  public void unregisterForContextMenu(android.view.View);
  public android.app.ActionBar getActionBar();
  public android.os.Bundle onSaveInstanceState();
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback, int);
  public android.view.LayoutInflater getLayoutInflater();
  public android.view.View findViewById(int);
  public android.view.View getCurrentFocus();
  public android.view.View onCreatePanelView(int);
  public android.view.Window getWindow();
  protected void <init>(android.content.Context, boolean, android.content.DialogInterface$OnCancelListener);
  protected void onCreate(android.os.Bundle);
  protected void onStart();
  protected void onStop();
}
public class android.app.DialogFragment
  extends android.app.Fragment
  implements android.content.DialogInterface$OnCancelListener, android.content.DialogInterface$OnDismissListener
{
  public void <init>();
  public boolean getShowsDialog();
  public boolean isCancelable();
  public int getTheme();
  public int show(android.app.FragmentTransaction, java.lang.String);
  public void dismiss();
  public void dismissAllowingStateLoss();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void onActivityCreated(android.os.Bundle);
  public void onAttach(android.content.Context);
  public void onCancel(android.content.DialogInterface);
  public void onCreate(android.os.Bundle);
  public void onDestroyView();
  public void onDetach();
  public void onDismiss(android.content.DialogInterface);
  public void onSaveInstanceState(android.os.Bundle);
  public void onStart();
  public void onStop();
  public void setCancelable(boolean);
  public void setShowsDialog(boolean);
  public void setStyle(int, int);
  public void show(android.app.FragmentManager, java.lang.String);
  public android.app.Dialog getDialog();
  public android.app.Dialog onCreateDialog(android.os.Bundle);
  public static final int STYLE_NORMAL;
  public static final int STYLE_NO_FRAME;
  public static final int STYLE_NO_INPUT;
  public static final int STYLE_NO_TITLE;
}
public class android.app.DownloadManager
  extends java.lang.Object
{
  public static java.lang.Long getMaxBytesOverMobile(android.content.Context);
  public static java.lang.Long getRecommendedMaxBytesOverMobile(android.content.Context);
  public int remove(long[]);
  public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean);
  public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean, android.net.Uri, android.net.Uri);
  public long enqueue(android.app.DownloadManager$Request);
  public android.database.Cursor query(android.app.DownloadManager$Query);
  public android.net.Uri getUriForDownloadedFile(long);
  public android.os.ParcelFileDescriptor openDownloadedFile(long)  throws java.io.FileNotFoundException;
  public java.lang.String getMimeTypeForDownloadedFile(long);
  public static final int ERROR_CANNOT_RESUME;
  public static final int ERROR_DEVICE_NOT_FOUND;
  public static final int ERROR_FILE_ALREADY_EXISTS;
  public static final int ERROR_FILE_ERROR;
  public static final int ERROR_HTTP_DATA_ERROR;
  public static final int ERROR_INSUFFICIENT_SPACE;
  public static final int ERROR_TOO_MANY_REDIRECTS;
  public static final int ERROR_UNHANDLED_HTTP_CODE;
  public static final int ERROR_UNKNOWN;
  public static final int PAUSED_QUEUED_FOR_WIFI;
  public static final int PAUSED_UNKNOWN;
  public static final int PAUSED_WAITING_FOR_NETWORK;
  public static final int PAUSED_WAITING_TO_RETRY;
  public static final int STATUS_FAILED;
  public static final int STATUS_PAUSED;
  public static final int STATUS_PENDING;
  public static final int STATUS_RUNNING;
  public static final int STATUS_SUCCESSFUL;
  public static final java.lang.String ACTION_DOWNLOAD_COMPLETE;
  public static final java.lang.String ACTION_NOTIFICATION_CLICKED;
  public static final java.lang.String ACTION_VIEW_DOWNLOADS;
  public static final java.lang.String COLUMN_BYTES_DOWNLOADED_SO_FAR;
  public static final java.lang.String COLUMN_DESCRIPTION;
  public static final java.lang.String COLUMN_ID;
  public static final java.lang.String COLUMN_LAST_MODIFIED_TIMESTAMP;
  public static final java.lang.String COLUMN_LOCAL_FILENAME;
  public static final java.lang.String COLUMN_LOCAL_URI;
  public static final java.lang.String COLUMN_MEDIAPROVIDER_URI;
  public static final java.lang.String COLUMN_MEDIA_TYPE;
  public static final java.lang.String COLUMN_REASON;
  public static final java.lang.String COLUMN_STATUS;
  public static final java.lang.String COLUMN_TITLE;
  public static final java.lang.String COLUMN_TOTAL_SIZE_BYTES;
  public static final java.lang.String COLUMN_URI;
  public static final java.lang.String EXTRA_DOWNLOAD_ID;
  public static final java.lang.String EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS;
  public static final java.lang.String INTENT_EXTRAS_SORT_BY_SIZE;
}
public class android.app.DownloadManager$Query
  extends java.lang.Object
{
  public void <init>();
  public android.app.DownloadManager$Query setFilterById(long[]);
  public android.app.DownloadManager$Query setFilterByStatus(int);
}
public class android.app.DownloadManager$Request
  extends java.lang.Object
{
  public void <init>(android.net.Uri);
  public void allowScanningByMediaScanner();
  public android.app.DownloadManager$Request addRequestHeader(java.lang.String, java.lang.String);
  public android.app.DownloadManager$Request setAllowedNetworkTypes(int);
  public android.app.DownloadManager$Request setAllowedOverMetered(boolean);
  public android.app.DownloadManager$Request setAllowedOverRoaming(boolean);
  public android.app.DownloadManager$Request setDescription(java.lang.CharSequence);
  public android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context, java.lang.String, java.lang.String);
  public android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String, java.lang.String);
  public android.app.DownloadManager$Request setDestinationUri(android.net.Uri);
  public android.app.DownloadManager$Request setMimeType(java.lang.String);
  public android.app.DownloadManager$Request setNotificationVisibility(int);
  public android.app.DownloadManager$Request setRequiresCharging(boolean);
  public android.app.DownloadManager$Request setRequiresDeviceIdle(boolean);
  public android.app.DownloadManager$Request setShowRunningNotification(boolean);
  public android.app.DownloadManager$Request setTitle(java.lang.CharSequence);
  public android.app.DownloadManager$Request setVisibleInDownloadsUi(boolean);
  public static final int NETWORK_MOBILE;
  public static final int NETWORK_WIFI;
  public static final int VISIBILITY_HIDDEN;
  public static final int VISIBILITY_VISIBLE;
  public static final int VISIBILITY_VISIBLE_NOTIFY_COMPLETED;
  public static final int VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION;
}
public class android.app.ExpandableListActivity
  extends android.app.Activity
  implements android.view.View$OnCreateContextMenuListener, android.widget.ExpandableListView$OnChildClickListener, android.widget.ExpandableListView$OnGroupCollapseListener, android.widget.ExpandableListView$OnGroupExpandListener
{
  public void <init>();
  public boolean onChildClick(android.widget.ExpandableListView, android.view.View, int, int, long);
  public boolean setSelectedChild(int, int, boolean);
  public long getSelectedId();
  public long getSelectedPosition();
  public void onContentChanged();
  public void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
  public void onGroupCollapse(int);
  public void onGroupExpand(int);
  public void setListAdapter(android.widget.ExpandableListAdapter);
  public void setSelectedGroup(int);
  public android.widget.ExpandableListAdapter getExpandableListAdapter();
  public android.widget.ExpandableListView getExpandableListView();
  protected void onRestoreInstanceState(android.os.Bundle);
}
public class android.app.Fragment
  extends java.lang.Object
  implements android.content.ComponentCallbacks2, android.view.View$OnCreateContextMenuListener
{
  public static android.app.Fragment instantiate(android.content.Context, java.lang.String);
  public static android.app.Fragment instantiate(android.content.Context, java.lang.String, android.os.Bundle);
  public void <init>();
  public final boolean equals(java.lang.Object);
  public final boolean getRetainInstance();
  public final boolean isAdded();
  public final boolean isDetached();
  public final boolean isHidden();
  public final boolean isInLayout();
  public final boolean isRemoving();
  public final boolean isResumed();
  public final boolean isVisible();
  public final int getId();
  public final int getTargetRequestCode();
  public final int hashCode();
  public final void requestPermissions(java.lang.String[], int);
  public final android.app.Activity getActivity();
  public final android.app.Fragment getParentFragment();
  public final android.app.Fragment getTargetFragment();
  public final android.app.FragmentManager getChildFragmentManager();
  public final android.app.FragmentManager getFragmentManager();
  public final android.content.res.Resources getResources();
  public final android.os.Bundle getArguments();
  public final java.lang.CharSequence getText(int);
  public final java.lang.Object getHost();
  public final java.lang.String getString(int);
  public final java.lang.String getString(int, java.lang.Object[]);
  public final java.lang.String getTag();
  public boolean getAllowEnterTransitionOverlap();
  public boolean getAllowReturnTransitionOverlap();
  public boolean getUserVisibleHint();
  public boolean onContextItemSelected(android.view.MenuItem);
  public boolean onOptionsItemSelected(android.view.MenuItem);
  public boolean shouldShowRequestPermissionRationale(java.lang.String);
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void onActivityCreated(android.os.Bundle);
  public void onActivityResult(int, int, android.content.Intent);
  public void onAttach(android.app.Activity);
  public void onAttach(android.content.Context);
  public void onAttachFragment(android.app.Fragment);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onCreate(android.os.Bundle);
  public void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
  public void onCreateOptionsMenu(android.view.Menu, android.view.MenuInflater);
  public void onDestroy();
  public void onDestroyOptionsMenu();
  public void onDestroyView();
  public void onDetach();
  public void onHiddenChanged(boolean);
  public void onInflate(android.app.Activity, android.util.AttributeSet, android.os.Bundle);
  public void onInflate(android.content.Context, android.util.AttributeSet, android.os.Bundle);
  public void onInflate(android.util.AttributeSet, android.os.Bundle);
  public void onLowMemory();
  public void onMultiWindowModeChanged(boolean);
  public void onOptionsMenuClosed(android.view.Menu);
  public void onPause();
  public void onPictureInPictureModeChanged(boolean);
  public void onPrepareOptionsMenu(android.view.Menu);
  public void onRequestPermissionsResult(int, java.lang.String[], int[]);
  public void onResume();
  public void onSaveInstanceState(android.os.Bundle);
  public void onStart();
  public void onStop();
  public void onTrimMemory(int);
  public void onViewCreated(android.view.View, android.os.Bundle);
  public void onViewStateRestored(android.os.Bundle);
  public void registerForContextMenu(android.view.View);
  public void setAllowEnterTransitionOverlap(boolean);
  public void setAllowReturnTransitionOverlap(boolean);
  public void setArguments(android.os.Bundle);
  public void setEnterSharedElementCallback(android.app.SharedElementCallback);
  public void setEnterTransition(android.transition.Transition);
  public void setExitSharedElementCallback(android.app.SharedElementCallback);
  public void setExitTransition(android.transition.Transition);
  public void setHasOptionsMenu(boolean);
  public void setInitialSavedState(android.app.Fragment$SavedState);
  public void setMenuVisibility(boolean);
  public void setReenterTransition(android.transition.Transition);
  public void setRetainInstance(boolean);
  public void setReturnTransition(android.transition.Transition);
  public void setSharedElementEnterTransition(android.transition.Transition);
  public void setSharedElementReturnTransition(android.transition.Transition);
  public void setTargetFragment(android.app.Fragment, int);
  public void setUserVisibleHint(boolean);
  public void startActivity(android.content.Intent);
  public void startActivity(android.content.Intent, android.os.Bundle);
  public void startActivityForResult(android.content.Intent, int);
  public void startActivityForResult(android.content.Intent, int, android.os.Bundle);
  public void startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public void unregisterForContextMenu(android.view.View);
  public android.animation.Animator onCreateAnimator(int, boolean, int);
  public android.app.LoaderManager getLoaderManager();
  public android.content.Context getContext();
  public android.transition.Transition getEnterTransition();
  public android.transition.Transition getExitTransition();
  public android.transition.Transition getReenterTransition();
  public android.transition.Transition getReturnTransition();
  public android.transition.Transition getSharedElementEnterTransition();
  public android.transition.Transition getSharedElementReturnTransition();
  public android.view.View getView();
  public android.view.View onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle);
  public java.lang.String toString();
}
public class android.app.Fragment$InstantiationException
  extends android.util.AndroidRuntimeException
{
  public void <init>(java.lang.String, java.lang.Exception);
}
public class android.app.Fragment$SavedState
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$ClassLoaderCreator CREATOR;
}
public class android.app.FragmentBreadCrumbs
  extends android.view.ViewGroup
  implements android.app.FragmentManager$OnBackStackChangedListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void onBackStackChanged();
  public void setActivity(android.app.Activity);
  public void setMaxVisible(int);
  public void setOnBreadCrumbClickListener(android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener);
  public void setParentTitle(java.lang.CharSequence, java.lang.CharSequence, android.view.View$OnClickListener);
  public void setTitle(java.lang.CharSequence, java.lang.CharSequence);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
}
public interface android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener
{
  public abstract boolean onBreadCrumbClick(android.app.FragmentManager$BackStackEntry, int);
}
public abstract class android.app.FragmentContainer
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean onHasView();
  public abstract android.view.View onFindViewById(int);
}
public class android.app.FragmentController
  extends java.lang.Object
{
  public static final android.app.FragmentController createController(android.app.FragmentHostCallback);
  public boolean dispatchContextItemSelected(android.view.MenuItem);
  public boolean dispatchCreateOptionsMenu(android.view.Menu, android.view.MenuInflater);
  public boolean dispatchOptionsItemSelected(android.view.MenuItem);
  public boolean dispatchPrepareOptionsMenu(android.view.Menu);
  public boolean execPendingActions();
  public void attachHost(android.app.Fragment);
  public void dispatchActivityCreated();
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  public void dispatchCreate();
  public void dispatchDestroy();
  public void dispatchDestroyView();
  public void dispatchLowMemory();
  public void dispatchMultiWindowModeChanged(boolean);
  public void dispatchOptionsMenuClosed(android.view.Menu);
  public void dispatchPause();
  public void dispatchPictureInPictureModeChanged(boolean);
  public void dispatchResume();
  public void dispatchStart();
  public void dispatchStop();
  public void dispatchTrimMemory(int);
  public void doLoaderDestroy();
  public void doLoaderStart();
  public void doLoaderStop(boolean);
  public void dumpLoaders(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void noteStateNotSaved();
  public void reportLoaderStart();
  public void restoreAllState(android.os.Parcelable, android.app.FragmentManagerNonConfig);
  public void restoreAllState(android.os.Parcelable, java.util.List);
  public void restoreLoaderNonConfig(android.util.ArrayMap);
  public android.app.Fragment findFragmentByWho(java.lang.String);
  public android.app.FragmentManager getFragmentManager();
  public android.app.FragmentManagerNonConfig retainNestedNonConfig();
  public android.app.LoaderManager getLoaderManager();
  public android.os.Parcelable saveAllState();
  public android.util.ArrayMap retainLoaderNonConfig();
  public android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet);
  public java.util.List retainNonConfig();
}
public abstract class android.app.FragmentHostCallback
  extends android.app.FragmentContainer
{
  public void <init>(android.content.Context, android.os.Handler, int);
  public abstract java.lang.Object onGetHost();
  public boolean onHasView();
  public boolean onHasWindowAnimations();
  public boolean onShouldSaveFragmentState(android.app.Fragment);
  public boolean onUseFragmentManagerInflaterFactory();
  public int onGetWindowAnimations();
  public void onAttachFragment(android.app.Fragment);
  public void onDump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void onInvalidateOptionsMenu();
  public void onRequestPermissionsFromFragment(android.app.Fragment, java.lang.String[], int);
  public void onStartActivityFromFragment(android.app.Fragment, android.content.Intent, int, android.os.Bundle);
  public void onStartIntentSenderFromFragment(android.app.Fragment, android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public android.view.LayoutInflater onGetLayoutInflater();
  public android.view.View onFindViewById(int);
}
public abstract class android.app.FragmentManager
  extends java.lang.Object
{
  public static void enableDebugLogging(boolean);
  public void <init>();
  public abstract boolean executePendingTransactions();
  public abstract boolean isDestroyed();
  public abstract boolean popBackStackImmediate();
  public abstract boolean popBackStackImmediate(int, int);
  public abstract boolean popBackStackImmediate(java.lang.String, int);
  public abstract int getBackStackEntryCount();
  public abstract void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener);
  public abstract void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public abstract void popBackStack();
  public abstract void popBackStack(int, int);
  public abstract void popBackStack(java.lang.String, int);
  public abstract void putFragment(android.os.Bundle, java.lang.String, android.app.Fragment);
  public abstract void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener);
  public abstract android.app.Fragment findFragmentById(int);
  public abstract android.app.Fragment findFragmentByTag(java.lang.String);
  public abstract android.app.Fragment getFragment(android.os.Bundle, java.lang.String);
  public abstract android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment);
  public abstract android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int);
  public abstract android.app.FragmentTransaction beginTransaction();
  public void invalidateOptionsMenu();
  public static final int POP_BACK_STACK_INCLUSIVE;
}
public interface android.app.FragmentManager$BackStackEntry
{
  public abstract int getBreadCrumbShortTitleRes();
  public abstract int getBreadCrumbTitleRes();
  public abstract int getId();
  public abstract java.lang.CharSequence getBreadCrumbShortTitle();
  public abstract java.lang.CharSequence getBreadCrumbTitle();
  public abstract java.lang.String getName();
}
public interface android.app.FragmentManager$OnBackStackChangedListener
{
  public abstract void onBackStackChanged();
}
public class android.app.FragmentManagerNonConfig
  extends java.lang.Object
{
}
public abstract class android.app.FragmentTransaction
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean isAddToBackStackAllowed();
  public abstract boolean isEmpty();
  public abstract int commit();
  public abstract int commitAllowingStateLoss();
  public abstract void commitNow();
  public abstract void commitNowAllowingStateLoss();
  public abstract android.app.FragmentTransaction add(android.app.Fragment, java.lang.String);
  public abstract android.app.FragmentTransaction add(int, android.app.Fragment);
  public abstract android.app.FragmentTransaction add(int, android.app.Fragment, java.lang.String);
  public abstract android.app.FragmentTransaction addSharedElement(android.view.View, java.lang.String);
  public abstract android.app.FragmentTransaction addToBackStack(java.lang.String);
  public abstract android.app.FragmentTransaction attach(android.app.Fragment);
  public abstract android.app.FragmentTransaction detach(android.app.Fragment);
  public abstract android.app.FragmentTransaction disallowAddToBackStack();
  public abstract android.app.FragmentTransaction hide(android.app.Fragment);
  public abstract android.app.FragmentTransaction remove(android.app.Fragment);
  public abstract android.app.FragmentTransaction replace(int, android.app.Fragment);
  public abstract android.app.FragmentTransaction replace(int, android.app.Fragment, java.lang.String);
  public abstract android.app.FragmentTransaction setBreadCrumbShortTitle(int);
  public abstract android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence);
  public abstract android.app.FragmentTransaction setBreadCrumbTitle(int);
  public abstract android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence);
  public abstract android.app.FragmentTransaction setCustomAnimations(int, int);
  public abstract android.app.FragmentTransaction setCustomAnimations(int, int, int, int);
  public abstract android.app.FragmentTransaction setTransition(int);
  public abstract android.app.FragmentTransaction setTransitionStyle(int);
  public abstract android.app.FragmentTransaction show(android.app.Fragment);
  public static final int TRANSIT_ENTER_MASK;
  public static final int TRANSIT_EXIT_MASK;
  public static final int TRANSIT_FRAGMENT_CLOSE;
  public static final int TRANSIT_FRAGMENT_FADE;
  public static final int TRANSIT_FRAGMENT_OPEN;
  public static final int TRANSIT_NONE;
  public static final int TRANSIT_UNSET;
}
public class android.app.Instrumentation
  extends java.lang.Object
{
  public static android.app.Application newApplication(java.lang.Class, android.content.Context)  throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException;
  public void <init>();
  public boolean checkMonitorHit(android.app.Instrumentation$ActivityMonitor, int);
  public boolean invokeContextMenuAction(android.app.Activity, int, int);
  public boolean invokeMenuActionSync(android.app.Activity, int, int);
  public boolean isProfiling();
  public boolean onException(java.lang.Object, java.lang.Throwable);
  public void addMonitor(android.app.Instrumentation$ActivityMonitor);
  public void callActivityOnCreate(android.app.Activity, android.os.Bundle);
  public void callActivityOnCreate(android.app.Activity, android.os.Bundle, android.os.PersistableBundle);
  public void callActivityOnDestroy(android.app.Activity);
  public void callActivityOnNewIntent(android.app.Activity, android.content.Intent);
  public void callActivityOnPause(android.app.Activity);
  public void callActivityOnPostCreate(android.app.Activity, android.os.Bundle);
  public void callActivityOnPostCreate(android.app.Activity, android.os.Bundle, android.os.PersistableBundle);
  public void callActivityOnRestart(android.app.Activity);
  public void callActivityOnRestoreInstanceState(android.app.Activity, android.os.Bundle);
  public void callActivityOnRestoreInstanceState(android.app.Activity, android.os.Bundle, android.os.PersistableBundle);
  public void callActivityOnResume(android.app.Activity);
  public void callActivityOnSaveInstanceState(android.app.Activity, android.os.Bundle);
  public void callActivityOnSaveInstanceState(android.app.Activity, android.os.Bundle, android.os.PersistableBundle);
  public void callActivityOnStart(android.app.Activity);
  public void callActivityOnStop(android.app.Activity);
  public void callActivityOnUserLeaving(android.app.Activity);
  public void callApplicationOnCreate(android.app.Application);
  public void endPerformanceSnapshot();
  public void finish(int, android.os.Bundle);
  public void onCreate(android.os.Bundle);
  public void onDestroy();
  public void onStart();
  public void removeMonitor(android.app.Instrumentation$ActivityMonitor);
  public void runOnMainSync(java.lang.Runnable);
  public void sendCharacterSync(int);
  public void sendKeyDownUpSync(int);
  public void sendKeySync(android.view.KeyEvent);
  public void sendPointerSync(android.view.MotionEvent);
  public void sendStatus(int, android.os.Bundle);
  public void sendStringSync(java.lang.String);
  public void sendTrackballEventSync(android.view.MotionEvent);
  public void setAutomaticPerformanceSnapshots();
  public void setInTouchMode(boolean);
  public void start();
  public void startAllocCounting();
  public void startPerformanceSnapshot();
  public void startProfiling();
  public void stopAllocCounting();
  public void stopProfiling();
  public void waitForIdle(java.lang.Runnable);
  public void waitForIdleSync();
  public android.app.Activity newActivity(java.lang.Class, android.content.Context, android.os.IBinder, android.app.Application, android.content.Intent, android.content.pm.ActivityInfo, java.lang.CharSequence, android.app.Activity, java.lang.String, java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.InstantiationException;
  public android.app.Activity newActivity(java.lang.ClassLoader, java.lang.String, android.content.Intent)  throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException;
  public android.app.Activity startActivitySync(android.content.Intent);
  public android.app.Activity waitForMonitor(android.app.Instrumentation$ActivityMonitor);
  public android.app.Activity waitForMonitorWithTimeout(android.app.Instrumentation$ActivityMonitor, long);
  public android.app.Application newApplication(java.lang.ClassLoader, java.lang.String, android.content.Context)  throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException;
  public android.app.Instrumentation$ActivityMonitor addMonitor(android.content.IntentFilter, android.app.Instrumentation$ActivityResult, boolean);
  public android.app.Instrumentation$ActivityMonitor addMonitor(java.lang.String, android.app.Instrumentation$ActivityResult, boolean);
  public android.app.UiAutomation getUiAutomation();
  public android.app.UiAutomation getUiAutomation(int);
  public android.content.ComponentName getComponentName();
  public android.content.Context getContext();
  public android.content.Context getTargetContext();
  public android.os.Bundle getAllocCounts();
  public android.os.Bundle getBinderCounts();
  public static final java.lang.String REPORT_KEY_IDENTIFIER;
  public static final java.lang.String REPORT_KEY_STREAMRESULT;
}
public class android.app.Instrumentation$ActivityMonitor
  extends java.lang.Object
{
  public void <init>(android.content.IntentFilter, android.app.Instrumentation$ActivityResult, boolean);
  public void <init>(java.lang.String, android.app.Instrumentation$ActivityResult, boolean);
  public final boolean isBlocking();
  public final int getHits();
  public final android.app.Activity getLastActivity();
  public final android.app.Activity waitForActivity();
  public final android.app.Activity waitForActivityWithTimeout(long);
  public final android.app.Instrumentation$ActivityResult getResult();
  public final android.content.IntentFilter getFilter();
}
public final class android.app.Instrumentation$ActivityResult
  extends java.lang.Object
{
  public void <init>(int, android.content.Intent);
  public int getResultCode();
  public android.content.Intent getResultData();
}
public abstract class android.app.IntentService
  extends android.app.Service
{
  public void <init>(java.lang.String);
  public int onStartCommand(android.content.Intent, int, int);
  public void onCreate();
  public void onDestroy();
  public void onStart(android.content.Intent, int);
  public void setIntentRedelivery(boolean);
  public android.os.IBinder onBind(android.content.Intent);
  protected abstract void onHandleIntent(android.content.Intent);
}
public class android.app.KeyguardManager
  extends java.lang.Object
{
  public boolean inKeyguardRestrictedInputMode();
  public boolean isDeviceLocked();
  public boolean isDeviceSecure();
  public boolean isKeyguardLocked();
  public boolean isKeyguardSecure();
  public void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult);
  public android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String);
  public android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence, java.lang.CharSequence);
}
public class android.app.KeyguardManager$KeyguardLock
  extends java.lang.Object
{
  public void disableKeyguard();
  public void reenableKeyguard();
}
public interface android.app.KeyguardManager$OnKeyguardExitResult
{
  public abstract void onKeyguardExitResult(boolean);
}
public abstract class android.app.LauncherActivity
  extends android.app.ListActivity
{
  public void <init>();
  public void setTitle(int);
  public void setTitle(java.lang.CharSequence);
  public java.util.List makeListItems();
  protected void onCreate(android.os.Bundle);
  protected void onListItemClick(android.widget.ListView, android.view.View, int, long);
  protected void onSetContentView();
  protected android.app.LauncherActivity$ListItem itemForPosition(int);
  protected android.content.Intent getTargetIntent();
  protected android.content.Intent intentForPosition(int);
  protected java.util.List onQueryPackageManager(android.content.Intent);
}
public class android.app.LauncherActivity$IconResizer
  extends java.lang.Object
{
  public void <init>(android.app.LauncherActivity);
  public android.graphics.drawable.Drawable createIconThumbnail(android.graphics.drawable.Drawable);
}
public class android.app.LauncherActivity$ListItem
  extends java.lang.Object
{
  public void <init>();
  public android.content.pm.ResolveInfo resolveInfo;
  public android.graphics.drawable.Drawable icon;
  public android.os.Bundle extras;
  public java.lang.CharSequence label;
  public java.lang.String className;
  public java.lang.String packageName;
}
public class android.app.ListActivity
  extends android.app.Activity
{
  public void <init>();
  public int getSelectedItemPosition();
  public long getSelectedItemId();
  public void onContentChanged();
  public void setListAdapter(android.widget.ListAdapter);
  public void setSelection(int);
  public android.widget.ListAdapter getListAdapter();
  public android.widget.ListView getListView();
  protected void onDestroy();
  protected void onListItemClick(android.widget.ListView, android.view.View, int, long);
  protected void onRestoreInstanceState(android.os.Bundle);
}
public class android.app.ListFragment
  extends android.app.Fragment
{
  public void <init>();
  public int getSelectedItemPosition();
  public long getSelectedItemId();
  public void onDestroyView();
  public void onListItemClick(android.widget.ListView, android.view.View, int, long);
  public void onViewCreated(android.view.View, android.os.Bundle);
  public void setEmptyText(java.lang.CharSequence);
  public void setListAdapter(android.widget.ListAdapter);
  public void setListShown(boolean);
  public void setListShownNoAnimation(boolean);
  public void setSelection(int);
  public android.view.View onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle);
  public android.widget.ListAdapter getListAdapter();
  public android.widget.ListView getListView();
}
public abstract class android.app.LoaderManager
  extends java.lang.Object
{
  public static void enableDebugLogging(boolean);
  public void <init>();
  public abstract void destroyLoader(int);
  public abstract void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public abstract android.content.Loader getLoader(int);
  public abstract android.content.Loader initLoader(int, android.os.Bundle, android.app.LoaderManager$LoaderCallbacks);
  public abstract android.content.Loader restartLoader(int, android.os.Bundle, android.app.LoaderManager$LoaderCallbacks);
}
public interface android.app.LoaderManager$LoaderCallbacks
{
  public abstract void onLoadFinished(android.content.Loader, java.lang.Object);
  public abstract void onLoaderReset(android.content.Loader);
  public abstract android.content.Loader onCreateLoader(int, android.os.Bundle);
}
public class android.app.LocalActivityManager
  extends java.lang.Object
{
  public void <init>(android.app.Activity, boolean);
  public void dispatchCreate(android.os.Bundle);
  public void dispatchDestroy(boolean);
  public void dispatchPause(boolean);
  public void dispatchResume();
  public void dispatchStop();
  public void removeAllActivities();
  public android.app.Activity getActivity(java.lang.String);
  public android.app.Activity getCurrentActivity();
  public android.os.Bundle saveInstanceState();
  public android.view.Window destroyActivity(java.lang.String, boolean);
  public android.view.Window startActivity(java.lang.String, android.content.Intent);
  public java.lang.String getCurrentId();
}
public class android.app.MediaRouteActionProvider
  extends android.view.ActionProvider
{
  public void <init>(android.content.Context);
  public boolean isVisible();
  public boolean onPerformDefaultAction();
  public boolean overridesItemVisibility();
  public void setExtendedSettingsClickListener(android.view.View$OnClickListener);
  public void setRouteTypes(int);
  public android.view.View onCreateActionView();
  public android.view.View onCreateActionView(android.view.MenuItem);
}
public class android.app.MediaRouteButton
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean performClick();
  public boolean performLongClick();
  public int getRouteTypes();
  public void jumpDrawablesToCurrentState();
  public void onAttachedToWindow();
  public void onDetachedFromWindow();
  public void setExtendedSettingsClickListener(android.view.View$OnClickListener);
  public void setRouteTypes(int);
  public void setVisibility(int);
  public void showDialog();
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  protected void onDraw(android.graphics.Canvas);
  protected void onMeasure(int, int);
  protected int[] onCreateDrawableState(int);
}
public class android.app.NativeActivity
  extends android.app.Activity
  implements android.view.SurfaceHolder$Callback2, android.view.InputQueue$Callback, android.view.ViewTreeObserver$OnGlobalLayoutListener
{
  public void <init>();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onGlobalLayout();
  public void onInputQueueCreated(android.view.InputQueue);
  public void onInputQueueDestroyed(android.view.InputQueue);
  public void onLowMemory();
  public void onWindowFocusChanged(boolean);
  public void surfaceChanged(android.view.SurfaceHolder, int, int, int);
  public void surfaceCreated(android.view.SurfaceHolder);
  public void surfaceDestroyed(android.view.SurfaceHolder);
  public void surfaceRedrawNeeded(android.view.SurfaceHolder);
  protected void onCreate(android.os.Bundle);
  protected void onDestroy();
  protected void onPause();
  protected void onResume();
  protected void onSaveInstanceState(android.os.Bundle);
  protected void onStart();
  protected void onStop();
  public static final java.lang.String META_DATA_FUNC_NAME;
  public static final java.lang.String META_DATA_LIB_NAME;
}
public class android.app.Notification
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(int, java.lang.CharSequence, long);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.Notification clone();
  public android.graphics.drawable.Icon getLargeIcon();
  public android.graphics.drawable.Icon getSmallIcon();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String getGroup();
  public java.lang.String getSortKey();
  public java.lang.String toString();
  public static final int COLOR_DEFAULT;
  public static final int DEFAULT_ALL;
  public static final int DEFAULT_LIGHTS;
  public static final int DEFAULT_SOUND;
  public static final int DEFAULT_VIBRATE;
  public static final int FLAG_AUTO_CANCEL;
  public static final int FLAG_FOREGROUND_SERVICE;
  public static final int FLAG_GROUP_SUMMARY;
  public static final int FLAG_HIGH_PRIORITY;
  public static final int FLAG_INSISTENT;
  public static final int FLAG_LOCAL_ONLY;
  public static final int FLAG_NO_CLEAR;
  public static final int FLAG_ONGOING_EVENT;
  public static final int FLAG_ONLY_ALERT_ONCE;
  public static final int FLAG_SHOW_LIGHTS;
  public static final int PRIORITY_DEFAULT;
  public static final int PRIORITY_HIGH;
  public static final int PRIORITY_LOW;
  public static final int PRIORITY_MAX;
  public static final int PRIORITY_MIN;
  public static final int STREAM_DEFAULT;
  public static final int VISIBILITY_PRIVATE;
  public static final int VISIBILITY_PUBLIC;
  public static final int VISIBILITY_SECRET;
  public static final android.media.AudioAttributes AUDIO_ATTRIBUTES_DEFAULT;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String CATEGORY_ALARM;
  public static final java.lang.String CATEGORY_CALL;
  public static final java.lang.String CATEGORY_EMAIL;
  public static final java.lang.String CATEGORY_ERROR;
  public static final java.lang.String CATEGORY_EVENT;
  public static final java.lang.String CATEGORY_MESSAGE;
  public static final java.lang.String CATEGORY_PROGRESS;
  public static final java.lang.String CATEGORY_PROMO;
  public static final java.lang.String CATEGORY_RECOMMENDATION;
  public static final java.lang.String CATEGORY_REMINDER;
  public static final java.lang.String CATEGORY_SERVICE;
  public static final java.lang.String CATEGORY_SOCIAL;
  public static final java.lang.String CATEGORY_STATUS;
  public static final java.lang.String CATEGORY_SYSTEM;
  public static final java.lang.String CATEGORY_TRANSPORT;
  public static final java.lang.String EXTRA_BACKGROUND_IMAGE_URI;
  public static final java.lang.String EXTRA_BIG_TEXT;
  public static final java.lang.String EXTRA_CHRONOMETER_COUNT_DOWN;
  public static final java.lang.String EXTRA_COMPACT_ACTIONS;
  public static final java.lang.String EXTRA_CONVERSATION_TITLE;
  public static final java.lang.String EXTRA_INFO_TEXT;
  public static final java.lang.String EXTRA_LARGE_ICON;
  public static final java.lang.String EXTRA_LARGE_ICON_BIG;
  public static final java.lang.String EXTRA_MEDIA_SESSION;
  public static final java.lang.String EXTRA_MESSAGES;
  public static final java.lang.String EXTRA_PEOPLE;
  public static final java.lang.String EXTRA_PICTURE;
  public static final java.lang.String EXTRA_PROGRESS;
  public static final java.lang.String EXTRA_PROGRESS_INDETERMINATE;
  public static final java.lang.String EXTRA_PROGRESS_MAX;
  public static final java.lang.String EXTRA_REMOTE_INPUT_HISTORY;
  public static final java.lang.String EXTRA_SELF_DISPLAY_NAME;
  public static final java.lang.String EXTRA_SHOW_CHRONOMETER;
  public static final java.lang.String EXTRA_SHOW_WHEN;
  public static final java.lang.String EXTRA_SMALL_ICON;
  public static final java.lang.String EXTRA_SUB_TEXT;
  public static final java.lang.String EXTRA_SUMMARY_TEXT;
  public static final java.lang.String EXTRA_TEMPLATE;
  public static final java.lang.String EXTRA_TEXT;
  public static final java.lang.String EXTRA_TEXT_LINES;
  public static final java.lang.String EXTRA_TITLE;
  public static final java.lang.String EXTRA_TITLE_BIG;
  public static final java.lang.String INTENT_CATEGORY_NOTIFICATION_PREFERENCES;
  public int audioStreamType;
  public int color;
  public int defaults;
  public int flags;
  public int icon;
  public int iconLevel;
  public int ledARGB;
  public int ledOffMS;
  public int ledOnMS;
  public int number;
  public int priority;
  public int visibility;
  public long when;
  public android.app.Notification publicVersion;
  public android.app.Notification$Action[] actions;
  public android.app.PendingIntent contentIntent;
  public android.app.PendingIntent deleteIntent;
  public android.app.PendingIntent fullScreenIntent;
  public android.graphics.Bitmap largeIcon;
  public android.media.AudioAttributes audioAttributes;
  public android.net.Uri sound;
  public android.os.Bundle extras;
  public android.widget.RemoteViews bigContentView;
  public android.widget.RemoteViews contentView;
  public android.widget.RemoteViews headsUpContentView;
  public android.widget.RemoteViews tickerView;
  public java.lang.CharSequence tickerText;
  public java.lang.String category;
  public long[] vibrate;
}
public class android.app.Notification$Action
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int, java.lang.CharSequence, android.app.PendingIntent);
  public boolean getAllowGeneratedReplies();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.Notification$Action clone();
  public android.app.RemoteInput[] getRemoteInputs();
  public android.graphics.drawable.Icon getIcon();
  public android.os.Bundle getExtras();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public static final android.os.Parcelable$Creator CREATOR;
  public int icon;
  public android.app.PendingIntent actionIntent;
  public java.lang.CharSequence title;
}
public final class android.app.Notification$Action$Builder
  extends java.lang.Object
{
  public void <init>(android.app.Notification$Action);
  public void <init>(android.graphics.drawable.Icon, java.lang.CharSequence, android.app.PendingIntent);
  public void <init>(int, java.lang.CharSequence, android.app.PendingIntent);
  public android.app.Notification$Action build();
  public android.app.Notification$Action$Builder addExtras(android.os.Bundle);
  public android.app.Notification$Action$Builder addRemoteInput(android.app.RemoteInput);
  public android.app.Notification$Action$Builder extend(android.app.Notification$Action$Extender);
  public android.app.Notification$Action$Builder setAllowGeneratedReplies(boolean);
  public android.os.Bundle getExtras();
}
public interface android.app.Notification$Action$Extender
{
  public abstract android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder);
}
public final class android.app.Notification$Action$WearableExtender
  extends java.lang.Object
  implements android.app.Notification$Action$Extender
{
  public void <init>();
  public void <init>(android.app.Notification$Action);
  public boolean getHintLaunchesActivity();
  public boolean isAvailableOffline();
  public android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder);
  public android.app.Notification$Action$WearableExtender clone();
  public android.app.Notification$Action$WearableExtender setAvailableOffline(boolean);
  public android.app.Notification$Action$WearableExtender setCancelLabel(java.lang.CharSequence);
  public android.app.Notification$Action$WearableExtender setConfirmLabel(java.lang.CharSequence);
  public android.app.Notification$Action$WearableExtender setHintLaunchesActivity(boolean);
  public android.app.Notification$Action$WearableExtender setInProgressLabel(java.lang.CharSequence);
  public java.lang.CharSequence getCancelLabel();
  public java.lang.CharSequence getConfirmLabel();
  public java.lang.CharSequence getInProgressLabel();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class android.app.Notification$BigPictureStyle
  extends android.app.Notification$Style
{
  public void <init>();
  public void <init>(android.app.Notification$Builder);
  public android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.Bitmap);
  public android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.drawable.Icon);
  public android.app.Notification$BigPictureStyle bigPicture(android.graphics.Bitmap);
  public android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence);
  public android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence);
}
public class android.app.Notification$BigTextStyle
  extends android.app.Notification$Style
{
  public void <init>();
  public void <init>(android.app.Notification$Builder);
  public android.app.Notification$BigTextStyle bigText(java.lang.CharSequence);
  public android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence);
  public android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence);
}
public class android.app.Notification$Builder
  extends java.lang.Object
{
  public static android.app.Notification$Builder recoverBuilder(android.content.Context, android.app.Notification);
  public void <init>(android.content.Context);
  public android.app.Notification build();
  public android.app.Notification getNotification();
  public android.app.Notification$Builder addAction(android.app.Notification$Action);
  public android.app.Notification$Builder addAction(int, java.lang.CharSequence, android.app.PendingIntent);
  public android.app.Notification$Builder addExtras(android.os.Bundle);
  public android.app.Notification$Builder addPerson(java.lang.String);
  public android.app.Notification$Builder extend(android.app.Notification$Extender);
  public android.app.Notification$Builder setActions(android.app.Notification$Action[]);
  public android.app.Notification$Builder setAutoCancel(boolean);
  public android.app.Notification$Builder setCategory(java.lang.String);
  public android.app.Notification$Builder setChronometerCountDown(boolean);
  public android.app.Notification$Builder setColor(int);
  public android.app.Notification$Builder setContent(android.widget.RemoteViews);
  public android.app.Notification$Builder setContentInfo(java.lang.CharSequence);
  public android.app.Notification$Builder setContentIntent(android.app.PendingIntent);
  public android.app.Notification$Builder setContentText(java.lang.CharSequence);
  public android.app.Notification$Builder setContentTitle(java.lang.CharSequence);
  public android.app.Notification$Builder setCustomBigContentView(android.widget.RemoteViews);
  public android.app.Notification$Builder setCustomContentView(android.widget.RemoteViews);
  public android.app.Notification$Builder setCustomHeadsUpContentView(android.widget.RemoteViews);
  public android.app.Notification$Builder setDefaults(int);
  public android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent);
  public android.app.Notification$Builder setExtras(android.os.Bundle);
  public android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent, boolean);
  public android.app.Notification$Builder setGroup(java.lang.String);
  public android.app.Notification$Builder setGroupSummary(boolean);
  public android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap);
  public android.app.Notification$Builder setLargeIcon(android.graphics.drawable.Icon);
  public android.app.Notification$Builder setLights(int, int, int);
  public android.app.Notification$Builder setLocalOnly(boolean);
  public android.app.Notification$Builder setNumber(int);
  public android.app.Notification$Builder setOngoing(boolean);
  public android.app.Notification$Builder setOnlyAlertOnce(boolean);
  public android.app.Notification$Builder setPriority(int);
  public android.app.Notification$Builder setProgress(int, int, boolean);
  public android.app.Notification$Builder setPublicVersion(android.app.Notification);
  public android.app.Notification$Builder setRemoteInputHistory(java.lang.CharSequence[]);
  public android.app.Notification$Builder setShowWhen(boolean);
  public android.app.Notification$Builder setSmallIcon(android.graphics.drawable.Icon);
  public android.app.Notification$Builder setSmallIcon(int);
  public android.app.Notification$Builder setSmallIcon(int, int);
  public android.app.Notification$Builder setSortKey(java.lang.String);
  public android.app.Notification$Builder setSound(android.net.Uri);
  public android.app.Notification$Builder setSound(android.net.Uri, android.media.AudioAttributes);
  public android.app.Notification$Builder setSound(android.net.Uri, int);
  public android.app.Notification$Builder setStyle(android.app.Notification$Style);
  public android.app.Notification$Builder setSubText(java.lang.CharSequence);
  public android.app.Notification$Builder setTicker(java.lang.CharSequence);
  public android.app.Notification$Builder setTicker(java.lang.CharSequence, android.widget.RemoteViews);
  public android.app.Notification$Builder setUsesChronometer(boolean);
  public android.app.Notification$Builder setVibrate(long[]);
  public android.app.Notification$Builder setVisibility(int);
  public android.app.Notification$Builder setWhen(long);
  public android.os.Bundle getExtras();
  public android.widget.RemoteViews createBigContentView();
  public android.widget.RemoteViews createContentView();
  public android.widget.RemoteViews createHeadsUpContentView();
}
public final class android.app.Notification$CarExtender
  extends java.lang.Object
  implements android.app.Notification$Extender
{
  public void <init>();
  public void <init>(android.app.Notification);
  public int getColor();
  public android.app.Notification$Builder extend(android.app.Notification$Builder);
  public android.app.Notification$CarExtender setColor(int);
  public android.app.Notification$CarExtender setLargeIcon(android.graphics.Bitmap);
  public android.app.Notification$CarExtender setUnreadConversation(android.app.Notification$CarExtender$UnreadConversation);
  public android.app.Notification$CarExtender$UnreadConversation getUnreadConversation();
  public android.graphics.Bitmap getLargeIcon();
}
public class android.app.Notification$CarExtender$Builder
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public android.app.Notification$CarExtender$Builder addMessage(java.lang.String);
  public android.app.Notification$CarExtender$Builder setLatestTimestamp(long);
  public android.app.Notification$CarExtender$Builder setReadPendingIntent(android.app.PendingIntent);
  public android.app.Notification$CarExtender$Builder setReplyAction(android.app.PendingIntent, android.app.RemoteInput);
  public android.app.Notification$CarExtender$UnreadConversation build();
}
public class android.app.Notification$CarExtender$UnreadConversation
  extends java.lang.Object
{
  public long getLatestTimestamp();
  public android.app.PendingIntent getReadPendingIntent();
  public android.app.PendingIntent getReplyPendingIntent();
  public android.app.RemoteInput getRemoteInput();
  public java.lang.String getParticipant();
  public java.lang.String[] getMessages();
  public java.lang.String[] getParticipants();
}
public class android.app.Notification$DecoratedCustomViewStyle
  extends android.app.Notification$Style
{
  public void <init>();
}
public class android.app.Notification$DecoratedMediaCustomViewStyle
  extends android.app.Notification$MediaStyle
{
  public void <init>();
}
public interface android.app.Notification$Extender
{
  public abstract android.app.Notification$Builder extend(android.app.Notification$Builder);
}
public class android.app.Notification$InboxStyle
  extends android.app.Notification$Style
{
  public void <init>();
  public void <init>(android.app.Notification$Builder);
  public android.app.Notification$InboxStyle addLine(java.lang.CharSequence);
  public android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence);
  public android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence);
}
public class android.app.Notification$MediaStyle
  extends android.app.Notification$Style
{
  public void <init>();
  public void <init>(android.app.Notification$Builder);
  public android.app.Notification$MediaStyle setMediaSession(android.media.session.MediaSession$Token);
  public android.app.Notification$MediaStyle setShowActionsInCompactView(int[]);
}
public class android.app.Notification$MessagingStyle
  extends android.app.Notification$Style
{
  public void <init>(java.lang.CharSequence);
  public android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle$Message);
  public android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence, long, java.lang.CharSequence);
  public android.app.Notification$MessagingStyle setConversationTitle(java.lang.CharSequence);
  public java.lang.CharSequence getConversationTitle();
  public java.lang.CharSequence getUserDisplayName();
  public java.util.List getMessages();
  public static final int MAXIMUM_RETAINED_MESSAGES;
}
public final class android.app.Notification$MessagingStyle$Message
  extends java.lang.Object
{
  public void <init>(java.lang.CharSequence, long, java.lang.CharSequence);
  public long getTimestamp();
  public android.app.Notification$MessagingStyle$Message setData(java.lang.String, android.net.Uri);
  public android.net.Uri getDataUri();
  public java.lang.CharSequence getSender();
  public java.lang.CharSequence getText();
  public java.lang.String getDataMimeType();
}
public abstract class android.app.Notification$Style
  extends java.lang.Object
{
  public void <init>();
  public void setBuilder(android.app.Notification$Builder);
  public android.app.Notification build();
  protected void checkBuilder();
  protected void internalSetBigContentTitle(java.lang.CharSequence);
  protected void internalSetSummaryText(java.lang.CharSequence);
  protected android.widget.RemoteViews getStandardView(int);
  protected android.app.Notification$Builder mBuilder;
}
public final class android.app.Notification$WearableExtender
  extends java.lang.Object
  implements android.app.Notification$Extender
{
  public void <init>();
  public void <init>(android.app.Notification);
  public boolean getContentIntentAvailableOffline();
  public boolean getHintAmbientBigPicture();
  public boolean getHintAvoidBackgroundClipping();
  public boolean getHintContentIntentLaunchesActivity();
  public boolean getHintHideIcon();
  public boolean getHintShowBackgroundOnly();
  public boolean getStartScrollBottom();
  public int getContentAction();
  public int getContentIcon();
  public int getContentIconGravity();
  public int getCustomContentHeight();
  public int getCustomSizePreset();
  public int getGravity();
  public int getHintScreenTimeout();
  public android.app.Notification$Builder extend(android.app.Notification$Builder);
  public android.app.Notification$WearableExtender addAction(android.app.Notification$Action);
  public android.app.Notification$WearableExtender addActions(java.util.List);
  public android.app.Notification$WearableExtender addPage(android.app.Notification);
  public android.app.Notification$WearableExtender addPages(java.util.List);
  public android.app.Notification$WearableExtender clearActions();
  public android.app.Notification$WearableExtender clearPages();
  public android.app.Notification$WearableExtender clone();
  public android.app.Notification$WearableExtender setBackground(android.graphics.Bitmap);
  public android.app.Notification$WearableExtender setContentAction(int);
  public android.app.Notification$WearableExtender setContentIcon(int);
  public android.app.Notification$WearableExtender setContentIconGravity(int);
  public android.app.Notification$WearableExtender setContentIntentAvailableOffline(boolean);
  public android.app.Notification$WearableExtender setCustomContentHeight(int);
  public android.app.Notification$WearableExtender setCustomSizePreset(int);
  public android.app.Notification$WearableExtender setDismissalId(java.lang.String);
  public android.app.Notification$WearableExtender setDisplayIntent(android.app.PendingIntent);
  public android.app.Notification$WearableExtender setGravity(int);
  public android.app.Notification$WearableExtender setHintAmbientBigPicture(boolean);
  public android.app.Notification$WearableExtender setHintAvoidBackgroundClipping(boolean);
  public android.app.Notification$WearableExtender setHintContentIntentLaunchesActivity(boolean);
  public android.app.Notification$WearableExtender setHintHideIcon(boolean);
  public android.app.Notification$WearableExtender setHintScreenTimeout(int);
  public android.app.Notification$WearableExtender setHintShowBackgroundOnly(boolean);
  public android.app.Notification$WearableExtender setStartScrollBottom(boolean);
  public android.app.PendingIntent getDisplayIntent();
  public android.graphics.Bitmap getBackground();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String getDismissalId();
  public java.util.List getActions();
  public java.util.List getPages();
  public static final int SCREEN_TIMEOUT_LONG;
  public static final int SCREEN_TIMEOUT_SHORT;
  public static final int SIZE_DEFAULT;
  public static final int SIZE_FULL_SCREEN;
  public static final int SIZE_LARGE;
  public static final int SIZE_MEDIUM;
  public static final int SIZE_SMALL;
  public static final int SIZE_XSMALL;
  public static final int UNSET_ACTION_INDEX;
}
public class android.app.NotificationManager
  extends java.lang.Object
{
  public final int getCurrentInterruptionFilter();
  public final void setInterruptionFilter(int);
  public boolean areNotificationsEnabled();
  public boolean isNotificationPolicyAccessGranted();
  public boolean removeAutomaticZenRule(java.lang.String);
  public boolean updateAutomaticZenRule(java.lang.String, android.app.AutomaticZenRule);
  public int getImportance();
  public void cancel(int);
  public void cancel(java.lang.String, int);
  public void cancelAll();
  public void notify(int, android.app.Notification);
  public void notify(java.lang.String, int, android.app.Notification);
  public void setNotificationPolicy(android.app.NotificationManager$Policy);
  public android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String);
  public android.app.NotificationManager$Policy getNotificationPolicy();
  public android.service.notification.StatusBarNotification[] getActiveNotifications();
  public java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule);
  public java.util.Map getAutomaticZenRules();
  public static final int IMPORTANCE_DEFAULT;
  public static final int IMPORTANCE_HIGH;
  public static final int IMPORTANCE_LOW;
  public static final int IMPORTANCE_MAX;
  public static final int IMPORTANCE_MIN;
  public static final int IMPORTANCE_NONE;
  public static final int IMPORTANCE_UNSPECIFIED;
  public static final int INTERRUPTION_FILTER_ALARMS;
  public static final int INTERRUPTION_FILTER_ALL;
  public static final int INTERRUPTION_FILTER_NONE;
  public static final int INTERRUPTION_FILTER_PRIORITY;
  public static final int INTERRUPTION_FILTER_UNKNOWN;
  public static final java.lang.String ACTION_INTERRUPTION_FILTER_CHANGED;
  public static final java.lang.String ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED;
  public static final java.lang.String ACTION_NOTIFICATION_POLICY_CHANGED;
}
public class android.app.NotificationManager$Policy
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static java.lang.String priorityCategoriesToString(int);
  public static java.lang.String prioritySendersToString(int);
  public static java.lang.String suppressedEffectsToString(int);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int PRIORITY_CATEGORY_CALLS;
  public static final int PRIORITY_CATEGORY_EVENTS;
  public static final int PRIORITY_CATEGORY_MESSAGES;
  public static final int PRIORITY_CATEGORY_REMINDERS;
  public static final int PRIORITY_CATEGORY_REPEAT_CALLERS;
  public static final int PRIORITY_SENDERS_ANY;
  public static final int PRIORITY_SENDERS_CONTACTS;
  public static final int PRIORITY_SENDERS_STARRED;
  public static final int SUPPRESSED_EFFECT_SCREEN_OFF;
  public static final int SUPPRESSED_EFFECT_SCREEN_ON;
  public static final android.os.Parcelable$Creator CREATOR;
  public final int priorityCallSenders;
  public final int priorityCategories;
  public final int priorityMessageSenders;
  public final int suppressedVisualEffects;
}
public final class android.app.PendingIntent
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static void writePendingIntentOrNullToParcel(android.app.PendingIntent, android.os.Parcel);
  public static android.app.PendingIntent getActivities(android.content.Context, int, android.content.Intent[], int);
  public static android.app.PendingIntent getActivities(android.content.Context, int, android.content.Intent[], int, android.os.Bundle);
  public static android.app.PendingIntent getActivity(android.content.Context, int, android.content.Intent, int);
  public static android.app.PendingIntent getActivity(android.content.Context, int, android.content.Intent, int, android.os.Bundle);
  public static android.app.PendingIntent getBroadcast(android.content.Context, int, android.content.Intent, int);
  public static android.app.PendingIntent getService(android.content.Context, int, android.content.Intent, int);
  public static android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getCreatorUid();
  public int hashCode();
  public void cancel();
  public void send()  throws android.app.PendingIntent$CanceledException;
  public void send(android.content.Context, int, android.content.Intent)  throws android.app.PendingIntent$CanceledException;
  public void send(android.content.Context, int, android.content.Intent, android.app.PendingIntent$OnFinished, android.os.Handler)  throws android.app.PendingIntent$CanceledException;
  public void send(android.content.Context, int, android.content.Intent, android.app.PendingIntent$OnFinished, android.os.Handler, java.lang.String)  throws android.app.PendingIntent$CanceledException;
  public void send(android.content.Context, int, android.content.Intent, android.app.PendingIntent$OnFinished, android.os.Handler, java.lang.String, android.os.Bundle)  throws android.app.PendingIntent$CanceledException;
  public void send(int)  throws android.app.PendingIntent$CanceledException;
  public void send(int, android.app.PendingIntent$OnFinished, android.os.Handler)  throws android.app.PendingIntent$CanceledException;
  public void writeToParcel(android.os.Parcel, int);
  public android.content.IntentSender getIntentSender();
  public android.os.UserHandle getCreatorUserHandle();
  public java.lang.String getCreatorPackage();
  public java.lang.String getTargetPackage();
  public java.lang.String toString();
  public static final int FLAG_CANCEL_CURRENT;
  public static final int FLAG_IMMUTABLE;
  public static final int FLAG_NO_CREATE;
  public static final int FLAG_ONE_SHOT;
  public static final int FLAG_UPDATE_CURRENT;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.PendingIntent$CanceledException
  extends android.util.AndroidException
{
  public void <init>();
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.String);
}
public interface android.app.PendingIntent$OnFinished
{
  public abstract void onSendFinished(android.app.PendingIntent, android.content.Intent, int, java.lang.String, android.os.Bundle);
}
public class android.app.Presentation
  extends android.app.Dialog
{
  public void <init>(android.content.Context, android.view.Display);
  public void <init>(android.content.Context, android.view.Display, int);
  public void onDisplayChanged();
  public void onDisplayRemoved();
  public void show();
  public android.content.res.Resources getResources();
  public android.view.Display getDisplay();
  protected void onStart();
  protected void onStop();
}
public class android.app.ProgressDialog
  extends android.app.AlertDialog
{
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence);
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, boolean);
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, boolean, boolean);
  public static android.app.ProgressDialog show(android.content.Context, java.lang.CharSequence, java.lang.CharSequence, boolean, boolean, android.content.DialogInterface$OnCancelListener);
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, int);
  public boolean isIndeterminate();
  public int getMax();
  public int getProgress();
  public int getSecondaryProgress();
  public void incrementProgressBy(int);
  public void incrementSecondaryProgressBy(int);
  public void onStart();
  public void setIndeterminate(boolean);
  public void setIndeterminateDrawable(android.graphics.drawable.Drawable);
  public void setMax(int);
  public void setMessage(java.lang.CharSequence);
  public void setProgress(int);
  public void setProgressDrawable(android.graphics.drawable.Drawable);
  public void setProgressNumberFormat(java.lang.String);
  public void setProgressPercentFormat(java.text.NumberFormat);
  public void setProgressStyle(int);
  public void setSecondaryProgress(int);
  protected void onCreate(android.os.Bundle);
  protected void onStop();
  public static final int STYLE_HORIZONTAL;
  public static final int STYLE_SPINNER;
}
public final class android.app.RemoteInput
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static void addResultsToIntent(android.app.RemoteInput[], android.content.Intent, android.os.Bundle);
  public static android.os.Bundle getResultsFromIntent(android.content.Intent);
  public boolean getAllowFreeFormInput();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getExtras();
  public java.lang.CharSequence getLabel();
  public java.lang.CharSequence[] getChoices();
  public java.lang.String getResultKey();
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String EXTRA_RESULTS_DATA;
  public static final java.lang.String RESULTS_CLIP_LABEL;
}
public final class android.app.RemoteInput$Builder
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public android.app.RemoteInput build();
  public android.app.RemoteInput$Builder addExtras(android.os.Bundle);
  public android.app.RemoteInput$Builder setAllowFreeFormInput(boolean);
  public android.app.RemoteInput$Builder setChoices(java.lang.CharSequence[]);
  public android.app.RemoteInput$Builder setLabel(java.lang.CharSequence);
  public android.os.Bundle getExtras();
}
public class android.app.SearchManager
  extends java.lang.Object
  implements android.content.DialogInterface$OnDismissListener, android.content.DialogInterface$OnCancelListener
{
  public void onCancel(android.content.DialogInterface);
  public void onDismiss(android.content.DialogInterface);
  public void setOnCancelListener(android.app.SearchManager$OnCancelListener);
  public void setOnDismissListener(android.app.SearchManager$OnDismissListener);
  public void startSearch(java.lang.String, boolean, android.content.ComponentName, android.os.Bundle, boolean);
  public void stopSearch();
  public void triggerSearch(java.lang.String, android.content.ComponentName, android.os.Bundle);
  public android.app.SearchableInfo getSearchableInfo(android.content.ComponentName);
  public android.content.ComponentName getGlobalSearchActivity();
  public java.util.List getSearchablesInGlobalSearch();
  public static final char MENU_KEY;
  public static final int FLAG_QUERY_REFINEMENT;
  public static final int MENU_KEYCODE;
  public static final java.lang.String ACTION_KEY;
  public static final java.lang.String ACTION_MSG;
  public static final java.lang.String APP_DATA;
  public static final java.lang.String CURSOR_EXTRA_KEY_IN_PROGRESS;
  public static final java.lang.String EXTRA_DATA_KEY;
  public static final java.lang.String EXTRA_NEW_SEARCH;
  public static final java.lang.String EXTRA_SELECT_QUERY;
  public static final java.lang.String EXTRA_WEB_SEARCH_PENDINGINTENT;
  public static final java.lang.String INTENT_ACTION_GLOBAL_SEARCH;
  public static final java.lang.String INTENT_ACTION_SEARCHABLES_CHANGED;
  public static final java.lang.String INTENT_ACTION_SEARCH_SETTINGS;
  public static final java.lang.String INTENT_ACTION_SEARCH_SETTINGS_CHANGED;
  public static final java.lang.String INTENT_ACTION_WEB_SEARCH_SETTINGS;
  public static final java.lang.String INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED;
  public static final java.lang.String QUERY;
  public static final java.lang.String SHORTCUT_MIME_TYPE;
  public static final java.lang.String SUGGEST_COLUMN_AUDIO_CHANNEL_CONFIG;
  public static final java.lang.String SUGGEST_COLUMN_CONTENT_TYPE;
  public static final java.lang.String SUGGEST_COLUMN_DURATION;
  public static final java.lang.String SUGGEST_COLUMN_FLAGS;
  public static final java.lang.String SUGGEST_COLUMN_FORMAT;
  public static final java.lang.String SUGGEST_COLUMN_ICON_1;
  public static final java.lang.String SUGGEST_COLUMN_ICON_2;
  public static final java.lang.String SUGGEST_COLUMN_INTENT_ACTION;
  public static final java.lang.String SUGGEST_COLUMN_INTENT_DATA;
  public static final java.lang.String SUGGEST_COLUMN_INTENT_DATA_ID;
  public static final java.lang.String SUGGEST_COLUMN_INTENT_EXTRA_DATA;
  public static final java.lang.String SUGGEST_COLUMN_IS_LIVE;
  public static final java.lang.String SUGGEST_COLUMN_LAST_ACCESS_HINT;
  public static final java.lang.String SUGGEST_COLUMN_PRODUCTION_YEAR;
  public static final java.lang.String SUGGEST_COLUMN_PURCHASE_PRICE;
  public static final java.lang.String SUGGEST_COLUMN_QUERY;
  public static final java.lang.String SUGGEST_COLUMN_RATING_SCORE;
  public static final java.lang.String SUGGEST_COLUMN_RATING_STYLE;
  public static final java.lang.String SUGGEST_COLUMN_RENTAL_PRICE;
  public static final java.lang.String SUGGEST_COLUMN_RESULT_CARD_IMAGE;
  public static final java.lang.String SUGGEST_COLUMN_SHORTCUT_ID;
  public static final java.lang.String SUGGEST_COLUMN_SPINNER_WHILE_REFRESHING;
  public static final java.lang.String SUGGEST_COLUMN_TEXT_1;
  public static final java.lang.String SUGGEST_COLUMN_TEXT_2;
  public static final java.lang.String SUGGEST_COLUMN_TEXT_2_URL;
  public static final java.lang.String SUGGEST_COLUMN_VIDEO_HEIGHT;
  public static final java.lang.String SUGGEST_COLUMN_VIDEO_WIDTH;
  public static final java.lang.String SUGGEST_MIME_TYPE;
  public static final java.lang.String SUGGEST_NEVER_MAKE_SHORTCUT;
  public static final java.lang.String SUGGEST_PARAMETER_LIMIT;
  public static final java.lang.String SUGGEST_URI_PATH_QUERY;
  public static final java.lang.String SUGGEST_URI_PATH_SHORTCUT;
  public static final java.lang.String USER_QUERY;
}
public interface android.app.SearchManager$OnCancelListener
{
  public abstract void onCancel();
}
public interface android.app.SearchManager$OnDismissListener
{
  public abstract void onDismiss();
}
public final class android.app.SearchableInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean autoUrlDetect();
  public boolean getVoiceSearchEnabled();
  public boolean getVoiceSearchLaunchRecognizer();
  public boolean getVoiceSearchLaunchWebSearch();
  public boolean queryAfterZeroResults();
  public boolean shouldIncludeInGlobalSearch();
  public boolean shouldRewriteQueryFromData();
  public boolean shouldRewriteQueryFromText();
  public int describeContents();
  public int getHintId();
  public int getImeOptions();
  public int getInputType();
  public int getSettingsDescriptionId();
  public int getSuggestThreshold();
  public int getVoiceLanguageId();
  public int getVoiceLanguageModeId();
  public int getVoiceMaxResults();
  public int getVoicePromptTextId();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getSearchActivity();
  public java.lang.String getSuggestAuthority();
  public java.lang.String getSuggestIntentAction();
  public java.lang.String getSuggestIntentData();
  public java.lang.String getSuggestPackage();
  public java.lang.String getSuggestPath();
  public java.lang.String getSuggestSelection();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.app.Service
  extends android.content.ContextWrapper
  implements android.content.ComponentCallbacks2
{
  public void <init>();
  public final boolean stopSelfResult(int);
  public final void startForeground(int, android.app.Notification);
  public final void stopForeground(boolean);
  public final void stopForeground(int);
  public final void stopSelf();
  public final void stopSelf(int);
  public final android.app.Application getApplication();
  public abstract android.os.IBinder onBind(android.content.Intent);
  public boolean onUnbind(android.content.Intent);
  public int onStartCommand(android.content.Intent, int, int);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onCreate();
  public void onDestroy();
  public void onLowMemory();
  public void onRebind(android.content.Intent);
  public void onStart(android.content.Intent, int);
  public void onTaskRemoved(android.content.Intent);
  public void onTrimMemory(int);
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public static final int START_CONTINUATION_MASK;
  public static final int START_FLAG_REDELIVERY;
  public static final int START_FLAG_RETRY;
  public static final int START_NOT_STICKY;
  public static final int START_REDELIVER_INTENT;
  public static final int START_STICKY;
  public static final int START_STICKY_COMPATIBILITY;
  public static final int STOP_FOREGROUND_DETACH;
  public static final int STOP_FOREGROUND_REMOVE;
}
public abstract class android.app.SharedElementCallback
  extends java.lang.Object
{
  public void <init>();
  public void onMapSharedElements(java.util.List, java.util.Map);
  public void onRejectSharedElements(java.util.List);
  public void onSharedElementEnd(java.util.List, java.util.List, java.util.List);
  public void onSharedElementStart(java.util.List, java.util.List, java.util.List);
  public void onSharedElementsArrived(java.util.List, java.util.List, android.app.SharedElementCallback$OnSharedElementsReadyListener);
  public android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF);
  public android.view.View onCreateSnapshotView(android.content.Context, android.os.Parcelable);
}
public interface android.app.SharedElementCallback$OnSharedElementsReadyListener
{
  public abstract void onSharedElementsReady();
}
public class android.app.TabActivity
  extends android.app.ActivityGroup
{
  public void <init>();
  public void onContentChanged();
  public void setDefaultTab(int);
  public void setDefaultTab(java.lang.String);
  public android.widget.TabHost getTabHost();
  public android.widget.TabWidget getTabWidget();
  protected void onChildTitleChanged(android.app.Activity, java.lang.CharSequence);
  protected void onPostCreate(android.os.Bundle);
  protected void onRestoreInstanceState(android.os.Bundle);
  protected void onSaveInstanceState(android.os.Bundle);
}
public class android.app.TaskStackBuilder
  extends java.lang.Object
{
  public static android.app.TaskStackBuilder create(android.content.Context);
  public int getIntentCount();
  public void startActivities();
  public void startActivities(android.os.Bundle);
  public android.app.PendingIntent getPendingIntent(int, int);
  public android.app.PendingIntent getPendingIntent(int, int, android.os.Bundle);
  public android.app.TaskStackBuilder addNextIntent(android.content.Intent);
  public android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent);
  public android.app.TaskStackBuilder addParentStack(android.app.Activity);
  public android.app.TaskStackBuilder addParentStack(android.content.ComponentName);
  public android.app.TaskStackBuilder addParentStack(java.lang.Class);
  public android.content.Intent editIntentAt(int);
  public android.content.Intent[] getIntents();
}
public class android.app.TimePickerDialog
  extends android.app.AlertDialog
  implements android.content.DialogInterface$OnClickListener, android.widget.TimePicker$OnTimeChangedListener
{
  public void <init>(android.content.Context, android.app.TimePickerDialog$OnTimeSetListener, int, int, boolean);
  public void <init>(android.content.Context, int, android.app.TimePickerDialog$OnTimeSetListener, int, int, boolean);
  public void onClick(android.content.DialogInterface, int);
  public void onRestoreInstanceState(android.os.Bundle);
  public void onTimeChanged(android.widget.TimePicker, int, int);
  public void updateTime(int, int);
  public android.os.Bundle onSaveInstanceState();
}
public interface android.app.TimePickerDialog$OnTimeSetListener
{
  public abstract void onTimeSet(android.widget.TimePicker, int, int);
}
public final class android.app.UiAutomation
  extends java.lang.Object
{
  public final boolean performGlobalAction(int);
  public final void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo);
  public final android.accessibilityservice.AccessibilityServiceInfo getServiceInfo();
  public boolean clearWindowContentFrameStats(int);
  public boolean injectInputEvent(android.view.InputEvent, boolean);
  public boolean setRotation(int);
  public void clearWindowAnimationFrameStats();
  public void setOnAccessibilityEventListener(android.app.UiAutomation$OnAccessibilityEventListener);
  public void setRunAsMonkey(boolean);
  public void waitForIdle(long, long)  throws java.util.concurrent.TimeoutException;
  public android.graphics.Bitmap takeScreenshot();
  public android.os.ParcelFileDescriptor executeShellCommand(java.lang.String);
  public android.view.WindowAnimationFrameStats getWindowAnimationFrameStats();
  public android.view.WindowContentFrameStats getWindowContentFrameStats(int);
  public android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(java.lang.Runnable, android.app.UiAutomation$AccessibilityEventFilter, long)  throws java.util.concurrent.TimeoutException;
  public android.view.accessibility.AccessibilityNodeInfo findFocus(int);
  public android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow();
  public java.util.List getWindows();
  public static final int FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES;
  public static final int ROTATION_FREEZE_0;
  public static final int ROTATION_FREEZE_180;
  public static final int ROTATION_FREEZE_270;
  public static final int ROTATION_FREEZE_90;
  public static final int ROTATION_FREEZE_CURRENT;
  public static final int ROTATION_UNFREEZE;
}
public interface android.app.UiAutomation$AccessibilityEventFilter
{
  public abstract boolean accept(android.view.accessibility.AccessibilityEvent);
}
public interface android.app.UiAutomation$OnAccessibilityEventListener
{
  public abstract void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
}
public class android.app.UiModeManager
  extends java.lang.Object
{
  public int getCurrentModeType();
  public int getNightMode();
  public void disableCarMode(int);
  public void enableCarMode(int);
  public void setNightMode(int);
  public static final int DISABLE_CAR_MODE_GO_HOME;
  public static final int ENABLE_CAR_MODE_ALLOW_SLEEP;
  public static final int ENABLE_CAR_MODE_GO_CAR_HOME;
  public static final int MODE_NIGHT_AUTO;
  public static final int MODE_NIGHT_NO;
  public static final int MODE_NIGHT_YES;
  public static java.lang.String ACTION_ENTER_CAR_MODE;
  public static java.lang.String ACTION_ENTER_DESK_MODE;
  public static java.lang.String ACTION_EXIT_CAR_MODE;
  public static java.lang.String ACTION_EXIT_DESK_MODE;
}
public final class android.app.VoiceInteractor
  extends java.lang.Object
{
  public boolean submitRequest(android.app.VoiceInteractor$Request);
  public boolean submitRequest(android.app.VoiceInteractor$Request, java.lang.String);
  public android.app.VoiceInteractor$Request getActiveRequest(java.lang.String);
  public android.app.VoiceInteractor$Request[] getActiveRequests();
  public boolean[] supportsCommands(java.lang.String[]);
}
public class android.app.VoiceInteractor$AbortVoiceRequest
  extends android.app.VoiceInteractor$Request
{
  public void <init>(android.app.VoiceInteractor$Prompt, android.os.Bundle);
  public void onAbortResult(android.os.Bundle);
}
public class android.app.VoiceInteractor$CommandRequest
  extends android.app.VoiceInteractor$Request
{
  public void <init>(java.lang.String, android.os.Bundle);
  public void onCommandResult(boolean, android.os.Bundle);
}
public class android.app.VoiceInteractor$CompleteVoiceRequest
  extends android.app.VoiceInteractor$Request
{
  public void <init>(android.app.VoiceInteractor$Prompt, android.os.Bundle);
  public void onCompleteResult(android.os.Bundle);
}
public class android.app.VoiceInteractor$ConfirmationRequest
  extends android.app.VoiceInteractor$Request
{
  public void <init>(android.app.VoiceInteractor$Prompt, android.os.Bundle);
  public void onConfirmationResult(boolean, android.os.Bundle);
}
public class android.app.VoiceInteractor$PickOptionRequest
  extends android.app.VoiceInteractor$Request
{
  public void <init>(android.app.VoiceInteractor$Prompt, android.app.VoiceInteractor$PickOptionRequest$Option[], android.os.Bundle);
  public void onPickOptionResult(boolean, android.app.VoiceInteractor$PickOptionRequest$Option[], android.os.Bundle);
}
public final class android.app.VoiceInteractor$PickOptionRequest$Option
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.CharSequence, int);
  public int countSynonyms();
  public int describeContents();
  public int getIndex();
  public void setExtras(android.os.Bundle);
  public void writeToParcel(android.os.Parcel, int);
  public android.app.VoiceInteractor$PickOptionRequest$Option addSynonym(java.lang.CharSequence);
  public android.os.Bundle getExtras();
  public java.lang.CharSequence getLabel();
  public java.lang.CharSequence getSynonymAt(int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.VoiceInteractor$Prompt
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.CharSequence);
  public void <init>(java.lang.CharSequence[], java.lang.CharSequence);
  public int countVoicePrompts();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getVisualPrompt();
  public java.lang.CharSequence getVoicePromptAt(int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.app.VoiceInteractor$Request
  extends java.lang.Object
{
  public void cancel();
  public void onAttached(android.app.Activity);
  public void onCancel();
  public void onDetached();
  public android.app.Activity getActivity();
  public android.content.Context getContext();
  public java.lang.String getName();
  public java.lang.String toString();
}
public final class android.app.WallpaperInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.content.Context, android.content.pm.ResolveInfo)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getComponent();
  public android.content.pm.ServiceInfo getServiceInfo();
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadThumbnail(android.content.pm.PackageManager);
  public java.lang.CharSequence loadAuthor(android.content.pm.PackageManager)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public java.lang.String getPackageName();
  public java.lang.String getServiceName();
  public java.lang.String getSettingsActivity();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.WallpaperManager
  extends java.lang.Object
{
  public static android.app.WallpaperManager getInstance(android.content.Context);
  public boolean hasResourceWallpaper(int);
  public boolean isSetWallpaperAllowed();
  public boolean isWallpaperSupported();
  public int getDesiredMinimumHeight();
  public int getDesiredMinimumWidth();
  public int getWallpaperId(int);
  public int setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean)  throws java.io.IOException;
  public int setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean, int)  throws java.io.IOException;
  public int setResource(int, int)  throws java.io.IOException;
  public int setStream(java.io.InputStream, android.graphics.Rect, boolean)  throws java.io.IOException;
  public int setStream(java.io.InputStream, android.graphics.Rect, boolean, int)  throws java.io.IOException;
  public void clear()  throws java.io.IOException;
  public void clear(int)  throws java.io.IOException;
  public void clearWallpaperOffsets(android.os.IBinder);
  public void forgetLoadedWallpaper();
  public void sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle);
  public void setBitmap(android.graphics.Bitmap)  throws java.io.IOException;
  public void setResource(int)  throws java.io.IOException;
  public void setStream(java.io.InputStream)  throws java.io.IOException;
  public void setWallpaperOffsetSteps(float, float);
  public void setWallpaperOffsets(android.os.IBinder, float, float);
  public void suggestDesiredDimensions(int, int);
  public android.app.WallpaperInfo getWallpaperInfo();
  public android.content.Intent getCropAndSetWallpaperIntent(android.net.Uri);
  public android.graphics.drawable.Drawable getBuiltInDrawable();
  public android.graphics.drawable.Drawable getBuiltInDrawable(int);
  public android.graphics.drawable.Drawable getBuiltInDrawable(int, int, boolean, float, float);
  public android.graphics.drawable.Drawable getBuiltInDrawable(int, int, boolean, float, float, int);
  public android.graphics.drawable.Drawable getDrawable();
  public android.graphics.drawable.Drawable getFastDrawable();
  public android.graphics.drawable.Drawable peekDrawable();
  public android.graphics.drawable.Drawable peekFastDrawable();
  public android.os.ParcelFileDescriptor getWallpaperFile(int);
  public static final int FLAG_LOCK;
  public static final int FLAG_SYSTEM;
  public static final java.lang.String ACTION_CHANGE_LIVE_WALLPAPER;
  public static final java.lang.String ACTION_CROP_AND_SET_WALLPAPER;
  public static final java.lang.String ACTION_LIVE_WALLPAPER_CHOOSER;
  public static final java.lang.String COMMAND_DROP;
  public static final java.lang.String COMMAND_SECONDARY_TAP;
  public static final java.lang.String COMMAND_TAP;
  public static final java.lang.String EXTRA_LIVE_WALLPAPER_COMPONENT;
  public static final java.lang.String WALLPAPER_PREVIEW_META_DATA;
}
public final class android.app.admin.DeviceAdminInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.content.Context, android.content.pm.ResolveInfo)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public boolean isVisible();
  public boolean usesPolicy(int);
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getComponent();
  public android.content.pm.ActivityInfo getActivityInfo();
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public java.lang.String getPackageName();
  public java.lang.String getReceiverName();
  public java.lang.String getTagForPolicy(int);
  public java.lang.String toString();
  public static final int USES_ENCRYPTED_STORAGE;
  public static final int USES_POLICY_DISABLE_CAMERA;
  public static final int USES_POLICY_DISABLE_KEYGUARD_FEATURES;
  public static final int USES_POLICY_EXPIRE_PASSWORD;
  public static final int USES_POLICY_FORCE_LOCK;
  public static final int USES_POLICY_LIMIT_PASSWORD;
  public static final int USES_POLICY_RESET_PASSWORD;
  public static final int USES_POLICY_WATCH_LOGIN;
  public static final int USES_POLICY_WIPE_DATA;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.admin.DeviceAdminReceiver
  extends android.content.BroadcastReceiver
{
  public void <init>();
  public void onBugreportFailed(android.content.Context, android.content.Intent, int);
  public void onBugreportShared(android.content.Context, android.content.Intent, java.lang.String);
  public void onBugreportSharingDeclined(android.content.Context, android.content.Intent);
  public void onDisabled(android.content.Context, android.content.Intent);
  public void onEnabled(android.content.Context, android.content.Intent);
  public void onLockTaskModeEntering(android.content.Context, android.content.Intent, java.lang.String);
  public void onLockTaskModeExiting(android.content.Context, android.content.Intent);
  public void onPasswordChanged(android.content.Context, android.content.Intent);
  public void onPasswordExpiring(android.content.Context, android.content.Intent);
  public void onPasswordFailed(android.content.Context, android.content.Intent);
  public void onPasswordSucceeded(android.content.Context, android.content.Intent);
  public void onProfileProvisioningComplete(android.content.Context, android.content.Intent);
  public void onReadyForUserInitialization(android.content.Context, android.content.Intent);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onSecurityLogsAvailable(android.content.Context, android.content.Intent);
  public void onSystemUpdatePending(android.content.Context, android.content.Intent, long);
  public android.app.admin.DevicePolicyManager getManager(android.content.Context);
  public android.content.ComponentName getWho(android.content.Context);
  public java.lang.CharSequence onDisableRequested(android.content.Context, android.content.Intent);
  public java.lang.String onChoosePrivateKeyAlias(android.content.Context, android.content.Intent, int, android.net.Uri, java.lang.String);
  public static final int BUGREPORT_FAILURE_FAILED_COMPLETING;
  public static final int BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE;
  public static final java.lang.String ACTION_DEVICE_ADMIN_DISABLED;
  public static final java.lang.String ACTION_DEVICE_ADMIN_DISABLE_REQUESTED;
  public static final java.lang.String ACTION_DEVICE_ADMIN_ENABLED;
  public static final java.lang.String ACTION_LOCK_TASK_ENTERING;
  public static final java.lang.String ACTION_LOCK_TASK_EXITING;
  public static final java.lang.String ACTION_PASSWORD_CHANGED;
  public static final java.lang.String ACTION_PASSWORD_EXPIRING;
  public static final java.lang.String ACTION_PASSWORD_FAILED;
  public static final java.lang.String ACTION_PASSWORD_SUCCEEDED;
  public static final java.lang.String ACTION_PROFILE_PROVISIONING_COMPLETE;
  public static final java.lang.String DEVICE_ADMIN_META_DATA;
  public static final java.lang.String EXTRA_DISABLE_WARNING;
  public static final java.lang.String EXTRA_LOCK_TASK_PACKAGE;
}
public class android.app.admin.DevicePolicyManager
  extends java.lang.Object
{
  public boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String);
  public boolean getAutoTimeRequired();
  public boolean getBluetoothContactSharingDisabled(android.content.ComponentName);
  public boolean getCameraDisabled(android.content.ComponentName);
  public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName);
  public boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName);
  public boolean getScreenCaptureDisabled(android.content.ComponentName);
  public boolean getStorageEncryption(android.content.ComponentName);
  public boolean hasCaCertInstalled(android.content.ComponentName, byte[]);
  public boolean hasGrantedPolicy(android.content.ComponentName, int);
  public boolean installCaCert(android.content.ComponentName, byte[]);
  public boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String);
  public boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate[], java.lang.String, boolean);
  public boolean isActivePasswordSufficient();
  public boolean isAdminActive(android.content.ComponentName);
  public boolean isApplicationHidden(android.content.ComponentName, java.lang.String);
  public boolean isCallerApplicationRestrictionsManagingPackage();
  public boolean isDeviceOwnerApp(java.lang.String);
  public boolean isLockTaskPermitted(java.lang.String);
  public boolean isManagedProfile(android.content.ComponentName);
  public boolean isMasterVolumeMuted(android.content.ComponentName);
  public boolean isPackageSuspended(android.content.ComponentName, java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public boolean isProfileOwnerApp(java.lang.String);
  public boolean isProvisioningAllowed(java.lang.String);
  public boolean isSecurityLoggingEnabled(android.content.ComponentName);
  public boolean isUninstallBlocked(android.content.ComponentName, java.lang.String);
  public boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String);
  public boolean removeKeyPair(android.content.ComponentName, java.lang.String);
  public boolean removeUser(android.content.ComponentName, android.os.UserHandle);
  public boolean requestBugreport(android.content.ComponentName);
  public boolean resetPassword(java.lang.String, int);
  public boolean setApplicationHidden(android.content.ComponentName, java.lang.String, boolean);
  public boolean setKeyguardDisabled(android.content.ComponentName, boolean);
  public boolean setPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, int);
  public boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List);
  public boolean setPermittedInputMethods(android.content.ComponentName, java.util.List);
  public boolean setStatusBarDisabled(android.content.ComponentName, boolean);
  public boolean switchUser(android.content.ComponentName, android.os.UserHandle);
  public int enableSystemApp(android.content.ComponentName, android.content.Intent);
  public int getCurrentFailedPasswordAttempts();
  public int getKeyguardDisabledFeatures(android.content.ComponentName);
  public int getMaximumFailedPasswordsForWipe(android.content.ComponentName);
  public int getOrganizationColor(android.content.ComponentName);
  public int getPasswordHistoryLength(android.content.ComponentName);
  public int getPasswordMaximumLength(int);
  public int getPasswordMinimumLength(android.content.ComponentName);
  public int getPasswordMinimumLetters(android.content.ComponentName);
  public int getPasswordMinimumLowerCase(android.content.ComponentName);
  public int getPasswordMinimumNonLetter(android.content.ComponentName);
  public int getPasswordMinimumNumeric(android.content.ComponentName);
  public int getPasswordMinimumSymbols(android.content.ComponentName);
  public int getPasswordMinimumUpperCase(android.content.ComponentName);
  public int getPasswordQuality(android.content.ComponentName);
  public int getPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String);
  public int getPermissionPolicy(android.content.ComponentName);
  public int getStorageEncryptionStatus();
  public int setStorageEncryption(android.content.ComponentName, boolean);
  public long getMaximumTimeToLock(android.content.ComponentName);
  public long getPasswordExpiration(android.content.ComponentName);
  public long getPasswordExpirationTimeout(android.content.ComponentName);
  public void addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int);
  public void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName);
  public void addUserRestriction(android.content.ComponentName, java.lang.String);
  public void clearCrossProfileIntentFilters(android.content.ComponentName);
  public void clearDeviceOwnerApp(java.lang.String);
  public void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String);
  public void clearProfileOwner(android.content.ComponentName);
  public void clearUserRestriction(android.content.ComponentName, java.lang.String);
  public void enableSystemApp(android.content.ComponentName, java.lang.String);
  public void lockNow();
  public void reboot(android.content.ComponentName);
  public void removeActiveAdmin(android.content.ComponentName);
  public void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean);
  public void setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean)  throws android.content.pm.PackageManager$NameNotFoundException, java.lang.UnsupportedOperationException;
  public void setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public void setApplicationRestrictionsManagingPackage(android.content.ComponentName, java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public void setAutoTimeRequired(android.content.ComponentName, boolean);
  public void setBluetoothContactSharingDisabled(android.content.ComponentName, boolean);
  public void setCameraDisabled(android.content.ComponentName, boolean);
  public void setCertInstallerPackage(android.content.ComponentName, java.lang.String)  throws java.lang.SecurityException;
  public void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean);
  public void setCrossProfileContactsSearchDisabled(android.content.ComponentName, boolean);
  public void setDeviceOwnerLockScreenInfo(android.content.ComponentName, java.lang.CharSequence);
  public void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String);
  public void setKeyguardDisabledFeatures(android.content.ComponentName, int);
  public void setLockTaskPackages(android.content.ComponentName, java.lang.String[])  throws java.lang.SecurityException;
  public void setLongSupportMessage(android.content.ComponentName, java.lang.CharSequence);
  public void setMasterVolumeMuted(android.content.ComponentName, boolean);
  public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int);
  public void setMaximumTimeToLock(android.content.ComponentName, long);
  public void setOrganizationColor(android.content.ComponentName, int);
  public void setOrganizationName(android.content.ComponentName, java.lang.CharSequence);
  public void setPasswordExpirationTimeout(android.content.ComponentName, long);
  public void setPasswordHistoryLength(android.content.ComponentName, int);
  public void setPasswordMinimumLength(android.content.ComponentName, int);
  public void setPasswordMinimumLetters(android.content.ComponentName, int);
  public void setPasswordMinimumLowerCase(android.content.ComponentName, int);
  public void setPasswordMinimumNonLetter(android.content.ComponentName, int);
  public void setPasswordMinimumNumeric(android.content.ComponentName, int);
  public void setPasswordMinimumSymbols(android.content.ComponentName, int);
  public void setPasswordMinimumUpperCase(android.content.ComponentName, int);
  public void setPasswordQuality(android.content.ComponentName, int);
  public void setPermissionPolicy(android.content.ComponentName, int);
  public void setProfileEnabled(android.content.ComponentName);
  public void setProfileName(android.content.ComponentName, java.lang.String);
  public void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo);
  public void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName);
  public void setScreenCaptureDisabled(android.content.ComponentName, boolean);
  public void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String);
  public void setSecurityLoggingEnabled(android.content.ComponentName, boolean);
  public void setShortSupportMessage(android.content.ComponentName, java.lang.CharSequence);
  public void setSystemUpdatePolicy(android.content.ComponentName, android.app.admin.SystemUpdatePolicy);
  public void setTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle);
  public void setUninstallBlocked(android.content.ComponentName, java.lang.String, boolean);
  public void setUserIcon(android.content.ComponentName, android.graphics.Bitmap);
  public void uninstallAllUserCaCerts(android.content.ComponentName);
  public void uninstallCaCert(android.content.ComponentName, byte[]);
  public void wipeData(int);
  public android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName);
  public android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy();
  public android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String);
  public android.os.Bundle getUserRestrictions(android.content.ComponentName);
  public android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int);
  public java.lang.CharSequence getDeviceOwnerLockScreenInfo();
  public java.lang.CharSequence getLongSupportMessage(android.content.ComponentName);
  public java.lang.CharSequence getOrganizationName(android.content.ComponentName);
  public java.lang.CharSequence getShortSupportMessage(android.content.ComponentName);
  public java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName);
  public java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName);
  public java.lang.String getCertInstallerPackage(android.content.ComponentName)  throws java.lang.SecurityException;
  public java.lang.String getWifiMacAddress(android.content.ComponentName);
  public java.lang.String[] getAccountTypesWithManagementDisabled();
  public java.lang.String[] setPackagesSuspended(android.content.ComponentName, java.lang.String[], boolean);
  public java.util.List getActiveAdmins();
  public java.util.List getCrossProfileWidgetProviders(android.content.ComponentName);
  public java.util.List getInstalledCaCerts(android.content.ComponentName);
  public java.util.List getPermittedAccessibilityServices(android.content.ComponentName);
  public java.util.List getPermittedInputMethods(android.content.ComponentName);
  public java.util.List getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName);
  public java.util.List retrievePreRebootSecurityLogs(android.content.ComponentName);
  public java.util.List retrieveSecurityLogs(android.content.ComponentName);
  public static final int ENCRYPTION_STATUS_ACTIVATING;
  public static final int ENCRYPTION_STATUS_ACTIVE;
  public static final int ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY;
  public static final int ENCRYPTION_STATUS_ACTIVE_PER_USER;
  public static final int ENCRYPTION_STATUS_INACTIVE;
  public static final int ENCRYPTION_STATUS_UNSUPPORTED;
  public static final int FLAG_MANAGED_CAN_ACCESS_PARENT;
  public static final int FLAG_PARENT_CAN_ACCESS_MANAGED;
  public static final int KEYGUARD_DISABLE_FEATURES_ALL;
  public static final int KEYGUARD_DISABLE_FEATURES_NONE;
  public static final int KEYGUARD_DISABLE_FINGERPRINT;
  public static final int KEYGUARD_DISABLE_REMOTE_INPUT;
  public static final int KEYGUARD_DISABLE_SECURE_CAMERA;
  public static final int KEYGUARD_DISABLE_SECURE_NOTIFICATIONS;
  public static final int KEYGUARD_DISABLE_TRUST_AGENTS;
  public static final int KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS;
  public static final int KEYGUARD_DISABLE_WIDGETS_ALL;
  public static final int PASSWORD_QUALITY_ALPHABETIC;
  public static final int PASSWORD_QUALITY_ALPHANUMERIC;
  public static final int PASSWORD_QUALITY_BIOMETRIC_WEAK;
  public static final int PASSWORD_QUALITY_COMPLEX;
  public static final int PASSWORD_QUALITY_NUMERIC;
  public static final int PASSWORD_QUALITY_NUMERIC_COMPLEX;
  public static final int PASSWORD_QUALITY_SOMETHING;
  public static final int PASSWORD_QUALITY_UNSPECIFIED;
  public static final int PERMISSION_GRANT_STATE_DEFAULT;
  public static final int PERMISSION_GRANT_STATE_DENIED;
  public static final int PERMISSION_GRANT_STATE_GRANTED;
  public static final int PERMISSION_POLICY_AUTO_DENY;
  public static final int PERMISSION_POLICY_AUTO_GRANT;
  public static final int PERMISSION_POLICY_PROMPT;
  public static final int RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT;
  public static final int RESET_PASSWORD_REQUIRE_ENTRY;
  public static final int SKIP_SETUP_WIZARD;
  public static final int WIPE_EXTERNAL_STORAGE;
  public static final int WIPE_RESET_PROTECTION_DATA;
  public static final java.lang.String ACTION_ADD_DEVICE_ADMIN;
  public static final java.lang.String ACTION_DEVICE_OWNER_CHANGED;
  public static final java.lang.String ACTION_MANAGED_PROFILE_PROVISIONED;
  public static final java.lang.String ACTION_PROVISION_MANAGED_DEVICE;
  public static final java.lang.String ACTION_PROVISION_MANAGED_PROFILE;
  public static final java.lang.String ACTION_SET_NEW_PARENT_PROFILE_PASSWORD;
  public static final java.lang.String ACTION_SET_NEW_PASSWORD;
  public static final java.lang.String ACTION_START_ENCRYPTION;
  public static final java.lang.String ACTION_SYSTEM_UPDATE_POLICY_CHANGED;
  public static final java.lang.String EXTRA_ADD_EXPLANATION;
  public static final java.lang.String EXTRA_DEVICE_ADMIN;
  public static final java.lang.String EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE;
  public static final java.lang.String EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME;
  public static final java.lang.String EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM;
  public static final java.lang.String EXTRA_PROVISIONING_EMAIL_ADDRESS;
  public static final java.lang.String EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED;
  public static final java.lang.String EXTRA_PROVISIONING_LOCALE;
  public static final java.lang.String EXTRA_PROVISIONING_LOCAL_TIME;
  public static final java.lang.String EXTRA_PROVISIONING_LOGO_URI;
  public static final java.lang.String EXTRA_PROVISIONING_MAIN_COLOR;
  public static final java.lang.String EXTRA_PROVISIONING_SKIP_ENCRYPTION;
  public static final java.lang.String EXTRA_PROVISIONING_TIME_ZONE;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_HIDDEN;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_PAC_URL;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_PASSWORD;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_BYPASS;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_HOST;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_PROXY_PORT;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_SECURITY_TYPE;
  public static final java.lang.String EXTRA_PROVISIONING_WIFI_SSID;
  public static final java.lang.String MIME_TYPE_PROVISIONING_NFC;
}
public class android.app.admin.SecurityLog
  extends java.lang.Object
{
  public void <init>();
  public static final int TAG_ADB_SHELL_CMD;
  public static final int TAG_ADB_SHELL_INTERACTIVE;
  public static final int TAG_APP_PROCESS_START;
  public static final int TAG_KEYGUARD_DISMISSED;
  public static final int TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT;
  public static final int TAG_KEYGUARD_SECURED;
  public static final int TAG_SYNC_RECV_FILE;
  public static final int TAG_SYNC_SEND_FILE;
}
public final class android.app.admin.SecurityLog$SecurityEvent
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getTag();
  public long getTimeNanos();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.Object getData();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.admin.SystemUpdatePolicy
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.app.admin.SystemUpdatePolicy createAutomaticInstallPolicy();
  public static android.app.admin.SystemUpdatePolicy createPostponeInstallPolicy();
  public static android.app.admin.SystemUpdatePolicy createWindowedInstallPolicy(int, int);
  public int describeContents();
  public int getInstallWindowEnd();
  public int getInstallWindowStart();
  public int getPolicyType();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int TYPE_INSTALL_AUTOMATIC;
  public static final int TYPE_INSTALL_WINDOWED;
  public static final int TYPE_POSTPONE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.assist.AssistContent
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public boolean isAppProvidedIntent();
  public boolean isAppProvidedWebUri();
  public int describeContents();
  public void setClipData(android.content.ClipData);
  public void setIntent(android.content.Intent);
  public void setStructuredData(java.lang.String);
  public void setWebUri(android.net.Uri);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ClipData getClipData();
  public android.content.Intent getIntent();
  public android.net.Uri getWebUri();
  public android.os.Bundle getExtras();
  public java.lang.String getStructuredData();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.assist.AssistStructure
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public int getWindowNodeCount();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.assist.AssistStructure$WindowNode getWindowNodeAt(int);
  public android.content.ComponentName getActivityComponent();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.assist.AssistStructure$ViewNode
  extends java.lang.Object
{
  public boolean isAccessibilityFocused();
  public boolean isActivated();
  public boolean isAssistBlocked();
  public boolean isCheckable();
  public boolean isChecked();
  public boolean isClickable();
  public boolean isContextClickable();
  public boolean isEnabled();
  public boolean isFocusable();
  public boolean isFocused();
  public boolean isLongClickable();
  public boolean isSelected();
  public float getAlpha();
  public float getElevation();
  public float getTextSize();
  public int getChildCount();
  public int getHeight();
  public int getId();
  public int getLeft();
  public int getScrollX();
  public int getScrollY();
  public int getTextBackgroundColor();
  public int getTextColor();
  public int getTextSelectionEnd();
  public int getTextSelectionStart();
  public int getTextStyle();
  public int getTop();
  public int getVisibility();
  public int getWidth();
  public android.app.assist.AssistStructure$ViewNode getChildAt(int);
  public android.graphics.Matrix getTransformation();
  public android.os.Bundle getExtras();
  public int[] getTextLineBaselines();
  public int[] getTextLineCharOffsets();
  public java.lang.CharSequence getContentDescription();
  public java.lang.CharSequence getText();
  public java.lang.String getClassName();
  public java.lang.String getHint();
  public java.lang.String getIdEntry();
  public java.lang.String getIdPackage();
  public java.lang.String getIdType();
  public static final int TEXT_COLOR_UNDEFINED;
  public static final int TEXT_STYLE_BOLD;
  public static final int TEXT_STYLE_ITALIC;
  public static final int TEXT_STYLE_STRIKE_THRU;
  public static final int TEXT_STYLE_UNDERLINE;
}
public class android.app.assist.AssistStructure$WindowNode
  extends java.lang.Object
{
  public int getDisplayId();
  public int getHeight();
  public int getLeft();
  public int getTop();
  public int getWidth();
  public android.app.assist.AssistStructure$ViewNode getRootViewNode();
  public java.lang.CharSequence getTitle();
}
public abstract class android.app.backup.BackupAgent
  extends android.content.ContextWrapper
{
  public void <init>();
  public final void fullBackupFile(java.io.File, android.app.backup.FullBackupDataOutput);
  public abstract void onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)  throws java.io.IOException;
  public abstract void onRestore(android.app.backup.BackupDataInput, int, android.os.ParcelFileDescriptor)  throws java.io.IOException;
  public void onCreate();
  public void onDestroy();
  public void onFullBackup(android.app.backup.FullBackupDataOutput)  throws java.io.IOException;
  public void onQuotaExceeded(long, long);
  public void onRestoreFile(android.os.ParcelFileDescriptor, long, java.io.File, int, long, long)  throws java.io.IOException;
  public void onRestoreFinished();
  public static final int TYPE_DIRECTORY;
  public static final int TYPE_FILE;
}
public class android.app.backup.BackupAgentHelper
  extends android.app.backup.BackupAgent
{
  public void <init>();
  public void addHelper(java.lang.String, android.app.backup.BackupHelper);
  public void onBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor)  throws java.io.IOException;
  public void onRestore(android.app.backup.BackupDataInput, int, android.os.ParcelFileDescriptor)  throws java.io.IOException;
}
public class android.app.backup.BackupDataInput
  extends java.lang.Object
{
  public boolean readNextHeader()  throws java.io.IOException;
  public int getDataSize();
  public int readEntityData(byte[], int, int)  throws java.io.IOException;
  public void skipEntityData()  throws java.io.IOException;
  public java.lang.String getKey();
}
public class android.app.backup.BackupDataInputStream
  extends java.io.InputStream
{
  public int read()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public int size();
  public java.lang.String getKey();
}
public class android.app.backup.BackupDataOutput
  extends java.lang.Object
{
  public int writeEntityData(byte[], int)  throws java.io.IOException;
  public int writeEntityHeader(java.lang.String, int)  throws java.io.IOException;
}
public interface android.app.backup.BackupHelper
{
  public abstract void performBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor);
  public abstract void restoreEntity(android.app.backup.BackupDataInputStream);
  public abstract void writeNewStateDescription(android.os.ParcelFileDescriptor);
}
public class android.app.backup.BackupManager
  extends java.lang.Object
{
  public static void dataChanged(java.lang.String);
  public void <init>(android.content.Context);
  public int requestRestore(android.app.backup.RestoreObserver);
  public void dataChanged();
}
public class android.app.backup.FileBackupHelper
  extends android.app.backup.FileBackupHelperBase
  implements android.app.backup.BackupHelper
{
  public void <init>(android.content.Context, java.lang.String[]);
  public void performBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor);
  public void restoreEntity(android.app.backup.BackupDataInputStream);
  public void writeNewStateDescription(android.os.ParcelFileDescriptor);
}
public class android.app.backup.FullBackupDataOutput
  extends java.lang.Object
{
}
public abstract class android.app.backup.RestoreObserver
  extends java.lang.Object
{
  public void <init>();
  public void onUpdate(int, java.lang.String);
  public void restoreFinished(int);
  public void restoreStarting(int);
}
public class android.app.backup.SharedPreferencesBackupHelper
  extends android.app.backup.FileBackupHelperBase
  implements android.app.backup.BackupHelper
{
  public void <init>(android.content.Context, java.lang.String[]);
  public void performBackup(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor);
  public void restoreEntity(android.app.backup.BackupDataInputStream);
  public void writeNewStateDescription(android.os.ParcelFileDescriptor);
}
public class android.app.job.JobInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static final long getMinFlexMillis();
  public static final long getMinPeriodMillis();
  public boolean isPeriodic();
  public boolean isPersisted();
  public boolean isRequireCharging();
  public boolean isRequireDeviceIdle();
  public int describeContents();
  public int getBackoffPolicy();
  public int getId();
  public int getNetworkType();
  public long getFlexMillis();
  public long getInitialBackoffMillis();
  public long getIntervalMillis();
  public long getMaxExecutionDelayMillis();
  public long getMinLatencyMillis();
  public long getTriggerContentMaxDelay();
  public long getTriggerContentUpdateDelay();
  public void writeToParcel(android.os.Parcel, int);
  public android.app.job.JobInfo$TriggerContentUri[] getTriggerContentUris();
  public android.content.ComponentName getService();
  public android.os.PersistableBundle getExtras();
  public java.lang.String toString();
  public static final int BACKOFF_POLICY_EXPONENTIAL;
  public static final int BACKOFF_POLICY_LINEAR;
  public static final int NETWORK_TYPE_ANY;
  public static final int NETWORK_TYPE_NONE;
  public static final int NETWORK_TYPE_NOT_ROAMING;
  public static final int NETWORK_TYPE_UNMETERED;
  public static final long DEFAULT_INITIAL_BACKOFF_MILLIS;
  public static final long MAX_BACKOFF_DELAY_MILLIS;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.app.job.JobInfo$Builder
  extends java.lang.Object
{
  public void <init>(int, android.content.ComponentName);
  public android.app.job.JobInfo build();
  public android.app.job.JobInfo$Builder addTriggerContentUri(android.app.job.JobInfo$TriggerContentUri);
  public android.app.job.JobInfo$Builder setBackoffCriteria(long, int);
  public android.app.job.JobInfo$Builder setExtras(android.os.PersistableBundle);
  public android.app.job.JobInfo$Builder setMinimumLatency(long);
  public android.app.job.JobInfo$Builder setOverrideDeadline(long);
  public android.app.job.JobInfo$Builder setPeriodic(long);
  public android.app.job.JobInfo$Builder setPeriodic(long, long);
  public android.app.job.JobInfo$Builder setPersisted(boolean);
  public android.app.job.JobInfo$Builder setRequiredNetworkType(int);
  public android.app.job.JobInfo$Builder setRequiresCharging(boolean);
  public android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean);
  public android.app.job.JobInfo$Builder setTriggerContentMaxDelay(long);
  public android.app.job.JobInfo$Builder setTriggerContentUpdateDelay(long);
}
public final class android.app.job.JobInfo$TriggerContentUri
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.net.Uri, int);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getFlags();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.Uri getUri();
  public static final int FLAG_NOTIFY_FOR_DESCENDANTS;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.app.job.JobParameters
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean isOverrideDeadlineExpired();
  public int describeContents();
  public int getJobId();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.Uri[] getTriggeredContentUris();
  public android.os.PersistableBundle getExtras();
  public java.lang.String[] getTriggeredContentAuthorities();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.app.job.JobScheduler
  extends java.lang.Object
{
  public void <init>();
  public abstract int schedule(android.app.job.JobInfo);
  public abstract void cancel(int);
  public abstract void cancelAll();
  public abstract android.app.job.JobInfo getPendingJob(int);
  public abstract java.util.List getAllPendingJobs();
  public static final int RESULT_FAILURE;
  public static final int RESULT_SUCCESS;
}
public abstract class android.app.job.JobService
  extends android.app.Service
{
  public void <init>();
  public final void jobFinished(android.app.job.JobParameters, boolean);
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract boolean onStartJob(android.app.job.JobParameters);
  public abstract boolean onStopJob(android.app.job.JobParameters);
  public static final java.lang.String PERMISSION_BIND;
}
public final class android.app.usage.ConfigurationStats
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.app.usage.ConfigurationStats);
  public int describeContents();
  public int getActivationCount();
  public long getFirstTimeStamp();
  public long getLastTimeActive();
  public long getLastTimeStamp();
  public long getTotalTimeActive();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.res.Configuration getConfiguration();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.app.usage.NetworkStats
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public boolean getNextBucket(android.app.usage.NetworkStats$Bucket);
  public boolean hasNextBucket();
  public void close();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.app.usage.NetworkStats$Bucket
  extends java.lang.Object
{
  public void <init>();
  public int getRoaming();
  public int getState();
  public int getTag();
  public int getUid();
  public long getEndTimeStamp();
  public long getRxBytes();
  public long getRxPackets();
  public long getStartTimeStamp();
  public long getTxBytes();
  public long getTxPackets();
  public static final int ROAMING_ALL;
  public static final int ROAMING_NO;
  public static final int ROAMING_YES;
  public static final int STATE_ALL;
  public static final int STATE_DEFAULT;
  public static final int STATE_FOREGROUND;
  public static final int TAG_NONE;
  public static final int UID_ALL;
  public static final int UID_REMOVED;
  public static final int UID_TETHERING;
}
public class android.app.usage.NetworkStatsManager
  extends java.lang.Object
{
  public void registerUsageCallback(int, java.lang.String, long, android.app.usage.NetworkStatsManager$UsageCallback);
  public void registerUsageCallback(int, java.lang.String, long, android.app.usage.NetworkStatsManager$UsageCallback, android.os.Handler);
  public void unregisterUsageCallback(android.app.usage.NetworkStatsManager$UsageCallback);
  public android.app.usage.NetworkStats queryDetails(int, java.lang.String, long, long)  throws android.os.RemoteException, java.lang.SecurityException;
  public android.app.usage.NetworkStats queryDetailsForUid(int, java.lang.String, long, long, int)  throws android.os.RemoteException, java.lang.SecurityException;
  public android.app.usage.NetworkStats queryDetailsForUidTag(int, java.lang.String, long, long, int, int)  throws java.lang.SecurityException;
  public android.app.usage.NetworkStats querySummary(int, java.lang.String, long, long)  throws android.os.RemoteException, java.lang.SecurityException;
  public android.app.usage.NetworkStats$Bucket querySummaryForDevice(int, java.lang.String, long, long)  throws android.os.RemoteException, java.lang.SecurityException;
  public android.app.usage.NetworkStats$Bucket querySummaryForUser(int, java.lang.String, long, long)  throws android.os.RemoteException, java.lang.SecurityException;
}
public abstract class android.app.usage.NetworkStatsManager$UsageCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onThresholdReached(int, java.lang.String);
}
public final class android.app.usage.UsageEvents
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean getNextEvent(android.app.usage.UsageEvents$Event);
  public boolean hasNextEvent();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.app.usage.UsageEvents$Event
  extends java.lang.Object
{
  public void <init>();
  public int getEventType();
  public long getTimeStamp();
  public android.content.res.Configuration getConfiguration();
  public java.lang.String getClassName();
  public java.lang.String getPackageName();
  public static final int CONFIGURATION_CHANGE;
  public static final int MOVE_TO_BACKGROUND;
  public static final int MOVE_TO_FOREGROUND;
  public static final int NONE;
  public static final int USER_INTERACTION;
}
public final class android.app.usage.UsageStats
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.app.usage.UsageStats);
  public int describeContents();
  public long getFirstTimeStamp();
  public long getLastTimeStamp();
  public long getLastTimeUsed();
  public long getTotalTimeInForeground();
  public void add(android.app.usage.UsageStats);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getPackageName();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.app.usage.UsageStatsManager
  extends java.lang.Object
{
  public boolean isAppInactive(java.lang.String);
  public android.app.usage.UsageEvents queryEvents(long, long);
  public java.util.List queryConfigurations(int, long, long);
  public java.util.List queryUsageStats(int, long, long);
  public java.util.Map queryAndAggregateUsageStats(long, long);
  public static final int INTERVAL_BEST;
  public static final int INTERVAL_DAILY;
  public static final int INTERVAL_MONTHLY;
  public static final int INTERVAL_WEEKLY;
  public static final int INTERVAL_YEARLY;
}
public class android.appwidget.AppWidgetHost
  extends java.lang.Object
{
  public static void deleteAllHosts();
  public void <init>(android.content.Context, int);
  public final void startAppWidgetConfigureActivityForResult(android.app.Activity, int, int, int, android.os.Bundle);
  public final android.appwidget.AppWidgetHostView createView(android.content.Context, int, android.appwidget.AppWidgetProviderInfo);
  public int allocateAppWidgetId();
  public void deleteAppWidgetId(int);
  public void deleteHost();
  public void startListening();
  public void stopListening();
  protected void clearViews();
  protected void onProviderChanged(int, android.appwidget.AppWidgetProviderInfo);
  protected void onProvidersChanged();
  protected android.appwidget.AppWidgetHostView onCreateView(android.content.Context, int, android.appwidget.AppWidgetProviderInfo);
}
public class android.appwidget.AppWidgetHostView
  extends android.widget.FrameLayout
{
  public static android.graphics.Rect getDefaultPaddingForWidget(android.content.Context, android.content.ComponentName, android.graphics.Rect);
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, int, int);
  public int getAppWidgetId();
  public void setAppWidget(int, android.appwidget.AppWidgetProviderInfo);
  public void updateAppWidget(android.widget.RemoteViews);
  public void updateAppWidgetOptions(android.os.Bundle);
  public void updateAppWidgetSize(android.os.Bundle, int, int, int, int);
  public android.appwidget.AppWidgetProviderInfo getAppWidgetInfo();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  protected boolean drawChild(android.graphics.Canvas, android.view.View, long);
  protected void dispatchRestoreInstanceState(android.util.SparseArray);
  protected void dispatchSaveInstanceState(android.util.SparseArray);
  protected void onLayout(boolean, int, int, int, int);
  protected void prepareView(android.view.View);
  protected android.view.View getDefaultView();
  protected android.view.View getErrorView();
}
public class android.appwidget.AppWidgetManager
  extends java.lang.Object
{
  public static android.appwidget.AppWidgetManager getInstance(android.content.Context);
  public boolean bindAppWidgetIdIfAllowed(int, android.content.ComponentName);
  public boolean bindAppWidgetIdIfAllowed(int, android.content.ComponentName, android.os.Bundle);
  public boolean bindAppWidgetIdIfAllowed(int, android.os.UserHandle, android.content.ComponentName, android.os.Bundle);
  public void notifyAppWidgetViewDataChanged(int, int);
  public void notifyAppWidgetViewDataChanged(int[], int);
  public void partiallyUpdateAppWidget(int, android.widget.RemoteViews);
  public void partiallyUpdateAppWidget(int[], android.widget.RemoteViews);
  public void updateAppWidget(android.content.ComponentName, android.widget.RemoteViews);
  public void updateAppWidget(int, android.widget.RemoteViews);
  public void updateAppWidget(int[], android.widget.RemoteViews);
  public void updateAppWidgetOptions(int, android.os.Bundle);
  public android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int);
  public android.os.Bundle getAppWidgetOptions(int);
  public int[] getAppWidgetIds(android.content.ComponentName);
  public java.util.List getInstalledProviders();
  public java.util.List getInstalledProvidersForProfile(android.os.UserHandle);
  public static final int INVALID_APPWIDGET_ID;
  public static final java.lang.String ACTION_APPWIDGET_BIND;
  public static final java.lang.String ACTION_APPWIDGET_CONFIGURE;
  public static final java.lang.String ACTION_APPWIDGET_DELETED;
  public static final java.lang.String ACTION_APPWIDGET_DISABLED;
  public static final java.lang.String ACTION_APPWIDGET_ENABLED;
  public static final java.lang.String ACTION_APPWIDGET_HOST_RESTORED;
  public static final java.lang.String ACTION_APPWIDGET_OPTIONS_CHANGED;
  public static final java.lang.String ACTION_APPWIDGET_PICK;
  public static final java.lang.String ACTION_APPWIDGET_RESTORED;
  public static final java.lang.String ACTION_APPWIDGET_UPDATE;
  public static final java.lang.String EXTRA_APPWIDGET_ID;
  public static final java.lang.String EXTRA_APPWIDGET_IDS;
  public static final java.lang.String EXTRA_APPWIDGET_OLD_IDS;
  public static final java.lang.String EXTRA_APPWIDGET_OPTIONS;
  public static final java.lang.String EXTRA_APPWIDGET_PROVIDER;
  public static final java.lang.String EXTRA_APPWIDGET_PROVIDER_PROFILE;
  public static final java.lang.String EXTRA_CUSTOM_EXTRAS;
  public static final java.lang.String EXTRA_CUSTOM_INFO;
  public static final java.lang.String EXTRA_HOST_ID;
  public static final java.lang.String META_DATA_APPWIDGET_PROVIDER;
  public static final java.lang.String OPTION_APPWIDGET_HOST_CATEGORY;
  public static final java.lang.String OPTION_APPWIDGET_MAX_HEIGHT;
  public static final java.lang.String OPTION_APPWIDGET_MAX_WIDTH;
  public static final java.lang.String OPTION_APPWIDGET_MIN_HEIGHT;
  public static final java.lang.String OPTION_APPWIDGET_MIN_WIDTH;
}
public class android.appwidget.AppWidgetProvider
  extends android.content.BroadcastReceiver
{
  public void <init>();
  public void onAppWidgetOptionsChanged(android.content.Context, android.appwidget.AppWidgetManager, int, android.os.Bundle);
  public void onDeleted(android.content.Context, int[]);
  public void onDisabled(android.content.Context);
  public void onEnabled(android.content.Context);
  public void onReceive(android.content.Context, android.content.Intent);
  public void onRestored(android.content.Context, int[], int[]);
  public void onUpdate(android.content.Context, android.appwidget.AppWidgetManager, int[]);
}
public class android.appwidget.AppWidgetProviderInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public final android.graphics.drawable.Drawable loadIcon(android.content.Context, int);
  public final android.graphics.drawable.Drawable loadPreviewImage(android.content.Context, int);
  public final android.os.UserHandle getProfile();
  public final java.lang.String loadLabel(android.content.pm.PackageManager);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.appwidget.AppWidgetProviderInfo clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
  public static final int RESIZE_BOTH;
  public static final int RESIZE_HORIZONTAL;
  public static final int RESIZE_NONE;
  public static final int RESIZE_VERTICAL;
  public static final int WIDGET_CATEGORY_HOME_SCREEN;
  public static final int WIDGET_CATEGORY_KEYGUARD;
  public static final int WIDGET_CATEGORY_SEARCHBOX;
  public static final android.os.Parcelable$Creator CREATOR;
  public int autoAdvanceViewId;
  public int icon;
  public int initialKeyguardLayout;
  public int initialLayout;
  public int minHeight;
  public int minResizeHeight;
  public int minResizeWidth;
  public int minWidth;
  public int previewImage;
  public int resizeMode;
  public int updatePeriodMillis;
  public int widgetCategory;
  public android.content.ComponentName configure;
  public android.content.ComponentName provider;
  public java.lang.String label;
}
public final class android.bluetooth.BluetoothA2dp
  extends java.lang.Object
  implements android.bluetooth.BluetoothProfile
{
  public boolean isA2dpPlaying(android.bluetooth.BluetoothDevice);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public void finalize();
  public java.util.List getConnectedDevices();
  public java.util.List getDevicesMatchingConnectionStates(int[]);
  public static final int STATE_NOT_PLAYING;
  public static final int STATE_PLAYING;
  public static final java.lang.String ACTION_CONNECTION_STATE_CHANGED;
  public static final java.lang.String ACTION_PLAYING_STATE_CHANGED;
}
public final class android.bluetooth.BluetoothAdapter
  extends java.lang.Object
{
  public static boolean checkBluetoothAddress(java.lang.String);
  public static android.bluetooth.BluetoothAdapter getDefaultAdapter();
  public boolean cancelDiscovery();
  public boolean disable();
  public boolean enable();
  public boolean getProfileProxy(android.content.Context, android.bluetooth.BluetoothProfile$ServiceListener, int);
  public boolean isDiscovering();
  public boolean isEnabled();
  public boolean isMultipleAdvertisementSupported();
  public boolean isOffloadedFilteringSupported();
  public boolean isOffloadedScanBatchingSupported();
  public boolean setName(java.lang.String);
  public boolean startDiscovery();
  public boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback);
  public boolean startLeScan(java.util.UUID[], android.bluetooth.BluetoothAdapter$LeScanCallback);
  public int getProfileConnectionState(int);
  public int getScanMode();
  public int getState();
  public void closeProfileProxy(int, android.bluetooth.BluetoothProfile);
  public void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback);
  public android.bluetooth.BluetoothDevice getRemoteDevice(byte[]);
  public android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String);
  public android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String, java.util.UUID)  throws java.io.IOException;
  public android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String, java.util.UUID)  throws java.io.IOException;
  public android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser();
  public android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner();
  public java.lang.String getAddress();
  public java.lang.String getName();
  public java.util.Set getBondedDevices();
  protected void finalize()  throws java.lang.Throwable;
  public static final int ERROR;
  public static final int SCAN_MODE_CONNECTABLE;
  public static final int SCAN_MODE_CONNECTABLE_DISCOVERABLE;
  public static final int SCAN_MODE_NONE;
  public static final int STATE_CONNECTED;
  public static final int STATE_CONNECTING;
  public static final int STATE_DISCONNECTED;
  public static final int STATE_DISCONNECTING;
  public static final int STATE_OFF;
  public static final int STATE_ON;
  public static final int STATE_TURNING_OFF;
  public static final int STATE_TURNING_ON;
  public static final java.lang.String ACTION_CONNECTION_STATE_CHANGED;
  public static final java.lang.String ACTION_DISCOVERY_FINISHED;
  public static final java.lang.String ACTION_DISCOVERY_STARTED;
  public static final java.lang.String ACTION_LOCAL_NAME_CHANGED;
  public static final java.lang.String ACTION_REQUEST_DISCOVERABLE;
  public static final java.lang.String ACTION_REQUEST_ENABLE;
  public static final java.lang.String ACTION_SCAN_MODE_CHANGED;
  public static final java.lang.String ACTION_STATE_CHANGED;
  public static final java.lang.String EXTRA_CONNECTION_STATE;
  public static final java.lang.String EXTRA_DISCOVERABLE_DURATION;
  public static final java.lang.String EXTRA_LOCAL_NAME;
  public static final java.lang.String EXTRA_PREVIOUS_CONNECTION_STATE;
  public static final java.lang.String EXTRA_PREVIOUS_SCAN_MODE;
  public static final java.lang.String EXTRA_PREVIOUS_STATE;
  public static final java.lang.String EXTRA_SCAN_MODE;
  public static final java.lang.String EXTRA_STATE;
}
public interface android.bluetooth.BluetoothAdapter$LeScanCallback
{
  public abstract void onLeScan(android.bluetooth.BluetoothDevice, int, byte[]);
}
public class android.bluetooth.BluetoothAssignedNumbers
  extends java.lang.Object
{
  public static final int AAMP_OF_AMERICA;
  public static final int ACCEL_SEMICONDUCTOR;
  public static final int ACE_SENSOR;
  public static final int ADIDAS;
  public static final int ADVANCED_PANMOBIL_SYSTEMS;
  public static final int AIROHA_TECHNOLOGY;
  public static final int ALCATEL;
  public static final int ALPWISE;
  public static final int AMICCOM_ELECTRONICS;
  public static final int APLIX;
  public static final int APPLE;
  public static final int APT_LICENSING;
  public static final int ARCHOS;
  public static final int ARP_DEVICES;
  public static final int ATHEROS_COMMUNICATIONS;
  public static final int ATMEL;
  public static final int AUSTCO_COMMUNICATION_SYSTEMS;
  public static final int AUTONET_MOBILE;
  public static final int AVAGO;
  public static final int AVM_BERLIN;
  public static final int A_AND_D_ENGINEERING;
  public static final int A_AND_R_CAMBRIDGE;
  public static final int BANDSPEED;
  public static final int BAND_XI_INTERNATIONAL;
  public static final int BDE_TECHNOLOGY;
  public static final int BEATS_ELECTRONICS;
  public static final int BEAUTIFUL_ENTERPRISE;
  public static final int BEKEY;
  public static final int BELKIN_INTERNATIONAL;
  public static final int BINAURIC;
  public static final int BIOSENTRONICS;
  public static final int BLUEGIGA;
  public static final int BLUERADIOS;
  public static final int BLUETOOTH_SIG;
  public static final int BLUETREK_TECHNOLOGIES;
  public static final int BOSE;
  public static final int BRIARTEK;
  public static final int BROADCOM;
  public static final int CAEN_RFID;
  public static final int CAMBRIDGE_SILICON_RADIO;
  public static final int CATC;
  public static final int CINETIX;
  public static final int CLARINOX_TECHNOLOGIES;
  public static final int COLORFY;
  public static final int COMMIL;
  public static final int CONEXANT_SYSTEMS;
  public static final int CONNECTBLUE;
  public static final int CONTINENTAL_AUTOMOTIVE;
  public static final int CONWISE_TECHNOLOGY;
  public static final int CREATIVE_TECHNOLOGY;
  public static final int C_TECHNOLOGIES;
  public static final int DANLERS;
  public static final int DELORME_PUBLISHING_COMPANY;
  public static final int DEXCOM;
  public static final int DIALOG_SEMICONDUCTOR;
  public static final int DIGIANSWER;
  public static final int ECLIPSE;
  public static final int ECOTEST;
  public static final int ELGATO_SYSTEMS;
  public static final int EM_MICROELECTRONIC_MARIN;
  public static final int EQUINOX_AG;
  public static final int ERICSSON_TECHNOLOGY;
  public static final int EVLUMA;
  public static final int FREE2MOVE;
  public static final int FUNAI_ELECTRIC;
  public static final int GARMIN_INTERNATIONAL;
  public static final int GCT_SEMICONDUCTOR;
  public static final int GELO;
  public static final int GENEQ;
  public static final int GENERAL_MOTORS;
  public static final int GENNUM;
  public static final int GEOFORCE;
  public static final int GIBSON_GUITARS;
  public static final int GN_NETCOM;
  public static final int GN_RESOUND;
  public static final int GOOGLE;
  public static final int GREEN_THROTTLE_GAMES;
  public static final int GROUP_SENSE;
  public static final int HANLYNN_TECHNOLOGIES;
  public static final int HARMAN_INTERNATIONAL;
  public static final int HEWLETT_PACKARD;
  public static final int HITACHI;
  public static final int HOSIDEN;
  public static final int IBM;
  public static final int INFINEON_TECHNOLOGIES;
  public static final int INGENIEUR_SYSTEMGRUPPE_ZAHN;
  public static final int INTEGRATED_SILICON_SOLUTION;
  public static final int INTEGRATED_SYSTEM_SOLUTION;
  public static final int INTEL;
  public static final int INVENTEL;
  public static final int IPEXTREME;
  public static final int I_TECH_DYNAMIC_GLOBAL_DISTRIBUTION;
  public static final int JAWBONE;
  public static final int JIANGSU_TOPPOWER_AUTOMOTIVE_ELECTRONICS;
  public static final int JOHNSON_CONTROLS;
  public static final int J_AND_M;
  public static final int KAWANTECH;
  public static final int KC_TECHNOLOGY;
  public static final int KENSINGTON_COMPUTER_PRODUCTS_GROUP;
  public static final int LAIRD_TECHNOLOGIES;
  public static final int LESSWIRE;
  public static final int LG_ELECTRONICS;
  public static final int LINAK;
  public static final int LUCENT;
  public static final int LUDUS_HELSINKI;
  public static final int MACRONIX;
  public static final int MAGNETI_MARELLI;
  public static final int MANSELLA;
  public static final int MARVELL;
  public static final int MATSUSHITA_ELECTRIC;
  public static final int MC10;
  public static final int MEDIATEK;
  public static final int MESO_INTERNATIONAL;
  public static final int META_WATCH;
  public static final int MEWTEL_TECHNOLOGY;
  public static final int MICOMMAND;
  public static final int MICROCHIP_TECHNOLOGY;
  public static final int MICROSOFT;
  public static final int MINDTREE;
  public static final int MISFIT_WEARABLES;
  public static final int MITEL_SEMICONDUCTOR;
  public static final int MITSUBISHI_ELECTRIC;
  public static final int MOBILIAN_CORPORATION;
  public static final int MONSTER;
  public static final int MOTOROLA;
  public static final int MSTAR_SEMICONDUCTOR;
  public static final int MUZIK;
  public static final int NEC;
  public static final int NEC_LIGHTING;
  public static final int NEWLOGIC;
  public static final int NIKE;
  public static final int NINE_SOLUTIONS;
  public static final int NOKIA_MOBILE_PHONES;
  public static final int NORDIC_SEMICONDUCTOR;
  public static final int NORWOOD_SYSTEMS;
  public static final int ODM_TECHNOLOGY;
  public static final int OMEGAWAVE;
  public static final int ONSET_COMPUTER;
  public static final int OPEN_INTERFACE;
  public static final int OTL_DYNAMICS;
  public static final int PANDA_OCEAN;
  public static final int PARROT;
  public static final int PARTHUS_TECHNOLOGIES;
  public static final int PASSIF_SEMICONDUCTOR;
  public static final int PETER_SYSTEMTECHNIK;
  public static final int PHILIPS_SEMICONDUCTORS;
  public static final int PLANTRONICS;
  public static final int POLAR_ELECTRO;
  public static final int POLAR_ELECTRO_EUROPE;
  public static final int PROCTER_AND_GAMBLE;
  public static final int QUALCOMM;
  public static final int QUALCOMM_CONNECTED_EXPERIENCES;
  public static final int QUALCOMM_INNOVATION_CENTER;
  public static final int QUALCOMM_LABS;
  public static final int QUALCOMM_TECHNOLOGIES;
  public static final int QUINTIC;
  public static final int QUUPPA;
  public static final int RALINK_TECHNOLOGY;
  public static final int RDA_MICROELECTRONICS;
  public static final int REALTEK_SEMICONDUCTOR;
  public static final int RED_M;
  public static final int RENESAS_TECHNOLOGY;
  public static final int RESEARCH_IN_MOTION;
  public static final int RF_MICRO_DEVICES;
  public static final int RIVIERAWAVES;
  public static final int ROHDE_AND_SCHWARZ;
  public static final int RTX_TELECOM;
  public static final int SAMSUNG_ELECTRONICS;
  public static final int SARIS_CYCLING_GROUP;
  public static final int SEERS_TECHNOLOGY;
  public static final int SEIKO_EPSON;
  public static final int SELFLY;
  public static final int SEMILINK;
  public static final int SENNHEISER_COMMUNICATIONS;
  public static final int SHANGHAI_SUPER_SMART_ELECTRONICS;
  public static final int SHENZHEN_EXCELSECU_DATA_TECHNOLOGY;
  public static final int SIGNIA_TECHNOLOGIES;
  public static final int SILICON_WAVE;
  public static final int SIRF_TECHNOLOGY;
  public static final int SOCKET_MOBILE;
  public static final int SONY_ERICSSON;
  public static final int SOUND_ID;
  public static final int SPORTS_TRACKING_TECHNOLOGIES;
  public static final int SR_MEDIZINELEKTRONIK;
  public static final int STACCATO_COMMUNICATIONS;
  public static final int STALMART_TECHNOLOGY;
  public static final int STARKEY_LABORATORIES;
  public static final int STOLLMAN_E_PLUS_V;
  public static final int STONESTREET_ONE;
  public static final int ST_MICROELECTRONICS;
  public static final int SUMMIT_DATA_COMMUNICATIONS;
  public static final int SUUNTO;
  public static final int SWIRL_NETWORKS;
  public static final int SYMBOL_TECHNOLOGIES;
  public static final int SYNOPSYS;
  public static final int SYSTEMS_AND_CHIPS;
  public static final int S_POWER_ELECTRONICS;
  public static final int TAIXINGBANG_TECHNOLOGY;
  public static final int TENOVIS;
  public static final int TERAX;
  public static final int TEXAS_INSTRUMENTS;
  public static final int THINKOPTICS;
  public static final int THREECOM;
  public static final int THREE_DIJOY;
  public static final int THREE_DSP;
  public static final int TIMEKEEPING_SYSTEMS;
  public static final int TIMEX_GROUP_USA;
  public static final int TOPCORN_POSITIONING_SYSTEMS;
  public static final int TOSHIBA;
  public static final int TRANSILICA;
  public static final int TRELAB;
  public static final int TTPCOM;
  public static final int TXTR;
  public static final int TZERO_TECHNOLOGIES;
  public static final int UNIVERSAL_ELECTRONICS;
  public static final int VERTU;
  public static final int VISTEON;
  public static final int VIZIO;
  public static final int VOYETRA_TURTLE_BEACH;
  public static final int WAVEPLUS_TECHNOLOGY;
  public static final int WICENTRIC;
  public static final int WIDCOMM;
  public static final int WUXI_VIMICRO;
  public static final int ZEEVO;
  public static final int ZER01_TV;
  public static final int ZOMM;
  public static final int ZSCAN_SOFTWARE;
}
public final class android.bluetooth.BluetoothClass
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean hasService(int);
  public int describeContents();
  public int getDeviceClass();
  public int getMajorDeviceClass();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.bluetooth.BluetoothClass$Device
  extends java.lang.Object
{
  public void <init>();
  public static final int AUDIO_VIDEO_CAMCORDER;
  public static final int AUDIO_VIDEO_CAR_AUDIO;
  public static final int AUDIO_VIDEO_HANDSFREE;
  public static final int AUDIO_VIDEO_HEADPHONES;
  public static final int AUDIO_VIDEO_HIFI_AUDIO;
  public static final int AUDIO_VIDEO_LOUDSPEAKER;
  public static final int AUDIO_VIDEO_MICROPHONE;
  public static final int AUDIO_VIDEO_PORTABLE_AUDIO;
  public static final int AUDIO_VIDEO_SET_TOP_BOX;
  public static final int AUDIO_VIDEO_UNCATEGORIZED;
  public static final int AUDIO_VIDEO_VCR;
  public static final int AUDIO_VIDEO_VIDEO_CAMERA;
  public static final int AUDIO_VIDEO_VIDEO_CONFERENCING;
  public static final int AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER;
  public static final int AUDIO_VIDEO_VIDEO_GAMING_TOY;
  public static final int AUDIO_VIDEO_VIDEO_MONITOR;
  public static final int AUDIO_VIDEO_WEARABLE_HEADSET;
  public static final int COMPUTER_DESKTOP;
  public static final int COMPUTER_HANDHELD_PC_PDA;
  public static final int COMPUTER_LAPTOP;
  public static final int COMPUTER_PALM_SIZE_PC_PDA;
  public static final int COMPUTER_SERVER;
  public static final int COMPUTER_UNCATEGORIZED;
  public static final int COMPUTER_WEARABLE;
  public static final int HEALTH_BLOOD_PRESSURE;
  public static final int HEALTH_DATA_DISPLAY;
  public static final int HEALTH_GLUCOSE;
  public static final int HEALTH_PULSE_OXIMETER;
  public static final int HEALTH_PULSE_RATE;
  public static final int HEALTH_THERMOMETER;
  public static final int HEALTH_UNCATEGORIZED;
  public static final int HEALTH_WEIGHING;
  public static final int PHONE_CELLULAR;
  public static final int PHONE_CORDLESS;
  public static final int PHONE_ISDN;
  public static final int PHONE_MODEM_OR_GATEWAY;
  public static final int PHONE_SMART;
  public static final int PHONE_UNCATEGORIZED;
  public static final int TOY_CONTROLLER;
  public static final int TOY_DOLL_ACTION_FIGURE;
  public static final int TOY_GAME;
  public static final int TOY_ROBOT;
  public static final int TOY_UNCATEGORIZED;
  public static final int TOY_VEHICLE;
  public static final int WEARABLE_GLASSES;
  public static final int WEARABLE_HELMET;
  public static final int WEARABLE_JACKET;
  public static final int WEARABLE_PAGER;
  public static final int WEARABLE_UNCATEGORIZED;
  public static final int WEARABLE_WRIST_WATCH;
}
public class android.bluetooth.BluetoothClass$Device$Major
  extends java.lang.Object
{
  public void <init>();
  public static final int AUDIO_VIDEO;
  public static final int COMPUTER;
  public static final int HEALTH;
  public static final int IMAGING;
  public static final int MISC;
  public static final int NETWORKING;
  public static final int PERIPHERAL;
  public static final int PHONE;
  public static final int TOY;
  public static final int UNCATEGORIZED;
  public static final int WEARABLE;
}
public final class android.bluetooth.BluetoothClass$Service
  extends java.lang.Object
{
  public void <init>();
  public static final int AUDIO;
  public static final int CAPTURE;
  public static final int INFORMATION;
  public static final int LIMITED_DISCOVERABILITY;
  public static final int NETWORKING;
  public static final int OBJECT_TRANSFER;
  public static final int POSITIONING;
  public static final int RENDER;
  public static final int TELEPHONY;
}
public final class android.bluetooth.BluetoothDevice
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean createBond();
  public boolean equals(java.lang.Object);
  public boolean fetchUuidsWithSdp();
  public boolean setPairingConfirmation(boolean);
  public boolean setPin(byte[]);
  public int describeContents();
  public int getBondState();
  public int getType();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.bluetooth.BluetoothClass getBluetoothClass();
  public android.bluetooth.BluetoothGatt connectGatt(android.content.Context, boolean, android.bluetooth.BluetoothGattCallback);
  public android.bluetooth.BluetoothGatt connectGatt(android.content.Context, boolean, android.bluetooth.BluetoothGattCallback, int);
  public android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)  throws java.io.IOException;
  public android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)  throws java.io.IOException;
  public android.os.ParcelUuid[] getUuids();
  public java.lang.String getAddress();
  public java.lang.String getName();
  public java.lang.String toString();
  public static final int BOND_BONDED;
  public static final int BOND_BONDING;
  public static final int BOND_NONE;
  public static final int DEVICE_TYPE_CLASSIC;
  public static final int DEVICE_TYPE_DUAL;
  public static final int DEVICE_TYPE_LE;
  public static final int DEVICE_TYPE_UNKNOWN;
  public static final int ERROR;
  public static final int PAIRING_VARIANT_PASSKEY_CONFIRMATION;
  public static final int PAIRING_VARIANT_PIN;
  public static final int TRANSPORT_AUTO;
  public static final int TRANSPORT_BREDR;
  public static final int TRANSPORT_LE;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String ACTION_ACL_CONNECTED;
  public static final java.lang.String ACTION_ACL_DISCONNECTED;
  public static final java.lang.String ACTION_ACL_DISCONNECT_REQUESTED;
  public static final java.lang.String ACTION_BOND_STATE_CHANGED;
  public static final java.lang.String ACTION_CLASS_CHANGED;
  public static final java.lang.String ACTION_FOUND;
  public static final java.lang.String ACTION_NAME_CHANGED;
  public static final java.lang.String ACTION_PAIRING_REQUEST;
  public static final java.lang.String ACTION_UUID;
  public static final java.lang.String EXTRA_BOND_STATE;
  public static final java.lang.String EXTRA_CLASS;
  public static final java.lang.String EXTRA_DEVICE;
  public static final java.lang.String EXTRA_NAME;
  public static final java.lang.String EXTRA_PAIRING_KEY;
  public static final java.lang.String EXTRA_PAIRING_VARIANT;
  public static final java.lang.String EXTRA_PREVIOUS_BOND_STATE;
  public static final java.lang.String EXTRA_RSSI;
  public static final java.lang.String EXTRA_UUID;
}
public final class android.bluetooth.BluetoothGatt
  extends java.lang.Object
  implements android.bluetooth.BluetoothProfile
{
  public boolean beginReliableWrite();
  public boolean connect();
  public boolean discoverServices();
  public boolean executeReliableWrite();
  public boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic);
  public boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor);
  public boolean readRemoteRssi();
  public boolean requestConnectionPriority(int);
  public boolean requestMtu(int);
  public boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic, boolean);
  public boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic);
  public boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public void abortReliableWrite();
  public void abortReliableWrite(android.bluetooth.BluetoothDevice);
  public void close();
  public void disconnect();
  public android.bluetooth.BluetoothDevice getDevice();
  public android.bluetooth.BluetoothGattService getService(java.util.UUID);
  public java.util.List getConnectedDevices();
  public java.util.List getDevicesMatchingConnectionStates(int[]);
  public java.util.List getServices();
  public static final int CONNECTION_PRIORITY_BALANCED;
  public static final int CONNECTION_PRIORITY_HIGH;
  public static final int CONNECTION_PRIORITY_LOW_POWER;
  public static final int GATT_CONNECTION_CONGESTED;
  public static final int GATT_FAILURE;
  public static final int GATT_INSUFFICIENT_AUTHENTICATION;
  public static final int GATT_INSUFFICIENT_ENCRYPTION;
  public static final int GATT_INVALID_ATTRIBUTE_LENGTH;
  public static final int GATT_INVALID_OFFSET;
  public static final int GATT_READ_NOT_PERMITTED;
  public static final int GATT_REQUEST_NOT_SUPPORTED;
  public static final int GATT_SUCCESS;
  public static final int GATT_WRITE_NOT_PERMITTED;
}
public abstract class android.bluetooth.BluetoothGattCallback
  extends java.lang.Object
{
  public void <init>();
  public void onCharacteristicChanged(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic);
  public void onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int);
  public void onCharacteristicWrite(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int);
  public void onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int);
  public void onDescriptorRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattDescriptor, int);
  public void onDescriptorWrite(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattDescriptor, int);
  public void onMtuChanged(android.bluetooth.BluetoothGatt, int, int);
  public void onReadRemoteRssi(android.bluetooth.BluetoothGatt, int, int);
  public void onReliableWriteCompleted(android.bluetooth.BluetoothGatt, int);
  public void onServicesDiscovered(android.bluetooth.BluetoothGatt, int);
}
public class android.bluetooth.BluetoothGattCharacteristic
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.util.UUID, int, int);
  public boolean addDescriptor(android.bluetooth.BluetoothGattDescriptor);
  public boolean setValue(byte[]);
  public boolean setValue(int, int, int);
  public boolean setValue(int, int, int, int);
  public boolean setValue(java.lang.String);
  public int describeContents();
  public int getInstanceId();
  public int getPermissions();
  public int getProperties();
  public int getWriteType();
  public void setWriteType(int);
  public void writeToParcel(android.os.Parcel, int);
  public android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID);
  public android.bluetooth.BluetoothGattService getService();
  public byte[] getValue();
  public java.lang.Float getFloatValue(int, int);
  public java.lang.Integer getIntValue(int, int);
  public java.lang.String getStringValue(int);
  public java.util.List getDescriptors();
  public java.util.UUID getUuid();
  public static final int FORMAT_FLOAT;
  public static final int FORMAT_SFLOAT;
  public static final int FORMAT_SINT16;
  public static final int FORMAT_SINT32;
  public static final int FORMAT_SINT8;
  public static final int FORMAT_UINT16;
  public static final int FORMAT_UINT32;
  public static final int FORMAT_UINT8;
  public static final int PERMISSION_READ;
  public static final int PERMISSION_READ_ENCRYPTED;
  public static final int PERMISSION_READ_ENCRYPTED_MITM;
  public static final int PERMISSION_WRITE;
  public static final int PERMISSION_WRITE_ENCRYPTED;
  public static final int PERMISSION_WRITE_ENCRYPTED_MITM;
  public static final int PERMISSION_WRITE_SIGNED;
  public static final int PERMISSION_WRITE_SIGNED_MITM;
  public static final int PROPERTY_BROADCAST;
  public static final int PROPERTY_EXTENDED_PROPS;
  public static final int PROPERTY_INDICATE;
  public static final int PROPERTY_NOTIFY;
  public static final int PROPERTY_READ;
  public static final int PROPERTY_SIGNED_WRITE;
  public static final int PROPERTY_WRITE;
  public static final int PROPERTY_WRITE_NO_RESPONSE;
  public static final int WRITE_TYPE_DEFAULT;
  public static final int WRITE_TYPE_NO_RESPONSE;
  public static final int WRITE_TYPE_SIGNED;
  public static final android.os.Parcelable$Creator CREATOR;
  protected java.util.List mDescriptors;
}
public class android.bluetooth.BluetoothGattDescriptor
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.util.UUID, int);
  public boolean setValue(byte[]);
  public int describeContents();
  public int getPermissions();
  public void writeToParcel(android.os.Parcel, int);
  public android.bluetooth.BluetoothGattCharacteristic getCharacteristic();
  public byte[] getValue();
  public java.util.UUID getUuid();
  public static final int PERMISSION_READ;
  public static final int PERMISSION_READ_ENCRYPTED;
  public static final int PERMISSION_READ_ENCRYPTED_MITM;
  public static final int PERMISSION_WRITE;
  public static final int PERMISSION_WRITE_ENCRYPTED;
  public static final int PERMISSION_WRITE_ENCRYPTED_MITM;
  public static final int PERMISSION_WRITE_SIGNED;
  public static final int PERMISSION_WRITE_SIGNED_MITM;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final byte[] DISABLE_NOTIFICATION_VALUE;
  public static final byte[] ENABLE_INDICATION_VALUE;
  public static final byte[] ENABLE_NOTIFICATION_VALUE;
}
public final class android.bluetooth.BluetoothGattServer
  extends java.lang.Object
  implements android.bluetooth.BluetoothProfile
{
  public boolean addService(android.bluetooth.BluetoothGattService);
  public boolean connect(android.bluetooth.BluetoothDevice, boolean);
  public boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothGattCharacteristic, boolean);
  public boolean removeService(android.bluetooth.BluetoothGattService);
  public boolean sendResponse(android.bluetooth.BluetoothDevice, int, int, int, byte[]);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public void cancelConnection(android.bluetooth.BluetoothDevice);
  public void clearServices();
  public void close();
  public android.bluetooth.BluetoothGattService getService(java.util.UUID);
  public java.util.List getConnectedDevices();
  public java.util.List getDevicesMatchingConnectionStates(int[]);
  public java.util.List getServices();
}
public abstract class android.bluetooth.BluetoothGattServerCallback
  extends java.lang.Object
{
  public void <init>();
  public void onCharacteristicReadRequest(android.bluetooth.BluetoothDevice, int, int, android.bluetooth.BluetoothGattCharacteristic);
  public void onCharacteristicWriteRequest(android.bluetooth.BluetoothDevice, int, android.bluetooth.BluetoothGattCharacteristic, boolean, boolean, int, byte[]);
  public void onConnectionStateChange(android.bluetooth.BluetoothDevice, int, int);
  public void onDescriptorReadRequest(android.bluetooth.BluetoothDevice, int, int, android.bluetooth.BluetoothGattDescriptor);
  public void onDescriptorWriteRequest(android.bluetooth.BluetoothDevice, int, android.bluetooth.BluetoothGattDescriptor, boolean, boolean, int, byte[]);
  public void onExecuteWrite(android.bluetooth.BluetoothDevice, int, boolean);
  public void onMtuChanged(android.bluetooth.BluetoothDevice, int);
  public void onNotificationSent(android.bluetooth.BluetoothDevice, int);
  public void onServiceAdded(int, android.bluetooth.BluetoothGattService);
}
public class android.bluetooth.BluetoothGattService
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.util.UUID, int);
  public boolean addCharacteristic(android.bluetooth.BluetoothGattCharacteristic);
  public boolean addService(android.bluetooth.BluetoothGattService);
  public int describeContents();
  public int getInstanceId();
  public int getType();
  public void writeToParcel(android.os.Parcel, int);
  public android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID);
  public java.util.List getCharacteristics();
  public java.util.List getIncludedServices();
  public java.util.UUID getUuid();
  public static final int SERVICE_TYPE_PRIMARY;
  public static final int SERVICE_TYPE_SECONDARY;
  public static final android.os.Parcelable$Creator CREATOR;
  protected java.util.List mCharacteristics;
  protected java.util.List mIncludedServices;
}
public final class android.bluetooth.BluetoothHeadset
  extends java.lang.Object
  implements android.bluetooth.BluetoothProfile
{
  public boolean isAudioConnected(android.bluetooth.BluetoothDevice);
  public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice, java.lang.String, java.lang.String);
  public boolean startVoiceRecognition(android.bluetooth.BluetoothDevice);
  public boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public java.util.List getConnectedDevices();
  public java.util.List getDevicesMatchingConnectionStates(int[]);
  public static final int AT_CMD_TYPE_ACTION;
  public static final int AT_CMD_TYPE_BASIC;
  public static final int AT_CMD_TYPE_READ;
  public static final int AT_CMD_TYPE_SET;
  public static final int AT_CMD_TYPE_TEST;
  public static final int STATE_AUDIO_CONNECTED;
  public static final int STATE_AUDIO_CONNECTING;
  public static final int STATE_AUDIO_DISCONNECTED;
  public static final java.lang.String ACTION_AUDIO_STATE_CHANGED;
  public static final java.lang.String ACTION_CONNECTION_STATE_CHANGED;
  public static final java.lang.String ACTION_VENDOR_SPECIFIC_HEADSET_EVENT;
  public static final java.lang.String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS;
  public static final java.lang.String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD;
  public static final java.lang.String EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE;
  public static final java.lang.String VENDOR_RESULT_CODE_COMMAND_ANDROID;
  public static final java.lang.String VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID_CATEGORY;
}
public final class android.bluetooth.BluetoothHealth
  extends java.lang.Object
  implements android.bluetooth.BluetoothProfile
{
  public boolean connectChannelToSource(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration);
  public boolean disconnectChannel(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int);
  public boolean registerSinkAppConfiguration(java.lang.String, int, android.bluetooth.BluetoothHealthCallback);
  public boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration);
  public int getConnectionState(android.bluetooth.BluetoothDevice);
  public android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration);
  public java.util.List getConnectedDevices();
  public java.util.List getDevicesMatchingConnectionStates(int[]);
  public static final int APP_CONFIG_REGISTRATION_FAILURE;
  public static final int APP_CONFIG_REGISTRATION_SUCCESS;
  public static final int APP_CONFIG_UNREGISTRATION_FAILURE;
  public static final int APP_CONFIG_UNREGISTRATION_SUCCESS;
  public static final int CHANNEL_TYPE_RELIABLE;
  public static final int CHANNEL_TYPE_STREAMING;
  public static final int SINK_ROLE;
  public static final int SOURCE_ROLE;
  public static final int STATE_CHANNEL_CONNECTED;
  public static final int STATE_CHANNEL_CONNECTING;
  public static final int STATE_CHANNEL_DISCONNECTED;
  public static final int STATE_CHANNEL_DISCONNECTING;
}
public final class android.bluetooth.BluetoothHealthAppConfiguration
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getDataType();
  public int getRole();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getName();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.bluetooth.BluetoothHealthCallback
  extends java.lang.Object
{
  public void <init>();
  public void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration, int);
  public void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration, android.bluetooth.BluetoothDevice, int, int, android.os.ParcelFileDescriptor, int);
}
public final class android.bluetooth.BluetoothManager
  extends java.lang.Object
{
  public int getConnectionState(android.bluetooth.BluetoothDevice, int);
  public android.bluetooth.BluetoothAdapter getAdapter();
  public android.bluetooth.BluetoothGattServer openGattServer(android.content.Context, android.bluetooth.BluetoothGattServerCallback);
  public java.util.List getConnectedDevices(int);
  public java.util.List getDevicesMatchingConnectionStates(int, int[]);
}
public interface android.bluetooth.BluetoothProfile
{
  public abstract int getConnectionState(android.bluetooth.BluetoothDevice);
  public abstract java.util.List getConnectedDevices();
  public abstract java.util.List getDevicesMatchingConnectionStates(int[]);
  public static final int A2DP;
  public static final int GATT;
  public static final int GATT_SERVER;
  public static final int HEADSET;
  public static final int HEALTH;
  public static final int SAP;
  public static final int STATE_CONNECTED;
  public static final int STATE_CONNECTING;
  public static final int STATE_DISCONNECTED;
  public static final int STATE_DISCONNECTING;
  public static final java.lang.String EXTRA_PREVIOUS_STATE;
  public static final java.lang.String EXTRA_STATE;
}
public interface android.bluetooth.BluetoothProfile$ServiceListener
{
  public abstract void onServiceConnected(int, android.bluetooth.BluetoothProfile);
  public abstract void onServiceDisconnected(int);
}
public final class android.bluetooth.BluetoothServerSocket
  extends java.lang.Object
  implements java.io.Closeable
{
  public void close()  throws java.io.IOException;
  public android.bluetooth.BluetoothSocket accept()  throws java.io.IOException;
  public android.bluetooth.BluetoothSocket accept(int)  throws java.io.IOException;
  public java.lang.String toString();
}
public final class android.bluetooth.BluetoothSocket
  extends java.lang.Object
  implements java.io.Closeable
{
  public boolean isConnected();
  public int getConnectionType();
  public int getMaxReceivePacketSize();
  public int getMaxTransmitPacketSize();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public android.bluetooth.BluetoothDevice getRemoteDevice();
  public java.io.InputStream getInputStream()  throws java.io.IOException;
  public java.io.OutputStream getOutputStream()  throws java.io.IOException;
  public static final int TYPE_L2CAP;
  public static final int TYPE_RFCOMM;
  public static final int TYPE_SCO;
}
public abstract class android.bluetooth.le.AdvertiseCallback
  extends java.lang.Object
{
  public void <init>();
  public void onStartFailure(int);
  public void onStartSuccess(android.bluetooth.le.AdvertiseSettings);
  public static final int ADVERTISE_FAILED_ALREADY_STARTED;
  public static final int ADVERTISE_FAILED_DATA_TOO_LARGE;
  public static final int ADVERTISE_FAILED_FEATURE_UNSUPPORTED;
  public static final int ADVERTISE_FAILED_INTERNAL_ERROR;
  public static final int ADVERTISE_FAILED_TOO_MANY_ADVERTISERS;
}
public final class android.bluetooth.le.AdvertiseData
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean getIncludeDeviceName();
  public boolean getIncludeTxPowerLevel();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.util.SparseArray getManufacturerSpecificData();
  public java.lang.String toString();
  public java.util.List getServiceUuids();
  public java.util.Map getServiceData();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.bluetooth.le.AdvertiseData$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.bluetooth.le.AdvertiseData build();
  public android.bluetooth.le.AdvertiseData$Builder addManufacturerData(int, byte[]);
  public android.bluetooth.le.AdvertiseData$Builder addServiceData(android.os.ParcelUuid, byte[]);
  public android.bluetooth.le.AdvertiseData$Builder addServiceUuid(android.os.ParcelUuid);
  public android.bluetooth.le.AdvertiseData$Builder setIncludeDeviceName(boolean);
  public android.bluetooth.le.AdvertiseData$Builder setIncludeTxPowerLevel(boolean);
}
public final class android.bluetooth.le.AdvertiseSettings
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean isConnectable();
  public int describeContents();
  public int getMode();
  public int getTimeout();
  public int getTxPowerLevel();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int ADVERTISE_MODE_BALANCED;
  public static final int ADVERTISE_MODE_LOW_LATENCY;
  public static final int ADVERTISE_MODE_LOW_POWER;
  public static final int ADVERTISE_TX_POWER_HIGH;
  public static final int ADVERTISE_TX_POWER_LOW;
  public static final int ADVERTISE_TX_POWER_MEDIUM;
  public static final int ADVERTISE_TX_POWER_ULTRA_LOW;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.bluetooth.le.AdvertiseSettings$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.bluetooth.le.AdvertiseSettings build();
  public android.bluetooth.le.AdvertiseSettings$Builder setAdvertiseMode(int);
  public android.bluetooth.le.AdvertiseSettings$Builder setConnectable(boolean);
  public android.bluetooth.le.AdvertiseSettings$Builder setTimeout(int);
  public android.bluetooth.le.AdvertiseSettings$Builder setTxPowerLevel(int);
}
public final class android.bluetooth.le.BluetoothLeAdvertiser
  extends java.lang.Object
{
  public void startAdvertising(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseCallback);
  public void startAdvertising(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseCallback);
  public void stopAdvertising(android.bluetooth.le.AdvertiseCallback);
}
public final class android.bluetooth.le.BluetoothLeScanner
  extends java.lang.Object
{
  public void flushPendingScanResults(android.bluetooth.le.ScanCallback);
  public void startScan(android.bluetooth.le.ScanCallback);
  public void startScan(java.util.List, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback);
  public void stopScan(android.bluetooth.le.ScanCallback);
}
public abstract class android.bluetooth.le.ScanCallback
  extends java.lang.Object
{
  public void <init>();
  public void onBatchScanResults(java.util.List);
  public void onScanFailed(int);
  public void onScanResult(int, android.bluetooth.le.ScanResult);
  public static final int SCAN_FAILED_ALREADY_STARTED;
  public static final int SCAN_FAILED_APPLICATION_REGISTRATION_FAILED;
  public static final int SCAN_FAILED_FEATURE_UNSUPPORTED;
  public static final int SCAN_FAILED_INTERNAL_ERROR;
}
public final class android.bluetooth.le.ScanFilter
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean matches(android.bluetooth.le.ScanResult);
  public int describeContents();
  public int getManufacturerId();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.ParcelUuid getServiceDataUuid();
  public android.os.ParcelUuid getServiceUuid();
  public android.os.ParcelUuid getServiceUuidMask();
  public byte[] getManufacturerData();
  public byte[] getManufacturerDataMask();
  public byte[] getServiceData();
  public byte[] getServiceDataMask();
  public java.lang.String getDeviceAddress();
  public java.lang.String getDeviceName();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.bluetooth.le.ScanFilter$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.bluetooth.le.ScanFilter build();
  public android.bluetooth.le.ScanFilter$Builder setDeviceAddress(java.lang.String);
  public android.bluetooth.le.ScanFilter$Builder setDeviceName(java.lang.String);
  public android.bluetooth.le.ScanFilter$Builder setManufacturerData(int, byte[]);
  public android.bluetooth.le.ScanFilter$Builder setManufacturerData(int, byte[], byte[]);
  public android.bluetooth.le.ScanFilter$Builder setServiceData(android.os.ParcelUuid, byte[]);
  public android.bluetooth.le.ScanFilter$Builder setServiceData(android.os.ParcelUuid, byte[], byte[]);
  public android.bluetooth.le.ScanFilter$Builder setServiceUuid(android.os.ParcelUuid);
  public android.bluetooth.le.ScanFilter$Builder setServiceUuid(android.os.ParcelUuid, android.os.ParcelUuid);
}
public final class android.bluetooth.le.ScanRecord
  extends java.lang.Object
{
  public int getAdvertiseFlags();
  public int getTxPowerLevel();
  public android.util.SparseArray getManufacturerSpecificData();
  public byte[] getBytes();
  public byte[] getManufacturerSpecificData(int);
  public byte[] getServiceData(android.os.ParcelUuid);
  public java.lang.String getDeviceName();
  public java.lang.String toString();
  public java.util.List getServiceUuids();
  public java.util.Map getServiceData();
}
public final class android.bluetooth.le.ScanResult
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.bluetooth.BluetoothDevice, android.bluetooth.le.ScanRecord, int, long);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getRssi();
  public int hashCode();
  public long getTimestampNanos();
  public void writeToParcel(android.os.Parcel, int);
  public android.bluetooth.BluetoothDevice getDevice();
  public android.bluetooth.le.ScanRecord getScanRecord();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.bluetooth.le.ScanSettings
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getCallbackType();
  public int getScanMode();
  public int getScanResultType();
  public long getReportDelayMillis();
  public void writeToParcel(android.os.Parcel, int);
  public static final int CALLBACK_TYPE_ALL_MATCHES;
  public static final int CALLBACK_TYPE_FIRST_MATCH;
  public static final int CALLBACK_TYPE_MATCH_LOST;
  public static final int MATCH_MODE_AGGRESSIVE;
  public static final int MATCH_MODE_STICKY;
  public static final int MATCH_NUM_FEW_ADVERTISEMENT;
  public static final int MATCH_NUM_MAX_ADVERTISEMENT;
  public static final int MATCH_NUM_ONE_ADVERTISEMENT;
  public static final int SCAN_MODE_BALANCED;
  public static final int SCAN_MODE_LOW_LATENCY;
  public static final int SCAN_MODE_LOW_POWER;
  public static final int SCAN_MODE_OPPORTUNISTIC;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.bluetooth.le.ScanSettings$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.bluetooth.le.ScanSettings build();
  public android.bluetooth.le.ScanSettings$Builder setCallbackType(int);
  public android.bluetooth.le.ScanSettings$Builder setMatchMode(int);
  public android.bluetooth.le.ScanSettings$Builder setNumOfMatches(int);
  public android.bluetooth.le.ScanSettings$Builder setReportDelay(long);
  public android.bluetooth.le.ScanSettings$Builder setScanMode(int);
}
public abstract class android.content.AbstractThreadedSyncAdapter
  extends java.lang.Object
{
  public void <init>(android.content.Context, boolean);
  public void <init>(android.content.Context, boolean, boolean);
  public final android.os.IBinder getSyncAdapterBinder();
  public abstract void onPerformSync(android.accounts.Account, android.os.Bundle, java.lang.String, android.content.ContentProviderClient, android.content.SyncResult);
  public void onSecurityException(android.accounts.Account, android.os.Bundle, java.lang.String, android.content.SyncResult);
  public void onSyncCanceled();
  public void onSyncCanceled(java.lang.Thread);
  public android.content.Context getContext();
  public static final int LOG_SYNC_DETAILS;
}
public class android.content.ActivityNotFoundException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class android.content.AsyncQueryHandler
  extends android.os.Handler
{
  public void <init>(android.content.ContentResolver);
  public final void cancelOperation(int);
  public final void startDelete(int, java.lang.Object, android.net.Uri, java.lang.String, java.lang.String[]);
  public final void startInsert(int, java.lang.Object, android.net.Uri, android.content.ContentValues);
  public final void startUpdate(int, java.lang.Object, android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public void handleMessage(android.os.Message);
  public void startQuery(int, java.lang.Object, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  protected void onDeleteComplete(int, java.lang.Object, int);
  protected void onInsertComplete(int, java.lang.Object, android.net.Uri);
  protected void onQueryComplete(int, java.lang.Object, android.database.Cursor);
  protected void onUpdateComplete(int, java.lang.Object, int);
  protected android.os.Handler createHandler(android.os.Looper);
}
public final class android.content.AsyncQueryHandler$WorkerArgs
  extends java.lang.Object
{
  protected void <init>();
  public android.content.ContentValues values;
  public android.net.Uri uri;
  public android.os.Handler handler;
  public java.lang.Object cookie;
  public java.lang.Object result;
  public java.lang.String orderBy;
  public java.lang.String selection;
  public java.lang.String[] projection;
  public java.lang.String[] selectionArgs;
}
public class android.content.AsyncQueryHandler$WorkerHandler
  extends android.os.Handler
{
  public void <init>(android.content.AsyncQueryHandler, android.os.Looper);
  public void handleMessage(android.os.Message);
}
public abstract class android.content.AsyncTaskLoader
  extends android.content.Loader
{
  public void <init>(android.content.Context);
  public abstract java.lang.Object loadInBackground();
  public boolean isLoadInBackgroundCanceled();
  public void cancelLoadInBackground();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void onCanceled(java.lang.Object);
  public void setUpdateThrottle(long);
  protected boolean onCancelLoad();
  protected void onForceLoad();
  protected java.lang.Object onLoadInBackground();
}
public abstract class android.content.BroadcastReceiver
  extends java.lang.Object
{
  public void <init>();
  public final boolean getAbortBroadcast();
  public final boolean getDebugUnregister();
  public final boolean isInitialStickyBroadcast();
  public final boolean isOrderedBroadcast();
  public final int getResultCode();
  public final void abortBroadcast();
  public final void clearAbortBroadcast();
  public final void setDebugUnregister(boolean);
  public final void setOrderedHint(boolean);
  public final void setResult(int, java.lang.String, android.os.Bundle);
  public final void setResultCode(int);
  public final void setResultData(java.lang.String);
  public final void setResultExtras(android.os.Bundle);
  public final android.content.BroadcastReceiver$PendingResult goAsync();
  public final android.os.Bundle getResultExtras(boolean);
  public final java.lang.String getResultData();
  public abstract void onReceive(android.content.Context, android.content.Intent);
  public android.os.IBinder peekService(android.content.Context, android.content.Intent);
}
public class android.content.BroadcastReceiver$PendingResult
  extends java.lang.Object
{
  public final boolean getAbortBroadcast();
  public final int getResultCode();
  public final void abortBroadcast();
  public final void clearAbortBroadcast();
  public final void finish();
  public final void setResult(int, java.lang.String, android.os.Bundle);
  public final void setResultCode(int);
  public final void setResultData(java.lang.String);
  public final void setResultExtras(android.os.Bundle);
  public final android.os.Bundle getResultExtras(boolean);
  public final java.lang.String getResultData();
}
public class android.content.ClipData
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.ClipData newHtmlText(java.lang.CharSequence, java.lang.CharSequence, java.lang.String);
  public static android.content.ClipData newIntent(java.lang.CharSequence, android.content.Intent);
  public static android.content.ClipData newPlainText(java.lang.CharSequence, java.lang.CharSequence);
  public static android.content.ClipData newRawUri(java.lang.CharSequence, android.net.Uri);
  public static android.content.ClipData newUri(android.content.ContentResolver, java.lang.CharSequence, android.net.Uri);
  public void <init>(android.content.ClipData);
  public void <init>(android.content.ClipDescription, android.content.ClipData$Item);
  public void <init>(java.lang.CharSequence, java.lang.String[], android.content.ClipData$Item);
  public int describeContents();
  public int getItemCount();
  public void addItem(android.content.ClipData$Item);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ClipData$Item getItemAt(int);
  public android.content.ClipDescription getDescription();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.ClipData$Item
  extends java.lang.Object
{
  public void <init>(android.content.Intent);
  public void <init>(android.net.Uri);
  public void <init>(java.lang.CharSequence);
  public void <init>(java.lang.CharSequence, android.content.Intent, android.net.Uri);
  public void <init>(java.lang.CharSequence, java.lang.String);
  public void <init>(java.lang.CharSequence, java.lang.String, android.content.Intent, android.net.Uri);
  public android.content.Intent getIntent();
  public android.net.Uri getUri();
  public java.lang.CharSequence coerceToStyledText(android.content.Context);
  public java.lang.CharSequence coerceToText(android.content.Context);
  public java.lang.CharSequence getText();
  public java.lang.String coerceToHtmlText(android.content.Context);
  public java.lang.String getHtmlText();
  public java.lang.String toString();
}
public class android.content.ClipDescription
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static boolean compareMimeTypes(java.lang.String, java.lang.String);
  public void <init>(android.content.ClipDescription);
  public void <init>(java.lang.CharSequence, java.lang.String[]);
  public boolean hasMimeType(java.lang.String);
  public int describeContents();
  public int getMimeTypeCount();
  public void setExtras(android.os.PersistableBundle);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.PersistableBundle getExtras();
  public java.lang.CharSequence getLabel();
  public java.lang.String getMimeType(int);
  public java.lang.String toString();
  public java.lang.String[] filterMimeTypes(java.lang.String);
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String MIMETYPE_TEXT_HTML;
  public static final java.lang.String MIMETYPE_TEXT_INTENT;
  public static final java.lang.String MIMETYPE_TEXT_PLAIN;
  public static final java.lang.String MIMETYPE_TEXT_URILIST;
}
public class android.content.ClipboardManager
  extends android.text.ClipboardManager
{
  public boolean hasPrimaryClip();
  public boolean hasText();
  public void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener);
  public void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener);
  public void setPrimaryClip(android.content.ClipData);
  public void setText(java.lang.CharSequence);
  public android.content.ClipData getPrimaryClip();
  public android.content.ClipDescription getPrimaryClipDescription();
  public java.lang.CharSequence getText();
}
public interface android.content.ClipboardManager$OnPrimaryClipChangedListener
{
  public abstract void onPrimaryClipChanged();
}
public interface android.content.ComponentCallbacks
{
  public abstract void onConfigurationChanged(android.content.res.Configuration);
  public abstract void onLowMemory();
}
public interface android.content.ComponentCallbacks2
  extends android.content.ComponentCallbacks
{
  public abstract void onTrimMemory(int);
  public static final int TRIM_MEMORY_BACKGROUND;
  public static final int TRIM_MEMORY_COMPLETE;
  public static final int TRIM_MEMORY_MODERATE;
  public static final int TRIM_MEMORY_RUNNING_CRITICAL;
  public static final int TRIM_MEMORY_RUNNING_LOW;
  public static final int TRIM_MEMORY_RUNNING_MODERATE;
  public static final int TRIM_MEMORY_UI_HIDDEN;
}
public final class android.content.ComponentName
  extends java.lang.Object
  implements android.os.Parcelable, java.lang.Cloneable, java.lang.Comparable
{
  public static void writeToParcel(android.content.ComponentName, android.os.Parcel);
  public static android.content.ComponentName createRelative(android.content.Context, java.lang.String);
  public static android.content.ComponentName createRelative(java.lang.String, java.lang.String);
  public static android.content.ComponentName readFromParcel(android.os.Parcel);
  public static android.content.ComponentName unflattenFromString(java.lang.String);
  public void <init>(android.content.Context, java.lang.Class);
  public void <init>(android.content.Context, java.lang.String);
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public int compareTo(android.content.ComponentName);
  public int compareTo(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String flattenToShortString();
  public java.lang.String flattenToString();
  public java.lang.String getClassName();
  public java.lang.String getPackageName();
  public java.lang.String getShortClassName();
  public java.lang.String toShortString();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.content.ContentProvider
  extends java.lang.Object
  implements android.content.ComponentCallbacks2
{
  public void <init>();
  public final android.content.Context getContext();
  public final android.content.pm.PathPermission[] getPathPermissions();
  public final java.lang.String getCallingPackage();
  public final java.lang.String getReadPermission();
  public final java.lang.String getWritePermission();
  public abstract boolean onCreate();
  public abstract int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public abstract int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public abstract android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public abstract android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public abstract java.lang.String getType(android.net.Uri);
  public int bulkInsert(android.net.Uri, android.content.ContentValues[]);
  public void attachInfo(android.content.Context, android.content.pm.ProviderInfo);
  public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onLowMemory();
  public void onTrimMemory(int);
  public void shutdown();
  public android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)  throws android.content.OperationApplicationException;
  public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle)  throws java.io.FileNotFoundException;
  public android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal);
  public android.net.Uri canonicalize(android.net.Uri);
  public android.net.Uri uncanonicalize(android.net.Uri);
  public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle);
  public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri, java.lang.String, android.os.Bundle, java.lang.Object, android.content.ContentProvider$PipeDataWriter)  throws java.io.FileNotFoundException;
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
  protected final void setPathPermissions(android.content.pm.PathPermission[]);
  protected final void setReadPermission(java.lang.String);
  protected final void setWritePermission(java.lang.String);
  protected final android.os.ParcelFileDescriptor openFileHelper(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  protected boolean isTemporary();
}
public interface android.content.ContentProvider$PipeDataWriter
{
  public abstract void writeDataToPipe(android.os.ParcelFileDescriptor, android.net.Uri, java.lang.String, android.os.Bundle, java.lang.Object);
}
public class android.content.ContentProviderClient
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle)  throws android.os.RemoteException, java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal)  throws android.os.RemoteException, java.io.FileNotFoundException;
  public final android.net.Uri canonicalize(android.net.Uri)  throws android.os.RemoteException;
  public final android.net.Uri uncanonicalize(android.net.Uri)  throws android.os.RemoteException;
  public boolean release();
  public int bulkInsert(android.net.Uri, android.content.ContentValues[])  throws android.os.RemoteException;
  public int delete(android.net.Uri, java.lang.String, java.lang.String[])  throws android.os.RemoteException;
  public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])  throws android.os.RemoteException;
  public void close();
  public android.content.ContentProvider getLocalContentProvider();
  public android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)  throws android.content.OperationApplicationException, android.os.RemoteException;
  public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String)  throws android.os.RemoteException, java.io.FileNotFoundException;
  public android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws android.os.RemoteException, java.io.FileNotFoundException;
  public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)  throws android.os.RemoteException;
  public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)  throws android.os.RemoteException;
  public android.net.Uri insert(android.net.Uri, android.content.ContentValues)  throws android.os.RemoteException;
  public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle)  throws android.os.RemoteException;
  public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String)  throws android.os.RemoteException, java.io.FileNotFoundException;
  public android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws android.os.RemoteException, java.io.FileNotFoundException;
  public java.lang.String getType(android.net.Uri)  throws android.os.RemoteException;
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String)  throws android.os.RemoteException;
  protected void finalize()  throws java.lang.Throwable;
}
public class android.content.ContentProviderOperation
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri);
  public static android.content.ContentProviderOperation$Builder newDelete(android.net.Uri);
  public static android.content.ContentProviderOperation$Builder newInsert(android.net.Uri);
  public static android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri);
  public boolean isAssertQuery();
  public boolean isDelete();
  public boolean isInsert();
  public boolean isReadOperation();
  public boolean isUpdate();
  public boolean isWriteOperation();
  public boolean isYieldAllowed();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ContentProviderResult apply(android.content.ContentProvider, android.content.ContentProviderResult[], int)  throws android.content.OperationApplicationException;
  public android.content.ContentValues resolveValueBackReferences(android.content.ContentProviderResult[], int);
  public android.net.Uri getUri();
  public java.lang.String toString();
  public java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[], int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.ContentProviderOperation$Builder
  extends java.lang.Object
{
  public android.content.ContentProviderOperation build();
  public android.content.ContentProviderOperation$Builder withExpectedCount(int);
  public android.content.ContentProviderOperation$Builder withSelection(java.lang.String, java.lang.String[]);
  public android.content.ContentProviderOperation$Builder withSelectionBackReference(int, int);
  public android.content.ContentProviderOperation$Builder withValue(java.lang.String, java.lang.Object);
  public android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String, int);
  public android.content.ContentProviderOperation$Builder withValueBackReferences(android.content.ContentValues);
  public android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues);
  public android.content.ContentProviderOperation$Builder withYieldAllowed(boolean);
}
public class android.content.ContentProviderResult
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.net.Uri);
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public final android.net.Uri uri;
  public final java.lang.Integer count;
}
public class android.content.ContentQueryMap
  extends java.util.Observable
{
  public void <init>(android.database.Cursor, java.lang.String, boolean, android.os.Handler);
  public void close();
  public void requery();
  public void setKeepUpdated(boolean);
  public android.content.ContentValues getValues(java.lang.String);
  public java.util.Map getRows();
  protected void finalize()  throws java.lang.Throwable;
}
public abstract class android.content.ContentResolver
  extends java.lang.Object
{
  public static boolean getMasterSyncAutomatically();
  public static boolean getSyncAutomatically(android.accounts.Account, java.lang.String);
  public static boolean isSyncActive(android.accounts.Account, java.lang.String);
  public static boolean isSyncPending(android.accounts.Account, java.lang.String);
  public static int getIsSyncable(android.accounts.Account, java.lang.String);
  public static void addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long);
  public static void cancelSync(android.accounts.Account, java.lang.String);
  public static void cancelSync(android.content.SyncRequest);
  public static void removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle);
  public static void removeStatusChangeListener(java.lang.Object);
  public static void requestSync(android.accounts.Account, java.lang.String, android.os.Bundle);
  public static void requestSync(android.content.SyncRequest);
  public static void setIsSyncable(android.accounts.Account, java.lang.String, int);
  public static void setMasterSyncAutomatically(boolean);
  public static void setSyncAutomatically(android.accounts.Account, java.lang.String, boolean);
  public static void validateSyncExtrasBundle(android.os.Bundle);
  public static android.content.SyncAdapterType[] getSyncAdapterTypes();
  public static android.content.SyncInfo getCurrentSync();
  public static java.lang.Object addStatusChangeListener(int, android.content.SyncStatusObserver);
  public static java.util.List getCurrentSyncs();
  public static java.util.List getPeriodicSyncs(android.accounts.Account, java.lang.String);
  public void <init>(android.content.Context);
  public final int bulkInsert(android.net.Uri, android.content.ContentValues[]);
  public final int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public final void registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver);
  public final void unregisterContentObserver(android.database.ContentObserver);
  public final android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri);
  public final android.content.ContentProviderClient acquireContentProviderClient(java.lang.String);
  public final android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri);
  public final android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String);
  public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle)  throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal);
  public final android.net.Uri canonicalize(android.net.Uri);
  public final android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public final android.net.Uri uncanonicalize(android.net.Uri);
  public final android.os.Bundle call(android.net.Uri, java.lang.String, java.lang.String, android.os.Bundle);
  public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  public final android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public final java.io.InputStream openInputStream(android.net.Uri)  throws java.io.FileNotFoundException;
  public final java.io.OutputStream openOutputStream(android.net.Uri)  throws java.io.FileNotFoundException;
  public final java.io.OutputStream openOutputStream(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  public final java.lang.String getType(android.net.Uri);
  public void cancelSync(android.net.Uri);
  public void notifyChange(android.net.Uri, android.database.ContentObserver);
  public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean);
  public void notifyChange(android.net.Uri, android.database.ContentObserver, int);
  public void releasePersistableUriPermission(android.net.Uri, int);
  public void startSync(android.net.Uri, android.os.Bundle);
  public void takePersistableUriPermission(android.net.Uri, int);
  public android.content.ContentProviderResult[] applyBatch(java.lang.String, java.util.ArrayList)  throws android.content.OperationApplicationException, android.os.RemoteException;
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
  public java.util.List getOutgoingPersistedUriPermissions();
  public java.util.List getPersistedUriPermissions();
  public static final int NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS;
  public static final int NOTIFY_SYNC_TO_NETWORK;
  public static final int SYNC_OBSERVER_TYPE_ACTIVE;
  public static final int SYNC_OBSERVER_TYPE_PENDING;
  public static final int SYNC_OBSERVER_TYPE_SETTINGS;
  public static final java.lang.String ANY_CURSOR_ITEM_TYPE;
  public static final java.lang.String CURSOR_DIR_BASE_TYPE;
  public static final java.lang.String CURSOR_ITEM_BASE_TYPE;
  public static final java.lang.String EXTRA_SIZE;
  public static final java.lang.String SCHEME_ANDROID_RESOURCE;
  public static final java.lang.String SCHEME_CONTENT;
  public static final java.lang.String SCHEME_FILE;
  public static final java.lang.String SYNC_EXTRAS_ACCOUNT;
  public static final java.lang.String SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS;
  public static final java.lang.String SYNC_EXTRAS_DO_NOT_RETRY;
  public static final java.lang.String SYNC_EXTRAS_EXPEDITED;
  public static final java.lang.String SYNC_EXTRAS_FORCE;
  public static final java.lang.String SYNC_EXTRAS_IGNORE_BACKOFF;
  public static final java.lang.String SYNC_EXTRAS_IGNORE_SETTINGS;
  public static final java.lang.String SYNC_EXTRAS_INITIALIZE;
  public static final java.lang.String SYNC_EXTRAS_MANUAL;
  public static final java.lang.String SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS;
  public static final java.lang.String SYNC_EXTRAS_REQUIRE_CHARGING;
  public static final java.lang.String SYNC_EXTRAS_UPLOAD;
}
public class android.content.ContentUris
  extends java.lang.Object
{
  public static long parseId(android.net.Uri);
  public static android.net.Uri withAppendedId(android.net.Uri, long);
  public static android.net.Uri$Builder appendId(android.net.Uri$Builder, long);
  public void <init>();
}
public final class android.content.ContentValues
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.ContentValues);
  public void <init>(int);
  public boolean containsKey(java.lang.String);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public int size();
  public void clear();
  public void put(java.lang.String, byte[]);
  public void put(java.lang.String, java.lang.Boolean);
  public void put(java.lang.String, java.lang.Byte);
  public void put(java.lang.String, java.lang.Double);
  public void put(java.lang.String, java.lang.Float);
  public void put(java.lang.String, java.lang.Integer);
  public void put(java.lang.String, java.lang.Long);
  public void put(java.lang.String, java.lang.Short);
  public void put(java.lang.String, java.lang.String);
  public void putAll(android.content.ContentValues);
  public void putNull(java.lang.String);
  public void remove(java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public byte[] getAsByteArray(java.lang.String);
  public java.lang.Boolean getAsBoolean(java.lang.String);
  public java.lang.Byte getAsByte(java.lang.String);
  public java.lang.Double getAsDouble(java.lang.String);
  public java.lang.Float getAsFloat(java.lang.String);
  public java.lang.Integer getAsInteger(java.lang.String);
  public java.lang.Long getAsLong(java.lang.String);
  public java.lang.Object get(java.lang.String);
  public java.lang.Short getAsShort(java.lang.String);
  public java.lang.String getAsString(java.lang.String);
  public java.lang.String toString();
  public java.util.Set keySet();
  public java.util.Set valueSet();
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String TAG;
}
public abstract class android.content.Context
  extends java.lang.Object
{
  public void <init>();
  public final int getColor(int);
  public final android.content.res.ColorStateList getColorStateList(int);
  public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[]);
  public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int);
  public final android.content.res.TypedArray obtainStyledAttributes(int, int[])  throws android.content.res.Resources$NotFoundException;
  public final android.content.res.TypedArray obtainStyledAttributes(int[]);
  public final android.graphics.drawable.Drawable getDrawable(int);
  public final java.lang.CharSequence getText(int);
  public final java.lang.Object getSystemService(java.lang.Class);
  public final java.lang.String getString(int);
  public final java.lang.String getString(int, java.lang.Object[]);
  public abstract boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public abstract boolean deleteDatabase(java.lang.String);
  public abstract boolean deleteFile(java.lang.String);
  public abstract boolean deleteSharedPreferences(java.lang.String);
  public abstract boolean isDeviceProtectedStorage();
  public abstract boolean moveDatabaseFrom(android.content.Context, java.lang.String);
  public abstract boolean moveSharedPreferencesFrom(android.content.Context, java.lang.String);
  public abstract boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public abstract boolean stopService(android.content.Intent);
  public abstract int checkCallingOrSelfPermission(java.lang.String);
  public abstract int checkCallingOrSelfUriPermission(android.net.Uri, int);
  public abstract int checkCallingPermission(java.lang.String);
  public abstract int checkCallingUriPermission(android.net.Uri, int);
  public abstract int checkPermission(java.lang.String, int, int);
  public abstract int checkSelfPermission(java.lang.String);
  public abstract int checkUriPermission(android.net.Uri, int, int, int);
  public abstract int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public abstract int getWallpaperDesiredMinimumHeight();
  public abstract int getWallpaperDesiredMinimumWidth();
  public abstract void clearWallpaper()  throws java.io.IOException;
  public abstract void enforceCallingOrSelfPermission(java.lang.String, java.lang.String);
  public abstract void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String);
  public abstract void enforceCallingPermission(java.lang.String, java.lang.String);
  public abstract void enforceCallingUriPermission(android.net.Uri, int, java.lang.String);
  public abstract void enforcePermission(java.lang.String, int, int, java.lang.String);
  public abstract void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String);
  public abstract void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String);
  public abstract void grantUriPermission(java.lang.String, android.net.Uri, int);
  public abstract void removeStickyBroadcast(android.content.Intent);
  public abstract void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public abstract void revokeUriPermission(android.net.Uri, int);
  public abstract void sendBroadcast(android.content.Intent);
  public abstract void sendBroadcast(android.content.Intent, java.lang.String);
  public abstract void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public abstract void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String);
  public abstract void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public abstract void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public abstract void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public abstract void sendStickyBroadcast(android.content.Intent);
  public abstract void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public abstract void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public abstract void setTheme(int);
  public abstract void setWallpaper(android.graphics.Bitmap)  throws java.io.IOException;
  public abstract void setWallpaper(java.io.InputStream)  throws java.io.IOException;
  public abstract void startActivities(android.content.Intent[]);
  public abstract void startActivities(android.content.Intent[], android.os.Bundle);
  public abstract void startActivity(android.content.Intent);
  public abstract void startActivity(android.content.Intent, android.os.Bundle);
  public abstract void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)  throws android.content.IntentSender$SendIntentException;
  public abstract void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public abstract void unbindService(android.content.ServiceConnection);
  public abstract void unregisterReceiver(android.content.BroadcastReceiver);
  public abstract android.content.ComponentName startService(android.content.Intent);
  public abstract android.content.ContentResolver getContentResolver();
  public abstract android.content.Context createConfigurationContext(android.content.res.Configuration);
  public abstract android.content.Context createDeviceProtectedStorageContext();
  public abstract android.content.Context createDisplayContext(android.view.Display);
  public abstract android.content.Context createPackageContext(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.Context getApplicationContext();
  public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String, int);
  public abstract android.content.pm.ApplicationInfo getApplicationInfo();
  public abstract android.content.pm.PackageManager getPackageManager();
  public abstract android.content.res.AssetManager getAssets();
  public abstract android.content.res.Resources getResources();
  public abstract android.content.res.Resources$Theme getTheme();
  public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public abstract android.graphics.drawable.Drawable getWallpaper();
  public abstract android.graphics.drawable.Drawable peekWallpaper();
  public abstract android.os.Looper getMainLooper();
  public abstract java.io.File getCacheDir();
  public abstract java.io.File getCodeCacheDir();
  public abstract java.io.File getDataDir();
  public abstract java.io.File getDatabasePath(java.lang.String);
  public abstract java.io.File getDir(java.lang.String, int);
  public abstract java.io.File getExternalCacheDir();
  public abstract java.io.File getExternalFilesDir(java.lang.String);
  public abstract java.io.File getFileStreamPath(java.lang.String);
  public abstract java.io.File getFilesDir();
  public abstract java.io.File getNoBackupFilesDir();
  public abstract java.io.File getObbDir();
  public abstract java.io.FileInputStream openFileInput(java.lang.String)  throws java.io.FileNotFoundException;
  public abstract java.io.FileOutputStream openFileOutput(java.lang.String, int)  throws java.io.FileNotFoundException;
  public abstract java.io.File[] getExternalCacheDirs();
  public abstract java.io.File[] getExternalFilesDirs(java.lang.String);
  public abstract java.io.File[] getExternalMediaDirs();
  public abstract java.io.File[] getObbDirs();
  public abstract java.lang.ClassLoader getClassLoader();
  public abstract java.lang.Object getSystemService(java.lang.String);
  public abstract java.lang.String getPackageCodePath();
  public abstract java.lang.String getPackageName();
  public abstract java.lang.String getPackageResourcePath();
  public abstract java.lang.String getSystemServiceName(java.lang.Class);
  public abstract java.lang.String[] databaseList();
  public abstract java.lang.String[] fileList();
  public boolean isRestricted();
  public void registerComponentCallbacks(android.content.ComponentCallbacks);
  public void unregisterComponentCallbacks(android.content.ComponentCallbacks);
  public static final int BIND_ABOVE_CLIENT;
  public static final int BIND_ADJUST_WITH_ACTIVITY;
  public static final int BIND_ALLOW_OOM_MANAGEMENT;
  public static final int BIND_AUTO_CREATE;
  public static final int BIND_DEBUG_UNBIND;
  public static final int BIND_EXTERNAL_SERVICE;
  public static final int BIND_IMPORTANT;
  public static final int BIND_NOT_FOREGROUND;
  public static final int BIND_WAIVE_PRIORITY;
  public static final int CONTEXT_IGNORE_SECURITY;
  public static final int CONTEXT_INCLUDE_CODE;
  public static final int CONTEXT_RESTRICTED;
  public static final int MODE_APPEND;
  public static final int MODE_ENABLE_WRITE_AHEAD_LOGGING;
  public static final int MODE_MULTI_PROCESS;
  public static final int MODE_NO_LOCALIZED_COLLATORS;
  public static final int MODE_PRIVATE;
  public static final int MODE_WORLD_READABLE;
  public static final int MODE_WORLD_WRITEABLE;
  public static final java.lang.String ACCESSIBILITY_SERVICE;
  public static final java.lang.String ACCOUNT_SERVICE;
  public static final java.lang.String ACTIVITY_SERVICE;
  public static final java.lang.String ALARM_SERVICE;
  public static final java.lang.String APPWIDGET_SERVICE;
  public static final java.lang.String APP_OPS_SERVICE;
  public static final java.lang.String AUDIO_SERVICE;
  public static final java.lang.String BATTERY_SERVICE;
  public static final java.lang.String BLUETOOTH_SERVICE;
  public static final java.lang.String CAMERA_SERVICE;
  public static final java.lang.String CAPTIONING_SERVICE;
  public static final java.lang.String CARRIER_CONFIG_SERVICE;
  public static final java.lang.String CLIPBOARD_SERVICE;
  public static final java.lang.String CONNECTIVITY_SERVICE;
  public static final java.lang.String CONSUMER_IR_SERVICE;
  public static final java.lang.String DEVICE_POLICY_SERVICE;
  public static final java.lang.String DISPLAY_SERVICE;
  public static final java.lang.String DOWNLOAD_SERVICE;
  public static final java.lang.String DROPBOX_SERVICE;
  public static final java.lang.String FINGERPRINT_SERVICE;
  public static final java.lang.String HARDWARE_PROPERTIES_SERVICE;
  public static final java.lang.String INPUT_METHOD_SERVICE;
  public static final java.lang.String INPUT_SERVICE;
  public static final java.lang.String JOB_SCHEDULER_SERVICE;
  public static final java.lang.String KEYGUARD_SERVICE;
  public static final java.lang.String LAUNCHER_APPS_SERVICE;
  public static final java.lang.String LAYOUT_INFLATER_SERVICE;
  public static final java.lang.String LOCATION_SERVICE;
  public static final java.lang.String MEDIA_PROJECTION_SERVICE;
  public static final java.lang.String MEDIA_ROUTER_SERVICE;
  public static final java.lang.String MEDIA_SESSION_SERVICE;
  public static final java.lang.String MIDI_SERVICE;
  public static final java.lang.String NETWORK_STATS_SERVICE;
  public static final java.lang.String NFC_SERVICE;
  public static final java.lang.String NOTIFICATION_SERVICE;
  public static final java.lang.String NSD_SERVICE;
  public static final java.lang.String POWER_SERVICE;
  public static final java.lang.String PRINT_SERVICE;
  public static final java.lang.String RESTRICTIONS_SERVICE;
  public static final java.lang.String SEARCH_SERVICE;
  public static final java.lang.String SENSOR_SERVICE;
  public static final java.lang.String STORAGE_SERVICE;
  public static final java.lang.String SYSTEM_HEALTH_SERVICE;
  public static final java.lang.String TELECOM_SERVICE;
  public static final java.lang.String TELEPHONY_SERVICE;
  public static final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE;
  public static final java.lang.String TEXT_SERVICES_MANAGER_SERVICE;
  public static final java.lang.String TV_INPUT_SERVICE;
  public static final java.lang.String UI_MODE_SERVICE;
  public static final java.lang.String USAGE_STATS_SERVICE;
  public static final java.lang.String USB_SERVICE;
  public static final java.lang.String USER_SERVICE;
  public static final java.lang.String VIBRATOR_SERVICE;
  public static final java.lang.String WALLPAPER_SERVICE;
  public static final java.lang.String WIFI_P2P_SERVICE;
  public static final java.lang.String WIFI_SERVICE;
  public static final java.lang.String WINDOW_SERVICE;
}
public class android.content.ContextWrapper
  extends android.content.Context
{
  public void <init>(android.content.Context);
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public boolean deleteDatabase(java.lang.String);
  public boolean deleteFile(java.lang.String);
  public boolean deleteSharedPreferences(java.lang.String);
  public boolean isDeviceProtectedStorage();
  public boolean isRestricted();
  public boolean moveDatabaseFrom(android.content.Context, java.lang.String);
  public boolean moveSharedPreferencesFrom(android.content.Context, java.lang.String);
  public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public boolean stopService(android.content.Intent);
  public int checkCallingOrSelfPermission(java.lang.String);
  public int checkCallingOrSelfUriPermission(android.net.Uri, int);
  public int checkCallingPermission(java.lang.String);
  public int checkCallingUriPermission(android.net.Uri, int);
  public int checkPermission(java.lang.String, int, int);
  public int checkSelfPermission(java.lang.String);
  public int checkUriPermission(android.net.Uri, int, int, int);
  public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public int getWallpaperDesiredMinimumHeight();
  public int getWallpaperDesiredMinimumWidth();
  public void clearWallpaper()  throws java.io.IOException;
  public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String);
  public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceCallingPermission(java.lang.String, java.lang.String);
  public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String);
  public void enforcePermission(java.lang.String, int, int, java.lang.String);
  public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String);
  public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String);
  public void grantUriPermission(java.lang.String, android.net.Uri, int);
  public void removeStickyBroadcast(android.content.Intent);
  public void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public void revokeUriPermission(android.net.Uri, int);
  public void sendBroadcast(android.content.Intent);
  public void sendBroadcast(android.content.Intent, java.lang.String);
  public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendStickyBroadcast(android.content.Intent);
  public void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void setTheme(int);
  public void setWallpaper(android.graphics.Bitmap)  throws java.io.IOException;
  public void setWallpaper(java.io.InputStream)  throws java.io.IOException;
  public void startActivities(android.content.Intent[]);
  public void startActivities(android.content.Intent[], android.os.Bundle);
  public void startActivity(android.content.Intent);
  public void startActivity(android.content.Intent, android.os.Bundle);
  public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)  throws android.content.IntentSender$SendIntentException;
  public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public void unbindService(android.content.ServiceConnection);
  public void unregisterReceiver(android.content.BroadcastReceiver);
  public android.content.ComponentName startService(android.content.Intent);
  public android.content.ContentResolver getContentResolver();
  public android.content.Context createConfigurationContext(android.content.res.Configuration);
  public android.content.Context createDeviceProtectedStorageContext();
  public android.content.Context createDisplayContext(android.view.Display);
  public android.content.Context createPackageContext(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.Context getApplicationContext();
  public android.content.Context getBaseContext();
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public android.content.SharedPreferences getSharedPreferences(java.lang.String, int);
  public android.content.pm.ApplicationInfo getApplicationInfo();
  public android.content.pm.PackageManager getPackageManager();
  public android.content.res.AssetManager getAssets();
  public android.content.res.Resources getResources();
  public android.content.res.Resources$Theme getTheme();
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public android.graphics.drawable.Drawable getWallpaper();
  public android.graphics.drawable.Drawable peekWallpaper();
  public android.os.Looper getMainLooper();
  public java.io.File getCacheDir();
  public java.io.File getCodeCacheDir();
  public java.io.File getDataDir();
  public java.io.File getDatabasePath(java.lang.String);
  public java.io.File getDir(java.lang.String, int);
  public java.io.File getExternalCacheDir();
  public java.io.File getExternalFilesDir(java.lang.String);
  public java.io.File getFileStreamPath(java.lang.String);
  public java.io.File getFilesDir();
  public java.io.File getNoBackupFilesDir();
  public java.io.File getObbDir();
  public java.io.FileInputStream openFileInput(java.lang.String)  throws java.io.FileNotFoundException;
  public java.io.FileOutputStream openFileOutput(java.lang.String, int)  throws java.io.FileNotFoundException;
  public java.io.File[] getExternalCacheDirs();
  public java.io.File[] getExternalFilesDirs(java.lang.String);
  public java.io.File[] getExternalMediaDirs();
  public java.io.File[] getObbDirs();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.Object getSystemService(java.lang.String);
  public java.lang.String getPackageCodePath();
  public java.lang.String getPackageName();
  public java.lang.String getPackageResourcePath();
  public java.lang.String getSystemServiceName(java.lang.Class);
  public java.lang.String[] databaseList();
  public java.lang.String[] fileList();
  protected void attachBaseContext(android.content.Context);
}
public class android.content.CursorLoader
  extends android.content.AsyncTaskLoader
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public void cancelLoadInBackground();
  public void deliverResult(android.database.Cursor);
  public void deliverResult(java.lang.Object);
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void onCanceled(android.database.Cursor);
  public void onCanceled(java.lang.Object);
  public void setProjection(java.lang.String[]);
  public void setSelection(java.lang.String);
  public void setSelectionArgs(java.lang.String[]);
  public void setSortOrder(java.lang.String);
  public void setUri(android.net.Uri);
  public android.database.Cursor loadInBackground();
  public android.net.Uri getUri();
  public java.lang.Object loadInBackground();
  public java.lang.String getSelection();
  public java.lang.String getSortOrder();
  public java.lang.String[] getProjection();
  public java.lang.String[] getSelectionArgs();
  protected void onReset();
  protected void onStartLoading();
  protected void onStopLoading();
}
public interface android.content.DialogInterface
{
  public abstract void cancel();
  public abstract void dismiss();
  public static final int BUTTON1;
  public static final int BUTTON2;
  public static final int BUTTON3;
  public static final int BUTTON_NEGATIVE;
  public static final int BUTTON_NEUTRAL;
  public static final int BUTTON_POSITIVE;
}
public interface android.content.DialogInterface$OnCancelListener
{
  public abstract void onCancel(android.content.DialogInterface);
}
public interface android.content.DialogInterface$OnClickListener
{
  public abstract void onClick(android.content.DialogInterface, int);
}
public interface android.content.DialogInterface$OnDismissListener
{
  public abstract void onDismiss(android.content.DialogInterface);
}
public interface android.content.DialogInterface$OnKeyListener
{
  public abstract boolean onKey(android.content.DialogInterface, int, android.view.KeyEvent);
}
public interface android.content.DialogInterface$OnMultiChoiceClickListener
{
  public abstract void onClick(android.content.DialogInterface, int, boolean);
}
public interface android.content.DialogInterface$OnShowListener
{
  public abstract void onShow(android.content.DialogInterface);
}
public final class android.content.Entity
  extends java.lang.Object
{
  public void <init>(android.content.ContentValues);
  public void addSubValue(android.net.Uri, android.content.ContentValues);
  public android.content.ContentValues getEntityValues();
  public java.lang.String toString();
  public java.util.ArrayList getSubValues();
}
public class android.content.Entity$NamedContentValues
  extends java.lang.Object
{
  public void <init>(android.net.Uri, android.content.ContentValues);
  public final android.content.ContentValues values;
  public final android.net.Uri uri;
}
public interface android.content.EntityIterator
  extends java.util.Iterator
{
  public abstract void close();
  public abstract void reset();
}
public class android.content.Intent
  extends java.lang.Object
  implements android.os.Parcelable, java.lang.Cloneable
{
  public static android.content.Intent createChooser(android.content.Intent, java.lang.CharSequence);
  public static android.content.Intent createChooser(android.content.Intent, java.lang.CharSequence, android.content.IntentSender);
  public static android.content.Intent getIntent(java.lang.String)  throws java.net.URISyntaxException;
  public static android.content.Intent getIntentOld(java.lang.String)  throws java.net.URISyntaxException;
  public static android.content.Intent makeMainActivity(android.content.ComponentName);
  public static android.content.Intent makeMainSelectorActivity(java.lang.String, java.lang.String);
  public static android.content.Intent makeRestartActivityTask(android.content.ComponentName);
  public static android.content.Intent parseIntent(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public static android.content.Intent parseUri(java.lang.String, int)  throws java.net.URISyntaxException;
  public static java.lang.String normalizeMimeType(java.lang.String);
  public void <init>();
  public void <init>(android.content.Context, java.lang.Class);
  public void <init>(android.content.Intent);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, android.net.Uri);
  public void <init>(java.lang.String, android.net.Uri, android.content.Context, java.lang.Class);
  public boolean filterEquals(android.content.Intent);
  public boolean getBooleanExtra(java.lang.String, boolean);
  public boolean hasCategory(java.lang.String);
  public boolean hasExtra(java.lang.String);
  public boolean hasFileDescriptors();
  public byte getByteExtra(java.lang.String, byte);
  public char getCharExtra(java.lang.String, char);
  public double getDoubleExtra(java.lang.String, double);
  public float getFloatExtra(java.lang.String, float);
  public int describeContents();
  public int fillIn(android.content.Intent, int);
  public int filterHashCode();
  public int getFlags();
  public int getIntExtra(java.lang.String, int);
  public long getLongExtra(java.lang.String, long);
  public short getShortExtra(java.lang.String, short);
  public void readFromParcel(android.os.Parcel);
  public void removeCategory(java.lang.String);
  public void removeExtra(java.lang.String);
  public void setClipData(android.content.ClipData);
  public void setExtrasClassLoader(java.lang.ClassLoader);
  public void setSelector(android.content.Intent);
  public void setSourceBounds(android.graphics.Rect);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ClipData getClipData();
  public android.content.ComponentName getComponent();
  public android.content.ComponentName resolveActivity(android.content.pm.PackageManager);
  public android.content.Intent addCategory(java.lang.String);
  public android.content.Intent addFlags(int);
  public android.content.Intent cloneFilter();
  public android.content.Intent getSelector();
  public android.content.Intent putCharSequenceArrayListExtra(java.lang.String, java.util.ArrayList);
  public android.content.Intent putExtra(java.lang.String, android.os.Bundle);
  public android.content.Intent putExtra(java.lang.String, android.os.Parcelable);
  public android.content.Intent putExtra(java.lang.String, android.os.Parcelable[]);
  public android.content.Intent putExtra(java.lang.String, boolean);
  public android.content.Intent putExtra(java.lang.String, boolean[]);
  public android.content.Intent putExtra(java.lang.String, byte);
  public android.content.Intent putExtra(java.lang.String, byte[]);
  public android.content.Intent putExtra(java.lang.String, char);
  public android.content.Intent putExtra(java.lang.String, char[]);
  public android.content.Intent putExtra(java.lang.String, double);
  public android.content.Intent putExtra(java.lang.String, double[]);
  public android.content.Intent putExtra(java.lang.String, float);
  public android.content.Intent putExtra(java.lang.String, float[]);
  public android.content.Intent putExtra(java.lang.String, int);
  public android.content.Intent putExtra(java.lang.String, int[]);
  public android.content.Intent putExtra(java.lang.String, java.io.Serializable);
  public android.content.Intent putExtra(java.lang.String, java.lang.CharSequence);
  public android.content.Intent putExtra(java.lang.String, java.lang.CharSequence[]);
  public android.content.Intent putExtra(java.lang.String, java.lang.String);
  public android.content.Intent putExtra(java.lang.String, java.lang.String[]);
  public android.content.Intent putExtra(java.lang.String, long);
  public android.content.Intent putExtra(java.lang.String, long[]);
  public android.content.Intent putExtra(java.lang.String, short);
  public android.content.Intent putExtra(java.lang.String, short[]);
  public android.content.Intent putExtras(android.content.Intent);
  public android.content.Intent putExtras(android.os.Bundle);
  public android.content.Intent putIntegerArrayListExtra(java.lang.String, java.util.ArrayList);
  public android.content.Intent putParcelableArrayListExtra(java.lang.String, java.util.ArrayList);
  public android.content.Intent putStringArrayListExtra(java.lang.String, java.util.ArrayList);
  public android.content.Intent replaceExtras(android.content.Intent);
  public android.content.Intent replaceExtras(android.os.Bundle);
  public android.content.Intent setAction(java.lang.String);
  public android.content.Intent setClass(android.content.Context, java.lang.Class);
  public android.content.Intent setClassName(android.content.Context, java.lang.String);
  public android.content.Intent setClassName(java.lang.String, java.lang.String);
  public android.content.Intent setComponent(android.content.ComponentName);
  public android.content.Intent setData(android.net.Uri);
  public android.content.Intent setDataAndNormalize(android.net.Uri);
  public android.content.Intent setDataAndType(android.net.Uri, java.lang.String);
  public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri, java.lang.String);
  public android.content.Intent setFlags(int);
  public android.content.Intent setPackage(java.lang.String);
  public android.content.Intent setType(java.lang.String);
  public android.content.Intent setTypeAndNormalize(java.lang.String);
  public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager, int);
  public android.graphics.Rect getSourceBounds();
  public android.net.Uri getData();
  public android.os.Bundle getBundleExtra(java.lang.String);
  public android.os.Bundle getExtras();
  public android.os.Parcelable getParcelableExtra(java.lang.String);
  public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String);
  public boolean[] getBooleanArrayExtra(java.lang.String);
  public byte[] getByteArrayExtra(java.lang.String);
  public char[] getCharArrayExtra(java.lang.String);
  public double[] getDoubleArrayExtra(java.lang.String);
  public float[] getFloatArrayExtra(java.lang.String);
  public int[] getIntArrayExtra(java.lang.String);
  public java.io.Serializable getSerializableExtra(java.lang.String);
  public java.lang.CharSequence getCharSequenceExtra(java.lang.String);
  public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String);
  public java.lang.Object clone();
  public java.lang.String getAction();
  public java.lang.String getDataString();
  public java.lang.String getPackage();
  public java.lang.String getScheme();
  public java.lang.String getStringExtra(java.lang.String);
  public java.lang.String getType();
  public java.lang.String resolveType(android.content.ContentResolver);
  public java.lang.String resolveType(android.content.Context);
  public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver);
  public java.lang.String toString();
  public java.lang.String toURI();
  public java.lang.String toUri(int);
  public java.lang.String[] getStringArrayExtra(java.lang.String);
  public java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String);
  public java.util.ArrayList getIntegerArrayListExtra(java.lang.String);
  public java.util.ArrayList getParcelableArrayListExtra(java.lang.String);
  public java.util.ArrayList getStringArrayListExtra(java.lang.String);
  public java.util.Set getCategories();
  public long[] getLongArrayExtra(java.lang.String);
  public short[] getShortArrayExtra(java.lang.String);
  public static final int EXTRA_DOCK_STATE_CAR;
  public static final int EXTRA_DOCK_STATE_DESK;
  public static final int EXTRA_DOCK_STATE_HE_DESK;
  public static final int EXTRA_DOCK_STATE_LE_DESK;
  public static final int EXTRA_DOCK_STATE_UNDOCKED;
  public static final int FILL_IN_ACTION;
  public static final int FILL_IN_CATEGORIES;
  public static final int FILL_IN_CLIP_DATA;
  public static final int FILL_IN_COMPONENT;
  public static final int FILL_IN_DATA;
  public static final int FILL_IN_PACKAGE;
  public static final int FILL_IN_SELECTOR;
  public static final int FILL_IN_SOURCE_BOUNDS;
  public static final int FLAG_ACTIVITY_BROUGHT_TO_FRONT;
  public static final int FLAG_ACTIVITY_CLEAR_TASK;
  public static final int FLAG_ACTIVITY_CLEAR_TOP;
  public static final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET;
  public static final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS;
  public static final int FLAG_ACTIVITY_FORWARD_RESULT;
  public static final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY;
  public static final int FLAG_ACTIVITY_LAUNCH_ADJACENT;
  public static final int FLAG_ACTIVITY_MULTIPLE_TASK;
  public static final int FLAG_ACTIVITY_NEW_DOCUMENT;
  public static final int FLAG_ACTIVITY_NEW_TASK;
  public static final int FLAG_ACTIVITY_NO_ANIMATION;
  public static final int FLAG_ACTIVITY_NO_HISTORY;
  public static final int FLAG_ACTIVITY_NO_USER_ACTION;
  public static final int FLAG_ACTIVITY_PREVIOUS_IS_TOP;
  public static final int FLAG_ACTIVITY_REORDER_TO_FRONT;
  public static final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED;
  public static final int FLAG_ACTIVITY_RETAIN_IN_RECENTS;
  public static final int FLAG_ACTIVITY_SINGLE_TOP;
  public static final int FLAG_ACTIVITY_TASK_ON_HOME;
  public static final int FLAG_DEBUG_LOG_RESOLUTION;
  public static final int FLAG_EXCLUDE_STOPPED_PACKAGES;
  public static final int FLAG_FROM_BACKGROUND;
  public static final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION;
  public static final int FLAG_GRANT_PREFIX_URI_PERMISSION;
  public static final int FLAG_GRANT_READ_URI_PERMISSION;
  public static final int FLAG_GRANT_WRITE_URI_PERMISSION;
  public static final int FLAG_INCLUDE_STOPPED_PACKAGES;
  public static final int FLAG_RECEIVER_FOREGROUND;
  public static final int FLAG_RECEIVER_NO_ABORT;
  public static final int FLAG_RECEIVER_REGISTERED_ONLY;
  public static final int FLAG_RECEIVER_REPLACE_PENDING;
  public static final int URI_ALLOW_UNSAFE;
  public static final int URI_ANDROID_APP_SCHEME;
  public static final int URI_INTENT_SCHEME;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String ACTION_AIRPLANE_MODE_CHANGED;
  public static final java.lang.String ACTION_ALL_APPS;
  public static final java.lang.String ACTION_ANSWER;
  public static final java.lang.String ACTION_APPLICATION_PREFERENCES;
  public static final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED;
  public static final java.lang.String ACTION_APP_ERROR;
  public static final java.lang.String ACTION_ASSIST;
  public static final java.lang.String ACTION_ATTACH_DATA;
  public static final java.lang.String ACTION_BATTERY_CHANGED;
  public static final java.lang.String ACTION_BATTERY_LOW;
  public static final java.lang.String ACTION_BATTERY_OKAY;
  public static final java.lang.String ACTION_BOOT_COMPLETED;
  public static final java.lang.String ACTION_BUG_REPORT;
  public static final java.lang.String ACTION_CALL;
  public static final java.lang.String ACTION_CALL_BUTTON;
  public static final java.lang.String ACTION_CAMERA_BUTTON;
  public static final java.lang.String ACTION_CHOOSER;
  public static final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS;
  public static final java.lang.String ACTION_CONFIGURATION_CHANGED;
  public static final java.lang.String ACTION_CREATE_DOCUMENT;
  public static final java.lang.String ACTION_CREATE_SHORTCUT;
  public static final java.lang.String ACTION_DATE_CHANGED;
  public static final java.lang.String ACTION_DEFAULT;
  public static final java.lang.String ACTION_DELETE;
  public static final java.lang.String ACTION_DEVICE_STORAGE_LOW;
  public static final java.lang.String ACTION_DEVICE_STORAGE_OK;
  public static final java.lang.String ACTION_DIAL;
  public static final java.lang.String ACTION_DOCK_EVENT;
  public static final java.lang.String ACTION_DREAMING_STARTED;
  public static final java.lang.String ACTION_DREAMING_STOPPED;
  public static final java.lang.String ACTION_EDIT;
  public static final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE;
  public static final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE;
  public static final java.lang.String ACTION_FACTORY_TEST;
  public static final java.lang.String ACTION_GET_CONTENT;
  public static final java.lang.String ACTION_GET_RESTRICTION_ENTRIES;
  public static final java.lang.String ACTION_GTALK_SERVICE_CONNECTED;
  public static final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED;
  public static final java.lang.String ACTION_HEADSET_PLUG;
  public static final java.lang.String ACTION_INPUT_METHOD_CHANGED;
  public static final java.lang.String ACTION_INSERT;
  public static final java.lang.String ACTION_INSERT_OR_EDIT;
  public static final java.lang.String ACTION_INSTALL_PACKAGE;
  public static final java.lang.String ACTION_LOCALE_CHANGED;
  public static final java.lang.String ACTION_LOCKED_BOOT_COMPLETED;
  public static final java.lang.String ACTION_MAIN;
  public static final java.lang.String ACTION_MANAGED_PROFILE_ADDED;
  public static final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE;
  public static final java.lang.String ACTION_MANAGED_PROFILE_REMOVED;
  public static final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE;
  public static final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED;
  public static final java.lang.String ACTION_MANAGE_NETWORK_USAGE;
  public static final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE;
  public static final java.lang.String ACTION_MEDIA_BAD_REMOVAL;
  public static final java.lang.String ACTION_MEDIA_BUTTON;
  public static final java.lang.String ACTION_MEDIA_CHECKING;
  public static final java.lang.String ACTION_MEDIA_EJECT;
  public static final java.lang.String ACTION_MEDIA_MOUNTED;
  public static final java.lang.String ACTION_MEDIA_NOFS;
  public static final java.lang.String ACTION_MEDIA_REMOVED;
  public static final java.lang.String ACTION_MEDIA_SCANNER_FINISHED;
  public static final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE;
  public static final java.lang.String ACTION_MEDIA_SCANNER_STARTED;
  public static final java.lang.String ACTION_MEDIA_SHARED;
  public static final java.lang.String ACTION_MEDIA_UNMOUNTABLE;
  public static final java.lang.String ACTION_MEDIA_UNMOUNTED;
  public static final java.lang.String ACTION_MY_PACKAGE_REPLACED;
  public static final java.lang.String ACTION_NEW_OUTGOING_CALL;
  public static final java.lang.String ACTION_OPEN_DOCUMENT;
  public static final java.lang.String ACTION_OPEN_DOCUMENT_TREE;
  public static final java.lang.String ACTION_PACKAGES_SUSPENDED;
  public static final java.lang.String ACTION_PACKAGES_UNSUSPENDED;
  public static final java.lang.String ACTION_PACKAGE_ADDED;
  public static final java.lang.String ACTION_PACKAGE_CHANGED;
  public static final java.lang.String ACTION_PACKAGE_DATA_CLEARED;
  public static final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH;
  public static final java.lang.String ACTION_PACKAGE_FULLY_REMOVED;
  public static final java.lang.String ACTION_PACKAGE_INSTALL;
  public static final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION;
  public static final java.lang.String ACTION_PACKAGE_REMOVED;
  public static final java.lang.String ACTION_PACKAGE_REPLACED;
  public static final java.lang.String ACTION_PACKAGE_RESTARTED;
  public static final java.lang.String ACTION_PACKAGE_VERIFIED;
  public static final java.lang.String ACTION_PASTE;
  public static final java.lang.String ACTION_PICK;
  public static final java.lang.String ACTION_PICK_ACTIVITY;
  public static final java.lang.String ACTION_POWER_CONNECTED;
  public static final java.lang.String ACTION_POWER_DISCONNECTED;
  public static final java.lang.String ACTION_POWER_USAGE_SUMMARY;
  public static final java.lang.String ACTION_PROCESS_TEXT;
  public static final java.lang.String ACTION_PROVIDER_CHANGED;
  public static final java.lang.String ACTION_QUICK_CLOCK;
  public static final java.lang.String ACTION_QUICK_VIEW;
  public static final java.lang.String ACTION_REBOOT;
  public static final java.lang.String ACTION_RUN;
  public static final java.lang.String ACTION_SCREEN_OFF;
  public static final java.lang.String ACTION_SCREEN_ON;
  public static final java.lang.String ACTION_SEARCH;
  public static final java.lang.String ACTION_SEARCH_LONG_PRESS;
  public static final java.lang.String ACTION_SEND;
  public static final java.lang.String ACTION_SENDTO;
  public static final java.lang.String ACTION_SEND_MULTIPLE;
  public static final java.lang.String ACTION_SET_WALLPAPER;
  public static final java.lang.String ACTION_SHOW_APP_INFO;
  public static final java.lang.String ACTION_SHUTDOWN;
  public static final java.lang.String ACTION_SYNC;
  public static final java.lang.String ACTION_SYSTEM_TUTORIAL;
  public static final java.lang.String ACTION_TIMEZONE_CHANGED;
  public static final java.lang.String ACTION_TIME_CHANGED;
  public static final java.lang.String ACTION_TIME_TICK;
  public static final java.lang.String ACTION_UID_REMOVED;
  public static final java.lang.String ACTION_UMS_CONNECTED;
  public static final java.lang.String ACTION_UMS_DISCONNECTED;
  public static final java.lang.String ACTION_UNINSTALL_PACKAGE;
  public static final java.lang.String ACTION_USER_BACKGROUND;
  public static final java.lang.String ACTION_USER_FOREGROUND;
  public static final java.lang.String ACTION_USER_INITIALIZE;
  public static final java.lang.String ACTION_USER_PRESENT;
  public static final java.lang.String ACTION_USER_UNLOCKED;
  public static final java.lang.String ACTION_VIEW;
  public static final java.lang.String ACTION_VOICE_COMMAND;
  public static final java.lang.String ACTION_WALLPAPER_CHANGED;
  public static final java.lang.String ACTION_WEB_SEARCH;
  public static final java.lang.String CATEGORY_ALTERNATIVE;
  public static final java.lang.String CATEGORY_APP_BROWSER;
  public static final java.lang.String CATEGORY_APP_CALCULATOR;
  public static final java.lang.String CATEGORY_APP_CALENDAR;
  public static final java.lang.String CATEGORY_APP_CONTACTS;
  public static final java.lang.String CATEGORY_APP_EMAIL;
  public static final java.lang.String CATEGORY_APP_GALLERY;
  public static final java.lang.String CATEGORY_APP_MAPS;
  public static final java.lang.String CATEGORY_APP_MARKET;
  public static final java.lang.String CATEGORY_APP_MESSAGING;
  public static final java.lang.String CATEGORY_APP_MUSIC;
  public static final java.lang.String CATEGORY_BROWSABLE;
  public static final java.lang.String CATEGORY_CAR_DOCK;
  public static final java.lang.String CATEGORY_CAR_MODE;
  public static final java.lang.String CATEGORY_DEFAULT;
  public static final java.lang.String CATEGORY_DESK_DOCK;
  public static final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE;
  public static final java.lang.String CATEGORY_EMBED;
  public static final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST;
  public static final java.lang.String CATEGORY_HE_DESK_DOCK;
  public static final java.lang.String CATEGORY_HOME;
  public static final java.lang.String CATEGORY_INFO;
  public static final java.lang.String CATEGORY_LAUNCHER;
  public static final java.lang.String CATEGORY_LEANBACK_LAUNCHER;
  public static final java.lang.String CATEGORY_LE_DESK_DOCK;
  public static final java.lang.String CATEGORY_MONKEY;
  public static final java.lang.String CATEGORY_OPENABLE;
  public static final java.lang.String CATEGORY_PREFERENCE;
  public static final java.lang.String CATEGORY_SAMPLE_CODE;
  public static final java.lang.String CATEGORY_SELECTED_ALTERNATIVE;
  public static final java.lang.String CATEGORY_TAB;
  public static final java.lang.String CATEGORY_TEST;
  public static final java.lang.String CATEGORY_UNIT_TEST;
  public static final java.lang.String CATEGORY_VOICE;
  public static final java.lang.String EXTRA_ALARM_COUNT;
  public static final java.lang.String EXTRA_ALLOW_MULTIPLE;
  public static final java.lang.String EXTRA_ALLOW_REPLACE;
  public static final java.lang.String EXTRA_ALTERNATE_INTENTS;
  public static final java.lang.String EXTRA_ASSIST_CONTEXT;
  public static final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID;
  public static final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD;
  public static final java.lang.String EXTRA_ASSIST_PACKAGE;
  public static final java.lang.String EXTRA_ASSIST_UID;
  public static final java.lang.String EXTRA_BCC;
  public static final java.lang.String EXTRA_BUG_REPORT;
  public static final java.lang.String EXTRA_CC;
  public static final java.lang.String EXTRA_CHANGED_COMPONENT_NAME;
  public static final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST;
  public static final java.lang.String EXTRA_CHANGED_PACKAGE_LIST;
  public static final java.lang.String EXTRA_CHANGED_UID_LIST;
  public static final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER;
  public static final java.lang.String EXTRA_CHOOSER_TARGETS;
  public static final java.lang.String EXTRA_CHOSEN_COMPONENT;
  public static final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER;
  public static final java.lang.String EXTRA_DATA_REMOVED;
  public static final java.lang.String EXTRA_DOCK_STATE;
  public static final java.lang.String EXTRA_DONT_KILL_APP;
  public static final java.lang.String EXTRA_EMAIL;
  public static final java.lang.String EXTRA_EXCLUDE_COMPONENTS;
  public static final java.lang.String EXTRA_HTML_TEXT;
  public static final java.lang.String EXTRA_INDEX;
  public static final java.lang.String EXTRA_INITIAL_INTENTS;
  public static final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME;
  public static final java.lang.String EXTRA_INTENT;
  public static final java.lang.String EXTRA_KEY_EVENT;
  public static final java.lang.String EXTRA_LOCAL_ONLY;
  public static final java.lang.String EXTRA_MIME_TYPES;
  public static final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE;
  public static final java.lang.String EXTRA_ORIGINATING_URI;
  public static final java.lang.String EXTRA_PACKAGE_NAME;
  public static final java.lang.String EXTRA_PHONE_NUMBER;
  public static final java.lang.String EXTRA_PROCESS_TEXT;
  public static final java.lang.String EXTRA_PROCESS_TEXT_READONLY;
  public static final java.lang.String EXTRA_QUIET_MODE;
  public static final java.lang.String EXTRA_REFERRER;
  public static final java.lang.String EXTRA_REFERRER_NAME;
  public static final java.lang.String EXTRA_REMOTE_INTENT_TOKEN;
  public static final java.lang.String EXTRA_REPLACEMENT_EXTRAS;
  public static final java.lang.String EXTRA_REPLACING;
  public static final java.lang.String EXTRA_RESTRICTIONS_BUNDLE;
  public static final java.lang.String EXTRA_RESTRICTIONS_INTENT;
  public static final java.lang.String EXTRA_RESTRICTIONS_LIST;
  public static final java.lang.String EXTRA_RESULT_RECEIVER;
  public static final java.lang.String EXTRA_RETURN_RESULT;
  public static final java.lang.String EXTRA_SHORTCUT_ICON;
  public static final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE;
  public static final java.lang.String EXTRA_SHORTCUT_INTENT;
  public static final java.lang.String EXTRA_SHORTCUT_NAME;
  public static final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY;
  public static final java.lang.String EXTRA_STREAM;
  public static final java.lang.String EXTRA_SUBJECT;
  public static final java.lang.String EXTRA_TEMPLATE;
  public static final java.lang.String EXTRA_TEXT;
  public static final java.lang.String EXTRA_TITLE;
  public static final java.lang.String EXTRA_UID;
  public static final java.lang.String EXTRA_USER;
  public static final java.lang.String METADATA_DOCK_HOME;
}
public final class android.content.Intent$FilterComparison
  extends java.lang.Object
{
  public void <init>(android.content.Intent);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public android.content.Intent getIntent();
}
public class android.content.Intent$ShortcutIconResource
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.Intent$ShortcutIconResource fromContext(android.content.Context, int);
  public void <init>();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public java.lang.String packageName;
  public java.lang.String resourceName;
}
public class android.content.IntentFilter
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.IntentFilter create(java.lang.String, java.lang.String);
  public void <init>();
  public void <init>(android.content.IntentFilter);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String)  throws android.content.IntentFilter$MalformedMimeTypeException;
  public final boolean hasAction(java.lang.String);
  public final boolean hasCategory(java.lang.String);
  public final boolean hasDataAuthority(android.net.Uri);
  public final boolean hasDataPath(java.lang.String);
  public final boolean hasDataScheme(java.lang.String);
  public final boolean hasDataSchemeSpecificPart(java.lang.String);
  public final boolean hasDataType(java.lang.String);
  public final boolean matchAction(java.lang.String);
  public final int countActions();
  public final int countCategories();
  public final int countDataAuthorities();
  public final int countDataPaths();
  public final int countDataSchemeSpecificParts();
  public final int countDataSchemes();
  public final int countDataTypes();
  public final int describeContents();
  public final int getPriority();
  public final int match(android.content.ContentResolver, android.content.Intent, boolean, java.lang.String);
  public final int match(java.lang.String, java.lang.String, java.lang.String, android.net.Uri, java.util.Set, java.lang.String);
  public final int matchData(java.lang.String, java.lang.String, android.net.Uri);
  public final int matchDataAuthority(android.net.Uri);
  public final void addAction(java.lang.String);
  public final void addCategory(java.lang.String);
  public final void addDataAuthority(java.lang.String, java.lang.String);
  public final void addDataPath(java.lang.String, int);
  public final void addDataScheme(java.lang.String);
  public final void addDataSchemeSpecificPart(java.lang.String, int);
  public final void addDataType(java.lang.String)  throws android.content.IntentFilter$MalformedMimeTypeException;
  public final void setPriority(int);
  public final void writeToParcel(android.os.Parcel, int);
  public final android.content.IntentFilter$AuthorityEntry getDataAuthority(int);
  public final android.os.PatternMatcher getDataPath(int);
  public final android.os.PatternMatcher getDataSchemeSpecificPart(int);
  public final java.lang.String getAction(int);
  public final java.lang.String getCategory(int);
  public final java.lang.String getDataScheme(int);
  public final java.lang.String getDataType(int);
  public final java.lang.String matchCategories(java.util.Set);
  public final java.util.Iterator actionsIterator();
  public final java.util.Iterator authoritiesIterator();
  public final java.util.Iterator categoriesIterator();
  public final java.util.Iterator pathsIterator();
  public final java.util.Iterator schemeSpecificPartsIterator();
  public final java.util.Iterator schemesIterator();
  public final java.util.Iterator typesIterator();
  public void dump(android.util.Printer, java.lang.String);
  public void readFromXml(org.xmlpull.v1.XmlPullParser)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void writeToXml(org.xmlpull.v1.XmlSerializer)  throws java.io.IOException;
  public static final int MATCH_ADJUSTMENT_MASK;
  public static final int MATCH_ADJUSTMENT_NORMAL;
  public static final int MATCH_CATEGORY_EMPTY;
  public static final int MATCH_CATEGORY_HOST;
  public static final int MATCH_CATEGORY_MASK;
  public static final int MATCH_CATEGORY_PATH;
  public static final int MATCH_CATEGORY_PORT;
  public static final int MATCH_CATEGORY_SCHEME;
  public static final int MATCH_CATEGORY_SCHEME_SPECIFIC_PART;
  public static final int MATCH_CATEGORY_TYPE;
  public static final int NO_MATCH_ACTION;
  public static final int NO_MATCH_CATEGORY;
  public static final int NO_MATCH_DATA;
  public static final int NO_MATCH_TYPE;
  public static final int SYSTEM_HIGH_PRIORITY;
  public static final int SYSTEM_LOW_PRIORITY;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.content.IntentFilter$AuthorityEntry
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public int getPort();
  public int match(android.net.Uri);
  public java.lang.String getHost();
}
public class android.content.IntentFilter$MalformedMimeTypeException
  extends android.util.AndroidException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.content.IntentSender
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static void writeIntentSenderOrNullToParcel(android.content.IntentSender, android.os.Parcel);
  public static android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getCreatorUid();
  public int hashCode();
  public void sendIntent(android.content.Context, int, android.content.Intent, android.content.IntentSender$OnFinished, android.os.Handler)  throws android.content.IntentSender$SendIntentException;
  public void sendIntent(android.content.Context, int, android.content.Intent, android.content.IntentSender$OnFinished, android.os.Handler, java.lang.String)  throws android.content.IntentSender$SendIntentException;
  public void writeToParcel(android.os.Parcel, int);
  public android.os.UserHandle getCreatorUserHandle();
  public java.lang.String getCreatorPackage();
  public java.lang.String getTargetPackage();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.content.IntentSender$OnFinished
{
  public abstract void onSendFinished(android.content.IntentSender, android.content.Intent, int, java.lang.String, android.os.Bundle);
}
public class android.content.IntentSender$SendIntentException
  extends android.util.AndroidException
{
  public void <init>();
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.String);
}
public class android.content.Loader
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public final void startLoading();
  public boolean cancelLoad();
  public boolean isAbandoned();
  public boolean isReset();
  public boolean isStarted();
  public boolean takeContentChanged();
  public int getId();
  public void abandon();
  public void commitContentChanged();
  public void deliverCancellation();
  public void deliverResult(java.lang.Object);
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void forceLoad();
  public void onContentChanged();
  public void registerListener(int, android.content.Loader$OnLoadCompleteListener);
  public void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener);
  public void reset();
  public void rollbackContentChanged();
  public void stopLoading();
  public void unregisterListener(android.content.Loader$OnLoadCompleteListener);
  public void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener);
  public android.content.Context getContext();
  public java.lang.String dataToString(java.lang.Object);
  public java.lang.String toString();
  protected boolean onCancelLoad();
  protected void onAbandon();
  protected void onForceLoad();
  protected void onReset();
  protected void onStartLoading();
  protected void onStopLoading();
}
public final class android.content.Loader$ForceLoadContentObserver
  extends android.database.ContentObserver
{
  public void <init>(android.content.Loader);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
}
public interface android.content.Loader$OnLoadCanceledListener
{
  public abstract void onLoadCanceled(android.content.Loader);
}
public interface android.content.Loader$OnLoadCompleteListener
{
  public abstract void onLoadComplete(android.content.Loader, java.lang.Object);
}
public class android.content.MutableContextWrapper
  extends android.content.ContextWrapper
{
  public void <init>(android.content.Context);
  public void setBaseContext(android.content.Context);
}
public class android.content.OperationApplicationException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  public int getNumSuccessfulYieldPoints();
}
public class android.content.PeriodicSync
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.accounts.Account, java.lang.String, android.os.Bundle, long);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public final long period;
  public final android.accounts.Account account;
  public final android.os.Bundle extras;
  public final java.lang.String authority;
}
public class android.content.ReceiverCallNotAllowedException
  extends android.util.AndroidRuntimeException
{
  public void <init>(java.lang.String);
}
public class android.content.RestrictionEntry
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.RestrictionEntry createBundleArrayEntry(java.lang.String, android.content.RestrictionEntry[]);
  public static android.content.RestrictionEntry createBundleEntry(java.lang.String, android.content.RestrictionEntry[]);
  public void <init>(android.os.Parcel);
  public void <init>(int, java.lang.String);
  public void <init>(java.lang.String, boolean);
  public void <init>(java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String[]);
  public boolean equals(java.lang.Object);
  public boolean getSelectedState();
  public int describeContents();
  public int getIntValue();
  public int getType();
  public int hashCode();
  public void setAllSelectedStrings(java.lang.String[]);
  public void setChoiceEntries(android.content.Context, int);
  public void setChoiceEntries(java.lang.String[]);
  public void setChoiceValues(android.content.Context, int);
  public void setChoiceValues(java.lang.String[]);
  public void setDescription(java.lang.String);
  public void setIntValue(int);
  public void setRestrictions(android.content.RestrictionEntry[]);
  public void setSelectedState(boolean);
  public void setSelectedString(java.lang.String);
  public void setTitle(java.lang.String);
  public void setType(int);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.RestrictionEntry[] getRestrictions();
  public java.lang.String getDescription();
  public java.lang.String getKey();
  public java.lang.String getSelectedString();
  public java.lang.String getTitle();
  public java.lang.String toString();
  public java.lang.String[] getAllSelectedStrings();
  public java.lang.String[] getChoiceEntries();
  public java.lang.String[] getChoiceValues();
  public static final int TYPE_BOOLEAN;
  public static final int TYPE_BUNDLE;
  public static final int TYPE_BUNDLE_ARRAY;
  public static final int TYPE_CHOICE;
  public static final int TYPE_INTEGER;
  public static final int TYPE_MULTI_SELECT;
  public static final int TYPE_NULL;
  public static final int TYPE_STRING;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.RestrictionsManager
  extends java.lang.Object
{
  public static android.os.Bundle convertRestrictionsToBundle(java.util.List);
  public boolean hasRestrictionsProvider();
  public void notifyPermissionResponse(java.lang.String, android.os.PersistableBundle);
  public void requestPermission(java.lang.String, java.lang.String, android.os.PersistableBundle);
  public android.content.Intent createLocalApprovalIntent();
  public android.os.Bundle getApplicationRestrictions();
  public java.util.List getManifestRestrictions(java.lang.String);
  public static final int RESULT_APPROVED;
  public static final int RESULT_DENIED;
  public static final int RESULT_ERROR;
  public static final int RESULT_ERROR_BAD_REQUEST;
  public static final int RESULT_ERROR_INTERNAL;
  public static final int RESULT_ERROR_NETWORK;
  public static final int RESULT_NO_RESPONSE;
  public static final int RESULT_UNKNOWN_REQUEST;
  public static final java.lang.String ACTION_PERMISSION_RESPONSE_RECEIVED;
  public static final java.lang.String ACTION_REQUEST_LOCAL_APPROVAL;
  public static final java.lang.String ACTION_REQUEST_PERMISSION;
  public static final java.lang.String EXTRA_PACKAGE_NAME;
  public static final java.lang.String EXTRA_REQUEST_BUNDLE;
  public static final java.lang.String EXTRA_REQUEST_ID;
  public static final java.lang.String EXTRA_REQUEST_TYPE;
  public static final java.lang.String EXTRA_RESPONSE_BUNDLE;
  public static final java.lang.String META_DATA_APP_RESTRICTIONS;
  public static final java.lang.String REQUEST_KEY_APPROVE_LABEL;
  public static final java.lang.String REQUEST_KEY_DATA;
  public static final java.lang.String REQUEST_KEY_DENY_LABEL;
  public static final java.lang.String REQUEST_KEY_ICON;
  public static final java.lang.String REQUEST_KEY_ID;
  public static final java.lang.String REQUEST_KEY_MESSAGE;
  public static final java.lang.String REQUEST_KEY_NEW_REQUEST;
  public static final java.lang.String REQUEST_KEY_TITLE;
  public static final java.lang.String REQUEST_TYPE_APPROVAL;
  public static final java.lang.String RESPONSE_KEY_ERROR_CODE;
  public static final java.lang.String RESPONSE_KEY_MESSAGE;
  public static final java.lang.String RESPONSE_KEY_RESPONSE_TIMESTAMP;
  public static final java.lang.String RESPONSE_KEY_RESULT;
}
public class android.content.SearchRecentSuggestionsProvider
  extends android.content.ContentProvider
{
  public void <init>();
  public boolean onCreate();
  public int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public java.lang.String getType(android.net.Uri);
  protected void setupSuggestions(java.lang.String, int);
  public static final int DATABASE_MODE_2LINES;
  public static final int DATABASE_MODE_QUERIES;
}
public interface android.content.ServiceConnection
{
  public abstract void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public abstract void onServiceDisconnected(android.content.ComponentName);
}
public interface android.content.SharedPreferences
{
  public abstract boolean contains(java.lang.String);
  public abstract boolean getBoolean(java.lang.String, boolean);
  public abstract float getFloat(java.lang.String, float);
  public abstract int getInt(java.lang.String, int);
  public abstract long getLong(java.lang.String, long);
  public abstract void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener);
  public abstract void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener);
  public abstract android.content.SharedPreferences$Editor edit();
  public abstract java.lang.String getString(java.lang.String, java.lang.String);
  public abstract java.util.Map getAll();
  public abstract java.util.Set getStringSet(java.lang.String, java.util.Set);
}
public interface android.content.SharedPreferences$Editor
{
  public abstract boolean commit();
  public abstract void apply();
  public abstract android.content.SharedPreferences$Editor clear();
  public abstract android.content.SharedPreferences$Editor putBoolean(java.lang.String, boolean);
  public abstract android.content.SharedPreferences$Editor putFloat(java.lang.String, float);
  public abstract android.content.SharedPreferences$Editor putInt(java.lang.String, int);
  public abstract android.content.SharedPreferences$Editor putLong(java.lang.String, long);
  public abstract android.content.SharedPreferences$Editor putString(java.lang.String, java.lang.String);
  public abstract android.content.SharedPreferences$Editor putStringSet(java.lang.String, java.util.Set);
  public abstract android.content.SharedPreferences$Editor remove(java.lang.String);
}
public interface android.content.SharedPreferences$OnSharedPreferenceChangeListener
{
  public abstract void onSharedPreferenceChanged(android.content.SharedPreferences, java.lang.String);
}
public class android.content.SyncAdapterType
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.SyncAdapterType newKey(java.lang.String, java.lang.String);
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, java.lang.String, boolean, boolean);
  public boolean allowParallelSyncs();
  public boolean equals(java.lang.Object);
  public boolean isAlwaysSyncable();
  public boolean isUserVisible();
  public boolean supportsUploading();
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getSettingsActivity();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public final boolean isKey;
  public final java.lang.String accountType;
  public final java.lang.String authority;
}
public class android.content.SyncContext
  extends java.lang.Object
{
  public void onFinished(android.content.SyncResult);
  public android.os.IBinder getSyncContextBinder();
}
public class android.content.SyncInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public final long startTime;
  public final android.accounts.Account account;
  public final java.lang.String authority;
}
public class android.content.SyncRequest
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.SyncRequest$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.content.SyncRequest build();
  public android.content.SyncRequest$Builder setDisallowMetered(boolean);
  public android.content.SyncRequest$Builder setExpedited(boolean);
  public android.content.SyncRequest$Builder setExtras(android.os.Bundle);
  public android.content.SyncRequest$Builder setIgnoreBackoff(boolean);
  public android.content.SyncRequest$Builder setIgnoreSettings(boolean);
  public android.content.SyncRequest$Builder setManual(boolean);
  public android.content.SyncRequest$Builder setNoRetry(boolean);
  public android.content.SyncRequest$Builder setRequiresCharging(boolean);
  public android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account, java.lang.String);
  public android.content.SyncRequest$Builder syncOnce();
  public android.content.SyncRequest$Builder syncPeriodic(long, long);
}
public final class android.content.SyncResult
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public boolean hasError();
  public boolean hasHardError();
  public boolean hasSoftError();
  public boolean madeSomeProgress();
  public int describeContents();
  public void clear();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toDebugString();
  public java.lang.String toString();
  public static final android.content.SyncResult ALREADY_IN_PROGRESS;
  public static final android.os.Parcelable$Creator CREATOR;
  public final boolean syncAlreadyInProgress;
  public final android.content.SyncStats stats;
  public boolean databaseError;
  public boolean fullSyncRequested;
  public boolean moreRecordsToGet;
  public boolean partialSyncUnavailable;
  public boolean tooManyDeletions;
  public boolean tooManyRetries;
  public long delayUntil;
}
public class android.content.SyncStats
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public int describeContents();
  public void clear();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public long numAuthExceptions;
  public long numConflictDetectedExceptions;
  public long numDeletes;
  public long numEntries;
  public long numInserts;
  public long numIoExceptions;
  public long numParseExceptions;
  public long numSkippedEntries;
  public long numUpdates;
}
public interface android.content.SyncStatusObserver
{
  public abstract void onStatusChanged(int);
}
public class android.content.UriMatcher
  extends java.lang.Object
{
  public void <init>(int);
  public int match(android.net.Uri);
  public void addURI(java.lang.String, java.lang.String, int);
  public static final int NO_MATCH;
}
public final class android.content.UriPermission
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean isReadPermission();
  public boolean isWritePermission();
  public int describeContents();
  public long getPersistedTime();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.Uri getUri();
  public java.lang.String toString();
  public static final long INVALID_TIME;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.pm.ActivityInfo
  extends android.content.pm.ComponentInfo
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.ActivityInfo);
  public final int getThemeResource();
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int CONFIG_DENSITY;
  public static final int CONFIG_FONT_SCALE;
  public static final int CONFIG_KEYBOARD;
  public static final int CONFIG_KEYBOARD_HIDDEN;
  public static final int CONFIG_LAYOUT_DIRECTION;
  public static final int CONFIG_LOCALE;
  public static final int CONFIG_MCC;
  public static final int CONFIG_MNC;
  public static final int CONFIG_NAVIGATION;
  public static final int CONFIG_ORIENTATION;
  public static final int CONFIG_SCREEN_LAYOUT;
  public static final int CONFIG_SCREEN_SIZE;
  public static final int CONFIG_SMALLEST_SCREEN_SIZE;
  public static final int CONFIG_TOUCHSCREEN;
  public static final int CONFIG_UI_MODE;
  public static final int DOCUMENT_LAUNCH_ALWAYS;
  public static final int DOCUMENT_LAUNCH_INTO_EXISTING;
  public static final int DOCUMENT_LAUNCH_NEVER;
  public static final int DOCUMENT_LAUNCH_NONE;
  public static final int FLAG_ALLOW_TASK_REPARENTING;
  public static final int FLAG_ALWAYS_RETAIN_TASK_STATE;
  public static final int FLAG_AUTO_REMOVE_FROM_RECENTS;
  public static final int FLAG_CLEAR_TASK_ON_LAUNCH;
  public static final int FLAG_ENABLE_VR_MODE;
  public static final int FLAG_EXCLUDE_FROM_RECENTS;
  public static final int FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS;
  public static final int FLAG_FINISH_ON_TASK_LAUNCH;
  public static final int FLAG_HARDWARE_ACCELERATED;
  public static final int FLAG_IMMERSIVE;
  public static final int FLAG_MULTIPROCESS;
  public static final int FLAG_NO_HISTORY;
  public static final int FLAG_RELINQUISH_TASK_IDENTITY;
  public static final int FLAG_RESUME_WHILE_PAUSING;
  public static final int FLAG_SINGLE_USER;
  public static final int FLAG_STATE_NOT_NEEDED;
  public static final int LAUNCH_MULTIPLE;
  public static final int LAUNCH_SINGLE_INSTANCE;
  public static final int LAUNCH_SINGLE_TASK;
  public static final int LAUNCH_SINGLE_TOP;
  public static final int PERSIST_ACROSS_REBOOTS;
  public static final int PERSIST_NEVER;
  public static final int PERSIST_ROOT_ONLY;
  public static final int SCREEN_ORIENTATION_BEHIND;
  public static final int SCREEN_ORIENTATION_FULL_SENSOR;
  public static final int SCREEN_ORIENTATION_FULL_USER;
  public static final int SCREEN_ORIENTATION_LANDSCAPE;
  public static final int SCREEN_ORIENTATION_LOCKED;
  public static final int SCREEN_ORIENTATION_NOSENSOR;
  public static final int SCREEN_ORIENTATION_PORTRAIT;
  public static final int SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
  public static final int SCREEN_ORIENTATION_REVERSE_PORTRAIT;
  public static final int SCREEN_ORIENTATION_SENSOR;
  public static final int SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
  public static final int SCREEN_ORIENTATION_SENSOR_PORTRAIT;
  public static final int SCREEN_ORIENTATION_UNSPECIFIED;
  public static final int SCREEN_ORIENTATION_USER;
  public static final int SCREEN_ORIENTATION_USER_LANDSCAPE;
  public static final int SCREEN_ORIENTATION_USER_PORTRAIT;
  public static final int UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW;
  public static final android.os.Parcelable$Creator CREATOR;
  public int configChanges;
  public int documentLaunchMode;
  public int flags;
  public int launchMode;
  public int maxRecents;
  public int persistableMode;
  public int screenOrientation;
  public int softInputMode;
  public int theme;
  public int uiOptions;
  public android.content.pm.ActivityInfo$WindowLayout windowLayout;
  public java.lang.String parentActivityName;
  public java.lang.String permission;
  public java.lang.String targetActivity;
  public java.lang.String taskAffinity;
}
public final class android.content.pm.ActivityInfo$WindowLayout
  extends java.lang.Object
{
  public void <init>(int, float, int, float, int, int, int);
  public final float heightFraction;
  public final float widthFraction;
  public final int gravity;
  public final int height;
  public final int minHeight;
  public final int minWidth;
  public final int width;
}
public class android.content.pm.ApplicationInfo
  extends android.content.pm.PackageItemInfo
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.ApplicationInfo);
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager);
  public java.lang.String toString();
  public static final int FLAG_ALLOW_BACKUP;
  public static final int FLAG_ALLOW_CLEAR_USER_DATA;
  public static final int FLAG_ALLOW_TASK_REPARENTING;
  public static final int FLAG_DEBUGGABLE;
  public static final int FLAG_EXTERNAL_STORAGE;
  public static final int FLAG_EXTRACT_NATIVE_LIBS;
  public static final int FLAG_FACTORY_TEST;
  public static final int FLAG_FULL_BACKUP_ONLY;
  public static final int FLAG_HARDWARE_ACCELERATED;
  public static final int FLAG_HAS_CODE;
  public static final int FLAG_INSTALLED;
  public static final int FLAG_IS_DATA_ONLY;
  public static final int FLAG_IS_GAME;
  public static final int FLAG_KILL_AFTER_RESTORE;
  public static final int FLAG_LARGE_HEAP;
  public static final int FLAG_MULTIARCH;
  public static final int FLAG_PERSISTENT;
  public static final int FLAG_RESIZEABLE_FOR_SCREENS;
  public static final int FLAG_RESTORE_ANY_VERSION;
  public static final int FLAG_STOPPED;
  public static final int FLAG_SUPPORTS_LARGE_SCREENS;
  public static final int FLAG_SUPPORTS_NORMAL_SCREENS;
  public static final int FLAG_SUPPORTS_RTL;
  public static final int FLAG_SUPPORTS_SCREEN_DENSITIES;
  public static final int FLAG_SUPPORTS_SMALL_SCREENS;
  public static final int FLAG_SUPPORTS_XLARGE_SCREENS;
  public static final int FLAG_SUSPENDED;
  public static final int FLAG_SYSTEM;
  public static final int FLAG_TEST_ONLY;
  public static final int FLAG_UPDATED_SYSTEM_APP;
  public static final int FLAG_USES_CLEARTEXT_TRAFFIC;
  public static final int FLAG_VM_SAFE_MODE;
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean enabled;
  public int compatibleWidthLimitDp;
  public int descriptionRes;
  public int flags;
  public int largestWidthLimitDp;
  public int minSdkVersion;
  public int requiresSmallestWidthDp;
  public int targetSdkVersion;
  public int theme;
  public int uiOptions;
  public int uid;
  public java.lang.String backupAgentName;
  public java.lang.String className;
  public java.lang.String dataDir;
  public java.lang.String deviceProtectedDataDir;
  public java.lang.String manageSpaceActivityName;
  public java.lang.String nativeLibraryDir;
  public java.lang.String permission;
  public java.lang.String processName;
  public java.lang.String publicSourceDir;
  public java.lang.String sourceDir;
  public java.lang.String taskAffinity;
  public java.lang.String[] sharedLibraryFiles;
  public java.lang.String[] splitPublicSourceDirs;
  public java.lang.String[] splitSourceDirs;
}
public class android.content.pm.ApplicationInfo$DisplayNameComparator
  extends java.lang.Object
  implements java.util.Comparator
{
  public void <init>(android.content.pm.PackageManager);
  public final int compare(android.content.pm.ApplicationInfo, android.content.pm.ApplicationInfo);
  public int compare(java.lang.Object, java.lang.Object);
}
public class android.content.pm.ComponentInfo
  extends android.content.pm.PackageItemInfo
{
  public void <init>();
  public void <init>(android.content.pm.ComponentInfo);
  public final int getBannerResource();
  public final int getIconResource();
  public final int getLogoResource();
  public boolean isEnabled();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  protected void <init>(android.os.Parcel);
  protected void dumpBack(android.util.Printer, java.lang.String);
  protected void dumpFront(android.util.Printer, java.lang.String);
  public boolean directBootAware;
  public boolean enabled;
  public boolean exported;
  public int descriptionRes;
  public android.content.pm.ApplicationInfo applicationInfo;
  public java.lang.String processName;
}
public class android.content.pm.ConfigurationInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.ConfigurationInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getGlEsVersion();
  public java.lang.String toString();
  public static final int GL_ES_VERSION_UNDEFINED;
  public static final int INPUT_FEATURE_FIVE_WAY_NAV;
  public static final int INPUT_FEATURE_HARD_KEYBOARD;
  public static final android.os.Parcelable$Creator CREATOR;
  public int reqGlEsVersion;
  public int reqInputFeatures;
  public int reqKeyboardType;
  public int reqNavigation;
  public int reqTouchScreen;
}
public final class android.content.pm.FeatureGroupInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.FeatureGroupInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
  public android.content.pm.FeatureInfo[] features;
}
public class android.content.pm.FeatureInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.FeatureInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getGlEsVersion();
  public java.lang.String toString();
  public static final int FLAG_REQUIRED;
  public static final int GL_ES_VERSION_UNDEFINED;
  public static final android.os.Parcelable$Creator CREATOR;
  public int flags;
  public int reqGlEsVersion;
  public int version;
  public java.lang.String name;
}
public class android.content.pm.InstrumentationInfo
  extends android.content.pm.PackageItemInfo
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.InstrumentationInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean functionalTest;
  public boolean handleProfiling;
  public java.lang.String dataDir;
  public java.lang.String publicSourceDir;
  public java.lang.String sourceDir;
  public java.lang.String targetPackage;
  public java.lang.String[] splitPublicSourceDirs;
  public java.lang.String[] splitSourceDirs;
}
public class android.content.pm.LabeledIntent
  extends android.content.Intent
{
  public void <init>(android.content.Intent, java.lang.String, int, int);
  public void <init>(android.content.Intent, java.lang.String, java.lang.CharSequence, int);
  public void <init>(java.lang.String, int, int);
  public void <init>(java.lang.String, java.lang.CharSequence, int);
  public int getIconResource();
  public int getLabelResource();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public java.lang.CharSequence getNonLocalizedLabel();
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public java.lang.String getSourcePackage();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.pm.LauncherActivityInfo
  extends java.lang.Object
{
  public long getFirstInstallTime();
  public android.content.ComponentName getComponentName();
  public android.content.pm.ApplicationInfo getApplicationInfo();
  public android.graphics.drawable.Drawable getBadgedIcon(int);
  public android.graphics.drawable.Drawable getIcon(int);
  public android.os.UserHandle getUser();
  public java.lang.CharSequence getLabel();
  public java.lang.String getName();
}
public class android.content.pm.LauncherApps
  extends java.lang.Object
{
  public boolean isActivityEnabled(android.content.ComponentName, android.os.UserHandle);
  public boolean isPackageEnabled(java.lang.String, android.os.UserHandle);
  public void registerCallback(android.content.pm.LauncherApps$Callback);
  public void registerCallback(android.content.pm.LauncherApps$Callback, android.os.Handler);
  public void startAppDetailsActivity(android.content.ComponentName, android.os.UserHandle, android.graphics.Rect, android.os.Bundle);
  public void startMainActivity(android.content.ComponentName, android.os.UserHandle, android.graphics.Rect, android.os.Bundle);
  public void unregisterCallback(android.content.pm.LauncherApps$Callback);
  public android.content.pm.LauncherActivityInfo resolveActivity(android.content.Intent, android.os.UserHandle);
  public java.util.List getActivityList(java.lang.String, android.os.UserHandle);
}
public abstract class android.content.pm.LauncherApps$Callback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onPackageAdded(java.lang.String, android.os.UserHandle);
  public abstract void onPackageChanged(java.lang.String, android.os.UserHandle);
  public abstract void onPackageRemoved(java.lang.String, android.os.UserHandle);
  public abstract void onPackagesAvailable(java.lang.String[], android.os.UserHandle, boolean);
  public abstract void onPackagesUnavailable(java.lang.String[], android.os.UserHandle, boolean);
  public void onPackagesSuspended(java.lang.String[], android.os.UserHandle);
  public void onPackagesUnsuspended(java.lang.String[], android.os.UserHandle);
}
public class android.content.pm.PackageInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int INSTALL_LOCATION_AUTO;
  public static final int INSTALL_LOCATION_INTERNAL_ONLY;
  public static final int INSTALL_LOCATION_PREFER_EXTERNAL;
  public static final int REQUESTED_PERMISSION_GRANTED;
  public static final android.os.Parcelable$Creator CREATOR;
  public int baseRevisionCode;
  public int installLocation;
  public int sharedUserLabel;
  public int versionCode;
  public long firstInstallTime;
  public long lastUpdateTime;
  public android.content.pm.ActivityInfo[] activities;
  public android.content.pm.ActivityInfo[] receivers;
  public android.content.pm.ApplicationInfo applicationInfo;
  public android.content.pm.ConfigurationInfo[] configPreferences;
  public android.content.pm.FeatureGroupInfo[] featureGroups;
  public android.content.pm.FeatureInfo[] reqFeatures;
  public android.content.pm.InstrumentationInfo[] instrumentation;
  public android.content.pm.PermissionInfo[] permissions;
  public android.content.pm.ProviderInfo[] providers;
  public android.content.pm.ServiceInfo[] services;
  public android.content.pm.Signature[] signatures;
  public int[] gids;
  public int[] requestedPermissionsFlags;
  public int[] splitRevisionCodes;
  public java.lang.String packageName;
  public java.lang.String sharedUserId;
  public java.lang.String versionName;
  public java.lang.String[] requestedPermissions;
  public java.lang.String[] splitNames;
}
public class android.content.pm.PackageInstaller
  extends java.lang.Object
{
  public int createSession(android.content.pm.PackageInstaller$SessionParams)  throws java.io.IOException;
  public void abandonSession(int);
  public void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback);
  public void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback, android.os.Handler);
  public void uninstall(java.lang.String, android.content.IntentSender);
  public void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback);
  public void updateSessionAppIcon(int, android.graphics.Bitmap);
  public void updateSessionAppLabel(int, java.lang.CharSequence);
  public android.content.pm.PackageInstaller$Session openSession(int)  throws java.io.IOException;
  public android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int);
  public java.util.List getAllSessions();
  public java.util.List getMySessions();
  public static final int STATUS_FAILURE;
  public static final int STATUS_FAILURE_ABORTED;
  public static final int STATUS_FAILURE_BLOCKED;
  public static final int STATUS_FAILURE_CONFLICT;
  public static final int STATUS_FAILURE_INCOMPATIBLE;
  public static final int STATUS_FAILURE_INVALID;
  public static final int STATUS_FAILURE_STORAGE;
  public static final int STATUS_PENDING_USER_ACTION;
  public static final int STATUS_SUCCESS;
  public static final java.lang.String ACTION_SESSION_DETAILS;
  public static final java.lang.String EXTRA_OTHER_PACKAGE_NAME;
  public static final java.lang.String EXTRA_PACKAGE_NAME;
  public static final java.lang.String EXTRA_SESSION_ID;
  public static final java.lang.String EXTRA_STATUS;
  public static final java.lang.String EXTRA_STATUS_MESSAGE;
  public static final java.lang.String EXTRA_STORAGE_PATH;
}
public class android.content.pm.PackageInstaller$Session
  extends java.lang.Object
  implements java.io.Closeable
{
  public void abandon();
  public void close();
  public void commit(android.content.IntentSender);
  public void fsync(java.io.OutputStream)  throws java.io.IOException;
  public void removeSplit(java.lang.String)  throws java.io.IOException;
  public void setStagingProgress(float);
  public java.io.InputStream openRead(java.lang.String)  throws java.io.IOException;
  public java.io.OutputStream openWrite(java.lang.String, long, long)  throws java.io.IOException;
  public java.lang.String[] getNames()  throws java.io.IOException;
}
public abstract class android.content.pm.PackageInstaller$SessionCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onActiveChanged(int, boolean);
  public abstract void onBadgingChanged(int);
  public abstract void onCreated(int);
  public abstract void onFinished(int, boolean);
  public abstract void onProgressChanged(int, float);
}
public class android.content.pm.PackageInstaller$SessionInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean isActive();
  public float getProgress();
  public int describeContents();
  public int getSessionId();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.Intent createDetailsIntent();
  public android.graphics.Bitmap getAppIcon();
  public java.lang.CharSequence getAppLabel();
  public java.lang.String getAppPackageName();
  public java.lang.String getInstallerPackageName();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.pm.PackageInstaller$SessionParams
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int);
  public int describeContents();
  public void setAppIcon(android.graphics.Bitmap);
  public void setAppLabel(java.lang.CharSequence);
  public void setAppPackageName(java.lang.String);
  public void setInstallLocation(int);
  public void setOriginatingUid(int);
  public void setOriginatingUri(android.net.Uri);
  public void setReferrerUri(android.net.Uri);
  public void setSize(long);
  public void writeToParcel(android.os.Parcel, int);
  public static final int MODE_FULL_INSTALL;
  public static final int MODE_INHERIT_EXISTING;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.pm.PackageItemInfo
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.content.pm.PackageItemInfo);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager, java.lang.String);
  public android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager);
  public android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  protected void <init>(android.os.Parcel);
  protected void dumpBack(android.util.Printer, java.lang.String);
  protected void dumpFront(android.util.Printer, java.lang.String);
  public int banner;
  public int icon;
  public int labelRes;
  public int logo;
  public android.os.Bundle metaData;
  public java.lang.CharSequence nonLocalizedLabel;
  public java.lang.String name;
  public java.lang.String packageName;
}
public class android.content.pm.PackageItemInfo$DisplayNameComparator
  extends java.lang.Object
  implements java.util.Comparator
{
  public void <init>(android.content.pm.PackageManager);
  public final int compare(android.content.pm.PackageItemInfo, android.content.pm.PackageItemInfo);
  public int compare(java.lang.Object, java.lang.Object);
}
public abstract class android.content.pm.PackageManager
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean addPermission(android.content.pm.PermissionInfo);
  public abstract boolean addPermissionAsync(android.content.pm.PermissionInfo);
  public abstract boolean hasSystemFeature(java.lang.String);
  public abstract boolean hasSystemFeature(java.lang.String, int);
  public abstract boolean isPermissionRevokedByPolicy(java.lang.String, java.lang.String);
  public abstract boolean isSafeMode();
  public abstract int checkPermission(java.lang.String, java.lang.String);
  public abstract int checkSignatures(int, int);
  public abstract int checkSignatures(java.lang.String, java.lang.String);
  public abstract int getApplicationEnabledSetting(java.lang.String);
  public abstract int getComponentEnabledSetting(android.content.ComponentName);
  public abstract int getPackageUid(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract int getPreferredActivities(java.util.List, java.util.List, java.lang.String);
  public abstract void addPackageToPreferred(java.lang.String);
  public abstract void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName);
  public abstract void clearPackagePreferredActivities(java.lang.String);
  public abstract void extendVerificationTimeout(int, int, long);
  public abstract void removePackageFromPreferred(java.lang.String);
  public abstract void removePermission(java.lang.String);
  public abstract void setApplicationEnabledSetting(java.lang.String, int, int);
  public abstract void setComponentEnabledSetting(android.content.ComponentName, int, int);
  public abstract void setInstallerPackageName(java.lang.String, java.lang.String);
  public abstract void verifyPendingInstall(int, int);
  public abstract android.content.Intent getLaunchIntentForPackage(java.lang.String);
  public abstract android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String);
  public abstract android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.FeatureInfo[] getSystemAvailableFeatures();
  public abstract android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.PackageInfo getPackageInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.PackageInstaller getPackageInstaller();
  public abstract android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int);
  public abstract android.content.pm.ResolveInfo resolveActivity(android.content.Intent, int);
  public abstract android.content.pm.ResolveInfo resolveService(android.content.Intent, int);
  public abstract android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.res.Resources getResourcesForActivity(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.res.Resources getResourcesForApplication(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.content.res.XmlResourceParser getXml(java.lang.String, int, android.content.pm.ApplicationInfo);
  public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo);
  public abstract android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo);
  public abstract android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo);
  public abstract android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract android.graphics.drawable.Drawable getDefaultActivityIcon();
  public abstract android.graphics.drawable.Drawable getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo);
  public abstract android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable, android.os.UserHandle, android.graphics.Rect, int);
  public abstract android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable, android.os.UserHandle);
  public abstract int[] getPackageGids(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract int[] getPackageGids(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public abstract java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo);
  public abstract java.lang.CharSequence getText(java.lang.String, int, android.content.pm.ApplicationInfo);
  public abstract java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence, android.os.UserHandle);
  public abstract java.lang.String getInstallerPackageName(java.lang.String);
  public abstract java.lang.String getNameForUid(int);
  public abstract java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[]);
  public abstract java.lang.String[] currentToCanonicalPackageNames(java.lang.String[]);
  public abstract java.lang.String[] getPackagesForUid(int);
  public abstract java.lang.String[] getSystemSharedLibraryNames();
  public abstract java.util.List getAllPermissionGroups(int);
  public abstract java.util.List getInstalledApplications(int);
  public abstract java.util.List getInstalledPackages(int);
  public abstract java.util.List getPackagesHoldingPermissions(java.lang.String[], int);
  public abstract java.util.List getPreferredPackages(int);
  public abstract java.util.List queryBroadcastReceivers(android.content.Intent, int);
  public abstract java.util.List queryContentProviders(java.lang.String, int, int);
  public abstract java.util.List queryInstrumentation(java.lang.String, int);
  public abstract java.util.List queryIntentActivities(android.content.Intent, int);
  public abstract java.util.List queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int);
  public abstract java.util.List queryIntentContentProviders(android.content.Intent, int);
  public abstract java.util.List queryIntentServices(android.content.Intent, int);
  public abstract java.util.List queryPermissionsByGroup(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String, int);
  public static final int COMPONENT_ENABLED_STATE_DEFAULT;
  public static final int COMPONENT_ENABLED_STATE_DISABLED;
  public static final int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED;
  public static final int COMPONENT_ENABLED_STATE_DISABLED_USER;
  public static final int COMPONENT_ENABLED_STATE_ENABLED;
  public static final int DONT_KILL_APP;
  public static final int GET_ACTIVITIES;
  public static final int GET_CONFIGURATIONS;
  public static final int GET_DISABLED_COMPONENTS;
  public static final int GET_DISABLED_UNTIL_USED_COMPONENTS;
  public static final int GET_GIDS;
  public static final int GET_INSTRUMENTATION;
  public static final int GET_INTENT_FILTERS;
  public static final int GET_META_DATA;
  public static final int GET_PERMISSIONS;
  public static final int GET_PROVIDERS;
  public static final int GET_RECEIVERS;
  public static final int GET_RESOLVED_FILTER;
  public static final int GET_SERVICES;
  public static final int GET_SHARED_LIBRARY_FILES;
  public static final int GET_SIGNATURES;
  public static final int GET_UNINSTALLED_PACKAGES;
  public static final int GET_URI_PERMISSION_PATTERNS;
  public static final int MATCH_ALL;
  public static final int MATCH_DEFAULT_ONLY;
  public static final int MATCH_DIRECT_BOOT_AWARE;
  public static final int MATCH_DIRECT_BOOT_UNAWARE;
  public static final int MATCH_DISABLED_COMPONENTS;
  public static final int MATCH_DISABLED_UNTIL_USED_COMPONENTS;
  public static final int MATCH_SYSTEM_ONLY;
  public static final int MATCH_UNINSTALLED_PACKAGES;
  public static final int PERMISSION_DENIED;
  public static final int PERMISSION_GRANTED;
  public static final int SIGNATURE_FIRST_NOT_SIGNED;
  public static final int SIGNATURE_MATCH;
  public static final int SIGNATURE_NEITHER_SIGNED;
  public static final int SIGNATURE_NO_MATCH;
  public static final int SIGNATURE_SECOND_NOT_SIGNED;
  public static final int SIGNATURE_UNKNOWN_PACKAGE;
  public static final int VERIFICATION_ALLOW;
  public static final int VERIFICATION_REJECT;
  public static final long MAXIMUM_VERIFICATION_TIMEOUT;
  public static final java.lang.String EXTRA_VERIFICATION_ID;
  public static final java.lang.String EXTRA_VERIFICATION_RESULT;
  public static final java.lang.String FEATURE_APP_WIDGETS;
  public static final java.lang.String FEATURE_AUDIO_LOW_LATENCY;
  public static final java.lang.String FEATURE_AUDIO_OUTPUT;
  public static final java.lang.String FEATURE_AUDIO_PRO;
  public static final java.lang.String FEATURE_AUTOMOTIVE;
  public static final java.lang.String FEATURE_BACKUP;
  public static final java.lang.String FEATURE_BLUETOOTH;
  public static final java.lang.String FEATURE_BLUETOOTH_LE;
  public static final java.lang.String FEATURE_CAMERA;
  public static final java.lang.String FEATURE_CAMERA_ANY;
  public static final java.lang.String FEATURE_CAMERA_AUTOFOCUS;
  public static final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING;
  public static final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR;
  public static final java.lang.String FEATURE_CAMERA_CAPABILITY_RAW;
  public static final java.lang.String FEATURE_CAMERA_EXTERNAL;
  public static final java.lang.String FEATURE_CAMERA_FLASH;
  public static final java.lang.String FEATURE_CAMERA_FRONT;
  public static final java.lang.String FEATURE_CAMERA_LEVEL_FULL;
  public static final java.lang.String FEATURE_CONNECTION_SERVICE;
  public static final java.lang.String FEATURE_CONSUMER_IR;
  public static final java.lang.String FEATURE_DEVICE_ADMIN;
  public static final java.lang.String FEATURE_ETHERNET;
  public static final java.lang.String FEATURE_FAKETOUCH;
  public static final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT;
  public static final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND;
  public static final java.lang.String FEATURE_FINGERPRINT;
  public static final java.lang.String FEATURE_FREEFORM_WINDOW_MANAGEMENT;
  public static final java.lang.String FEATURE_GAMEPAD;
  public static final java.lang.String FEATURE_HIFI_SENSORS;
  public static final java.lang.String FEATURE_HOME_SCREEN;
  public static final java.lang.String FEATURE_INPUT_METHODS;
  public static final java.lang.String FEATURE_LEANBACK;
  public static final java.lang.String FEATURE_LIVE_TV;
  public static final java.lang.String FEATURE_LIVE_WALLPAPER;
  public static final java.lang.String FEATURE_LOCATION;
  public static final java.lang.String FEATURE_LOCATION_GPS;
  public static final java.lang.String FEATURE_LOCATION_NETWORK;
  public static final java.lang.String FEATURE_MANAGED_USERS;
  public static final java.lang.String FEATURE_MICROPHONE;
  public static final java.lang.String FEATURE_MIDI;
  public static final java.lang.String FEATURE_NFC;
  public static final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION;
  public static final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION_NFCF;
  public static final java.lang.String FEATURE_OPENGLES_EXTENSION_PACK;
  public static final java.lang.String FEATURE_PICTURE_IN_PICTURE;
  public static final java.lang.String FEATURE_PRINTING;
  public static final java.lang.String FEATURE_SCREEN_LANDSCAPE;
  public static final java.lang.String FEATURE_SCREEN_PORTRAIT;
  public static final java.lang.String FEATURE_SECURELY_REMOVES_USERS;
  public static final java.lang.String FEATURE_SENSOR_ACCELEROMETER;
  public static final java.lang.String FEATURE_SENSOR_AMBIENT_TEMPERATURE;
  public static final java.lang.String FEATURE_SENSOR_BAROMETER;
  public static final java.lang.String FEATURE_SENSOR_COMPASS;
  public static final java.lang.String FEATURE_SENSOR_GYROSCOPE;
  public static final java.lang.String FEATURE_SENSOR_HEART_RATE;
  public static final java.lang.String FEATURE_SENSOR_HEART_RATE_ECG;
  public static final java.lang.String FEATURE_SENSOR_LIGHT;
  public static final java.lang.String FEATURE_SENSOR_PROXIMITY;
  public static final java.lang.String FEATURE_SENSOR_RELATIVE_HUMIDITY;
  public static final java.lang.String FEATURE_SENSOR_STEP_COUNTER;
  public static final java.lang.String FEATURE_SENSOR_STEP_DETECTOR;
  public static final java.lang.String FEATURE_SIP;
  public static final java.lang.String FEATURE_SIP_VOIP;
  public static final java.lang.String FEATURE_TELEPHONY;
  public static final java.lang.String FEATURE_TELEPHONY_CDMA;
  public static final java.lang.String FEATURE_TELEPHONY_GSM;
  public static final java.lang.String FEATURE_TELEVISION;
  public static final java.lang.String FEATURE_TOUCHSCREEN;
  public static final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH;
  public static final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT;
  public static final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND;
  public static final java.lang.String FEATURE_USB_ACCESSORY;
  public static final java.lang.String FEATURE_USB_HOST;
  public static final java.lang.String FEATURE_VERIFIED_BOOT;
  public static final java.lang.String FEATURE_VR_MODE;
  public static final java.lang.String FEATURE_VR_MODE_HIGH_PERFORMANCE;
  public static final java.lang.String FEATURE_VULKAN_HARDWARE_LEVEL;
  public static final java.lang.String FEATURE_VULKAN_HARDWARE_VERSION;
  public static final java.lang.String FEATURE_WATCH;
  public static final java.lang.String FEATURE_WEBVIEW;
  public static final java.lang.String FEATURE_WIFI;
  public static final java.lang.String FEATURE_WIFI_DIRECT;
}
public class android.content.pm.PackageManager$NameNotFoundException
  extends android.util.AndroidException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.content.pm.PackageStats
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.content.pm.PackageStats);
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public long cacheSize;
  public long codeSize;
  public long dataSize;
  public long externalCacheSize;
  public long externalCodeSize;
  public long externalDataSize;
  public long externalMediaSize;
  public long externalObbSize;
  public java.lang.String packageName;
}
public class android.content.pm.PathPermission
  extends android.os.PatternMatcher
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, int, java.lang.String, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getReadPermission();
  public java.lang.String getWritePermission();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.pm.PermissionGroupInfo
  extends android.content.pm.PackageItemInfo
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.PermissionGroupInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager);
  public java.lang.String toString();
  public static final int FLAG_PERSONAL_INFO;
  public static final android.os.Parcelable$Creator CREATOR;
  public int descriptionRes;
  public int flags;
  public int priority;
  public java.lang.CharSequence nonLocalizedDescription;
}
public class android.content.pm.PermissionInfo
  extends android.content.pm.PackageItemInfo
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.PermissionInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence loadDescription(android.content.pm.PackageManager);
  public java.lang.String toString();
  public static final int FLAG_COSTS_MONEY;
  public static final int FLAG_INSTALLED;
  public static final int PROTECTION_DANGEROUS;
  public static final int PROTECTION_FLAG_APPOP;
  public static final int PROTECTION_FLAG_DEVELOPMENT;
  public static final int PROTECTION_FLAG_INSTALLER;
  public static final int PROTECTION_FLAG_PRE23;
  public static final int PROTECTION_FLAG_PREINSTALLED;
  public static final int PROTECTION_FLAG_PRIVILEGED;
  public static final int PROTECTION_FLAG_SETUP;
  public static final int PROTECTION_FLAG_SYSTEM;
  public static final int PROTECTION_FLAG_VERIFIER;
  public static final int PROTECTION_MASK_BASE;
  public static final int PROTECTION_MASK_FLAGS;
  public static final int PROTECTION_NORMAL;
  public static final int PROTECTION_SIGNATURE;
  public static final int PROTECTION_SIGNATURE_OR_SYSTEM;
  public static final android.os.Parcelable$Creator CREATOR;
  public int descriptionRes;
  public int flags;
  public int protectionLevel;
  public java.lang.CharSequence nonLocalizedDescription;
  public java.lang.String group;
}
public final class android.content.pm.ProviderInfo
  extends android.content.pm.ComponentInfo
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.ProviderInfo);
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int FLAG_SINGLE_USER;
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean grantUriPermissions;
  public boolean isSyncable;
  public boolean multiprocess;
  public int flags;
  public int initOrder;
  public android.content.pm.PathPermission[] pathPermissions;
  public android.os.PatternMatcher[] uriPermissionPatterns;
  public java.lang.String authority;
  public java.lang.String readPermission;
  public java.lang.String writePermission;
}
public class android.content.pm.ResolveInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.ResolveInfo);
  public final int getIconResource();
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean isDefault;
  public int icon;
  public int labelRes;
  public int match;
  public int preferredOrder;
  public int priority;
  public int specificIndex;
  public android.content.IntentFilter filter;
  public android.content.pm.ActivityInfo activityInfo;
  public android.content.pm.ProviderInfo providerInfo;
  public android.content.pm.ServiceInfo serviceInfo;
  public java.lang.CharSequence nonLocalizedLabel;
  public java.lang.String resolvePackageName;
}
public class android.content.pm.ResolveInfo$DisplayNameComparator
  extends java.lang.Object
  implements java.util.Comparator
{
  public void <init>(android.content.pm.PackageManager);
  public final int compare(android.content.pm.ResolveInfo, android.content.pm.ResolveInfo);
  public int compare(java.lang.Object, java.lang.Object);
}
public class android.content.pm.ServiceInfo
  extends android.content.pm.ComponentInfo
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.content.pm.ServiceInfo);
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int FLAG_EXTERNAL_SERVICE;
  public static final int FLAG_ISOLATED_PROCESS;
  public static final int FLAG_SINGLE_USER;
  public static final int FLAG_STOP_WITH_TASK;
  public static final android.os.Parcelable$Creator CREATOR;
  public int flags;
  public java.lang.String permission;
}
public class android.content.pm.Signature
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(byte[]);
  public void <init>(java.lang.String);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public byte[] toByteArray();
  public char[] toChars();
  public char[] toChars(char[], int[]);
  public java.lang.String toCharsString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.res.AssetFileDescriptor
  extends java.lang.Object
  implements android.os.Parcelable, java.io.Closeable
{
  public void <init>(android.os.ParcelFileDescriptor, long, long);
  public void <init>(android.os.ParcelFileDescriptor, long, long, android.os.Bundle);
  public int describeContents();
  public long getDeclaredLength();
  public long getLength();
  public long getStartOffset();
  public void close()  throws java.io.IOException;
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getExtras();
  public android.os.ParcelFileDescriptor getParcelFileDescriptor();
  public java.io.FileDescriptor getFileDescriptor();
  public java.io.FileInputStream createInputStream()  throws java.io.IOException;
  public java.io.FileOutputStream createOutputStream()  throws java.io.IOException;
  public java.lang.String toString();
  public static final long UNKNOWN_LENGTH;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.content.res.AssetFileDescriptor$AutoCloseInputStream
  extends android.os.ParcelFileDescriptor$AutoCloseInputStream
{
  public void <init>(android.content.res.AssetFileDescriptor)  throws java.io.IOException;
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
}
public class android.content.res.AssetFileDescriptor$AutoCloseOutputStream
  extends android.os.ParcelFileDescriptor$AutoCloseOutputStream
{
  public void <init>(android.content.res.AssetFileDescriptor)  throws java.io.IOException;
  public void write(byte[])  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
}
public final class android.content.res.AssetManager
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public final android.content.res.AssetFileDescriptor openFd(java.lang.String)  throws java.io.IOException;
  public final android.content.res.AssetFileDescriptor openNonAssetFd(int, java.lang.String)  throws java.io.IOException;
  public final android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)  throws java.io.IOException;
  public final android.content.res.XmlResourceParser openXmlResourceParser(int, java.lang.String)  throws java.io.IOException;
  public final android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)  throws java.io.IOException;
  public final java.io.InputStream open(java.lang.String)  throws java.io.IOException;
  public final java.io.InputStream open(java.lang.String, int)  throws java.io.IOException;
  public final native java.lang.String[] getLocales();
  public final native java.lang.String[] list(java.lang.String)  throws java.io.IOException;
  public void close();
  protected void finalize()  throws java.lang.Throwable;
  public static final int ACCESS_BUFFER;
  public static final int ACCESS_RANDOM;
  public static final int ACCESS_STREAMING;
  public static final int ACCESS_UNKNOWN;
}
public final class android.content.res.AssetManager$AssetInputStream
  extends java.io.InputStream
{
  public final boolean markSupported();
  public final int available()  throws java.io.IOException;
  public final int read()  throws java.io.IOException;
  public final int read(byte[])  throws java.io.IOException;
  public final int read(byte[], int, int)  throws java.io.IOException;
  public final long skip(long)  throws java.io.IOException;
  public final void close()  throws java.io.IOException;
  public final void mark(int);
  public final void reset()  throws java.io.IOException;
  protected void finalize()  throws java.lang.Throwable;
}
public class android.content.res.ColorStateList
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.content.res.ColorStateList createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public static android.content.res.ColorStateList createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public static android.content.res.ColorStateList valueOf(int);
  public void <init>(int[][], int[]);
  public boolean isOpaque();
  public boolean isStateful();
  public int describeContents();
  public int getChangingConfigurations();
  public int getColorForState(int[], int);
  public int getDefaultColor();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.res.ColorStateList withAlpha(int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.content.res.Configuration
  extends java.lang.Object
  implements android.os.Parcelable, java.lang.Comparable
{
  public static boolean needNewResources(int, int);
  public void <init>();
  public void <init>(android.content.res.Configuration);
  public boolean equals(android.content.res.Configuration);
  public boolean equals(java.lang.Object);
  public boolean isLayoutSizeAtLeast(int);
  public boolean isScreenRound();
  public int compareTo(android.content.res.Configuration);
  public int compareTo(java.lang.Object);
  public int describeContents();
  public int diff(android.content.res.Configuration);
  public int getLayoutDirection();
  public int hashCode();
  public int updateFrom(android.content.res.Configuration);
  public void readFromParcel(android.os.Parcel);
  public void setLayoutDirection(java.util.Locale);
  public void setLocale(java.util.Locale);
  public void setLocales(android.os.LocaleList);
  public void setTo(android.content.res.Configuration);
  public void setToDefaults();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.LocaleList getLocales();
  public java.lang.String toString();
  public static final int DENSITY_DPI_UNDEFINED;
  public static final int HARDKEYBOARDHIDDEN_NO;
  public static final int HARDKEYBOARDHIDDEN_UNDEFINED;
  public static final int HARDKEYBOARDHIDDEN_YES;
  public static final int KEYBOARDHIDDEN_NO;
  public static final int KEYBOARDHIDDEN_UNDEFINED;
  public static final int KEYBOARDHIDDEN_YES;
  public static final int KEYBOARD_12KEY;
  public static final int KEYBOARD_NOKEYS;
  public static final int KEYBOARD_QWERTY;
  public static final int KEYBOARD_UNDEFINED;
  public static final int MNC_ZERO;
  public static final int NAVIGATIONHIDDEN_NO;
  public static final int NAVIGATIONHIDDEN_UNDEFINED;
  public static final int NAVIGATIONHIDDEN_YES;
  public static final int NAVIGATION_DPAD;
  public static final int NAVIGATION_NONAV;
  public static final int NAVIGATION_TRACKBALL;
  public static final int NAVIGATION_UNDEFINED;
  public static final int NAVIGATION_WHEEL;
  public static final int ORIENTATION_LANDSCAPE;
  public static final int ORIENTATION_PORTRAIT;
  public static final int ORIENTATION_SQUARE;
  public static final int ORIENTATION_UNDEFINED;
  public static final int SCREENLAYOUT_LAYOUTDIR_LTR;
  public static final int SCREENLAYOUT_LAYOUTDIR_MASK;
  public static final int SCREENLAYOUT_LAYOUTDIR_RTL;
  public static final int SCREENLAYOUT_LAYOUTDIR_SHIFT;
  public static final int SCREENLAYOUT_LAYOUTDIR_UNDEFINED;
  public static final int SCREENLAYOUT_LONG_MASK;
  public static final int SCREENLAYOUT_LONG_NO;
  public static final int SCREENLAYOUT_LONG_UNDEFINED;
  public static final int SCREENLAYOUT_LONG_YES;
  public static final int SCREENLAYOUT_ROUND_MASK;
  public static final int SCREENLAYOUT_ROUND_NO;
  public static final int SCREENLAYOUT_ROUND_UNDEFINED;
  public static final int SCREENLAYOUT_ROUND_YES;
  public static final int SCREENLAYOUT_SIZE_LARGE;
  public static final int SCREENLAYOUT_SIZE_MASK;
  public static final int SCREENLAYOUT_SIZE_NORMAL;
  public static final int SCREENLAYOUT_SIZE_SMALL;
  public static final int SCREENLAYOUT_SIZE_UNDEFINED;
  public static final int SCREENLAYOUT_SIZE_XLARGE;
  public static final int SCREENLAYOUT_UNDEFINED;
  public static final int SCREEN_HEIGHT_DP_UNDEFINED;
  public static final int SCREEN_WIDTH_DP_UNDEFINED;
  public static final int SMALLEST_SCREEN_WIDTH_DP_UNDEFINED;
  public static final int TOUCHSCREEN_FINGER;
  public static final int TOUCHSCREEN_NOTOUCH;
  public static final int TOUCHSCREEN_STYLUS;
  public static final int TOUCHSCREEN_UNDEFINED;
  public static final int UI_MODE_NIGHT_MASK;
  public static final int UI_MODE_NIGHT_NO;
  public static final int UI_MODE_NIGHT_UNDEFINED;
  public static final int UI_MODE_NIGHT_YES;
  public static final int UI_MODE_TYPE_APPLIANCE;
  public static final int UI_MODE_TYPE_CAR;
  public static final int UI_MODE_TYPE_DESK;
  public static final int UI_MODE_TYPE_MASK;
  public static final int UI_MODE_TYPE_NORMAL;
  public static final int UI_MODE_TYPE_TELEVISION;
  public static final int UI_MODE_TYPE_UNDEFINED;
  public static final int UI_MODE_TYPE_WATCH;
  public static final android.os.Parcelable$Creator CREATOR;
  public float fontScale;
  public int densityDpi;
  public int hardKeyboardHidden;
  public int keyboard;
  public int keyboardHidden;
  public int mcc;
  public int mnc;
  public int navigation;
  public int navigationHidden;
  public int orientation;
  public int screenHeightDp;
  public int screenLayout;
  public int screenWidthDp;
  public int smallestScreenWidthDp;
  public int touchscreen;
  public int uiMode;
  public java.util.Locale locale;
}
public class android.content.res.ObbInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int OBB_OVERLAY;
  public static final android.os.Parcelable$Creator CREATOR;
  public int flags;
  public int version;
  public java.lang.String filename;
  public java.lang.String packageName;
}
public class android.content.res.ObbScanner
  extends java.lang.Object
{
  public static android.content.res.ObbInfo getObbInfo(java.lang.String)  throws java.io.IOException;
}
public class android.content.res.Resources
  extends java.lang.Object
{
  public static android.content.res.Resources getSystem();
  public void <init>(android.content.res.AssetManager, android.util.DisplayMetrics, android.content.res.Configuration);
  public final void finishPreloading();
  public final void flushLayoutCache();
  public final android.content.res.AssetManager getAssets();
  public final android.content.res.Resources$Theme newTheme();
  public boolean getBoolean(int)  throws android.content.res.Resources$NotFoundException;
  public float getDimension(int)  throws android.content.res.Resources$NotFoundException;
  public float getFraction(int, int, int);
  public int getColor(int)  throws android.content.res.Resources$NotFoundException;
  public int getColor(int, android.content.res.Resources$Theme)  throws android.content.res.Resources$NotFoundException;
  public int getDimensionPixelOffset(int)  throws android.content.res.Resources$NotFoundException;
  public int getDimensionPixelSize(int)  throws android.content.res.Resources$NotFoundException;
  public int getIdentifier(java.lang.String, java.lang.String, java.lang.String);
  public int getInteger(int)  throws android.content.res.Resources$NotFoundException;
  public void getValue(int, android.util.TypedValue, boolean)  throws android.content.res.Resources$NotFoundException;
  public void getValue(java.lang.String, android.util.TypedValue, boolean)  throws android.content.res.Resources$NotFoundException;
  public void getValueForDensity(int, int, android.util.TypedValue, boolean)  throws android.content.res.Resources$NotFoundException;
  public void parseBundleExtra(java.lang.String, android.util.AttributeSet, android.os.Bundle)  throws org.xmlpull.v1.XmlPullParserException;
  public void parseBundleExtras(android.content.res.XmlResourceParser, android.os.Bundle)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics);
  public android.content.res.AssetFileDescriptor openRawResourceFd(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.ColorStateList getColorStateList(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.ColorStateList getColorStateList(int, android.content.res.Resources$Theme)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.Configuration getConfiguration();
  public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet, int[]);
  public android.content.res.TypedArray obtainTypedArray(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.XmlResourceParser getAnimation(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.XmlResourceParser getLayout(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.XmlResourceParser getXml(int)  throws android.content.res.Resources$NotFoundException;
  public android.graphics.Movie getMovie(int)  throws android.content.res.Resources$NotFoundException;
  public android.graphics.drawable.Drawable getDrawable(int)  throws android.content.res.Resources$NotFoundException;
  public android.graphics.drawable.Drawable getDrawable(int, android.content.res.Resources$Theme)  throws android.content.res.Resources$NotFoundException;
  public android.graphics.drawable.Drawable getDrawableForDensity(int, int)  throws android.content.res.Resources$NotFoundException;
  public android.graphics.drawable.Drawable getDrawableForDensity(int, int, android.content.res.Resources$Theme);
  public android.util.DisplayMetrics getDisplayMetrics();
  public int[] getIntArray(int)  throws android.content.res.Resources$NotFoundException;
  public java.io.InputStream openRawResource(int)  throws android.content.res.Resources$NotFoundException;
  public java.io.InputStream openRawResource(int, android.util.TypedValue)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence getQuantityText(int, int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence getText(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence getText(int, java.lang.CharSequence);
  public java.lang.CharSequence[] getTextArray(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getQuantityString(int, int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getQuantityString(int, int, java.lang.Object[])  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourceEntryName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourceName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourcePackageName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourceTypeName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getString(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getString(int, java.lang.Object[])  throws android.content.res.Resources$NotFoundException;
  public java.lang.String[] getStringArray(int)  throws android.content.res.Resources$NotFoundException;
}
public class android.content.res.Resources$NotFoundException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Exception);
}
public final class android.content.res.Resources$Theme
  extends java.lang.Object
{
  public boolean resolveAttribute(int, android.util.TypedValue, boolean);
  public int getChangingConfigurations();
  public void applyStyle(int, boolean);
  public void dump(int, java.lang.String, java.lang.String);
  public void setTo(android.content.res.Resources$Theme);
  public android.content.res.Resources getResources();
  public android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet, int[], int, int);
  public android.content.res.TypedArray obtainStyledAttributes(int, int[])  throws android.content.res.Resources$NotFoundException;
  public android.content.res.TypedArray obtainStyledAttributes(int[]);
  public android.graphics.drawable.Drawable getDrawable(int)  throws android.content.res.Resources$NotFoundException;
}
public class android.content.res.TypedArray
  extends java.lang.Object
{
  public boolean getBoolean(int, boolean);
  public boolean getValue(int, android.util.TypedValue);
  public boolean hasValue(int);
  public boolean hasValueOrEmpty(int);
  public float getDimension(int, float);
  public float getFloat(int, float);
  public float getFraction(int, int, int, float);
  public int getChangingConfigurations();
  public int getColor(int, int);
  public int getDimensionPixelOffset(int, int);
  public int getDimensionPixelSize(int, int);
  public int getIndex(int);
  public int getIndexCount();
  public int getInt(int, int);
  public int getInteger(int, int);
  public int getLayoutDimension(int, int);
  public int getLayoutDimension(int, java.lang.String);
  public int getResourceId(int, int);
  public int getType(int);
  public int length();
  public void recycle();
  public android.content.res.ColorStateList getColorStateList(int);
  public android.content.res.Resources getResources();
  public android.graphics.drawable.Drawable getDrawable(int);
  public android.util.TypedValue peekValue(int);
  public java.lang.CharSequence getText(int);
  public java.lang.CharSequence[] getTextArray(int);
  public java.lang.String getNonResourceString(int);
  public java.lang.String getPositionDescription();
  public java.lang.String getString(int);
  public java.lang.String toString();
}
public interface android.content.res.XmlResourceParser
  extends org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, java.lang.AutoCloseable
{
  public abstract void close();
}
public abstract class android.database.AbstractCursor
  extends java.lang.Object
  implements android.database.CrossProcessCursor
{
  public void <init>();
  public final boolean isAfterLast();
  public final boolean isBeforeFirst();
  public final boolean isFirst();
  public final boolean isLast();
  public final boolean move(int);
  public final boolean moveToFirst();
  public final boolean moveToLast();
  public final boolean moveToNext();
  public final boolean moveToPosition(int);
  public final boolean moveToPrevious();
  public final int getPosition();
  public abstract boolean isNull(int);
  public abstract double getDouble(int);
  public abstract float getFloat(int);
  public abstract int getCount();
  public abstract int getInt(int);
  public abstract long getLong(int);
  public abstract short getShort(int);
  public abstract java.lang.String getString(int);
  public abstract java.lang.String[] getColumnNames();
  public boolean getWantsAllOnMoveCalls();
  public boolean isClosed();
  public boolean onMove(int, int);
  public boolean requery();
  public int getColumnCount();
  public int getColumnIndex(java.lang.String);
  public int getColumnIndexOrThrow(java.lang.String);
  public int getType(int);
  public void close();
  public void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public void deactivate();
  public void fillWindow(int, android.database.CursorWindow);
  public void registerContentObserver(android.database.ContentObserver);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void setExtras(android.os.Bundle);
  public void setNotificationUri(android.content.ContentResolver, android.net.Uri);
  public void unregisterContentObserver(android.database.ContentObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public android.database.CursorWindow getWindow();
  public android.net.Uri getNotificationUri();
  public android.os.Bundle getExtras();
  public android.os.Bundle respond(android.os.Bundle);
  public byte[] getBlob(int);
  public java.lang.String getColumnName(int);
  protected boolean isFieldUpdated(int);
  protected void checkPosition();
  protected void finalize();
  protected void onChange(boolean);
  protected java.lang.Object getUpdatedField(int);
  protected boolean mClosed;
  protected int mPos;
  protected android.content.ContentResolver mContentResolver;
}
public class android.database.AbstractCursor$SelfContentObserver
  extends android.database.ContentObserver
{
  public void <init>(android.database.AbstractCursor);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
}
public abstract class android.database.AbstractWindowedCursor
  extends android.database.AbstractCursor
{
  public void <init>();
  public boolean hasWindow();
  public boolean isBlob(int);
  public boolean isFloat(int);
  public boolean isLong(int);
  public boolean isNull(int);
  public boolean isString(int);
  public double getDouble(int);
  public float getFloat(int);
  public int getInt(int);
  public int getType(int);
  public long getLong(int);
  public short getShort(int);
  public void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public void setWindow(android.database.CursorWindow);
  public android.database.CursorWindow getWindow();
  public byte[] getBlob(int);
  public java.lang.String getString(int);
  protected void checkPosition();
  protected android.database.CursorWindow mWindow;
}
public final class android.database.CharArrayBuffer
  extends java.lang.Object
{
  public void <init>(char[]);
  public void <init>(int);
  public int sizeCopied;
  public char[] data;
}
public class android.database.ContentObservable
  extends android.database.Observable
{
  public void <init>();
  public void dispatchChange(boolean);
  public void dispatchChange(boolean, android.net.Uri);
  public void notifyChange(boolean);
  public void registerObserver(android.database.ContentObserver);
  public void registerObserver(java.lang.Object);
}
public abstract class android.database.ContentObserver
  extends java.lang.Object
{
  public void <init>(android.os.Handler);
  public final void dispatchChange(boolean);
  public final void dispatchChange(boolean, android.net.Uri);
  public boolean deliverSelfNotifications();
  public void onChange(boolean);
  public void onChange(boolean, android.net.Uri);
}
public interface android.database.CrossProcessCursor
  extends android.database.Cursor
{
  public abstract boolean onMove(int, int);
  public abstract void fillWindow(int, android.database.CursorWindow);
  public abstract android.database.CursorWindow getWindow();
}
public class android.database.CrossProcessCursorWrapper
  extends android.database.CursorWrapper
  implements android.database.CrossProcessCursor
{
  public void <init>(android.database.Cursor);
  public boolean onMove(int, int);
  public void fillWindow(int, android.database.CursorWindow);
  public android.database.CursorWindow getWindow();
}
public interface android.database.Cursor
  extends java.io.Closeable
{
  public abstract boolean getWantsAllOnMoveCalls();
  public abstract boolean isAfterLast();
  public abstract boolean isBeforeFirst();
  public abstract boolean isClosed();
  public abstract boolean isFirst();
  public abstract boolean isLast();
  public abstract boolean isNull(int);
  public abstract boolean move(int);
  public abstract boolean moveToFirst();
  public abstract boolean moveToLast();
  public abstract boolean moveToNext();
  public abstract boolean moveToPosition(int);
  public abstract boolean moveToPrevious();
  public abstract boolean requery();
  public abstract double getDouble(int);
  public abstract float getFloat(int);
  public abstract int getColumnCount();
  public abstract int getColumnIndex(java.lang.String);
  public abstract int getColumnIndexOrThrow(java.lang.String)  throws java.lang.IllegalArgumentException;
  public abstract int getCount();
  public abstract int getInt(int);
  public abstract int getPosition();
  public abstract int getType(int);
  public abstract long getLong(int);
  public abstract short getShort(int);
  public abstract void close();
  public abstract void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public abstract void deactivate();
  public abstract void registerContentObserver(android.database.ContentObserver);
  public abstract void registerDataSetObserver(android.database.DataSetObserver);
  public abstract void setExtras(android.os.Bundle);
  public abstract void setNotificationUri(android.content.ContentResolver, android.net.Uri);
  public abstract void unregisterContentObserver(android.database.ContentObserver);
  public abstract void unregisterDataSetObserver(android.database.DataSetObserver);
  public abstract android.net.Uri getNotificationUri();
  public abstract android.os.Bundle getExtras();
  public abstract android.os.Bundle respond(android.os.Bundle);
  public abstract byte[] getBlob(int);
  public abstract java.lang.String getColumnName(int);
  public abstract java.lang.String getString(int);
  public abstract java.lang.String[] getColumnNames();
  public static final int FIELD_TYPE_BLOB;
  public static final int FIELD_TYPE_FLOAT;
  public static final int FIELD_TYPE_INTEGER;
  public static final int FIELD_TYPE_NULL;
  public static final int FIELD_TYPE_STRING;
}
public class android.database.CursorIndexOutOfBoundsException
  extends java.lang.IndexOutOfBoundsException
{
  public void <init>(int, int);
  public void <init>(java.lang.String);
}
public final class android.database.CursorJoiner
  extends java.lang.Object
  implements java.util.Iterator, java.lang.Iterable
{
  public void <init>(android.database.Cursor, java.lang.String[], android.database.Cursor, java.lang.String[]);
  public boolean hasNext();
  public void remove();
  public android.database.CursorJoiner$Result next();
  public java.lang.Object next();
  public java.util.Iterator iterator();
}
public final class android.database.CursorJoiner$Result
  extends java.lang.Enum
{
  public static android.database.CursorJoiner$Result valueOf(java.lang.String);
  public static android.database.CursorJoiner$Result[] values();
  public static final android.database.CursorJoiner$Result BOTH;
  public static final android.database.CursorJoiner$Result LEFT;
  public static final android.database.CursorJoiner$Result RIGHT;
}
public class android.database.CursorWindow
  extends android.database.sqlite.SQLiteClosable
  implements android.os.Parcelable
{
  public static android.database.CursorWindow newFromParcel(android.os.Parcel);
  public void <init>(boolean);
  public void <init>(java.lang.String);
  public boolean allocRow();
  public boolean isBlob(int, int);
  public boolean isFloat(int, int);
  public boolean isLong(int, int);
  public boolean isNull(int, int);
  public boolean isString(int, int);
  public boolean putBlob(byte[], int, int);
  public boolean putDouble(double, int, int);
  public boolean putLong(long, int, int);
  public boolean putNull(int, int);
  public boolean putString(java.lang.String, int, int);
  public boolean setNumColumns(int);
  public double getDouble(int, int);
  public float getFloat(int, int);
  public int describeContents();
  public int getInt(int, int);
  public int getNumRows();
  public int getStartPosition();
  public int getType(int, int);
  public long getLong(int, int);
  public short getShort(int, int);
  public void clear();
  public void copyStringToBuffer(int, int, android.database.CharArrayBuffer);
  public void freeLastRow();
  public void setStartPosition(int);
  public void writeToParcel(android.os.Parcel, int);
  public byte[] getBlob(int, int);
  public java.lang.String getString(int, int);
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
  protected void onAllReferencesReleased();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.database.CursorWrapper
  extends java.lang.Object
  implements android.database.Cursor
{
  public void <init>(android.database.Cursor);
  public boolean getWantsAllOnMoveCalls();
  public boolean isAfterLast();
  public boolean isBeforeFirst();
  public boolean isClosed();
  public boolean isFirst();
  public boolean isLast();
  public boolean isNull(int);
  public boolean move(int);
  public boolean moveToFirst();
  public boolean moveToLast();
  public boolean moveToNext();
  public boolean moveToPosition(int);
  public boolean moveToPrevious();
  public boolean requery();
  public double getDouble(int);
  public float getFloat(int);
  public int getColumnCount();
  public int getColumnIndex(java.lang.String);
  public int getColumnIndexOrThrow(java.lang.String)  throws java.lang.IllegalArgumentException;
  public int getCount();
  public int getInt(int);
  public int getPosition();
  public int getType(int);
  public long getLong(int);
  public short getShort(int);
  public void close();
  public void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public void deactivate();
  public void registerContentObserver(android.database.ContentObserver);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void setExtras(android.os.Bundle);
  public void setNotificationUri(android.content.ContentResolver, android.net.Uri);
  public void unregisterContentObserver(android.database.ContentObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public android.database.Cursor getWrappedCursor();
  public android.net.Uri getNotificationUri();
  public android.os.Bundle getExtras();
  public android.os.Bundle respond(android.os.Bundle);
  public byte[] getBlob(int);
  public java.lang.String getColumnName(int);
  public java.lang.String getString(int);
  public java.lang.String[] getColumnNames();
}
public class android.database.DataSetObservable
  extends android.database.Observable
{
  public void <init>();
  public void notifyChanged();
  public void notifyInvalidated();
}
public abstract class android.database.DataSetObserver
  extends java.lang.Object
{
  public void <init>();
  public void onChanged();
  public void onInvalidated();
}
public interface android.database.DatabaseErrorHandler
{
  public abstract void onCorruption(android.database.sqlite.SQLiteDatabase);
}
public class android.database.DatabaseUtils
  extends java.lang.Object
{
  public static final void appendValueToSql(java.lang.StringBuilder, java.lang.Object);
  public static final void readExceptionFromParcel(android.os.Parcel);
  public static final void writeExceptionToParcel(android.os.Parcel, java.lang.Exception);
  public static int getSqlStatementType(java.lang.String);
  public static long longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[]);
  public static long longForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[]);
  public static long queryNumEntries(android.database.sqlite.SQLiteDatabase, java.lang.String);
  public static long queryNumEntries(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String);
  public static long queryNumEntries(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, java.lang.String[]);
  public static void appendEscapedSQLString(java.lang.StringBuilder, java.lang.String);
  public static void bindObjectToProgram(android.database.sqlite.SQLiteProgram, int, java.lang.Object);
  public static void createDbFromSqlStatements(android.content.Context, java.lang.String, int, java.lang.String);
  public static void cursorDoubleToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorDoubleToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorDoubleToCursorValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorFloatToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorIntToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorIntToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorIntToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorLongToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorLongToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorLongToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorRowToContentValues(android.database.Cursor, android.content.ContentValues);
  public static void cursorShortToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorStringToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues);
  public static void cursorStringToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String);
  public static void cursorStringToContentValuesIfPresent(android.database.Cursor, android.content.ContentValues, java.lang.String);
  public static void cursorStringToInsertHelper(android.database.Cursor, java.lang.String, android.database.DatabaseUtils$InsertHelper, int);
  public static void dumpCurrentRow(android.database.Cursor);
  public static void dumpCurrentRow(android.database.Cursor, java.io.PrintStream);
  public static void dumpCurrentRow(android.database.Cursor, java.lang.StringBuilder);
  public static void dumpCursor(android.database.Cursor);
  public static void dumpCursor(android.database.Cursor, java.io.PrintStream);
  public static void dumpCursor(android.database.Cursor, java.lang.StringBuilder);
  public static void readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel)  throws java.io.FileNotFoundException;
  public static void readExceptionWithOperationApplicationExceptionFromParcel(android.os.Parcel)  throws android.content.OperationApplicationException;
  public static android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[]);
  public static android.os.ParcelFileDescriptor blobFileDescriptorForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[]);
  public static java.lang.String concatenateWhere(java.lang.String, java.lang.String);
  public static java.lang.String dumpCurrentRowToString(android.database.Cursor);
  public static java.lang.String dumpCursorToString(android.database.Cursor);
  public static java.lang.String getCollationKey(java.lang.String);
  public static java.lang.String getHexCollationKey(java.lang.String);
  public static java.lang.String sqlEscapeString(java.lang.String);
  public static java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[]);
  public static java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[]);
  public static java.lang.String[] appendSelectionArgs(java.lang.String[], java.lang.String[]);
  public void <init>();
  public static final int STATEMENT_ABORT;
  public static final int STATEMENT_ATTACH;
  public static final int STATEMENT_BEGIN;
  public static final int STATEMENT_COMMIT;
  public static final int STATEMENT_DDL;
  public static final int STATEMENT_OTHER;
  public static final int STATEMENT_PRAGMA;
  public static final int STATEMENT_SELECT;
  public static final int STATEMENT_UNPREPARED;
  public static final int STATEMENT_UPDATE;
}
public class android.database.DatabaseUtils$InsertHelper
  extends java.lang.Object
{
  public void <init>(android.database.sqlite.SQLiteDatabase, java.lang.String);
  public int getColumnIndex(java.lang.String);
  public long execute();
  public long insert(android.content.ContentValues);
  public long replace(android.content.ContentValues);
  public void bind(int, boolean);
  public void bind(int, byte[]);
  public void bind(int, double);
  public void bind(int, float);
  public void bind(int, int);
  public void bind(int, java.lang.String);
  public void bind(int, long);
  public void bindNull(int);
  public void close();
  public void prepareForInsert();
  public void prepareForReplace();
}
public final class android.database.DefaultDatabaseErrorHandler
  extends java.lang.Object
  implements android.database.DatabaseErrorHandler
{
  public void <init>();
  public void onCorruption(android.database.sqlite.SQLiteDatabase);
}
public class android.database.MatrixCursor
  extends android.database.AbstractCursor
{
  public void <init>(java.lang.String[]);
  public void <init>(java.lang.String[], int);
  public boolean isNull(int);
  public double getDouble(int);
  public float getFloat(int);
  public int getCount();
  public int getInt(int);
  public int getType(int);
  public long getLong(int);
  public short getShort(int);
  public void addRow(java.lang.Iterable);
  public void addRow(java.lang.Object[]);
  public android.database.MatrixCursor$RowBuilder newRow();
  public byte[] getBlob(int);
  public java.lang.String getString(int);
  public java.lang.String[] getColumnNames();
}
public class android.database.MatrixCursor$RowBuilder
  extends java.lang.Object
{
  public android.database.MatrixCursor$RowBuilder add(java.lang.Object);
  public android.database.MatrixCursor$RowBuilder add(java.lang.String, java.lang.Object);
}
public class android.database.MergeCursor
  extends android.database.AbstractCursor
{
  public void <init>(android.database.Cursor[]);
  public boolean isNull(int);
  public boolean onMove(int, int);
  public boolean requery();
  public double getDouble(int);
  public float getFloat(int);
  public int getCount();
  public int getInt(int);
  public int getType(int);
  public long getLong(int);
  public short getShort(int);
  public void close();
  public void deactivate();
  public void registerContentObserver(android.database.ContentObserver);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterContentObserver(android.database.ContentObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public byte[] getBlob(int);
  public java.lang.String getString(int);
  public java.lang.String[] getColumnNames();
}
public abstract class android.database.Observable
  extends java.lang.Object
{
  public void <init>();
  public void registerObserver(java.lang.Object);
  public void unregisterAll();
  public void unregisterObserver(java.lang.Object);
  protected final java.util.ArrayList mObservers;
}
public class android.database.SQLException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public class android.database.StaleDataException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteAbortException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteAccessPermException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteBlobTooBigException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteCantOpenDatabaseException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class android.database.sqlite.SQLiteClosable
  extends java.lang.Object
  implements java.io.Closeable
{
  public void <init>();
  public void acquireReference();
  public void close();
  public void releaseReference();
  public void releaseReferenceFromContainer();
  protected abstract void onAllReferencesReleased();
  protected void onAllReferencesReleasedFromContainer();
}
public class android.database.sqlite.SQLiteConstraintException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteCursor
  extends android.database.AbstractWindowedCursor
{
  public void <init>(android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery);
  public void <init>(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery);
  public boolean onMove(int, int);
  public boolean requery();
  public int getColumnIndex(java.lang.String);
  public int getCount();
  public void close();
  public void deactivate();
  public void setSelectionArguments(java.lang.String[]);
  public void setWindow(android.database.CursorWindow);
  public android.database.sqlite.SQLiteDatabase getDatabase();
  public java.lang.String[] getColumnNames();
  protected void finalize();
}
public interface android.database.sqlite.SQLiteCursorDriver
{
  public abstract void cursorClosed();
  public abstract void cursorDeactivated();
  public abstract void cursorRequeried(android.database.Cursor);
  public abstract void setBindArguments(java.lang.String[]);
  public abstract android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String[]);
}
public final class android.database.sqlite.SQLiteDatabase
  extends android.database.sqlite.SQLiteClosable
{
  public static boolean deleteDatabase(java.io.File);
  public static int releaseMemory();
  public static android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory);
  public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int);
  public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public static java.lang.String findEditTable(java.lang.String);
  public final java.lang.String getPath();
  public boolean enableWriteAheadLogging();
  public boolean inTransaction();
  public boolean isDatabaseIntegrityOk();
  public boolean isDbLockedByCurrentThread();
  public boolean isDbLockedByOtherThreads();
  public boolean isOpen();
  public boolean isReadOnly();
  public boolean isWriteAheadLoggingEnabled();
  public boolean needUpgrade(int);
  public boolean yieldIfContended();
  public boolean yieldIfContendedSafely();
  public boolean yieldIfContendedSafely(long);
  public int delete(java.lang.String, java.lang.String, java.lang.String[]);
  public int getVersion();
  public int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int);
  public long getMaximumSize();
  public long getPageSize();
  public long insert(java.lang.String, java.lang.String, android.content.ContentValues);
  public long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)  throws android.database.SQLException;
  public long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int);
  public long replace(java.lang.String, java.lang.String, android.content.ContentValues);
  public long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)  throws android.database.SQLException;
  public long setMaximumSize(long);
  public void beginTransaction();
  public void beginTransactionNonExclusive();
  public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener);
  public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener);
  public void disableWriteAheadLogging();
  public void endTransaction();
  public void execSQL(java.lang.String)  throws android.database.SQLException;
  public void execSQL(java.lang.String, java.lang.Object[])  throws android.database.SQLException;
  public void markTableSyncable(java.lang.String, java.lang.String);
  public void markTableSyncable(java.lang.String, java.lang.String, java.lang.String);
  public void setForeignKeyConstraintsEnabled(boolean);
  public void setLocale(java.util.Locale);
  public void setLockingEnabled(boolean);
  public void setMaxSqlCacheSize(int);
  public void setPageSize(long);
  public void setTransactionSuccessful();
  public void setVersion(int);
  public void validateSql(java.lang.String, android.os.CancellationSignal);
  public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal);
  public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal);
  public android.database.Cursor rawQuery(java.lang.String, java.lang.String[]);
  public android.database.Cursor rawQuery(java.lang.String, java.lang.String[], android.os.CancellationSignal);
  public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String);
  public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal);
  public android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)  throws android.database.SQLException;
  public java.lang.String toString();
  public java.util.List getAttachedDbs();
  public java.util.Map getSyncedTables();
  protected void finalize()  throws java.lang.Throwable;
  protected void onAllReferencesReleased();
  public static final int CONFLICT_ABORT;
  public static final int CONFLICT_FAIL;
  public static final int CONFLICT_IGNORE;
  public static final int CONFLICT_NONE;
  public static final int CONFLICT_REPLACE;
  public static final int CONFLICT_ROLLBACK;
  public static final int CREATE_IF_NECESSARY;
  public static final int ENABLE_WRITE_AHEAD_LOGGING;
  public static final int MAX_SQL_CACHE_SIZE;
  public static final int NO_LOCALIZED_COLLATORS;
  public static final int OPEN_READONLY;
  public static final int OPEN_READWRITE;
  public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH;
}
public interface android.database.sqlite.SQLiteDatabase$CursorFactory
{
  public abstract android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery);
}
public class android.database.sqlite.SQLiteDatabaseCorruptException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteDatabaseLockedException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteDatatypeMismatchException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteDiskIOException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteDoneException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteException
  extends android.database.SQLException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public class android.database.sqlite.SQLiteFullException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.database.sqlite.SQLiteMisuseException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class android.database.sqlite.SQLiteOpenHelper
  extends java.lang.Object
{
  public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int);
  public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler);
  public abstract void onCreate(android.database.sqlite.SQLiteDatabase);
  public abstract void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int);
  public void close();
  public void onConfigure(android.database.sqlite.SQLiteDatabase);
  public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int);
  public void onOpen(android.database.sqlite.SQLiteDatabase);
  public void setWriteAheadLoggingEnabled(boolean);
  public android.database.sqlite.SQLiteDatabase getReadableDatabase();
  public android.database.sqlite.SQLiteDatabase getWritableDatabase();
  public java.lang.String getDatabaseName();
}
public class android.database.sqlite.SQLiteOutOfMemoryException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class android.database.sqlite.SQLiteProgram
  extends android.database.sqlite.SQLiteClosable
{
  public final int getUniqueId();
  public void bindAllArgsAsStrings(java.lang.String[]);
  public void bindBlob(int, byte[]);
  public void bindDouble(int, double);
  public void bindLong(int, long);
  public void bindNull(int);
  public void bindString(int, java.lang.String);
  public void clearBindings();
  protected void onAllReferencesReleased();
}
public final class android.database.sqlite.SQLiteQuery
  extends android.database.sqlite.SQLiteProgram
{
  public java.lang.String toString();
}
public class android.database.sqlite.SQLiteQueryBuilder
  extends java.lang.Object
{
  public static void appendColumns(java.lang.StringBuilder, java.lang.String[]);
  public static java.lang.String buildQueryString(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void <init>();
  public void appendWhere(java.lang.CharSequence);
  public void appendWhereEscapeString(java.lang.String);
  public void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory);
  public void setDistinct(boolean);
  public void setProjectionMap(java.util.Map);
  public void setStrict(boolean);
  public void setTables(java.lang.String);
  public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal);
  public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String buildUnionQuery(java.lang.String[], java.lang.String, java.lang.String);
  public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String);
  public java.lang.String getTables();
}
public class android.database.sqlite.SQLiteReadOnlyDatabaseException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class android.database.sqlite.SQLiteStatement
  extends android.database.sqlite.SQLiteProgram
{
  public int executeUpdateDelete();
  public long executeInsert();
  public long simpleQueryForLong();
  public void execute();
  public android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor();
  public java.lang.String simpleQueryForString();
  public java.lang.String toString();
}
public class android.database.sqlite.SQLiteTableLockedException
  extends android.database.sqlite.SQLiteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface android.database.sqlite.SQLiteTransactionListener
{
  public abstract void onBegin();
  public abstract void onCommit();
  public abstract void onRollback();
}
public class android.drm.DrmConvertedStatus
  extends java.lang.Object
{
  public void <init>(int, byte[], int);
  public static final int STATUS_ERROR;
  public static final int STATUS_INPUTDATA_ERROR;
  public static final int STATUS_OK;
  public final int offset;
  public final int statusCode;
  public final byte[] convertedData;
}
public class android.drm.DrmErrorEvent
  extends android.drm.DrmEvent
{
  public void <init>(int, int, java.lang.String);
  public void <init>(int, int, java.lang.String, java.util.HashMap);
  public static final int TYPE_ACQUIRE_DRM_INFO_FAILED;
  public static final int TYPE_NOT_SUPPORTED;
  public static final int TYPE_NO_INTERNET_CONNECTION;
  public static final int TYPE_OUT_OF_MEMORY;
  public static final int TYPE_PROCESS_DRM_INFO_FAILED;
  public static final int TYPE_REMOVE_ALL_RIGHTS_FAILED;
  public static final int TYPE_RIGHTS_NOT_INSTALLED;
  public static final int TYPE_RIGHTS_RENEWAL_NOT_ALLOWED;
}
public class android.drm.DrmEvent
  extends java.lang.Object
{
  public int getType();
  public int getUniqueId();
  public java.lang.Object getAttribute(java.lang.String);
  public java.lang.String getMessage();
  protected void <init>(int, int, java.lang.String);
  protected void <init>(int, int, java.lang.String, java.util.HashMap);
  public static final int TYPE_ALL_RIGHTS_REMOVED;
  public static final int TYPE_DRM_INFO_PROCESSED;
  public static final java.lang.String DRM_INFO_OBJECT;
  public static final java.lang.String DRM_INFO_STATUS_OBJECT;
}
public class android.drm.DrmInfo
  extends java.lang.Object
{
  public void <init>(int, byte[], java.lang.String);
  public void <init>(int, java.lang.String, java.lang.String);
  public int getInfoType();
  public void put(java.lang.String, java.lang.Object);
  public byte[] getData();
  public java.lang.Object get(java.lang.String);
  public java.lang.String getMimeType();
  public java.util.Iterator iterator();
  public java.util.Iterator keyIterator();
}
public class android.drm.DrmInfoEvent
  extends android.drm.DrmEvent
{
  public void <init>(int, int, java.lang.String);
  public void <init>(int, int, java.lang.String, java.util.HashMap);
  public static final int TYPE_ACCOUNT_ALREADY_REGISTERED;
  public static final int TYPE_ALREADY_REGISTERED_BY_ANOTHER_ACCOUNT;
  public static final int TYPE_REMOVE_RIGHTS;
  public static final int TYPE_RIGHTS_INSTALLED;
  public static final int TYPE_RIGHTS_REMOVED;
  public static final int TYPE_WAIT_FOR_RIGHTS;
}
public class android.drm.DrmInfoRequest
  extends java.lang.Object
{
  public void <init>(int, java.lang.String);
  public int getInfoType();
  public void put(java.lang.String, java.lang.Object);
  public java.lang.Object get(java.lang.String);
  public java.lang.String getMimeType();
  public java.util.Iterator iterator();
  public java.util.Iterator keyIterator();
  public static final int TYPE_REGISTRATION_INFO;
  public static final int TYPE_RIGHTS_ACQUISITION_INFO;
  public static final int TYPE_RIGHTS_ACQUISITION_PROGRESS_INFO;
  public static final int TYPE_UNREGISTRATION_INFO;
  public static final java.lang.String ACCOUNT_ID;
  public static final java.lang.String SUBSCRIPTION_ID;
}
public class android.drm.DrmInfoStatus
  extends java.lang.Object
{
  public void <init>(int, int, android.drm.ProcessedData, java.lang.String);
  public static final int STATUS_ERROR;
  public static final int STATUS_OK;
  public final int infoType;
  public final int statusCode;
  public final android.drm.ProcessedData data;
  public final java.lang.String mimeType;
}
public class android.drm.DrmManagerClient
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public void <init>(android.content.Context);
  public boolean canHandle(android.net.Uri, java.lang.String);
  public boolean canHandle(java.lang.String, java.lang.String);
  public int acquireRights(android.drm.DrmInfoRequest);
  public int checkRightsStatus(android.net.Uri);
  public int checkRightsStatus(android.net.Uri, int);
  public int checkRightsStatus(java.lang.String);
  public int checkRightsStatus(java.lang.String, int);
  public int getDrmObjectType(android.net.Uri, java.lang.String);
  public int getDrmObjectType(java.lang.String, java.lang.String);
  public int openConvertSession(java.lang.String);
  public int processDrmInfo(android.drm.DrmInfo);
  public int removeAllRights();
  public int removeRights(android.net.Uri);
  public int removeRights(java.lang.String);
  public int saveRights(android.drm.DrmRights, java.lang.String, java.lang.String)  throws java.io.IOException;
  public void close();
  public void release();
  public void setOnErrorListener(android.drm.DrmManagerClient$OnErrorListener);
  public void setOnEventListener(android.drm.DrmManagerClient$OnEventListener);
  public void setOnInfoListener(android.drm.DrmManagerClient$OnInfoListener);
  public android.content.ContentValues getConstraints(android.net.Uri, int);
  public android.content.ContentValues getConstraints(java.lang.String, int);
  public android.content.ContentValues getMetadata(android.net.Uri);
  public android.content.ContentValues getMetadata(java.lang.String);
  public android.drm.DrmConvertedStatus closeConvertSession(int);
  public android.drm.DrmConvertedStatus convertData(int, byte[]);
  public android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest);
  public java.lang.String getOriginalMimeType(android.net.Uri);
  public java.lang.String getOriginalMimeType(java.lang.String);
  public java.lang.String[] getAvailableDrmEngines();
  protected void finalize()  throws java.lang.Throwable;
  public static final int ERROR_NONE;
  public static final int ERROR_UNKNOWN;
}
public interface android.drm.DrmManagerClient$OnErrorListener
{
  public abstract void onError(android.drm.DrmManagerClient, android.drm.DrmErrorEvent);
}
public interface android.drm.DrmManagerClient$OnEventListener
{
  public abstract void onEvent(android.drm.DrmManagerClient, android.drm.DrmEvent);
}
public interface android.drm.DrmManagerClient$OnInfoListener
{
  public abstract void onInfo(android.drm.DrmManagerClient, android.drm.DrmInfoEvent);
}
public class android.drm.DrmRights
  extends java.lang.Object
{
  public void <init>(android.drm.ProcessedData, java.lang.String);
  public void <init>(java.io.File, java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public byte[] getData();
  public java.lang.String getAccountId();
  public java.lang.String getMimeType();
  public java.lang.String getSubscriptionId();
}
public class android.drm.DrmStore
  extends java.lang.Object
{
  public void <init>();
}
public class android.drm.DrmStore$Action
  extends java.lang.Object
{
  public void <init>();
  public static final int DEFAULT;
  public static final int DISPLAY;
  public static final int EXECUTE;
  public static final int OUTPUT;
  public static final int PLAY;
  public static final int PREVIEW;
  public static final int RINGTONE;
  public static final int TRANSFER;
}
public interface android.drm.DrmStore$ConstraintsColumns
{
  public static final java.lang.String EXTENDED_METADATA;
  public static final java.lang.String LICENSE_AVAILABLE_TIME;
  public static final java.lang.String LICENSE_EXPIRY_TIME;
  public static final java.lang.String LICENSE_START_TIME;
  public static final java.lang.String MAX_REPEAT_COUNT;
  public static final java.lang.String REMAINING_REPEAT_COUNT;
}
public class android.drm.DrmStore$DrmObjectType
  extends java.lang.Object
{
  public void <init>();
  public static final int CONTENT;
  public static final int RIGHTS_OBJECT;
  public static final int TRIGGER_OBJECT;
  public static final int UNKNOWN;
}
public class android.drm.DrmStore$Playback
  extends java.lang.Object
{
  public void <init>();
  public static final int PAUSE;
  public static final int RESUME;
  public static final int START;
  public static final int STOP;
}
public class android.drm.DrmStore$RightsStatus
  extends java.lang.Object
{
  public void <init>();
  public static final int RIGHTS_EXPIRED;
  public static final int RIGHTS_INVALID;
  public static final int RIGHTS_NOT_ACQUIRED;
  public static final int RIGHTS_VALID;
}
public class android.drm.DrmSupportInfo
  extends java.lang.Object
{
  public void <init>();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void addFileSuffix(java.lang.String);
  public void addMimeType(java.lang.String);
  public void setDescription(java.lang.String);
  public java.lang.String getDescriprition();
  public java.lang.String getDescription();
  public java.util.Iterator getFileSuffixIterator();
  public java.util.Iterator getMimeTypeIterator();
}
public class android.drm.DrmUtils
  extends java.lang.Object
{
  public static android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[]);
  public void <init>();
}
public class android.drm.DrmUtils$ExtendedMetadataParser
  extends java.lang.Object
{
  public java.lang.String get(java.lang.String);
  public java.util.Iterator iterator();
  public java.util.Iterator keyIterator();
}
public class android.drm.ProcessedData
  extends java.lang.Object
{
  public byte[] getData();
  public java.lang.String getAccountId();
  public java.lang.String getSubscriptionId();
}
public class android.gesture.Gesture
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public float getLength();
  public int describeContents();
  public int getStrokesCount();
  public long getID();
  public void addStroke(android.gesture.GestureStroke);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Bitmap toBitmap(int, int, int, int);
  public android.graphics.Bitmap toBitmap(int, int, int, int, int);
  public android.graphics.Path toPath();
  public android.graphics.Path toPath(android.graphics.Path);
  public android.graphics.Path toPath(android.graphics.Path, int, int, int, int);
  public android.graphics.Path toPath(int, int, int, int);
  public android.graphics.RectF getBoundingBox();
  public java.lang.Object clone();
  public java.util.ArrayList getStrokes();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.gesture.GestureLibraries
  extends java.lang.Object
{
  public static android.gesture.GestureLibrary fromFile(java.io.File);
  public static android.gesture.GestureLibrary fromFile(java.lang.String);
  public static android.gesture.GestureLibrary fromPrivateFile(android.content.Context, java.lang.String);
  public static android.gesture.GestureLibrary fromRawResource(android.content.Context, int);
}
public abstract class android.gesture.GestureLibrary
  extends java.lang.Object
{
  public abstract boolean load();
  public abstract boolean save();
  public boolean isReadOnly();
  public int getOrientationStyle();
  public int getSequenceType();
  public void addGesture(java.lang.String, android.gesture.Gesture);
  public void removeEntry(java.lang.String);
  public void removeGesture(java.lang.String, android.gesture.Gesture);
  public void setOrientationStyle(int);
  public void setSequenceType(int);
  public java.util.ArrayList getGestures(java.lang.String);
  public java.util.ArrayList recognize(android.gesture.Gesture);
  public java.util.Set getGestureEntries();
  protected void <init>();
  protected final android.gesture.GestureStore mStore;
}
public class android.gesture.GestureOverlayView
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean isEventsInterceptionEnabled();
  public boolean isFadeEnabled();
  public boolean isGestureVisible();
  public boolean isGesturing();
  public float getGestureStrokeAngleThreshold();
  public float getGestureStrokeLengthThreshold();
  public float getGestureStrokeSquarenessTreshold();
  public float getGestureStrokeWidth();
  public int getGestureColor();
  public int getGestureStrokeType();
  public int getOrientation();
  public int getUncertainGestureColor();
  public long getFadeOffset();
  public void addOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener);
  public void addOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener);
  public void addOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener);
  public void cancelClearAnimation();
  public void cancelGesture();
  public void clear(boolean);
  public void draw(android.graphics.Canvas);
  public void removeAllOnGestureListeners();
  public void removeAllOnGesturePerformedListeners();
  public void removeAllOnGesturingListeners();
  public void removeOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener);
  public void removeOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener);
  public void removeOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener);
  public void setEventsInterceptionEnabled(boolean);
  public void setFadeEnabled(boolean);
  public void setFadeOffset(long);
  public void setGesture(android.gesture.Gesture);
  public void setGestureColor(int);
  public void setGestureStrokeAngleThreshold(float);
  public void setGestureStrokeLengthThreshold(float);
  public void setGestureStrokeSquarenessTreshold(float);
  public void setGestureStrokeType(int);
  public void setGestureStrokeWidth(float);
  public void setGestureVisible(boolean);
  public void setOrientation(int);
  public void setUncertainGestureColor(int);
  public android.gesture.Gesture getGesture();
  public android.graphics.Path getGesturePath();
  public android.graphics.Path getGesturePath(android.graphics.Path);
  public java.util.ArrayList getCurrentStroke();
  protected void onDetachedFromWindow();
  public static final int GESTURE_STROKE_TYPE_MULTIPLE;
  public static final int GESTURE_STROKE_TYPE_SINGLE;
  public static final int ORIENTATION_HORIZONTAL;
  public static final int ORIENTATION_VERTICAL;
}
public interface android.gesture.GestureOverlayView$OnGestureListener
{
  public abstract void onGesture(android.gesture.GestureOverlayView, android.view.MotionEvent);
  public abstract void onGestureCancelled(android.gesture.GestureOverlayView, android.view.MotionEvent);
  public abstract void onGestureEnded(android.gesture.GestureOverlayView, android.view.MotionEvent);
  public abstract void onGestureStarted(android.gesture.GestureOverlayView, android.view.MotionEvent);
}
public interface android.gesture.GestureOverlayView$OnGesturePerformedListener
{
  public abstract void onGesturePerformed(android.gesture.GestureOverlayView, android.gesture.Gesture);
}
public interface android.gesture.GestureOverlayView$OnGesturingListener
{
  public abstract void onGesturingEnded(android.gesture.GestureOverlayView);
  public abstract void onGesturingStarted(android.gesture.GestureOverlayView);
}
public class android.gesture.GesturePoint
  extends java.lang.Object
{
  public void <init>(float, float, long);
  public java.lang.Object clone();
  public final float x;
  public final float y;
  public final long timestamp;
}
public class android.gesture.GestureStore
  extends java.lang.Object
{
  public void <init>();
  public boolean hasChanged();
  public int getOrientationStyle();
  public int getSequenceType();
  public void addGesture(java.lang.String, android.gesture.Gesture);
  public void load(java.io.InputStream)  throws java.io.IOException;
  public void load(java.io.InputStream, boolean)  throws java.io.IOException;
  public void removeEntry(java.lang.String);
  public void removeGesture(java.lang.String, android.gesture.Gesture);
  public void save(java.io.OutputStream)  throws java.io.IOException;
  public void save(java.io.OutputStream, boolean)  throws java.io.IOException;
  public void setOrientationStyle(int);
  public void setSequenceType(int);
  public java.util.ArrayList getGestures(java.lang.String);
  public java.util.ArrayList recognize(android.gesture.Gesture);
  public java.util.Set getGestureEntries();
  public static final int ORIENTATION_INVARIANT;
  public static final int ORIENTATION_SENSITIVE;
  public static final int SEQUENCE_INVARIANT;
  public static final int SEQUENCE_SENSITIVE;
}
public class android.gesture.GestureStroke
  extends java.lang.Object
{
  public void <init>(java.util.ArrayList);
  public void clearPath();
  public android.gesture.OrientedBoundingBox computeOrientedBoundingBox();
  public android.graphics.Path getPath();
  public android.graphics.Path toPath(float, float, int);
  public java.lang.Object clone();
  public final float length;
  public final android.graphics.RectF boundingBox;
  public final float[] points;
}
public final class android.gesture.GestureUtils
  extends java.lang.Object
{
  public static android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[]);
  public static android.gesture.OrientedBoundingBox computeOrientedBoundingBox(java.util.ArrayList);
  public static float[] spatialSampling(android.gesture.Gesture, int);
  public static float[] spatialSampling(android.gesture.Gesture, int, boolean);
  public static float[] temporalSampling(android.gesture.GestureStroke, int);
}
public class android.gesture.OrientedBoundingBox
  extends java.lang.Object
{
  public final float centerX;
  public final float centerY;
  public final float height;
  public final float orientation;
  public final float squareness;
  public final float width;
}
public class android.gesture.Prediction
  extends java.lang.Object
{
  public java.lang.String toString();
  public final java.lang.String name;
  public double score;
}
public final class android.graphics.Bitmap
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap);
  public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int);
  public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int, android.graphics.Matrix, boolean);
  public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createBitmap(android.util.DisplayMetrics, int[], int, int, int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createBitmap(int[], int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createBitmap(int[], int, int, int, int, android.graphics.Bitmap$Config);
  public static android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap, int, int, boolean);
  public final boolean hasAlpha();
  public final boolean hasMipMap();
  public final boolean isMutable();
  public final boolean isPremultiplied();
  public final boolean isRecycled();
  public final int getAllocationByteCount();
  public final int getByteCount();
  public final int getHeight();
  public final int getRowBytes();
  public final int getWidth();
  public final void setHasMipMap(boolean);
  public final void setPremultiplied(boolean);
  public final android.graphics.Bitmap$Config getConfig();
  public boolean compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream);
  public boolean sameAs(android.graphics.Bitmap);
  public int describeContents();
  public int getDensity();
  public int getGenerationId();
  public int getPixel(int, int);
  public int getScaledHeight(android.graphics.Canvas);
  public int getScaledHeight(android.util.DisplayMetrics);
  public int getScaledHeight(int);
  public int getScaledWidth(android.graphics.Canvas);
  public int getScaledWidth(android.util.DisplayMetrics);
  public int getScaledWidth(int);
  public void copyPixelsFromBuffer(java.nio.Buffer);
  public void copyPixelsToBuffer(java.nio.Buffer);
  public void eraseColor(int);
  public void getPixels(int[], int, int, int, int, int, int);
  public void prepareToDraw();
  public void reconfigure(int, int, android.graphics.Bitmap$Config);
  public void recycle();
  public void setConfig(android.graphics.Bitmap$Config);
  public void setDensity(int);
  public void setHasAlpha(boolean);
  public void setHeight(int);
  public void setPixel(int, int, int);
  public void setPixels(int[], int, int, int, int, int, int);
  public void setWidth(int);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Bitmap copy(android.graphics.Bitmap$Config, boolean);
  public android.graphics.Bitmap extractAlpha();
  public android.graphics.Bitmap extractAlpha(android.graphics.Paint, int[]);
  public byte[] getNinePatchChunk();
  public static final int DENSITY_NONE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.graphics.Bitmap$CompressFormat
  extends java.lang.Enum
{
  public static android.graphics.Bitmap$CompressFormat valueOf(java.lang.String);
  public static android.graphics.Bitmap$CompressFormat[] values();
  public static final android.graphics.Bitmap$CompressFormat JPEG;
  public static final android.graphics.Bitmap$CompressFormat PNG;
  public static final android.graphics.Bitmap$CompressFormat WEBP;
}
public final class android.graphics.Bitmap$Config
  extends java.lang.Enum
{
  public static android.graphics.Bitmap$Config valueOf(java.lang.String);
  public static android.graphics.Bitmap$Config[] values();
  public static final android.graphics.Bitmap$Config ALPHA_8;
  public static final android.graphics.Bitmap$Config ARGB_4444;
  public static final android.graphics.Bitmap$Config ARGB_8888;
  public static final android.graphics.Bitmap$Config RGB_565;
}
public class android.graphics.BitmapFactory
  extends java.lang.Object
{
  public static android.graphics.Bitmap decodeByteArray(byte[], int, int);
  public static android.graphics.Bitmap decodeByteArray(byte[], int, int, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeFile(java.lang.String);
  public static android.graphics.Bitmap decodeFile(java.lang.String, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor);
  public static android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor, android.graphics.Rect, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeResource(android.content.res.Resources, int);
  public static android.graphics.Bitmap decodeResource(android.content.res.Resources, int, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap decodeStream(java.io.InputStream);
  public static android.graphics.Bitmap decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options);
  public void <init>();
}
public class android.graphics.BitmapFactory$Options
  extends java.lang.Object
{
  public void <init>();
  public void requestCancelDecode();
  public boolean inDither;
  public boolean inInputShareable;
  public boolean inJustDecodeBounds;
  public boolean inMutable;
  public boolean inPreferQualityOverSpeed;
  public boolean inPremultiplied;
  public boolean inPurgeable;
  public boolean inScaled;
  public boolean mCancel;
  public int inDensity;
  public int inSampleSize;
  public int inScreenDensity;
  public int inTargetDensity;
  public int outHeight;
  public int outWidth;
  public android.graphics.Bitmap inBitmap;
  public android.graphics.Bitmap$Config inPreferredConfig;
  public byte[] inTempStorage;
  public java.lang.String outMimeType;
}
public final class android.graphics.BitmapRegionDecoder
  extends java.lang.Object
{
  public static android.graphics.BitmapRegionDecoder newInstance(byte[], int, int, boolean)  throws java.io.IOException;
  public static android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor, boolean)  throws java.io.IOException;
  public static android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream, boolean)  throws java.io.IOException;
  public static android.graphics.BitmapRegionDecoder newInstance(java.lang.String, boolean)  throws java.io.IOException;
  public final boolean isRecycled();
  public int getHeight();
  public int getWidth();
  public void recycle();
  public android.graphics.Bitmap decodeRegion(android.graphics.Rect, android.graphics.BitmapFactory$Options);
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.BitmapShader
  extends android.graphics.Shader
{
  public void <init>(android.graphics.Bitmap, android.graphics.Shader$TileMode, android.graphics.Shader$TileMode);
}
public class android.graphics.BlurMaskFilter
  extends android.graphics.MaskFilter
{
  public void <init>(float, android.graphics.BlurMaskFilter$Blur);
}
public final class android.graphics.BlurMaskFilter$Blur
  extends java.lang.Enum
{
  public static android.graphics.BlurMaskFilter$Blur valueOf(java.lang.String);
  public static android.graphics.BlurMaskFilter$Blur[] values();
  public static final android.graphics.BlurMaskFilter$Blur INNER;
  public static final android.graphics.BlurMaskFilter$Blur NORMAL;
  public static final android.graphics.BlurMaskFilter$Blur OUTER;
  public static final android.graphics.BlurMaskFilter$Blur SOLID;
}
public class android.graphics.Camera
  extends java.lang.Object
{
  public void <init>();
  public native float dotWithNormal(float, float, float);
  public native float getLocationX();
  public native float getLocationY();
  public native float getLocationZ();
  public native void restore();
  public native void rotate(float, float, float);
  public native void rotateX(float);
  public native void rotateY(float);
  public native void rotateZ(float);
  public native void save();
  public native void setLocation(float, float, float);
  public native void translate(float, float, float);
  public void applyToCanvas(android.graphics.Canvas);
  public void getMatrix(android.graphics.Matrix);
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.Canvas
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.graphics.Bitmap);
  public final void rotate(float, float, float);
  public final void scale(float, float, float, float);
  public final android.graphics.Matrix getMatrix();
  public final android.graphics.Rect getClipBounds();
  public boolean clipPath(android.graphics.Path);
  public boolean clipPath(android.graphics.Path, android.graphics.Region$Op);
  public boolean clipRect(android.graphics.Rect);
  public boolean clipRect(android.graphics.Rect, android.graphics.Region$Op);
  public boolean clipRect(android.graphics.RectF);
  public boolean clipRect(android.graphics.RectF, android.graphics.Region$Op);
  public boolean clipRect(float, float, float, float);
  public boolean clipRect(float, float, float, float, android.graphics.Region$Op);
  public boolean clipRect(int, int, int, int);
  public boolean clipRegion(android.graphics.Region);
  public boolean clipRegion(android.graphics.Region, android.graphics.Region$Op);
  public boolean getClipBounds(android.graphics.Rect);
  public boolean isHardwareAccelerated();
  public boolean isOpaque();
  public boolean quickReject(android.graphics.Path, android.graphics.Canvas$EdgeType);
  public boolean quickReject(android.graphics.RectF, android.graphics.Canvas$EdgeType);
  public boolean quickReject(float, float, float, float, android.graphics.Canvas$EdgeType);
  public int getDensity();
  public int getHeight();
  public int getMaximumBitmapHeight();
  public int getMaximumBitmapWidth();
  public int getSaveCount();
  public int getWidth();
  public int save();
  public int save(int);
  public int saveLayer(android.graphics.RectF, android.graphics.Paint);
  public int saveLayer(android.graphics.RectF, android.graphics.Paint, int);
  public int saveLayer(float, float, float, float, android.graphics.Paint);
  public int saveLayer(float, float, float, float, android.graphics.Paint, int);
  public int saveLayerAlpha(android.graphics.RectF, int);
  public int saveLayerAlpha(android.graphics.RectF, int, int);
  public int saveLayerAlpha(float, float, float, float, int);
  public int saveLayerAlpha(float, float, float, float, int, int);
  public void concat(android.graphics.Matrix);
  public void drawARGB(int, int, int, int);
  public void drawArc(android.graphics.RectF, float, float, boolean, android.graphics.Paint);
  public void drawArc(float, float, float, float, float, float, boolean, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint);
  public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint);
  public void drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint);
  public void drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint);
  public void drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint);
  public void drawCircle(float, float, float, android.graphics.Paint);
  public void drawColor(int);
  public void drawColor(int, android.graphics.PorterDuff$Mode);
  public void drawLine(float, float, float, float, android.graphics.Paint);
  public void drawLines(float[], android.graphics.Paint);
  public void drawLines(float[], int, int, android.graphics.Paint);
  public void drawOval(android.graphics.RectF, android.graphics.Paint);
  public void drawOval(float, float, float, float, android.graphics.Paint);
  public void drawPaint(android.graphics.Paint);
  public void drawPath(android.graphics.Path, android.graphics.Paint);
  public void drawPicture(android.graphics.Picture);
  public void drawPicture(android.graphics.Picture, android.graphics.Rect);
  public void drawPicture(android.graphics.Picture, android.graphics.RectF);
  public void drawPoint(float, float, android.graphics.Paint);
  public void drawPoints(float[], android.graphics.Paint);
  public void drawPoints(float[], int, int, android.graphics.Paint);
  public void drawPosText(char[], int, int, float[], android.graphics.Paint);
  public void drawPosText(java.lang.String, float[], android.graphics.Paint);
  public void drawRGB(int, int, int);
  public void drawRect(android.graphics.Rect, android.graphics.Paint);
  public void drawRect(android.graphics.RectF, android.graphics.Paint);
  public void drawRect(float, float, float, float, android.graphics.Paint);
  public void drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint);
  public void drawRoundRect(float, float, float, float, float, float, android.graphics.Paint);
  public void drawText(char[], int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, float, float, android.graphics.Paint);
  public void drawText(java.lang.String, int, int, float, float, android.graphics.Paint);
  public void drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint);
  public void drawTextRun(char[], int, int, int, int, float, float, boolean, android.graphics.Paint);
  public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, boolean, android.graphics.Paint);
  public void drawVertices(android.graphics.Canvas$VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint);
  public void getMatrix(android.graphics.Matrix);
  public void restore();
  public void restoreToCount(int);
  public void rotate(float);
  public void scale(float, float);
  public void setBitmap(android.graphics.Bitmap);
  public void setDensity(int);
  public void setDrawFilter(android.graphics.DrawFilter);
  public void setMatrix(android.graphics.Matrix);
  public void skew(float, float);
  public void translate(float, float);
  public android.graphics.DrawFilter getDrawFilter();
  public static final int ALL_SAVE_FLAG;
  public static final int CLIP_SAVE_FLAG;
  public static final int CLIP_TO_LAYER_SAVE_FLAG;
  public static final int FULL_COLOR_LAYER_SAVE_FLAG;
  public static final int HAS_ALPHA_LAYER_SAVE_FLAG;
  public static final int MATRIX_SAVE_FLAG;
}
public final class android.graphics.Canvas$EdgeType
  extends java.lang.Enum
{
  public static android.graphics.Canvas$EdgeType valueOf(java.lang.String);
  public static android.graphics.Canvas$EdgeType[] values();
  public static final android.graphics.Canvas$EdgeType AA;
  public static final android.graphics.Canvas$EdgeType BW;
}
public final class android.graphics.Canvas$VertexMode
  extends java.lang.Enum
{
  public static android.graphics.Canvas$VertexMode valueOf(java.lang.String);
  public static android.graphics.Canvas$VertexMode[] values();
  public static final android.graphics.Canvas$VertexMode TRIANGLES;
  public static final android.graphics.Canvas$VertexMode TRIANGLE_FAN;
  public static final android.graphics.Canvas$VertexMode TRIANGLE_STRIP;
}
public class android.graphics.Color
  extends java.lang.Object
{
  public static float luminance(int);
  public static int HSVToColor(float[]);
  public static int HSVToColor(int, float[]);
  public static int alpha(int);
  public static int argb(int, int, int, int);
  public static int blue(int);
  public static int green(int);
  public static int parseColor(java.lang.String);
  public static int red(int);
  public static int rgb(int, int, int);
  public static void RGBToHSV(int, int, int, float[]);
  public static void colorToHSV(int, float[]);
  public void <init>();
  public static final int BLACK;
  public static final int BLUE;
  public static final int CYAN;
  public static final int DKGRAY;
  public static final int GRAY;
  public static final int GREEN;
  public static final int LTGRAY;
  public static final int MAGENTA;
  public static final int RED;
  public static final int TRANSPARENT;
  public static final int WHITE;
  public static final int YELLOW;
}
public class android.graphics.ColorFilter
  extends java.lang.Object
{
  public void <init>();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.ColorMatrix
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.graphics.ColorMatrix);
  public void <init>(float[]);
  public final float[] getArray();
  public void postConcat(android.graphics.ColorMatrix);
  public void preConcat(android.graphics.ColorMatrix);
  public void reset();
  public void set(android.graphics.ColorMatrix);
  public void set(float[]);
  public void setConcat(android.graphics.ColorMatrix, android.graphics.ColorMatrix);
  public void setRGB2YUV();
  public void setRotate(int, float);
  public void setSaturation(float);
  public void setScale(float, float, float, float);
  public void setYUV2RGB();
}
public class android.graphics.ColorMatrixColorFilter
  extends android.graphics.ColorFilter
{
  public void <init>(android.graphics.ColorMatrix);
  public void <init>(float[]);
}
public class android.graphics.ComposePathEffect
  extends android.graphics.PathEffect
{
  public void <init>(android.graphics.PathEffect, android.graphics.PathEffect);
}
public class android.graphics.ComposeShader
  extends android.graphics.Shader
{
  public void <init>(android.graphics.Shader, android.graphics.Shader, android.graphics.PorterDuff$Mode);
  public void <init>(android.graphics.Shader, android.graphics.Shader, android.graphics.Xfermode);
}
public class android.graphics.CornerPathEffect
  extends android.graphics.PathEffect
{
  public void <init>(float);
}
public class android.graphics.DashPathEffect
  extends android.graphics.PathEffect
{
  public void <init>(float[], float);
}
public class android.graphics.DiscretePathEffect
  extends android.graphics.PathEffect
{
  public void <init>(float, float);
}
public class android.graphics.DrawFilter
  extends java.lang.Object
{
  public void <init>();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.EmbossMaskFilter
  extends android.graphics.MaskFilter
{
  public void <init>(float[], float, float, float);
}
public class android.graphics.ImageFormat
  extends java.lang.Object
{
  public static int getBitsPerPixel(int);
  public void <init>();
  public static final int DEPTH16;
  public static final int DEPTH_POINT_CLOUD;
  public static final int FLEX_RGBA_8888;
  public static final int FLEX_RGB_888;
  public static final int JPEG;
  public static final int NV16;
  public static final int NV21;
  public static final int PRIVATE;
  public static final int RAW10;
  public static final int RAW12;
  public static final int RAW_PRIVATE;
  public static final int RAW_SENSOR;
  public static final int RGB_565;
  public static final int UNKNOWN;
  public static final int YUV_420_888;
  public static final int YUV_422_888;
  public static final int YUV_444_888;
  public static final int YUY2;
  public static final int YV12;
}
public class android.graphics.Interpolator
  extends java.lang.Object
{
  public void <init>(int);
  public void <init>(int, int);
  public final int getKeyFrameCount();
  public final int getValueCount();
  public void reset(int);
  public void reset(int, int);
  public void setKeyFrame(int, int, float[]);
  public void setKeyFrame(int, int, float[], float[]);
  public void setRepeatMirror(float, boolean);
  public android.graphics.Interpolator$Result timeToValues(float[]);
  public android.graphics.Interpolator$Result timeToValues(int, float[]);
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.graphics.Interpolator$Result
  extends java.lang.Enum
{
  public static android.graphics.Interpolator$Result valueOf(java.lang.String);
  public static android.graphics.Interpolator$Result[] values();
  public static final android.graphics.Interpolator$Result FREEZE_END;
  public static final android.graphics.Interpolator$Result FREEZE_START;
  public static final android.graphics.Interpolator$Result NORMAL;
}
public class android.graphics.LayerRasterizer
  extends android.graphics.Rasterizer
{
  public void <init>();
  public void addLayer(android.graphics.Paint);
  public void addLayer(android.graphics.Paint, float, float);
}
public class android.graphics.LightingColorFilter
  extends android.graphics.ColorFilter
{
  public void <init>(int, int);
}
public class android.graphics.LinearGradient
  extends android.graphics.Shader
{
  public void <init>(float, float, float, float, int, int, android.graphics.Shader$TileMode);
  public void <init>(float, float, float, float, int[], float[], android.graphics.Shader$TileMode);
}
public class android.graphics.MaskFilter
  extends java.lang.Object
{
  public void <init>();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.Matrix
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.graphics.Matrix);
  public boolean equals(java.lang.Object);
  public boolean invert(android.graphics.Matrix);
  public boolean isAffine();
  public boolean isIdentity();
  public boolean mapRect(android.graphics.RectF);
  public boolean mapRect(android.graphics.RectF, android.graphics.RectF);
  public boolean postConcat(android.graphics.Matrix);
  public boolean postRotate(float);
  public boolean postRotate(float, float, float);
  public boolean postScale(float, float);
  public boolean postScale(float, float, float, float);
  public boolean postSkew(float, float);
  public boolean postSkew(float, float, float, float);
  public boolean postTranslate(float, float);
  public boolean preConcat(android.graphics.Matrix);
  public boolean preRotate(float);
  public boolean preRotate(float, float, float);
  public boolean preScale(float, float);
  public boolean preScale(float, float, float, float);
  public boolean preSkew(float, float);
  public boolean preSkew(float, float, float, float);
  public boolean preTranslate(float, float);
  public boolean rectStaysRect();
  public boolean setConcat(android.graphics.Matrix, android.graphics.Matrix);
  public boolean setPolyToPoly(float[], int, float[], int, int);
  public boolean setRectToRect(android.graphics.RectF, android.graphics.RectF, android.graphics.Matrix$ScaleToFit);
  public float mapRadius(float);
  public int hashCode();
  public void getValues(float[]);
  public void mapPoints(float[]);
  public void mapPoints(float[], float[]);
  public void mapPoints(float[], int, float[], int, int);
  public void mapVectors(float[]);
  public void mapVectors(float[], float[]);
  public void mapVectors(float[], int, float[], int, int);
  public void reset();
  public void set(android.graphics.Matrix);
  public void setRotate(float);
  public void setRotate(float, float, float);
  public void setScale(float, float);
  public void setScale(float, float, float, float);
  public void setSinCos(float, float);
  public void setSinCos(float, float, float, float);
  public void setSkew(float, float);
  public void setSkew(float, float, float, float);
  public void setTranslate(float, float);
  public void setValues(float[]);
  public java.lang.String toShortString();
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
  public static final int MPERSP_0;
  public static final int MPERSP_1;
  public static final int MPERSP_2;
  public static final int MSCALE_X;
  public static final int MSCALE_Y;
  public static final int MSKEW_X;
  public static final int MSKEW_Y;
  public static final int MTRANS_X;
  public static final int MTRANS_Y;
}
public final class android.graphics.Matrix$ScaleToFit
  extends java.lang.Enum
{
  public static android.graphics.Matrix$ScaleToFit valueOf(java.lang.String);
  public static android.graphics.Matrix$ScaleToFit[] values();
  public static final android.graphics.Matrix$ScaleToFit CENTER;
  public static final android.graphics.Matrix$ScaleToFit END;
  public static final android.graphics.Matrix$ScaleToFit FILL;
  public static final android.graphics.Matrix$ScaleToFit START;
}
public class android.graphics.Movie
  extends java.lang.Object
{
  public static android.graphics.Movie decodeFile(java.lang.String);
  public static android.graphics.Movie decodeStream(java.io.InputStream);
  public static native android.graphics.Movie decodeByteArray(byte[], int, int);
  public native boolean isOpaque();
  public native boolean setTime(int);
  public native int duration();
  public native int height();
  public native int width();
  public void draw(android.graphics.Canvas, float, float);
  public void draw(android.graphics.Canvas, float, float, android.graphics.Paint);
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.NinePatch
  extends java.lang.Object
{
  public static native boolean isNinePatchChunk(byte[]);
  public void <init>(android.graphics.Bitmap, byte[]);
  public void <init>(android.graphics.Bitmap, byte[], java.lang.String);
  public final boolean hasAlpha();
  public final android.graphics.Region getTransparentRegion(android.graphics.Rect);
  public int getDensity();
  public int getHeight();
  public int getWidth();
  public void draw(android.graphics.Canvas, android.graphics.Rect);
  public void draw(android.graphics.Canvas, android.graphics.Rect, android.graphics.Paint);
  public void draw(android.graphics.Canvas, android.graphics.RectF);
  public void setPaint(android.graphics.Paint);
  public android.graphics.Bitmap getBitmap();
  public android.graphics.Paint getPaint();
  public java.lang.String getName();
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.graphics.Outline
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.graphics.Outline);
  public boolean canClip();
  public boolean getRect(android.graphics.Rect);
  public boolean isEmpty();
  public float getAlpha();
  public float getRadius();
  public void offset(int, int);
  public void set(android.graphics.Outline);
  public void setAlpha(float);
  public void setConvexPath(android.graphics.Path);
  public void setEmpty();
  public void setOval(android.graphics.Rect);
  public void setOval(int, int, int, int);
  public void setRect(android.graphics.Rect);
  public void setRect(int, int, int, int);
  public void setRoundRect(android.graphics.Rect, float);
  public void setRoundRect(int, int, int, int, float);
}
public class android.graphics.Paint
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.graphics.Paint);
  public void <init>(int);
  public final boolean isAntiAlias();
  public final boolean isDither();
  public final boolean isFakeBoldText();
  public final boolean isFilterBitmap();
  public final boolean isLinearText();
  public final boolean isStrikeThruText();
  public final boolean isSubpixelText();
  public final boolean isUnderlineText();
  public boolean getFillPath(android.graphics.Path, android.graphics.Path);
  public boolean hasGlyph(java.lang.String);
  public boolean isElegantTextHeight();
  public float ascent();
  public float descent();
  public float getFontMetrics(android.graphics.Paint$FontMetrics);
  public float getFontSpacing();
  public float getLetterSpacing();
  public float getRunAdvance(char[], int, int, int, int, boolean, int);
  public float getRunAdvance(java.lang.CharSequence, int, int, int, int, boolean, int);
  public float getStrokeMiter();
  public float getStrokeWidth();
  public float getTextScaleX();
  public float getTextSize();
  public float getTextSkewX();
  public float measureText(char[], int, int);
  public float measureText(java.lang.CharSequence, int, int);
  public float measureText(java.lang.String);
  public float measureText(java.lang.String, int, int);
  public int breakText(char[], int, int, float, float[]);
  public int breakText(java.lang.CharSequence, int, int, boolean, float, float[]);
  public int breakText(java.lang.String, boolean, float, float[]);
  public int getAlpha();
  public int getColor();
  public int getFlags();
  public int getFontMetricsInt(android.graphics.Paint$FontMetricsInt);
  public int getHinting();
  public int getOffsetForAdvance(char[], int, int, int, int, boolean, float);
  public int getOffsetForAdvance(java.lang.CharSequence, int, int, int, int, boolean, float);
  public int getTextWidths(char[], int, int, float[]);
  public int getTextWidths(java.lang.CharSequence, int, int, float[]);
  public int getTextWidths(java.lang.String, float[]);
  public int getTextWidths(java.lang.String, int, int, float[]);
  public void clearShadowLayer();
  public void getTextBounds(char[], int, int, android.graphics.Rect);
  public void getTextBounds(java.lang.String, int, int, android.graphics.Rect);
  public void getTextPath(char[], int, int, float, float, android.graphics.Path);
  public void getTextPath(java.lang.String, int, int, float, float, android.graphics.Path);
  public void reset();
  public void set(android.graphics.Paint);
  public void setARGB(int, int, int, int);
  public void setAlpha(int);
  public void setAntiAlias(boolean);
  public void setColor(int);
  public void setDither(boolean);
  public void setElegantTextHeight(boolean);
  public void setFakeBoldText(boolean);
  public void setFilterBitmap(boolean);
  public void setFlags(int);
  public void setFontFeatureSettings(java.lang.String);
  public void setHinting(int);
  public void setLetterSpacing(float);
  public void setLinearText(boolean);
  public void setShadowLayer(float, float, float, int);
  public void setStrikeThruText(boolean);
  public void setStrokeCap(android.graphics.Paint$Cap);
  public void setStrokeJoin(android.graphics.Paint$Join);
  public void setStrokeMiter(float);
  public void setStrokeWidth(float);
  public void setStyle(android.graphics.Paint$Style);
  public void setSubpixelText(boolean);
  public void setTextAlign(android.graphics.Paint$Align);
  public void setTextLocale(java.util.Locale);
  public void setTextLocales(android.os.LocaleList);
  public void setTextScaleX(float);
  public void setTextSize(float);
  public void setTextSkewX(float);
  public void setUnderlineText(boolean);
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter);
  public android.graphics.MaskFilter getMaskFilter();
  public android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter);
  public android.graphics.Paint$Align getTextAlign();
  public android.graphics.Paint$Cap getStrokeCap();
  public android.graphics.Paint$FontMetrics getFontMetrics();
  public android.graphics.Paint$FontMetricsInt getFontMetricsInt();
  public android.graphics.Paint$Join getStrokeJoin();
  public android.graphics.Paint$Style getStyle();
  public android.graphics.PathEffect getPathEffect();
  public android.graphics.PathEffect setPathEffect(android.graphics.PathEffect);
  public android.graphics.Rasterizer getRasterizer();
  public android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer);
  public android.graphics.Shader getShader();
  public android.graphics.Shader setShader(android.graphics.Shader);
  public android.graphics.Typeface getTypeface();
  public android.graphics.Typeface setTypeface(android.graphics.Typeface);
  public android.graphics.Xfermode getXfermode();
  public android.graphics.Xfermode setXfermode(android.graphics.Xfermode);
  public android.os.LocaleList getTextLocales();
  public java.lang.String getFontFeatureSettings();
  public java.util.Locale getTextLocale();
  public static final int ANTI_ALIAS_FLAG;
  public static final int DEV_KERN_TEXT_FLAG;
  public static final int DITHER_FLAG;
  public static final int EMBEDDED_BITMAP_TEXT_FLAG;
  public static final int FAKE_BOLD_TEXT_FLAG;
  public static final int FILTER_BITMAP_FLAG;
  public static final int HINTING_OFF;
  public static final int HINTING_ON;
  public static final int LINEAR_TEXT_FLAG;
  public static final int STRIKE_THRU_TEXT_FLAG;
  public static final int SUBPIXEL_TEXT_FLAG;
  public static final int UNDERLINE_TEXT_FLAG;
}
public final class android.graphics.Paint$Align
  extends java.lang.Enum
{
  public static android.graphics.Paint$Align valueOf(java.lang.String);
  public static android.graphics.Paint$Align[] values();
  public static final android.graphics.Paint$Align CENTER;
  public static final android.graphics.Paint$Align LEFT;
  public static final android.graphics.Paint$Align RIGHT;
}
public final class android.graphics.Paint$Cap
  extends java.lang.Enum
{
  public static android.graphics.Paint$Cap valueOf(java.lang.String);
  public static android.graphics.Paint$Cap[] values();
  public static final android.graphics.Paint$Cap BUTT;
  public static final android.graphics.Paint$Cap ROUND;
  public static final android.graphics.Paint$Cap SQUARE;
}
public class android.graphics.Paint$FontMetrics
  extends java.lang.Object
{
  public void <init>();
  public float ascent;
  public float bottom;
  public float descent;
  public float leading;
  public float top;
}
public class android.graphics.Paint$FontMetricsInt
  extends java.lang.Object
{
  public void <init>();
  public java.lang.String toString();
  public int ascent;
  public int bottom;
  public int descent;
  public int leading;
  public int top;
}
public final class android.graphics.Paint$Join
  extends java.lang.Enum
{
  public static android.graphics.Paint$Join valueOf(java.lang.String);
  public static android.graphics.Paint$Join[] values();
  public static final android.graphics.Paint$Join BEVEL;
  public static final android.graphics.Paint$Join MITER;
  public static final android.graphics.Paint$Join ROUND;
}
public final class android.graphics.Paint$Style
  extends java.lang.Enum
{
  public static android.graphics.Paint$Style valueOf(java.lang.String);
  public static android.graphics.Paint$Style[] values();
  public static final android.graphics.Paint$Style FILL;
  public static final android.graphics.Paint$Style FILL_AND_STROKE;
  public static final android.graphics.Paint$Style STROKE;
}
public class android.graphics.PaintFlagsDrawFilter
  extends android.graphics.DrawFilter
{
  public void <init>(int, int);
}
public class android.graphics.Path
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.graphics.Path);
  public boolean isConvex();
  public boolean isEmpty();
  public boolean isInverseFillType();
  public boolean isRect(android.graphics.RectF);
  public boolean op(android.graphics.Path, android.graphics.Path$Op);
  public boolean op(android.graphics.Path, android.graphics.Path, android.graphics.Path$Op);
  public void addArc(android.graphics.RectF, float, float);
  public void addArc(float, float, float, float, float, float);
  public void addCircle(float, float, float, android.graphics.Path$Direction);
  public void addOval(android.graphics.RectF, android.graphics.Path$Direction);
  public void addOval(float, float, float, float, android.graphics.Path$Direction);
  public void addPath(android.graphics.Path);
  public void addPath(android.graphics.Path, android.graphics.Matrix);
  public void addPath(android.graphics.Path, float, float);
  public void addRect(android.graphics.RectF, android.graphics.Path$Direction);
  public void addRect(float, float, float, float, android.graphics.Path$Direction);
  public void addRoundRect(android.graphics.RectF, float, float, android.graphics.Path$Direction);
  public void addRoundRect(android.graphics.RectF, float[], android.graphics.Path$Direction);
  public void addRoundRect(float, float, float, float, float, float, android.graphics.Path$Direction);
  public void addRoundRect(float, float, float, float, float[], android.graphics.Path$Direction);
  public void arcTo(android.graphics.RectF, float, float);
  public void arcTo(android.graphics.RectF, float, float, boolean);
  public void arcTo(float, float, float, float, float, float, boolean);
  public void close();
  public void computeBounds(android.graphics.RectF, boolean);
  public void cubicTo(float, float, float, float, float, float);
  public void incReserve(int);
  public void lineTo(float, float);
  public void moveTo(float, float);
  public void offset(float, float);
  public void offset(float, float, android.graphics.Path);
  public void quadTo(float, float, float, float);
  public void rCubicTo(float, float, float, float, float, float);
  public void rLineTo(float, float);
  public void rMoveTo(float, float);
  public void rQuadTo(float, float, float, float);
  public void reset();
  public void rewind();
  public void set(android.graphics.Path);
  public void setFillType(android.graphics.Path$FillType);
  public void setLastPoint(float, float);
  public void toggleInverseFillType();
  public void transform(android.graphics.Matrix);
  public void transform(android.graphics.Matrix, android.graphics.Path);
  public android.graphics.Path$FillType getFillType();
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.graphics.Path$Direction
  extends java.lang.Enum
{
  public static android.graphics.Path$Direction valueOf(java.lang.String);
  public static android.graphics.Path$Direction[] values();
  public static final android.graphics.Path$Direction CCW;
  public static final android.graphics.Path$Direction CW;
}
public final class android.graphics.Path$FillType
  extends java.lang.Enum
{
  public static android.graphics.Path$FillType valueOf(java.lang.String);
  public static android.graphics.Path$FillType[] values();
  public static final android.graphics.Path$FillType EVEN_ODD;
  public static final android.graphics.Path$FillType INVERSE_EVEN_ODD;
  public static final android.graphics.Path$FillType INVERSE_WINDING;
  public static final android.graphics.Path$FillType WINDING;
}
public final class android.graphics.Path$Op
  extends java.lang.Enum
{
  public static android.graphics.Path$Op valueOf(java.lang.String);
  public static android.graphics.Path$Op[] values();
  public static final android.graphics.Path$Op DIFFERENCE;
  public static final android.graphics.Path$Op INTERSECT;
  public static final android.graphics.Path$Op REVERSE_DIFFERENCE;
  public static final android.graphics.Path$Op UNION;
  public static final android.graphics.Path$Op XOR;
}
public class android.graphics.PathDashPathEffect
  extends android.graphics.PathEffect
{
  public void <init>(android.graphics.Path, float, float, android.graphics.PathDashPathEffect$Style);
}
public final class android.graphics.PathDashPathEffect$Style
  extends java.lang.Enum
{
  public static android.graphics.PathDashPathEffect$Style valueOf(java.lang.String);
  public static android.graphics.PathDashPathEffect$Style[] values();
  public static final android.graphics.PathDashPathEffect$Style MORPH;
  public static final android.graphics.PathDashPathEffect$Style ROTATE;
  public static final android.graphics.PathDashPathEffect$Style TRANSLATE;
}
public class android.graphics.PathEffect
  extends java.lang.Object
{
  public void <init>();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.PathMeasure
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.graphics.Path, boolean);
  public boolean getMatrix(float, android.graphics.Matrix, int);
  public boolean getPosTan(float, float[], float[]);
  public boolean getSegment(float, float, android.graphics.Path, boolean);
  public boolean isClosed();
  public boolean nextContour();
  public float getLength();
  public void setPath(android.graphics.Path, boolean);
  protected void finalize()  throws java.lang.Throwable;
  public static final int POSITION_MATRIX_FLAG;
  public static final int TANGENT_MATRIX_FLAG;
}
public class android.graphics.Picture
  extends java.lang.Object
{
  public static android.graphics.Picture createFromStream(java.io.InputStream);
  public void <init>();
  public void <init>(android.graphics.Picture);
  public int getHeight();
  public int getWidth();
  public void draw(android.graphics.Canvas);
  public void endRecording();
  public void writeToStream(java.io.OutputStream);
  public android.graphics.Canvas beginRecording(int, int);
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.PixelFormat
  extends java.lang.Object
{
  public static boolean formatHasAlpha(int);
  public static void getPixelFormatInfo(int, android.graphics.PixelFormat);
  public void <init>();
  public static final int A_8;
  public static final int JPEG;
  public static final int LA_88;
  public static final int L_8;
  public static final int OPAQUE;
  public static final int RGBA_4444;
  public static final int RGBA_5551;
  public static final int RGBA_8888;
  public static final int RGBX_8888;
  public static final int RGB_332;
  public static final int RGB_565;
  public static final int RGB_888;
  public static final int TRANSLUCENT;
  public static final int TRANSPARENT;
  public static final int UNKNOWN;
  public static final int YCbCr_420_SP;
  public static final int YCbCr_422_I;
  public static final int YCbCr_422_SP;
  public int bitsPerPixel;
  public int bytesPerPixel;
}
public class android.graphics.Point
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.graphics.Point);
  public void <init>(int, int);
  public final boolean equals(int, int);
  public final void negate();
  public final void offset(int, int);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void readFromParcel(android.os.Parcel);
  public void set(int, int);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public int x;
  public int y;
}
public class android.graphics.PointF
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static float length(float, float);
  public void <init>();
  public void <init>(android.graphics.Point);
  public void <init>(float, float);
  public final boolean equals(float, float);
  public final float length();
  public final void negate();
  public final void offset(float, float);
  public final void set(android.graphics.PointF);
  public final void set(float, float);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public float x;
  public float y;
}
public class android.graphics.PorterDuff
  extends java.lang.Object
{
  public void <init>();
}
public final class android.graphics.PorterDuff$Mode
  extends java.lang.Enum
{
  public static android.graphics.PorterDuff$Mode valueOf(java.lang.String);
  public static android.graphics.PorterDuff$Mode[] values();
  public static final android.graphics.PorterDuff$Mode ADD;
  public static final android.graphics.PorterDuff$Mode CLEAR;
  public static final android.graphics.PorterDuff$Mode DARKEN;
  public static final android.graphics.PorterDuff$Mode DST;
  public static final android.graphics.PorterDuff$Mode DST_ATOP;
  public static final android.graphics.PorterDuff$Mode DST_IN;
  public static final android.graphics.PorterDuff$Mode DST_OUT;
  public static final android.graphics.PorterDuff$Mode DST_OVER;
  public static final android.graphics.PorterDuff$Mode LIGHTEN;
  public static final android.graphics.PorterDuff$Mode MULTIPLY;
  public static final android.graphics.PorterDuff$Mode OVERLAY;
  public static final android.graphics.PorterDuff$Mode SCREEN;
  public static final android.graphics.PorterDuff$Mode SRC;
  public static final android.graphics.PorterDuff$Mode SRC_ATOP;
  public static final android.graphics.PorterDuff$Mode SRC_IN;
  public static final android.graphics.PorterDuff$Mode SRC_OUT;
  public static final android.graphics.PorterDuff$Mode SRC_OVER;
  public static final android.graphics.PorterDuff$Mode XOR;
}
public class android.graphics.PorterDuffColorFilter
  extends android.graphics.ColorFilter
{
  public void <init>(int, android.graphics.PorterDuff$Mode);
  public boolean equals(java.lang.Object);
  public int hashCode();
}
public class android.graphics.PorterDuffXfermode
  extends android.graphics.Xfermode
{
  public void <init>(android.graphics.PorterDuff$Mode);
}
public class android.graphics.RadialGradient
  extends android.graphics.Shader
{
  public void <init>(float, float, float, int, int, android.graphics.Shader$TileMode);
  public void <init>(float, float, float, int[], float[], android.graphics.Shader$TileMode);
}
public class android.graphics.Rasterizer
  extends java.lang.Object
{
  public void <init>();
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.graphics.Rect
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static boolean intersects(android.graphics.Rect, android.graphics.Rect);
  public static android.graphics.Rect unflattenFromString(java.lang.String);
  public void <init>();
  public void <init>(android.graphics.Rect);
  public void <init>(int, int, int, int);
  public final boolean isEmpty();
  public final float exactCenterX();
  public final float exactCenterY();
  public final int centerX();
  public final int centerY();
  public final int height();
  public final int width();
  public boolean contains(android.graphics.Rect);
  public boolean contains(int, int);
  public boolean contains(int, int, int, int);
  public boolean equals(java.lang.Object);
  public boolean intersect(android.graphics.Rect);
  public boolean intersect(int, int, int, int);
  public boolean intersects(int, int, int, int);
  public boolean setIntersect(android.graphics.Rect, android.graphics.Rect);
  public int describeContents();
  public int hashCode();
  public void inset(int, int);
  public void offset(int, int);
  public void offsetTo(int, int);
  public void readFromParcel(android.os.Parcel);
  public void set(android.graphics.Rect);
  public void set(int, int, int, int);
  public void setEmpty();
  public void sort();
  public void union(android.graphics.Rect);
  public void union(int, int);
  public void union(int, int, int, int);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String flattenToString();
  public java.lang.String toShortString();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public int bottom;
  public int left;
  public int right;
  public int top;
}
public class android.graphics.RectF
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static boolean intersects(android.graphics.RectF, android.graphics.RectF);
  public void <init>();
  public void <init>(android.graphics.Rect);
  public void <init>(android.graphics.RectF);
  public void <init>(float, float, float, float);
  public final boolean isEmpty();
  public final float centerX();
  public final float centerY();
  public final float height();
  public final float width();
  public boolean contains(android.graphics.RectF);
  public boolean contains(float, float);
  public boolean contains(float, float, float, float);
  public boolean equals(java.lang.Object);
  public boolean intersect(android.graphics.RectF);
  public boolean intersect(float, float, float, float);
  public boolean intersects(float, float, float, float);
  public boolean setIntersect(android.graphics.RectF, android.graphics.RectF);
  public int describeContents();
  public int hashCode();
  public void inset(float, float);
  public void offset(float, float);
  public void offsetTo(float, float);
  public void readFromParcel(android.os.Parcel);
  public void round(android.graphics.Rect);
  public void roundOut(android.graphics.Rect);
  public void set(android.graphics.Rect);
  public void set(android.graphics.RectF);
  public void set(float, float, float, float);
  public void setEmpty();
  public void sort();
  public void union(android.graphics.RectF);
  public void union(float, float);
  public void union(float, float, float, float);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toShortString();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public float bottom;
  public float left;
  public float right;
  public float top;
}
public class android.graphics.Region
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.graphics.Rect);
  public void <init>(android.graphics.Region);
  public void <init>(int, int, int, int);
  public final boolean union(android.graphics.Rect);
  public boolean equals(java.lang.Object);
  public boolean getBoundaryPath(android.graphics.Path);
  public boolean getBounds(android.graphics.Rect);
  public boolean op(android.graphics.Rect, android.graphics.Region$Op);
  public boolean op(android.graphics.Rect, android.graphics.Region, android.graphics.Region$Op);
  public boolean op(android.graphics.Region, android.graphics.Region$Op);
  public boolean op(android.graphics.Region, android.graphics.Region, android.graphics.Region$Op);
  public boolean op(int, int, int, int, android.graphics.Region$Op);
  public boolean quickContains(android.graphics.Rect);
  public boolean quickReject(android.graphics.Rect);
  public boolean set(android.graphics.Rect);
  public boolean set(android.graphics.Region);
  public boolean set(int, int, int, int);
  public boolean setPath(android.graphics.Path, android.graphics.Region);
  public int describeContents();
  public native boolean contains(int, int);
  public native boolean isComplex();
  public native boolean isEmpty();
  public native boolean isRect();
  public native boolean quickContains(int, int, int, int);
  public native boolean quickReject(android.graphics.Region);
  public native boolean quickReject(int, int, int, int);
  public native void translate(int, int, android.graphics.Region);
  public void setEmpty();
  public void translate(int, int);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Path getBoundaryPath();
  public android.graphics.Rect getBounds();
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.graphics.Region$Op
  extends java.lang.Enum
{
  public static android.graphics.Region$Op valueOf(java.lang.String);
  public static android.graphics.Region$Op[] values();
  public static final android.graphics.Region$Op DIFFERENCE;
  public static final android.graphics.Region$Op INTERSECT;
  public static final android.graphics.Region$Op REPLACE;
  public static final android.graphics.Region$Op REVERSE_DIFFERENCE;
  public static final android.graphics.Region$Op UNION;
  public static final android.graphics.Region$Op XOR;
}
public class android.graphics.RegionIterator
  extends java.lang.Object
{
  public void <init>(android.graphics.Region);
  public final boolean next(android.graphics.Rect);
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.Shader
  extends java.lang.Object
{
  public void <init>();
  public boolean getLocalMatrix(android.graphics.Matrix);
  public void setLocalMatrix(android.graphics.Matrix);
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.graphics.Shader$TileMode
  extends java.lang.Enum
{
  public static android.graphics.Shader$TileMode valueOf(java.lang.String);
  public static android.graphics.Shader$TileMode[] values();
  public static final android.graphics.Shader$TileMode CLAMP;
  public static final android.graphics.Shader$TileMode MIRROR;
  public static final android.graphics.Shader$TileMode REPEAT;
}
public class android.graphics.SumPathEffect
  extends android.graphics.PathEffect
{
  public void <init>(android.graphics.PathEffect, android.graphics.PathEffect);
}
public class android.graphics.SurfaceTexture
  extends java.lang.Object
{
  public void <init>(int);
  public void <init>(int, boolean);
  public long getTimestamp();
  public void attachToGLContext(int);
  public void detachFromGLContext();
  public void getTransformMatrix(float[]);
  public void release();
  public void releaseTexImage();
  public void setDefaultBufferSize(int, int);
  public void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener);
  public void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener, android.os.Handler);
  public void updateTexImage();
  protected void finalize()  throws java.lang.Throwable;
}
public interface android.graphics.SurfaceTexture$OnFrameAvailableListener
{
  public abstract void onFrameAvailable(android.graphics.SurfaceTexture);
}
public class android.graphics.SurfaceTexture$OutOfResourcesException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.graphics.SweepGradient
  extends android.graphics.Shader
{
  public void <init>(float, float, int, int);
  public void <init>(float, float, int[], float[]);
}
public class android.graphics.Typeface
  extends java.lang.Object
{
  public static android.graphics.Typeface create(android.graphics.Typeface, int);
  public static android.graphics.Typeface create(java.lang.String, int);
  public static android.graphics.Typeface createFromAsset(android.content.res.AssetManager, java.lang.String);
  public static android.graphics.Typeface createFromFile(java.io.File);
  public static android.graphics.Typeface createFromFile(java.lang.String);
  public static android.graphics.Typeface defaultFromStyle(int);
  public final boolean isBold();
  public final boolean isItalic();
  public boolean equals(java.lang.Object);
  public int getStyle();
  public int hashCode();
  protected void finalize()  throws java.lang.Throwable;
  public static final int BOLD;
  public static final int BOLD_ITALIC;
  public static final int ITALIC;
  public static final int NORMAL;
  public static final android.graphics.Typeface DEFAULT;
  public static final android.graphics.Typeface DEFAULT_BOLD;
  public static final android.graphics.Typeface MONOSPACE;
  public static final android.graphics.Typeface SANS_SERIF;
  public static final android.graphics.Typeface SERIF;
}
public class android.graphics.Xfermode
  extends java.lang.Object
{
  public void <init>();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.graphics.YuvImage
  extends java.lang.Object
{
  public void <init>(byte[], int, int, int, int[]);
  public boolean compressToJpeg(android.graphics.Rect, int, java.io.OutputStream);
  public int getHeight();
  public int getWidth();
  public int getYuvFormat();
  public byte[] getYuvData();
  public int[] getStrides();
}
public interface android.graphics.drawable.Animatable
{
  public abstract boolean isRunning();
  public abstract void start();
  public abstract void stop();
}
public interface android.graphics.drawable.Animatable2
  extends android.graphics.drawable.Animatable
{
  public abstract boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback);
  public abstract void clearAnimationCallbacks();
  public abstract void registerAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback);
}
public abstract class android.graphics.drawable.Animatable2$AnimationCallback
  extends java.lang.Object
{
  public void <init>();
  public void onAnimationEnd(android.graphics.drawable.Drawable);
  public void onAnimationStart(android.graphics.drawable.Drawable);
}
public class android.graphics.drawable.AnimatedStateListDrawable
  extends android.graphics.drawable.StateListDrawable
{
  public void <init>();
  public boolean isStateful();
  public boolean setVisible(boolean, boolean);
  public void addState(int[], android.graphics.drawable.Drawable, int);
  public void addTransition(int, int, android.graphics.drawable.Drawable, boolean);
  public void applyTheme(android.content.res.Resources$Theme);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void jumpToCurrentState();
  public android.graphics.drawable.Drawable mutate();
  protected boolean onStateChange(int[]);
  protected void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState);
}
public class android.graphics.drawable.AnimatedVectorDrawable
  extends android.graphics.drawable.Drawable
  implements android.graphics.drawable.Animatable2
{
  public void <init>();
  public boolean canApplyTheme();
  public boolean isRunning();
  public boolean isStateful();
  public boolean onLayoutDirectionChanged(int);
  public boolean setVisible(boolean, boolean);
  public boolean unregisterAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback);
  public int getAlpha();
  public int getChangingConfigurations();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void clearAnimationCallbacks();
  public void draw(android.graphics.Canvas);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void registerAnimationCallback(android.graphics.drawable.Animatable2$AnimationCallback);
  public void reset();
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setHotspot(float, float);
  public void setHotspotBounds(int, int, int, int);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public void start();
  public void stop();
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onLevelChange(int);
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
}
public class android.graphics.drawable.AnimationDrawable
  extends android.graphics.drawable.DrawableContainer
  implements java.lang.Runnable, android.graphics.drawable.Animatable
{
  public void <init>();
  public boolean isOneShot();
  public boolean isRunning();
  public boolean setVisible(boolean, boolean);
  public int getDuration(int);
  public int getNumberOfFrames();
  public void addFrame(android.graphics.drawable.Drawable, int);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void run();
  public void setOneShot(boolean);
  public void start();
  public void stop();
  public void unscheduleSelf(java.lang.Runnable);
  public android.graphics.drawable.Drawable getFrame(int);
  public android.graphics.drawable.Drawable mutate();
  protected void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState);
}
public class android.graphics.drawable.BitmapDrawable
  extends android.graphics.drawable.Drawable
{
  public void <init>();
  public void <init>(android.content.res.Resources);
  public void <init>(android.content.res.Resources, android.graphics.Bitmap);
  public void <init>(android.content.res.Resources, java.io.InputStream);
  public void <init>(android.content.res.Resources, java.lang.String);
  public void <init>(android.graphics.Bitmap);
  public void <init>(java.io.InputStream);
  public void <init>(java.lang.String);
  public final boolean isAutoMirrored();
  public final void setTileModeY(android.graphics.Shader$TileMode);
  public final android.graphics.Bitmap getBitmap();
  public final android.graphics.Paint getPaint();
  public final android.graphics.drawable.Drawable$ConstantState getConstantState();
  public boolean canApplyTheme();
  public boolean hasAntiAlias();
  public boolean hasMipMap();
  public boolean isFilterBitmap();
  public boolean isStateful();
  public int getAlpha();
  public int getChangingConfigurations();
  public int getGravity();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setAlpha(int);
  public void setAntiAlias(boolean);
  public void setAutoMirrored(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDither(boolean);
  public void setFilterBitmap(boolean);
  public void setGravity(int);
  public void setMipMap(boolean);
  public void setTargetDensity(android.graphics.Canvas);
  public void setTargetDensity(android.util.DisplayMetrics);
  public void setTargetDensity(int);
  public void setTileModeX(android.graphics.Shader$TileMode);
  public void setTileModeXY(android.graphics.Shader$TileMode, android.graphics.Shader$TileMode);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.Shader$TileMode getTileModeX();
  public android.graphics.Shader$TileMode getTileModeY();
  public android.graphics.drawable.Drawable mutate();
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
}
public class android.graphics.drawable.ClipDrawable
  extends android.graphics.drawable.DrawableWrapper
{
  public void <init>(android.graphics.drawable.Drawable, int, int);
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  protected boolean onLevelChange(int);
  public static final int HORIZONTAL;
  public static final int VERTICAL;
}
public class android.graphics.drawable.ColorDrawable
  extends android.graphics.drawable.Drawable
{
  public void <init>();
  public void <init>(int);
  public boolean canApplyTheme();
  public boolean isStateful();
  public int getAlpha();
  public int getChangingConfigurations();
  public int getColor();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setAlpha(int);
  public void setColor(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onStateChange(int[]);
}
public abstract class android.graphics.drawable.Drawable
  extends java.lang.Object
{
  public static int resolveOpacity(int, int);
  public static android.graphics.drawable.Drawable createFromPath(java.lang.String);
  public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String);
  public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String, android.graphics.BitmapFactory$Options);
  public static android.graphics.drawable.Drawable createFromStream(java.io.InputStream, java.lang.String);
  public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void <init>();
  public final boolean isVisible();
  public final boolean setLayoutDirection(int);
  public final boolean setLevel(int);
  public final int getLevel();
  public final void copyBounds(android.graphics.Rect);
  public final void setCallback(android.graphics.drawable.Drawable$Callback);
  public final android.graphics.Rect copyBounds();
  public final android.graphics.Rect getBounds();
  public abstract int getOpacity();
  public abstract void draw(android.graphics.Canvas);
  public abstract void setAlpha(int);
  public abstract void setColorFilter(android.graphics.ColorFilter);
  public boolean canApplyTheme();
  public boolean getPadding(android.graphics.Rect);
  public boolean isAutoMirrored();
  public boolean isFilterBitmap();
  public boolean isStateful();
  public boolean onLayoutDirectionChanged(int);
  public boolean setState(int[]);
  public boolean setVisible(boolean, boolean);
  public int getAlpha();
  public int getChangingConfigurations();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getLayoutDirection();
  public int getMinimumHeight();
  public int getMinimumWidth();
  public void applyTheme(android.content.res.Resources$Theme);
  public void clearColorFilter();
  public void getHotspotBounds(android.graphics.Rect);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void invalidateSelf();
  public void jumpToCurrentState();
  public void scheduleSelf(java.lang.Runnable, long);
  public void setAutoMirrored(boolean);
  public void setBounds(android.graphics.Rect);
  public void setBounds(int, int, int, int);
  public void setChangingConfigurations(int);
  public void setColorFilter(int, android.graphics.PorterDuff$Mode);
  public void setDither(boolean);
  public void setFilterBitmap(boolean);
  public void setHotspot(float, float);
  public void setHotspotBounds(int, int, int, int);
  public void setTint(int);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public void unscheduleSelf(java.lang.Runnable);
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.Rect getDirtyBounds();
  public android.graphics.Region getTransparentRegion();
  public android.graphics.drawable.Drawable getCurrent();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$Callback getCallback();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public int[] getState();
  protected boolean onLevelChange(int);
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
}
public interface android.graphics.drawable.Drawable$Callback
{
  public abstract void invalidateDrawable(android.graphics.drawable.Drawable);
  public abstract void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public abstract void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
}
public abstract class android.graphics.drawable.Drawable$ConstantState
  extends java.lang.Object
{
  public void <init>();
  public abstract int getChangingConfigurations();
  public abstract android.graphics.drawable.Drawable newDrawable();
  public boolean canApplyTheme();
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
  public android.graphics.drawable.Drawable newDrawable(android.content.res.Resources, android.content.res.Resources$Theme);
}
public class android.graphics.drawable.DrawableContainer
  extends android.graphics.drawable.Drawable
  implements android.graphics.drawable.Drawable$Callback
{
  public void <init>();
  public boolean canApplyTheme();
  public boolean getPadding(android.graphics.Rect);
  public boolean isAutoMirrored();
  public boolean isStateful();
  public boolean onLayoutDirectionChanged(int);
  public boolean selectDrawable(int);
  public boolean setVisible(boolean, boolean);
  public int getAlpha();
  public int getChangingConfigurations();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getMinimumHeight();
  public int getMinimumWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getHotspotBounds(android.graphics.Rect);
  public void getOutline(android.graphics.Outline);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void jumpToCurrentState();
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void setAlpha(int);
  public void setAutoMirrored(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDither(boolean);
  public void setEnterFadeDuration(int);
  public void setExitFadeDuration(int);
  public void setHotspot(float, float);
  public void setHotspotBounds(int, int, int, int);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public android.graphics.drawable.Drawable getCurrent();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onLevelChange(int);
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
  protected void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState);
}
public abstract class android.graphics.drawable.DrawableContainer$DrawableContainerState
  extends android.graphics.drawable.Drawable$ConstantState
{
  public final boolean isConstantSize();
  public final boolean isStateful();
  public final int addChild(android.graphics.drawable.Drawable);
  public final int getChildCount();
  public final int getConstantHeight();
  public final int getConstantMinimumHeight();
  public final int getConstantMinimumWidth();
  public final int getConstantWidth();
  public final int getEnterFadeDuration();
  public final int getExitFadeDuration();
  public final int getOpacity();
  public final void setConstantSize(boolean);
  public final void setEnterFadeDuration(int);
  public final void setExitFadeDuration(int);
  public final void setVariablePadding(boolean);
  public final android.graphics.Rect getConstantPadding();
  public final android.graphics.drawable.Drawable getChild(int);
  public final android.graphics.drawable.Drawable[] getChildren();
  public boolean canApplyTheme();
  public boolean canConstantState();
  public int getChangingConfigurations();
  public void growArray(int, int);
  protected void computeConstantSize();
}
public abstract class android.graphics.drawable.DrawableWrapper
  extends android.graphics.drawable.Drawable
  implements android.graphics.drawable.Drawable$Callback
{
  public void <init>(android.graphics.drawable.Drawable);
  public boolean canApplyTheme();
  public boolean getPadding(android.graphics.Rect);
  public boolean isStateful();
  public boolean onLayoutDirectionChanged(int);
  public boolean setVisible(boolean, boolean);
  public int getAlpha();
  public int getChangingConfigurations();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getHotspotBounds(android.graphics.Rect);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDrawable(android.graphics.drawable.Drawable);
  public void setHotspot(float, float);
  public void setHotspotBounds(int, int, int, int);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public android.graphics.drawable.Drawable getDrawable();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onLevelChange(int);
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
}
public class android.graphics.drawable.GradientDrawable
  extends android.graphics.drawable.Drawable
{
  public void <init>();
  public void <init>(android.graphics.drawable.GradientDrawable$Orientation, int[]);
  public boolean canApplyTheme();
  public boolean getPadding(android.graphics.Rect);
  public boolean getUseLevel();
  public boolean isStateful();
  public float getCornerRadius();
  public float getGradientCenterX();
  public float getGradientCenterY();
  public float getGradientRadius();
  public int getAlpha();
  public int getChangingConfigurations();
  public int getGradientType();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public int getShape();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setAlpha(int);
  public void setColor(android.content.res.ColorStateList);
  public void setColor(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setColors(int[]);
  public void setCornerRadii(float[]);
  public void setCornerRadius(float);
  public void setDither(boolean);
  public void setGradientCenter(float, float);
  public void setGradientRadius(float);
  public void setGradientType(int);
  public void setOrientation(android.graphics.drawable.GradientDrawable$Orientation);
  public void setShape(int);
  public void setSize(int, int);
  public void setStroke(int, android.content.res.ColorStateList);
  public void setStroke(int, android.content.res.ColorStateList, float, float);
  public void setStroke(int, int);
  public void setStroke(int, int, float, float);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public void setUseLevel(boolean);
  public android.content.res.ColorStateList getColor();
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.GradientDrawable$Orientation getOrientation();
  public float[] getCornerRadii();
  public int[] getColors();
  protected boolean onLevelChange(int);
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
  public static final int LINE;
  public static final int LINEAR_GRADIENT;
  public static final int OVAL;
  public static final int RADIAL_GRADIENT;
  public static final int RECTANGLE;
  public static final int RING;
  public static final int SWEEP_GRADIENT;
}
public final class android.graphics.drawable.GradientDrawable$Orientation
  extends java.lang.Enum
{
  public static android.graphics.drawable.GradientDrawable$Orientation valueOf(java.lang.String);
  public static android.graphics.drawable.GradientDrawable$Orientation[] values();
  public static final android.graphics.drawable.GradientDrawable$Orientation BL_TR;
  public static final android.graphics.drawable.GradientDrawable$Orientation BOTTOM_TOP;
  public static final android.graphics.drawable.GradientDrawable$Orientation BR_TL;
  public static final android.graphics.drawable.GradientDrawable$Orientation LEFT_RIGHT;
  public static final android.graphics.drawable.GradientDrawable$Orientation RIGHT_LEFT;
  public static final android.graphics.drawable.GradientDrawable$Orientation TL_BR;
  public static final android.graphics.drawable.GradientDrawable$Orientation TOP_BOTTOM;
  public static final android.graphics.drawable.GradientDrawable$Orientation TR_BL;
}
public final class android.graphics.drawable.Icon
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap);
  public static android.graphics.drawable.Icon createWithContentUri(android.net.Uri);
  public static android.graphics.drawable.Icon createWithContentUri(java.lang.String);
  public static android.graphics.drawable.Icon createWithData(byte[], int, int);
  public static android.graphics.drawable.Icon createWithFilePath(java.lang.String);
  public static android.graphics.drawable.Icon createWithResource(android.content.Context, int);
  public static android.graphics.drawable.Icon createWithResource(java.lang.String, int);
  public int describeContents();
  public void loadDrawableAsync(android.content.Context, android.graphics.drawable.Icon$OnDrawableLoadedListener, android.os.Handler);
  public void loadDrawableAsync(android.content.Context, android.os.Message);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.drawable.Drawable loadDrawable(android.content.Context);
  public android.graphics.drawable.Icon setTint(int);
  public android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList);
  public android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff$Mode);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.graphics.drawable.Icon$OnDrawableLoadedListener
{
  public abstract void onDrawableLoaded(android.graphics.drawable.Drawable);
}
public class android.graphics.drawable.InsetDrawable
  extends android.graphics.drawable.DrawableWrapper
{
  public void <init>(android.graphics.drawable.Drawable, int);
  public void <init>(android.graphics.drawable.Drawable, int, int, int, int);
  public boolean getPadding(android.graphics.Rect);
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  protected void onBoundsChange(android.graphics.Rect);
}
public class android.graphics.drawable.LayerDrawable
  extends android.graphics.drawable.Drawable
  implements android.graphics.drawable.Drawable$Callback
{
  public void <init>(android.graphics.drawable.Drawable[]);
  public boolean canApplyTheme();
  public boolean getPadding(android.graphics.Rect);
  public boolean isAutoMirrored();
  public boolean isStateful();
  public boolean onLayoutDirectionChanged(int);
  public boolean setDrawableByLayerId(int, android.graphics.drawable.Drawable);
  public boolean setVisible(boolean, boolean);
  public int addLayer(android.graphics.drawable.Drawable);
  public int findIndexByLayerId(int);
  public int getAlpha();
  public int getBottomPadding();
  public int getChangingConfigurations();
  public int getEndPadding();
  public int getId(int);
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getLayerGravity(int);
  public int getLayerHeight(int);
  public int getLayerInsetBottom(int);
  public int getLayerInsetEnd(int);
  public int getLayerInsetLeft(int);
  public int getLayerInsetRight(int);
  public int getLayerInsetStart(int);
  public int getLayerInsetTop(int);
  public int getLayerWidth(int);
  public int getLeftPadding();
  public int getNumberOfLayers();
  public int getOpacity();
  public int getPaddingMode();
  public int getRightPadding();
  public int getStartPadding();
  public int getTopPadding();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getHotspotBounds(android.graphics.Rect);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void jumpToCurrentState();
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void setAlpha(int);
  public void setAutoMirrored(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDither(boolean);
  public void setDrawable(int, android.graphics.drawable.Drawable);
  public void setHotspot(float, float);
  public void setHotspotBounds(int, int, int, int);
  public void setId(int, int);
  public void setLayerGravity(int, int);
  public void setLayerHeight(int, int);
  public void setLayerInset(int, int, int, int, int);
  public void setLayerInsetBottom(int, int);
  public void setLayerInsetEnd(int, int);
  public void setLayerInsetLeft(int, int);
  public void setLayerInsetRelative(int, int, int, int, int);
  public void setLayerInsetRight(int, int);
  public void setLayerInsetStart(int, int);
  public void setLayerInsetTop(int, int);
  public void setLayerSize(int, int, int);
  public void setLayerWidth(int, int);
  public void setOpacity(int);
  public void setPadding(int, int, int, int);
  public void setPaddingMode(int);
  public void setPaddingRelative(int, int, int, int);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public android.graphics.drawable.Drawable findDrawableByLayerId(int);
  public android.graphics.drawable.Drawable getDrawable(int);
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onLevelChange(int);
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
  public static final int INSET_UNDEFINED;
  public static final int PADDING_MODE_NEST;
  public static final int PADDING_MODE_STACK;
}
public class android.graphics.drawable.LevelListDrawable
  extends android.graphics.drawable.DrawableContainer
{
  public void <init>();
  public void addLevel(int, int, android.graphics.drawable.Drawable);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public android.graphics.drawable.Drawable mutate();
  protected boolean onLevelChange(int);
  protected void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState);
}
public class android.graphics.drawable.NinePatchDrawable
  extends android.graphics.drawable.Drawable
{
  public void <init>(android.content.res.Resources, android.graphics.Bitmap, byte[], android.graphics.Rect, java.lang.String);
  public void <init>(android.content.res.Resources, android.graphics.NinePatch);
  public void <init>(android.graphics.Bitmap, byte[], android.graphics.Rect, java.lang.String);
  public void <init>(android.graphics.NinePatch);
  public boolean canApplyTheme();
  public boolean getPadding(android.graphics.Rect);
  public boolean isAutoMirrored();
  public boolean isFilterBitmap();
  public boolean isStateful();
  public int getAlpha();
  public int getChangingConfigurations();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setAlpha(int);
  public void setAutoMirrored(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDither(boolean);
  public void setFilterBitmap(boolean);
  public void setTargetDensity(android.graphics.Canvas);
  public void setTargetDensity(android.util.DisplayMetrics);
  public void setTargetDensity(int);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public android.graphics.Paint getPaint();
  public android.graphics.Region getTransparentRegion();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onStateChange(int[]);
}
public class android.graphics.drawable.PaintDrawable
  extends android.graphics.drawable.ShapeDrawable
{
  public void <init>();
  public void <init>(int);
  public void setCornerRadii(float[]);
  public void setCornerRadius(float);
  protected boolean inflateTag(java.lang.String, android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet);
}
public class android.graphics.drawable.PictureDrawable
  extends android.graphics.drawable.Drawable
{
  public void <init>(android.graphics.Picture);
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void draw(android.graphics.Canvas);
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setPicture(android.graphics.Picture);
  public android.graphics.Picture getPicture();
}
public class android.graphics.drawable.RippleDrawable
  extends android.graphics.drawable.LayerDrawable
{
  public void <init>(android.content.res.ColorStateList, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public boolean canApplyTheme();
  public boolean isStateful();
  public boolean setDrawableByLayerId(int, android.graphics.drawable.Drawable);
  public boolean setVisible(boolean, boolean);
  public int getOpacity();
  public int getRadius();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getHotspotBounds(android.graphics.Rect);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void invalidateSelf();
  public void jumpToCurrentState();
  public void setColor(android.content.res.ColorStateList);
  public void setHotspot(float, float);
  public void setHotspotBounds(int, int, int, int);
  public void setPaddingMode(int);
  public void setRadius(int);
  public android.graphics.Rect getDirtyBounds();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
  public static final int RADIUS_AUTO;
}
public class android.graphics.drawable.RotateDrawable
  extends android.graphics.drawable.DrawableWrapper
{
  public void <init>();
  public boolean isPivotXRelative();
  public boolean isPivotYRelative();
  public float getFromDegrees();
  public float getPivotX();
  public float getPivotY();
  public float getToDegrees();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setFromDegrees(float);
  public void setPivotX(float);
  public void setPivotXRelative(boolean);
  public void setPivotY(float);
  public void setPivotYRelative(boolean);
  public void setToDegrees(float);
  protected boolean onLevelChange(int);
}
public class android.graphics.drawable.ScaleDrawable
  extends android.graphics.drawable.DrawableWrapper
{
  public void <init>(android.graphics.drawable.Drawable, int, float, float);
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  protected boolean onLevelChange(int);
  protected void onBoundsChange(android.graphics.Rect);
}
public class android.graphics.drawable.ShapeDrawable
  extends android.graphics.drawable.Drawable
{
  public void <init>();
  public void <init>(android.graphics.drawable.shapes.Shape);
  public boolean getPadding(android.graphics.Rect);
  public boolean isStateful();
  public int getAlpha();
  public int getChangingConfigurations();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void getOutline(android.graphics.Outline);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setAlpha(int);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setDither(boolean);
  public void setIntrinsicHeight(int);
  public void setIntrinsicWidth(int);
  public void setPadding(android.graphics.Rect);
  public void setPadding(int, int, int, int);
  public void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory);
  public void setShape(android.graphics.drawable.shapes.Shape);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public android.graphics.Paint getPaint();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  public android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory();
  public android.graphics.drawable.shapes.Shape getShape();
  protected boolean inflateTag(java.lang.String, android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet);
  protected boolean onStateChange(int[]);
  protected void onBoundsChange(android.graphics.Rect);
  protected void onDraw(android.graphics.drawable.shapes.Shape, android.graphics.Canvas, android.graphics.Paint);
}
public abstract class android.graphics.drawable.ShapeDrawable$ShaderFactory
  extends java.lang.Object
{
  public void <init>();
  public abstract android.graphics.Shader resize(int, int);
}
public class android.graphics.drawable.StateListDrawable
  extends android.graphics.drawable.DrawableContainer
{
  public void <init>();
  public boolean isStateful();
  public void addState(int[], android.graphics.drawable.Drawable);
  public void applyTheme(android.content.res.Resources$Theme);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public android.graphics.drawable.Drawable mutate();
  protected boolean onStateChange(int[]);
  protected void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState);
}
public class android.graphics.drawable.TransitionDrawable
  extends android.graphics.drawable.LayerDrawable
  implements android.graphics.drawable.Drawable$Callback
{
  public void <init>(android.graphics.drawable.Drawable[]);
  public boolean isCrossFadeEnabled();
  public void draw(android.graphics.Canvas);
  public void resetTransition();
  public void reverseTransition(int);
  public void setCrossFadeEnabled(boolean);
  public void startTransition(int);
}
public class android.graphics.drawable.VectorDrawable
  extends android.graphics.drawable.Drawable
{
  public void <init>();
  public boolean canApplyTheme();
  public boolean isAutoMirrored();
  public boolean isStateful();
  public int getAlpha();
  public int getChangingConfigurations();
  public int getIntrinsicHeight();
  public int getIntrinsicWidth();
  public int getOpacity();
  public void applyTheme(android.content.res.Resources$Theme);
  public void draw(android.graphics.Canvas);
  public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setAlpha(int);
  public void setAutoMirrored(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setTintList(android.content.res.ColorStateList);
  public void setTintMode(android.graphics.PorterDuff$Mode);
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.drawable.Drawable mutate();
  public android.graphics.drawable.Drawable$ConstantState getConstantState();
  protected boolean onStateChange(int[]);
}
public class android.graphics.drawable.shapes.ArcShape
  extends android.graphics.drawable.shapes.RectShape
{
  public void <init>(float, float);
  public void draw(android.graphics.Canvas, android.graphics.Paint);
  public void getOutline(android.graphics.Outline);
}
public class android.graphics.drawable.shapes.OvalShape
  extends android.graphics.drawable.shapes.RectShape
{
  public void <init>();
  public void draw(android.graphics.Canvas, android.graphics.Paint);
  public void getOutline(android.graphics.Outline);
}
public class android.graphics.drawable.shapes.PathShape
  extends android.graphics.drawable.shapes.Shape
{
  public void <init>(android.graphics.Path, float, float);
  public void draw(android.graphics.Canvas, android.graphics.Paint);
  public android.graphics.drawable.shapes.PathShape clone()  throws java.lang.CloneNotSupportedException;
  public android.graphics.drawable.shapes.Shape clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected void onResize(float, float);
}
public class android.graphics.drawable.shapes.RectShape
  extends android.graphics.drawable.shapes.Shape
{
  public void <init>();
  public void draw(android.graphics.Canvas, android.graphics.Paint);
  public void getOutline(android.graphics.Outline);
  public android.graphics.drawable.shapes.RectShape clone()  throws java.lang.CloneNotSupportedException;
  public android.graphics.drawable.shapes.Shape clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected final android.graphics.RectF rect();
  protected void onResize(float, float);
}
public class android.graphics.drawable.shapes.RoundRectShape
  extends android.graphics.drawable.shapes.RectShape
{
  public void <init>(float[], android.graphics.RectF, float[]);
  public void draw(android.graphics.Canvas, android.graphics.Paint);
  public void getOutline(android.graphics.Outline);
  public android.graphics.drawable.shapes.RectShape clone()  throws java.lang.CloneNotSupportedException;
  public android.graphics.drawable.shapes.RoundRectShape clone()  throws java.lang.CloneNotSupportedException;
  public android.graphics.drawable.shapes.Shape clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected void onResize(float, float);
}
public abstract class android.graphics.drawable.shapes.Shape
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public final float getHeight();
  public final float getWidth();
  public final void resize(float, float);
  public abstract void draw(android.graphics.Canvas, android.graphics.Paint);
  public boolean hasAlpha();
  public void getOutline(android.graphics.Outline);
  public android.graphics.drawable.shapes.Shape clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected void onResize(float, float);
}
public class android.graphics.pdf.PdfDocument
  extends java.lang.Object
{
  public void <init>();
  public void close();
  public void finishPage(android.graphics.pdf.PdfDocument$Page);
  public void writeTo(java.io.OutputStream)  throws java.io.IOException;
  public android.graphics.pdf.PdfDocument$Page startPage(android.graphics.pdf.PdfDocument$PageInfo);
  public java.util.List getPages();
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.graphics.pdf.PdfDocument$Page
  extends java.lang.Object
{
  public android.graphics.Canvas getCanvas();
  public android.graphics.pdf.PdfDocument$PageInfo getInfo();
}
public final class android.graphics.pdf.PdfDocument$PageInfo
  extends java.lang.Object
{
  public int getPageHeight();
  public int getPageNumber();
  public int getPageWidth();
  public android.graphics.Rect getContentRect();
}
public final class android.graphics.pdf.PdfDocument$PageInfo$Builder
  extends java.lang.Object
{
  public void <init>(int, int, int);
  public android.graphics.pdf.PdfDocument$PageInfo create();
  public android.graphics.pdf.PdfDocument$PageInfo$Builder setContentRect(android.graphics.Rect);
}
public final class android.graphics.pdf.PdfRenderer
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public void <init>(android.os.ParcelFileDescriptor)  throws java.io.IOException;
  public boolean shouldScaleForPrinting();
  public int getPageCount();
  public void close();
  public android.graphics.pdf.PdfRenderer$Page openPage(int);
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.graphics.pdf.PdfRenderer$Page
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public int getHeight();
  public int getIndex();
  public int getWidth();
  public void close();
  public void render(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Matrix, int);
  protected void finalize()  throws java.lang.Throwable;
  public static final int RENDER_MODE_FOR_DISPLAY;
  public static final int RENDER_MODE_FOR_PRINT;
}
public class android.hardware.Camera
  extends java.lang.Object
{
  public static native int getNumberOfCameras();
  public static void getCameraInfo(int, android.hardware.Camera$CameraInfo);
  public static android.hardware.Camera open();
  public static android.hardware.Camera open(int);
  public final boolean enableShutterSound(boolean);
  public final native void lock();
  public final native void reconnect()  throws java.io.IOException;
  public final native void setDisplayOrientation(int);
  public final native void setPreviewTexture(android.graphics.SurfaceTexture)  throws java.io.IOException;
  public final native void startPreview();
  public final native void startSmoothZoom(int);
  public final native void stopSmoothZoom();
  public final native void unlock();
  public final void addCallbackBuffer(byte[]);
  public final void autoFocus(android.hardware.Camera$AutoFocusCallback);
  public final void cancelAutoFocus();
  public final void release();
  public final void setErrorCallback(android.hardware.Camera$ErrorCallback);
  public final void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener);
  public final void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback);
  public final void setPreviewCallback(android.hardware.Camera$PreviewCallback);
  public final void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback);
  public final void setPreviewDisplay(android.view.SurfaceHolder)  throws java.io.IOException;
  public final void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener);
  public final void startFaceDetection();
  public final void stopFaceDetection();
  public final void stopPreview();
  public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback);
  public final void takePicture(android.hardware.Camera$ShutterCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback, android.hardware.Camera$PictureCallback);
  public void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback);
  public void setParameters(android.hardware.Camera$Parameters);
  public android.hardware.Camera$Parameters getParameters();
  protected void finalize();
  public static final int CAMERA_ERROR_EVICTED;
  public static final int CAMERA_ERROR_SERVER_DIED;
  public static final int CAMERA_ERROR_UNKNOWN;
  public static final java.lang.String ACTION_NEW_PICTURE;
  public static final java.lang.String ACTION_NEW_VIDEO;
}
public class android.hardware.Camera$Area
  extends java.lang.Object
{
  public void <init>(android.graphics.Rect, int);
  public boolean equals(java.lang.Object);
  public int weight;
  public android.graphics.Rect rect;
}
public interface android.hardware.Camera$AutoFocusCallback
{
  public abstract void onAutoFocus(boolean, android.hardware.Camera);
}
public interface android.hardware.Camera$AutoFocusMoveCallback
{
  public abstract void onAutoFocusMoving(boolean, android.hardware.Camera);
}
public class android.hardware.Camera$CameraInfo
  extends java.lang.Object
{
  public void <init>();
  public static final int CAMERA_FACING_BACK;
  public static final int CAMERA_FACING_FRONT;
  public boolean canDisableShutterSound;
  public int facing;
  public int orientation;
}
public interface android.hardware.Camera$ErrorCallback
{
  public abstract void onError(int, android.hardware.Camera);
}
public class android.hardware.Camera$Face
  extends java.lang.Object
{
  public void <init>();
  public int id;
  public int score;
  public android.graphics.Point leftEye;
  public android.graphics.Point mouth;
  public android.graphics.Point rightEye;
  public android.graphics.Rect rect;
}
public interface android.hardware.Camera$FaceDetectionListener
{
  public abstract void onFaceDetection(android.hardware.Camera$Face[], android.hardware.Camera);
}
public interface android.hardware.Camera$OnZoomChangeListener
{
  public abstract void onZoomChange(int, boolean, android.hardware.Camera);
}
public class android.hardware.Camera$Parameters
  extends java.lang.Object
{
  public boolean getAutoExposureLock();
  public boolean getAutoWhiteBalanceLock();
  public boolean getVideoStabilization();
  public boolean isAutoExposureLockSupported();
  public boolean isAutoWhiteBalanceLockSupported();
  public boolean isSmoothZoomSupported();
  public boolean isVideoSnapshotSupported();
  public boolean isVideoStabilizationSupported();
  public boolean isZoomSupported();
  public float getExposureCompensationStep();
  public float getFocalLength();
  public float getHorizontalViewAngle();
  public float getVerticalViewAngle();
  public int getExposureCompensation();
  public int getInt(java.lang.String);
  public int getJpegQuality();
  public int getJpegThumbnailQuality();
  public int getMaxExposureCompensation();
  public int getMaxNumDetectedFaces();
  public int getMaxNumFocusAreas();
  public int getMaxNumMeteringAreas();
  public int getMaxZoom();
  public int getMinExposureCompensation();
  public int getPictureFormat();
  public int getPreviewFormat();
  public int getPreviewFrameRate();
  public int getZoom();
  public void getFocusDistances(float[]);
  public void getPreviewFpsRange(int[]);
  public void remove(java.lang.String);
  public void removeGpsData();
  public void set(java.lang.String, int);
  public void set(java.lang.String, java.lang.String);
  public void setAntibanding(java.lang.String);
  public void setAutoExposureLock(boolean);
  public void setAutoWhiteBalanceLock(boolean);
  public void setColorEffect(java.lang.String);
  public void setExposureCompensation(int);
  public void setFlashMode(java.lang.String);
  public void setFocusAreas(java.util.List);
  public void setFocusMode(java.lang.String);
  public void setGpsAltitude(double);
  public void setGpsLatitude(double);
  public void setGpsLongitude(double);
  public void setGpsProcessingMethod(java.lang.String);
  public void setGpsTimestamp(long);
  public void setJpegQuality(int);
  public void setJpegThumbnailQuality(int);
  public void setJpegThumbnailSize(int, int);
  public void setMeteringAreas(java.util.List);
  public void setPictureFormat(int);
  public void setPictureSize(int, int);
  public void setPreviewFormat(int);
  public void setPreviewFpsRange(int, int);
  public void setPreviewFrameRate(int);
  public void setPreviewSize(int, int);
  public void setRecordingHint(boolean);
  public void setRotation(int);
  public void setSceneMode(java.lang.String);
  public void setVideoStabilization(boolean);
  public void setWhiteBalance(java.lang.String);
  public void setZoom(int);
  public void unflatten(java.lang.String);
  public android.hardware.Camera$Size getJpegThumbnailSize();
  public android.hardware.Camera$Size getPictureSize();
  public android.hardware.Camera$Size getPreferredPreviewSizeForVideo();
  public android.hardware.Camera$Size getPreviewSize();
  public java.lang.String flatten();
  public java.lang.String get(java.lang.String);
  public java.lang.String getAntibanding();
  public java.lang.String getColorEffect();
  public java.lang.String getFlashMode();
  public java.lang.String getFocusMode();
  public java.lang.String getSceneMode();
  public java.lang.String getWhiteBalance();
  public java.util.List getFocusAreas();
  public java.util.List getMeteringAreas();
  public java.util.List getSupportedAntibanding();
  public java.util.List getSupportedColorEffects();
  public java.util.List getSupportedFlashModes();
  public java.util.List getSupportedFocusModes();
  public java.util.List getSupportedJpegThumbnailSizes();
  public java.util.List getSupportedPictureFormats();
  public java.util.List getSupportedPictureSizes();
  public java.util.List getSupportedPreviewFormats();
  public java.util.List getSupportedPreviewFpsRange();
  public java.util.List getSupportedPreviewFrameRates();
  public java.util.List getSupportedPreviewSizes();
  public java.util.List getSupportedSceneModes();
  public java.util.List getSupportedVideoSizes();
  public java.util.List getSupportedWhiteBalance();
  public java.util.List getZoomRatios();
  public static final int FOCUS_DISTANCE_FAR_INDEX;
  public static final int FOCUS_DISTANCE_NEAR_INDEX;
  public static final int FOCUS_DISTANCE_OPTIMAL_INDEX;
  public static final int PREVIEW_FPS_MAX_INDEX;
  public static final int PREVIEW_FPS_MIN_INDEX;
  public static final java.lang.String ANTIBANDING_50HZ;
  public static final java.lang.String ANTIBANDING_60HZ;
  public static final java.lang.String ANTIBANDING_AUTO;
  public static final java.lang.String ANTIBANDING_OFF;
  public static final java.lang.String EFFECT_AQUA;
  public static final java.lang.String EFFECT_BLACKBOARD;
  public static final java.lang.String EFFECT_MONO;
  public static final java.lang.String EFFECT_NEGATIVE;
  public static final java.lang.String EFFECT_NONE;
  public static final java.lang.String EFFECT_POSTERIZE;
  public static final java.lang.String EFFECT_SEPIA;
  public static final java.lang.String EFFECT_SOLARIZE;
  public static final java.lang.String EFFECT_WHITEBOARD;
  public static final java.lang.String FLASH_MODE_AUTO;
  public static final java.lang.String FLASH_MODE_OFF;
  public static final java.lang.String FLASH_MODE_ON;
  public static final java.lang.String FLASH_MODE_RED_EYE;
  public static final java.lang.String FLASH_MODE_TORCH;
  public static final java.lang.String FOCUS_MODE_AUTO;
  public static final java.lang.String FOCUS_MODE_CONTINUOUS_PICTURE;
  public static final java.lang.String FOCUS_MODE_CONTINUOUS_VIDEO;
  public static final java.lang.String FOCUS_MODE_EDOF;
  public static final java.lang.String FOCUS_MODE_FIXED;
  public static final java.lang.String FOCUS_MODE_INFINITY;
  public static final java.lang.String FOCUS_MODE_MACRO;
  public static final java.lang.String SCENE_MODE_ACTION;
  public static final java.lang.String SCENE_MODE_AUTO;
  public static final java.lang.String SCENE_MODE_BARCODE;
  public static final java.lang.String SCENE_MODE_BEACH;
  public static final java.lang.String SCENE_MODE_CANDLELIGHT;
  public static final java.lang.String SCENE_MODE_FIREWORKS;
  public static final java.lang.String SCENE_MODE_HDR;
  public static final java.lang.String SCENE_MODE_LANDSCAPE;
  public static final java.lang.String SCENE_MODE_NIGHT;
  public static final java.lang.String SCENE_MODE_NIGHT_PORTRAIT;
  public static final java.lang.String SCENE_MODE_PARTY;
  public static final java.lang.String SCENE_MODE_PORTRAIT;
  public static final java.lang.String SCENE_MODE_SNOW;
  public static final java.lang.String SCENE_MODE_SPORTS;
  public static final java.lang.String SCENE_MODE_STEADYPHOTO;
  public static final java.lang.String SCENE_MODE_SUNSET;
  public static final java.lang.String SCENE_MODE_THEATRE;
  public static final java.lang.String WHITE_BALANCE_AUTO;
  public static final java.lang.String WHITE_BALANCE_CLOUDY_DAYLIGHT;
  public static final java.lang.String WHITE_BALANCE_DAYLIGHT;
  public static final java.lang.String WHITE_BALANCE_FLUORESCENT;
  public static final java.lang.String WHITE_BALANCE_INCANDESCENT;
  public static final java.lang.String WHITE_BALANCE_SHADE;
  public static final java.lang.String WHITE_BALANCE_TWILIGHT;
  public static final java.lang.String WHITE_BALANCE_WARM_FLUORESCENT;
}
public interface android.hardware.Camera$PictureCallback
{
  public abstract void onPictureTaken(byte[], android.hardware.Camera);
}
public interface android.hardware.Camera$PreviewCallback
{
  public abstract void onPreviewFrame(byte[], android.hardware.Camera);
}
public interface android.hardware.Camera$ShutterCallback
{
  public abstract void onShutter();
}
public class android.hardware.Camera$Size
  extends java.lang.Object
{
  public void <init>(android.hardware.Camera, int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int height;
  public int width;
}
public final class android.hardware.ConsumerIrManager
  extends java.lang.Object
{
  public boolean hasIrEmitter();
  public void transmit(int, int[]);
  public android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies();
}
public final class android.hardware.ConsumerIrManager$CarrierFrequencyRange
  extends java.lang.Object
{
  public void <init>(android.hardware.ConsumerIrManager, int, int);
  public int getMaxFrequency();
  public int getMinFrequency();
}
public class android.hardware.GeomagneticField
  extends java.lang.Object
{
  public void <init>(float, float, float, long);
  public float getDeclination();
  public float getFieldStrength();
  public float getHorizontalStrength();
  public float getInclination();
  public float getX();
  public float getY();
  public float getZ();
}
public final class android.hardware.Sensor
  extends java.lang.Object
{
  public boolean isAdditionalInfoSupported();
  public boolean isDynamicSensor();
  public boolean isWakeUpSensor();
  public float getMaximumRange();
  public float getPower();
  public float getResolution();
  public int getFifoMaxEventCount();
  public int getFifoReservedEventCount();
  public int getId();
  public int getMaxDelay();
  public int getMinDelay();
  public int getReportingMode();
  public int getType();
  public int getVersion();
  public java.lang.String getName();
  public java.lang.String getStringType();
  public java.lang.String getVendor();
  public java.lang.String toString();
  public static final int REPORTING_MODE_CONTINUOUS;
  public static final int REPORTING_MODE_ONE_SHOT;
  public static final int REPORTING_MODE_ON_CHANGE;
  public static final int REPORTING_MODE_SPECIAL_TRIGGER;
  public static final int TYPE_ACCELEROMETER;
  public static final int TYPE_ALL;
  public static final int TYPE_AMBIENT_TEMPERATURE;
  public static final int TYPE_DEVICE_PRIVATE_BASE;
  public static final int TYPE_GAME_ROTATION_VECTOR;
  public static final int TYPE_GEOMAGNETIC_ROTATION_VECTOR;
  public static final int TYPE_GRAVITY;
  public static final int TYPE_GYROSCOPE;
  public static final int TYPE_GYROSCOPE_UNCALIBRATED;
  public static final int TYPE_HEART_BEAT;
  public static final int TYPE_HEART_RATE;
  public static final int TYPE_LIGHT;
  public static final int TYPE_LINEAR_ACCELERATION;
  public static final int TYPE_MAGNETIC_FIELD;
  public static final int TYPE_MAGNETIC_FIELD_UNCALIBRATED;
  public static final int TYPE_MOTION_DETECT;
  public static final int TYPE_ORIENTATION;
  public static final int TYPE_POSE_6DOF;
  public static final int TYPE_PRESSURE;
  public static final int TYPE_PROXIMITY;
  public static final int TYPE_RELATIVE_HUMIDITY;
  public static final int TYPE_ROTATION_VECTOR;
  public static final int TYPE_SIGNIFICANT_MOTION;
  public static final int TYPE_STATIONARY_DETECT;
  public static final int TYPE_STEP_COUNTER;
  public static final int TYPE_STEP_DETECTOR;
  public static final int TYPE_TEMPERATURE;
  public static final java.lang.String STRING_TYPE_ACCELEROMETER;
  public static final java.lang.String STRING_TYPE_AMBIENT_TEMPERATURE;
  public static final java.lang.String STRING_TYPE_GAME_ROTATION_VECTOR;
  public static final java.lang.String STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR;
  public static final java.lang.String STRING_TYPE_GRAVITY;
  public static final java.lang.String STRING_TYPE_GYROSCOPE;
  public static final java.lang.String STRING_TYPE_GYROSCOPE_UNCALIBRATED;
  public static final java.lang.String STRING_TYPE_HEART_BEAT;
  public static final java.lang.String STRING_TYPE_HEART_RATE;
  public static final java.lang.String STRING_TYPE_LIGHT;
  public static final java.lang.String STRING_TYPE_LINEAR_ACCELERATION;
  public static final java.lang.String STRING_TYPE_MAGNETIC_FIELD;
  public static final java.lang.String STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED;
  public static final java.lang.String STRING_TYPE_MOTION_DETECT;
  public static final java.lang.String STRING_TYPE_ORIENTATION;
  public static final java.lang.String STRING_TYPE_POSE_6DOF;
  public static final java.lang.String STRING_TYPE_PRESSURE;
  public static final java.lang.String STRING_TYPE_PROXIMITY;
  public static final java.lang.String STRING_TYPE_RELATIVE_HUMIDITY;
  public static final java.lang.String STRING_TYPE_ROTATION_VECTOR;
  public static final java.lang.String STRING_TYPE_SIGNIFICANT_MOTION;
  public static final java.lang.String STRING_TYPE_STATIONARY_DETECT;
  public static final java.lang.String STRING_TYPE_STEP_COUNTER;
  public static final java.lang.String STRING_TYPE_STEP_DETECTOR;
  public static final java.lang.String STRING_TYPE_TEMPERATURE;
}
public class android.hardware.SensorAdditionalInfo
  extends java.lang.Object
{
  public static final int TYPE_FRAME_BEGIN;
  public static final int TYPE_FRAME_END;
  public static final int TYPE_INTERNAL_TEMPERATURE;
  public static final int TYPE_SAMPLING;
  public static final int TYPE_SENSOR_PLACEMENT;
  public static final int TYPE_UNTRACKED_DELAY;
  public static final int TYPE_VEC3_CALIBRATION;
  public final int serial;
  public final int type;
  public final android.hardware.Sensor sensor;
  public final float[] floatValues;
  public final int[] intValues;
}
public class android.hardware.SensorEvent
  extends java.lang.Object
{
  public final float[] values;
  public int accuracy;
  public long timestamp;
  public android.hardware.Sensor sensor;
}
public abstract class android.hardware.SensorEventCallback
  extends java.lang.Object
  implements android.hardware.SensorEventListener2
{
  public void <init>();
  public void onAccuracyChanged(android.hardware.Sensor, int);
  public void onFlushCompleted(android.hardware.Sensor);
  public void onSensorAdditionalInfo(android.hardware.SensorAdditionalInfo);
  public void onSensorChanged(android.hardware.SensorEvent);
}
public interface android.hardware.SensorEventListener
{
  public abstract void onAccuracyChanged(android.hardware.Sensor, int);
  public abstract void onSensorChanged(android.hardware.SensorEvent);
}
public interface android.hardware.SensorEventListener2
  extends android.hardware.SensorEventListener
{
  public abstract void onFlushCompleted(android.hardware.Sensor);
}
public interface android.hardware.SensorListener
{
  public abstract void onAccuracyChanged(int, int);
  public abstract void onSensorChanged(int, float[]);
}
public abstract class android.hardware.SensorManager
  extends java.lang.Object
{
  public static boolean getRotationMatrix(float[], float[], float[], float[]);
  public static boolean remapCoordinateSystem(float[], int, int, float[]);
  public static float getAltitude(float, float);
  public static float getInclination(float[]);
  public static void getAngleChange(float[], float[], float[]);
  public static void getQuaternionFromVector(float[], float[]);
  public static void getRotationMatrixFromVector(float[], float[]);
  public static float[] getOrientation(float[], float[]);
  public boolean cancelTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor);
  public boolean flush(android.hardware.SensorEventListener);
  public boolean isDynamicSensorDiscoverySupported();
  public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int);
  public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler);
  public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int);
  public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, int, android.os.Handler);
  public boolean registerListener(android.hardware.SensorListener, int);
  public boolean registerListener(android.hardware.SensorListener, int, int);
  public boolean requestTriggerSensor(android.hardware.TriggerEventListener, android.hardware.Sensor);
  public int getSensors();
  public void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback);
  public void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback, android.os.Handler);
  public void unregisterDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback);
  public void unregisterListener(android.hardware.SensorEventListener);
  public void unregisterListener(android.hardware.SensorEventListener, android.hardware.Sensor);
  public void unregisterListener(android.hardware.SensorListener);
  public void unregisterListener(android.hardware.SensorListener, int);
  public android.hardware.Sensor getDefaultSensor(int);
  public android.hardware.Sensor getDefaultSensor(int, boolean);
  public java.util.List getDynamicSensorList(int);
  public java.util.List getSensorList(int);
  public static final float GRAVITY_DEATH_STAR_I;
  public static final float GRAVITY_EARTH;
  public static final float GRAVITY_JUPITER;
  public static final float GRAVITY_MARS;
  public static final float GRAVITY_MERCURY;
  public static final float GRAVITY_MOON;
  public static final float GRAVITY_NEPTUNE;
  public static final float GRAVITY_PLUTO;
  public static final float GRAVITY_SATURN;
  public static final float GRAVITY_SUN;
  public static final float GRAVITY_THE_ISLAND;
  public static final float GRAVITY_URANUS;
  public static final float GRAVITY_VENUS;
  public static final float LIGHT_CLOUDY;
  public static final float LIGHT_FULLMOON;
  public static final float LIGHT_NO_MOON;
  public static final float LIGHT_OVERCAST;
  public static final float LIGHT_SHADE;
  public static final float LIGHT_SUNLIGHT;
  public static final float LIGHT_SUNLIGHT_MAX;
  public static final float LIGHT_SUNRISE;
  public static final float MAGNETIC_FIELD_EARTH_MAX;
  public static final float MAGNETIC_FIELD_EARTH_MIN;
  public static final float PRESSURE_STANDARD_ATMOSPHERE;
  public static final float STANDARD_GRAVITY;
  public static final int AXIS_MINUS_X;
  public static final int AXIS_MINUS_Y;
  public static final int AXIS_MINUS_Z;
  public static final int AXIS_X;
  public static final int AXIS_Y;
  public static final int AXIS_Z;
  public static final int DATA_X;
  public static final int DATA_Y;
  public static final int DATA_Z;
  public static final int RAW_DATA_INDEX;
  public static final int RAW_DATA_X;
  public static final int RAW_DATA_Y;
  public static final int RAW_DATA_Z;
  public static final int SENSOR_ACCELEROMETER;
  public static final int SENSOR_ALL;
  public static final int SENSOR_DELAY_FASTEST;
  public static final int SENSOR_DELAY_GAME;
  public static final int SENSOR_DELAY_NORMAL;
  public static final int SENSOR_DELAY_UI;
  public static final int SENSOR_LIGHT;
  public static final int SENSOR_MAGNETIC_FIELD;
  public static final int SENSOR_MAX;
  public static final int SENSOR_MIN;
  public static final int SENSOR_ORIENTATION;
  public static final int SENSOR_ORIENTATION_RAW;
  public static final int SENSOR_PROXIMITY;
  public static final int SENSOR_STATUS_ACCURACY_HIGH;
  public static final int SENSOR_STATUS_ACCURACY_LOW;
  public static final int SENSOR_STATUS_ACCURACY_MEDIUM;
  public static final int SENSOR_STATUS_NO_CONTACT;
  public static final int SENSOR_STATUS_UNRELIABLE;
  public static final int SENSOR_TEMPERATURE;
  public static final int SENSOR_TRICORDER;
}
public abstract class android.hardware.SensorManager$DynamicSensorCallback
  extends java.lang.Object
{
  public void <init>();
  public void onDynamicSensorConnected(android.hardware.Sensor);
  public void onDynamicSensorDisconnected(android.hardware.Sensor);
}
public final class android.hardware.TriggerEvent
  extends java.lang.Object
{
  public final float[] values;
  public long timestamp;
  public android.hardware.Sensor sensor;
}
public abstract class android.hardware.TriggerEventListener
  extends java.lang.Object
{
  public void <init>();
  public abstract void onTrigger(android.hardware.TriggerEvent);
}
public class android.hardware.camera2.CameraAccessException
  extends android.util.AndroidException
{
  public void <init>(int);
  public void <init>(int, java.lang.String);
  public void <init>(int, java.lang.String, java.lang.Throwable);
  public void <init>(int, java.lang.Throwable);
  public final int getReason();
  public static final int CAMERA_DISABLED;
  public static final int CAMERA_DISCONNECTED;
  public static final int CAMERA_ERROR;
  public static final int CAMERA_IN_USE;
  public static final int MAX_CAMERAS_IN_USE;
}
public abstract class android.hardware.camera2.CameraCaptureSession
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public void <init>();
  public abstract boolean isReprocessable();
  public abstract int capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract int captureBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract int setRepeatingBurst(java.util.List, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract int setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CameraCaptureSession$CaptureCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract void abortCaptures()  throws android.hardware.camera2.CameraAccessException;
  public abstract void close();
  public abstract void prepare(android.view.Surface)  throws android.hardware.camera2.CameraAccessException;
  public abstract void stopRepeating()  throws android.hardware.camera2.CameraAccessException;
  public abstract android.hardware.camera2.CameraDevice getDevice();
  public abstract android.view.Surface getInputSurface();
}
public abstract class android.hardware.camera2.CameraCaptureSession$CaptureCallback
  extends java.lang.Object
{
  public void <init>();
  public void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.view.Surface, long);
  public void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult);
  public void onCaptureFailed(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureFailure);
  public void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureResult);
  public void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession, int);
  public void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession, int, long);
  public void onCaptureStarted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, long, long);
}
public abstract class android.hardware.camera2.CameraCaptureSession$StateCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onConfigureFailed(android.hardware.camera2.CameraCaptureSession);
  public abstract void onConfigured(android.hardware.camera2.CameraCaptureSession);
  public void onActive(android.hardware.camera2.CameraCaptureSession);
  public void onClosed(android.hardware.camera2.CameraCaptureSession);
  public void onReady(android.hardware.camera2.CameraCaptureSession);
  public void onSurfacePrepared(android.hardware.camera2.CameraCaptureSession, android.view.Surface);
}
public final class android.hardware.camera2.CameraCharacteristics
  extends android.hardware.camera2.CameraMetadata
{
  public java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key);
  public java.util.List getAvailableCaptureRequestKeys();
  public java.util.List getAvailableCaptureResultKeys();
  public java.util.List getKeys();
  public static final android.hardware.camera2.CameraCharacteristics$Key COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_RANGE;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_COMPENSATION_STEP;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AE_LOCK_AVAILABLE;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AF_AVAILABLE_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_EFFECTS;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_SCENE_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_AVAILABLE_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_AWB_LOCK_AVAILABLE;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AE;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AF;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_MAX_REGIONS_AWB;
  public static final android.hardware.camera2.CameraCharacteristics$Key CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGE;
  public static final android.hardware.camera2.CameraCharacteristics$Key DEPTH_DEPTH_IS_EXCLUSIVE;
  public static final android.hardware.camera2.CameraCharacteristics$Key EDGE_AVAILABLE_EDGE_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key FLASH_INFO_AVAILABLE;
  public static final android.hardware.camera2.CameraCharacteristics$Key HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL;
  public static final android.hardware.camera2.CameraCharacteristics$Key JPEG_AVAILABLE_THUMBNAIL_SIZES;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_FACING;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_APERTURES;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FILTER_DENSITIES;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_FOCUS_DISTANCE_CALIBRATION;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_HYPERFOCAL_DISTANCE;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INFO_MINIMUM_FOCUS_DISTANCE;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_INTRINSIC_CALIBRATION;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_POSE_ROTATION;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_POSE_TRANSLATION;
  public static final android.hardware.camera2.CameraCharacteristics$Key LENS_RADIAL_DISTORTION;
  public static final android.hardware.camera2.CameraCharacteristics$Key NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key REPROCESS_MAX_CAPTURE_STALL;
  public static final android.hardware.camera2.CameraCharacteristics$Key REQUEST_AVAILABLE_CAPABILITIES;
  public static final android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_INPUT_STREAMS;
  public static final android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC;
  public static final android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_PROC_STALLING;
  public static final android.hardware.camera2.CameraCharacteristics$Key REQUEST_MAX_NUM_OUTPUT_RAW;
  public static final android.hardware.camera2.CameraCharacteristics$Key REQUEST_PARTIAL_RESULT_COUNT;
  public static final android.hardware.camera2.CameraCharacteristics$Key REQUEST_PIPELINE_MAX_DEPTH;
  public static final android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM;
  public static final android.hardware.camera2.CameraCharacteristics$Key SCALER_CROPPING_TYPE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_AVAILABLE_TEST_PATTERN_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_BLACK_LEVEL_PATTERN;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_CALIBRATION_TRANSFORM1;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_CALIBRATION_TRANSFORM2;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_COLOR_TRANSFORM1;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_COLOR_TRANSFORM2;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_FORWARD_MATRIX1;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_FORWARD_MATRIX2;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_COLOR_FILTER_ARRANGEMENT;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_EXPOSURE_TIME_RANGE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_LENS_SHADING_APPLIED;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_MAX_FRAME_DURATION;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PHYSICAL_SIZE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PIXEL_ARRAY_SIZE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_SENSITIVITY_RANGE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_TIMESTAMP_SOURCE;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_WHITE_LEVEL;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_MAX_ANALOG_SENSITIVITY;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_OPTICAL_BLACK_REGIONS;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_REFERENCE_ILLUMINANT1;
  public static final android.hardware.camera2.CameraCharacteristics$Key SENSOR_REFERENCE_ILLUMINANT2;
  public static final android.hardware.camera2.CameraCharacteristics$Key SHADING_AVAILABLE_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key STATISTICS_INFO_MAX_FACE_COUNT;
  public static final android.hardware.camera2.CameraCharacteristics$Key SYNC_MAX_LATENCY;
  public static final android.hardware.camera2.CameraCharacteristics$Key TONEMAP_AVAILABLE_TONE_MAP_MODES;
  public static final android.hardware.camera2.CameraCharacteristics$Key TONEMAP_MAX_CURVE_POINTS;
}
public final class android.hardware.camera2.CameraCharacteristics$Key
  extends java.lang.Object
{
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String getName();
  public java.lang.String toString();
}
public abstract class android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession
  extends android.hardware.camera2.CameraCaptureSession
{
  public void <init>();
  public abstract java.util.List createHighSpeedRequestList(android.hardware.camera2.CaptureRequest)  throws android.hardware.camera2.CameraAccessException;
}
public abstract class android.hardware.camera2.CameraDevice
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public abstract void close();
  public abstract void createCaptureSession(java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract void createCaptureSessionByOutputConfigurations(java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract void createConstrainedHighSpeedCaptureSession(java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration, java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration, java.util.List, android.hardware.camera2.CameraCaptureSession$StateCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public abstract android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)  throws android.hardware.camera2.CameraAccessException;
  public abstract android.hardware.camera2.CaptureRequest$Builder createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult)  throws android.hardware.camera2.CameraAccessException;
  public abstract java.lang.String getId();
  public static final int TEMPLATE_MANUAL;
  public static final int TEMPLATE_PREVIEW;
  public static final int TEMPLATE_RECORD;
  public static final int TEMPLATE_STILL_CAPTURE;
  public static final int TEMPLATE_VIDEO_SNAPSHOT;
  public static final int TEMPLATE_ZERO_SHUTTER_LAG;
}
public abstract class android.hardware.camera2.CameraDevice$StateCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onDisconnected(android.hardware.camera2.CameraDevice);
  public abstract void onError(android.hardware.camera2.CameraDevice, int);
  public abstract void onOpened(android.hardware.camera2.CameraDevice);
  public void onClosed(android.hardware.camera2.CameraDevice);
  public static final int ERROR_CAMERA_DEVICE;
  public static final int ERROR_CAMERA_DISABLED;
  public static final int ERROR_CAMERA_IN_USE;
  public static final int ERROR_CAMERA_SERVICE;
  public static final int ERROR_MAX_CAMERAS_IN_USE;
}
public final class android.hardware.camera2.CameraManager
  extends java.lang.Object
{
  public void openCamera(java.lang.String, android.hardware.camera2.CameraDevice$StateCallback, android.os.Handler)  throws android.hardware.camera2.CameraAccessException;
  public void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback, android.os.Handler);
  public void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback, android.os.Handler);
  public void setTorchMode(java.lang.String, boolean)  throws android.hardware.camera2.CameraAccessException;
  public void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback);
  public void unregisterTorchCallback(android.hardware.camera2.CameraManager$TorchCallback);
  public android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)  throws android.hardware.camera2.CameraAccessException;
  public java.lang.String[] getCameraIdList()  throws android.hardware.camera2.CameraAccessException;
}
public abstract class android.hardware.camera2.CameraManager$AvailabilityCallback
  extends java.lang.Object
{
  public void <init>();
  public void onCameraAvailable(java.lang.String);
  public void onCameraUnavailable(java.lang.String);
}
public abstract class android.hardware.camera2.CameraManager$TorchCallback
  extends java.lang.Object
{
  public void <init>();
  public void onTorchModeChanged(java.lang.String, boolean);
  public void onTorchModeUnavailable(java.lang.String);
}
public abstract class android.hardware.camera2.CameraMetadata
  extends java.lang.Object
{
  public java.util.List getKeys();
  public static final int COLOR_CORRECTION_ABERRATION_MODE_FAST;
  public static final int COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY;
  public static final int COLOR_CORRECTION_ABERRATION_MODE_OFF;
  public static final int COLOR_CORRECTION_MODE_FAST;
  public static final int COLOR_CORRECTION_MODE_HIGH_QUALITY;
  public static final int COLOR_CORRECTION_MODE_TRANSFORM_MATRIX;
  public static final int CONTROL_AE_ANTIBANDING_MODE_50HZ;
  public static final int CONTROL_AE_ANTIBANDING_MODE_60HZ;
  public static final int CONTROL_AE_ANTIBANDING_MODE_AUTO;
  public static final int CONTROL_AE_ANTIBANDING_MODE_OFF;
  public static final int CONTROL_AE_MODE_OFF;
  public static final int CONTROL_AE_MODE_ON;
  public static final int CONTROL_AE_MODE_ON_ALWAYS_FLASH;
  public static final int CONTROL_AE_MODE_ON_AUTO_FLASH;
  public static final int CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE;
  public static final int CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL;
  public static final int CONTROL_AE_PRECAPTURE_TRIGGER_IDLE;
  public static final int CONTROL_AE_PRECAPTURE_TRIGGER_START;
  public static final int CONTROL_AE_STATE_CONVERGED;
  public static final int CONTROL_AE_STATE_FLASH_REQUIRED;
  public static final int CONTROL_AE_STATE_INACTIVE;
  public static final int CONTROL_AE_STATE_LOCKED;
  public static final int CONTROL_AE_STATE_PRECAPTURE;
  public static final int CONTROL_AE_STATE_SEARCHING;
  public static final int CONTROL_AF_MODE_AUTO;
  public static final int CONTROL_AF_MODE_CONTINUOUS_PICTURE;
  public static final int CONTROL_AF_MODE_CONTINUOUS_VIDEO;
  public static final int CONTROL_AF_MODE_EDOF;
  public static final int CONTROL_AF_MODE_MACRO;
  public static final int CONTROL_AF_MODE_OFF;
  public static final int CONTROL_AF_STATE_ACTIVE_SCAN;
  public static final int CONTROL_AF_STATE_FOCUSED_LOCKED;
  public static final int CONTROL_AF_STATE_INACTIVE;
  public static final int CONTROL_AF_STATE_NOT_FOCUSED_LOCKED;
  public static final int CONTROL_AF_STATE_PASSIVE_FOCUSED;
  public static final int CONTROL_AF_STATE_PASSIVE_SCAN;
  public static final int CONTROL_AF_STATE_PASSIVE_UNFOCUSED;
  public static final int CONTROL_AF_TRIGGER_CANCEL;
  public static final int CONTROL_AF_TRIGGER_IDLE;
  public static final int CONTROL_AF_TRIGGER_START;
  public static final int CONTROL_AWB_MODE_AUTO;
  public static final int CONTROL_AWB_MODE_CLOUDY_DAYLIGHT;
  public static final int CONTROL_AWB_MODE_DAYLIGHT;
  public static final int CONTROL_AWB_MODE_FLUORESCENT;
  public static final int CONTROL_AWB_MODE_INCANDESCENT;
  public static final int CONTROL_AWB_MODE_OFF;
  public static final int CONTROL_AWB_MODE_SHADE;
  public static final int CONTROL_AWB_MODE_TWILIGHT;
  public static final int CONTROL_AWB_MODE_WARM_FLUORESCENT;
  public static final int CONTROL_AWB_STATE_CONVERGED;
  public static final int CONTROL_AWB_STATE_INACTIVE;
  public static final int CONTROL_AWB_STATE_LOCKED;
  public static final int CONTROL_AWB_STATE_SEARCHING;
  public static final int CONTROL_CAPTURE_INTENT_CUSTOM;
  public static final int CONTROL_CAPTURE_INTENT_MANUAL;
  public static final int CONTROL_CAPTURE_INTENT_PREVIEW;
  public static final int CONTROL_CAPTURE_INTENT_STILL_CAPTURE;
  public static final int CONTROL_CAPTURE_INTENT_VIDEO_RECORD;
  public static final int CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT;
  public static final int CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG;
  public static final int CONTROL_EFFECT_MODE_AQUA;
  public static final int CONTROL_EFFECT_MODE_BLACKBOARD;
  public static final int CONTROL_EFFECT_MODE_MONO;
  public static final int CONTROL_EFFECT_MODE_NEGATIVE;
  public static final int CONTROL_EFFECT_MODE_OFF;
  public static final int CONTROL_EFFECT_MODE_POSTERIZE;
  public static final int CONTROL_EFFECT_MODE_SEPIA;
  public static final int CONTROL_EFFECT_MODE_SOLARIZE;
  public static final int CONTROL_EFFECT_MODE_WHITEBOARD;
  public static final int CONTROL_MODE_AUTO;
  public static final int CONTROL_MODE_OFF;
  public static final int CONTROL_MODE_OFF_KEEP_STATE;
  public static final int CONTROL_MODE_USE_SCENE_MODE;
  public static final int CONTROL_SCENE_MODE_ACTION;
  public static final int CONTROL_SCENE_MODE_BARCODE;
  public static final int CONTROL_SCENE_MODE_BEACH;
  public static final int CONTROL_SCENE_MODE_CANDLELIGHT;
  public static final int CONTROL_SCENE_MODE_DISABLED;
  public static final int CONTROL_SCENE_MODE_FACE_PRIORITY;
  public static final int CONTROL_SCENE_MODE_FIREWORKS;
  public static final int CONTROL_SCENE_MODE_HDR;
  public static final int CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO;
  public static final int CONTROL_SCENE_MODE_LANDSCAPE;
  public static final int CONTROL_SCENE_MODE_NIGHT;
  public static final int CONTROL_SCENE_MODE_NIGHT_PORTRAIT;
  public static final int CONTROL_SCENE_MODE_PARTY;
  public static final int CONTROL_SCENE_MODE_PORTRAIT;
  public static final int CONTROL_SCENE_MODE_SNOW;
  public static final int CONTROL_SCENE_MODE_SPORTS;
  public static final int CONTROL_SCENE_MODE_STEADYPHOTO;
  public static final int CONTROL_SCENE_MODE_SUNSET;
  public static final int CONTROL_SCENE_MODE_THEATRE;
  public static final int CONTROL_VIDEO_STABILIZATION_MODE_OFF;
  public static final int CONTROL_VIDEO_STABILIZATION_MODE_ON;
  public static final int EDGE_MODE_FAST;
  public static final int EDGE_MODE_HIGH_QUALITY;
  public static final int EDGE_MODE_OFF;
  public static final int EDGE_MODE_ZERO_SHUTTER_LAG;
  public static final int FLASH_MODE_OFF;
  public static final int FLASH_MODE_SINGLE;
  public static final int FLASH_MODE_TORCH;
  public static final int FLASH_STATE_CHARGING;
  public static final int FLASH_STATE_FIRED;
  public static final int FLASH_STATE_PARTIAL;
  public static final int FLASH_STATE_READY;
  public static final int FLASH_STATE_UNAVAILABLE;
  public static final int HOT_PIXEL_MODE_FAST;
  public static final int HOT_PIXEL_MODE_HIGH_QUALITY;
  public static final int HOT_PIXEL_MODE_OFF;
  public static final int INFO_SUPPORTED_HARDWARE_LEVEL_3;
  public static final int INFO_SUPPORTED_HARDWARE_LEVEL_FULL;
  public static final int INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY;
  public static final int INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED;
  public static final int LENS_FACING_BACK;
  public static final int LENS_FACING_EXTERNAL;
  public static final int LENS_FACING_FRONT;
  public static final int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE;
  public static final int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED;
  public static final int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED;
  public static final int LENS_OPTICAL_STABILIZATION_MODE_OFF;
  public static final int LENS_OPTICAL_STABILIZATION_MODE_ON;
  public static final int LENS_STATE_MOVING;
  public static final int LENS_STATE_STATIONARY;
  public static final int NOISE_REDUCTION_MODE_FAST;
  public static final int NOISE_REDUCTION_MODE_HIGH_QUALITY;
  public static final int NOISE_REDUCTION_MODE_MINIMAL;
  public static final int NOISE_REDUCTION_MODE_OFF;
  public static final int NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_RAW;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS;
  public static final int REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING;
  public static final int SCALER_CROPPING_TYPE_CENTER_ONLY;
  public static final int SCALER_CROPPING_TYPE_FREEFORM;
  public static final int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR;
  public static final int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG;
  public static final int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG;
  public static final int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB;
  public static final int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB;
  public static final int SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME;
  public static final int SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_D50;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_D55;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_D65;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_D75;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_FLASH;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_SHADE;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN;
  public static final int SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT;
  public static final int SENSOR_TEST_PATTERN_MODE_COLOR_BARS;
  public static final int SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY;
  public static final int SENSOR_TEST_PATTERN_MODE_CUSTOM1;
  public static final int SENSOR_TEST_PATTERN_MODE_OFF;
  public static final int SENSOR_TEST_PATTERN_MODE_PN9;
  public static final int SENSOR_TEST_PATTERN_MODE_SOLID_COLOR;
  public static final int SHADING_MODE_FAST;
  public static final int SHADING_MODE_HIGH_QUALITY;
  public static final int SHADING_MODE_OFF;
  public static final int STATISTICS_FACE_DETECT_MODE_FULL;
  public static final int STATISTICS_FACE_DETECT_MODE_OFF;
  public static final int STATISTICS_FACE_DETECT_MODE_SIMPLE;
  public static final int STATISTICS_LENS_SHADING_MAP_MODE_OFF;
  public static final int STATISTICS_LENS_SHADING_MAP_MODE_ON;
  public static final int STATISTICS_SCENE_FLICKER_50HZ;
  public static final int STATISTICS_SCENE_FLICKER_60HZ;
  public static final int STATISTICS_SCENE_FLICKER_NONE;
  public static final int SYNC_MAX_LATENCY_PER_FRAME_CONTROL;
  public static final int SYNC_MAX_LATENCY_UNKNOWN;
  public static final int TONEMAP_MODE_CONTRAST_CURVE;
  public static final int TONEMAP_MODE_FAST;
  public static final int TONEMAP_MODE_GAMMA_VALUE;
  public static final int TONEMAP_MODE_HIGH_QUALITY;
  public static final int TONEMAP_MODE_PRESET_CURVE;
  public static final int TONEMAP_PRESET_CURVE_REC709;
  public static final int TONEMAP_PRESET_CURVE_SRGB;
}
public class android.hardware.camera2.CaptureFailure
  extends java.lang.Object
{
  public boolean wasImageCaptured();
  public int getReason();
  public int getSequenceId();
  public long getFrameNumber();
  public android.hardware.camera2.CaptureRequest getRequest();
  public static final int REASON_ERROR;
  public static final int REASON_FLUSHED;
}
public final class android.hardware.camera2.CaptureRequest
  extends android.hardware.camera2.CameraMetadata
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean isReprocess();
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.Object get(android.hardware.camera2.CaptureRequest$Key);
  public java.lang.Object getTag();
  public java.util.List getKeys();
  public static final android.hardware.camera2.CaptureRequest$Key BLACK_LEVEL_LOCK;
  public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_ABERRATION_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_GAINS;
  public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key COLOR_CORRECTION_TRANSFORM;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_ANTIBANDING_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_EXPOSURE_COMPENSATION;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_LOCK;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AE_TARGET_FPS_RANGE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_LOCK;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_AWB_REGIONS;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_CAPTURE_INTENT;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_EFFECT_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_POST_RAW_SENSITIVITY_BOOST;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key CONTROL_VIDEO_STABILIZATION_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key EDGE_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key FLASH_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key HOT_PIXEL_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key JPEG_GPS_LOCATION;
  public static final android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION;
  public static final android.hardware.camera2.CaptureRequest$Key JPEG_QUALITY;
  public static final android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_QUALITY;
  public static final android.hardware.camera2.CaptureRequest$Key JPEG_THUMBNAIL_SIZE;
  public static final android.hardware.camera2.CaptureRequest$Key LENS_APERTURE;
  public static final android.hardware.camera2.CaptureRequest$Key LENS_FILTER_DENSITY;
  public static final android.hardware.camera2.CaptureRequest$Key LENS_FOCAL_LENGTH;
  public static final android.hardware.camera2.CaptureRequest$Key LENS_FOCUS_DISTANCE;
  public static final android.hardware.camera2.CaptureRequest$Key LENS_OPTICAL_STABILIZATION_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key NOISE_REDUCTION_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key REPROCESS_EFFECTIVE_EXPOSURE_FACTOR;
  public static final android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION;
  public static final android.hardware.camera2.CaptureRequest$Key SENSOR_EXPOSURE_TIME;
  public static final android.hardware.camera2.CaptureRequest$Key SENSOR_FRAME_DURATION;
  public static final android.hardware.camera2.CaptureRequest$Key SENSOR_SENSITIVITY;
  public static final android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_DATA;
  public static final android.hardware.camera2.CaptureRequest$Key SENSOR_TEST_PATTERN_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key SHADING_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key STATISTICS_HOT_PIXEL_MAP_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key STATISTICS_LENS_SHADING_MAP_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_CURVE;
  public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_GAMMA;
  public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_MODE;
  public static final android.hardware.camera2.CaptureRequest$Key TONEMAP_PRESET_CURVE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.hardware.camera2.CaptureRequest$Builder
  extends java.lang.Object
{
  public void addTarget(android.view.Surface);
  public void removeTarget(android.view.Surface);
  public void set(android.hardware.camera2.CaptureRequest$Key, java.lang.Object);
  public void setTag(java.lang.Object);
  public android.hardware.camera2.CaptureRequest build();
  public java.lang.Object get(android.hardware.camera2.CaptureRequest$Key);
}
public final class android.hardware.camera2.CaptureRequest$Key
  extends java.lang.Object
{
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String getName();
  public java.lang.String toString();
}
public class android.hardware.camera2.CaptureResult
  extends android.hardware.camera2.CameraMetadata
{
  public int getSequenceId();
  public long getFrameNumber();
  public android.hardware.camera2.CaptureRequest getRequest();
  public java.lang.Object get(android.hardware.camera2.CaptureResult$Key);
  public java.util.List getKeys();
  public static final android.hardware.camera2.CaptureResult$Key BLACK_LEVEL_LOCK;
  public static final android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_ABERRATION_MODE;
  public static final android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_GAINS;
  public static final android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_MODE;
  public static final android.hardware.camera2.CaptureResult$Key COLOR_CORRECTION_TRANSFORM;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_ANTIBANDING_MODE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_EXPOSURE_COMPENSATION;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_LOCK;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_MODE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_PRECAPTURE_TRIGGER;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_REGIONS;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_STATE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AE_TARGET_FPS_RANGE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AF_MODE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AF_REGIONS;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AF_TRIGGER;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AWB_LOCK;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AWB_MODE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AWB_REGIONS;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_AWB_STATE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_CAPTURE_INTENT;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_EFFECT_MODE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_MODE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_POST_RAW_SENSITIVITY_BOOST;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_SCENE_MODE;
  public static final android.hardware.camera2.CaptureResult$Key CONTROL_VIDEO_STABILIZATION_MODE;
  public static final android.hardware.camera2.CaptureResult$Key EDGE_MODE;
  public static final android.hardware.camera2.CaptureResult$Key FLASH_MODE;
  public static final android.hardware.camera2.CaptureResult$Key FLASH_STATE;
  public static final android.hardware.camera2.CaptureResult$Key HOT_PIXEL_MODE;
  public static final android.hardware.camera2.CaptureResult$Key JPEG_GPS_LOCATION;
  public static final android.hardware.camera2.CaptureResult$Key JPEG_ORIENTATION;
  public static final android.hardware.camera2.CaptureResult$Key JPEG_QUALITY;
  public static final android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_QUALITY;
  public static final android.hardware.camera2.CaptureResult$Key JPEG_THUMBNAIL_SIZE;
  public static final android.hardware.camera2.CaptureResult$Key LENS_APERTURE;
  public static final android.hardware.camera2.CaptureResult$Key LENS_FILTER_DENSITY;
  public static final android.hardware.camera2.CaptureResult$Key LENS_FOCAL_LENGTH;
  public static final android.hardware.camera2.CaptureResult$Key LENS_FOCUS_DISTANCE;
  public static final android.hardware.camera2.CaptureResult$Key LENS_FOCUS_RANGE;
  public static final android.hardware.camera2.CaptureResult$Key LENS_INTRINSIC_CALIBRATION;
  public static final android.hardware.camera2.CaptureResult$Key LENS_OPTICAL_STABILIZATION_MODE;
  public static final android.hardware.camera2.CaptureResult$Key LENS_POSE_ROTATION;
  public static final android.hardware.camera2.CaptureResult$Key LENS_POSE_TRANSLATION;
  public static final android.hardware.camera2.CaptureResult$Key LENS_RADIAL_DISTORTION;
  public static final android.hardware.camera2.CaptureResult$Key LENS_STATE;
  public static final android.hardware.camera2.CaptureResult$Key NOISE_REDUCTION_MODE;
  public static final android.hardware.camera2.CaptureResult$Key REPROCESS_EFFECTIVE_EXPOSURE_FACTOR;
  public static final android.hardware.camera2.CaptureResult$Key REQUEST_PIPELINE_DEPTH;
  public static final android.hardware.camera2.CaptureResult$Key SCALER_CROP_REGION;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_DYNAMIC_BLACK_LEVEL;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_DYNAMIC_WHITE_LEVEL;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_EXPOSURE_TIME;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_FRAME_DURATION;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_GREEN_SPLIT;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_NEUTRAL_COLOR_POINT;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_NOISE_PROFILE;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_ROLLING_SHUTTER_SKEW;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_SENSITIVITY;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_TEST_PATTERN_DATA;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_TEST_PATTERN_MODE;
  public static final android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP;
  public static final android.hardware.camera2.CaptureResult$Key SHADING_MODE;
  public static final android.hardware.camera2.CaptureResult$Key STATISTICS_FACES;
  public static final android.hardware.camera2.CaptureResult$Key STATISTICS_FACE_DETECT_MODE;
  public static final android.hardware.camera2.CaptureResult$Key STATISTICS_HOT_PIXEL_MAP;
  public static final android.hardware.camera2.CaptureResult$Key STATISTICS_HOT_PIXEL_MAP_MODE;
  public static final android.hardware.camera2.CaptureResult$Key STATISTICS_LENS_SHADING_CORRECTION_MAP;
  public static final android.hardware.camera2.CaptureResult$Key STATISTICS_LENS_SHADING_MAP_MODE;
  public static final android.hardware.camera2.CaptureResult$Key STATISTICS_SCENE_FLICKER;
  public static final android.hardware.camera2.CaptureResult$Key TONEMAP_CURVE;
  public static final android.hardware.camera2.CaptureResult$Key TONEMAP_GAMMA;
  public static final android.hardware.camera2.CaptureResult$Key TONEMAP_MODE;
  public static final android.hardware.camera2.CaptureResult$Key TONEMAP_PRESET_CURVE;
}
public final class android.hardware.camera2.CaptureResult$Key
  extends java.lang.Object
{
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String getName();
  public java.lang.String toString();
}
public final class android.hardware.camera2.DngCreator
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public void <init>(android.hardware.camera2.CameraCharacteristics, android.hardware.camera2.CaptureResult);
  public void close();
  public void writeByteBuffer(java.io.OutputStream, android.util.Size, java.nio.ByteBuffer, long)  throws java.io.IOException;
  public void writeImage(java.io.OutputStream, android.media.Image)  throws java.io.IOException;
  public void writeInputStream(java.io.OutputStream, android.util.Size, java.io.InputStream, long)  throws java.io.IOException;
  public android.hardware.camera2.DngCreator setDescription(java.lang.String);
  public android.hardware.camera2.DngCreator setLocation(android.location.Location);
  public android.hardware.camera2.DngCreator setOrientation(int);
  public android.hardware.camera2.DngCreator setThumbnail(android.graphics.Bitmap);
  public android.hardware.camera2.DngCreator setThumbnail(android.media.Image);
  protected void finalize()  throws java.lang.Throwable;
  public static final int MAX_THUMBNAIL_DIMENSION;
}
public final class android.hardware.camera2.TotalCaptureResult
  extends android.hardware.camera2.CaptureResult
{
  public java.util.List getPartialResults();
}
public final class android.hardware.camera2.params.BlackLevelPattern
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public int getOffsetForIndex(int, int);
  public int hashCode();
  public void copyTo(int[], int);
  public java.lang.String toString();
  public static final int COUNT;
}
public final class android.hardware.camera2.params.ColorSpaceTransform
  extends java.lang.Object
{
  public void <init>(android.util.Rational[]);
  public void <init>(int[]);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void copyElements(android.util.Rational[], int);
  public void copyElements(int[], int);
  public android.util.Rational getElement(int, int);
  public java.lang.String toString();
}
public final class android.hardware.camera2.params.Face
  extends java.lang.Object
{
  public int getId();
  public int getScore();
  public android.graphics.Point getLeftEyePosition();
  public android.graphics.Point getMouthPosition();
  public android.graphics.Point getRightEyePosition();
  public android.graphics.Rect getBounds();
  public java.lang.String toString();
  public static final int ID_UNSUPPORTED;
  public static final int SCORE_MAX;
  public static final int SCORE_MIN;
}
public final class android.hardware.camera2.params.InputConfiguration
  extends java.lang.Object
{
  public void <init>(int, int, int);
  public boolean equals(java.lang.Object);
  public int getFormat();
  public int getHeight();
  public int getWidth();
  public int hashCode();
  public java.lang.String toString();
}
public final class android.hardware.camera2.params.LensShadingMap
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public float getGainFactor(int, int, int);
  public int getColumnCount();
  public int getGainFactorCount();
  public int getRowCount();
  public int hashCode();
  public void copyGainFactors(float[], int);
  public android.hardware.camera2.params.RggbChannelVector getGainFactorVector(int, int);
  public java.lang.String toString();
  public static final float MINIMUM_GAIN_FACTOR;
}
public final class android.hardware.camera2.params.MeteringRectangle
  extends java.lang.Object
{
  public void <init>(android.graphics.Point, android.util.Size, int);
  public void <init>(android.graphics.Rect, int);
  public void <init>(int, int, int, int, int);
  public boolean equals(android.hardware.camera2.params.MeteringRectangle);
  public boolean equals(java.lang.Object);
  public int getHeight();
  public int getMeteringWeight();
  public int getWidth();
  public int getX();
  public int getY();
  public int hashCode();
  public android.graphics.Point getUpperLeftPoint();
  public android.graphics.Rect getRect();
  public android.util.Size getSize();
  public java.lang.String toString();
  public static final int METERING_WEIGHT_DONT_CARE;
  public static final int METERING_WEIGHT_MAX;
  public static final int METERING_WEIGHT_MIN;
}
public final class android.hardware.camera2.params.OutputConfiguration
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.view.Surface);
  public void <init>(int, android.view.Surface);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getSurfaceGroupId();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.view.Surface getSurface();
  public static final int SURFACE_GROUP_ID_NONE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.hardware.camera2.params.RggbChannelVector
  extends java.lang.Object
{
  public void <init>(float, float, float, float);
  public final float getRed();
  public boolean equals(java.lang.Object);
  public float getBlue();
  public float getComponent(int);
  public float getGreenEven();
  public float getGreenOdd();
  public int hashCode();
  public void copyTo(float[], int);
  public java.lang.String toString();
  public static final int BLUE;
  public static final int COUNT;
  public static final int GREEN_EVEN;
  public static final int GREEN_ODD;
  public static final int RED;
}
public final class android.hardware.camera2.params.StreamConfigurationMap
  extends java.lang.Object
{
  public static boolean isOutputSupportedFor(java.lang.Class);
  public final int[] getInputFormats();
  public final int[] getOutputFormats();
  public final int[] getValidOutputFormatsForInput(int);
  public boolean equals(java.lang.Object);
  public boolean isOutputSupportedFor(android.view.Surface);
  public boolean isOutputSupportedFor(int);
  public int hashCode();
  public long getOutputMinFrameDuration(int, android.util.Size);
  public long getOutputMinFrameDuration(java.lang.Class, android.util.Size);
  public long getOutputStallDuration(int, android.util.Size);
  public long getOutputStallDuration(java.lang.Class, android.util.Size);
  public android.util.Range[] getHighSpeedVideoFpsRanges();
  public android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size);
  public android.util.Size[] getHighResolutionOutputSizes(int);
  public android.util.Size[] getHighSpeedVideoSizes();
  public android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range);
  public android.util.Size[] getInputSizes(int);
  public android.util.Size[] getOutputSizes(int);
  public android.util.Size[] getOutputSizes(java.lang.Class);
  public java.lang.String toString();
}
public final class android.hardware.camera2.params.TonemapCurve
  extends java.lang.Object
{
  public void <init>(float[], float[], float[]);
  public boolean equals(java.lang.Object);
  public int getPointCount(int);
  public int hashCode();
  public void copyColorCurve(int, float[], int);
  public android.graphics.PointF getPoint(int, int);
  public java.lang.String toString();
  public static final float LEVEL_BLACK;
  public static final float LEVEL_WHITE;
  public static final int CHANNEL_BLUE;
  public static final int CHANNEL_GREEN;
  public static final int CHANNEL_RED;
  public static final int POINT_SIZE;
}
public final class android.hardware.display.DisplayManager
  extends java.lang.Object
{
  public void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener, android.os.Handler);
  public void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener);
  public android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int);
  public android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, android.view.Surface, int, android.hardware.display.VirtualDisplay$Callback, android.os.Handler);
  public android.view.Display getDisplay(int);
  public android.view.Display[] getDisplays();
  public android.view.Display[] getDisplays(java.lang.String);
  public static final int VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR;
  public static final int VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY;
  public static final int VIRTUAL_DISPLAY_FLAG_PRESENTATION;
  public static final int VIRTUAL_DISPLAY_FLAG_PUBLIC;
  public static final int VIRTUAL_DISPLAY_FLAG_SECURE;
  public static final java.lang.String DISPLAY_CATEGORY_PRESENTATION;
}
public interface android.hardware.display.DisplayManager$DisplayListener
{
  public abstract void onDisplayAdded(int);
  public abstract void onDisplayChanged(int);
  public abstract void onDisplayRemoved(int);
}
public final class android.hardware.display.VirtualDisplay
  extends java.lang.Object
{
  public void release();
  public void resize(int, int, int);
  public void setSurface(android.view.Surface);
  public android.view.Display getDisplay();
  public android.view.Surface getSurface();
  public java.lang.String toString();
}
public abstract class android.hardware.display.VirtualDisplay$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onPaused();
  public void onResumed();
  public void onStopped();
}
public class android.hardware.fingerprint.FingerprintManager
  extends java.lang.Object
{
  public boolean hasEnrolledFingerprints();
  public boolean isHardwareDetected();
  public void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$AuthenticationCallback, android.os.Handler);
  public static final int FINGERPRINT_ACQUIRED_GOOD;
  public static final int FINGERPRINT_ACQUIRED_IMAGER_DIRTY;
  public static final int FINGERPRINT_ACQUIRED_INSUFFICIENT;
  public static final int FINGERPRINT_ACQUIRED_PARTIAL;
  public static final int FINGERPRINT_ACQUIRED_TOO_FAST;
  public static final int FINGERPRINT_ACQUIRED_TOO_SLOW;
  public static final int FINGERPRINT_ERROR_CANCELED;
  public static final int FINGERPRINT_ERROR_HW_UNAVAILABLE;
  public static final int FINGERPRINT_ERROR_LOCKOUT;
  public static final int FINGERPRINT_ERROR_NO_SPACE;
  public static final int FINGERPRINT_ERROR_TIMEOUT;
  public static final int FINGERPRINT_ERROR_UNABLE_TO_PROCESS;
}
public abstract class android.hardware.fingerprint.FingerprintManager$AuthenticationCallback
  extends java.lang.Object
{
  public void <init>();
  public void onAuthenticationError(int, java.lang.CharSequence);
  public void onAuthenticationFailed();
  public void onAuthenticationHelp(int, java.lang.CharSequence);
  public void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult);
}
public class android.hardware.fingerprint.FingerprintManager$AuthenticationResult
  extends java.lang.Object
{
  public android.hardware.fingerprint.FingerprintManager$CryptoObject getCryptoObject();
}
public final class android.hardware.fingerprint.FingerprintManager$CryptoObject
  extends java.lang.Object
{
  public void <init>(java.security.Signature);
  public void <init>(javax.crypto.Cipher);
  public void <init>(javax.crypto.Mac);
  public java.security.Signature getSignature();
  public javax.crypto.Cipher getCipher();
  public javax.crypto.Mac getMac();
}
public final class android.hardware.input.InputManager
  extends java.lang.Object
{
  public void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener, android.os.Handler);
  public void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener);
  public android.view.InputDevice getInputDevice(int);
  public int[] getInputDeviceIds();
  public static final java.lang.String ACTION_QUERY_KEYBOARD_LAYOUTS;
  public static final java.lang.String META_DATA_KEYBOARD_LAYOUTS;
}
public interface android.hardware.input.InputManager$InputDeviceListener
{
  public abstract void onInputDeviceAdded(int);
  public abstract void onInputDeviceChanged(int);
  public abstract void onInputDeviceRemoved(int);
}
public class android.hardware.usb.UsbAccessory
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getDescription();
  public java.lang.String getManufacturer();
  public java.lang.String getModel();
  public java.lang.String getSerial();
  public java.lang.String getUri();
  public java.lang.String getVersion();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.hardware.usb.UsbConfiguration
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean isRemoteWakeup();
  public boolean isSelfPowered();
  public int describeContents();
  public int getId();
  public int getInterfaceCount();
  public int getMaxPower();
  public void writeToParcel(android.os.Parcel, int);
  public android.hardware.usb.UsbInterface getInterface(int);
  public java.lang.String getName();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.hardware.usb.UsbConstants
  extends java.lang.Object
{
  public void <init>();
  public static final int USB_CLASS_APP_SPEC;
  public static final int USB_CLASS_AUDIO;
  public static final int USB_CLASS_CDC_DATA;
  public static final int USB_CLASS_COMM;
  public static final int USB_CLASS_CONTENT_SEC;
  public static final int USB_CLASS_CSCID;
  public static final int USB_CLASS_HID;
  public static final int USB_CLASS_HUB;
  public static final int USB_CLASS_MASS_STORAGE;
  public static final int USB_CLASS_MISC;
  public static final int USB_CLASS_PER_INTERFACE;
  public static final int USB_CLASS_PHYSICA;
  public static final int USB_CLASS_PRINTER;
  public static final int USB_CLASS_STILL_IMAGE;
  public static final int USB_CLASS_VENDOR_SPEC;
  public static final int USB_CLASS_VIDEO;
  public static final int USB_CLASS_WIRELESS_CONTROLLER;
  public static final int USB_DIR_IN;
  public static final int USB_DIR_OUT;
  public static final int USB_ENDPOINT_DIR_MASK;
  public static final int USB_ENDPOINT_NUMBER_MASK;
  public static final int USB_ENDPOINT_XFERTYPE_MASK;
  public static final int USB_ENDPOINT_XFER_BULK;
  public static final int USB_ENDPOINT_XFER_CONTROL;
  public static final int USB_ENDPOINT_XFER_INT;
  public static final int USB_ENDPOINT_XFER_ISOC;
  public static final int USB_INTERFACE_SUBCLASS_BOOT;
  public static final int USB_SUBCLASS_VENDOR_SPEC;
  public static final int USB_TYPE_CLASS;
  public static final int USB_TYPE_MASK;
  public static final int USB_TYPE_RESERVED;
  public static final int USB_TYPE_STANDARD;
  public static final int USB_TYPE_VENDOR;
}
public class android.hardware.usb.UsbDevice
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static int getDeviceId(java.lang.String);
  public static java.lang.String getDeviceName(int);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getConfigurationCount();
  public int getDeviceClass();
  public int getDeviceId();
  public int getDeviceProtocol();
  public int getDeviceSubclass();
  public int getInterfaceCount();
  public int getProductId();
  public int getVendorId();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.hardware.usb.UsbConfiguration getConfiguration(int);
  public android.hardware.usb.UsbInterface getInterface(int);
  public java.lang.String getDeviceName();
  public java.lang.String getManufacturerName();
  public java.lang.String getProductName();
  public java.lang.String getSerialNumber();
  public java.lang.String getVersion();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.hardware.usb.UsbDeviceConnection
  extends java.lang.Object
{
  public boolean claimInterface(android.hardware.usb.UsbInterface, boolean);
  public boolean releaseInterface(android.hardware.usb.UsbInterface);
  public boolean setConfiguration(android.hardware.usb.UsbConfiguration);
  public boolean setInterface(android.hardware.usb.UsbInterface);
  public int bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int);
  public int bulkTransfer(android.hardware.usb.UsbEndpoint, byte[], int, int, int);
  public int controlTransfer(int, int, int, int, byte[], int, int);
  public int controlTransfer(int, int, int, int, byte[], int, int, int);
  public int getFileDescriptor();
  public void close();
  public android.hardware.usb.UsbRequest requestWait();
  public byte[] getRawDescriptors();
  public java.lang.String getSerial();
}
public class android.hardware.usb.UsbEndpoint
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getAddress();
  public int getAttributes();
  public int getDirection();
  public int getEndpointNumber();
  public int getInterval();
  public int getMaxPacketSize();
  public int getType();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.hardware.usb.UsbInterface
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getAlternateSetting();
  public int getEndpointCount();
  public int getId();
  public int getInterfaceClass();
  public int getInterfaceProtocol();
  public int getInterfaceSubclass();
  public void writeToParcel(android.os.Parcel, int);
  public android.hardware.usb.UsbEndpoint getEndpoint(int);
  public java.lang.String getName();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.hardware.usb.UsbManager
  extends java.lang.Object
{
  public boolean hasPermission(android.hardware.usb.UsbAccessory);
  public boolean hasPermission(android.hardware.usb.UsbDevice);
  public void requestPermission(android.hardware.usb.UsbAccessory, android.app.PendingIntent);
  public void requestPermission(android.hardware.usb.UsbDevice, android.app.PendingIntent);
  public android.hardware.usb.UsbAccessory[] getAccessoryList();
  public android.hardware.usb.UsbDeviceConnection openDevice(android.hardware.usb.UsbDevice);
  public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory);
  public java.util.HashMap getDeviceList();
  public static final java.lang.String ACTION_USB_ACCESSORY_ATTACHED;
  public static final java.lang.String ACTION_USB_ACCESSORY_DETACHED;
  public static final java.lang.String ACTION_USB_DEVICE_ATTACHED;
  public static final java.lang.String ACTION_USB_DEVICE_DETACHED;
  public static final java.lang.String EXTRA_ACCESSORY;
  public static final java.lang.String EXTRA_DEVICE;
  public static final java.lang.String EXTRA_PERMISSION_GRANTED;
}
public class android.hardware.usb.UsbRequest
  extends java.lang.Object
{
  public void <init>();
  public boolean cancel();
  public boolean initialize(android.hardware.usb.UsbDeviceConnection, android.hardware.usb.UsbEndpoint);
  public boolean queue(java.nio.ByteBuffer, int);
  public void close();
  public void setClientData(java.lang.Object);
  public android.hardware.usb.UsbEndpoint getEndpoint();
  public java.lang.Object getClientData();
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.icu.lang.UCharacter
  extends java.lang.Object
  implements android.icu.lang.UCharacterEnums$ECharacterCategory, android.icu.lang.UCharacterEnums$ECharacterDirection
{
  public static final boolean isSupplementaryCodePoint(int);
  public static final boolean isSurrogatePair(char, char);
  public static final boolean isValidCodePoint(int);
  public static final int codePointAt(char[], int);
  public static final int codePointAt(char[], int, int);
  public static final int codePointAt(java.lang.CharSequence, int);
  public static final int codePointBefore(char[], int);
  public static final int codePointBefore(char[], int, int);
  public static final int codePointBefore(java.lang.CharSequence, int);
  public static final int toChars(int, char[], int);
  public static final int toCodePoint(char, char);
  public static final char[] toChars(int);
  public static final java.lang.String foldCase(java.lang.String, int);
  public static boolean hasBinaryProperty(int, int);
  public static boolean isBMP(int);
  public static boolean isBaseForm(int);
  public static boolean isDefined(int);
  public static boolean isDigit(int);
  public static boolean isHighSurrogate(char);
  public static boolean isISOControl(int);
  public static boolean isIdentifierIgnorable(int);
  public static boolean isJavaIdentifierPart(int);
  public static boolean isJavaIdentifierStart(int);
  public static boolean isLegal(int);
  public static boolean isLegal(java.lang.String);
  public static boolean isLetter(int);
  public static boolean isLetterOrDigit(int);
  public static boolean isLowSurrogate(char);
  public static boolean isLowerCase(int);
  public static boolean isMirrored(int);
  public static boolean isPrintable(int);
  public static boolean isSpaceChar(int);
  public static boolean isSupplementary(int);
  public static boolean isTitleCase(int);
  public static boolean isUAlphabetic(int);
  public static boolean isULowercase(int);
  public static boolean isUUppercase(int);
  public static boolean isUWhiteSpace(int);
  public static boolean isUnicodeIdentifierPart(int);
  public static boolean isUnicodeIdentifierStart(int);
  public static boolean isUpperCase(int);
  public static boolean isWhitespace(int);
  public static byte getDirectionality(int);
  public static char forDigit(int, int);
  public static double getUnicodeNumericValue(int);
  public static int charCount(int);
  public static int codePointCount(char[], int, int);
  public static int codePointCount(java.lang.CharSequence, int, int);
  public static int digit(int);
  public static int digit(int, int);
  public static int foldCase(int, boolean);
  public static int foldCase(int, int);
  public static int getBidiPairedBracket(int);
  public static int getCharFromExtendedName(java.lang.String);
  public static int getCharFromName(java.lang.String);
  public static int getCharFromNameAlias(java.lang.String);
  public static int getCodePoint(char);
  public static int getCodePoint(char, char);
  public static int getCombiningClass(int);
  public static int getDirection(int);
  public static int getHanNumericValue(int);
  public static int getIntPropertyMaxValue(int);
  public static int getIntPropertyMinValue(int);
  public static int getIntPropertyValue(int, int);
  public static int getMirror(int);
  public static int getNumericValue(int);
  public static int getPropertyEnum(java.lang.CharSequence);
  public static int getPropertyValueEnum(int, java.lang.CharSequence);
  public static int getType(int);
  public static int offsetByCodePoints(char[], int, int, int, int);
  public static int offsetByCodePoints(java.lang.CharSequence, int, int);
  public static int toLowerCase(int);
  public static int toTitleCase(int);
  public static int toUpperCase(int);
  public static android.icu.util.RangeValueIterator getTypeIterator();
  public static android.icu.util.ValueIterator getExtendedNameIterator();
  public static android.icu.util.ValueIterator getNameIterator();
  public static android.icu.util.VersionInfo getAge(int);
  public static android.icu.util.VersionInfo getUnicodeVersion();
  public static java.lang.String foldCase(java.lang.String, boolean);
  public static java.lang.String getExtendedName(int);
  public static java.lang.String getName(int);
  public static java.lang.String getName(java.lang.String, java.lang.String);
  public static java.lang.String getNameAlias(int);
  public static java.lang.String getPropertyName(int, int);
  public static java.lang.String getPropertyValueName(int, int, int);
  public static java.lang.String toLowerCase(android.icu.util.ULocale, java.lang.String);
  public static java.lang.String toLowerCase(java.lang.String);
  public static java.lang.String toLowerCase(java.util.Locale, java.lang.String);
  public static java.lang.String toString(int);
  public static java.lang.String toTitleCase(android.icu.util.ULocale, java.lang.String, android.icu.text.BreakIterator);
  public static java.lang.String toTitleCase(android.icu.util.ULocale, java.lang.String, android.icu.text.BreakIterator, int);
  public static java.lang.String toTitleCase(java.lang.String, android.icu.text.BreakIterator);
  public static java.lang.String toTitleCase(java.util.Locale, java.lang.String, android.icu.text.BreakIterator);
  public static java.lang.String toTitleCase(java.util.Locale, java.lang.String, android.icu.text.BreakIterator, int);
  public static java.lang.String toUpperCase(android.icu.util.ULocale, java.lang.String);
  public static java.lang.String toUpperCase(java.lang.String);
  public static java.lang.String toUpperCase(java.util.Locale, java.lang.String);
  public static final char MAX_HIGH_SURROGATE;
  public static final char MAX_LOW_SURROGATE;
  public static final char MAX_SURROGATE;
  public static final char MIN_HIGH_SURROGATE;
  public static final char MIN_LOW_SURROGATE;
  public static final char MIN_SURROGATE;
  public static final double NO_NUMERIC_VALUE;
  public static final int FOLD_CASE_DEFAULT;
  public static final int FOLD_CASE_EXCLUDE_SPECIAL_I;
  public static final int MAX_CODE_POINT;
  public static final int MAX_RADIX;
  public static final int MAX_VALUE;
  public static final int MIN_CODE_POINT;
  public static final int MIN_RADIX;
  public static final int MIN_SUPPLEMENTARY_CODE_POINT;
  public static final int MIN_VALUE;
  public static final int REPLACEMENT_CHAR;
  public static final int SUPPLEMENTARY_MIN_VALUE;
  public static final int TITLECASE_NO_BREAK_ADJUSTMENT;
  public static final int TITLECASE_NO_LOWERCASE;
}
public interface android.icu.lang.UCharacter$BidiPairedBracketType
{
  public static final int CLOSE;
  public static final int NONE;
  public static final int OPEN;
}
public interface android.icu.lang.UCharacter$DecompositionType
{
  public static final int CANONICAL;
  public static final int CIRCLE;
  public static final int COMPAT;
  public static final int FINAL;
  public static final int FONT;
  public static final int FRACTION;
  public static final int INITIAL;
  public static final int ISOLATED;
  public static final int MEDIAL;
  public static final int NARROW;
  public static final int NOBREAK;
  public static final int NONE;
  public static final int SMALL;
  public static final int SQUARE;
  public static final int SUB;
  public static final int SUPER;
  public static final int VERTICAL;
  public static final int WIDE;
}
public interface android.icu.lang.UCharacter$EastAsianWidth
{
  public static final int AMBIGUOUS;
  public static final int FULLWIDTH;
  public static final int HALFWIDTH;
  public static final int NARROW;
  public static final int NEUTRAL;
  public static final int WIDE;
}
public interface android.icu.lang.UCharacter$GraphemeClusterBreak
{
  public static final int CONTROL;
  public static final int CR;
  public static final int EXTEND;
  public static final int L;
  public static final int LF;
  public static final int LV;
  public static final int LVT;
  public static final int OTHER;
  public static final int PREPEND;
  public static final int REGIONAL_INDICATOR;
  public static final int SPACING_MARK;
  public static final int T;
  public static final int V;
}
public interface android.icu.lang.UCharacter$HangulSyllableType
{
  public static final int LEADING_JAMO;
  public static final int LVT_SYLLABLE;
  public static final int LV_SYLLABLE;
  public static final int NOT_APPLICABLE;
  public static final int TRAILING_JAMO;
  public static final int VOWEL_JAMO;
}
public interface android.icu.lang.UCharacter$JoiningGroup
{
  public static final int AIN;
  public static final int ALAPH;
  public static final int ALEF;
  public static final int BEH;
  public static final int BETH;
  public static final int BURUSHASKI_YEH_BARREE;
  public static final int DAL;
  public static final int DALATH_RISH;
  public static final int E;
  public static final int FARSI_YEH;
  public static final int FE;
  public static final int FEH;
  public static final int FINAL_SEMKATH;
  public static final int GAF;
  public static final int GAMAL;
  public static final int HAH;
  public static final int HAMZA_ON_HEH_GOAL;
  public static final int HE;
  public static final int HEH;
  public static final int HEH_GOAL;
  public static final int HETH;
  public static final int KAF;
  public static final int KAPH;
  public static final int KHAPH;
  public static final int KNOTTED_HEH;
  public static final int LAM;
  public static final int LAMADH;
  public static final int MANICHAEAN_ALEPH;
  public static final int MANICHAEAN_AYIN;
  public static final int MANICHAEAN_BETH;
  public static final int MANICHAEAN_DALETH;
  public static final int MANICHAEAN_DHAMEDH;
  public static final int MANICHAEAN_FIVE;
  public static final int MANICHAEAN_GIMEL;
  public static final int MANICHAEAN_HETH;
  public static final int MANICHAEAN_HUNDRED;
  public static final int MANICHAEAN_KAPH;
  public static final int MANICHAEAN_LAMEDH;
  public static final int MANICHAEAN_MEM;
  public static final int MANICHAEAN_NUN;
  public static final int MANICHAEAN_ONE;
  public static final int MANICHAEAN_PE;
  public static final int MANICHAEAN_QOPH;
  public static final int MANICHAEAN_RESH;
  public static final int MANICHAEAN_SADHE;
  public static final int MANICHAEAN_SAMEKH;
  public static final int MANICHAEAN_TAW;
  public static final int MANICHAEAN_TEN;
  public static final int MANICHAEAN_TETH;
  public static final int MANICHAEAN_THAMEDH;
  public static final int MANICHAEAN_TWENTY;
  public static final int MANICHAEAN_WAW;
  public static final int MANICHAEAN_YODH;
  public static final int MANICHAEAN_ZAYIN;
  public static final int MEEM;
  public static final int MIM;
  public static final int NOON;
  public static final int NO_JOINING_GROUP;
  public static final int NUN;
  public static final int NYA;
  public static final int PE;
  public static final int QAF;
  public static final int QAPH;
  public static final int REH;
  public static final int REVERSED_PE;
  public static final int ROHINGYA_YEH;
  public static final int SAD;
  public static final int SADHE;
  public static final int SEEN;
  public static final int SEMKATH;
  public static final int SHIN;
  public static final int STRAIGHT_WAW;
  public static final int SWASH_KAF;
  public static final int SYRIAC_WAW;
  public static final int TAH;
  public static final int TAW;
  public static final int TEH_MARBUTA;
  public static final int TEH_MARBUTA_GOAL;
  public static final int TETH;
  public static final int WAW;
  public static final int YEH;
  public static final int YEH_BARREE;
  public static final int YEH_WITH_TAIL;
  public static final int YUDH;
  public static final int YUDH_HE;
  public static final int ZAIN;
  public static final int ZHAIN;
}
public interface android.icu.lang.UCharacter$JoiningType
{
  public static final int DUAL_JOINING;
  public static final int JOIN_CAUSING;
  public static final int LEFT_JOINING;
  public static final int NON_JOINING;
  public static final int RIGHT_JOINING;
  public static final int TRANSPARENT;
}
public interface android.icu.lang.UCharacter$LineBreak
{
  public static final int ALPHABETIC;
  public static final int AMBIGUOUS;
  public static final int BREAK_AFTER;
  public static final int BREAK_BEFORE;
  public static final int BREAK_BOTH;
  public static final int BREAK_SYMBOLS;
  public static final int CARRIAGE_RETURN;
  public static final int CLOSE_PARENTHESIS;
  public static final int CLOSE_PUNCTUATION;
  public static final int COMBINING_MARK;
  public static final int COMPLEX_CONTEXT;
  public static final int CONDITIONAL_JAPANESE_STARTER;
  public static final int CONTINGENT_BREAK;
  public static final int EXCLAMATION;
  public static final int GLUE;
  public static final int H2;
  public static final int H3;
  public static final int HEBREW_LETTER;
  public static final int HYPHEN;
  public static final int IDEOGRAPHIC;
  public static final int INFIX_NUMERIC;
  public static final int INSEPARABLE;
  public static final int INSEPERABLE;
  public static final int JL;
  public static final int JT;
  public static final int JV;
  public static final int LINE_FEED;
  public static final int MANDATORY_BREAK;
  public static final int NEXT_LINE;
  public static final int NONSTARTER;
  public static final int NUMERIC;
  public static final int OPEN_PUNCTUATION;
  public static final int POSTFIX_NUMERIC;
  public static final int PREFIX_NUMERIC;
  public static final int QUOTATION;
  public static final int REGIONAL_INDICATOR;
  public static final int SPACE;
  public static final int SURROGATE;
  public static final int UNKNOWN;
  public static final int WORD_JOINER;
  public static final int ZWSPACE;
}
public interface android.icu.lang.UCharacter$NumericType
{
  public static final int DECIMAL;
  public static final int DIGIT;
  public static final int NONE;
  public static final int NUMERIC;
}
public interface android.icu.lang.UCharacter$SentenceBreak
{
  public static final int ATERM;
  public static final int CLOSE;
  public static final int CR;
  public static final int EXTEND;
  public static final int FORMAT;
  public static final int LF;
  public static final int LOWER;
  public static final int NUMERIC;
  public static final int OLETTER;
  public static final int OTHER;
  public static final int SCONTINUE;
  public static final int SEP;
  public static final int SP;
  public static final int STERM;
  public static final int UPPER;
}
public final class android.icu.lang.UCharacter$UnicodeBlock
  extends java.lang.Character$Subset
{
  public static final android.icu.lang.UCharacter$UnicodeBlock forName(java.lang.String);
  public static android.icu.lang.UCharacter$UnicodeBlock getInstance(int);
  public static android.icu.lang.UCharacter$UnicodeBlock of(int);
  public int getID();
  public static final int AEGEAN_NUMBERS_ID;
  public static final int AHOM_ID;
  public static final int ALCHEMICAL_SYMBOLS_ID;
  public static final int ALPHABETIC_PRESENTATION_FORMS_ID;
  public static final int ANATOLIAN_HIEROGLYPHS_ID;
  public static final int ANCIENT_GREEK_MUSICAL_NOTATION_ID;
  public static final int ANCIENT_GREEK_NUMBERS_ID;
  public static final int ANCIENT_SYMBOLS_ID;
  public static final int ARABIC_EXTENDED_A_ID;
  public static final int ARABIC_ID;
  public static final int ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS_ID;
  public static final int ARABIC_PRESENTATION_FORMS_A_ID;
  public static final int ARABIC_PRESENTATION_FORMS_B_ID;
  public static final int ARABIC_SUPPLEMENT_ID;
  public static final int ARMENIAN_ID;
  public static final int ARROWS_ID;
  public static final int AVESTAN_ID;
  public static final int BALINESE_ID;
  public static final int BAMUM_ID;
  public static final int BAMUM_SUPPLEMENT_ID;
  public static final int BASIC_LATIN_ID;
  public static final int BASSA_VAH_ID;
  public static final int BATAK_ID;
  public static final int BENGALI_ID;
  public static final int BLOCK_ELEMENTS_ID;
  public static final int BOPOMOFO_EXTENDED_ID;
  public static final int BOPOMOFO_ID;
  public static final int BOX_DRAWING_ID;
  public static final int BRAHMI_ID;
  public static final int BRAILLE_PATTERNS_ID;
  public static final int BUGINESE_ID;
  public static final int BUHID_ID;
  public static final int BYZANTINE_MUSICAL_SYMBOLS_ID;
  public static final int CARIAN_ID;
  public static final int CAUCASIAN_ALBANIAN_ID;
  public static final int CHAKMA_ID;
  public static final int CHAM_ID;
  public static final int CHEROKEE_ID;
  public static final int CHEROKEE_SUPPLEMENT_ID;
  public static final int CJK_COMPATIBILITY_FORMS_ID;
  public static final int CJK_COMPATIBILITY_ID;
  public static final int CJK_COMPATIBILITY_IDEOGRAPHS_ID;
  public static final int CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT_ID;
  public static final int CJK_RADICALS_SUPPLEMENT_ID;
  public static final int CJK_STROKES_ID;
  public static final int CJK_SYMBOLS_AND_PUNCTUATION_ID;
  public static final int CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A_ID;
  public static final int CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B_ID;
  public static final int CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C_ID;
  public static final int CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D_ID;
  public static final int CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E_ID;
  public static final int CJK_UNIFIED_IDEOGRAPHS_ID;
  public static final int COMBINING_DIACRITICAL_MARKS_EXTENDED_ID;
  public static final int COMBINING_DIACRITICAL_MARKS_ID;
  public static final int COMBINING_DIACRITICAL_MARKS_SUPPLEMENT_ID;
  public static final int COMBINING_HALF_MARKS_ID;
  public static final int COMBINING_MARKS_FOR_SYMBOLS_ID;
  public static final int COMMON_INDIC_NUMBER_FORMS_ID;
  public static final int CONTROL_PICTURES_ID;
  public static final int COPTIC_EPACT_NUMBERS_ID;
  public static final int COPTIC_ID;
  public static final int COUNTING_ROD_NUMERALS_ID;
  public static final int CUNEIFORM_ID;
  public static final int CUNEIFORM_NUMBERS_AND_PUNCTUATION_ID;
  public static final int CURRENCY_SYMBOLS_ID;
  public static final int CYPRIOT_SYLLABARY_ID;
  public static final int CYRILLIC_EXTENDED_A_ID;
  public static final int CYRILLIC_EXTENDED_B_ID;
  public static final int CYRILLIC_ID;
  public static final int CYRILLIC_SUPPLEMENTARY_ID;
  public static final int CYRILLIC_SUPPLEMENT_ID;
  public static final int DESERET_ID;
  public static final int DEVANAGARI_EXTENDED_ID;
  public static final int DEVANAGARI_ID;
  public static final int DINGBATS_ID;
  public static final int DOMINO_TILES_ID;
  public static final int DUPLOYAN_ID;
  public static final int EARLY_DYNASTIC_CUNEIFORM_ID;
  public static final int EGYPTIAN_HIEROGLYPHS_ID;
  public static final int ELBASAN_ID;
  public static final int EMOTICONS_ID;
  public static final int ENCLOSED_ALPHANUMERICS_ID;
  public static final int ENCLOSED_ALPHANUMERIC_SUPPLEMENT_ID;
  public static final int ENCLOSED_CJK_LETTERS_AND_MONTHS_ID;
  public static final int ENCLOSED_IDEOGRAPHIC_SUPPLEMENT_ID;
  public static final int ETHIOPIC_EXTENDED_A_ID;
  public static final int ETHIOPIC_EXTENDED_ID;
  public static final int ETHIOPIC_ID;
  public static final int ETHIOPIC_SUPPLEMENT_ID;
  public static final int GENERAL_PUNCTUATION_ID;
  public static final int GEOMETRIC_SHAPES_EXTENDED_ID;
  public static final int GEOMETRIC_SHAPES_ID;
  public static final int GEORGIAN_ID;
  public static final int GEORGIAN_SUPPLEMENT_ID;
  public static final int GLAGOLITIC_ID;
  public static final int GOTHIC_ID;
  public static final int GRANTHA_ID;
  public static final int GREEK_EXTENDED_ID;
  public static final int GREEK_ID;
  public static final int GUJARATI_ID;
  public static final int GURMUKHI_ID;
  public static final int HALFWIDTH_AND_FULLWIDTH_FORMS_ID;
  public static final int HANGUL_COMPATIBILITY_JAMO_ID;
  public static final int HANGUL_JAMO_EXTENDED_A_ID;
  public static final int HANGUL_JAMO_EXTENDED_B_ID;
  public static final int HANGUL_JAMO_ID;
  public static final int HANGUL_SYLLABLES_ID;
  public static final int HANUNOO_ID;
  public static final int HATRAN_ID;
  public static final int HEBREW_ID;
  public static final int HIGH_PRIVATE_USE_SURROGATES_ID;
  public static final int HIGH_SURROGATES_ID;
  public static final int HIRAGANA_ID;
  public static final int IDEOGRAPHIC_DESCRIPTION_CHARACTERS_ID;
  public static final int IMPERIAL_ARAMAIC_ID;
  public static final int INSCRIPTIONAL_PAHLAVI_ID;
  public static final int INSCRIPTIONAL_PARTHIAN_ID;
  public static final int INVALID_CODE_ID;
  public static final int IPA_EXTENSIONS_ID;
  public static final int JAVANESE_ID;
  public static final int KAITHI_ID;
  public static final int KANA_SUPPLEMENT_ID;
  public static final int KANBUN_ID;
  public static final int KANGXI_RADICALS_ID;
  public static final int KANNADA_ID;
  public static final int KATAKANA_ID;
  public static final int KATAKANA_PHONETIC_EXTENSIONS_ID;
  public static final int KAYAH_LI_ID;
  public static final int KHAROSHTHI_ID;
  public static final int KHMER_ID;
  public static final int KHMER_SYMBOLS_ID;
  public static final int KHOJKI_ID;
  public static final int KHUDAWADI_ID;
  public static final int LAO_ID;
  public static final int LATIN_1_SUPPLEMENT_ID;
  public static final int LATIN_EXTENDED_ADDITIONAL_ID;
  public static final int LATIN_EXTENDED_A_ID;
  public static final int LATIN_EXTENDED_B_ID;
  public static final int LATIN_EXTENDED_C_ID;
  public static final int LATIN_EXTENDED_D_ID;
  public static final int LATIN_EXTENDED_E_ID;
  public static final int LEPCHA_ID;
  public static final int LETTERLIKE_SYMBOLS_ID;
  public static final int LIMBU_ID;
  public static final int LINEAR_A_ID;
  public static final int LINEAR_B_IDEOGRAMS_ID;
  public static final int LINEAR_B_SYLLABARY_ID;
  public static final int LISU_ID;
  public static final int LOW_SURROGATES_ID;
  public static final int LYCIAN_ID;
  public static final int LYDIAN_ID;
  public static final int MAHAJANI_ID;
  public static final int MAHJONG_TILES_ID;
  public static final int MALAYALAM_ID;
  public static final int MANDAIC_ID;
  public static final int MANICHAEAN_ID;
  public static final int MATHEMATICAL_ALPHANUMERIC_SYMBOLS_ID;
  public static final int MATHEMATICAL_OPERATORS_ID;
  public static final int MEETEI_MAYEK_EXTENSIONS_ID;
  public static final int MEETEI_MAYEK_ID;
  public static final int MENDE_KIKAKUI_ID;
  public static final int MEROITIC_CURSIVE_ID;
  public static final int MEROITIC_HIEROGLYPHS_ID;
  public static final int MIAO_ID;
  public static final int MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A_ID;
  public static final int MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B_ID;
  public static final int MISCELLANEOUS_SYMBOLS_AND_ARROWS_ID;
  public static final int MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS_ID;
  public static final int MISCELLANEOUS_SYMBOLS_ID;
  public static final int MISCELLANEOUS_TECHNICAL_ID;
  public static final int MODIFIER_TONE_LETTERS_ID;
  public static final int MODI_ID;
  public static final int MONGOLIAN_ID;
  public static final int MRO_ID;
  public static final int MULTANI_ID;
  public static final int MUSICAL_SYMBOLS_ID;
  public static final int MYANMAR_EXTENDED_A_ID;
  public static final int MYANMAR_EXTENDED_B_ID;
  public static final int MYANMAR_ID;
  public static final int NABATAEAN_ID;
  public static final int NEW_TAI_LUE_ID;
  public static final int NKO_ID;
  public static final int NUMBER_FORMS_ID;
  public static final int OGHAM_ID;
  public static final int OLD_HUNGARIAN_ID;
  public static final int OLD_ITALIC_ID;
  public static final int OLD_NORTH_ARABIAN_ID;
  public static final int OLD_PERMIC_ID;
  public static final int OLD_PERSIAN_ID;
  public static final int OLD_SOUTH_ARABIAN_ID;
  public static final int OLD_TURKIC_ID;
  public static final int OL_CHIKI_ID;
  public static final int OPTICAL_CHARACTER_RECOGNITION_ID;
  public static final int ORIYA_ID;
  public static final int ORNAMENTAL_DINGBATS_ID;
  public static final int OSMANYA_ID;
  public static final int PAHAWH_HMONG_ID;
  public static final int PALMYRENE_ID;
  public static final int PAU_CIN_HAU_ID;
  public static final int PHAGS_PA_ID;
  public static final int PHAISTOS_DISC_ID;
  public static final int PHOENICIAN_ID;
  public static final int PHONETIC_EXTENSIONS_ID;
  public static final int PHONETIC_EXTENSIONS_SUPPLEMENT_ID;
  public static final int PLAYING_CARDS_ID;
  public static final int PRIVATE_USE_AREA_ID;
  public static final int PRIVATE_USE_ID;
  public static final int PSALTER_PAHLAVI_ID;
  public static final int REJANG_ID;
  public static final int RUMI_NUMERAL_SYMBOLS_ID;
  public static final int RUNIC_ID;
  public static final int SAMARITAN_ID;
  public static final int SAURASHTRA_ID;
  public static final int SHARADA_ID;
  public static final int SHAVIAN_ID;
  public static final int SHORTHAND_FORMAT_CONTROLS_ID;
  public static final int SIDDHAM_ID;
  public static final int SINHALA_ARCHAIC_NUMBERS_ID;
  public static final int SINHALA_ID;
  public static final int SMALL_FORM_VARIANTS_ID;
  public static final int SORA_SOMPENG_ID;
  public static final int SPACING_MODIFIER_LETTERS_ID;
  public static final int SPECIALS_ID;
  public static final int SUNDANESE_ID;
  public static final int SUNDANESE_SUPPLEMENT_ID;
  public static final int SUPERSCRIPTS_AND_SUBSCRIPTS_ID;
  public static final int SUPPLEMENTAL_ARROWS_A_ID;
  public static final int SUPPLEMENTAL_ARROWS_B_ID;
  public static final int SUPPLEMENTAL_ARROWS_C_ID;
  public static final int SUPPLEMENTAL_MATHEMATICAL_OPERATORS_ID;
  public static final int SUPPLEMENTAL_PUNCTUATION_ID;
  public static final int SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS_ID;
  public static final int SUPPLEMENTARY_PRIVATE_USE_AREA_A_ID;
  public static final int SUPPLEMENTARY_PRIVATE_USE_AREA_B_ID;
  public static final int SUTTON_SIGNWRITING_ID;
  public static final int SYLOTI_NAGRI_ID;
  public static final int SYRIAC_ID;
  public static final int TAGALOG_ID;
  public static final int TAGBANWA_ID;
  public static final int TAGS_ID;
  public static final int TAI_LE_ID;
  public static final int TAI_THAM_ID;
  public static final int TAI_VIET_ID;
  public static final int TAI_XUAN_JING_SYMBOLS_ID;
  public static final int TAKRI_ID;
  public static final int TAMIL_ID;
  public static final int TELUGU_ID;
  public static final int THAANA_ID;
  public static final int THAI_ID;
  public static final int TIBETAN_ID;
  public static final int TIFINAGH_ID;
  public static final int TIRHUTA_ID;
  public static final int TRANSPORT_AND_MAP_SYMBOLS_ID;
  public static final int UGARITIC_ID;
  public static final int UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED_ID;
  public static final int UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_ID;
  public static final int VAI_ID;
  public static final int VARIATION_SELECTORS_ID;
  public static final int VARIATION_SELECTORS_SUPPLEMENT_ID;
  public static final int VEDIC_EXTENSIONS_ID;
  public static final int VERTICAL_FORMS_ID;
  public static final int WARANG_CITI_ID;
  public static final int YIJING_HEXAGRAM_SYMBOLS_ID;
  public static final int YI_RADICALS_ID;
  public static final int YI_SYLLABLES_ID;
  public static final android.icu.lang.UCharacter$UnicodeBlock AEGEAN_NUMBERS;
  public static final android.icu.lang.UCharacter$UnicodeBlock AHOM;
  public static final android.icu.lang.UCharacter$UnicodeBlock ALCHEMICAL_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ALPHABETIC_PRESENTATION_FORMS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ANATOLIAN_HIEROGLYPHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ANCIENT_GREEK_MUSICAL_NOTATION;
  public static final android.icu.lang.UCharacter$UnicodeBlock ANCIENT_GREEK_NUMBERS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ANCIENT_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARABIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARABIC_EXTENDED_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARABIC_PRESENTATION_FORMS_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARABIC_PRESENTATION_FORMS_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARABIC_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARMENIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock ARROWS;
  public static final android.icu.lang.UCharacter$UnicodeBlock AVESTAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock BALINESE;
  public static final android.icu.lang.UCharacter$UnicodeBlock BAMUM;
  public static final android.icu.lang.UCharacter$UnicodeBlock BAMUM_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock BASIC_LATIN;
  public static final android.icu.lang.UCharacter$UnicodeBlock BASSA_VAH;
  public static final android.icu.lang.UCharacter$UnicodeBlock BATAK;
  public static final android.icu.lang.UCharacter$UnicodeBlock BENGALI;
  public static final android.icu.lang.UCharacter$UnicodeBlock BLOCK_ELEMENTS;
  public static final android.icu.lang.UCharacter$UnicodeBlock BOPOMOFO;
  public static final android.icu.lang.UCharacter$UnicodeBlock BOPOMOFO_EXTENDED;
  public static final android.icu.lang.UCharacter$UnicodeBlock BOX_DRAWING;
  public static final android.icu.lang.UCharacter$UnicodeBlock BRAHMI;
  public static final android.icu.lang.UCharacter$UnicodeBlock BRAILLE_PATTERNS;
  public static final android.icu.lang.UCharacter$UnicodeBlock BUGINESE;
  public static final android.icu.lang.UCharacter$UnicodeBlock BUHID;
  public static final android.icu.lang.UCharacter$UnicodeBlock BYZANTINE_MUSICAL_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock CARIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock CAUCASIAN_ALBANIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock CHAKMA;
  public static final android.icu.lang.UCharacter$UnicodeBlock CHAM;
  public static final android.icu.lang.UCharacter$UnicodeBlock CHEROKEE;
  public static final android.icu.lang.UCharacter$UnicodeBlock CHEROKEE_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_COMPATIBILITY;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_COMPATIBILITY_FORMS;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_RADICALS_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_STROKES;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;
  public static final android.icu.lang.UCharacter$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E;
  public static final android.icu.lang.UCharacter$UnicodeBlock COMBINING_DIACRITICAL_MARKS;
  public static final android.icu.lang.UCharacter$UnicodeBlock COMBINING_DIACRITICAL_MARKS_EXTENDED;
  public static final android.icu.lang.UCharacter$UnicodeBlock COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock COMBINING_HALF_MARKS;
  public static final android.icu.lang.UCharacter$UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock COMMON_INDIC_NUMBER_FORMS;
  public static final android.icu.lang.UCharacter$UnicodeBlock CONTROL_PICTURES;
  public static final android.icu.lang.UCharacter$UnicodeBlock COPTIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock COPTIC_EPACT_NUMBERS;
  public static final android.icu.lang.UCharacter$UnicodeBlock COUNTING_ROD_NUMERALS;
  public static final android.icu.lang.UCharacter$UnicodeBlock CUNEIFORM;
  public static final android.icu.lang.UCharacter$UnicodeBlock CUNEIFORM_NUMBERS_AND_PUNCTUATION;
  public static final android.icu.lang.UCharacter$UnicodeBlock CURRENCY_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock CYPRIOT_SYLLABARY;
  public static final android.icu.lang.UCharacter$UnicodeBlock CYRILLIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock CYRILLIC_EXTENDED_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock CYRILLIC_EXTENDED_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock CYRILLIC_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock CYRILLIC_SUPPLEMENTARY;
  public static final android.icu.lang.UCharacter$UnicodeBlock DESERET;
  public static final android.icu.lang.UCharacter$UnicodeBlock DEVANAGARI;
  public static final android.icu.lang.UCharacter$UnicodeBlock DEVANAGARI_EXTENDED;
  public static final android.icu.lang.UCharacter$UnicodeBlock DINGBATS;
  public static final android.icu.lang.UCharacter$UnicodeBlock DOMINO_TILES;
  public static final android.icu.lang.UCharacter$UnicodeBlock DUPLOYAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock EARLY_DYNASTIC_CUNEIFORM;
  public static final android.icu.lang.UCharacter$UnicodeBlock EGYPTIAN_HIEROGLYPHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ELBASAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock EMOTICONS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ENCLOSED_ALPHANUMERICS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ENCLOSED_ALPHANUMERIC_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock ETHIOPIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock ETHIOPIC_EXTENDED;
  public static final android.icu.lang.UCharacter$UnicodeBlock ETHIOPIC_EXTENDED_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock ETHIOPIC_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock GENERAL_PUNCTUATION;
  public static final android.icu.lang.UCharacter$UnicodeBlock GEOMETRIC_SHAPES;
  public static final android.icu.lang.UCharacter$UnicodeBlock GEOMETRIC_SHAPES_EXTENDED;
  public static final android.icu.lang.UCharacter$UnicodeBlock GEORGIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock GEORGIAN_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock GLAGOLITIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock GOTHIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock GRANTHA;
  public static final android.icu.lang.UCharacter$UnicodeBlock GREEK;
  public static final android.icu.lang.UCharacter$UnicodeBlock GREEK_EXTENDED;
  public static final android.icu.lang.UCharacter$UnicodeBlock GUJARATI;
  public static final android.icu.lang.UCharacter$UnicodeBlock GURMUKHI;
  public static final android.icu.lang.UCharacter$UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS;
  public static final android.icu.lang.UCharacter$UnicodeBlock HANGUL_COMPATIBILITY_JAMO;
  public static final android.icu.lang.UCharacter$UnicodeBlock HANGUL_JAMO;
  public static final android.icu.lang.UCharacter$UnicodeBlock HANGUL_JAMO_EXTENDED_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock HANGUL_JAMO_EXTENDED_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock HANGUL_SYLLABLES;
  public static final android.icu.lang.UCharacter$UnicodeBlock HANUNOO;
  public static final android.icu.lang.UCharacter$UnicodeBlock HATRAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock HEBREW;
  public static final android.icu.lang.UCharacter$UnicodeBlock HIGH_PRIVATE_USE_SURROGATES;
  public static final android.icu.lang.UCharacter$UnicodeBlock HIGH_SURROGATES;
  public static final android.icu.lang.UCharacter$UnicodeBlock HIRAGANA;
  public static final android.icu.lang.UCharacter$UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS;
  public static final android.icu.lang.UCharacter$UnicodeBlock IMPERIAL_ARAMAIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock INSCRIPTIONAL_PAHLAVI;
  public static final android.icu.lang.UCharacter$UnicodeBlock INSCRIPTIONAL_PARTHIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock INVALID_CODE;
  public static final android.icu.lang.UCharacter$UnicodeBlock IPA_EXTENSIONS;
  public static final android.icu.lang.UCharacter$UnicodeBlock JAVANESE;
  public static final android.icu.lang.UCharacter$UnicodeBlock KAITHI;
  public static final android.icu.lang.UCharacter$UnicodeBlock KANA_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock KANBUN;
  public static final android.icu.lang.UCharacter$UnicodeBlock KANGXI_RADICALS;
  public static final android.icu.lang.UCharacter$UnicodeBlock KANNADA;
  public static final android.icu.lang.UCharacter$UnicodeBlock KATAKANA;
  public static final android.icu.lang.UCharacter$UnicodeBlock KATAKANA_PHONETIC_EXTENSIONS;
  public static final android.icu.lang.UCharacter$UnicodeBlock KAYAH_LI;
  public static final android.icu.lang.UCharacter$UnicodeBlock KHAROSHTHI;
  public static final android.icu.lang.UCharacter$UnicodeBlock KHMER;
  public static final android.icu.lang.UCharacter$UnicodeBlock KHMER_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock KHOJKI;
  public static final android.icu.lang.UCharacter$UnicodeBlock KHUDAWADI;
  public static final android.icu.lang.UCharacter$UnicodeBlock LAO;
  public static final android.icu.lang.UCharacter$UnicodeBlock LATIN_1_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock LATIN_EXTENDED_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock LATIN_EXTENDED_ADDITIONAL;
  public static final android.icu.lang.UCharacter$UnicodeBlock LATIN_EXTENDED_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock LATIN_EXTENDED_C;
  public static final android.icu.lang.UCharacter$UnicodeBlock LATIN_EXTENDED_D;
  public static final android.icu.lang.UCharacter$UnicodeBlock LATIN_EXTENDED_E;
  public static final android.icu.lang.UCharacter$UnicodeBlock LEPCHA;
  public static final android.icu.lang.UCharacter$UnicodeBlock LETTERLIKE_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock LIMBU;
  public static final android.icu.lang.UCharacter$UnicodeBlock LINEAR_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock LINEAR_B_IDEOGRAMS;
  public static final android.icu.lang.UCharacter$UnicodeBlock LINEAR_B_SYLLABARY;
  public static final android.icu.lang.UCharacter$UnicodeBlock LISU;
  public static final android.icu.lang.UCharacter$UnicodeBlock LOW_SURROGATES;
  public static final android.icu.lang.UCharacter$UnicodeBlock LYCIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock LYDIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock MAHAJANI;
  public static final android.icu.lang.UCharacter$UnicodeBlock MAHJONG_TILES;
  public static final android.icu.lang.UCharacter$UnicodeBlock MALAYALAM;
  public static final android.icu.lang.UCharacter$UnicodeBlock MANDAIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock MANICHAEAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock MATHEMATICAL_ALPHANUMERIC_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MATHEMATICAL_OPERATORS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MEETEI_MAYEK;
  public static final android.icu.lang.UCharacter$UnicodeBlock MEETEI_MAYEK_EXTENSIONS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MENDE_KIKAKUI;
  public static final android.icu.lang.UCharacter$UnicodeBlock MEROITIC_CURSIVE;
  public static final android.icu.lang.UCharacter$UnicodeBlock MEROITIC_HIEROGLYPHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MIAO;
  public static final android.icu.lang.UCharacter$UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock MISCELLANEOUS_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_ARROWS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MISCELLANEOUS_TECHNICAL;
  public static final android.icu.lang.UCharacter$UnicodeBlock MODI;
  public static final android.icu.lang.UCharacter$UnicodeBlock MODIFIER_TONE_LETTERS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MONGOLIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock MRO;
  public static final android.icu.lang.UCharacter$UnicodeBlock MULTANI;
  public static final android.icu.lang.UCharacter$UnicodeBlock MUSICAL_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock MYANMAR;
  public static final android.icu.lang.UCharacter$UnicodeBlock MYANMAR_EXTENDED_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock MYANMAR_EXTENDED_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock NABATAEAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock NEW_TAI_LUE;
  public static final android.icu.lang.UCharacter$UnicodeBlock NKO;
  public static final android.icu.lang.UCharacter$UnicodeBlock NO_BLOCK;
  public static final android.icu.lang.UCharacter$UnicodeBlock NUMBER_FORMS;
  public static final android.icu.lang.UCharacter$UnicodeBlock OGHAM;
  public static final android.icu.lang.UCharacter$UnicodeBlock OLD_HUNGARIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock OLD_ITALIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock OLD_NORTH_ARABIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock OLD_PERMIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock OLD_PERSIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock OLD_SOUTH_ARABIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock OLD_TURKIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock OL_CHIKI;
  public static final android.icu.lang.UCharacter$UnicodeBlock OPTICAL_CHARACTER_RECOGNITION;
  public static final android.icu.lang.UCharacter$UnicodeBlock ORIYA;
  public static final android.icu.lang.UCharacter$UnicodeBlock ORNAMENTAL_DINGBATS;
  public static final android.icu.lang.UCharacter$UnicodeBlock OSMANYA;
  public static final android.icu.lang.UCharacter$UnicodeBlock PAHAWH_HMONG;
  public static final android.icu.lang.UCharacter$UnicodeBlock PALMYRENE;
  public static final android.icu.lang.UCharacter$UnicodeBlock PAU_CIN_HAU;
  public static final android.icu.lang.UCharacter$UnicodeBlock PHAGS_PA;
  public static final android.icu.lang.UCharacter$UnicodeBlock PHAISTOS_DISC;
  public static final android.icu.lang.UCharacter$UnicodeBlock PHOENICIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock PHONETIC_EXTENSIONS;
  public static final android.icu.lang.UCharacter$UnicodeBlock PHONETIC_EXTENSIONS_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock PLAYING_CARDS;
  public static final android.icu.lang.UCharacter$UnicodeBlock PRIVATE_USE;
  public static final android.icu.lang.UCharacter$UnicodeBlock PRIVATE_USE_AREA;
  public static final android.icu.lang.UCharacter$UnicodeBlock PSALTER_PAHLAVI;
  public static final android.icu.lang.UCharacter$UnicodeBlock REJANG;
  public static final android.icu.lang.UCharacter$UnicodeBlock RUMI_NUMERAL_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock RUNIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock SAMARITAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock SAURASHTRA;
  public static final android.icu.lang.UCharacter$UnicodeBlock SHARADA;
  public static final android.icu.lang.UCharacter$UnicodeBlock SHAVIAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock SHORTHAND_FORMAT_CONTROLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SIDDHAM;
  public static final android.icu.lang.UCharacter$UnicodeBlock SINHALA;
  public static final android.icu.lang.UCharacter$UnicodeBlock SINHALA_ARCHAIC_NUMBERS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SMALL_FORM_VARIANTS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SORA_SOMPENG;
  public static final android.icu.lang.UCharacter$UnicodeBlock SPACING_MODIFIER_LETTERS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SPECIALS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUNDANESE;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUNDANESE_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTAL_ARROWS_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTAL_ARROWS_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTAL_ARROWS_C;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTAL_MATHEMATICAL_OPERATORS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTAL_PUNCTUATION;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_A;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_B;
  public static final android.icu.lang.UCharacter$UnicodeBlock SUTTON_SIGNWRITING;
  public static final android.icu.lang.UCharacter$UnicodeBlock SYLOTI_NAGRI;
  public static final android.icu.lang.UCharacter$UnicodeBlock SYRIAC;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAGALOG;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAGBANWA;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAGS;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAI_LE;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAI_THAM;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAI_VIET;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAI_XUAN_JING_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAKRI;
  public static final android.icu.lang.UCharacter$UnicodeBlock TAMIL;
  public static final android.icu.lang.UCharacter$UnicodeBlock TELUGU;
  public static final android.icu.lang.UCharacter$UnicodeBlock THAANA;
  public static final android.icu.lang.UCharacter$UnicodeBlock THAI;
  public static final android.icu.lang.UCharacter$UnicodeBlock TIBETAN;
  public static final android.icu.lang.UCharacter$UnicodeBlock TIFINAGH;
  public static final android.icu.lang.UCharacter$UnicodeBlock TIRHUTA;
  public static final android.icu.lang.UCharacter$UnicodeBlock TRANSPORT_AND_MAP_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock UGARITIC;
  public static final android.icu.lang.UCharacter$UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;
  public static final android.icu.lang.UCharacter$UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;
  public static final android.icu.lang.UCharacter$UnicodeBlock VAI;
  public static final android.icu.lang.UCharacter$UnicodeBlock VARIATION_SELECTORS;
  public static final android.icu.lang.UCharacter$UnicodeBlock VARIATION_SELECTORS_SUPPLEMENT;
  public static final android.icu.lang.UCharacter$UnicodeBlock VEDIC_EXTENSIONS;
  public static final android.icu.lang.UCharacter$UnicodeBlock VERTICAL_FORMS;
  public static final android.icu.lang.UCharacter$UnicodeBlock WARANG_CITI;
  public static final android.icu.lang.UCharacter$UnicodeBlock YIJING_HEXAGRAM_SYMBOLS;
  public static final android.icu.lang.UCharacter$UnicodeBlock YI_RADICALS;
  public static final android.icu.lang.UCharacter$UnicodeBlock YI_SYLLABLES;
}
public interface android.icu.lang.UCharacter$WordBreak
{
  public static final int ALETTER;
  public static final int CR;
  public static final int DOUBLE_QUOTE;
  public static final int EXTEND;
  public static final int EXTENDNUMLET;
  public static final int FORMAT;
  public static final int HEBREW_LETTER;
  public static final int KATAKANA;
  public static final int LF;
  public static final int MIDLETTER;
  public static final int MIDNUM;
  public static final int MIDNUMLET;
  public static final int NEWLINE;
  public static final int NUMERIC;
  public static final int OTHER;
  public static final int REGIONAL_INDICATOR;
  public static final int SINGLE_QUOTE;
}
public final class android.icu.lang.UCharacterCategory
  extends java.lang.Object
  implements android.icu.lang.UCharacterEnums$ECharacterCategory
{
  public static java.lang.String toString(int);
}
public final class android.icu.lang.UCharacterDirection
  extends java.lang.Object
  implements android.icu.lang.UCharacterEnums$ECharacterDirection
{
  public static java.lang.String toString(int);
}
public class android.icu.lang.UCharacterEnums
  extends java.lang.Object
{
}
public interface android.icu.lang.UCharacterEnums$ECharacterCategory
{
  public static final byte COMBINING_SPACING_MARK;
  public static final byte CONNECTOR_PUNCTUATION;
  public static final byte CONTROL;
  public static final byte CURRENCY_SYMBOL;
  public static final byte DASH_PUNCTUATION;
  public static final byte DECIMAL_DIGIT_NUMBER;
  public static final byte ENCLOSING_MARK;
  public static final byte END_PUNCTUATION;
  public static final byte FINAL_PUNCTUATION;
  public static final byte FINAL_QUOTE_PUNCTUATION;
  public static final byte FORMAT;
  public static final byte GENERAL_OTHER_TYPES;
  public static final byte INITIAL_PUNCTUATION;
  public static final byte INITIAL_QUOTE_PUNCTUATION;
  public static final byte LETTER_NUMBER;
  public static final byte LINE_SEPARATOR;
  public static final byte LOWERCASE_LETTER;
  public static final byte MATH_SYMBOL;
  public static final byte MODIFIER_LETTER;
  public static final byte MODIFIER_SYMBOL;
  public static final byte NON_SPACING_MARK;
  public static final byte OTHER_LETTER;
  public static final byte OTHER_NUMBER;
  public static final byte OTHER_PUNCTUATION;
  public static final byte OTHER_SYMBOL;
  public static final byte PARAGRAPH_SEPARATOR;
  public static final byte PRIVATE_USE;
  public static final byte SPACE_SEPARATOR;
  public static final byte START_PUNCTUATION;
  public static final byte SURROGATE;
  public static final byte TITLECASE_LETTER;
  public static final byte UNASSIGNED;
  public static final byte UPPERCASE_LETTER;
}
public interface android.icu.lang.UCharacterEnums$ECharacterDirection
{
  public static final byte DIRECTIONALITY_ARABIC_NUMBER;
  public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL;
  public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;
  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER;
  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;
  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;
  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT;
  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
  public static final byte DIRECTIONALITY_NONSPACING_MARK;
  public static final byte DIRECTIONALITY_OTHER_NEUTRALS;
  public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR;
  public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
  public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR;
  public static final byte DIRECTIONALITY_UNDEFINED;
  public static final byte DIRECTIONALITY_WHITESPACE;
  public static final byte FIRST_STRONG_ISOLATE;
  public static final byte LEFT_TO_RIGHT_ISOLATE;
  public static final byte POP_DIRECTIONAL_ISOLATE;
  public static final byte RIGHT_TO_LEFT_ISOLATE;
  public static final int ARABIC_NUMBER;
  public static final int BLOCK_SEPARATOR;
  public static final int BOUNDARY_NEUTRAL;
  public static final int COMMON_NUMBER_SEPARATOR;
  public static final int DIR_NON_SPACING_MARK;
  public static final int EUROPEAN_NUMBER;
  public static final int EUROPEAN_NUMBER_SEPARATOR;
  public static final int EUROPEAN_NUMBER_TERMINATOR;
  public static final int LEFT_TO_RIGHT;
  public static final int LEFT_TO_RIGHT_EMBEDDING;
  public static final int LEFT_TO_RIGHT_OVERRIDE;
  public static final int OTHER_NEUTRAL;
  public static final int POP_DIRECTIONAL_FORMAT;
  public static final int RIGHT_TO_LEFT;
  public static final int RIGHT_TO_LEFT_ARABIC;
  public static final int RIGHT_TO_LEFT_EMBEDDING;
  public static final int RIGHT_TO_LEFT_OVERRIDE;
  public static final int SEGMENT_SEPARATOR;
  public static final int WHITE_SPACE_NEUTRAL;
}
public interface android.icu.lang.UProperty
{
  public static final int AGE;
  public static final int ALPHABETIC;
  public static final int ASCII_HEX_DIGIT;
  public static final int BIDI_CLASS;
  public static final int BIDI_CONTROL;
  public static final int BIDI_MIRRORED;
  public static final int BIDI_MIRRORING_GLYPH;
  public static final int BIDI_PAIRED_BRACKET;
  public static final int BIDI_PAIRED_BRACKET_TYPE;
  public static final int BINARY_START;
  public static final int BLOCK;
  public static final int CANONICAL_COMBINING_CLASS;
  public static final int CASED;
  public static final int CASE_FOLDING;
  public static final int CASE_IGNORABLE;
  public static final int CASE_SENSITIVE;
  public static final int CHANGES_WHEN_CASEFOLDED;
  public static final int CHANGES_WHEN_CASEMAPPED;
  public static final int CHANGES_WHEN_LOWERCASED;
  public static final int CHANGES_WHEN_NFKC_CASEFOLDED;
  public static final int CHANGES_WHEN_TITLECASED;
  public static final int CHANGES_WHEN_UPPERCASED;
  public static final int DASH;
  public static final int DECOMPOSITION_TYPE;
  public static final int DEFAULT_IGNORABLE_CODE_POINT;
  public static final int DEPRECATED;
  public static final int DIACRITIC;
  public static final int DOUBLE_START;
  public static final int EAST_ASIAN_WIDTH;
  public static final int EXTENDER;
  public static final int FULL_COMPOSITION_EXCLUSION;
  public static final int GENERAL_CATEGORY;
  public static final int GENERAL_CATEGORY_MASK;
  public static final int GRAPHEME_BASE;
  public static final int GRAPHEME_CLUSTER_BREAK;
  public static final int GRAPHEME_EXTEND;
  public static final int GRAPHEME_LINK;
  public static final int HANGUL_SYLLABLE_TYPE;
  public static final int HEX_DIGIT;
  public static final int HYPHEN;
  public static final int IDEOGRAPHIC;
  public static final int IDS_BINARY_OPERATOR;
  public static final int IDS_TRINARY_OPERATOR;
  public static final int ID_CONTINUE;
  public static final int ID_START;
  public static final int INT_START;
  public static final int JOINING_GROUP;
  public static final int JOINING_TYPE;
  public static final int JOIN_CONTROL;
  public static final int LEAD_CANONICAL_COMBINING_CLASS;
  public static final int LINE_BREAK;
  public static final int LOGICAL_ORDER_EXCEPTION;
  public static final int LOWERCASE;
  public static final int LOWERCASE_MAPPING;
  public static final int MASK_START;
  public static final int MATH;
  public static final int NAME;
  public static final int NFC_INERT;
  public static final int NFC_QUICK_CHECK;
  public static final int NFD_INERT;
  public static final int NFD_QUICK_CHECK;
  public static final int NFKC_INERT;
  public static final int NFKC_QUICK_CHECK;
  public static final int NFKD_INERT;
  public static final int NFKD_QUICK_CHECK;
  public static final int NONCHARACTER_CODE_POINT;
  public static final int NUMERIC_TYPE;
  public static final int NUMERIC_VALUE;
  public static final int OTHER_PROPERTY_START;
  public static final int PATTERN_SYNTAX;
  public static final int PATTERN_WHITE_SPACE;
  public static final int POSIX_ALNUM;
  public static final int POSIX_BLANK;
  public static final int POSIX_GRAPH;
  public static final int POSIX_PRINT;
  public static final int POSIX_XDIGIT;
  public static final int QUOTATION_MARK;
  public static final int RADICAL;
  public static final int SCRIPT;
  public static final int SCRIPT_EXTENSIONS;
  public static final int SEGMENT_STARTER;
  public static final int SENTENCE_BREAK;
  public static final int SIMPLE_CASE_FOLDING;
  public static final int SIMPLE_LOWERCASE_MAPPING;
  public static final int SIMPLE_TITLECASE_MAPPING;
  public static final int SIMPLE_UPPERCASE_MAPPING;
  public static final int SOFT_DOTTED;
  public static final int STRING_START;
  public static final int S_TERM;
  public static final int TERMINAL_PUNCTUATION;
  public static final int TITLECASE_MAPPING;
  public static final int TRAIL_CANONICAL_COMBINING_CLASS;
  public static final int UNIFIED_IDEOGRAPH;
  public static final int UPPERCASE;
  public static final int UPPERCASE_MAPPING;
  public static final int VARIATION_SELECTOR;
  public static final int WHITE_SPACE;
  public static final int WORD_BREAK;
  public static final int XID_CONTINUE;
  public static final int XID_START;
}
public interface android.icu.lang.UProperty$NameChoice
{
  public static final int LONG;
  public static final int SHORT;
}
public final class android.icu.lang.UScript
  extends java.lang.Object
{
  public static final boolean breaksBetweenLetters(int);
  public static final boolean hasScript(int, int);
  public static final boolean isCased(int);
  public static final boolean isRightToLeft(int);
  public static final int getCodeFromName(java.lang.String);
  public static final int getScript(int);
  public static final int getScriptExtensions(int, java.util.BitSet);
  public static final android.icu.lang.UScript$ScriptUsage getUsage(int);
  public static final int[] getCode(android.icu.util.ULocale);
  public static final int[] getCode(java.lang.String);
  public static final int[] getCode(java.util.Locale);
  public static final java.lang.String getName(int);
  public static final java.lang.String getSampleString(int);
  public static final java.lang.String getShortName(int);
  public static final int AFAKA;
  public static final int AHOM;
  public static final int ANATOLIAN_HIEROGLYPHS;
  public static final int ARABIC;
  public static final int ARMENIAN;
  public static final int AVESTAN;
  public static final int BALINESE;
  public static final int BAMUM;
  public static final int BASSA_VAH;
  public static final int BATAK;
  public static final int BENGALI;
  public static final int BLISSYMBOLS;
  public static final int BOOK_PAHLAVI;
  public static final int BOPOMOFO;
  public static final int BRAHMI;
  public static final int BRAILLE;
  public static final int BUGINESE;
  public static final int BUHID;
  public static final int CANADIAN_ABORIGINAL;
  public static final int CARIAN;
  public static final int CAUCASIAN_ALBANIAN;
  public static final int CHAKMA;
  public static final int CHAM;
  public static final int CHEROKEE;
  public static final int CIRTH;
  public static final int COMMON;
  public static final int COPTIC;
  public static final int CUNEIFORM;
  public static final int CYPRIOT;
  public static final int CYRILLIC;
  public static final int DEMOTIC_EGYPTIAN;
  public static final int DESERET;
  public static final int DEVANAGARI;
  public static final int DUPLOYAN;
  public static final int EASTERN_SYRIAC;
  public static final int EGYPTIAN_HIEROGLYPHS;
  public static final int ELBASAN;
  public static final int ESTRANGELO_SYRIAC;
  public static final int ETHIOPIC;
  public static final int GEORGIAN;
  public static final int GLAGOLITIC;
  public static final int GOTHIC;
  public static final int GRANTHA;
  public static final int GREEK;
  public static final int GUJARATI;
  public static final int GURMUKHI;
  public static final int HAN;
  public static final int HANGUL;
  public static final int HANUNOO;
  public static final int HARAPPAN_INDUS;
  public static final int HATRAN;
  public static final int HEBREW;
  public static final int HIERATIC_EGYPTIAN;
  public static final int HIRAGANA;
  public static final int IMPERIAL_ARAMAIC;
  public static final int INHERITED;
  public static final int INSCRIPTIONAL_PAHLAVI;
  public static final int INSCRIPTIONAL_PARTHIAN;
  public static final int INVALID_CODE;
  public static final int JAPANESE;
  public static final int JAVANESE;
  public static final int JURCHEN;
  public static final int KAITHI;
  public static final int KANNADA;
  public static final int KATAKANA;
  public static final int KATAKANA_OR_HIRAGANA;
  public static final int KAYAH_LI;
  public static final int KHAROSHTHI;
  public static final int KHMER;
  public static final int KHOJKI;
  public static final int KHUDAWADI;
  public static final int KHUTSURI;
  public static final int KOREAN;
  public static final int KPELLE;
  public static final int LANNA;
  public static final int LAO;
  public static final int LATIN;
  public static final int LATIN_FRAKTUR;
  public static final int LATIN_GAELIC;
  public static final int LEPCHA;
  public static final int LIMBU;
  public static final int LINEAR_A;
  public static final int LINEAR_B;
  public static final int LISU;
  public static final int LOMA;
  public static final int LYCIAN;
  public static final int LYDIAN;
  public static final int MAHAJANI;
  public static final int MALAYALAM;
  public static final int MANDAEAN;
  public static final int MANDAIC;
  public static final int MANICHAEAN;
  public static final int MATHEMATICAL_NOTATION;
  public static final int MAYAN_HIEROGLYPHS;
  public static final int MEITEI_MAYEK;
  public static final int MENDE;
  public static final int MEROITIC;
  public static final int MEROITIC_CURSIVE;
  public static final int MEROITIC_HIEROGLYPHS;
  public static final int MIAO;
  public static final int MODI;
  public static final int MONGOLIAN;
  public static final int MOON;
  public static final int MRO;
  public static final int MULTANI;
  public static final int MYANMAR;
  public static final int NABATAEAN;
  public static final int NAKHI_GEBA;
  public static final int NEW_TAI_LUE;
  public static final int NKO;
  public static final int NUSHU;
  public static final int OGHAM;
  public static final int OLD_CHURCH_SLAVONIC_CYRILLIC;
  public static final int OLD_HUNGARIAN;
  public static final int OLD_ITALIC;
  public static final int OLD_NORTH_ARABIAN;
  public static final int OLD_PERMIC;
  public static final int OLD_PERSIAN;
  public static final int OLD_SOUTH_ARABIAN;
  public static final int OL_CHIKI;
  public static final int ORIYA;
  public static final int ORKHON;
  public static final int OSMANYA;
  public static final int PAHAWH_HMONG;
  public static final int PALMYRENE;
  public static final int PAU_CIN_HAU;
  public static final int PHAGS_PA;
  public static final int PHOENICIAN;
  public static final int PHONETIC_POLLARD;
  public static final int PSALTER_PAHLAVI;
  public static final int REJANG;
  public static final int RONGORONGO;
  public static final int RUNIC;
  public static final int SAMARITAN;
  public static final int SARATI;
  public static final int SAURASHTRA;
  public static final int SHARADA;
  public static final int SHAVIAN;
  public static final int SIDDHAM;
  public static final int SIGN_WRITING;
  public static final int SIMPLIFIED_HAN;
  public static final int SINDHI;
  public static final int SINHALA;
  public static final int SORA_SOMPENG;
  public static final int SUNDANESE;
  public static final int SYLOTI_NAGRI;
  public static final int SYMBOLS;
  public static final int SYRIAC;
  public static final int TAGALOG;
  public static final int TAGBANWA;
  public static final int TAI_LE;
  public static final int TAI_VIET;
  public static final int TAKRI;
  public static final int TAMIL;
  public static final int TANGUT;
  public static final int TELUGU;
  public static final int TENGWAR;
  public static final int THAANA;
  public static final int THAI;
  public static final int TIBETAN;
  public static final int TIFINAGH;
  public static final int TIRHUTA;
  public static final int TRADITIONAL_HAN;
  public static final int UCAS;
  public static final int UGARITIC;
  public static final int UNKNOWN;
  public static final int UNWRITTEN_LANGUAGES;
  public static final int VAI;
  public static final int VISIBLE_SPEECH;
  public static final int WARANG_CITI;
  public static final int WESTERN_SYRIAC;
  public static final int WOLEAI;
  public static final int YI;
}
public final class android.icu.lang.UScript$ScriptUsage
  extends java.lang.Enum
{
  public static android.icu.lang.UScript$ScriptUsage valueOf(java.lang.String);
  public static android.icu.lang.UScript$ScriptUsage[] values();
  public static final android.icu.lang.UScript$ScriptUsage ASPIRATIONAL;
  public static final android.icu.lang.UScript$ScriptUsage EXCLUDED;
  public static final android.icu.lang.UScript$ScriptUsage LIMITED_USE;
  public static final android.icu.lang.UScript$ScriptUsage NOT_ENCODED;
  public static final android.icu.lang.UScript$ScriptUsage RECOMMENDED;
  public static final android.icu.lang.UScript$ScriptUsage UNKNOWN;
}
public class android.icu.math.BigDecimal
  extends java.lang.Number
  implements java.io.Serializable, java.lang.Comparable
{
  public static android.icu.math.BigDecimal valueOf(double);
  public static android.icu.math.BigDecimal valueOf(long);
  public static android.icu.math.BigDecimal valueOf(long, int);
  public void <init>(char[]);
  public void <init>(char[], int, int);
  public void <init>(double);
  public void <init>(int);
  public void <init>(java.lang.String);
  public void <init>(java.math.BigDecimal);
  public void <init>(java.math.BigInteger);
  public void <init>(java.math.BigInteger, int);
  public void <init>(long);
  public boolean equals(java.lang.Object);
  public byte byteValueExact();
  public double doubleValue();
  public float floatValue();
  public int compareTo(android.icu.math.BigDecimal);
  public int compareTo(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public int intValue();
  public int intValueExact();
  public int scale();
  public int signum();
  public long longValue();
  public long longValueExact();
  public short shortValueExact();
  public android.icu.math.BigDecimal abs();
  public android.icu.math.BigDecimal abs(android.icu.math.MathContext);
  public android.icu.math.BigDecimal add(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal add(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal, int);
  public android.icu.math.BigDecimal divide(android.icu.math.BigDecimal, int, int);
  public android.icu.math.BigDecimal divideInteger(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal divideInteger(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal max(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal max(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal min(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal min(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal movePointLeft(int);
  public android.icu.math.BigDecimal movePointRight(int);
  public android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal multiply(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal negate();
  public android.icu.math.BigDecimal negate(android.icu.math.MathContext);
  public android.icu.math.BigDecimal plus();
  public android.icu.math.BigDecimal plus(android.icu.math.MathContext);
  public android.icu.math.BigDecimal pow(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal pow(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal remainder(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public android.icu.math.BigDecimal setScale(int);
  public android.icu.math.BigDecimal setScale(int, int);
  public android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal);
  public android.icu.math.BigDecimal subtract(android.icu.math.BigDecimal, android.icu.math.MathContext);
  public char[] toCharArray();
  public java.lang.String format(int, int);
  public java.lang.String format(int, int, int, int, int, int);
  public java.lang.String toString();
  public java.math.BigDecimal toBigDecimal();
  public java.math.BigInteger toBigInteger();
  public java.math.BigInteger toBigIntegerExact();
  public java.math.BigInteger unscaledValue();
  public static final int ROUND_CEILING;
  public static final int ROUND_DOWN;
  public static final int ROUND_FLOOR;
  public static final int ROUND_HALF_DOWN;
  public static final int ROUND_HALF_EVEN;
  public static final int ROUND_HALF_UP;
  public static final int ROUND_UNNECESSARY;
  public static final int ROUND_UP;
  public static final android.icu.math.BigDecimal ONE;
  public static final android.icu.math.BigDecimal TEN;
  public static final android.icu.math.BigDecimal ZERO;
}
public final class android.icu.math.MathContext
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(int);
  public void <init>(int, int);
  public void <init>(int, int, boolean);
  public void <init>(int, int, boolean, int);
  public boolean getLostDigits();
  public int getDigits();
  public int getForm();
  public int getRoundingMode();
  public java.lang.String toString();
  public static final int ENGINEERING;
  public static final int PLAIN;
  public static final int ROUND_CEILING;
  public static final int ROUND_DOWN;
  public static final int ROUND_FLOOR;
  public static final int ROUND_HALF_DOWN;
  public static final int ROUND_HALF_EVEN;
  public static final int ROUND_HALF_UP;
  public static final int ROUND_UNNECESSARY;
  public static final int ROUND_UP;
  public static final int SCIENTIFIC;
  public static final android.icu.math.MathContext DEFAULT;
}
public final class android.icu.text.AlphabeticIndex
  extends java.lang.Object
  implements java.lang.Iterable
{
  public void <init>(android.icu.text.RuleBasedCollator);
  public void <init>(android.icu.util.ULocale);
  public void <init>(java.util.Locale);
  public int getBucketCount();
  public int getBucketIndex(java.lang.CharSequence);
  public int getMaxLabelCount();
  public int getRecordCount();
  public android.icu.text.AlphabeticIndex addLabels(android.icu.text.UnicodeSet);
  public android.icu.text.AlphabeticIndex addLabels(android.icu.util.ULocale[]);
  public android.icu.text.AlphabeticIndex addLabels(java.util.Locale[]);
  public android.icu.text.AlphabeticIndex addRecord(java.lang.CharSequence, java.lang.Object);
  public android.icu.text.AlphabeticIndex clearRecords();
  public android.icu.text.AlphabeticIndex setInflowLabel(java.lang.String);
  public android.icu.text.AlphabeticIndex setMaxLabelCount(int);
  public android.icu.text.AlphabeticIndex setOverflowLabel(java.lang.String);
  public android.icu.text.AlphabeticIndex setUnderflowLabel(java.lang.String);
  public android.icu.text.AlphabeticIndex$ImmutableIndex buildImmutableIndex();
  public android.icu.text.RuleBasedCollator getCollator();
  public java.lang.String getInflowLabel();
  public java.lang.String getOverflowLabel();
  public java.lang.String getUnderflowLabel();
  public java.util.Iterator iterator();
  public java.util.List getBucketLabels();
}
public class android.icu.text.AlphabeticIndex$Bucket
  extends java.lang.Object
  implements java.lang.Iterable
{
  public int size();
  public android.icu.text.AlphabeticIndex$Bucket$LabelType getLabelType();
  public java.lang.String getLabel();
  public java.lang.String toString();
  public java.util.Iterator iterator();
}
public final class android.icu.text.AlphabeticIndex$Bucket$LabelType
  extends java.lang.Enum
{
  public static android.icu.text.AlphabeticIndex$Bucket$LabelType valueOf(java.lang.String);
  public static android.icu.text.AlphabeticIndex$Bucket$LabelType[] values();
  public static final android.icu.text.AlphabeticIndex$Bucket$LabelType INFLOW;
  public static final android.icu.text.AlphabeticIndex$Bucket$LabelType NORMAL;
  public static final android.icu.text.AlphabeticIndex$Bucket$LabelType OVERFLOW;
  public static final android.icu.text.AlphabeticIndex$Bucket$LabelType UNDERFLOW;
}
public final class android.icu.text.AlphabeticIndex$ImmutableIndex
  extends java.lang.Object
  implements java.lang.Iterable
{
  public int getBucketCount();
  public int getBucketIndex(java.lang.CharSequence);
  public android.icu.text.AlphabeticIndex$Bucket getBucket(int);
  public java.util.Iterator iterator();
}
public class android.icu.text.AlphabeticIndex$Record
  extends java.lang.Object
{
  public java.lang.CharSequence getName();
  public java.lang.Object getData();
  public java.lang.String toString();
}
public abstract class android.icu.text.BreakIterator
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static android.icu.text.BreakIterator getCharacterInstance();
  public static android.icu.text.BreakIterator getCharacterInstance(android.icu.util.ULocale);
  public static android.icu.text.BreakIterator getCharacterInstance(java.util.Locale);
  public static android.icu.text.BreakIterator getLineInstance();
  public static android.icu.text.BreakIterator getLineInstance(android.icu.util.ULocale);
  public static android.icu.text.BreakIterator getLineInstance(java.util.Locale);
  public static android.icu.text.BreakIterator getSentenceInstance();
  public static android.icu.text.BreakIterator getSentenceInstance(android.icu.util.ULocale);
  public static android.icu.text.BreakIterator getSentenceInstance(java.util.Locale);
  public static android.icu.text.BreakIterator getTitleInstance();
  public static android.icu.text.BreakIterator getTitleInstance(android.icu.util.ULocale);
  public static android.icu.text.BreakIterator getTitleInstance(java.util.Locale);
  public static android.icu.text.BreakIterator getWordInstance();
  public static android.icu.text.BreakIterator getWordInstance(android.icu.util.ULocale);
  public static android.icu.text.BreakIterator getWordInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public abstract int current();
  public abstract int first();
  public abstract int following(int);
  public abstract int last();
  public abstract int next();
  public abstract int next(int);
  public abstract int previous();
  public abstract void setText(java.text.CharacterIterator);
  public abstract java.text.CharacterIterator getText();
  public boolean isBoundary(int);
  public int getRuleStatus();
  public int getRuleStatusVec(int[]);
  public int preceding(int);
  public void setText(java.lang.String);
  public java.lang.Object clone();
  protected void <init>();
  public static final int DONE;
  public static final int KIND_CHARACTER;
  public static final int KIND_LINE;
  public static final int KIND_SENTENCE;
  public static final int KIND_TITLE;
  public static final int KIND_WORD;
  public static final int WORD_IDEO;
  public static final int WORD_IDEO_LIMIT;
  public static final int WORD_KANA;
  public static final int WORD_KANA_LIMIT;
  public static final int WORD_LETTER;
  public static final int WORD_LETTER_LIMIT;
  public static final int WORD_NONE;
  public static final int WORD_NONE_LIMIT;
  public static final int WORD_NUMBER;
  public static final int WORD_NUMBER_LIMIT;
}
public final class android.icu.text.CollationElementIterator
  extends java.lang.Object
{
  public static final int primaryOrder(int);
  public static final int secondaryOrder(int);
  public static final int tertiaryOrder(int);
  public boolean equals(java.lang.Object);
  public int getMaxExpansion(int);
  public int getOffset();
  public int next();
  public int previous();
  public void reset();
  public void setOffset(int);
  public void setText(android.icu.text.UCharacterIterator);
  public void setText(java.lang.String);
  public void setText(java.text.CharacterIterator);
  public static final int IGNORABLE;
  public static final int NULLORDER;
}
public final class android.icu.text.CollationKey
  extends java.lang.Object
  implements java.lang.Comparable
{
  public void <init>(java.lang.String, byte[]);
  public boolean equals(android.icu.text.CollationKey);
  public boolean equals(java.lang.Object);
  public int compareTo(android.icu.text.CollationKey);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public android.icu.text.CollationKey getBound(int, int);
  public android.icu.text.CollationKey merge(android.icu.text.CollationKey);
  public byte[] toByteArray();
  public java.lang.String getSourceString();
}
public final class android.icu.text.CollationKey$BoundMode
  extends java.lang.Object
{
  public static final int LOWER;
  public static final int UPPER;
  public static final int UPPER_LONG;
}
public abstract class android.icu.text.Collator
  extends java.lang.Object
  implements java.util.Comparator, android.icu.util.Freezable, java.lang.Cloneable
{
  public static final android.icu.text.Collator getInstance();
  public static final android.icu.text.Collator getInstance(android.icu.util.ULocale);
  public static final android.icu.text.Collator getInstance(java.util.Locale);
  public static final android.icu.util.ULocale getFunctionalEquivalent(java.lang.String, android.icu.util.ULocale);
  public static final android.icu.util.ULocale getFunctionalEquivalent(java.lang.String, android.icu.util.ULocale, boolean[]);
  public static final android.icu.util.ULocale[] getAvailableULocales();
  public static final java.lang.String[] getKeywordValues(java.lang.String);
  public static final java.lang.String[] getKeywordValuesForLocale(java.lang.String, android.icu.util.ULocale, boolean);
  public static final java.lang.String[] getKeywords();
  public static int[] getEquivalentReorderCodes(int);
  public static java.lang.String getDisplayName(android.icu.util.ULocale);
  public static java.lang.String getDisplayName(android.icu.util.ULocale, android.icu.util.ULocale);
  public static java.lang.String getDisplayName(java.util.Locale);
  public static java.lang.String getDisplayName(java.util.Locale, java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public abstract int compare(java.lang.String, java.lang.String);
  public abstract int getVariableTop();
  public abstract android.icu.text.CollationKey getCollationKey(java.lang.String);
  public abstract android.icu.util.VersionInfo getUCAVersion();
  public abstract android.icu.util.VersionInfo getVersion();
  public boolean equals(java.lang.Object);
  public boolean equals(java.lang.String, java.lang.String);
  public boolean isFrozen();
  public int compare(java.lang.Object, java.lang.Object);
  public int getDecomposition();
  public int getMaxVariable();
  public int getStrength();
  public void setDecomposition(int);
  public void setReorderCodes(int[]);
  public void setStrength(int);
  public android.icu.text.Collator cloneAsThawed();
  public android.icu.text.Collator freeze();
  public android.icu.text.Collator setMaxVariable(int);
  public android.icu.text.UnicodeSet getTailoredSet();
  public int[] getReorderCodes();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  protected void <init>();
  public static final int CANONICAL_DECOMPOSITION;
  public static final int FULL_DECOMPOSITION;
  public static final int IDENTICAL;
  public static final int NO_DECOMPOSITION;
  public static final int PRIMARY;
  public static final int QUATERNARY;
  public static final int SECONDARY;
  public static final int TERTIARY;
}
public interface android.icu.text.Collator$ReorderCodes
{
  public static final int CURRENCY;
  public static final int DEFAULT;
  public static final int DIGIT;
  public static final int FIRST;
  public static final int NONE;
  public static final int OTHERS;
  public static final int PUNCTUATION;
  public static final int SPACE;
  public static final int SYMBOL;
}
public class android.icu.text.CompactDecimalFormat
  extends android.icu.text.DecimalFormat
{
  public static android.icu.text.CompactDecimalFormat getInstance(android.icu.util.ULocale, android.icu.text.CompactDecimalFormat$CompactStyle);
  public static android.icu.text.CompactDecimalFormat getInstance(java.util.Locale, android.icu.text.CompactDecimalFormat$CompactStyle);
  public boolean equals(java.lang.Object);
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public java.lang.StringBuffer format(android.icu.math.BigDecimal, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(java.math.BigDecimal, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(java.math.BigInteger, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
}
public final class android.icu.text.CompactDecimalFormat$CompactStyle
  extends java.lang.Enum
{
  public static android.icu.text.CompactDecimalFormat$CompactStyle valueOf(java.lang.String);
  public static android.icu.text.CompactDecimalFormat$CompactStyle[] values();
  public static final android.icu.text.CompactDecimalFormat$CompactStyle LONG;
  public static final android.icu.text.CompactDecimalFormat$CompactStyle SHORT;
}
public class android.icu.text.CurrencyPluralInfo
  extends java.lang.Object
  implements java.lang.Cloneable, java.io.Serializable
{
  public static android.icu.text.CurrencyPluralInfo getInstance();
  public static android.icu.text.CurrencyPluralInfo getInstance(android.icu.util.ULocale);
  public static android.icu.text.CurrencyPluralInfo getInstance(java.util.Locale);
  public void <init>();
  public void <init>(android.icu.util.ULocale);
  public void <init>(java.util.Locale);
  public boolean equals(java.lang.Object);
  public void setCurrencyPluralPattern(java.lang.String, java.lang.String);
  public void setLocale(android.icu.util.ULocale);
  public void setPluralRules(java.lang.String);
  public android.icu.text.PluralRules getPluralRules();
  public android.icu.util.ULocale getLocale();
  public java.lang.Object clone();
  public java.lang.String getCurrencyPluralPattern(java.lang.String);
}
public abstract class android.icu.text.DateFormat
  extends android.icu.text.UFormat
{
  public static final android.icu.text.DateFormat getDateInstance();
  public static final android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar, int);
  public static final android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar, int, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getDateInstance(android.icu.util.Calendar, int, java.util.Locale);
  public static final android.icu.text.DateFormat getDateInstance(int);
  public static final android.icu.text.DateFormat getDateInstance(int, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getDateInstance(int, java.util.Locale);
  public static final android.icu.text.DateFormat getDateTimeInstance();
  public static final android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar, int, int);
  public static final android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar, int, int, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getDateTimeInstance(android.icu.util.Calendar, int, int, java.util.Locale);
  public static final android.icu.text.DateFormat getDateTimeInstance(int, int);
  public static final android.icu.text.DateFormat getDateTimeInstance(int, int, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getDateTimeInstance(int, int, java.util.Locale);
  public static final android.icu.text.DateFormat getInstance();
  public static final android.icu.text.DateFormat getInstance(android.icu.util.Calendar);
  public static final android.icu.text.DateFormat getInstance(android.icu.util.Calendar, java.util.Locale);
  public static final android.icu.text.DateFormat getInstanceForSkeleton(android.icu.util.Calendar, java.lang.String, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getInstanceForSkeleton(android.icu.util.Calendar, java.lang.String, java.util.Locale);
  public static final android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String);
  public static final android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getInstanceForSkeleton(java.lang.String, java.util.Locale);
  public static final android.icu.text.DateFormat getPatternInstance(android.icu.util.Calendar, java.lang.String, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getPatternInstance(android.icu.util.Calendar, java.lang.String, java.util.Locale);
  public static final android.icu.text.DateFormat getPatternInstance(java.lang.String);
  public static final android.icu.text.DateFormat getPatternInstance(java.lang.String, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getPatternInstance(java.lang.String, java.util.Locale);
  public static final android.icu.text.DateFormat getTimeInstance();
  public static final android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar, int);
  public static final android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar, int, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getTimeInstance(android.icu.util.Calendar, int, java.util.Locale);
  public static final android.icu.text.DateFormat getTimeInstance(int);
  public static final android.icu.text.DateFormat getTimeInstance(int, android.icu.util.ULocale);
  public static final android.icu.text.DateFormat getTimeInstance(int, java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public final java.lang.String format(java.util.Date);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract void parse(java.lang.String, android.icu.util.Calendar, java.text.ParsePosition);
  public abstract java.lang.StringBuffer format(android.icu.util.Calendar, java.lang.StringBuffer, java.text.FieldPosition);
  public boolean equals(java.lang.Object);
  public boolean getBooleanAttribute(android.icu.text.DateFormat$BooleanAttribute);
  public boolean isCalendarLenient();
  public boolean isLenient();
  public int hashCode();
  public void setCalendar(android.icu.util.Calendar);
  public void setCalendarLenient(boolean);
  public void setContext(android.icu.text.DisplayContext);
  public void setLenient(boolean);
  public void setNumberFormat(android.icu.text.NumberFormat);
  public void setTimeZone(android.icu.util.TimeZone);
  public android.icu.text.DateFormat setBooleanAttribute(android.icu.text.DateFormat$BooleanAttribute, boolean);
  public android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext$Type);
  public android.icu.text.NumberFormat getNumberFormat();
  public android.icu.util.Calendar getCalendar();
  public android.icu.util.TimeZone getTimeZone();
  public java.lang.Object clone();
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition);
  public java.util.Date parse(java.lang.String)  throws java.text.ParseException;
  public java.util.Date parse(java.lang.String, java.text.ParsePosition);
  protected void <init>();
  public static final int AM_PM_FIELD;
  public static final int DATE_FIELD;
  public static final int DAY_OF_WEEK_FIELD;
  public static final int DAY_OF_WEEK_IN_MONTH_FIELD;
  public static final int DAY_OF_YEAR_FIELD;
  public static final int DEFAULT;
  public static final int DOW_LOCAL_FIELD;
  public static final int ERA_FIELD;
  public static final int EXTENDED_YEAR_FIELD;
  public static final int FRACTIONAL_SECOND_FIELD;
  public static final int FULL;
  public static final int HOUR0_FIELD;
  public static final int HOUR1_FIELD;
  public static final int HOUR_OF_DAY0_FIELD;
  public static final int HOUR_OF_DAY1_FIELD;
  public static final int JULIAN_DAY_FIELD;
  public static final int LONG;
  public static final int MEDIUM;
  public static final int MILLISECONDS_IN_DAY_FIELD;
  public static final int MILLISECOND_FIELD;
  public static final int MINUTE_FIELD;
  public static final int MONTH_FIELD;
  public static final int NONE;
  public static final int QUARTER_FIELD;
  public static final int RELATIVE;
  public static final int RELATIVE_DEFAULT;
  public static final int RELATIVE_FULL;
  public static final int RELATIVE_LONG;
  public static final int RELATIVE_MEDIUM;
  public static final int RELATIVE_SHORT;
  public static final int SECOND_FIELD;
  public static final int SHORT;
  public static final int STANDALONE_DAY_FIELD;
  public static final int STANDALONE_MONTH_FIELD;
  public static final int STANDALONE_QUARTER_FIELD;
  public static final int TIMEZONE_FIELD;
  public static final int TIMEZONE_GENERIC_FIELD;
  public static final int TIMEZONE_ISO_FIELD;
  public static final int TIMEZONE_ISO_LOCAL_FIELD;
  public static final int TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD;
  public static final int TIMEZONE_RFC_FIELD;
  public static final int TIMEZONE_SPECIAL_FIELD;
  public static final int WEEK_OF_MONTH_FIELD;
  public static final int WEEK_OF_YEAR_FIELD;
  public static final int YEAR_FIELD;
  public static final int YEAR_NAME_FIELD;
  public static final int YEAR_WOY_FIELD;
  public static final java.lang.String ABBR_GENERIC_TZ;
  public static final java.lang.String ABBR_MONTH;
  public static final java.lang.String ABBR_MONTH_DAY;
  public static final java.lang.String ABBR_MONTH_WEEKDAY_DAY;
  public static final java.lang.String ABBR_QUARTER;
  public static final java.lang.String ABBR_SPECIFIC_TZ;
  public static final java.lang.String ABBR_UTC_TZ;
  public static final java.lang.String ABBR_WEEKDAY;
  public static final java.lang.String DAY;
  public static final java.lang.String GENERIC_TZ;
  public static final java.lang.String HOUR24;
  public static final java.lang.String HOUR24_MINUTE;
  public static final java.lang.String HOUR24_MINUTE_SECOND;
  public static final java.lang.String HOUR;
  public static final java.lang.String HOUR_MINUTE;
  public static final java.lang.String HOUR_MINUTE_SECOND;
  public static final java.lang.String LOCATION_TZ;
  public static final java.lang.String MINUTE;
  public static final java.lang.String MINUTE_SECOND;
  public static final java.lang.String MONTH;
  public static final java.lang.String MONTH_DAY;
  public static final java.lang.String MONTH_WEEKDAY_DAY;
  public static final java.lang.String NUM_MONTH;
  public static final java.lang.String NUM_MONTH_DAY;
  public static final java.lang.String NUM_MONTH_WEEKDAY_DAY;
  public static final java.lang.String QUARTER;
  public static final java.lang.String SECOND;
  public static final java.lang.String SPECIFIC_TZ;
  public static final java.lang.String WEEKDAY;
  public static final java.lang.String YEAR;
  public static final java.lang.String YEAR_ABBR_MONTH;
  public static final java.lang.String YEAR_ABBR_MONTH_DAY;
  public static final java.lang.String YEAR_ABBR_MONTH_WEEKDAY_DAY;
  public static final java.lang.String YEAR_ABBR_QUARTER;
  public static final java.lang.String YEAR_MONTH;
  public static final java.lang.String YEAR_MONTH_DAY;
  public static final java.lang.String YEAR_MONTH_WEEKDAY_DAY;
  public static final java.lang.String YEAR_NUM_MONTH;
  public static final java.lang.String YEAR_NUM_MONTH_DAY;
  public static final java.lang.String YEAR_NUM_MONTH_WEEKDAY_DAY;
  public static final java.lang.String YEAR_QUARTER;
  protected android.icu.text.NumberFormat numberFormat;
  protected android.icu.util.Calendar calendar;
}
public final class android.icu.text.DateFormat$BooleanAttribute
  extends java.lang.Enum
{
  public static android.icu.text.DateFormat$BooleanAttribute valueOf(java.lang.String);
  public static android.icu.text.DateFormat$BooleanAttribute[] values();
  public static final android.icu.text.DateFormat$BooleanAttribute PARSE_ALLOW_NUMERIC;
  public static final android.icu.text.DateFormat$BooleanAttribute PARSE_ALLOW_WHITESPACE;
}
public class android.icu.text.DateFormat$Field
  extends java.text.Format$Field
{
  public static android.icu.text.DateFormat$Field ofCalendarField(int);
  public int getCalendarField();
  protected void <init>(java.lang.String, int);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  public static final android.icu.text.DateFormat$Field AM_PM;
  public static final android.icu.text.DateFormat$Field DAY_OF_MONTH;
  public static final android.icu.text.DateFormat$Field DAY_OF_WEEK;
  public static final android.icu.text.DateFormat$Field DAY_OF_WEEK_IN_MONTH;
  public static final android.icu.text.DateFormat$Field DAY_OF_YEAR;
  public static final android.icu.text.DateFormat$Field DOW_LOCAL;
  public static final android.icu.text.DateFormat$Field ERA;
  public static final android.icu.text.DateFormat$Field EXTENDED_YEAR;
  public static final android.icu.text.DateFormat$Field HOUR0;
  public static final android.icu.text.DateFormat$Field HOUR1;
  public static final android.icu.text.DateFormat$Field HOUR_OF_DAY0;
  public static final android.icu.text.DateFormat$Field HOUR_OF_DAY1;
  public static final android.icu.text.DateFormat$Field JULIAN_DAY;
  public static final android.icu.text.DateFormat$Field MILLISECOND;
  public static final android.icu.text.DateFormat$Field MILLISECONDS_IN_DAY;
  public static final android.icu.text.DateFormat$Field MINUTE;
  public static final android.icu.text.DateFormat$Field MONTH;
  public static final android.icu.text.DateFormat$Field QUARTER;
  public static final android.icu.text.DateFormat$Field SECOND;
  public static final android.icu.text.DateFormat$Field TIME_ZONE;
  public static final android.icu.text.DateFormat$Field WEEK_OF_MONTH;
  public static final android.icu.text.DateFormat$Field WEEK_OF_YEAR;
  public static final android.icu.text.DateFormat$Field YEAR;
  public static final android.icu.text.DateFormat$Field YEAR_WOY;
}
public class android.icu.text.DateFormatSymbols
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable
{
  public static android.icu.text.DateFormatSymbols getInstance();
  public static android.icu.text.DateFormatSymbols getInstance(android.icu.util.ULocale);
  public static android.icu.text.DateFormatSymbols getInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public void <init>();
  public void <init>(android.icu.util.Calendar, android.icu.util.ULocale);
  public void <init>(android.icu.util.Calendar, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(java.lang.Class, android.icu.util.ULocale);
  public void <init>(java.lang.Class, java.util.Locale);
  public void <init>(java.util.Locale);
  public void <init>(java.util.ResourceBundle, android.icu.util.ULocale);
  public void <init>(java.util.ResourceBundle, java.util.Locale);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void setAmPmStrings(java.lang.String[]);
  public void setEraNames(java.lang.String[]);
  public void setEras(java.lang.String[]);
  public void setLocalPatternChars(java.lang.String);
  public void setMonths(java.lang.String[]);
  public void setMonths(java.lang.String[], int, int);
  public void setQuarters(java.lang.String[], int, int);
  public void setShortMonths(java.lang.String[]);
  public void setShortWeekdays(java.lang.String[]);
  public void setWeekdays(java.lang.String[]);
  public void setWeekdays(java.lang.String[], int, int);
  public void setYearNames(java.lang.String[], int, int);
  public void setZodiacNames(java.lang.String[], int, int);
  public void setZoneStrings(java.lang.String[][]);
  public java.lang.Object clone();
  public java.lang.String getLocalPatternChars();
  public java.lang.String[] getAmPmStrings();
  public java.lang.String[] getEraNames();
  public java.lang.String[] getEras();
  public java.lang.String[] getMonths();
  public java.lang.String[] getMonths(int, int);
  public java.lang.String[] getQuarters(int, int);
  public java.lang.String[] getShortMonths();
  public java.lang.String[] getShortWeekdays();
  public java.lang.String[] getWeekdays();
  public java.lang.String[] getWeekdays(int, int);
  public java.lang.String[] getYearNames(int, int);
  public java.lang.String[] getZodiacNames(int, int);
  public java.lang.String[][] getZoneStrings();
  protected void initializeData(android.icu.util.ULocale, java.lang.String);
  public static final int ABBREVIATED;
  public static final int FORMAT;
  public static final int NARROW;
  public static final int SHORT;
  public static final int STANDALONE;
  public static final int WIDE;
}
public class android.icu.text.DateIntervalFormat
  extends android.icu.text.UFormat
{
  public static final android.icu.text.DateIntervalFormat getInstance(java.lang.String);
  public static final android.icu.text.DateIntervalFormat getInstance(java.lang.String, android.icu.text.DateIntervalInfo);
  public static final android.icu.text.DateIntervalFormat getInstance(java.lang.String, android.icu.util.ULocale);
  public static final android.icu.text.DateIntervalFormat getInstance(java.lang.String, android.icu.util.ULocale, android.icu.text.DateIntervalInfo);
  public static final android.icu.text.DateIntervalFormat getInstance(java.lang.String, java.util.Locale);
  public static final android.icu.text.DateIntervalFormat getInstance(java.lang.String, java.util.Locale, android.icu.text.DateIntervalInfo);
  public final java.lang.StringBuffer format(android.icu.util.Calendar, android.icu.util.Calendar, java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.StringBuffer format(android.icu.util.DateInterval, java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public void setDateIntervalInfo(android.icu.text.DateIntervalInfo);
  public void setTimeZone(android.icu.util.TimeZone);
  public android.icu.text.DateFormat getDateFormat();
  public android.icu.text.DateIntervalInfo getDateIntervalInfo();
  public android.icu.util.TimeZone getTimeZone();
  public java.lang.Object clone();
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
}
public class android.icu.text.DateIntervalInfo
  extends java.lang.Object
  implements java.lang.Cloneable, android.icu.util.Freezable, java.io.Serializable
{
  public void <init>(android.icu.util.ULocale);
  public void <init>(java.util.Locale);
  public boolean equals(java.lang.Object);
  public boolean getDefaultOrder();
  public boolean isFrozen();
  public int hashCode();
  public void setFallbackIntervalPattern(java.lang.String);
  public void setIntervalPattern(java.lang.String, int, java.lang.String);
  public android.icu.text.DateIntervalInfo cloneAsThawed();
  public android.icu.text.DateIntervalInfo freeze();
  public android.icu.text.DateIntervalInfo$PatternInfo getIntervalPattern(java.lang.String, int);
  public java.lang.Object clone();
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  public java.lang.String getFallbackIntervalPattern();
}
public final class android.icu.text.DateIntervalInfo$PatternInfo
  extends java.lang.Object
  implements java.lang.Cloneable, java.io.Serializable
{
  public void <init>(java.lang.String, java.lang.String, boolean);
  public boolean equals(java.lang.Object);
  public boolean firstDateInPtnIsLaterDate();
  public int hashCode();
  public java.lang.String getFirstPart();
  public java.lang.String getSecondPart();
}
public class android.icu.text.DateTimePatternGenerator
  extends java.lang.Object
  implements android.icu.util.Freezable, java.lang.Cloneable
{
  public static android.icu.text.DateTimePatternGenerator getEmptyInstance();
  public static android.icu.text.DateTimePatternGenerator getInstance();
  public static android.icu.text.DateTimePatternGenerator getInstance(android.icu.util.ULocale);
  public static android.icu.text.DateTimePatternGenerator getInstance(java.util.Locale);
  public boolean isFrozen();
  public void setAppendItemFormat(int, java.lang.String);
  public void setAppendItemName(int, java.lang.String);
  public void setDateTimeFormat(java.lang.String);
  public void setDecimal(java.lang.String);
  public android.icu.text.DateTimePatternGenerator addPattern(java.lang.String, boolean, android.icu.text.DateTimePatternGenerator$PatternInfo);
  public android.icu.text.DateTimePatternGenerator cloneAsThawed();
  public android.icu.text.DateTimePatternGenerator freeze();
  public java.lang.Object clone();
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  public java.lang.String getAppendItemFormat(int);
  public java.lang.String getAppendItemName(int);
  public java.lang.String getBaseSkeleton(java.lang.String);
  public java.lang.String getBestPattern(java.lang.String);
  public java.lang.String getBestPattern(java.lang.String, int);
  public java.lang.String getDateTimeFormat();
  public java.lang.String getDecimal();
  public java.lang.String getSkeleton(java.lang.String);
  public java.lang.String replaceFieldTypes(java.lang.String, java.lang.String);
  public java.lang.String replaceFieldTypes(java.lang.String, java.lang.String, int);
  public java.util.Map getSkeletons(java.util.Map);
  public java.util.Set getBaseSkeletons(java.util.Set);
  protected void <init>();
  public static final int DAY;
  public static final int DAYPERIOD;
  public static final int DAY_OF_WEEK_IN_MONTH;
  public static final int DAY_OF_YEAR;
  public static final int ERA;
  public static final int FRACTIONAL_SECOND;
  public static final int HOUR;
  public static final int MATCH_ALL_FIELDS_LENGTH;
  public static final int MATCH_HOUR_FIELD_LENGTH;
  public static final int MATCH_NO_OPTIONS;
  public static final int MINUTE;
  public static final int MONTH;
  public static final int QUARTER;
  public static final int SECOND;
  public static final int WEEKDAY;
  public static final int WEEK_OF_MONTH;
  public static final int WEEK_OF_YEAR;
  public static final int YEAR;
  public static final int ZONE;
}
public final class android.icu.text.DateTimePatternGenerator$PatternInfo
  extends java.lang.Object
{
  public void <init>();
  public static final int BASE_CONFLICT;
  public static final int CONFLICT;
  public static final int OK;
  public int status;
  public java.lang.String conflictingPattern;
}
public class android.icu.text.DecimalFormat
  extends android.icu.text.NumberFormat
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, android.icu.text.DecimalFormatSymbols);
  public void <init>(java.lang.String, android.icu.text.DecimalFormatSymbols, android.icu.text.CurrencyPluralInfo, int);
  public boolean areSignificantDigitsUsed();
  public boolean equals(java.lang.Object);
  public boolean isDecimalPatternMatchRequired();
  public boolean isDecimalSeparatorAlwaysShown();
  public boolean isExponentSignAlwaysShown();
  public boolean isParseBigDecimal();
  public boolean isScientificNotation();
  public byte getMinimumExponentDigits();
  public char getPadCharacter();
  public int getFormatWidth();
  public int getGroupingSize();
  public int getMaximumSignificantDigits();
  public int getMinimumSignificantDigits();
  public int getMultiplier();
  public int getPadPosition();
  public int getParseMaxDigits();
  public int getRoundingMode();
  public int getSecondaryGroupingSize();
  public int hashCode();
  public void applyLocalizedPattern(java.lang.String);
  public void applyPattern(java.lang.String);
  public void setCurrency(android.icu.util.Currency);
  public void setCurrencyPluralInfo(android.icu.text.CurrencyPluralInfo);
  public void setCurrencyUsage(android.icu.util.Currency$CurrencyUsage);
  public void setDecimalFormatSymbols(android.icu.text.DecimalFormatSymbols);
  public void setDecimalPatternMatchRequired(boolean);
  public void setDecimalSeparatorAlwaysShown(boolean);
  public void setExponentSignAlwaysShown(boolean);
  public void setFormatWidth(int);
  public void setGroupingSize(int);
  public void setMathContext(java.math.MathContext);
  public void setMathContextICU(android.icu.math.MathContext);
  public void setMaximumFractionDigits(int);
  public void setMaximumIntegerDigits(int);
  public void setMaximumSignificantDigits(int);
  public void setMinimumExponentDigits(byte);
  public void setMinimumFractionDigits(int);
  public void setMinimumIntegerDigits(int);
  public void setMinimumSignificantDigits(int);
  public void setMultiplier(int);
  public void setNegativePrefix(java.lang.String);
  public void setNegativeSuffix(java.lang.String);
  public void setPadCharacter(char);
  public void setPadPosition(int);
  public void setParseBigDecimal(boolean);
  public void setParseMaxDigits(int);
  public void setPositivePrefix(java.lang.String);
  public void setPositiveSuffix(java.lang.String);
  public void setRoundingIncrement(android.icu.math.BigDecimal);
  public void setRoundingIncrement(double);
  public void setRoundingIncrement(java.math.BigDecimal);
  public void setRoundingMode(int);
  public void setScientificNotation(boolean);
  public void setSecondaryGroupingSize(int);
  public void setSignificantDigitsUsed(boolean);
  public android.icu.math.MathContext getMathContextICU();
  public android.icu.text.CurrencyPluralInfo getCurrencyPluralInfo();
  public android.icu.text.DecimalFormatSymbols getDecimalFormatSymbols();
  public android.icu.util.Currency$CurrencyUsage getCurrencyUsage();
  public android.icu.util.CurrencyAmount parseCurrency(java.lang.CharSequence, java.text.ParsePosition);
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public java.lang.Object clone();
  public java.lang.String getNegativePrefix();
  public java.lang.String getNegativeSuffix();
  public java.lang.String getPositivePrefix();
  public java.lang.String getPositiveSuffix();
  public java.lang.String toLocalizedPattern();
  public java.lang.String toPattern();
  public java.lang.StringBuffer format(android.icu.math.BigDecimal, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(java.math.BigDecimal, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(java.math.BigInteger, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public java.math.BigDecimal getRoundingIncrement();
  public java.math.MathContext getMathContext();
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public static final int PAD_AFTER_PREFIX;
  public static final int PAD_AFTER_SUFFIX;
  public static final int PAD_BEFORE_PREFIX;
  public static final int PAD_BEFORE_SUFFIX;
}
public class android.icu.text.DecimalFormatSymbols
  extends java.lang.Object
  implements java.lang.Cloneable, java.io.Serializable
{
  public static android.icu.text.DecimalFormatSymbols getInstance();
  public static android.icu.text.DecimalFormatSymbols getInstance(android.icu.util.ULocale);
  public static android.icu.text.DecimalFormatSymbols getInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public void <init>();
  public void <init>(android.icu.util.ULocale);
  public void <init>(java.util.Locale);
  public boolean equals(java.lang.Object);
  public char getDecimalSeparator();
  public char getDigit();
  public char getGroupingSeparator();
  public char getMinusSign();
  public char getMonetaryDecimalSeparator();
  public char getMonetaryGroupingSeparator();
  public char getPadEscape();
  public char getPatternSeparator();
  public char getPerMill();
  public char getPercent();
  public char getPlusSign();
  public char getSignificantDigit();
  public char getZeroDigit();
  public int hashCode();
  public void setCurrency(android.icu.util.Currency);
  public void setCurrencySymbol(java.lang.String);
  public void setDecimalSeparator(char);
  public void setDigit(char);
  public void setExponentMultiplicationSign(java.lang.String);
  public void setExponentSeparator(java.lang.String);
  public void setGroupingSeparator(char);
  public void setInfinity(java.lang.String);
  public void setInternationalCurrencySymbol(java.lang.String);
  public void setMinusSign(char);
  public void setMonetaryDecimalSeparator(char);
  public void setMonetaryGroupingSeparator(char);
  public void setNaN(java.lang.String);
  public void setPadEscape(char);
  public void setPatternForCurrencySpacing(int, boolean, java.lang.String);
  public void setPatternSeparator(char);
  public void setPerMill(char);
  public void setPercent(char);
  public void setPlusSign(char);
  public void setSignificantDigit(char);
  public void setZeroDigit(char);
  public android.icu.util.Currency getCurrency();
  public android.icu.util.ULocale getULocale();
  public char[] getDigits();
  public java.lang.Object clone();
  public java.lang.String getCurrencySymbol();
  public java.lang.String getExponentMultiplicationSign();
  public java.lang.String getExponentSeparator();
  public java.lang.String getInfinity();
  public java.lang.String getInternationalCurrencySymbol();
  public java.lang.String getNaN();
  public java.lang.String getPatternForCurrencySpacing(int, boolean);
  public java.util.Locale getLocale();
  public static final int CURRENCY_SPC_CURRENCY_MATCH;
  public static final int CURRENCY_SPC_INSERT;
  public static final int CURRENCY_SPC_SURROUNDING_MATCH;
}
public final class android.icu.text.DisplayContext
  extends java.lang.Enum
{
  public static android.icu.text.DisplayContext valueOf(java.lang.String);
  public static android.icu.text.DisplayContext[] values();
  public int value();
  public android.icu.text.DisplayContext$Type type();
  public static final android.icu.text.DisplayContext CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE;
  public static final android.icu.text.DisplayContext CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE;
  public static final android.icu.text.DisplayContext CAPITALIZATION_FOR_STANDALONE;
  public static final android.icu.text.DisplayContext CAPITALIZATION_FOR_UI_LIST_OR_MENU;
  public static final android.icu.text.DisplayContext CAPITALIZATION_NONE;
  public static final android.icu.text.DisplayContext DIALECT_NAMES;
  public static final android.icu.text.DisplayContext LENGTH_FULL;
  public static final android.icu.text.DisplayContext LENGTH_SHORT;
  public static final android.icu.text.DisplayContext STANDARD_NAMES;
}
public final class android.icu.text.DisplayContext$Type
  extends java.lang.Enum
{
  public static android.icu.text.DisplayContext$Type valueOf(java.lang.String);
  public static android.icu.text.DisplayContext$Type[] values();
  public static final android.icu.text.DisplayContext$Type CAPITALIZATION;
  public static final android.icu.text.DisplayContext$Type DIALECT_HANDLING;
  public static final android.icu.text.DisplayContext$Type DISPLAY_LENGTH;
}
public abstract class android.icu.text.IDNA
  extends java.lang.Object
{
  public static android.icu.text.IDNA getUTS46Instance(int);
  public abstract java.lang.StringBuilder labelToASCII(java.lang.CharSequence, java.lang.StringBuilder, android.icu.text.IDNA$Info);
  public abstract java.lang.StringBuilder labelToUnicode(java.lang.CharSequence, java.lang.StringBuilder, android.icu.text.IDNA$Info);
  public abstract java.lang.StringBuilder nameToASCII(java.lang.CharSequence, java.lang.StringBuilder, android.icu.text.IDNA$Info);
  public abstract java.lang.StringBuilder nameToUnicode(java.lang.CharSequence, java.lang.StringBuilder, android.icu.text.IDNA$Info);
  public static final int CHECK_BIDI;
  public static final int CHECK_CONTEXTJ;
  public static final int CHECK_CONTEXTO;
  public static final int DEFAULT;
  public static final int NONTRANSITIONAL_TO_ASCII;
  public static final int NONTRANSITIONAL_TO_UNICODE;
  public static final int USE_STD3_RULES;
}
public final class android.icu.text.IDNA$Error
  extends java.lang.Enum
{
  public static android.icu.text.IDNA$Error valueOf(java.lang.String);
  public static android.icu.text.IDNA$Error[] values();
  public static final android.icu.text.IDNA$Error BIDI;
  public static final android.icu.text.IDNA$Error CONTEXTJ;
  public static final android.icu.text.IDNA$Error CONTEXTO_DIGITS;
  public static final android.icu.text.IDNA$Error CONTEXTO_PUNCTUATION;
  public static final android.icu.text.IDNA$Error DISALLOWED;
  public static final android.icu.text.IDNA$Error DOMAIN_NAME_TOO_LONG;
  public static final android.icu.text.IDNA$Error EMPTY_LABEL;
  public static final android.icu.text.IDNA$Error HYPHEN_3_4;
  public static final android.icu.text.IDNA$Error INVALID_ACE_LABEL;
  public static final android.icu.text.IDNA$Error LABEL_HAS_DOT;
  public static final android.icu.text.IDNA$Error LABEL_TOO_LONG;
  public static final android.icu.text.IDNA$Error LEADING_COMBINING_MARK;
  public static final android.icu.text.IDNA$Error LEADING_HYPHEN;
  public static final android.icu.text.IDNA$Error PUNYCODE;
  public static final android.icu.text.IDNA$Error TRAILING_HYPHEN;
}
public final class android.icu.text.IDNA$Info
  extends java.lang.Object
{
  public void <init>();
  public boolean hasErrors();
  public boolean isTransitionalDifferent();
  public java.util.Set getErrors();
}
public abstract class android.icu.text.LocaleDisplayNames
  extends java.lang.Object
{
  public static android.icu.text.LocaleDisplayNames getInstance(android.icu.util.ULocale);
  public static android.icu.text.LocaleDisplayNames getInstance(android.icu.util.ULocale, android.icu.text.DisplayContext[]);
  public static android.icu.text.LocaleDisplayNames getInstance(android.icu.util.ULocale, android.icu.text.LocaleDisplayNames$DialectHandling);
  public static android.icu.text.LocaleDisplayNames getInstance(java.util.Locale);
  public static android.icu.text.LocaleDisplayNames getInstance(java.util.Locale, android.icu.text.DisplayContext[]);
  public abstract android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext$Type);
  public abstract android.icu.text.LocaleDisplayNames$DialectHandling getDialectHandling();
  public abstract android.icu.util.ULocale getLocale();
  public abstract java.lang.String keyDisplayName(java.lang.String);
  public abstract java.lang.String keyValueDisplayName(java.lang.String, java.lang.String);
  public abstract java.lang.String languageDisplayName(java.lang.String);
  public abstract java.lang.String localeDisplayName(android.icu.util.ULocale);
  public abstract java.lang.String localeDisplayName(java.lang.String);
  public abstract java.lang.String localeDisplayName(java.util.Locale);
  public abstract java.lang.String regionDisplayName(java.lang.String);
  public abstract java.lang.String scriptDisplayName(int);
  public abstract java.lang.String scriptDisplayName(java.lang.String);
  public abstract java.lang.String variantDisplayName(java.lang.String);
}
public final class android.icu.text.LocaleDisplayNames$DialectHandling
  extends java.lang.Enum
{
  public static android.icu.text.LocaleDisplayNames$DialectHandling valueOf(java.lang.String);
  public static android.icu.text.LocaleDisplayNames$DialectHandling[] values();
  public static final android.icu.text.LocaleDisplayNames$DialectHandling DIALECT_NAMES;
  public static final android.icu.text.LocaleDisplayNames$DialectHandling STANDARD_NAMES;
}
public class android.icu.text.MeasureFormat
  extends android.icu.text.UFormat
{
  public static android.icu.text.MeasureFormat getCurrencyFormat();
  public static android.icu.text.MeasureFormat getCurrencyFormat(android.icu.util.ULocale);
  public static android.icu.text.MeasureFormat getCurrencyFormat(java.util.Locale);
  public static android.icu.text.MeasureFormat getInstance(android.icu.util.ULocale, android.icu.text.MeasureFormat$FormatWidth);
  public static android.icu.text.MeasureFormat getInstance(android.icu.util.ULocale, android.icu.text.MeasureFormat$FormatWidth, android.icu.text.NumberFormat);
  public static android.icu.text.MeasureFormat getInstance(java.util.Locale, android.icu.text.MeasureFormat$FormatWidth);
  public static android.icu.text.MeasureFormat getInstance(java.util.Locale, android.icu.text.MeasureFormat$FormatWidth, android.icu.text.NumberFormat);
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final android.icu.util.ULocale getLocale();
  public final java.lang.String formatMeasures(android.icu.util.Measure[]);
  public android.icu.text.MeasureFormat$FormatWidth getWidth();
  public android.icu.text.NumberFormat getNumberFormat();
  public android.icu.util.Measure parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuilder formatMeasures(java.lang.StringBuilder, java.text.FieldPosition, android.icu.util.Measure[]);
}
public final class android.icu.text.MeasureFormat$FormatWidth
  extends java.lang.Enum
{
  public static android.icu.text.MeasureFormat$FormatWidth valueOf(java.lang.String);
  public static android.icu.text.MeasureFormat$FormatWidth[] values();
  public static final android.icu.text.MeasureFormat$FormatWidth NARROW;
  public static final android.icu.text.MeasureFormat$FormatWidth NUMERIC;
  public static final android.icu.text.MeasureFormat$FormatWidth SHORT;
  public static final android.icu.text.MeasureFormat$FormatWidth WIDE;
}
public class android.icu.text.MessageFormat
  extends android.icu.text.UFormat
{
  public static java.lang.String autoQuoteApostrophe(java.lang.String);
  public static java.lang.String format(java.lang.String, java.lang.Object[]);
  public static java.lang.String format(java.lang.String, java.util.Map);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, android.icu.util.ULocale);
  public void <init>(java.lang.String, java.util.Locale);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.StringBuffer format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.StringBuffer format(java.util.Map, java.lang.StringBuffer, java.text.FieldPosition);
  public boolean equals(java.lang.Object);
  public boolean usesNamedArguments();
  public int hashCode();
  public void applyPattern(java.lang.String);
  public void applyPattern(java.lang.String, android.icu.text.MessagePattern$ApostropheMode);
  public void setFormat(int, java.text.Format);
  public void setFormatByArgumentIndex(int, java.text.Format);
  public void setFormatByArgumentName(java.lang.String, java.text.Format);
  public void setFormats(java.text.Format[]);
  public void setFormatsByArgumentIndex(java.text.Format[]);
  public void setFormatsByArgumentName(java.util.Map);
  public void setLocale(android.icu.util.ULocale);
  public void setLocale(java.util.Locale);
  public android.icu.text.MessagePattern$ApostropheMode getApostropheMode();
  public android.icu.util.ULocale getULocale();
  public java.lang.Object clone();
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.Object[] parse(java.lang.String)  throws java.text.ParseException;
  public java.lang.Object[] parse(java.lang.String, java.text.ParsePosition);
  public java.lang.String toPattern();
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.text.Format getFormatByArgumentName(java.lang.String);
  public java.text.Format[] getFormats();
  public java.text.Format[] getFormatsByArgumentIndex();
  public java.util.Locale getLocale();
  public java.util.Map parseToMap(java.lang.String)  throws java.text.ParseException;
  public java.util.Map parseToMap(java.lang.String, java.text.ParsePosition);
  public java.util.Set getArgumentNames();
}
public class android.icu.text.MessageFormat$Field
  extends java.text.Format$Field
{
  protected void <init>(java.lang.String);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  public static final android.icu.text.MessageFormat$Field ARGUMENT;
}
public final class android.icu.text.MessagePattern
  extends java.lang.Object
  implements java.lang.Cloneable, android.icu.util.Freezable
{
  public static int validateArgumentName(java.lang.String);
  public void <init>();
  public void <init>(android.icu.text.MessagePattern$ApostropheMode);
  public void <init>(java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean hasNamedArguments();
  public boolean hasNumberedArguments();
  public boolean isFrozen();
  public boolean partSubstringMatches(android.icu.text.MessagePattern$Part, java.lang.String);
  public double getNumericValue(android.icu.text.MessagePattern$Part);
  public double getPluralOffset(int);
  public int countParts();
  public int getLimitPartIndex(int);
  public int getPatternIndex(int);
  public int hashCode();
  public void clear();
  public void clearPatternAndSetApostropheMode(android.icu.text.MessagePattern$ApostropheMode);
  public android.icu.text.MessagePattern cloneAsThawed();
  public android.icu.text.MessagePattern freeze();
  public android.icu.text.MessagePattern parse(java.lang.String);
  public android.icu.text.MessagePattern parseChoiceStyle(java.lang.String);
  public android.icu.text.MessagePattern parsePluralStyle(java.lang.String);
  public android.icu.text.MessagePattern parseSelectStyle(java.lang.String);
  public android.icu.text.MessagePattern$ApostropheMode getApostropheMode();
  public android.icu.text.MessagePattern$Part getPart(int);
  public android.icu.text.MessagePattern$Part$Type getPartType(int);
  public java.lang.Object clone();
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  public java.lang.String autoQuoteApostropheDeep();
  public java.lang.String getPatternString();
  public java.lang.String getSubstring(android.icu.text.MessagePattern$Part);
  public java.lang.String toString();
  public static final double NO_NUMERIC_VALUE;
  public static final int ARG_NAME_NOT_NUMBER;
  public static final int ARG_NAME_NOT_VALID;
}
public final class android.icu.text.MessagePattern$ApostropheMode
  extends java.lang.Enum
{
  public static android.icu.text.MessagePattern$ApostropheMode valueOf(java.lang.String);
  public static android.icu.text.MessagePattern$ApostropheMode[] values();
  public static final android.icu.text.MessagePattern$ApostropheMode DOUBLE_OPTIONAL;
  public static final android.icu.text.MessagePattern$ApostropheMode DOUBLE_REQUIRED;
}
public final class android.icu.text.MessagePattern$ArgType
  extends java.lang.Enum
{
  public static android.icu.text.MessagePattern$ArgType valueOf(java.lang.String);
  public static android.icu.text.MessagePattern$ArgType[] values();
  public boolean hasPluralStyle();
  public static final android.icu.text.MessagePattern$ArgType CHOICE;
  public static final android.icu.text.MessagePattern$ArgType NONE;
  public static final android.icu.text.MessagePattern$ArgType PLURAL;
  public static final android.icu.text.MessagePattern$ArgType SELECT;
  public static final android.icu.text.MessagePattern$ArgType SELECTORDINAL;
  public static final android.icu.text.MessagePattern$ArgType SIMPLE;
}
public final class android.icu.text.MessagePattern$Part
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public int getIndex();
  public int getLength();
  public int getLimit();
  public int getValue();
  public int hashCode();
  public android.icu.text.MessagePattern$ArgType getArgType();
  public android.icu.text.MessagePattern$Part$Type getType();
  public java.lang.String toString();
}
public final class android.icu.text.MessagePattern$Part$Type
  extends java.lang.Enum
{
  public static android.icu.text.MessagePattern$Part$Type valueOf(java.lang.String);
  public static android.icu.text.MessagePattern$Part$Type[] values();
  public boolean hasNumericValue();
  public static final android.icu.text.MessagePattern$Part$Type ARG_DOUBLE;
  public static final android.icu.text.MessagePattern$Part$Type ARG_INT;
  public static final android.icu.text.MessagePattern$Part$Type ARG_LIMIT;
  public static final android.icu.text.MessagePattern$Part$Type ARG_NAME;
  public static final android.icu.text.MessagePattern$Part$Type ARG_NUMBER;
  public static final android.icu.text.MessagePattern$Part$Type ARG_SELECTOR;
  public static final android.icu.text.MessagePattern$Part$Type ARG_START;
  public static final android.icu.text.MessagePattern$Part$Type ARG_STYLE;
  public static final android.icu.text.MessagePattern$Part$Type ARG_TYPE;
  public static final android.icu.text.MessagePattern$Part$Type INSERT_CHAR;
  public static final android.icu.text.MessagePattern$Part$Type MSG_LIMIT;
  public static final android.icu.text.MessagePattern$Part$Type MSG_START;
  public static final android.icu.text.MessagePattern$Part$Type REPLACE_NUMBER;
  public static final android.icu.text.MessagePattern$Part$Type SKIP_SYNTAX;
}
public final class android.icu.text.Normalizer
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static int compare(char[], char[], int);
  public static int compare(char[], int, int, char[], int, int, int);
  public static int compare(int, int, int);
  public static int compare(int, java.lang.String, int);
  public static int compare(java.lang.String, java.lang.String, int);
  public static final int COMPARE_CODE_POINT_ORDER;
  public static final int COMPARE_IGNORE_CASE;
  public static final int FOLD_CASE_DEFAULT;
  public static final int FOLD_CASE_EXCLUDE_SPECIAL_I;
  public static final int INPUT_IS_FCD;
  public static final android.icu.text.Normalizer$QuickCheckResult MAYBE;
  public static final android.icu.text.Normalizer$QuickCheckResult NO;
  public static final android.icu.text.Normalizer$QuickCheckResult YES;
}
public final class android.icu.text.Normalizer$QuickCheckResult
  extends java.lang.Object
{
}
public abstract class android.icu.text.Normalizer2
  extends java.lang.Object
{
  public static android.icu.text.Normalizer2 getInstance(java.io.InputStream, java.lang.String, android.icu.text.Normalizer2$Mode);
  public static android.icu.text.Normalizer2 getNFCInstance();
  public static android.icu.text.Normalizer2 getNFDInstance();
  public static android.icu.text.Normalizer2 getNFKCCasefoldInstance();
  public static android.icu.text.Normalizer2 getNFKCInstance();
  public static android.icu.text.Normalizer2 getNFKDInstance();
  public abstract boolean hasBoundaryAfter(int);
  public abstract boolean hasBoundaryBefore(int);
  public abstract boolean isInert(int);
  public abstract boolean isNormalized(java.lang.CharSequence);
  public abstract int spanQuickCheckYes(java.lang.CharSequence);
  public abstract android.icu.text.Normalizer$QuickCheckResult quickCheck(java.lang.CharSequence);
  public abstract java.lang.Appendable normalize(java.lang.CharSequence, java.lang.Appendable);
  public abstract java.lang.String getDecomposition(int);
  public abstract java.lang.StringBuilder append(java.lang.StringBuilder, java.lang.CharSequence);
  public abstract java.lang.StringBuilder normalize(java.lang.CharSequence, java.lang.StringBuilder);
  public abstract java.lang.StringBuilder normalizeSecondAndAppend(java.lang.StringBuilder, java.lang.CharSequence);
  public int composePair(int, int);
  public int getCombiningClass(int);
  public java.lang.String getRawDecomposition(int);
  public java.lang.String normalize(java.lang.CharSequence);
}
public final class android.icu.text.Normalizer2$Mode
  extends java.lang.Enum
{
  public static android.icu.text.Normalizer2$Mode valueOf(java.lang.String);
  public static android.icu.text.Normalizer2$Mode[] values();
  public static final android.icu.text.Normalizer2$Mode COMPOSE;
  public static final android.icu.text.Normalizer2$Mode COMPOSE_CONTIGUOUS;
  public static final android.icu.text.Normalizer2$Mode DECOMPOSE;
  public static final android.icu.text.Normalizer2$Mode FCD;
}
public abstract class android.icu.text.NumberFormat
  extends android.icu.text.UFormat
{
  public static final android.icu.text.NumberFormat getCurrencyInstance();
  public static final android.icu.text.NumberFormat getInstance();
  public static final android.icu.text.NumberFormat getInstance(int);
  public static final android.icu.text.NumberFormat getIntegerInstance();
  public static final android.icu.text.NumberFormat getNumberInstance();
  public static final android.icu.text.NumberFormat getPercentInstance();
  public static final android.icu.text.NumberFormat getScientificInstance();
  public static android.icu.text.NumberFormat getCurrencyInstance(android.icu.util.ULocale);
  public static android.icu.text.NumberFormat getCurrencyInstance(java.util.Locale);
  public static android.icu.text.NumberFormat getInstance(android.icu.util.ULocale);
  public static android.icu.text.NumberFormat getInstance(android.icu.util.ULocale, int);
  public static android.icu.text.NumberFormat getInstance(java.util.Locale);
  public static android.icu.text.NumberFormat getInstance(java.util.Locale, int);
  public static android.icu.text.NumberFormat getIntegerInstance(android.icu.util.ULocale);
  public static android.icu.text.NumberFormat getIntegerInstance(java.util.Locale);
  public static android.icu.text.NumberFormat getNumberInstance(android.icu.util.ULocale);
  public static android.icu.text.NumberFormat getNumberInstance(java.util.Locale);
  public static android.icu.text.NumberFormat getPercentInstance(android.icu.util.ULocale);
  public static android.icu.text.NumberFormat getPercentInstance(java.util.Locale);
  public static android.icu.text.NumberFormat getScientificInstance(android.icu.util.ULocale);
  public static android.icu.text.NumberFormat getScientificInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public void <init>();
  public final java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public final java.lang.String format(android.icu.math.BigDecimal);
  public final java.lang.String format(android.icu.util.CurrencyAmount);
  public final java.lang.String format(double);
  public final java.lang.String format(java.math.BigDecimal);
  public final java.lang.String format(java.math.BigInteger);
  public final java.lang.String format(long);
  public abstract java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public abstract java.lang.StringBuffer format(android.icu.math.BigDecimal, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract java.lang.StringBuffer format(java.math.BigDecimal, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract java.lang.StringBuffer format(java.math.BigInteger, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public boolean equals(java.lang.Object);
  public boolean isGroupingUsed();
  public boolean isParseIntegerOnly();
  public boolean isParseStrict();
  public int getMaximumFractionDigits();
  public int getMaximumIntegerDigits();
  public int getMinimumFractionDigits();
  public int getMinimumIntegerDigits();
  public int getRoundingMode();
  public int hashCode();
  public void setContext(android.icu.text.DisplayContext);
  public void setCurrency(android.icu.util.Currency);
  public void setGroupingUsed(boolean);
  public void setMaximumFractionDigits(int);
  public void setMaximumIntegerDigits(int);
  public void setMinimumFractionDigits(int);
  public void setMinimumIntegerDigits(int);
  public void setParseIntegerOnly(boolean);
  public void setParseStrict(boolean);
  public void setRoundingMode(int);
  public android.icu.text.DisplayContext getContext(android.icu.text.DisplayContext$Type);
  public android.icu.util.Currency getCurrency();
  public android.icu.util.CurrencyAmount parseCurrency(java.lang.CharSequence, java.text.ParsePosition);
  public java.lang.Number parse(java.lang.String)  throws java.text.ParseException;
  public java.lang.Object clone();
  public java.lang.StringBuffer format(android.icu.util.CurrencyAmount, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  protected static java.lang.String getPattern(android.icu.util.ULocale, int);
  public static final int ACCOUNTINGCURRENCYSTYLE;
  public static final int CASHCURRENCYSTYLE;
  public static final int CURRENCYSTYLE;
  public static final int FRACTION_FIELD;
  public static final int INTEGERSTYLE;
  public static final int INTEGER_FIELD;
  public static final int ISOCURRENCYSTYLE;
  public static final int NUMBERSTYLE;
  public static final int PERCENTSTYLE;
  public static final int PLURALCURRENCYSTYLE;
  public static final int SCIENTIFICSTYLE;
}
public class android.icu.text.NumberFormat$Field
  extends java.text.Format$Field
{
  protected void <init>(java.lang.String);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  public static final android.icu.text.NumberFormat$Field CURRENCY;
  public static final android.icu.text.NumberFormat$Field DECIMAL_SEPARATOR;
  public static final android.icu.text.NumberFormat$Field EXPONENT;
  public static final android.icu.text.NumberFormat$Field EXPONENT_SIGN;
  public static final android.icu.text.NumberFormat$Field EXPONENT_SYMBOL;
  public static final android.icu.text.NumberFormat$Field FRACTION;
  public static final android.icu.text.NumberFormat$Field GROUPING_SEPARATOR;
  public static final android.icu.text.NumberFormat$Field INTEGER;
  public static final android.icu.text.NumberFormat$Field PERCENT;
  public static final android.icu.text.NumberFormat$Field PERMILLE;
  public static final android.icu.text.NumberFormat$Field SIGN;
}
public class android.icu.text.NumberingSystem
  extends java.lang.Object
{
  public static boolean isValidDigitString(java.lang.String);
  public static android.icu.text.NumberingSystem getInstance();
  public static android.icu.text.NumberingSystem getInstance(android.icu.util.ULocale);
  public static android.icu.text.NumberingSystem getInstance(int, boolean, java.lang.String);
  public static android.icu.text.NumberingSystem getInstance(java.util.Locale);
  public static android.icu.text.NumberingSystem getInstanceByName(java.lang.String);
  public static java.lang.String[] getAvailableNames();
  public void <init>();
  public boolean isAlgorithmic();
  public int getRadix();
  public java.lang.String getDescription();
  public java.lang.String getName();
}
public class android.icu.text.PluralFormat
  extends android.icu.text.UFormat
{
  public void <init>();
  public void <init>(android.icu.text.PluralRules);
  public void <init>(android.icu.text.PluralRules, java.lang.String);
  public void <init>(android.icu.util.ULocale);
  public void <init>(android.icu.util.ULocale, android.icu.text.PluralRules$PluralType);
  public void <init>(android.icu.util.ULocale, android.icu.text.PluralRules$PluralType, java.lang.String);
  public void <init>(android.icu.util.ULocale, android.icu.text.PluralRules);
  public void <init>(android.icu.util.ULocale, android.icu.text.PluralRules, java.lang.String);
  public void <init>(android.icu.util.ULocale, java.lang.String);
  public void <init>(java.lang.String);
  public void <init>(java.util.Locale);
  public void <init>(java.util.Locale, android.icu.text.PluralRules$PluralType);
  public void <init>(java.util.Locale, android.icu.text.PluralRules);
  public final java.lang.String format(double);
  public boolean equals(android.icu.text.PluralFormat);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void applyPattern(java.lang.String);
  public void setNumberFormat(android.icu.text.NumberFormat);
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.String toPattern();
  public java.lang.String toString();
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
}
public class android.icu.text.PluralRules
  extends java.lang.Object
  implements java.io.Serializable
{
  public static android.icu.text.PluralRules createRules(java.lang.String);
  public static android.icu.text.PluralRules forLocale(android.icu.util.ULocale);
  public static android.icu.text.PluralRules forLocale(android.icu.util.ULocale, android.icu.text.PluralRules$PluralType);
  public static android.icu.text.PluralRules forLocale(java.util.Locale);
  public static android.icu.text.PluralRules forLocale(java.util.Locale, android.icu.text.PluralRules$PluralType);
  public static android.icu.text.PluralRules parseDescription(java.lang.String)  throws java.text.ParseException;
  public boolean equals(android.icu.text.PluralRules);
  public boolean equals(java.lang.Object);
  public double getUniqueKeywordValue(java.lang.String);
  public java.lang.String select(double);
  public java.lang.String toString();
  public java.util.Collection getAllKeywordValues(java.lang.String);
  public java.util.Collection getSamples(java.lang.String);
  public java.util.Set getKeywords();
  public static final double NO_UNIQUE_VALUE;
  public static final android.icu.text.PluralRules DEFAULT;
  public static final java.lang.String KEYWORD_FEW;
  public static final java.lang.String KEYWORD_MANY;
  public static final java.lang.String KEYWORD_ONE;
  public static final java.lang.String KEYWORD_OTHER;
  public static final java.lang.String KEYWORD_TWO;
  public static final java.lang.String KEYWORD_ZERO;
}
public final class android.icu.text.PluralRules$PluralType
  extends java.lang.Enum
{
  public static android.icu.text.PluralRules$PluralType valueOf(java.lang.String);
  public static android.icu.text.PluralRules$PluralType[] values();
  public static final android.icu.text.PluralRules$PluralType CARDINAL;
  public static final android.icu.text.PluralRules$PluralType ORDINAL;
}
public final class android.icu.text.RelativeDateTimeFormatter
  extends java.lang.Object
{
  public static android.icu.text.RelativeDateTimeFormatter getInstance();
  public static android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale);
  public static android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale, android.icu.text.NumberFormat);
  public static android.icu.text.RelativeDateTimeFormatter getInstance(android.icu.util.ULocale, android.icu.text.NumberFormat, android.icu.text.RelativeDateTimeFormatter$Style, android.icu.text.DisplayContext);
  public static android.icu.text.RelativeDateTimeFormatter getInstance(java.util.Locale);
  public static android.icu.text.RelativeDateTimeFormatter getInstance(java.util.Locale, android.icu.text.NumberFormat);
  public android.icu.text.DisplayContext getCapitalizationContext();
  public android.icu.text.NumberFormat getNumberFormat();
  public android.icu.text.RelativeDateTimeFormatter$Style getFormatStyle();
  public java.lang.String combineDateAndTime(java.lang.String, java.lang.String);
  public java.lang.String format(android.icu.text.RelativeDateTimeFormatter$Direction, android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit);
  public java.lang.String format(double, android.icu.text.RelativeDateTimeFormatter$Direction, android.icu.text.RelativeDateTimeFormatter$RelativeUnit);
}
public final class android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit
  extends java.lang.Enum
{
  public static android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit valueOf(java.lang.String);
  public static android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit[] values();
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit DAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit FRIDAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit MONDAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit MONTH;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit NOW;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit SATURDAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit SUNDAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit THURSDAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit TUESDAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit WEDNESDAY;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit WEEK;
  public static final android.icu.text.RelativeDateTimeFormatter$AbsoluteUnit YEAR;
}
public final class android.icu.text.RelativeDateTimeFormatter$Direction
  extends java.lang.Enum
{
  public static android.icu.text.RelativeDateTimeFormatter$Direction valueOf(java.lang.String);
  public static android.icu.text.RelativeDateTimeFormatter$Direction[] values();
  public static final android.icu.text.RelativeDateTimeFormatter$Direction LAST;
  public static final android.icu.text.RelativeDateTimeFormatter$Direction LAST_2;
  public static final android.icu.text.RelativeDateTimeFormatter$Direction NEXT;
  public static final android.icu.text.RelativeDateTimeFormatter$Direction NEXT_2;
  public static final android.icu.text.RelativeDateTimeFormatter$Direction PLAIN;
  public static final android.icu.text.RelativeDateTimeFormatter$Direction THIS;
}
public final class android.icu.text.RelativeDateTimeFormatter$RelativeUnit
  extends java.lang.Enum
{
  public static android.icu.text.RelativeDateTimeFormatter$RelativeUnit valueOf(java.lang.String);
  public static android.icu.text.RelativeDateTimeFormatter$RelativeUnit[] values();
  public static final android.icu.text.RelativeDateTimeFormatter$RelativeUnit DAYS;
  public static final android.icu.text.RelativeDateTimeFormatter$RelativeUnit HOURS;
  public static final android.icu.text.RelativeDateTimeFormatter$RelativeUnit MINUTES;
  public static final android.icu.text.RelativeDateTimeFormatter$RelativeUnit MONTHS;
  public static final android.icu.text.RelativeDateTimeFormatter$RelativeUnit SECONDS;
  public static final android.icu.text.RelativeDateTimeFormatter$RelativeUnit WEEKS;
  public static final android.icu.text.RelativeDateTimeFormatter$RelativeUnit YEARS;
}
public final class android.icu.text.RelativeDateTimeFormatter$Style
  extends java.lang.Enum
{
  public static android.icu.text.RelativeDateTimeFormatter$Style valueOf(java.lang.String);
  public static android.icu.text.RelativeDateTimeFormatter$Style[] values();
  public static final android.icu.text.RelativeDateTimeFormatter$Style LONG;
  public static final android.icu.text.RelativeDateTimeFormatter$Style NARROW;
  public static final android.icu.text.RelativeDateTimeFormatter$Style SHORT;
}
public interface android.icu.text.Replaceable
{
  public abstract boolean hasMetaData();
  public abstract char charAt(int);
  public abstract int char32At(int);
  public abstract int length();
  public abstract void copy(int, int, int);
  public abstract void getChars(int, int, char[], int);
  public abstract void replace(int, int, char[], int, int);
  public abstract void replace(int, int, java.lang.String);
}
public final class android.icu.text.RuleBasedCollator
  extends android.icu.text.Collator
{
  public void <init>(java.lang.String)  throws java.lang.Exception;
  public final void setCaseFirstDefault();
  public boolean equals(java.lang.Object);
  public boolean getNumericCollation();
  public boolean isAlternateHandlingShifted();
  public boolean isCaseLevel();
  public boolean isFrenchCollation();
  public boolean isFrozen();
  public boolean isLowerCaseFirst();
  public boolean isUpperCaseFirst();
  public int compare(java.lang.String, java.lang.String);
  public int getDecomposition();
  public int getMaxVariable();
  public int getStrength();
  public int getVariableTop();
  public int hashCode();
  public void getContractionsAndExpansions(android.icu.text.UnicodeSet, android.icu.text.UnicodeSet, boolean)  throws java.lang.Exception;
  public void setAlternateHandlingDefault();
  public void setAlternateHandlingShifted(boolean);
  public void setCaseLevel(boolean);
  public void setCaseLevelDefault();
  public void setDecomposition(int);
  public void setDecompositionDefault();
  public void setFrenchCollation(boolean);
  public void setFrenchCollationDefault();
  public void setLowerCaseFirst(boolean);
  public void setNumericCollation(boolean);
  public void setNumericCollationDefault();
  public void setReorderCodes(int[]);
  public void setStrength(int);
  public void setStrengthDefault();
  public void setUpperCaseFirst(boolean);
  public android.icu.text.CollationElementIterator getCollationElementIterator(android.icu.text.UCharacterIterator);
  public android.icu.text.CollationElementIterator getCollationElementIterator(java.lang.String);
  public android.icu.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator);
  public android.icu.text.CollationKey getCollationKey(java.lang.String);
  public android.icu.text.Collator cloneAsThawed();
  public android.icu.text.Collator freeze();
  public android.icu.text.Collator setMaxVariable(int);
  public android.icu.text.RuleBasedCollator cloneAsThawed();
  public android.icu.text.RuleBasedCollator setMaxVariable(int);
  public android.icu.text.UnicodeSet getTailoredSet();
  public android.icu.util.VersionInfo getUCAVersion();
  public android.icu.util.VersionInfo getVersion();
  public int[] getReorderCodes();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  public java.lang.String getRules();
  public java.lang.String getRules(boolean);
}
public abstract class android.icu.text.SearchIterator
  extends java.lang.Object
{
  public final int first();
  public final int following(int);
  public final int last();
  public final int preceding(int);
  public abstract int getIndex();
  public boolean isOverlapping();
  public int getMatchLength();
  public int getMatchStart();
  public int next();
  public int previous();
  public void reset();
  public void setBreakIterator(android.icu.text.BreakIterator);
  public void setElementComparisonType(android.icu.text.SearchIterator$ElementComparisonType);
  public void setIndex(int);
  public void setOverlapping(boolean);
  public void setTarget(java.text.CharacterIterator);
  public android.icu.text.BreakIterator getBreakIterator();
  public android.icu.text.SearchIterator$ElementComparisonType getElementComparisonType();
  public java.lang.String getMatchedText();
  public java.text.CharacterIterator getTarget();
  protected void <init>(java.text.CharacterIterator, android.icu.text.BreakIterator);
  protected abstract int handleNext(int);
  protected abstract int handlePrevious(int);
  protected void setMatchLength(int);
  public static final int DONE;
  protected int matchLength;
  protected android.icu.text.BreakIterator breakIterator;
  protected java.text.CharacterIterator targetText;
}
public final class android.icu.text.SearchIterator$ElementComparisonType
  extends java.lang.Enum
{
  public static android.icu.text.SearchIterator$ElementComparisonType valueOf(java.lang.String);
  public static android.icu.text.SearchIterator$ElementComparisonType[] values();
  public static final android.icu.text.SearchIterator$ElementComparisonType ANY_BASE_WEIGHT_IS_WILDCARD;
  public static final android.icu.text.SearchIterator$ElementComparisonType PATTERN_BASE_WEIGHT_IS_WILDCARD;
  public static final android.icu.text.SearchIterator$ElementComparisonType STANDARD_ELEMENT_COMPARISON;
}
public class android.icu.text.SelectFormat
  extends java.text.Format
{
  public void <init>(java.lang.String);
  public final java.lang.String format(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void applyPattern(java.lang.String);
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.String toPattern();
  public java.lang.String toString();
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
}
public class android.icu.text.SimpleDateFormat
  extends android.icu.text.DateFormat
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, android.icu.text.DateFormatSymbols);
  public void <init>(java.lang.String, android.icu.util.ULocale);
  public void <init>(java.lang.String, java.lang.String, android.icu.util.ULocale);
  public void <init>(java.lang.String, java.util.Locale);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void applyLocalizedPattern(java.lang.String);
  public void applyPattern(java.lang.String);
  public void parse(java.lang.String, android.icu.util.Calendar, java.text.ParsePosition);
  public void set2DigitYearStart(java.util.Date);
  public void setContext(android.icu.text.DisplayContext);
  public void setDateFormatSymbols(android.icu.text.DateFormatSymbols);
  public void setNumberFormat(android.icu.text.NumberFormat);
  public void setNumberFormat(java.lang.String, android.icu.text.NumberFormat);
  public void setTimeZoneFormat(android.icu.text.TimeZoneFormat);
  public android.icu.text.DateFormatSymbols getDateFormatSymbols();
  public android.icu.text.NumberFormat getNumberFormat(char);
  public android.icu.text.TimeZoneFormat getTimeZoneFormat();
  public java.lang.Object clone();
  public java.lang.String toLocalizedPattern();
  public java.lang.String toPattern();
  public java.lang.StringBuffer format(android.icu.util.Calendar, java.lang.StringBuffer, java.text.FieldPosition);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.util.Date get2DigitYearStart();
  protected int matchQuarterString(java.lang.String, int, int, java.lang.String[], android.icu.util.Calendar);
  protected int matchString(java.lang.String, int, int, java.lang.String[], android.icu.util.Calendar);
  protected int subParse(java.lang.String, int, char, int, boolean, boolean, boolean[], android.icu.util.Calendar);
  protected android.icu.text.DateFormat$Field patternCharToDateFormatField(char);
  protected android.icu.text.DateFormatSymbols getSymbols();
  protected java.lang.String subFormat(char, int, int, java.text.FieldPosition, android.icu.text.DateFormatSymbols, android.icu.util.Calendar)  throws java.lang.IllegalArgumentException;
  protected java.lang.String zeroPaddingNumber(long, int, int);
}
public class android.icu.text.StringPrepParseException
  extends java.text.ParseException
{
  public void <init>(java.lang.String, int);
  public void <init>(java.lang.String, int, java.lang.String, int);
  public void <init>(java.lang.String, int, java.lang.String, int, int);
  public boolean equals(java.lang.Object);
  public int getError();
  public java.lang.String toString();
  public static final int ACE_PREFIX_ERROR;
  public static final int BUFFER_OVERFLOW_ERROR;
  public static final int CHECK_BIDI_ERROR;
  public static final int DOMAIN_NAME_TOO_LONG_ERROR;
  public static final int ILLEGAL_CHAR_FOUND;
  public static final int INVALID_CHAR_FOUND;
  public static final int LABEL_TOO_LONG_ERROR;
  public static final int PROHIBITED_ERROR;
  public static final int STD3_ASCII_RULES_ERROR;
  public static final int UNASSIGNED_ERROR;
  public static final int VERIFICATION_ERROR;
  public static final int ZERO_LENGTH_LABEL;
}
public final class android.icu.text.StringSearch
  extends android.icu.text.SearchIterator
{
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.text.CharacterIterator, android.icu.text.RuleBasedCollator);
  public void <init>(java.lang.String, java.text.CharacterIterator, android.icu.text.RuleBasedCollator, android.icu.text.BreakIterator);
  public void <init>(java.lang.String, java.text.CharacterIterator, android.icu.util.ULocale);
  public void <init>(java.lang.String, java.text.CharacterIterator, java.util.Locale);
  public boolean isCanonical();
  public int getIndex();
  public void reset();
  public void setCanonical(boolean);
  public void setCollator(android.icu.text.RuleBasedCollator);
  public void setIndex(int);
  public void setPattern(java.lang.String);
  public void setTarget(java.text.CharacterIterator);
  public android.icu.text.RuleBasedCollator getCollator();
  public java.lang.String getPattern();
  protected int handleNext(int);
  protected int handlePrevious(int);
}
public interface android.icu.text.SymbolTable
{
  public abstract android.icu.text.UnicodeMatcher lookupMatcher(int);
  public abstract char[] lookup(java.lang.String);
  public abstract java.lang.String parseReference(java.lang.String, java.text.ParsePosition, int);
  public static final char SYMBOL_REF;
}
public class android.icu.text.TimeZoneFormat
  extends android.icu.text.UFormat
  implements android.icu.util.Freezable, java.io.Serializable
{
  public static android.icu.text.TimeZoneFormat getInstance(android.icu.util.ULocale);
  public static android.icu.text.TimeZoneFormat getInstance(java.util.Locale);
  public final int parseOffsetISO8601(java.lang.String, java.text.ParsePosition);
  public final android.icu.util.TimeZone parse(java.lang.String)  throws java.text.ParseException;
  public final android.icu.util.TimeZone parse(java.lang.String, java.text.ParsePosition);
  public final java.lang.String format(android.icu.text.TimeZoneFormat$Style, android.icu.util.TimeZone, long);
  public final java.lang.String formatOffsetISO8601Basic(int, boolean, boolean, boolean);
  public final java.lang.String formatOffsetISO8601Extended(int, boolean, boolean, boolean);
  public boolean isFrozen();
  public int parseOffsetLocalizedGMT(java.lang.String, java.text.ParsePosition);
  public int parseOffsetShortLocalizedGMT(java.lang.String, java.text.ParsePosition);
  public android.icu.text.TimeZoneFormat cloneAsThawed();
  public android.icu.text.TimeZoneFormat freeze();
  public android.icu.text.TimeZoneFormat setDefaultParseOptions(java.util.EnumSet);
  public android.icu.text.TimeZoneFormat setGMTOffsetDigits(java.lang.String);
  public android.icu.text.TimeZoneFormat setGMTOffsetPattern(android.icu.text.TimeZoneFormat$GMTOffsetPatternType, java.lang.String);
  public android.icu.text.TimeZoneFormat setGMTPattern(java.lang.String);
  public android.icu.text.TimeZoneFormat setGMTZeroFormat(java.lang.String);
  public android.icu.text.TimeZoneFormat setTimeZoneNames(android.icu.text.TimeZoneNames);
  public android.icu.text.TimeZoneNames getTimeZoneNames();
  public android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat$Style, java.lang.String, java.text.ParsePosition, android.icu.util.Output);
  public android.icu.util.TimeZone parse(android.icu.text.TimeZoneFormat$Style, java.lang.String, java.text.ParsePosition, java.util.EnumSet, android.icu.util.Output);
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.String format(android.icu.text.TimeZoneFormat$Style, android.icu.util.TimeZone, long, android.icu.util.Output);
  public java.lang.String formatOffsetLocalizedGMT(int);
  public java.lang.String formatOffsetShortLocalizedGMT(int);
  public java.lang.String getGMTOffsetDigits();
  public java.lang.String getGMTOffsetPattern(android.icu.text.TimeZoneFormat$GMTOffsetPatternType);
  public java.lang.String getGMTPattern();
  public java.lang.String getGMTZeroFormat();
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.util.EnumSet getDefaultParseOptions();
  protected void <init>(android.icu.util.ULocale);
}
public final class android.icu.text.TimeZoneFormat$GMTOffsetPatternType
  extends java.lang.Enum
{
  public static android.icu.text.TimeZoneFormat$GMTOffsetPatternType valueOf(java.lang.String);
  public static android.icu.text.TimeZoneFormat$GMTOffsetPatternType[] values();
  public static final android.icu.text.TimeZoneFormat$GMTOffsetPatternType NEGATIVE_H;
  public static final android.icu.text.TimeZoneFormat$GMTOffsetPatternType NEGATIVE_HM;
  public static final android.icu.text.TimeZoneFormat$GMTOffsetPatternType NEGATIVE_HMS;
  public static final android.icu.text.TimeZoneFormat$GMTOffsetPatternType POSITIVE_H;
  public static final android.icu.text.TimeZoneFormat$GMTOffsetPatternType POSITIVE_HM;
  public static final android.icu.text.TimeZoneFormat$GMTOffsetPatternType POSITIVE_HMS;
}
public final class android.icu.text.TimeZoneFormat$ParseOption
  extends java.lang.Enum
{
  public static android.icu.text.TimeZoneFormat$ParseOption valueOf(java.lang.String);
  public static android.icu.text.TimeZoneFormat$ParseOption[] values();
  public static final android.icu.text.TimeZoneFormat$ParseOption ALL_STYLES;
  public static final android.icu.text.TimeZoneFormat$ParseOption TZ_DATABASE_ABBREVIATIONS;
}
public final class android.icu.text.TimeZoneFormat$Style
  extends java.lang.Enum
{
  public static android.icu.text.TimeZoneFormat$Style valueOf(java.lang.String);
  public static android.icu.text.TimeZoneFormat$Style[] values();
  public static final android.icu.text.TimeZoneFormat$Style EXEMPLAR_LOCATION;
  public static final android.icu.text.TimeZoneFormat$Style GENERIC_LOCATION;
  public static final android.icu.text.TimeZoneFormat$Style GENERIC_LONG;
  public static final android.icu.text.TimeZoneFormat$Style GENERIC_SHORT;
  public static final android.icu.text.TimeZoneFormat$Style ISO_BASIC_FIXED;
  public static final android.icu.text.TimeZoneFormat$Style ISO_BASIC_FULL;
  public static final android.icu.text.TimeZoneFormat$Style ISO_BASIC_LOCAL_FIXED;
  public static final android.icu.text.TimeZoneFormat$Style ISO_BASIC_LOCAL_FULL;
  public static final android.icu.text.TimeZoneFormat$Style ISO_BASIC_LOCAL_SHORT;
  public static final android.icu.text.TimeZoneFormat$Style ISO_BASIC_SHORT;
  public static final android.icu.text.TimeZoneFormat$Style ISO_EXTENDED_FIXED;
  public static final android.icu.text.TimeZoneFormat$Style ISO_EXTENDED_FULL;
  public static final android.icu.text.TimeZoneFormat$Style ISO_EXTENDED_LOCAL_FIXED;
  public static final android.icu.text.TimeZoneFormat$Style ISO_EXTENDED_LOCAL_FULL;
  public static final android.icu.text.TimeZoneFormat$Style LOCALIZED_GMT;
  public static final android.icu.text.TimeZoneFormat$Style LOCALIZED_GMT_SHORT;
  public static final android.icu.text.TimeZoneFormat$Style SPECIFIC_LONG;
  public static final android.icu.text.TimeZoneFormat$Style SPECIFIC_SHORT;
  public static final android.icu.text.TimeZoneFormat$Style ZONE_ID;
  public static final android.icu.text.TimeZoneFormat$Style ZONE_ID_SHORT;
}
public final class android.icu.text.TimeZoneFormat$TimeType
  extends java.lang.Enum
{
  public static android.icu.text.TimeZoneFormat$TimeType valueOf(java.lang.String);
  public static android.icu.text.TimeZoneFormat$TimeType[] values();
  public static final android.icu.text.TimeZoneFormat$TimeType DAYLIGHT;
  public static final android.icu.text.TimeZoneFormat$TimeType STANDARD;
  public static final android.icu.text.TimeZoneFormat$TimeType UNKNOWN;
}
public abstract class android.icu.text.TimeZoneNames
  extends java.lang.Object
  implements java.io.Serializable
{
  public static android.icu.text.TimeZoneNames getInstance(android.icu.util.ULocale);
  public static android.icu.text.TimeZoneNames getInstance(java.util.Locale);
  public static android.icu.text.TimeZoneNames getTZDBInstance(android.icu.util.ULocale);
  public final java.lang.String getDisplayName(java.lang.String, android.icu.text.TimeZoneNames$NameType, long);
  public abstract java.lang.String getMetaZoneDisplayName(java.lang.String, android.icu.text.TimeZoneNames$NameType);
  public abstract java.lang.String getMetaZoneID(java.lang.String, long);
  public abstract java.lang.String getReferenceZoneID(java.lang.String, java.lang.String);
  public abstract java.lang.String getTimeZoneDisplayName(java.lang.String, android.icu.text.TimeZoneNames$NameType);
  public abstract java.util.Set getAvailableMetaZoneIDs();
  public abstract java.util.Set getAvailableMetaZoneIDs(java.lang.String);
  public java.lang.String getExemplarLocationName(java.lang.String);
}
public final class android.icu.text.TimeZoneNames$NameType
  extends java.lang.Enum
{
  public static android.icu.text.TimeZoneNames$NameType valueOf(java.lang.String);
  public static android.icu.text.TimeZoneNames$NameType[] values();
  public static final android.icu.text.TimeZoneNames$NameType EXEMPLAR_LOCATION;
  public static final android.icu.text.TimeZoneNames$NameType LONG_DAYLIGHT;
  public static final android.icu.text.TimeZoneNames$NameType LONG_GENERIC;
  public static final android.icu.text.TimeZoneNames$NameType LONG_STANDARD;
  public static final android.icu.text.TimeZoneNames$NameType SHORT_DAYLIGHT;
  public static final android.icu.text.TimeZoneNames$NameType SHORT_GENERIC;
  public static final android.icu.text.TimeZoneNames$NameType SHORT_STANDARD;
}
public abstract class android.icu.text.UCharacterIterator
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static final android.icu.text.UCharacterIterator getInstance(android.icu.text.Replaceable);
  public static final android.icu.text.UCharacterIterator getInstance(char[]);
  public static final android.icu.text.UCharacterIterator getInstance(char[], int, int);
  public static final android.icu.text.UCharacterIterator getInstance(java.lang.String);
  public static final android.icu.text.UCharacterIterator getInstance(java.lang.StringBuffer);
  public static final android.icu.text.UCharacterIterator getInstance(java.text.CharacterIterator);
  public final int getText(char[]);
  public abstract int current();
  public abstract int getIndex();
  public abstract int getLength();
  public abstract int getText(char[], int);
  public abstract int next();
  public abstract int previous();
  public abstract void setIndex(int);
  public int currentCodePoint();
  public int moveCodePointIndex(int);
  public int moveIndex(int);
  public int nextCodePoint();
  public int previousCodePoint();
  public void setToLimit();
  public void setToStart();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String getText();
  public java.text.CharacterIterator getCharacterIterator();
  protected void <init>();
  public static final int DONE;
}
public abstract class android.icu.text.UFormat
  extends java.text.Format
{
  public void <init>();
}
public abstract class android.icu.text.UnicodeFilter
  extends java.lang.Object
  implements android.icu.text.UnicodeMatcher
{
  public abstract boolean contains(int);
  public int matches(android.icu.text.Replaceable, int[], int, boolean);
}
public interface android.icu.text.UnicodeMatcher
{
  public abstract boolean matchesIndexValue(int);
  public abstract int matches(android.icu.text.Replaceable, int[], int, boolean);
  public abstract void addMatchSetTo(android.icu.text.UnicodeSet);
  public abstract java.lang.String toPattern(boolean);
  public static final char ETHER;
  public static final int U_MATCH;
  public static final int U_MISMATCH;
  public static final int U_PARTIAL_MATCH;
}
public class android.icu.text.UnicodeSet
  extends android.icu.text.UnicodeFilter
  implements java.lang.Iterable, java.lang.Comparable, android.icu.util.Freezable
{
  public static android.icu.text.UnicodeSet from(java.lang.CharSequence);
  public static android.icu.text.UnicodeSet fromAll(java.lang.CharSequence);
  public void <init>();
  public void <init>(android.icu.text.UnicodeSet);
  public void <init>(int, int);
  public void <init>(int[]);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, boolean);
  public void <init>(java.lang.String, int);
  public void <init>(java.lang.String, java.text.ParsePosition, android.icu.text.SymbolTable);
  public void <init>(java.lang.String, java.text.ParsePosition, android.icu.text.SymbolTable, int);
  public final boolean contains(java.lang.CharSequence);
  public final boolean containsSome(android.icu.text.UnicodeSet);
  public final boolean containsSome(int, int);
  public final boolean containsSome(java.lang.CharSequence);
  public final boolean containsSome(java.lang.Iterable);
  public final android.icu.text.UnicodeSet add(int);
  public final android.icu.text.UnicodeSet add(java.lang.CharSequence);
  public final android.icu.text.UnicodeSet addAll(java.lang.CharSequence);
  public final android.icu.text.UnicodeSet applyPattern(java.lang.String);
  public final android.icu.text.UnicodeSet complement(int);
  public final android.icu.text.UnicodeSet complement(java.lang.CharSequence);
  public final android.icu.text.UnicodeSet complementAll(java.lang.CharSequence);
  public final android.icu.text.UnicodeSet remove(int);
  public final android.icu.text.UnicodeSet remove(java.lang.CharSequence);
  public final android.icu.text.UnicodeSet removeAll(java.lang.CharSequence);
  public final android.icu.text.UnicodeSet removeAllStrings();
  public final android.icu.text.UnicodeSet retain(int);
  public final android.icu.text.UnicodeSet retain(java.lang.CharSequence);
  public final android.icu.text.UnicodeSet retainAll(java.lang.CharSequence);
  public boolean contains(int);
  public boolean contains(int, int);
  public boolean containsAll(android.icu.text.UnicodeSet);
  public boolean containsAll(java.lang.Iterable);
  public boolean containsAll(java.lang.String);
  public boolean containsNone(android.icu.text.UnicodeSet);
  public boolean containsNone(int, int);
  public boolean containsNone(java.lang.CharSequence);
  public boolean containsNone(java.lang.Iterable);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean isFrozen();
  public boolean matchesIndexValue(int);
  public int charAt(int);
  public int compareTo(android.icu.text.UnicodeSet);
  public int compareTo(android.icu.text.UnicodeSet, android.icu.text.UnicodeSet$ComparisonStyle);
  public int compareTo(java.lang.Iterable);
  public int compareTo(java.lang.Object);
  public int getRangeCount();
  public int getRangeEnd(int);
  public int getRangeStart(int);
  public int hashCode();
  public int indexOf(int);
  public int matches(android.icu.text.Replaceable, int[], int, boolean);
  public int size();
  public int span(java.lang.CharSequence, android.icu.text.UnicodeSet$SpanCondition);
  public int span(java.lang.CharSequence, int, android.icu.text.UnicodeSet$SpanCondition);
  public int spanBack(java.lang.CharSequence, android.icu.text.UnicodeSet$SpanCondition);
  public int spanBack(java.lang.CharSequence, int, android.icu.text.UnicodeSet$SpanCondition);
  public void addMatchSetTo(android.icu.text.UnicodeSet);
  public android.icu.text.UnicodeSet add(int, int);
  public android.icu.text.UnicodeSet add(java.lang.Iterable);
  public android.icu.text.UnicodeSet addAll(android.icu.text.UnicodeSet);
  public android.icu.text.UnicodeSet addAll(int, int);
  public android.icu.text.UnicodeSet addAll(java.lang.CharSequence[]);
  public android.icu.text.UnicodeSet addAll(java.lang.Iterable);
  public android.icu.text.UnicodeSet applyIntPropertyValue(int, int);
  public android.icu.text.UnicodeSet applyPattern(java.lang.String, boolean);
  public android.icu.text.UnicodeSet applyPattern(java.lang.String, int);
  public android.icu.text.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String);
  public android.icu.text.UnicodeSet applyPropertyAlias(java.lang.String, java.lang.String, android.icu.text.SymbolTable);
  public android.icu.text.UnicodeSet clear();
  public android.icu.text.UnicodeSet cloneAsThawed();
  public android.icu.text.UnicodeSet closeOver(int);
  public android.icu.text.UnicodeSet compact();
  public android.icu.text.UnicodeSet complement();
  public android.icu.text.UnicodeSet complement(int, int);
  public android.icu.text.UnicodeSet complementAll(android.icu.text.UnicodeSet);
  public android.icu.text.UnicodeSet freeze();
  public android.icu.text.UnicodeSet remove(int, int);
  public android.icu.text.UnicodeSet removeAll(android.icu.text.UnicodeSet);
  public android.icu.text.UnicodeSet removeAll(java.lang.Iterable);
  public android.icu.text.UnicodeSet retain(int, int);
  public android.icu.text.UnicodeSet retainAll(android.icu.text.UnicodeSet);
  public android.icu.text.UnicodeSet retainAll(java.lang.Iterable);
  public android.icu.text.UnicodeSet set(android.icu.text.UnicodeSet);
  public android.icu.text.UnicodeSet set(int, int);
  public java.lang.Iterable ranges();
  public java.lang.Object clone();
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  public java.lang.String toPattern(boolean);
  public java.lang.String toString();
  public java.lang.StringBuffer _generatePattern(java.lang.StringBuffer, boolean);
  public java.lang.StringBuffer _generatePattern(java.lang.StringBuffer, boolean, boolean);
  public java.util.Collection addAllTo(java.util.Collection);
  public java.util.Collection strings();
  public java.util.Iterator iterator();
  public static final int ADD_CASE_MAPPINGS;
  public static final int CASE;
  public static final int CASE_INSENSITIVE;
  public static final int IGNORE_SPACE;
  public static final int MAX_VALUE;
  public static final int MIN_VALUE;
  public static final android.icu.text.UnicodeSet ALL_CODE_POINTS;
  public static final android.icu.text.UnicodeSet EMPTY;
}
public final class android.icu.text.UnicodeSet$ComparisonStyle
  extends java.lang.Enum
{
  public static android.icu.text.UnicodeSet$ComparisonStyle valueOf(java.lang.String);
  public static android.icu.text.UnicodeSet$ComparisonStyle[] values();
  public static final android.icu.text.UnicodeSet$ComparisonStyle LEXICOGRAPHIC;
  public static final android.icu.text.UnicodeSet$ComparisonStyle LONGER_FIRST;
  public static final android.icu.text.UnicodeSet$ComparisonStyle SHORTER_FIRST;
}
public class android.icu.text.UnicodeSet$EntryRange
  extends java.lang.Object
{
  public java.lang.String toString();
  public int codepoint;
  public int codepointEnd;
}
public final class android.icu.text.UnicodeSet$SpanCondition
  extends java.lang.Enum
{
  public static android.icu.text.UnicodeSet$SpanCondition valueOf(java.lang.String);
  public static android.icu.text.UnicodeSet$SpanCondition[] values();
  public static final android.icu.text.UnicodeSet$SpanCondition CONDITION_COUNT;
  public static final android.icu.text.UnicodeSet$SpanCondition CONTAINED;
  public static final android.icu.text.UnicodeSet$SpanCondition NOT_CONTAINED;
  public static final android.icu.text.UnicodeSet$SpanCondition SIMPLE;
}
public class android.icu.text.UnicodeSetIterator
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.icu.text.UnicodeSet);
  public boolean next();
  public boolean nextRange();
  public void reset();
  public void reset(android.icu.text.UnicodeSet);
  public java.lang.String getString();
  public static int IS_STRING;
  public int codepoint;
  public int codepointEnd;
  public java.lang.String string;
}
public class android.icu.text.UnicodeSetSpanner
  extends java.lang.Object
{
  public void <init>(android.icu.text.UnicodeSet);
  public boolean equals(java.lang.Object);
  public int countIn(java.lang.CharSequence);
  public int countIn(java.lang.CharSequence, android.icu.text.UnicodeSetSpanner$CountMethod);
  public int countIn(java.lang.CharSequence, android.icu.text.UnicodeSetSpanner$CountMethod, android.icu.text.UnicodeSet$SpanCondition);
  public int hashCode();
  public android.icu.text.UnicodeSet getUnicodeSet();
  public java.lang.CharSequence trim(java.lang.CharSequence);
  public java.lang.CharSequence trim(java.lang.CharSequence, android.icu.text.UnicodeSetSpanner$TrimOption);
  public java.lang.CharSequence trim(java.lang.CharSequence, android.icu.text.UnicodeSetSpanner$TrimOption, android.icu.text.UnicodeSet$SpanCondition);
  public java.lang.String deleteFrom(java.lang.CharSequence);
  public java.lang.String deleteFrom(java.lang.CharSequence, android.icu.text.UnicodeSet$SpanCondition);
  public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence);
  public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence, android.icu.text.UnicodeSetSpanner$CountMethod);
  public java.lang.String replaceFrom(java.lang.CharSequence, java.lang.CharSequence, android.icu.text.UnicodeSetSpanner$CountMethod, android.icu.text.UnicodeSet$SpanCondition);
}
public final class android.icu.text.UnicodeSetSpanner$CountMethod
  extends java.lang.Enum
{
  public static android.icu.text.UnicodeSetSpanner$CountMethod valueOf(java.lang.String);
  public static android.icu.text.UnicodeSetSpanner$CountMethod[] values();
  public static final android.icu.text.UnicodeSetSpanner$CountMethod MIN_ELEMENTS;
  public static final android.icu.text.UnicodeSetSpanner$CountMethod WHOLE_SPAN;
}
public final class android.icu.text.UnicodeSetSpanner$TrimOption
  extends java.lang.Enum
{
  public static android.icu.text.UnicodeSetSpanner$TrimOption valueOf(java.lang.String);
  public static android.icu.text.UnicodeSetSpanner$TrimOption[] values();
  public static final android.icu.text.UnicodeSetSpanner$TrimOption BOTH;
  public static final android.icu.text.UnicodeSetSpanner$TrimOption LEADING;
  public static final android.icu.text.UnicodeSetSpanner$TrimOption TRAILING;
}
public class android.icu.util.BuddhistCalendar
  extends android.icu.util.GregorianCalendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public java.lang.String getType();
  protected int handleComputeMonthStart(int, int, boolean);
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected void handleComputeFields(int);
  public static final int BE;
}
public abstract class android.icu.util.Calendar
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable
{
  public static final java.lang.String[] getKeywordValuesForLocale(java.lang.String, android.icu.util.ULocale, boolean);
  public static android.icu.util.Calendar getInstance();
  public static android.icu.util.Calendar getInstance(android.icu.util.TimeZone);
  public static android.icu.util.Calendar getInstance(android.icu.util.TimeZone, android.icu.util.ULocale);
  public static android.icu.util.Calendar getInstance(android.icu.util.TimeZone, java.util.Locale);
  public static android.icu.util.Calendar getInstance(android.icu.util.ULocale);
  public static android.icu.util.Calendar getInstance(java.util.Locale);
  public static android.icu.util.Calendar$WeekData getWeekDataForRegion(java.lang.String);
  public static java.util.Locale[] getAvailableLocales();
  public final boolean isSet(int);
  public final int get(int);
  public final int getFieldCount();
  public final int getGreatestMinimum(int);
  public final int getLeastMaximum(int);
  public final int getMaximum(int);
  public final int getMinimum(int);
  public final void clear();
  public final void clear(int);
  public final void roll(int, boolean);
  public final void set(int, int);
  public final void set(int, int, int);
  public final void set(int, int, int, int, int);
  public final void set(int, int, int, int, int, int);
  public final void setTime(java.util.Date);
  public final java.util.Date getTime();
  public boolean after(java.lang.Object);
  public boolean before(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEquivalentTo(android.icu.util.Calendar);
  public boolean isLenient();
  public boolean isWeekend();
  public boolean isWeekend(java.util.Date);
  public int compareTo(android.icu.util.Calendar);
  public int compareTo(java.lang.Object);
  public int fieldDifference(java.util.Date, int);
  public int getActualMaximum(int);
  public int getActualMinimum(int);
  public int getFirstDayOfWeek();
  public int getMinimalDaysInFirstWeek();
  public int getRepeatedWallTimeOption();
  public int getSkippedWallTimeOption();
  public int hashCode();
  public long getTimeInMillis();
  public void add(int, int);
  public void roll(int, int);
  public void setFirstDayOfWeek(int);
  public void setLenient(boolean);
  public void setMinimalDaysInFirstWeek(int);
  public void setRepeatedWallTimeOption(int);
  public void setSkippedWallTimeOption(int);
  public void setTimeInMillis(long);
  public void setTimeZone(android.icu.util.TimeZone);
  public android.icu.text.DateFormat getDateTimeFormat(int, int, android.icu.util.ULocale);
  public android.icu.text.DateFormat getDateTimeFormat(int, int, java.util.Locale);
  public android.icu.util.Calendar setWeekData(android.icu.util.Calendar$WeekData);
  public android.icu.util.Calendar$WeekData getWeekData();
  public android.icu.util.TimeZone getTimeZone();
  public java.lang.Object clone();
  public java.lang.String getDisplayName(android.icu.util.ULocale);
  public java.lang.String getDisplayName(java.util.Locale);
  public java.lang.String getType();
  public java.lang.String toString();
  protected static final boolean isGregorianLeapYear(int);
  protected static final int floorDivide(int, int);
  protected static final int floorDivide(int, int, int[]);
  protected static final int floorDivide(long, int, int[]);
  protected static final int gregorianMonthLength(int, int);
  protected static final int gregorianPreviousMonthLength(int, int);
  protected static final int julianDayToDayOfWeek(int);
  protected static final int millisToJulianDay(long);
  protected static final long floorDivide(long, long);
  protected static final long julianDayToMillis(int);
  protected void <init>();
  protected void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  protected void <init>(android.icu.util.TimeZone, java.util.Locale);
  protected final int getGregorianDayOfMonth();
  protected final int getGregorianDayOfYear();
  protected final int getGregorianMonth();
  protected final int getGregorianYear();
  protected final int getStamp(int);
  protected final int internalGet(int);
  protected final int internalGet(int, int);
  protected final int weekNumber(int, int);
  protected final long internalGetTimeInMillis();
  protected final void computeGregorianFields(int);
  protected final void internalSet(int, int);
  protected final void validateField(int, int, int);
  protected abstract int handleComputeMonthStart(int, int, boolean);
  protected abstract int handleGetExtendedYear();
  protected abstract int handleGetLimit(int, int);
  protected int computeGregorianMonthStart(int, int);
  protected int computeJulianDay();
  protected int computeMillisInDay();
  protected int computeZoneOffset(long, int);
  protected int getLimit(int, int);
  protected int handleComputeJulianDay(int);
  protected int handleGetMonthLength(int, int);
  protected int handleGetYearLength(int);
  protected int newerField(int, int);
  protected int newestStamp(int, int, int);
  protected int resolveFields(int[][][]);
  protected int weekNumber(int, int, int);
  protected void complete();
  protected void computeFields();
  protected void computeTime();
  protected void handleComputeFields(int);
  protected void pinField(int);
  protected void prepareGetActual(int, boolean);
  protected void validateField(int);
  protected void validateFields();
  protected android.icu.text.DateFormat handleGetDateFormat(java.lang.String, android.icu.util.ULocale);
  protected android.icu.text.DateFormat handleGetDateFormat(java.lang.String, java.lang.String, java.util.Locale);
  protected android.icu.text.DateFormat handleGetDateFormat(java.lang.String, java.util.Locale);
  protected int[] handleCreateFields();
  protected int[][][] getFieldResolutionTable();
  protected java.lang.String fieldName(int);
  public static final int AM;
  public static final int AM_PM;
  public static final int APRIL;
  public static final int AUGUST;
  public static final int DATE;
  public static final int DAY_OF_MONTH;
  public static final int DAY_OF_WEEK;
  public static final int DAY_OF_WEEK_IN_MONTH;
  public static final int DAY_OF_YEAR;
  public static final int DECEMBER;
  public static final int DOW_LOCAL;
  public static final int DST_OFFSET;
  public static final int ERA;
  public static final int EXTENDED_YEAR;
  public static final int FEBRUARY;
  public static final int FRIDAY;
  public static final int HOUR;
  public static final int HOUR_OF_DAY;
  public static final int IS_LEAP_MONTH;
  public static final int JANUARY;
  public static final int JULIAN_DAY;
  public static final int JULY;
  public static final int JUNE;
  public static final int MARCH;
  public static final int MAY;
  public static final int MILLISECOND;
  public static final int MILLISECONDS_IN_DAY;
  public static final int MINUTE;
  public static final int MONDAY;
  public static final int MONTH;
  public static final int NOVEMBER;
  public static final int OCTOBER;
  public static final int PM;
  public static final int SATURDAY;
  public static final int SECOND;
  public static final int SEPTEMBER;
  public static final int SUNDAY;
  public static final int THURSDAY;
  public static final int TUESDAY;
  public static final int UNDECIMBER;
  public static final int WALLTIME_FIRST;
  public static final int WALLTIME_LAST;
  public static final int WALLTIME_NEXT_VALID;
  public static final int WEDNESDAY;
  public static final int WEEK_OF_MONTH;
  public static final int WEEK_OF_YEAR;
  public static final int YEAR;
  public static final int YEAR_WOY;
  public static final int ZONE_OFFSET;
  protected static final int BASE_FIELD_COUNT;
  protected static final int EPOCH_JULIAN_DAY;
  protected static final int GREATEST_MINIMUM;
  protected static final int INTERNALLY_SET;
  protected static final int JAN_1_1_JULIAN_DAY;
  protected static final int LEAST_MAXIMUM;
  protected static final int MAXIMUM;
  protected static final int MAX_FIELD_COUNT;
  protected static final int MAX_JULIAN;
  protected static final int MINIMUM;
  protected static final int MINIMUM_USER_STAMP;
  protected static final int MIN_JULIAN;
  protected static final int ONE_HOUR;
  protected static final int ONE_MINUTE;
  protected static final int ONE_SECOND;
  protected static final int RESOLVE_REMAP;
  protected static final int UNSET;
  protected static final long MAX_MILLIS;
  protected static final long MIN_MILLIS;
  protected static final long ONE_DAY;
  protected static final long ONE_WEEK;
  protected static final java.util.Date MAX_DATE;
  protected static final java.util.Date MIN_DATE;
}
public final class android.icu.util.Calendar$WeekData
  extends java.lang.Object
{
  public void <init>(int, int, int, int, int, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public final int firstDayOfWeek;
  public final int minimalDaysInFirstWeek;
  public final int weekendCease;
  public final int weekendCeaseMillis;
  public final int weekendOnset;
  public final int weekendOnsetMillis;
}
public class android.icu.util.ChineseCalendar
  extends android.icu.util.Calendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int, int);
  public void <init>(int, int, int, int, int);
  public void <init>(int, int, int, int, int, int, int);
  public void <init>(int, int, int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public void add(int, int);
  public void roll(int, int);
  public java.lang.String getType();
  protected int handleComputeMonthStart(int, int, boolean);
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected int handleGetMonthLength(int, int);
  protected void handleComputeFields(int);
  protected android.icu.text.DateFormat handleGetDateFormat(java.lang.String, java.lang.String, android.icu.util.ULocale);
  protected int[][][] getFieldResolutionTable();
}
public final class android.icu.util.CopticCalendar
  extends android.icu.util.CECalendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public java.lang.String getType();
  protected int handleGetExtendedYear();
  public static final int AMSHIR;
  public static final int BABA;
  public static final int BARAMHAT;
  public static final int BARAMOUDA;
  public static final int BASHANS;
  public static final int EPEP;
  public static final int HATOR;
  public static final int KIAHK;
  public static final int MESRA;
  public static final int NASIE;
  public static final int PAONA;
  public static final int TOBA;
  public static final int TOUT;
}
public class android.icu.util.Currency
  extends android.icu.util.MeasureUnit
{
  public static final java.lang.String[] getKeywordValuesForLocale(java.lang.String, android.icu.util.ULocale, boolean);
  public static boolean isAvailable(java.lang.String, java.util.Date, java.util.Date);
  public static android.icu.util.Currency getInstance(android.icu.util.ULocale);
  public static android.icu.util.Currency getInstance(java.lang.String);
  public static android.icu.util.Currency getInstance(java.util.Locale);
  public static android.icu.util.ULocale[] getAvailableULocales();
  public static java.lang.String[] getAvailableCurrencyCodes(android.icu.util.ULocale, java.util.Date);
  public static java.lang.String[] getAvailableCurrencyCodes(java.util.Locale, java.util.Date);
  public static java.util.Locale[] getAvailableLocales();
  public static java.util.Set getAvailableCurrencies();
  public double getRoundingIncrement();
  public double getRoundingIncrement(android.icu.util.Currency$CurrencyUsage);
  public int getDefaultFractionDigits();
  public int getDefaultFractionDigits(android.icu.util.Currency$CurrencyUsage);
  public int getNumericCode();
  public java.lang.String getCurrencyCode();
  public java.lang.String getDisplayName();
  public java.lang.String getDisplayName(java.util.Locale);
  public java.lang.String getName(android.icu.util.ULocale, int, boolean[]);
  public java.lang.String getName(android.icu.util.ULocale, int, java.lang.String, boolean[]);
  public java.lang.String getName(java.util.Locale, int, boolean[]);
  public java.lang.String getName(java.util.Locale, int, java.lang.String, boolean[]);
  public java.lang.String getSymbol();
  public java.lang.String getSymbol(android.icu.util.ULocale);
  public java.lang.String getSymbol(java.util.Locale);
  public java.lang.String toString();
  protected void <init>(java.lang.String);
  public static final int LONG_NAME;
  public static final int PLURAL_LONG_NAME;
  public static final int SYMBOL_NAME;
}
public final class android.icu.util.Currency$CurrencyUsage
  extends java.lang.Enum
{
  public static android.icu.util.Currency$CurrencyUsage valueOf(java.lang.String);
  public static android.icu.util.Currency$CurrencyUsage[] values();
  public static final android.icu.util.Currency$CurrencyUsage CASH;
  public static final android.icu.util.Currency$CurrencyUsage STANDARD;
}
public class android.icu.util.CurrencyAmount
  extends android.icu.util.Measure
{
  public void <init>(double, android.icu.util.Currency);
  public void <init>(java.lang.Number, android.icu.util.Currency);
  public android.icu.util.Currency getCurrency();
}
public final class android.icu.util.DateInterval
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(long, long);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public long getFromDate();
  public long getToDate();
  public java.lang.String toString();
}
public interface android.icu.util.Freezable
  extends java.lang.Cloneable
{
  public abstract boolean isFrozen();
  public abstract java.lang.Object cloneAsThawed();
  public abstract java.lang.Object freeze();
}
public class android.icu.util.GregorianCalendar
  extends android.icu.util.Calendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Locale);
  public final java.util.Date getGregorianChange();
  public boolean isEquivalentTo(android.icu.util.Calendar);
  public boolean isLeapYear(int);
  public int getActualMaximum(int);
  public int getActualMinimum(int);
  public int hashCode();
  public void roll(int, int);
  public void setGregorianChange(java.util.Date);
  public java.lang.String getType();
  protected int handleComputeJulianDay(int);
  protected int handleComputeMonthStart(int, int, boolean);
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected int handleGetMonthLength(int, int);
  protected int handleGetYearLength(int);
  protected void handleComputeFields(int);
  public static final int AD;
  public static final int BC;
  protected boolean invertGregorian;
  protected boolean isGregorian;
}
public class android.icu.util.HebrewCalendar
  extends android.icu.util.Calendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public void add(int, int);
  public void roll(int, int);
  public java.lang.String getType();
  protected int handleComputeMonthStart(int, int, boolean);
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected int handleGetMonthLength(int, int);
  protected int handleGetYearLength(int);
  protected void handleComputeFields(int);
  public static final int ADAR;
  public static final int ADAR_1;
  public static final int AV;
  public static final int ELUL;
  public static final int HESHVAN;
  public static final int IYAR;
  public static final int KISLEV;
  public static final int NISAN;
  public static final int SHEVAT;
  public static final int SIVAN;
  public static final int TAMUZ;
  public static final int TEVET;
  public static final int TISHRI;
}
public class android.icu.util.ICUUncheckedIOException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class android.icu.util.IndianCalendar
  extends android.icu.util.Calendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public java.lang.String getType();
  protected int handleComputeMonthStart(int, int, boolean);
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected int handleGetMonthLength(int, int);
  protected int handleGetYearLength(int);
  protected void handleComputeFields(int);
  public static final int AGRAHAYANA;
  public static final int ASADHA;
  public static final int ASVINA;
  public static final int BHADRA;
  public static final int CHAITRA;
  public static final int IE;
  public static final int JYAISTHA;
  public static final int KARTIKA;
  public static final int MAGHA;
  public static final int PAUSA;
  public static final int PHALGUNA;
  public static final int SRAVANA;
  public static final int VAISAKHA;
}
public class android.icu.util.IslamicCalendar
  extends android.icu.util.Calendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public void setCalculationType(android.icu.util.IslamicCalendar$CalculationType);
  public android.icu.util.IslamicCalendar$CalculationType getCalculationType();
  public java.lang.String getType();
  protected int handleComputeMonthStart(int, int, boolean);
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected int handleGetMonthLength(int, int);
  protected int handleGetYearLength(int);
  protected void handleComputeFields(int);
  public static final int DHU_AL_HIJJAH;
  public static final int DHU_AL_QIDAH;
  public static final int JUMADA_1;
  public static final int JUMADA_2;
  public static final int MUHARRAM;
  public static final int RABI_1;
  public static final int RABI_2;
  public static final int RAJAB;
  public static final int RAMADAN;
  public static final int SAFAR;
  public static final int SHABAN;
  public static final int SHAWWAL;
}
public final class android.icu.util.IslamicCalendar$CalculationType
  extends java.lang.Enum
{
  public static android.icu.util.IslamicCalendar$CalculationType valueOf(java.lang.String);
  public static android.icu.util.IslamicCalendar$CalculationType[] values();
  public static final android.icu.util.IslamicCalendar$CalculationType ISLAMIC;
  public static final android.icu.util.IslamicCalendar$CalculationType ISLAMIC_CIVIL;
  public static final android.icu.util.IslamicCalendar$CalculationType ISLAMIC_TBLA;
  public static final android.icu.util.IslamicCalendar$CalculationType ISLAMIC_UMALQURA;
}
public class android.icu.util.JapaneseCalendar
  extends android.icu.util.GregorianCalendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public int getActualMaximum(int);
  public java.lang.String getType();
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected void handleComputeFields(int);
  public static final int CURRENT_ERA;
  public static final int HEISEI;
  public static final int MEIJI;
  public static final int SHOWA;
  public static final int TAISHO;
}
public class android.icu.util.Measure
  extends java.lang.Object
{
  public void <init>(java.lang.Number, android.icu.util.MeasureUnit);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public android.icu.util.MeasureUnit getUnit();
  public java.lang.Number getNumber();
  public java.lang.String toString();
}
public class android.icu.util.MeasureUnit
  extends java.lang.Object
  implements java.io.Serializable
{
  public static java.util.Set getAvailable();
  public static java.util.Set getAvailable(java.lang.String);
  public static java.util.Set getAvailableTypes();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String getSubtype();
  public java.lang.String getType();
  public java.lang.String toString();
  public static final android.icu.util.MeasureUnit ACRE;
  public static final android.icu.util.MeasureUnit ACRE_FOOT;
  public static final android.icu.util.MeasureUnit AMPERE;
  public static final android.icu.util.MeasureUnit ARC_MINUTE;
  public static final android.icu.util.MeasureUnit ARC_SECOND;
  public static final android.icu.util.MeasureUnit ASTRONOMICAL_UNIT;
  public static final android.icu.util.MeasureUnit BIT;
  public static final android.icu.util.MeasureUnit BUSHEL;
  public static final android.icu.util.MeasureUnit BYTE;
  public static final android.icu.util.MeasureUnit CALORIE;
  public static final android.icu.util.MeasureUnit CARAT;
  public static final android.icu.util.MeasureUnit CELSIUS;
  public static final android.icu.util.MeasureUnit CENTILITER;
  public static final android.icu.util.MeasureUnit CENTIMETER;
  public static final android.icu.util.MeasureUnit CUBIC_CENTIMETER;
  public static final android.icu.util.MeasureUnit CUBIC_FOOT;
  public static final android.icu.util.MeasureUnit CUBIC_INCH;
  public static final android.icu.util.MeasureUnit CUBIC_KILOMETER;
  public static final android.icu.util.MeasureUnit CUBIC_METER;
  public static final android.icu.util.MeasureUnit CUBIC_MILE;
  public static final android.icu.util.MeasureUnit CUBIC_YARD;
  public static final android.icu.util.MeasureUnit CUP;
  public static final android.icu.util.MeasureUnit DECILITER;
  public static final android.icu.util.MeasureUnit DECIMETER;
  public static final android.icu.util.MeasureUnit DEGREE;
  public static final android.icu.util.MeasureUnit FAHRENHEIT;
  public static final android.icu.util.MeasureUnit FATHOM;
  public static final android.icu.util.MeasureUnit FLUID_OUNCE;
  public static final android.icu.util.MeasureUnit FOODCALORIE;
  public static final android.icu.util.MeasureUnit FOOT;
  public static final android.icu.util.MeasureUnit FURLONG;
  public static final android.icu.util.MeasureUnit GALLON;
  public static final android.icu.util.MeasureUnit GIGABIT;
  public static final android.icu.util.MeasureUnit GIGABYTE;
  public static final android.icu.util.MeasureUnit GIGAHERTZ;
  public static final android.icu.util.MeasureUnit GIGAWATT;
  public static final android.icu.util.MeasureUnit GRAM;
  public static final android.icu.util.MeasureUnit G_FORCE;
  public static final android.icu.util.MeasureUnit HECTARE;
  public static final android.icu.util.MeasureUnit HECTOLITER;
  public static final android.icu.util.MeasureUnit HECTOPASCAL;
  public static final android.icu.util.MeasureUnit HERTZ;
  public static final android.icu.util.MeasureUnit HORSEPOWER;
  public static final android.icu.util.MeasureUnit INCH;
  public static final android.icu.util.MeasureUnit INCH_HG;
  public static final android.icu.util.MeasureUnit JOULE;
  public static final android.icu.util.MeasureUnit KARAT;
  public static final android.icu.util.MeasureUnit KELVIN;
  public static final android.icu.util.MeasureUnit KILOBIT;
  public static final android.icu.util.MeasureUnit KILOBYTE;
  public static final android.icu.util.MeasureUnit KILOCALORIE;
  public static final android.icu.util.MeasureUnit KILOGRAM;
  public static final android.icu.util.MeasureUnit KILOHERTZ;
  public static final android.icu.util.MeasureUnit KILOJOULE;
  public static final android.icu.util.MeasureUnit KILOMETER;
  public static final android.icu.util.MeasureUnit KILOMETER_PER_HOUR;
  public static final android.icu.util.MeasureUnit KILOWATT;
  public static final android.icu.util.MeasureUnit KILOWATT_HOUR;
  public static final android.icu.util.MeasureUnit LIGHT_YEAR;
  public static final android.icu.util.MeasureUnit LITER;
  public static final android.icu.util.MeasureUnit LITER_PER_KILOMETER;
  public static final android.icu.util.MeasureUnit LUX;
  public static final android.icu.util.MeasureUnit MEGABIT;
  public static final android.icu.util.MeasureUnit MEGABYTE;
  public static final android.icu.util.MeasureUnit MEGAHERTZ;
  public static final android.icu.util.MeasureUnit MEGALITER;
  public static final android.icu.util.MeasureUnit MEGAWATT;
  public static final android.icu.util.MeasureUnit METER;
  public static final android.icu.util.MeasureUnit METER_PER_SECOND;
  public static final android.icu.util.MeasureUnit METER_PER_SECOND_SQUARED;
  public static final android.icu.util.MeasureUnit METRIC_TON;
  public static final android.icu.util.MeasureUnit MICROGRAM;
  public static final android.icu.util.MeasureUnit MICROMETER;
  public static final android.icu.util.MeasureUnit MICROSECOND;
  public static final android.icu.util.MeasureUnit MILE;
  public static final android.icu.util.MeasureUnit MILE_PER_GALLON;
  public static final android.icu.util.MeasureUnit MILE_PER_HOUR;
  public static final android.icu.util.MeasureUnit MILLIAMPERE;
  public static final android.icu.util.MeasureUnit MILLIBAR;
  public static final android.icu.util.MeasureUnit MILLIGRAM;
  public static final android.icu.util.MeasureUnit MILLILITER;
  public static final android.icu.util.MeasureUnit MILLIMETER;
  public static final android.icu.util.MeasureUnit MILLIMETER_OF_MERCURY;
  public static final android.icu.util.MeasureUnit MILLISECOND;
  public static final android.icu.util.MeasureUnit MILLIWATT;
  public static final android.icu.util.MeasureUnit NANOMETER;
  public static final android.icu.util.MeasureUnit NANOSECOND;
  public static final android.icu.util.MeasureUnit NAUTICAL_MILE;
  public static final android.icu.util.MeasureUnit OHM;
  public static final android.icu.util.MeasureUnit OUNCE;
  public static final android.icu.util.MeasureUnit OUNCE_TROY;
  public static final android.icu.util.MeasureUnit PARSEC;
  public static final android.icu.util.MeasureUnit PICOMETER;
  public static final android.icu.util.MeasureUnit PINT;
  public static final android.icu.util.MeasureUnit POUND;
  public static final android.icu.util.MeasureUnit POUND_PER_SQUARE_INCH;
  public static final android.icu.util.MeasureUnit QUART;
  public static final android.icu.util.MeasureUnit RADIAN;
  public static final android.icu.util.MeasureUnit SQUARE_CENTIMETER;
  public static final android.icu.util.MeasureUnit SQUARE_FOOT;
  public static final android.icu.util.MeasureUnit SQUARE_INCH;
  public static final android.icu.util.MeasureUnit SQUARE_KILOMETER;
  public static final android.icu.util.MeasureUnit SQUARE_METER;
  public static final android.icu.util.MeasureUnit SQUARE_MILE;
  public static final android.icu.util.MeasureUnit SQUARE_YARD;
  public static final android.icu.util.MeasureUnit STONE;
  public static final android.icu.util.MeasureUnit TABLESPOON;
  public static final android.icu.util.MeasureUnit TEASPOON;
  public static final android.icu.util.MeasureUnit TERABIT;
  public static final android.icu.util.MeasureUnit TERABYTE;
  public static final android.icu.util.MeasureUnit TON;
  public static final android.icu.util.MeasureUnit VOLT;
  public static final android.icu.util.MeasureUnit WATT;
  public static final android.icu.util.MeasureUnit YARD;
  public static final android.icu.util.TimeUnit DAY;
  public static final android.icu.util.TimeUnit HOUR;
  public static final android.icu.util.TimeUnit MINUTE;
  public static final android.icu.util.TimeUnit MONTH;
  public static final android.icu.util.TimeUnit SECOND;
  public static final android.icu.util.TimeUnit WEEK;
  public static final android.icu.util.TimeUnit YEAR;
}
public class android.icu.util.Output
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.Object);
  public java.lang.String toString();
  public java.lang.Object value;
}
public interface android.icu.util.RangeValueIterator
{
  public abstract boolean next(android.icu.util.RangeValueIterator$Element);
  public abstract void reset();
}
public class android.icu.util.RangeValueIterator$Element
  extends java.lang.Object
{
  public void <init>();
  public int limit;
  public int start;
  public int value;
}
public class android.icu.util.TaiwanCalendar
  extends android.icu.util.GregorianCalendar
{
  public void <init>();
  public void <init>(android.icu.util.TimeZone);
  public void <init>(android.icu.util.TimeZone, android.icu.util.ULocale);
  public void <init>(android.icu.util.TimeZone, java.util.Locale);
  public void <init>(android.icu.util.ULocale);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Date);
  public void <init>(java.util.Locale);
  public java.lang.String getType();
  protected int handleGetExtendedYear();
  protected int handleGetLimit(int, int);
  protected void handleComputeFields(int);
  public static final int BEFORE_MINGUO;
  public static final int MINGUO;
}
public class android.icu.util.TimeUnit
  extends android.icu.util.MeasureUnit
{
  public static android.icu.util.TimeUnit[] values();
}
public abstract class android.icu.util.TimeZone
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable, android.icu.util.Freezable
{
  public static int countEquivalentIDs(java.lang.String);
  public static android.icu.util.TimeZone getDefault();
  public static android.icu.util.TimeZone getFrozenTimeZone(java.lang.String);
  public static android.icu.util.TimeZone getTimeZone(java.lang.String);
  public static android.icu.util.TimeZone getTimeZone(java.lang.String, int);
  public static java.lang.String getCanonicalID(java.lang.String);
  public static java.lang.String getCanonicalID(java.lang.String, boolean[]);
  public static java.lang.String getEquivalentID(java.lang.String, int);
  public static java.lang.String getIDForWindowsID(java.lang.String, java.lang.String);
  public static java.lang.String getRegion(java.lang.String);
  public static java.lang.String getTZDataVersion();
  public static java.lang.String getWindowsID(java.lang.String);
  public static java.lang.String[] getAvailableIDs();
  public static java.lang.String[] getAvailableIDs(int);
  public static java.lang.String[] getAvailableIDs(java.lang.String);
  public static java.util.Set getAvailableIDs(android.icu.util.TimeZone$SystemTimeZoneType, java.lang.String, java.lang.Integer);
  public void <init>();
  public final java.lang.String getDisplayName();
  public final java.lang.String getDisplayName(android.icu.util.ULocale);
  public final java.lang.String getDisplayName(boolean, int);
  public final java.lang.String getDisplayName(java.util.Locale);
  public abstract boolean inDaylightTime(java.util.Date);
  public abstract boolean useDaylightTime();
  public abstract int getOffset(int, int, int, int, int, int);
  public abstract int getRawOffset();
  public abstract void setRawOffset(int);
  public boolean equals(java.lang.Object);
  public boolean hasSameRules(android.icu.util.TimeZone);
  public boolean isFrozen();
  public boolean observesDaylightTime();
  public int getDSTSavings();
  public int getOffset(long);
  public int hashCode();
  public void getOffset(long, boolean, int[]);
  public void setID(java.lang.String);
  public android.icu.util.TimeZone cloneAsThawed();
  public android.icu.util.TimeZone freeze();
  public java.lang.Object clone();
  public java.lang.Object cloneAsThawed();
  public java.lang.Object freeze();
  public java.lang.String getDisplayName(boolean, int, android.icu.util.ULocale);
  public java.lang.String getDisplayName(boolean, int, java.util.Locale);
  public java.lang.String getID();
  public static final int GENERIC_LOCATION;
  public static final int LONG;
  public static final int LONG_GENERIC;
  public static final int LONG_GMT;
  public static final int SHORT;
  public static final int SHORT_COMMONLY_USED;
  public static final int SHORT_GENERIC;
  public static final int SHORT_GMT;
  public static final android.icu.util.TimeZone GMT_ZONE;
  public static final android.icu.util.TimeZone UNKNOWN_ZONE;
  public static final java.lang.String UNKNOWN_ZONE_ID;
}
public final class android.icu.util.TimeZone$SystemTimeZoneType
  extends java.lang.Enum
{
  public static android.icu.util.TimeZone$SystemTimeZoneType valueOf(java.lang.String);
  public static android.icu.util.TimeZone$SystemTimeZoneType[] values();
}
public final class android.icu.util.ULocale
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Comparable
{
  public static android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[], android.icu.util.ULocale[], boolean[]);
  public static android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[], boolean[]);
  public static android.icu.util.ULocale acceptLanguage(java.lang.String, android.icu.util.ULocale[], boolean[]);
  public static android.icu.util.ULocale acceptLanguage(java.lang.String, boolean[]);
  public static android.icu.util.ULocale addLikelySubtags(android.icu.util.ULocale);
  public static android.icu.util.ULocale createCanonical(java.lang.String);
  public static android.icu.util.ULocale forLanguageTag(java.lang.String);
  public static android.icu.util.ULocale forLocale(java.util.Locale);
  public static android.icu.util.ULocale getDefault();
  public static android.icu.util.ULocale getDefault(android.icu.util.ULocale$Category);
  public static android.icu.util.ULocale minimizeSubtags(android.icu.util.ULocale);
  public static android.icu.util.ULocale[] getAvailableLocales();
  public static java.lang.String canonicalize(java.lang.String);
  public static java.lang.String getBaseName(java.lang.String);
  public static java.lang.String getCountry(java.lang.String);
  public static java.lang.String getDisplayCountry(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayCountry(java.lang.String, java.lang.String);
  public static java.lang.String getDisplayKeyword(java.lang.String);
  public static java.lang.String getDisplayKeyword(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayKeyword(java.lang.String, java.lang.String);
  public static java.lang.String getDisplayKeywordValue(java.lang.String, java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayKeywordValue(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String getDisplayLanguage(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayLanguage(java.lang.String, java.lang.String);
  public static java.lang.String getDisplayLanguageWithDialect(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayLanguageWithDialect(java.lang.String, java.lang.String);
  public static java.lang.String getDisplayName(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayName(java.lang.String, java.lang.String);
  public static java.lang.String getDisplayNameWithDialect(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayNameWithDialect(java.lang.String, java.lang.String);
  public static java.lang.String getDisplayScript(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayScript(java.lang.String, java.lang.String);
  public static java.lang.String getDisplayVariant(java.lang.String, android.icu.util.ULocale);
  public static java.lang.String getDisplayVariant(java.lang.String, java.lang.String);
  public static java.lang.String getFallback(java.lang.String);
  public static java.lang.String getISO3Country(java.lang.String);
  public static java.lang.String getISO3Language(java.lang.String);
  public static java.lang.String getKeywordValue(java.lang.String, java.lang.String);
  public static java.lang.String getLanguage(java.lang.String);
  public static java.lang.String getName(java.lang.String);
  public static java.lang.String getScript(java.lang.String);
  public static java.lang.String getVariant(java.lang.String);
  public static java.lang.String setKeywordValue(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String toLegacyKey(java.lang.String);
  public static java.lang.String toLegacyType(java.lang.String, java.lang.String);
  public static java.lang.String toUnicodeLocaleKey(java.lang.String);
  public static java.lang.String toUnicodeLocaleType(java.lang.String, java.lang.String);
  public static java.lang.String[] getISOCountries();
  public static java.lang.String[] getISOLanguages();
  public static java.util.Iterator getKeywords(java.lang.String);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean isRightToLeft();
  public int compareTo(android.icu.util.ULocale);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public android.icu.util.ULocale getFallback();
  public android.icu.util.ULocale setKeywordValue(java.lang.String, java.lang.String);
  public java.lang.Object clone();
  public java.lang.String getBaseName();
  public java.lang.String getCharacterOrientation();
  public java.lang.String getCountry();
  public java.lang.String getDisplayCountry();
  public java.lang.String getDisplayCountry(android.icu.util.ULocale);
  public java.lang.String getDisplayKeywordValue(java.lang.String);
  public java.lang.String getDisplayKeywordValue(java.lang.String, android.icu.util.ULocale);
  public java.lang.String getDisplayLanguage();
  public java.lang.String getDisplayLanguage(android.icu.util.ULocale);
  public java.lang.String getDisplayLanguageWithDialect();
  public java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale);
  public java.lang.String getDisplayName();
  public java.lang.String getDisplayName(android.icu.util.ULocale);
  public java.lang.String getDisplayNameWithDialect();
  public java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale);
  public java.lang.String getDisplayScript();
  public java.lang.String getDisplayScript(android.icu.util.ULocale);
  public java.lang.String getDisplayVariant();
  public java.lang.String getDisplayVariant(android.icu.util.ULocale);
  public java.lang.String getExtension(char);
  public java.lang.String getISO3Country();
  public java.lang.String getISO3Language();
  public java.lang.String getKeywordValue(java.lang.String);
  public java.lang.String getLanguage();
  public java.lang.String getLineOrientation();
  public java.lang.String getName();
  public java.lang.String getScript();
  public java.lang.String getUnicodeLocaleType(java.lang.String);
  public java.lang.String getVariant();
  public java.lang.String toLanguageTag();
  public java.lang.String toString();
  public java.util.Iterator getKeywords();
  public java.util.Locale toLocale();
  public java.util.Set getExtensionKeys();
  public java.util.Set getUnicodeLocaleAttributes();
  public java.util.Set getUnicodeLocaleKeys();
  public static final char PRIVATE_USE_EXTENSION;
  public static final char UNICODE_LOCALE_EXTENSION;
  public static final android.icu.util.ULocale CANADA;
  public static final android.icu.util.ULocale CANADA_FRENCH;
  public static final android.icu.util.ULocale CHINA;
  public static final android.icu.util.ULocale CHINESE;
  public static final android.icu.util.ULocale ENGLISH;
  public static final android.icu.util.ULocale FRANCE;
  public static final android.icu.util.ULocale FRENCH;
  public static final android.icu.util.ULocale GERMAN;
  public static final android.icu.util.ULocale GERMANY;
  public static final android.icu.util.ULocale ITALIAN;
  public static final android.icu.util.ULocale ITALY;
  public static final android.icu.util.ULocale JAPAN;
  public static final android.icu.util.ULocale JAPANESE;
  public static final android.icu.util.ULocale KOREA;
  public static final android.icu.util.ULocale KOREAN;
  public static final android.icu.util.ULocale PRC;
  public static final android.icu.util.ULocale ROOT;
  public static final android.icu.util.ULocale SIMPLIFIED_CHINESE;
  public static final android.icu.util.ULocale TAIWAN;
  public static final android.icu.util.ULocale TRADITIONAL_CHINESE;
  public static final android.icu.util.ULocale UK;
  public static final android.icu.util.ULocale US;
}
public final class android.icu.util.ULocale$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.icu.util.ULocale build();
  public android.icu.util.ULocale$Builder addUnicodeLocaleAttribute(java.lang.String);
  public android.icu.util.ULocale$Builder clear();
  public android.icu.util.ULocale$Builder clearExtensions();
  public android.icu.util.ULocale$Builder removeUnicodeLocaleAttribute(java.lang.String);
  public android.icu.util.ULocale$Builder setExtension(char, java.lang.String);
  public android.icu.util.ULocale$Builder setLanguage(java.lang.String);
  public android.icu.util.ULocale$Builder setLanguageTag(java.lang.String);
  public android.icu.util.ULocale$Builder setLocale(android.icu.util.ULocale);
  public android.icu.util.ULocale$Builder setRegion(java.lang.String);
  public android.icu.util.ULocale$Builder setScript(java.lang.String);
  public android.icu.util.ULocale$Builder setUnicodeLocaleKeyword(java.lang.String, java.lang.String);
  public android.icu.util.ULocale$Builder setVariant(java.lang.String);
}
public final class android.icu.util.ULocale$Category
  extends java.lang.Enum
{
  public static android.icu.util.ULocale$Category valueOf(java.lang.String);
  public static android.icu.util.ULocale$Category[] values();
  public static final android.icu.util.ULocale$Category DISPLAY;
  public static final android.icu.util.ULocale$Category FORMAT;
}
public interface android.icu.util.ValueIterator
{
  public abstract boolean next(android.icu.util.ValueIterator$Element);
  public abstract void reset();
  public abstract void setRange(int, int);
}
public final class android.icu.util.ValueIterator$Element
  extends java.lang.Object
{
  public void <init>();
  public int integer;
  public java.lang.Object value;
}
public final class android.icu.util.VersionInfo
  extends java.lang.Object
  implements java.lang.Comparable
{
  public static android.icu.util.VersionInfo getInstance(int);
  public static android.icu.util.VersionInfo getInstance(int, int);
  public static android.icu.util.VersionInfo getInstance(int, int, int);
  public static android.icu.util.VersionInfo getInstance(int, int, int, int);
  public static android.icu.util.VersionInfo getInstance(java.lang.String);
  public boolean equals(java.lang.Object);
  public int compareTo(android.icu.util.VersionInfo);
  public int compareTo(java.lang.Object);
  public int getMajor();
  public int getMicro();
  public int getMilli();
  public int getMinor();
  public java.lang.String toString();
  public static final android.icu.util.VersionInfo ICU_VERSION;
  public static final android.icu.util.VersionInfo UCOL_BUILDER_VERSION;
  public static final android.icu.util.VersionInfo UCOL_RUNTIME_VERSION;
  public static final android.icu.util.VersionInfo UNICODE_1_0;
  public static final android.icu.util.VersionInfo UNICODE_1_0_1;
  public static final android.icu.util.VersionInfo UNICODE_1_1_0;
  public static final android.icu.util.VersionInfo UNICODE_1_1_5;
  public static final android.icu.util.VersionInfo UNICODE_2_0;
  public static final android.icu.util.VersionInfo UNICODE_2_1_2;
  public static final android.icu.util.VersionInfo UNICODE_2_1_5;
  public static final android.icu.util.VersionInfo UNICODE_2_1_8;
  public static final android.icu.util.VersionInfo UNICODE_2_1_9;
  public static final android.icu.util.VersionInfo UNICODE_3_0;
  public static final android.icu.util.VersionInfo UNICODE_3_0_1;
  public static final android.icu.util.VersionInfo UNICODE_3_1_0;
  public static final android.icu.util.VersionInfo UNICODE_3_1_1;
  public static final android.icu.util.VersionInfo UNICODE_3_2;
  public static final android.icu.util.VersionInfo UNICODE_4_0;
  public static final android.icu.util.VersionInfo UNICODE_4_0_1;
  public static final android.icu.util.VersionInfo UNICODE_4_1;
  public static final android.icu.util.VersionInfo UNICODE_5_0;
  public static final android.icu.util.VersionInfo UNICODE_5_1;
  public static final android.icu.util.VersionInfo UNICODE_5_2;
  public static final android.icu.util.VersionInfo UNICODE_6_0;
  public static final android.icu.util.VersionInfo UNICODE_6_1;
  public static final android.icu.util.VersionInfo UNICODE_6_2;
  public static final android.icu.util.VersionInfo UNICODE_6_3;
  public static final android.icu.util.VersionInfo UNICODE_7_0;
  public static final android.icu.util.VersionInfo UNICODE_8_0;
}
public abstract class android.inputmethodservice.AbstractInputMethodService
  extends android.app.Service
  implements android.view.KeyEvent$Callback
{
  public void <init>();
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface();
  public abstract android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface();
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public android.view.KeyEvent$DispatcherState getKeyDispatcherState();
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
}
public abstract class android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl
  extends java.lang.Object
  implements android.view.inputmethod.InputMethod
{
  public void <init>(android.inputmethodservice.AbstractInputMethodService);
  public void createSession(android.view.inputmethod.InputMethod$SessionCallback);
  public void revokeSession(android.view.inputmethod.InputMethodSession);
  public void setSessionEnabled(android.view.inputmethod.InputMethodSession, boolean);
}
public abstract class android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl
  extends java.lang.Object
  implements android.view.inputmethod.InputMethodSession
{
  public void <init>(android.inputmethodservice.AbstractInputMethodService);
  public boolean isEnabled();
  public boolean isRevoked();
  public void dispatchGenericMotionEvent(int, android.view.MotionEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public void dispatchKeyEvent(int, android.view.KeyEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public void dispatchTrackballEvent(int, android.view.MotionEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public void revokeSelf();
  public void setEnabled(boolean);
}
public class android.inputmethodservice.ExtractEditText
  extends android.widget.EditText
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean hasFocus();
  public boolean hasVerticalScrollBar();
  public boolean hasWindowFocus();
  public boolean isFocused();
  public boolean isInputMethodTarget();
  public boolean onTextContextMenuItem(int);
  public boolean performClick();
  public void finishInternalChanges();
  public void setExtractedText(android.view.inputmethod.ExtractedText);
  public void startInternalChanges();
  protected void onSelectionChanged(int, int);
}
public class android.inputmethodservice.InputMethodService
  extends android.inputmethodservice.AbstractInputMethodService
{
  public void <init>();
  public boolean enableHardwareAcceleration();
  public boolean getCurrentInputStarted();
  public boolean isExtractViewShown();
  public boolean isFullscreenMode();
  public boolean isInputViewShown();
  public boolean isShowInputRequested();
  public boolean onEvaluateFullscreenMode();
  public boolean onEvaluateInputViewShown();
  public boolean onExtractTextContextMenuItem(int);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onShowInputRequested(int, boolean);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean sendDefaultEditorAction(boolean);
  public int getBackDisposition();
  public int getCandidatesHiddenVisibility();
  public int getInputMethodWindowRecommendedHeight();
  public int getMaxWidth();
  public void hideStatusIcon();
  public void hideWindow();
  public void onAppPrivateCommand(java.lang.String, android.os.Bundle);
  public void onBindInput();
  public void onComputeInsets(android.inputmethodservice.InputMethodService$Insets);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onConfigureWindow(android.view.Window, boolean, boolean);
  public void onCreate();
  public void onDestroy();
  public void onDisplayCompletions(android.view.inputmethod.CompletionInfo[]);
  public void onExtractedCursorMovement(int, int);
  public void onExtractedSelectionChanged(int, int);
  public void onExtractedTextClicked();
  public void onExtractingInputChanged(android.view.inputmethod.EditorInfo);
  public void onFinishCandidatesView(boolean);
  public void onFinishInput();
  public void onFinishInputView(boolean);
  public void onInitializeInterface();
  public void onStartCandidatesView(android.view.inputmethod.EditorInfo, boolean);
  public void onStartInput(android.view.inputmethod.EditorInfo, boolean);
  public void onStartInputView(android.view.inputmethod.EditorInfo, boolean);
  public void onUnbindInput();
  public void onUpdateCursor(android.graphics.Rect);
  public void onUpdateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo);
  public void onUpdateExtractedText(int, android.view.inputmethod.ExtractedText);
  public void onUpdateExtractingViews(android.view.inputmethod.EditorInfo);
  public void onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo);
  public void onUpdateSelection(int, int, int, int, int, int);
  public void onViewClicked(boolean);
  public void onWindowHidden();
  public void onWindowShown();
  public void requestHideSelf(int);
  public void sendDownUpKeyEvents(int);
  public void sendKeyChar(char);
  public void setBackDisposition(int);
  public void setCandidatesView(android.view.View);
  public void setCandidatesViewShown(boolean);
  public void setExtractView(android.view.View);
  public void setExtractViewShown(boolean);
  public void setInputView(android.view.View);
  public void setTheme(int);
  public void showStatusIcon(int);
  public void showWindow(boolean);
  public void switchInputMethod(java.lang.String);
  public void updateFullscreenMode();
  public void updateInputViewShown();
  public android.app.Dialog getWindow();
  public android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface();
  public android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface();
  public android.view.LayoutInflater getLayoutInflater();
  public android.view.View onCreateCandidatesView();
  public android.view.View onCreateExtractTextView();
  public android.view.View onCreateInputView();
  public android.view.inputmethod.EditorInfo getCurrentInputEditorInfo();
  public android.view.inputmethod.InputBinding getCurrentInputBinding();
  public android.view.inputmethod.InputConnection getCurrentInputConnection();
  public java.lang.CharSequence getTextForImeAction(int);
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  protected void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype);
  public static final int BACK_DISPOSITION_DEFAULT;
  public static final int BACK_DISPOSITION_WILL_DISMISS;
  public static final int BACK_DISPOSITION_WILL_NOT_DISMISS;
}
public class android.inputmethodservice.InputMethodService$InputMethodImpl
  extends android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl
{
  public void <init>(android.inputmethodservice.InputMethodService);
  public void attachToken(android.os.IBinder);
  public void bindInput(android.view.inputmethod.InputBinding);
  public void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);
  public void hideSoftInput(int, android.os.ResultReceiver);
  public void restartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public void showSoftInput(int, android.os.ResultReceiver);
  public void startInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public void unbindInput();
}
public class android.inputmethodservice.InputMethodService$InputMethodSessionImpl
  extends android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl
{
  public void <init>(android.inputmethodservice.InputMethodService);
  public void appPrivateCommand(java.lang.String, android.os.Bundle);
  public void displayCompletions(android.view.inputmethod.CompletionInfo[]);
  public void finishInput();
  public void toggleSoftInput(int, int);
  public void updateCursor(android.graphics.Rect);
  public void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo);
  public void updateExtractedText(int, android.view.inputmethod.ExtractedText);
  public void updateSelection(int, int, int, int, int, int);
  public void viewClicked(boolean);
}
public final class android.inputmethodservice.InputMethodService$Insets
  extends java.lang.Object
{
  public void <init>();
  public static final int TOUCHABLE_INSETS_CONTENT;
  public static final int TOUCHABLE_INSETS_FRAME;
  public static final int TOUCHABLE_INSETS_REGION;
  public static final int TOUCHABLE_INSETS_VISIBLE;
  public final android.graphics.Region touchableRegion;
  public int contentTopInsets;
  public int touchableInsets;
  public int visibleTopInsets;
}
public class android.inputmethodservice.Keyboard
  extends java.lang.Object
{
  public void <init>(android.content.Context, int);
  public void <init>(android.content.Context, int, int);
  public void <init>(android.content.Context, int, int, int, int);
  public void <init>(android.content.Context, int, java.lang.CharSequence, int, int);
  public boolean isShifted();
  public boolean setShifted(boolean);
  public int getHeight();
  public int getMinWidth();
  public int getShiftKeyIndex();
  public int[] getNearestKeys(int, int);
  public java.util.List getKeys();
  public java.util.List getModifierKeys();
  protected int getHorizontalGap();
  protected int getKeyHeight();
  protected int getKeyWidth();
  protected int getVerticalGap();
  protected void setHorizontalGap(int);
  protected void setKeyHeight(int);
  protected void setKeyWidth(int);
  protected void setVerticalGap(int);
  protected android.inputmethodservice.Keyboard$Key createKeyFromXml(android.content.res.Resources, android.inputmethodservice.Keyboard$Row, int, int, android.content.res.XmlResourceParser);
  protected android.inputmethodservice.Keyboard$Row createRowFromXml(android.content.res.Resources, android.content.res.XmlResourceParser);
  public static final int EDGE_BOTTOM;
  public static final int EDGE_LEFT;
  public static final int EDGE_RIGHT;
  public static final int EDGE_TOP;
  public static final int KEYCODE_ALT;
  public static final int KEYCODE_CANCEL;
  public static final int KEYCODE_DELETE;
  public static final int KEYCODE_DONE;
  public static final int KEYCODE_MODE_CHANGE;
  public static final int KEYCODE_SHIFT;
}
public class android.inputmethodservice.Keyboard$Key
  extends java.lang.Object
{
  public void <init>(android.content.res.Resources, android.inputmethodservice.Keyboard$Row, int, int, android.content.res.XmlResourceParser);
  public void <init>(android.inputmethodservice.Keyboard$Row);
  public boolean isInside(int, int);
  public int squaredDistanceFrom(int, int);
  public void onPressed();
  public void onReleased(boolean);
  public int[] getCurrentDrawableState();
  public boolean modifier;
  public boolean on;
  public boolean pressed;
  public boolean repeatable;
  public boolean sticky;
  public int edgeFlags;
  public int gap;
  public int height;
  public int popupResId;
  public int width;
  public int x;
  public int y;
  public android.graphics.drawable.Drawable icon;
  public android.graphics.drawable.Drawable iconPreview;
  public int[] codes;
  public java.lang.CharSequence label;
  public java.lang.CharSequence popupCharacters;
  public java.lang.CharSequence text;
}
public class android.inputmethodservice.Keyboard$Row
  extends java.lang.Object
{
  public void <init>(android.content.res.Resources, android.inputmethodservice.Keyboard, android.content.res.XmlResourceParser);
  public void <init>(android.inputmethodservice.Keyboard);
  public int defaultHeight;
  public int defaultHorizontalGap;
  public int defaultWidth;
  public int mode;
  public int rowEdgeFlags;
  public int verticalGap;
}
public class android.inputmethodservice.KeyboardView
  extends android.view.View
  implements android.view.View$OnClickListener
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean handleBack();
  public boolean isPreviewEnabled();
  public boolean isProximityCorrectionEnabled();
  public boolean isShifted();
  public boolean onHoverEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean setShifted(boolean);
  public void closing();
  public void invalidateAllKeys();
  public void invalidateKey(int);
  public void onClick(android.view.View);
  public void onDetachedFromWindow();
  public void onDraw(android.graphics.Canvas);
  public void onMeasure(int, int);
  public void onSizeChanged(int, int, int, int);
  public void setKeyboard(android.inputmethodservice.Keyboard);
  public void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener);
  public void setPopupOffset(int, int);
  public void setPopupParent(android.view.View);
  public void setPreviewEnabled(boolean);
  public void setProximityCorrectionEnabled(boolean);
  public void setVerticalCorrection(int);
  public android.inputmethodservice.Keyboard getKeyboard();
  protected boolean onLongPress(android.inputmethodservice.Keyboard$Key);
  protected void onAttachedToWindow();
  protected void swipeDown();
  protected void swipeLeft();
  protected void swipeRight();
  protected void swipeUp();
  protected android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener();
}
public interface android.inputmethodservice.KeyboardView$OnKeyboardActionListener
{
  public abstract void onKey(int, int[]);
  public abstract void onPress(int);
  public abstract void onRelease(int);
  public abstract void onText(java.lang.CharSequence);
  public abstract void swipeDown();
  public abstract void swipeLeft();
  public abstract void swipeRight();
  public abstract void swipeUp();
}
public class android.location.Address
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.util.Locale);
  public boolean hasLatitude();
  public boolean hasLongitude();
  public double getLatitude();
  public double getLongitude();
  public int describeContents();
  public int getMaxAddressLineIndex();
  public void clearLatitude();
  public void clearLongitude();
  public void setAddressLine(int, java.lang.String);
  public void setAdminArea(java.lang.String);
  public void setCountryCode(java.lang.String);
  public void setCountryName(java.lang.String);
  public void setExtras(android.os.Bundle);
  public void setFeatureName(java.lang.String);
  public void setLatitude(double);
  public void setLocality(java.lang.String);
  public void setLongitude(double);
  public void setPhone(java.lang.String);
  public void setPostalCode(java.lang.String);
  public void setPremises(java.lang.String);
  public void setSubAdminArea(java.lang.String);
  public void setSubLocality(java.lang.String);
  public void setSubThoroughfare(java.lang.String);
  public void setThoroughfare(java.lang.String);
  public void setUrl(java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getExtras();
  public java.lang.String getAddressLine(int);
  public java.lang.String getAdminArea();
  public java.lang.String getCountryCode();
  public java.lang.String getCountryName();
  public java.lang.String getFeatureName();
  public java.lang.String getLocality();
  public java.lang.String getPhone();
  public java.lang.String getPostalCode();
  public java.lang.String getPremises();
  public java.lang.String getSubAdminArea();
  public java.lang.String getSubLocality();
  public java.lang.String getSubThoroughfare();
  public java.lang.String getThoroughfare();
  public java.lang.String getUrl();
  public java.lang.String toString();
  public java.util.Locale getLocale();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.location.Criteria
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.location.Criteria);
  public boolean isAltitudeRequired();
  public boolean isBearingRequired();
  public boolean isCostAllowed();
  public boolean isSpeedRequired();
  public int describeContents();
  public int getAccuracy();
  public int getBearingAccuracy();
  public int getHorizontalAccuracy();
  public int getPowerRequirement();
  public int getSpeedAccuracy();
  public int getVerticalAccuracy();
  public void setAccuracy(int);
  public void setAltitudeRequired(boolean);
  public void setBearingAccuracy(int);
  public void setBearingRequired(boolean);
  public void setCostAllowed(boolean);
  public void setHorizontalAccuracy(int);
  public void setPowerRequirement(int);
  public void setSpeedAccuracy(int);
  public void setSpeedRequired(boolean);
  public void setVerticalAccuracy(int);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int ACCURACY_COARSE;
  public static final int ACCURACY_FINE;
  public static final int ACCURACY_HIGH;
  public static final int ACCURACY_LOW;
  public static final int ACCURACY_MEDIUM;
  public static final int NO_REQUIREMENT;
  public static final int POWER_HIGH;
  public static final int POWER_LOW;
  public static final int POWER_MEDIUM;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.location.Geocoder
  extends java.lang.Object
{
  public static boolean isPresent();
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, java.util.Locale);
  public java.util.List getFromLocation(double, double, int)  throws java.io.IOException;
  public java.util.List getFromLocationName(java.lang.String, int)  throws java.io.IOException;
  public java.util.List getFromLocationName(java.lang.String, int, double, double, double, double)  throws java.io.IOException;
}
public final class android.location.GnssClock
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean hasBiasNanos();
  public boolean hasBiasUncertaintyNanos();
  public boolean hasDriftNanosPerSecond();
  public boolean hasDriftUncertaintyNanosPerSecond();
  public boolean hasFullBiasNanos();
  public boolean hasLeapSecond();
  public boolean hasTimeUncertaintyNanos();
  public double getBiasNanos();
  public double getBiasUncertaintyNanos();
  public double getDriftNanosPerSecond();
  public double getDriftUncertaintyNanosPerSecond();
  public double getTimeUncertaintyNanos();
  public int describeContents();
  public int getHardwareClockDiscontinuityCount();
  public int getLeapSecond();
  public long getFullBiasNanos();
  public long getTimeNanos();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.location.GnssMeasurement
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean hasCarrierCycles();
  public boolean hasCarrierFrequencyHz();
  public boolean hasCarrierPhase();
  public boolean hasCarrierPhaseUncertainty();
  public boolean hasSnrInDb();
  public double getAccumulatedDeltaRangeMeters();
  public double getAccumulatedDeltaRangeUncertaintyMeters();
  public double getCarrierPhase();
  public double getCarrierPhaseUncertainty();
  public double getCn0DbHz();
  public double getPseudorangeRateMetersPerSecond();
  public double getPseudorangeRateUncertaintyMetersPerSecond();
  public double getSnrInDb();
  public double getTimeOffsetNanos();
  public float getCarrierFrequencyHz();
  public int describeContents();
  public int getAccumulatedDeltaRangeState();
  public int getConstellationType();
  public int getMultipathIndicator();
  public int getState();
  public int getSvid();
  public long getCarrierCycles();
  public long getReceivedSvTimeNanos();
  public long getReceivedSvTimeUncertaintyNanos();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int ADR_STATE_CYCLE_SLIP;
  public static final int ADR_STATE_RESET;
  public static final int ADR_STATE_UNKNOWN;
  public static final int ADR_STATE_VALID;
  public static final int MULTIPATH_INDICATOR_DETECTED;
  public static final int MULTIPATH_INDICATOR_NOT_DETECTED;
  public static final int MULTIPATH_INDICATOR_UNKNOWN;
  public static final int STATE_BDS_D2_BIT_SYNC;
  public static final int STATE_BDS_D2_SUBFRAME_SYNC;
  public static final int STATE_BIT_SYNC;
  public static final int STATE_CODE_LOCK;
  public static final int STATE_GAL_E1BC_CODE_LOCK;
  public static final int STATE_GAL_E1B_PAGE_SYNC;
  public static final int STATE_GAL_E1C_2ND_CODE_LOCK;
  public static final int STATE_GLO_STRING_SYNC;
  public static final int STATE_GLO_TOD_DECODED;
  public static final int STATE_MSEC_AMBIGUOUS;
  public static final int STATE_SBAS_SYNC;
  public static final int STATE_SUBFRAME_SYNC;
  public static final int STATE_SYMBOL_SYNC;
  public static final int STATE_TOW_DECODED;
  public static final int STATE_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.location.GnssMeasurementsEvent
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.location.GnssClock getClock();
  public java.lang.String toString();
  public java.util.Collection getMeasurements();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.location.GnssMeasurementsEvent$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent);
  public void onStatusChanged(int);
  public static final int STATUS_LOCATION_DISABLED;
  public static final int STATUS_NOT_SUPPORTED;
  public static final int STATUS_READY;
}
public final class android.location.GnssNavigationMessage
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getMessageId();
  public int getStatus();
  public int getSubmessageId();
  public int getSvid();
  public int getType();
  public void writeToParcel(android.os.Parcel, int);
  public byte[] getData();
  public java.lang.String toString();
  public static final int STATUS_PARITY_PASSED;
  public static final int STATUS_PARITY_REBUILT;
  public static final int STATUS_UNKNOWN;
  public static final int TYPE_BDS_D1;
  public static final int TYPE_BDS_D2;
  public static final int TYPE_GAL_F;
  public static final int TYPE_GAL_I;
  public static final int TYPE_GLO_L1CA;
  public static final int TYPE_GPS_CNAV2;
  public static final int TYPE_GPS_L1CA;
  public static final int TYPE_GPS_L2CNAV;
  public static final int TYPE_GPS_L5CNAV;
  public static final int TYPE_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.location.GnssNavigationMessage$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage);
  public void onStatusChanged(int);
  public static final int STATUS_LOCATION_DISABLED;
  public static final int STATUS_NOT_SUPPORTED;
  public static final int STATUS_READY;
}
public final class android.location.GnssStatus
  extends java.lang.Object
{
  public boolean hasAlmanacData(int);
  public boolean hasEphemerisData(int);
  public boolean usedInFix(int);
  public float getAzimuthDegrees(int);
  public float getCn0DbHz(int);
  public float getElevationDegrees(int);
  public int getConstellationType(int);
  public int getSatelliteCount();
  public int getSvid(int);
  public static final int CONSTELLATION_BEIDOU;
  public static final int CONSTELLATION_GALILEO;
  public static final int CONSTELLATION_GLONASS;
  public static final int CONSTELLATION_GPS;
  public static final int CONSTELLATION_QZSS;
  public static final int CONSTELLATION_SBAS;
  public static final int CONSTELLATION_UNKNOWN;
}
public abstract class android.location.GnssStatus$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onFirstFix(int);
  public void onSatelliteStatusChanged(android.location.GnssStatus);
  public void onStarted();
  public void onStopped();
}
public final class android.location.GpsSatellite
  extends java.lang.Object
{
  public boolean hasAlmanac();
  public boolean hasEphemeris();
  public boolean usedInFix();
  public float getAzimuth();
  public float getElevation();
  public float getSnr();
  public int getPrn();
}
public final class android.location.GpsStatus
  extends java.lang.Object
{
  public int getMaxSatellites();
  public int getTimeToFirstFix();
  public java.lang.Iterable getSatellites();
  public static final int GPS_EVENT_FIRST_FIX;
  public static final int GPS_EVENT_SATELLITE_STATUS;
  public static final int GPS_EVENT_STARTED;
  public static final int GPS_EVENT_STOPPED;
}
public interface android.location.GpsStatus$Listener
{
  public abstract void onGpsStatusChanged(int);
}
public interface android.location.GpsStatus$NmeaListener
{
  public abstract void onNmeaReceived(long, java.lang.String);
}
public class android.location.Location
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static double convert(java.lang.String);
  public static void distanceBetween(double, double, double, double, float[]);
  public static java.lang.String convert(double, int);
  public void <init>(android.location.Location);
  public void <init>(java.lang.String);
  public boolean hasAccuracy();
  public boolean hasAltitude();
  public boolean hasBearing();
  public boolean hasSpeed();
  public boolean isFromMockProvider();
  public double getAltitude();
  public double getLatitude();
  public double getLongitude();
  public float bearingTo(android.location.Location);
  public float distanceTo(android.location.Location);
  public float getAccuracy();
  public float getBearing();
  public float getSpeed();
  public int describeContents();
  public long getElapsedRealtimeNanos();
  public long getTime();
  public void dump(android.util.Printer, java.lang.String);
  public void removeAccuracy();
  public void removeAltitude();
  public void removeBearing();
  public void removeSpeed();
  public void reset();
  public void set(android.location.Location);
  public void setAccuracy(float);
  public void setAltitude(double);
  public void setBearing(float);
  public void setElapsedRealtimeNanos(long);
  public void setExtras(android.os.Bundle);
  public void setLatitude(double);
  public void setLongitude(double);
  public void setProvider(java.lang.String);
  public void setSpeed(float);
  public void setTime(long);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getExtras();
  public java.lang.String getProvider();
  public java.lang.String toString();
  public static final int FORMAT_DEGREES;
  public static final int FORMAT_MINUTES;
  public static final int FORMAT_SECONDS;
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.location.LocationListener
{
  public abstract void onLocationChanged(android.location.Location);
  public abstract void onProviderDisabled(java.lang.String);
  public abstract void onProviderEnabled(java.lang.String);
  public abstract void onStatusChanged(java.lang.String, int, android.os.Bundle);
}
public class android.location.LocationManager
  extends java.lang.Object
{
  public boolean addGpsStatusListener(android.location.GpsStatus$Listener);
  public boolean addNmeaListener(android.location.GpsStatus$NmeaListener);
  public boolean addNmeaListener(android.location.OnNmeaMessageListener);
  public boolean addNmeaListener(android.location.OnNmeaMessageListener, android.os.Handler);
  public boolean isProviderEnabled(java.lang.String);
  public boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback);
  public boolean registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback, android.os.Handler);
  public boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback);
  public boolean registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback, android.os.Handler);
  public boolean registerGnssStatusCallback(android.location.GnssStatus$Callback);
  public boolean registerGnssStatusCallback(android.location.GnssStatus$Callback, android.os.Handler);
  public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle);
  public void addProximityAlert(double, double, float, long, android.app.PendingIntent);
  public void addTestProvider(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int);
  public void clearTestProviderEnabled(java.lang.String);
  public void clearTestProviderLocation(java.lang.String);
  public void clearTestProviderStatus(java.lang.String);
  public void removeGpsStatusListener(android.location.GpsStatus$Listener);
  public void removeNmeaListener(android.location.GpsStatus$NmeaListener);
  public void removeNmeaListener(android.location.OnNmeaMessageListener);
  public void removeProximityAlert(android.app.PendingIntent);
  public void removeTestProvider(java.lang.String);
  public void removeUpdates(android.app.PendingIntent);
  public void removeUpdates(android.location.LocationListener);
  public void requestLocationUpdates(java.lang.String, long, float, android.app.PendingIntent);
  public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener);
  public void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper);
  public void requestLocationUpdates(long, float, android.location.Criteria, android.app.PendingIntent);
  public void requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper);
  public void requestSingleUpdate(android.location.Criteria, android.app.PendingIntent);
  public void requestSingleUpdate(android.location.Criteria, android.location.LocationListener, android.os.Looper);
  public void requestSingleUpdate(java.lang.String, android.app.PendingIntent);
  public void requestSingleUpdate(java.lang.String, android.location.LocationListener, android.os.Looper);
  public void setTestProviderEnabled(java.lang.String, boolean);
  public void setTestProviderLocation(java.lang.String, android.location.Location);
  public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long);
  public void unregisterGnssMeasurementsCallback(android.location.GnssMeasurementsEvent$Callback);
  public void unregisterGnssNavigationMessageCallback(android.location.GnssNavigationMessage$Callback);
  public void unregisterGnssStatusCallback(android.location.GnssStatus$Callback);
  public android.location.GpsStatus getGpsStatus(android.location.GpsStatus);
  public android.location.Location getLastKnownLocation(java.lang.String);
  public android.location.LocationProvider getProvider(java.lang.String);
  public java.lang.String getBestProvider(android.location.Criteria, boolean);
  public java.util.List getAllProviders();
  public java.util.List getProviders(android.location.Criteria, boolean);
  public java.util.List getProviders(boolean);
  public static final java.lang.String GPS_PROVIDER;
  public static final java.lang.String KEY_LOCATION_CHANGED;
  public static final java.lang.String KEY_PROVIDER_ENABLED;
  public static final java.lang.String KEY_PROXIMITY_ENTERING;
  public static final java.lang.String KEY_STATUS_CHANGED;
  public static final java.lang.String MODE_CHANGED_ACTION;
  public static final java.lang.String NETWORK_PROVIDER;
  public static final java.lang.String PASSIVE_PROVIDER;
  public static final java.lang.String PROVIDERS_CHANGED_ACTION;
}
public class android.location.LocationProvider
  extends java.lang.Object
{
  public boolean hasMonetaryCost();
  public boolean meetsCriteria(android.location.Criteria);
  public boolean requiresCell();
  public boolean requiresNetwork();
  public boolean requiresSatellite();
  public boolean supportsAltitude();
  public boolean supportsBearing();
  public boolean supportsSpeed();
  public int getAccuracy();
  public int getPowerRequirement();
  public java.lang.String getName();
  public static final int AVAILABLE;
  public static final int OUT_OF_SERVICE;
  public static final int TEMPORARILY_UNAVAILABLE;
}
public interface android.location.OnNmeaMessageListener
{
  public abstract void onNmeaMessage(java.lang.String, long);
}
public abstract class android.location.SettingInjectorService
  extends android.app.Service
{
  public void <init>(java.lang.String);
  public final int onStartCommand(android.content.Intent, int, int);
  public final void onStart(android.content.Intent, int);
  public final android.os.IBinder onBind(android.content.Intent);
  protected abstract boolean onGetEnabled();
  protected abstract java.lang.String onGetSummary();
  public static final java.lang.String ACTION_INJECTED_SETTING_CHANGED;
  public static final java.lang.String ACTION_SERVICE_INTENT;
  public static final java.lang.String ATTRIBUTES_NAME;
  public static final java.lang.String META_DATA_NAME;
}
public class android.media.AsyncPlayer
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public void play(android.content.Context, android.net.Uri, boolean, android.media.AudioAttributes)  throws java.lang.IllegalArgumentException;
  public void play(android.content.Context, android.net.Uri, boolean, int);
  public void stop();
}
public final class android.media.AudioAttributes
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getContentType();
  public int getFlags();
  public int getUsage();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int CONTENT_TYPE_MOVIE;
  public static final int CONTENT_TYPE_MUSIC;
  public static final int CONTENT_TYPE_SONIFICATION;
  public static final int CONTENT_TYPE_SPEECH;
  public static final int CONTENT_TYPE_UNKNOWN;
  public static final int FLAG_AUDIBILITY_ENFORCED;
  public static final int FLAG_HW_AV_SYNC;
  public static final int FLAG_LOW_LATENCY;
  public static final int USAGE_ALARM;
  public static final int USAGE_ASSISTANCE_ACCESSIBILITY;
  public static final int USAGE_ASSISTANCE_NAVIGATION_GUIDANCE;
  public static final int USAGE_ASSISTANCE_SONIFICATION;
  public static final int USAGE_GAME;
  public static final int USAGE_MEDIA;
  public static final int USAGE_NOTIFICATION;
  public static final int USAGE_NOTIFICATION_COMMUNICATION_DELAYED;
  public static final int USAGE_NOTIFICATION_COMMUNICATION_INSTANT;
  public static final int USAGE_NOTIFICATION_COMMUNICATION_REQUEST;
  public static final int USAGE_NOTIFICATION_EVENT;
  public static final int USAGE_NOTIFICATION_RINGTONE;
  public static final int USAGE_UNKNOWN;
  public static final int USAGE_VOICE_COMMUNICATION;
  public static final int USAGE_VOICE_COMMUNICATION_SIGNALLING;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.media.AudioAttributes$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.media.AudioAttributes);
  public android.media.AudioAttributes build();
  public android.media.AudioAttributes$Builder setContentType(int);
  public android.media.AudioAttributes$Builder setFlags(int);
  public android.media.AudioAttributes$Builder setLegacyStreamType(int);
  public android.media.AudioAttributes$Builder setUsage(int);
}
public abstract class android.media.AudioDeviceCallback
  extends java.lang.Object
{
  public void <init>();
  public void onAudioDevicesAdded(android.media.AudioDeviceInfo[]);
  public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[]);
}
public final class android.media.AudioDeviceInfo
  extends java.lang.Object
{
  public boolean isSink();
  public boolean isSource();
  public int getId();
  public int getType();
  public int[] getChannelCounts();
  public int[] getChannelIndexMasks();
  public int[] getChannelMasks();
  public int[] getEncodings();
  public int[] getSampleRates();
  public java.lang.CharSequence getProductName();
  public static final int TYPE_AUX_LINE;
  public static final int TYPE_BLUETOOTH_A2DP;
  public static final int TYPE_BLUETOOTH_SCO;
  public static final int TYPE_BUILTIN_EARPIECE;
  public static final int TYPE_BUILTIN_MIC;
  public static final int TYPE_BUILTIN_SPEAKER;
  public static final int TYPE_BUS;
  public static final int TYPE_DOCK;
  public static final int TYPE_FM;
  public static final int TYPE_FM_TUNER;
  public static final int TYPE_HDMI;
  public static final int TYPE_HDMI_ARC;
  public static final int TYPE_IP;
  public static final int TYPE_LINE_ANALOG;
  public static final int TYPE_LINE_DIGITAL;
  public static final int TYPE_TELEPHONY;
  public static final int TYPE_TV_TUNER;
  public static final int TYPE_UNKNOWN;
  public static final int TYPE_USB_ACCESSORY;
  public static final int TYPE_USB_DEVICE;
  public static final int TYPE_WIRED_HEADPHONES;
  public static final int TYPE_WIRED_HEADSET;
}
public final class android.media.AudioFormat
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getChannelCount();
  public int getChannelIndexMask();
  public int getChannelMask();
  public int getEncoding();
  public int getSampleRate();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int CHANNEL_CONFIGURATION_DEFAULT;
  public static final int CHANNEL_CONFIGURATION_INVALID;
  public static final int CHANNEL_CONFIGURATION_MONO;
  public static final int CHANNEL_CONFIGURATION_STEREO;
  public static final int CHANNEL_INVALID;
  public static final int CHANNEL_IN_BACK;
  public static final int CHANNEL_IN_BACK_PROCESSED;
  public static final int CHANNEL_IN_DEFAULT;
  public static final int CHANNEL_IN_FRONT;
  public static final int CHANNEL_IN_FRONT_PROCESSED;
  public static final int CHANNEL_IN_LEFT;
  public static final int CHANNEL_IN_LEFT_PROCESSED;
  public static final int CHANNEL_IN_MONO;
  public static final int CHANNEL_IN_PRESSURE;
  public static final int CHANNEL_IN_RIGHT;
  public static final int CHANNEL_IN_RIGHT_PROCESSED;
  public static final int CHANNEL_IN_STEREO;
  public static final int CHANNEL_IN_VOICE_DNLINK;
  public static final int CHANNEL_IN_VOICE_UPLINK;
  public static final int CHANNEL_IN_X_AXIS;
  public static final int CHANNEL_IN_Y_AXIS;
  public static final int CHANNEL_IN_Z_AXIS;
  public static final int CHANNEL_OUT_5POINT1;
  public static final int CHANNEL_OUT_7POINT1;
  public static final int CHANNEL_OUT_7POINT1_SURROUND;
  public static final int CHANNEL_OUT_BACK_CENTER;
  public static final int CHANNEL_OUT_BACK_LEFT;
  public static final int CHANNEL_OUT_BACK_RIGHT;
  public static final int CHANNEL_OUT_DEFAULT;
  public static final int CHANNEL_OUT_FRONT_CENTER;
  public static final int CHANNEL_OUT_FRONT_LEFT;
  public static final int CHANNEL_OUT_FRONT_LEFT_OF_CENTER;
  public static final int CHANNEL_OUT_FRONT_RIGHT;
  public static final int CHANNEL_OUT_FRONT_RIGHT_OF_CENTER;
  public static final int CHANNEL_OUT_LOW_FREQUENCY;
  public static final int CHANNEL_OUT_MONO;
  public static final int CHANNEL_OUT_QUAD;
  public static final int CHANNEL_OUT_SIDE_LEFT;
  public static final int CHANNEL_OUT_SIDE_RIGHT;
  public static final int CHANNEL_OUT_STEREO;
  public static final int CHANNEL_OUT_SURROUND;
  public static final int ENCODING_AC3;
  public static final int ENCODING_DEFAULT;
  public static final int ENCODING_DTS;
  public static final int ENCODING_DTS_HD;
  public static final int ENCODING_E_AC3;
  public static final int ENCODING_IEC61937;
  public static final int ENCODING_INVALID;
  public static final int ENCODING_PCM_16BIT;
  public static final int ENCODING_PCM_8BIT;
  public static final int ENCODING_PCM_FLOAT;
  public static final int SAMPLE_RATE_UNSPECIFIED;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.media.AudioFormat$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.media.AudioFormat);
  public android.media.AudioFormat build();
  public android.media.AudioFormat$Builder setChannelIndexMask(int);
  public android.media.AudioFormat$Builder setChannelMask(int);
  public android.media.AudioFormat$Builder setEncoding(int)  throws java.lang.IllegalArgumentException;
  public android.media.AudioFormat$Builder setSampleRate(int)  throws java.lang.IllegalArgumentException;
}
public class android.media.AudioManager
  extends java.lang.Object
{
  public boolean isBluetoothA2dpOn();
  public boolean isBluetoothScoAvailableOffCall();
  public boolean isBluetoothScoOn();
  public boolean isMicrophoneMute();
  public boolean isMusicActive();
  public boolean isSpeakerphoneOn();
  public boolean isStreamMute(int);
  public boolean isVolumeFixed();
  public boolean isWiredHeadsetOn();
  public boolean registerRemoteController(android.media.RemoteController);
  public boolean shouldVibrate(int);
  public int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener);
  public int generateAudioSessionId();
  public int getMode();
  public int getRingerMode();
  public int getRouting(int);
  public int getStreamMaxVolume(int);
  public int getStreamVolume(int);
  public int getVibrateSetting(int);
  public int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener, int, int);
  public void adjustStreamVolume(int, int, int);
  public void adjustSuggestedStreamVolume(int, int, int);
  public void adjustVolume(int, int);
  public void dispatchMediaKeyEvent(android.view.KeyEvent);
  public void loadSoundEffects();
  public void playSoundEffect(int);
  public void playSoundEffect(int, float);
  public void registerAudioDeviceCallback(android.media.AudioDeviceCallback, android.os.Handler);
  public void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback, android.os.Handler);
  public void registerMediaButtonEventReceiver(android.app.PendingIntent);
  public void registerMediaButtonEventReceiver(android.content.ComponentName);
  public void registerRemoteControlClient(android.media.RemoteControlClient);
  public void setBluetoothA2dpOn(boolean);
  public void setBluetoothScoOn(boolean);
  public void setMicrophoneMute(boolean);
  public void setMode(int);
  public void setParameters(java.lang.String);
  public void setRingerMode(int);
  public void setRouting(int, int, int);
  public void setSpeakerphoneOn(boolean);
  public void setStreamMute(int, boolean);
  public void setStreamSolo(int, boolean);
  public void setStreamVolume(int, int, int);
  public void setVibrateSetting(int, int);
  public void setWiredHeadsetOn(boolean);
  public void startBluetoothSco();
  public void stopBluetoothSco();
  public void unloadSoundEffects();
  public void unregisterAudioDeviceCallback(android.media.AudioDeviceCallback);
  public void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback);
  public void unregisterMediaButtonEventReceiver(android.app.PendingIntent);
  public void unregisterMediaButtonEventReceiver(android.content.ComponentName);
  public void unregisterRemoteControlClient(android.media.RemoteControlClient);
  public void unregisterRemoteController(android.media.RemoteController);
  public android.media.AudioDeviceInfo[] getDevices(int);
  public java.lang.String getParameters(java.lang.String);
  public java.lang.String getProperty(java.lang.String);
  public java.util.List getActiveRecordingConfigurations();
  public static final int ADJUST_LOWER;
  public static final int ADJUST_MUTE;
  public static final int ADJUST_RAISE;
  public static final int ADJUST_SAME;
  public static final int ADJUST_TOGGLE_MUTE;
  public static final int ADJUST_UNMUTE;
  public static final int AUDIOFOCUS_GAIN;
  public static final int AUDIOFOCUS_GAIN_TRANSIENT;
  public static final int AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE;
  public static final int AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK;
  public static final int AUDIOFOCUS_LOSS;
  public static final int AUDIOFOCUS_LOSS_TRANSIENT;
  public static final int AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;
  public static final int AUDIOFOCUS_REQUEST_FAILED;
  public static final int AUDIOFOCUS_REQUEST_GRANTED;
  public static final int AUDIO_SESSION_ID_GENERATE;
  public static final int ERROR;
  public static final int ERROR_DEAD_OBJECT;
  public static final int FLAG_ALLOW_RINGER_MODES;
  public static final int FLAG_PLAY_SOUND;
  public static final int FLAG_REMOVE_SOUND_AND_VIBRATE;
  public static final int FLAG_SHOW_UI;
  public static final int FLAG_VIBRATE;
  public static final int FX_FOCUS_NAVIGATION_DOWN;
  public static final int FX_FOCUS_NAVIGATION_LEFT;
  public static final int FX_FOCUS_NAVIGATION_RIGHT;
  public static final int FX_FOCUS_NAVIGATION_UP;
  public static final int FX_KEYPRESS_DELETE;
  public static final int FX_KEYPRESS_INVALID;
  public static final int FX_KEYPRESS_RETURN;
  public static final int FX_KEYPRESS_SPACEBAR;
  public static final int FX_KEYPRESS_STANDARD;
  public static final int FX_KEY_CLICK;
  public static final int GET_DEVICES_ALL;
  public static final int GET_DEVICES_INPUTS;
  public static final int GET_DEVICES_OUTPUTS;
  public static final int MODE_CURRENT;
  public static final int MODE_INVALID;
  public static final int MODE_IN_CALL;
  public static final int MODE_IN_COMMUNICATION;
  public static final int MODE_NORMAL;
  public static final int MODE_RINGTONE;
  public static final int NUM_STREAMS;
  public static final int RINGER_MODE_NORMAL;
  public static final int RINGER_MODE_SILENT;
  public static final int RINGER_MODE_VIBRATE;
  public static final int ROUTE_ALL;
  public static final int ROUTE_BLUETOOTH;
  public static final int ROUTE_BLUETOOTH_A2DP;
  public static final int ROUTE_BLUETOOTH_SCO;
  public static final int ROUTE_EARPIECE;
  public static final int ROUTE_HEADSET;
  public static final int ROUTE_SPEAKER;
  public static final int SCO_AUDIO_STATE_CONNECTED;
  public static final int SCO_AUDIO_STATE_CONNECTING;
  public static final int SCO_AUDIO_STATE_DISCONNECTED;
  public static final int SCO_AUDIO_STATE_ERROR;
  public static final int STREAM_ALARM;
  public static final int STREAM_DTMF;
  public static final int STREAM_MUSIC;
  public static final int STREAM_NOTIFICATION;
  public static final int STREAM_RING;
  public static final int STREAM_SYSTEM;
  public static final int STREAM_VOICE_CALL;
  public static final int USE_DEFAULT_STREAM_TYPE;
  public static final int VIBRATE_SETTING_OFF;
  public static final int VIBRATE_SETTING_ON;
  public static final int VIBRATE_SETTING_ONLY_SILENT;
  public static final int VIBRATE_TYPE_NOTIFICATION;
  public static final int VIBRATE_TYPE_RINGER;
  public static final java.lang.String ACTION_AUDIO_BECOMING_NOISY;
  public static final java.lang.String ACTION_HDMI_AUDIO_PLUG;
  public static final java.lang.String ACTION_HEADSET_PLUG;
  public static final java.lang.String ACTION_SCO_AUDIO_STATE_CHANGED;
  public static final java.lang.String ACTION_SCO_AUDIO_STATE_UPDATED;
  public static final java.lang.String EXTRA_AUDIO_PLUG_STATE;
  public static final java.lang.String EXTRA_ENCODINGS;
  public static final java.lang.String EXTRA_MAX_CHANNEL_COUNT;
  public static final java.lang.String EXTRA_RINGER_MODE;
  public static final java.lang.String EXTRA_SCO_AUDIO_PREVIOUS_STATE;
  public static final java.lang.String EXTRA_SCO_AUDIO_STATE;
  public static final java.lang.String EXTRA_VIBRATE_SETTING;
  public static final java.lang.String EXTRA_VIBRATE_TYPE;
  public static final java.lang.String PROPERTY_OUTPUT_FRAMES_PER_BUFFER;
  public static final java.lang.String PROPERTY_OUTPUT_SAMPLE_RATE;
  public static final java.lang.String PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED;
  public static final java.lang.String PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND;
  public static final java.lang.String PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND;
  public static final java.lang.String RINGER_MODE_CHANGED_ACTION;
  public static final java.lang.String VIBRATE_SETTING_CHANGED_ACTION;
}
public abstract class android.media.AudioManager$AudioRecordingCallback
  extends java.lang.Object
{
  public void <init>();
  public void onRecordingConfigChanged(java.util.List);
}
public interface android.media.AudioManager$OnAudioFocusChangeListener
{
  public abstract void onAudioFocusChange(int);
}
public class android.media.AudioRecord
  extends java.lang.Object
  implements android.media.AudioRouting
{
  public static int getMinBufferSize(int, int, int);
  public void <init>(int, int, int, int, int)  throws java.lang.IllegalArgumentException;
  public boolean setPreferredDevice(android.media.AudioDeviceInfo);
  public int getAudioFormat();
  public int getAudioSessionId();
  public int getAudioSource();
  public int getBufferSizeInFrames();
  public int getChannelConfiguration();
  public int getChannelCount();
  public int getNotificationMarkerPosition();
  public int getPositionNotificationPeriod();
  public int getRecordingState();
  public int getSampleRate();
  public int getState();
  public int getTimestamp(android.media.AudioTimestamp, int);
  public int read(byte[], int, int);
  public int read(byte[], int, int, int);
  public int read(float[], int, int, int);
  public int read(java.nio.ByteBuffer, int);
  public int read(java.nio.ByteBuffer, int, int);
  public int read(short[], int, int);
  public int read(short[], int, int, int);
  public int setNotificationMarkerPosition(int);
  public int setPositionNotificationPeriod(int);
  public void addOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener, android.os.Handler);
  public void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener, android.os.Handler);
  public void release();
  public void removeOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener);
  public void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener);
  public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener);
  public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener, android.os.Handler);
  public void startRecording()  throws java.lang.IllegalStateException;
  public void startRecording(android.media.MediaSyncEvent)  throws java.lang.IllegalStateException;
  public void stop()  throws java.lang.IllegalStateException;
  public android.media.AudioDeviceInfo getPreferredDevice();
  public android.media.AudioDeviceInfo getRoutedDevice();
  public android.media.AudioFormat getFormat();
  protected void finalize();
  public static final int ERROR;
  public static final int ERROR_BAD_VALUE;
  public static final int ERROR_DEAD_OBJECT;
  public static final int ERROR_INVALID_OPERATION;
  public static final int READ_BLOCKING;
  public static final int READ_NON_BLOCKING;
  public static final int RECORDSTATE_RECORDING;
  public static final int RECORDSTATE_STOPPED;
  public static final int STATE_INITIALIZED;
  public static final int STATE_UNINITIALIZED;
  public static final int SUCCESS;
}
public class android.media.AudioRecord$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.media.AudioRecord build()  throws java.lang.UnsupportedOperationException;
  public android.media.AudioRecord$Builder setAudioFormat(android.media.AudioFormat)  throws java.lang.IllegalArgumentException;
  public android.media.AudioRecord$Builder setAudioSource(int)  throws java.lang.IllegalArgumentException;
  public android.media.AudioRecord$Builder setBufferSizeInBytes(int)  throws java.lang.IllegalArgumentException;
}
public interface android.media.AudioRecord$OnRecordPositionUpdateListener
{
  public abstract void onMarkerReached(android.media.AudioRecord);
  public abstract void onPeriodicNotification(android.media.AudioRecord);
}
public interface android.media.AudioRecord$OnRoutingChangedListener
  extends android.media.AudioRouting$OnRoutingChangedListener
{
  public abstract void onRoutingChanged(android.media.AudioRecord);
  public void onRoutingChanged(android.media.AudioRouting);
}
public final class android.media.AudioRecordingConfiguration
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getClientAudioSessionId();
  public int getClientAudioSource();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.media.AudioDeviceInfo getAudioDevice();
  public android.media.AudioFormat getClientFormat();
  public android.media.AudioFormat getFormat();
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.media.AudioRouting
{
  public abstract boolean setPreferredDevice(android.media.AudioDeviceInfo);
  public abstract void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener, android.os.Handler);
  public abstract void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener);
  public abstract android.media.AudioDeviceInfo getPreferredDevice();
  public abstract android.media.AudioDeviceInfo getRoutedDevice();
}
public interface android.media.AudioRouting$OnRoutingChangedListener
{
  public abstract void onRoutingChanged(android.media.AudioRouting);
}
public final class android.media.AudioTimestamp
  extends java.lang.Object
{
  public void <init>();
  public static final int TIMEBASE_BOOTTIME;
  public static final int TIMEBASE_MONOTONIC;
  public long framePosition;
  public long nanoTime;
}
public class android.media.AudioTrack
  extends java.lang.Object
  implements android.media.AudioRouting
{
  public static float getMaxVolume();
  public static float getMinVolume();
  public static int getMinBufferSize(int, int, int);
  public static int getNativeOutputSampleRate(int);
  public void <init>(android.media.AudioAttributes, android.media.AudioFormat, int, int, int)  throws java.lang.IllegalArgumentException;
  public void <init>(int, int, int, int, int, int)  throws java.lang.IllegalArgumentException;
  public void <init>(int, int, int, int, int, int, int)  throws java.lang.IllegalArgumentException;
  public boolean getTimestamp(android.media.AudioTimestamp);
  public boolean setPreferredDevice(android.media.AudioDeviceInfo);
  public int attachAuxEffect(int);
  public int getAudioFormat();
  public int getAudioSessionId();
  public int getBufferCapacityInFrames();
  public int getBufferSizeInFrames();
  public int getChannelConfiguration();
  public int getChannelCount();
  public int getNotificationMarkerPosition();
  public int getPlayState();
  public int getPlaybackHeadPosition();
  public int getPlaybackRate();
  public int getPositionNotificationPeriod();
  public int getSampleRate();
  public int getState();
  public int getStreamType();
  public int getUnderrunCount();
  public int reloadStaticData();
  public int setAuxEffectSendLevel(float);
  public int setBufferSizeInFrames(int);
  public int setLoopPoints(int, int, int);
  public int setNotificationMarkerPosition(int);
  public int setPlaybackHeadPosition(int);
  public int setPlaybackRate(int);
  public int setPositionNotificationPeriod(int);
  public int setStereoVolume(float, float);
  public int setVolume(float);
  public int write(byte[], int, int);
  public int write(byte[], int, int, int);
  public int write(float[], int, int, int);
  public int write(java.nio.ByteBuffer, int, int);
  public int write(java.nio.ByteBuffer, int, int, long);
  public int write(short[], int, int);
  public int write(short[], int, int, int);
  public void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener, android.os.Handler);
  public void addOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener, android.os.Handler);
  public void flush();
  public void pause()  throws java.lang.IllegalStateException;
  public void play()  throws java.lang.IllegalStateException;
  public void release();
  public void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener);
  public void removeOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener);
  public void setPlaybackParams(android.media.PlaybackParams);
  public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener);
  public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener, android.os.Handler);
  public void stop()  throws java.lang.IllegalStateException;
  public android.media.AudioDeviceInfo getPreferredDevice();
  public android.media.AudioDeviceInfo getRoutedDevice();
  public android.media.AudioFormat getFormat();
  public android.media.PlaybackParams getPlaybackParams();
  protected int getNativeFrameCount();
  protected void finalize();
  protected void setState(int);
  public static final int ERROR;
  public static final int ERROR_BAD_VALUE;
  public static final int ERROR_DEAD_OBJECT;
  public static final int ERROR_INVALID_OPERATION;
  public static final int MODE_STATIC;
  public static final int MODE_STREAM;
  public static final int PLAYSTATE_PAUSED;
  public static final int PLAYSTATE_PLAYING;
  public static final int PLAYSTATE_STOPPED;
  public static final int STATE_INITIALIZED;
  public static final int STATE_NO_STATIC_DATA;
  public static final int STATE_UNINITIALIZED;
  public static final int SUCCESS;
  public static final int WRITE_BLOCKING;
  public static final int WRITE_NON_BLOCKING;
}
public class android.media.AudioTrack$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.media.AudioTrack build()  throws java.lang.UnsupportedOperationException;
  public android.media.AudioTrack$Builder setAudioAttributes(android.media.AudioAttributes)  throws java.lang.IllegalArgumentException;
  public android.media.AudioTrack$Builder setAudioFormat(android.media.AudioFormat)  throws java.lang.IllegalArgumentException;
  public android.media.AudioTrack$Builder setBufferSizeInBytes(int)  throws java.lang.IllegalArgumentException;
  public android.media.AudioTrack$Builder setSessionId(int)  throws java.lang.IllegalArgumentException;
  public android.media.AudioTrack$Builder setTransferMode(int)  throws java.lang.IllegalArgumentException;
}
public interface android.media.AudioTrack$OnPlaybackPositionUpdateListener
{
  public abstract void onMarkerReached(android.media.AudioTrack);
  public abstract void onPeriodicNotification(android.media.AudioTrack);
}
public interface android.media.AudioTrack$OnRoutingChangedListener
  extends android.media.AudioRouting$OnRoutingChangedListener
{
  public abstract void onRoutingChanged(android.media.AudioTrack);
  public void onRoutingChanged(android.media.AudioRouting);
}
public class android.media.CamcorderProfile
  extends java.lang.Object
{
  public static boolean hasProfile(int);
  public static boolean hasProfile(int, int);
  public static android.media.CamcorderProfile get(int);
  public static android.media.CamcorderProfile get(int, int);
  public static final int QUALITY_1080P;
  public static final int QUALITY_2160P;
  public static final int QUALITY_480P;
  public static final int QUALITY_720P;
  public static final int QUALITY_CIF;
  public static final int QUALITY_HIGH;
  public static final int QUALITY_HIGH_SPEED_1080P;
  public static final int QUALITY_HIGH_SPEED_2160P;
  public static final int QUALITY_HIGH_SPEED_480P;
  public static final int QUALITY_HIGH_SPEED_720P;
  public static final int QUALITY_HIGH_SPEED_HIGH;
  public static final int QUALITY_HIGH_SPEED_LOW;
  public static final int QUALITY_LOW;
  public static final int QUALITY_QCIF;
  public static final int QUALITY_QVGA;
  public static final int QUALITY_TIME_LAPSE_1080P;
  public static final int QUALITY_TIME_LAPSE_2160P;
  public static final int QUALITY_TIME_LAPSE_480P;
  public static final int QUALITY_TIME_LAPSE_720P;
  public static final int QUALITY_TIME_LAPSE_CIF;
  public static final int QUALITY_TIME_LAPSE_HIGH;
  public static final int QUALITY_TIME_LAPSE_LOW;
  public static final int QUALITY_TIME_LAPSE_QCIF;
  public static final int QUALITY_TIME_LAPSE_QVGA;
  public int audioBitRate;
  public int audioChannels;
  public int audioCodec;
  public int audioSampleRate;
  public int duration;
  public int fileFormat;
  public int quality;
  public int videoBitRate;
  public int videoCodec;
  public int videoFrameHeight;
  public int videoFrameRate;
  public int videoFrameWidth;
}
public class android.media.CameraProfile
  extends java.lang.Object
{
  public static int getJpegEncodingQualityParameter(int);
  public static int getJpegEncodingQualityParameter(int, int);
  public void <init>();
  public static final int QUALITY_HIGH;
  public static final int QUALITY_LOW;
  public static final int QUALITY_MEDIUM;
}
public final class android.media.DeniedByServerException
  extends android.media.MediaDrmException
{
  public void <init>(java.lang.String);
}
public abstract class android.media.DrmInitData
  extends java.lang.Object
{
  public abstract android.media.DrmInitData$SchemeInitData get(java.util.UUID);
}
public final class android.media.DrmInitData$SchemeInitData
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public int hashCode();
  public final byte[] data;
  public final java.lang.String mimeType;
}
public class android.media.ExifInterface
  extends java.lang.Object
{
  public void <init>(java.io.FileDescriptor)  throws java.io.IOException;
  public void <init>(java.io.InputStream)  throws java.io.IOException;
  public void <init>(java.lang.String)  throws java.io.IOException;
  public boolean getLatLong(float[]);
  public boolean hasThumbnail();
  public double getAltitude(double);
  public double getAttributeDouble(java.lang.String, double);
  public int getAttributeInt(java.lang.String, int);
  public void saveAttributes()  throws java.io.IOException;
  public void setAttribute(java.lang.String, java.lang.String);
  public byte[] getThumbnail();
  public java.lang.String getAttribute(java.lang.String);
  public long[] getThumbnailRange();
  public static final int ORIENTATION_FLIP_HORIZONTAL;
  public static final int ORIENTATION_FLIP_VERTICAL;
  public static final int ORIENTATION_NORMAL;
  public static final int ORIENTATION_ROTATE_180;
  public static final int ORIENTATION_ROTATE_270;
  public static final int ORIENTATION_ROTATE_90;
  public static final int ORIENTATION_TRANSPOSE;
  public static final int ORIENTATION_TRANSVERSE;
  public static final int ORIENTATION_UNDEFINED;
  public static final int WHITEBALANCE_AUTO;
  public static final int WHITEBALANCE_MANUAL;
  public static final java.lang.String TAG_APERTURE;
  public static final java.lang.String TAG_APERTURE_VALUE;
  public static final java.lang.String TAG_ARTIST;
  public static final java.lang.String TAG_BITS_PER_SAMPLE;
  public static final java.lang.String TAG_BRIGHTNESS_VALUE;
  public static final java.lang.String TAG_CFA_PATTERN;
  public static final java.lang.String TAG_COLOR_SPACE;
  public static final java.lang.String TAG_COMPONENTS_CONFIGURATION;
  public static final java.lang.String TAG_COMPRESSED_BITS_PER_PIXEL;
  public static final java.lang.String TAG_COMPRESSION;
  public static final java.lang.String TAG_CONTRAST;
  public static final java.lang.String TAG_COPYRIGHT;
  public static final java.lang.String TAG_CUSTOM_RENDERED;
  public static final java.lang.String TAG_DATETIME;
  public static final java.lang.String TAG_DATETIME_DIGITIZED;
  public static final java.lang.String TAG_DATETIME_ORIGINAL;
  public static final java.lang.String TAG_DEVICE_SETTING_DESCRIPTION;
  public static final java.lang.String TAG_DIGITAL_ZOOM_RATIO;
  public static final java.lang.String TAG_EXIF_VERSION;
  public static final java.lang.String TAG_EXPOSURE_BIAS_VALUE;
  public static final java.lang.String TAG_EXPOSURE_INDEX;
  public static final java.lang.String TAG_EXPOSURE_MODE;
  public static final java.lang.String TAG_EXPOSURE_PROGRAM;
  public static final java.lang.String TAG_EXPOSURE_TIME;
  public static final java.lang.String TAG_FILE_SOURCE;
  public static final java.lang.String TAG_FLASH;
  public static final java.lang.String TAG_FLASHPIX_VERSION;
  public static final java.lang.String TAG_FLASH_ENERGY;
  public static final java.lang.String TAG_FOCAL_LENGTH;
  public static final java.lang.String TAG_FOCAL_LENGTH_IN_35MM_FILM;
  public static final java.lang.String TAG_FOCAL_PLANE_RESOLUTION_UNIT;
  public static final java.lang.String TAG_FOCAL_PLANE_X_RESOLUTION;
  public static final java.lang.String TAG_FOCAL_PLANE_Y_RESOLUTION;
  public static final java.lang.String TAG_F_NUMBER;
  public static final java.lang.String TAG_GAIN_CONTROL;
  public static final java.lang.String TAG_GPS_ALTITUDE;
  public static final java.lang.String TAG_GPS_ALTITUDE_REF;
  public static final java.lang.String TAG_GPS_AREA_INFORMATION;
  public static final java.lang.String TAG_GPS_DATESTAMP;
  public static final java.lang.String TAG_GPS_DEST_BEARING;
  public static final java.lang.String TAG_GPS_DEST_BEARING_REF;
  public static final java.lang.String TAG_GPS_DEST_DISTANCE;
  public static final java.lang.String TAG_GPS_DEST_DISTANCE_REF;
  public static final java.lang.String TAG_GPS_DEST_LATITUDE;
  public static final java.lang.String TAG_GPS_DEST_LATITUDE_REF;
  public static final java.lang.String TAG_GPS_DEST_LONGITUDE;
  public static final java.lang.String TAG_GPS_DEST_LONGITUDE_REF;
  public static final java.lang.String TAG_GPS_DIFFERENTIAL;
  public static final java.lang.String TAG_GPS_DOP;
  public static final java.lang.String TAG_GPS_IMG_DIRECTION;
  public static final java.lang.String TAG_GPS_IMG_DIRECTION_REF;
  public static final java.lang.String TAG_GPS_LATITUDE;
  public static final java.lang.String TAG_GPS_LATITUDE_REF;
  public static final java.lang.String TAG_GPS_LONGITUDE;
  public static final java.lang.String TAG_GPS_LONGITUDE_REF;
  public static final java.lang.String TAG_GPS_MAP_DATUM;
  public static final java.lang.String TAG_GPS_MEASURE_MODE;
  public static final java.lang.String TAG_GPS_PROCESSING_METHOD;
  public static final java.lang.String TAG_GPS_SATELLITES;
  public static final java.lang.String TAG_GPS_SPEED;
  public static final java.lang.String TAG_GPS_SPEED_REF;
  public static final java.lang.String TAG_GPS_STATUS;
  public static final java.lang.String TAG_GPS_TIMESTAMP;
  public static final java.lang.String TAG_GPS_TRACK;
  public static final java.lang.String TAG_GPS_TRACK_REF;
  public static final java.lang.String TAG_GPS_VERSION_ID;
  public static final java.lang.String TAG_IMAGE_DESCRIPTION;
  public static final java.lang.String TAG_IMAGE_LENGTH;
  public static final java.lang.String TAG_IMAGE_UNIQUE_ID;
  public static final java.lang.String TAG_IMAGE_WIDTH;
  public static final java.lang.String TAG_INTEROPERABILITY_INDEX;
  public static final java.lang.String TAG_ISO;
  public static final java.lang.String TAG_ISO_SPEED_RATINGS;
  public static final java.lang.String TAG_JPEG_INTERCHANGE_FORMAT;
  public static final java.lang.String TAG_JPEG_INTERCHANGE_FORMAT_LENGTH;
  public static final java.lang.String TAG_LIGHT_SOURCE;
  public static final java.lang.String TAG_MAKE;
  public static final java.lang.String TAG_MAKER_NOTE;
  public static final java.lang.String TAG_MAX_APERTURE_VALUE;
  public static final java.lang.String TAG_METERING_MODE;
  public static final java.lang.String TAG_MODEL;
  public static final java.lang.String TAG_OECF;
  public static final java.lang.String TAG_ORIENTATION;
  public static final java.lang.String TAG_PHOTOMETRIC_INTERPRETATION;
  public static final java.lang.String TAG_PIXEL_X_DIMENSION;
  public static final java.lang.String TAG_PIXEL_Y_DIMENSION;
  public static final java.lang.String TAG_PLANAR_CONFIGURATION;
  public static final java.lang.String TAG_PRIMARY_CHROMATICITIES;
  public static final java.lang.String TAG_REFERENCE_BLACK_WHITE;
  public static final java.lang.String TAG_RELATED_SOUND_FILE;
  public static final java.lang.String TAG_RESOLUTION_UNIT;
  public static final java.lang.String TAG_ROWS_PER_STRIP;
  public static final java.lang.String TAG_SAMPLES_PER_PIXEL;
  public static final java.lang.String TAG_SATURATION;
  public static final java.lang.String TAG_SCENE_CAPTURE_TYPE;
  public static final java.lang.String TAG_SCENE_TYPE;
  public static final java.lang.String TAG_SENSING_METHOD;
  public static final java.lang.String TAG_SHARPNESS;
  public static final java.lang.String TAG_SHUTTER_SPEED_VALUE;
  public static final java.lang.String TAG_SOFTWARE;
  public static final java.lang.String TAG_SPATIAL_FREQUENCY_RESPONSE;
  public static final java.lang.String TAG_SPECTRAL_SENSITIVITY;
  public static final java.lang.String TAG_STRIP_BYTE_COUNTS;
  public static final java.lang.String TAG_STRIP_OFFSETS;
  public static final java.lang.String TAG_SUBJECT_AREA;
  public static final java.lang.String TAG_SUBJECT_DISTANCE;
  public static final java.lang.String TAG_SUBJECT_DISTANCE_RANGE;
  public static final java.lang.String TAG_SUBJECT_LOCATION;
  public static final java.lang.String TAG_SUBSEC_TIME;
  public static final java.lang.String TAG_SUBSEC_TIME_DIG;
  public static final java.lang.String TAG_SUBSEC_TIME_DIGITIZED;
  public static final java.lang.String TAG_SUBSEC_TIME_ORIG;
  public static final java.lang.String TAG_SUBSEC_TIME_ORIGINAL;
  public static final java.lang.String TAG_THUMBNAIL_IMAGE_LENGTH;
  public static final java.lang.String TAG_THUMBNAIL_IMAGE_WIDTH;
  public static final java.lang.String TAG_TRANSFER_FUNCTION;
  public static final java.lang.String TAG_USER_COMMENT;
  public static final java.lang.String TAG_WHITE_BALANCE;
  public static final java.lang.String TAG_WHITE_POINT;
  public static final java.lang.String TAG_X_RESOLUTION;
  public static final java.lang.String TAG_Y_CB_CR_COEFFICIENTS;
  public static final java.lang.String TAG_Y_CB_CR_POSITIONING;
  public static final java.lang.String TAG_Y_CB_CR_SUB_SAMPLING;
  public static final java.lang.String TAG_Y_RESOLUTION;
}
public class android.media.FaceDetector
  extends java.lang.Object
{
  public void <init>(int, int, int);
  public int findFaces(android.graphics.Bitmap, android.media.FaceDetector$Face[]);
  protected void finalize()  throws java.lang.Throwable;
}
public class android.media.FaceDetector$Face
  extends java.lang.Object
{
  public float confidence();
  public float eyesDistance();
  public float pose(int);
  public void getMidPoint(android.graphics.PointF);
  public static final float CONFIDENCE_THRESHOLD;
  public static final int EULER_X;
  public static final int EULER_Y;
  public static final int EULER_Z;
}
public abstract class android.media.Image
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public abstract int getFormat();
  public abstract int getHeight();
  public abstract int getWidth();
  public abstract long getTimestamp();
  public abstract void close();
  public abstract android.media.Image$Plane[] getPlanes();
  public void setCropRect(android.graphics.Rect);
  public void setTimestamp(long);
  public android.graphics.Rect getCropRect();
}
public abstract class android.media.Image$Plane
  extends java.lang.Object
{
  public abstract int getPixelStride();
  public abstract int getRowStride();
  public abstract java.nio.ByteBuffer getBuffer();
}
public class android.media.ImageReader
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public static android.media.ImageReader newInstance(int, int, int, int);
  public int getHeight();
  public int getImageFormat();
  public int getMaxImages();
  public int getWidth();
  public void close();
  public void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener, android.os.Handler);
  public android.media.Image acquireLatestImage();
  public android.media.Image acquireNextImage();
  public android.view.Surface getSurface();
  protected void finalize()  throws java.lang.Throwable;
}
public interface android.media.ImageReader$OnImageAvailableListener
{
  public abstract void onImageAvailable(android.media.ImageReader);
}
public class android.media.ImageWriter
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public static android.media.ImageWriter newInstance(android.view.Surface, int);
  public int getFormat();
  public int getMaxImages();
  public void close();
  public void queueInputImage(android.media.Image);
  public void setOnImageReleasedListener(android.media.ImageWriter$OnImageReleasedListener, android.os.Handler);
  public android.media.Image dequeueInputImage();
  protected void finalize()  throws java.lang.Throwable;
}
public interface android.media.ImageWriter$OnImageReleasedListener
{
  public abstract void onImageReleased(android.media.ImageWriter);
}
public class android.media.JetPlayer
  extends java.lang.Object
{
  public static int getMaxTracks();
  public static android.media.JetPlayer getJetPlayer();
  public boolean clearQueue();
  public boolean closeJetFile();
  public boolean loadJetFile(android.content.res.AssetFileDescriptor);
  public boolean loadJetFile(java.lang.String);
  public boolean pause();
  public boolean play();
  public boolean queueJetSegment(int, int, int, int, int, byte);
  public boolean queueJetSegmentMuteArray(int, int, int, int, boolean[], byte);
  public boolean setMuteArray(boolean[], boolean);
  public boolean setMuteFlag(int, boolean, boolean);
  public boolean setMuteFlags(int, boolean);
  public boolean triggerClip(int);
  public void release();
  public void setEventListener(android.media.JetPlayer$OnJetEventListener);
  public void setEventListener(android.media.JetPlayer$OnJetEventListener, android.os.Handler);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected void finalize();
}
public interface android.media.JetPlayer$OnJetEventListener
{
  public abstract void onJetEvent(android.media.JetPlayer, short, byte, byte, byte, byte);
  public abstract void onJetNumQueuedSegmentUpdate(android.media.JetPlayer, int);
  public abstract void onJetPauseUpdate(android.media.JetPlayer, int);
  public abstract void onJetUserIdUpdate(android.media.JetPlayer, int, int);
}
public class android.media.MediaActionSound
  extends java.lang.Object
{
  public void <init>();
  public void load(int);
  public void play(int);
  public void release();
  public static final int FOCUS_COMPLETE;
  public static final int SHUTTER_CLICK;
  public static final int START_VIDEO_RECORDING;
  public static final int STOP_VIDEO_RECORDING;
}
public final class android.media.MediaCodec
  extends java.lang.Object
{
  public static android.media.MediaCodec createByCodecName(java.lang.String)  throws java.io.IOException;
  public static android.media.MediaCodec createDecoderByType(java.lang.String)  throws java.io.IOException;
  public static android.media.MediaCodec createEncoderByType(java.lang.String)  throws java.io.IOException;
  public static android.view.Surface createPersistentInputSurface();
  public final int dequeueInputBuffer(long);
  public final int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long);
  public final native void setVideoScalingMode(int);
  public final native void signalEndOfInputStream();
  public final void flush();
  public final void queueInputBuffer(int, int, int, long, int)  throws android.media.MediaCodec$CryptoException;
  public final void queueSecureInputBuffer(int, int, android.media.MediaCodec$CryptoInfo, long, int)  throws android.media.MediaCodec$CryptoException;
  public final void release();
  public final void releaseOutputBuffer(int, boolean);
  public final void releaseOutputBuffer(int, long);
  public final void reset();
  public final void setParameters(android.os.Bundle);
  public final void start();
  public final void stop();
  public final android.media.MediaFormat getInputFormat();
  public final android.media.MediaFormat getOutputFormat();
  public final android.media.MediaFormat getOutputFormat(int);
  public final native android.view.Surface createInputSurface();
  public final native java.lang.String getName();
  public void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int);
  public void setCallback(android.media.MediaCodec$Callback);
  public void setCallback(android.media.MediaCodec$Callback, android.os.Handler);
  public void setInputSurface(android.view.Surface);
  public void setOnFrameRenderedListener(android.media.MediaCodec$OnFrameRenderedListener, android.os.Handler);
  public void setOutputSurface(android.view.Surface);
  public android.media.Image getInputImage(int);
  public android.media.Image getOutputImage(int);
  public android.media.MediaCodecInfo getCodecInfo();
  public java.nio.ByteBuffer getInputBuffer(int);
  public java.nio.ByteBuffer getOutputBuffer(int);
  public java.nio.ByteBuffer[] getInputBuffers();
  public java.nio.ByteBuffer[] getOutputBuffers();
  protected void finalize();
  public static final int BUFFER_FLAG_CODEC_CONFIG;
  public static final int BUFFER_FLAG_END_OF_STREAM;
  public static final int BUFFER_FLAG_KEY_FRAME;
  public static final int BUFFER_FLAG_SYNC_FRAME;
  public static final int CONFIGURE_FLAG_ENCODE;
  public static final int CRYPTO_MODE_AES_CBC;
  public static final int CRYPTO_MODE_AES_CTR;
  public static final int CRYPTO_MODE_UNENCRYPTED;
  public static final int INFO_OUTPUT_BUFFERS_CHANGED;
  public static final int INFO_OUTPUT_FORMAT_CHANGED;
  public static final int INFO_TRY_AGAIN_LATER;
  public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT;
  public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
  public static final java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME;
  public static final java.lang.String PARAMETER_KEY_SUSPEND;
  public static final java.lang.String PARAMETER_KEY_VIDEO_BITRATE;
}
public final class android.media.MediaCodec$BufferInfo
  extends java.lang.Object
{
  public void <init>();
  public void set(int, int, long, int);
  public int flags;
  public int offset;
  public int size;
  public long presentationTimeUs;
}
public abstract class android.media.MediaCodec$Callback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onError(android.media.MediaCodec, android.media.MediaCodec$CodecException);
  public abstract void onInputBufferAvailable(android.media.MediaCodec, int);
  public abstract void onOutputBufferAvailable(android.media.MediaCodec, int, android.media.MediaCodec$BufferInfo);
  public abstract void onOutputFormatChanged(android.media.MediaCodec, android.media.MediaFormat);
}
public final class android.media.MediaCodec$CodecException
  extends java.lang.IllegalStateException
{
  public boolean isRecoverable();
  public boolean isTransient();
  public int getErrorCode();
  public java.lang.String getDiagnosticInfo();
  public static final int ERROR_INSUFFICIENT_RESOURCE;
  public static final int ERROR_RECLAIMED;
}
public final class android.media.MediaCodec$CryptoException
  extends java.lang.RuntimeException
{
  public void <init>(int, java.lang.String);
  public int getErrorCode();
  public static final int ERROR_INSUFFICIENT_OUTPUT_PROTECTION;
  public static final int ERROR_KEY_EXPIRED;
  public static final int ERROR_NO_KEY;
  public static final int ERROR_RESOURCE_BUSY;
  public static final int ERROR_SESSION_NOT_OPENED;
  public static final int ERROR_UNSUPPORTED_OPERATION;
}
public final class android.media.MediaCodec$CryptoInfo
  extends java.lang.Object
{
  public void <init>();
  public void set(int, int[], int[], byte[], byte[], int);
  public void setPattern(android.media.MediaCodec$CryptoInfo$Pattern);
  public java.lang.String toString();
  public int mode;
  public int numSubSamples;
  public byte[] iv;
  public byte[] key;
  public int[] numBytesOfClearData;
  public int[] numBytesOfEncryptedData;
}
public final class android.media.MediaCodec$CryptoInfo$Pattern
  extends java.lang.Object
{
  public void <init>(int, int);
  public int getEncryptBlocks();
  public int getSkipBlocks();
  public void set(int, int);
}
public interface android.media.MediaCodec$OnFrameRenderedListener
{
  public abstract void onFrameRendered(android.media.MediaCodec, long, long);
}
public final class android.media.MediaCodecInfo
  extends java.lang.Object
{
  public final boolean isEncoder();
  public final android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String);
  public final java.lang.String getName();
  public final java.lang.String[] getSupportedTypes();
}
public final class android.media.MediaCodecInfo$AudioCapabilities
  extends java.lang.Object
{
  public boolean isSampleRateSupported(int);
  public int getMaxInputChannelCount();
  public android.util.Range getBitrateRange();
  public android.util.Range[] getSupportedSampleRateRanges();
  public int[] getSupportedSampleRates();
}
public final class android.media.MediaCodecInfo$CodecCapabilities
  extends java.lang.Object
{
  public static android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String, int, int);
  public void <init>();
  public final boolean isFeatureRequired(java.lang.String);
  public final boolean isFeatureSupported(java.lang.String);
  public final boolean isFormatSupported(android.media.MediaFormat);
  public int getMaxSupportedInstances();
  public android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities();
  public android.media.MediaCodecInfo$EncoderCapabilities getEncoderCapabilities();
  public android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities();
  public android.media.MediaFormat getDefaultFormat();
  public java.lang.String getMimeType();
  public static final int COLOR_Format12bitRGB444;
  public static final int COLOR_Format16bitARGB1555;
  public static final int COLOR_Format16bitARGB4444;
  public static final int COLOR_Format16bitBGR565;
  public static final int COLOR_Format16bitRGB565;
  public static final int COLOR_Format18BitBGR666;
  public static final int COLOR_Format18bitARGB1665;
  public static final int COLOR_Format18bitRGB666;
  public static final int COLOR_Format19bitARGB1666;
  public static final int COLOR_Format24BitABGR6666;
  public static final int COLOR_Format24BitARGB6666;
  public static final int COLOR_Format24bitARGB1887;
  public static final int COLOR_Format24bitBGR888;
  public static final int COLOR_Format24bitRGB888;
  public static final int COLOR_Format25bitARGB1888;
  public static final int COLOR_Format32bitABGR8888;
  public static final int COLOR_Format32bitARGB8888;
  public static final int COLOR_Format32bitBGRA8888;
  public static final int COLOR_Format8bitRGB332;
  public static final int COLOR_FormatCbYCrY;
  public static final int COLOR_FormatCrYCbY;
  public static final int COLOR_FormatL16;
  public static final int COLOR_FormatL24;
  public static final int COLOR_FormatL2;
  public static final int COLOR_FormatL32;
  public static final int COLOR_FormatL4;
  public static final int COLOR_FormatL8;
  public static final int COLOR_FormatMonochrome;
  public static final int COLOR_FormatRGBAFlexible;
  public static final int COLOR_FormatRGBFlexible;
  public static final int COLOR_FormatRawBayer10bit;
  public static final int COLOR_FormatRawBayer8bit;
  public static final int COLOR_FormatRawBayer8bitcompressed;
  public static final int COLOR_FormatSurface;
  public static final int COLOR_FormatYCbYCr;
  public static final int COLOR_FormatYCrYCb;
  public static final int COLOR_FormatYUV411PackedPlanar;
  public static final int COLOR_FormatYUV411Planar;
  public static final int COLOR_FormatYUV420Flexible;
  public static final int COLOR_FormatYUV420PackedPlanar;
  public static final int COLOR_FormatYUV420PackedSemiPlanar;
  public static final int COLOR_FormatYUV420Planar;
  public static final int COLOR_FormatYUV420SemiPlanar;
  public static final int COLOR_FormatYUV422Flexible;
  public static final int COLOR_FormatYUV422PackedPlanar;
  public static final int COLOR_FormatYUV422PackedSemiPlanar;
  public static final int COLOR_FormatYUV422Planar;
  public static final int COLOR_FormatYUV422SemiPlanar;
  public static final int COLOR_FormatYUV444Flexible;
  public static final int COLOR_FormatYUV444Interleaved;
  public static final int COLOR_QCOM_FormatYUV420SemiPlanar;
  public static final int COLOR_TI_FormatYUV420PackedSemiPlanar;
  public static final java.lang.String FEATURE_AdaptivePlayback;
  public static final java.lang.String FEATURE_IntraRefresh;
  public static final java.lang.String FEATURE_SecurePlayback;
  public static final java.lang.String FEATURE_TunneledPlayback;
  public android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels;
  public int[] colorFormats;
}
public final class android.media.MediaCodecInfo$CodecProfileLevel
  extends java.lang.Object
{
  public void <init>();
  public static final int AACObjectELD;
  public static final int AACObjectERLC;
  public static final int AACObjectHE;
  public static final int AACObjectHE_PS;
  public static final int AACObjectLC;
  public static final int AACObjectLD;
  public static final int AACObjectLTP;
  public static final int AACObjectMain;
  public static final int AACObjectSSR;
  public static final int AACObjectScalable;
  public static final int AVCLevel11;
  public static final int AVCLevel12;
  public static final int AVCLevel13;
  public static final int AVCLevel1;
  public static final int AVCLevel1b;
  public static final int AVCLevel21;
  public static final int AVCLevel22;
  public static final int AVCLevel2;
  public static final int AVCLevel31;
  public static final int AVCLevel32;
  public static final int AVCLevel3;
  public static final int AVCLevel41;
  public static final int AVCLevel42;
  public static final int AVCLevel4;
  public static final int AVCLevel51;
  public static final int AVCLevel52;
  public static final int AVCLevel5;
  public static final int AVCProfileBaseline;
  public static final int AVCProfileExtended;
  public static final int AVCProfileHigh10;
  public static final int AVCProfileHigh422;
  public static final int AVCProfileHigh444;
  public static final int AVCProfileHigh;
  public static final int AVCProfileMain;
  public static final int DolbyVisionLevelFhd24;
  public static final int DolbyVisionLevelFhd30;
  public static final int DolbyVisionLevelFhd60;
  public static final int DolbyVisionLevelHd24;
  public static final int DolbyVisionLevelHd30;
  public static final int DolbyVisionLevelUhd24;
  public static final int DolbyVisionLevelUhd30;
  public static final int DolbyVisionLevelUhd48;
  public static final int DolbyVisionLevelUhd60;
  public static final int DolbyVisionProfileDvavPen;
  public static final int DolbyVisionProfileDvavPer;
  public static final int DolbyVisionProfileDvheDen;
  public static final int DolbyVisionProfileDvheDer;
  public static final int DolbyVisionProfileDvheDtb;
  public static final int DolbyVisionProfileDvheDth;
  public static final int DolbyVisionProfileDvheDtr;
  public static final int DolbyVisionProfileDvheStn;
  public static final int H263Level10;
  public static final int H263Level20;
  public static final int H263Level30;
  public static final int H263Level40;
  public static final int H263Level45;
  public static final int H263Level50;
  public static final int H263Level60;
  public static final int H263Level70;
  public static final int H263ProfileBackwardCompatible;
  public static final int H263ProfileBaseline;
  public static final int H263ProfileH320Coding;
  public static final int H263ProfileHighCompression;
  public static final int H263ProfileHighLatency;
  public static final int H263ProfileISWV2;
  public static final int H263ProfileISWV3;
  public static final int H263ProfileInterlace;
  public static final int H263ProfileInternet;
  public static final int HEVCHighTierLevel1;
  public static final int HEVCHighTierLevel21;
  public static final int HEVCHighTierLevel2;
  public static final int HEVCHighTierLevel31;
  public static final int HEVCHighTierLevel3;
  public static final int HEVCHighTierLevel41;
  public static final int HEVCHighTierLevel4;
  public static final int HEVCHighTierLevel51;
  public static final int HEVCHighTierLevel52;
  public static final int HEVCHighTierLevel5;
  public static final int HEVCHighTierLevel61;
  public static final int HEVCHighTierLevel62;
  public static final int HEVCHighTierLevel6;
  public static final int HEVCMainTierLevel1;
  public static final int HEVCMainTierLevel21;
  public static final int HEVCMainTierLevel2;
  public static final int HEVCMainTierLevel31;
  public static final int HEVCMainTierLevel3;
  public static final int HEVCMainTierLevel41;
  public static final int HEVCMainTierLevel4;
  public static final int HEVCMainTierLevel51;
  public static final int HEVCMainTierLevel52;
  public static final int HEVCMainTierLevel5;
  public static final int HEVCMainTierLevel61;
  public static final int HEVCMainTierLevel62;
  public static final int HEVCMainTierLevel6;
  public static final int HEVCProfileMain10;
  public static final int HEVCProfileMain10HDR10;
  public static final int HEVCProfileMain;
  public static final int MPEG2LevelH14;
  public static final int MPEG2LevelHL;
  public static final int MPEG2LevelHP;
  public static final int MPEG2LevelLL;
  public static final int MPEG2LevelML;
  public static final int MPEG2Profile422;
  public static final int MPEG2ProfileHigh;
  public static final int MPEG2ProfileMain;
  public static final int MPEG2ProfileSNR;
  public static final int MPEG2ProfileSimple;
  public static final int MPEG2ProfileSpatial;
  public static final int MPEG4Level0;
  public static final int MPEG4Level0b;
  public static final int MPEG4Level1;
  public static final int MPEG4Level2;
  public static final int MPEG4Level3;
  public static final int MPEG4Level3b;
  public static final int MPEG4Level4;
  public static final int MPEG4Level4a;
  public static final int MPEG4Level5;
  public static final int MPEG4Level6;
  public static final int MPEG4ProfileAdvancedCoding;
  public static final int MPEG4ProfileAdvancedCore;
  public static final int MPEG4ProfileAdvancedRealTime;
  public static final int MPEG4ProfileAdvancedScalable;
  public static final int MPEG4ProfileAdvancedSimple;
  public static final int MPEG4ProfileBasicAnimated;
  public static final int MPEG4ProfileCore;
  public static final int MPEG4ProfileCoreScalable;
  public static final int MPEG4ProfileHybrid;
  public static final int MPEG4ProfileMain;
  public static final int MPEG4ProfileNbit;
  public static final int MPEG4ProfileScalableTexture;
  public static final int MPEG4ProfileSimple;
  public static final int MPEG4ProfileSimpleFBA;
  public static final int MPEG4ProfileSimpleFace;
  public static final int MPEG4ProfileSimpleScalable;
  public static final int VP8Level_Version0;
  public static final int VP8Level_Version1;
  public static final int VP8Level_Version2;
  public static final int VP8Level_Version3;
  public static final int VP8ProfileMain;
  public static final int VP9Level11;
  public static final int VP9Level1;
  public static final int VP9Level21;
  public static final int VP9Level2;
  public static final int VP9Level31;
  public static final int VP9Level3;
  public static final int VP9Level41;
  public static final int VP9Level4;
  public static final int VP9Level51;
  public static final int VP9Level52;
  public static final int VP9Level5;
  public static final int VP9Level61;
  public static final int VP9Level62;
  public static final int VP9Level6;
  public static final int VP9Profile0;
  public static final int VP9Profile1;
  public static final int VP9Profile2;
  public static final int VP9Profile2HDR;
  public static final int VP9Profile3;
  public static final int VP9Profile3HDR;
  public int level;
  public int profile;
}
public final class android.media.MediaCodecInfo$EncoderCapabilities
  extends java.lang.Object
{
  public boolean isBitrateModeSupported(int);
  public android.util.Range getComplexityRange();
  public static final int BITRATE_MODE_CBR;
  public static final int BITRATE_MODE_CQ;
  public static final int BITRATE_MODE_VBR;
}
public final class android.media.MediaCodecInfo$VideoCapabilities
  extends java.lang.Object
{
  public boolean areSizeAndRateSupported(int, int, double);
  public boolean isSizeSupported(int, int);
  public int getHeightAlignment();
  public int getWidthAlignment();
  public android.util.Range getAchievableFrameRatesFor(int, int);
  public android.util.Range getBitrateRange();
  public android.util.Range getSupportedFrameRates();
  public android.util.Range getSupportedFrameRatesFor(int, int);
  public android.util.Range getSupportedHeights();
  public android.util.Range getSupportedHeightsFor(int);
  public android.util.Range getSupportedWidths();
  public android.util.Range getSupportedWidthsFor(int);
}
public final class android.media.MediaCodecList
  extends java.lang.Object
{
  public static final int getCodecCount();
  public static final android.media.MediaCodecInfo getCodecInfoAt(int);
  public void <init>(int);
  public final android.media.MediaCodecInfo[] getCodecInfos();
  public final java.lang.String findDecoderForFormat(android.media.MediaFormat);
  public final java.lang.String findEncoderForFormat(android.media.MediaFormat);
  public static final int ALL_CODECS;
  public static final int REGULAR_CODECS;
}
public final class android.media.MediaCrypto
  extends java.lang.Object
{
  public static final boolean isCryptoSchemeSupported(java.util.UUID);
  public void <init>(java.util.UUID, byte[])  throws android.media.MediaCryptoException;
  public final native boolean requiresSecureDecoderComponent(java.lang.String);
  public final native void release();
  public final native void setMediaDrmSession(byte[])  throws android.media.MediaCryptoException;
  protected void finalize();
}
public final class android.media.MediaCryptoException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
}
public abstract class android.media.MediaDataSource
  extends java.lang.Object
  implements java.io.Closeable
{
  public void <init>();
  public abstract int readAt(long, byte[], int, int)  throws java.io.IOException;
  public abstract long getSize()  throws java.io.IOException;
}
public class android.media.MediaDescription
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Bitmap getIconBitmap();
  public android.net.Uri getIconUri();
  public android.net.Uri getMediaUri();
  public android.os.Bundle getExtras();
  public java.lang.CharSequence getDescription();
  public java.lang.CharSequence getSubtitle();
  public java.lang.CharSequence getTitle();
  public java.lang.String getMediaId();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.media.MediaDescription$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.media.MediaDescription build();
  public android.media.MediaDescription$Builder setDescription(java.lang.CharSequence);
  public android.media.MediaDescription$Builder setExtras(android.os.Bundle);
  public android.media.MediaDescription$Builder setIconBitmap(android.graphics.Bitmap);
  public android.media.MediaDescription$Builder setIconUri(android.net.Uri);
  public android.media.MediaDescription$Builder setMediaId(java.lang.String);
  public android.media.MediaDescription$Builder setMediaUri(android.net.Uri);
  public android.media.MediaDescription$Builder setSubtitle(java.lang.CharSequence);
  public android.media.MediaDescription$Builder setTitle(java.lang.CharSequence);
}
public final class android.media.MediaDrm
  extends java.lang.Object
{
  public static final boolean isCryptoSchemeSupported(java.util.UUID);
  public static final boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String);
  public void <init>(java.util.UUID)  throws android.media.UnsupportedSchemeException;
  public final native void release();
  public native void closeSession(byte[]);
  public native void releaseAllSecureStops();
  public native void releaseSecureStops(byte[]);
  public native void removeKeys(byte[]);
  public native void restoreKeys(byte[], byte[]);
  public native void setPropertyByteArray(java.lang.String, byte[]);
  public native void setPropertyString(java.lang.String, java.lang.String);
  public void provideProvisionResponse(byte[])  throws android.media.DeniedByServerException;
  public void setOnEventListener(android.media.MediaDrm$OnEventListener);
  public void setOnExpirationUpdateListener(android.media.MediaDrm$OnExpirationUpdateListener, android.os.Handler);
  public void setOnKeyStatusChangeListener(android.media.MediaDrm$OnKeyStatusChangeListener, android.os.Handler);
  public android.media.MediaDrm$CryptoSession getCryptoSession(byte[], java.lang.String, java.lang.String);
  public android.media.MediaDrm$ProvisionRequest getProvisionRequest();
  public native android.media.MediaDrm$KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap)  throws android.media.NotProvisionedException;
  public native byte[] getPropertyByteArray(java.lang.String);
  public native byte[] getSecureStop(byte[]);
  public native byte[] openSession()  throws android.media.NotProvisionedException, android.media.ResourceBusyException;
  public native byte[] provideKeyResponse(byte[], byte[])  throws android.media.DeniedByServerException, android.media.NotProvisionedException;
  public native java.lang.String getPropertyString(java.lang.String);
  public native java.util.HashMap queryKeyStatus(byte[]);
  public native java.util.List getSecureStops();
  protected void finalize();
  public static final int EVENT_KEY_EXPIRED;
  public static final int EVENT_KEY_REQUIRED;
  public static final int EVENT_PROVISION_REQUIRED;
  public static final int EVENT_SESSION_RECLAIMED;
  public static final int EVENT_VENDOR_DEFINED;
  public static final int KEY_TYPE_OFFLINE;
  public static final int KEY_TYPE_RELEASE;
  public static final int KEY_TYPE_STREAMING;
  public static final java.lang.String PROPERTY_ALGORITHMS;
  public static final java.lang.String PROPERTY_DESCRIPTION;
  public static final java.lang.String PROPERTY_DEVICE_UNIQUE_ID;
  public static final java.lang.String PROPERTY_VENDOR;
  public static final java.lang.String PROPERTY_VERSION;
}
public final class android.media.MediaDrm$CryptoSession
  extends java.lang.Object
{
  public boolean verify(byte[], byte[], byte[]);
  public byte[] decrypt(byte[], byte[], byte[]);
  public byte[] encrypt(byte[], byte[], byte[]);
  public byte[] sign(byte[], byte[]);
}
public final class android.media.MediaDrm$KeyRequest
  extends java.lang.Object
{
  public int getRequestType();
  public byte[] getData();
  public java.lang.String getDefaultUrl();
  public static final int REQUEST_TYPE_INITIAL;
  public static final int REQUEST_TYPE_RELEASE;
  public static final int REQUEST_TYPE_RENEWAL;
}
public final class android.media.MediaDrm$KeyStatus
  extends java.lang.Object
{
  public int getStatusCode();
  public byte[] getKeyId();
  public static final int STATUS_EXPIRED;
  public static final int STATUS_INTERNAL_ERROR;
  public static final int STATUS_OUTPUT_NOT_ALLOWED;
  public static final int STATUS_PENDING;
  public static final int STATUS_USABLE;
}
public final class android.media.MediaDrm$MediaDrmStateException
  extends java.lang.IllegalStateException
{
  public java.lang.String getDiagnosticInfo();
}
public interface android.media.MediaDrm$OnEventListener
{
  public abstract void onEvent(android.media.MediaDrm, byte[], int, int, byte[]);
}
public interface android.media.MediaDrm$OnExpirationUpdateListener
{
  public abstract void onExpirationUpdate(android.media.MediaDrm, byte[], long);
}
public interface android.media.MediaDrm$OnKeyStatusChangeListener
{
  public abstract void onKeyStatusChange(android.media.MediaDrm, byte[], java.util.List, boolean);
}
public final class android.media.MediaDrm$ProvisionRequest
  extends java.lang.Object
{
  public byte[] getData();
  public java.lang.String getDefaultUrl();
}
public class android.media.MediaDrmException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
}
public class android.media.MediaDrmResetException
  extends java.lang.IllegalStateException
{
  public void <init>(java.lang.String);
}
public final class android.media.MediaExtractor
  extends java.lang.Object
{
  public void <init>();
  public final native int getTrackCount();
  public final native void release();
  public final native void setDataSource(android.media.MediaDataSource)  throws java.io.IOException;
  public final native void setDataSource(java.io.FileDescriptor, long, long)  throws java.io.IOException;
  public final void setDataSource(android.content.Context, android.net.Uri, java.util.Map)  throws java.io.IOException;
  public final void setDataSource(android.content.res.AssetFileDescriptor)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public final void setDataSource(java.io.FileDescriptor)  throws java.io.IOException;
  public final void setDataSource(java.lang.String)  throws java.io.IOException;
  public final void setDataSource(java.lang.String, java.util.Map)  throws java.io.IOException;
  public native boolean advance();
  public native boolean getSampleCryptoInfo(android.media.MediaCodec$CryptoInfo);
  public native boolean hasCacheReachedEndOfStream();
  public native int getSampleFlags();
  public native int getSampleTrackIndex();
  public native int readSampleData(java.nio.ByteBuffer, int);
  public native long getCachedDuration();
  public native long getSampleTime();
  public native void seekTo(long, int);
  public native void selectTrack(int);
  public native void unselectTrack(int);
  public android.media.DrmInitData getDrmInitData();
  public android.media.MediaFormat getTrackFormat(int);
  public java.util.Map getPsshInfo();
  protected void finalize();
  public static final int SAMPLE_FLAG_ENCRYPTED;
  public static final int SAMPLE_FLAG_SYNC;
  public static final int SEEK_TO_CLOSEST_SYNC;
  public static final int SEEK_TO_NEXT_SYNC;
  public static final int SEEK_TO_PREVIOUS_SYNC;
}
public final class android.media.MediaFormat
  extends java.lang.Object
{
  public static final android.media.MediaFormat createAudioFormat(java.lang.String, int, int);
  public static final android.media.MediaFormat createSubtitleFormat(java.lang.String, java.lang.String);
  public static final android.media.MediaFormat createVideoFormat(java.lang.String, int, int);
  public void <init>();
  public final boolean containsKey(java.lang.String);
  public final float getFloat(java.lang.String);
  public final int getInteger(java.lang.String);
  public final long getLong(java.lang.String);
  public final void setByteBuffer(java.lang.String, java.nio.ByteBuffer);
  public final void setFloat(java.lang.String, float);
  public final void setInteger(java.lang.String, int);
  public final void setLong(java.lang.String, long);
  public final void setString(java.lang.String, java.lang.String);
  public final java.lang.String getString(java.lang.String);
  public final java.nio.ByteBuffer getByteBuffer(java.lang.String);
  public boolean getFeatureEnabled(java.lang.String);
  public void setFeatureEnabled(java.lang.String, boolean);
  public java.lang.String toString();
  public static final int COLOR_RANGE_FULL;
  public static final int COLOR_RANGE_LIMITED;
  public static final int COLOR_STANDARD_BT2020;
  public static final int COLOR_STANDARD_BT601_NTSC;
  public static final int COLOR_STANDARD_BT601_PAL;
  public static final int COLOR_STANDARD_BT709;
  public static final int COLOR_TRANSFER_HLG;
  public static final int COLOR_TRANSFER_LINEAR;
  public static final int COLOR_TRANSFER_SDR_VIDEO;
  public static final int COLOR_TRANSFER_ST2084;
  public static final java.lang.String KEY_AAC_DRC_ATTENUATION_FACTOR;
  public static final java.lang.String KEY_AAC_DRC_BOOST_FACTOR;
  public static final java.lang.String KEY_AAC_DRC_HEAVY_COMPRESSION;
  public static final java.lang.String KEY_AAC_DRC_TARGET_REFERENCE_LEVEL;
  public static final java.lang.String KEY_AAC_ENCODED_TARGET_LEVEL;
  public static final java.lang.String KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT;
  public static final java.lang.String KEY_AAC_PROFILE;
  public static final java.lang.String KEY_AAC_SBR_MODE;
  public static final java.lang.String KEY_AUDIO_SESSION_ID;
  public static final java.lang.String KEY_BITRATE_MODE;
  public static final java.lang.String KEY_BIT_RATE;
  public static final java.lang.String KEY_CAPTURE_RATE;
  public static final java.lang.String KEY_CHANNEL_COUNT;
  public static final java.lang.String KEY_CHANNEL_MASK;
  public static final java.lang.String KEY_COLOR_FORMAT;
  public static final java.lang.String KEY_COLOR_RANGE;
  public static final java.lang.String KEY_COLOR_STANDARD;
  public static final java.lang.String KEY_COLOR_TRANSFER;
  public static final java.lang.String KEY_COMPLEXITY;
  public static final java.lang.String KEY_DURATION;
  public static final java.lang.String KEY_FLAC_COMPRESSION_LEVEL;
  public static final java.lang.String KEY_FRAME_RATE;
  public static final java.lang.String KEY_HDR_STATIC_INFO;
  public static final java.lang.String KEY_HEIGHT;
  public static final java.lang.String KEY_INTRA_REFRESH_PERIOD;
  public static final java.lang.String KEY_IS_ADTS;
  public static final java.lang.String KEY_IS_AUTOSELECT;
  public static final java.lang.String KEY_IS_DEFAULT;
  public static final java.lang.String KEY_IS_FORCED_SUBTITLE;
  public static final java.lang.String KEY_I_FRAME_INTERVAL;
  public static final java.lang.String KEY_LANGUAGE;
  public static final java.lang.String KEY_LEVEL;
  public static final java.lang.String KEY_MAX_HEIGHT;
  public static final java.lang.String KEY_MAX_INPUT_SIZE;
  public static final java.lang.String KEY_MAX_WIDTH;
  public static final java.lang.String KEY_MIME;
  public static final java.lang.String KEY_OPERATING_RATE;
  public static final java.lang.String KEY_PCM_ENCODING;
  public static final java.lang.String KEY_PRIORITY;
  public static final java.lang.String KEY_PROFILE;
  public static final java.lang.String KEY_PUSH_BLANK_BUFFERS_ON_STOP;
  public static final java.lang.String KEY_REPEAT_PREVIOUS_FRAME_AFTER;
  public static final java.lang.String KEY_ROTATION;
  public static final java.lang.String KEY_SAMPLE_RATE;
  public static final java.lang.String KEY_SLICE_HEIGHT;
  public static final java.lang.String KEY_STRIDE;
  public static final java.lang.String KEY_TEMPORAL_LAYERING;
  public static final java.lang.String KEY_TRACK_ID;
  public static final java.lang.String KEY_WIDTH;
  public static final java.lang.String MIMETYPE_AUDIO_AAC;
  public static final java.lang.String MIMETYPE_AUDIO_AC3;
  public static final java.lang.String MIMETYPE_AUDIO_AMR_NB;
  public static final java.lang.String MIMETYPE_AUDIO_AMR_WB;
  public static final java.lang.String MIMETYPE_AUDIO_EAC3;
  public static final java.lang.String MIMETYPE_AUDIO_FLAC;
  public static final java.lang.String MIMETYPE_AUDIO_G711_ALAW;
  public static final java.lang.String MIMETYPE_AUDIO_G711_MLAW;
  public static final java.lang.String MIMETYPE_AUDIO_MPEG;
  public static final java.lang.String MIMETYPE_AUDIO_MSGSM;
  public static final java.lang.String MIMETYPE_AUDIO_OPUS;
  public static final java.lang.String MIMETYPE_AUDIO_QCELP;
  public static final java.lang.String MIMETYPE_AUDIO_RAW;
  public static final java.lang.String MIMETYPE_AUDIO_VORBIS;
  public static final java.lang.String MIMETYPE_TEXT_CEA_608;
  public static final java.lang.String MIMETYPE_TEXT_VTT;
  public static final java.lang.String MIMETYPE_VIDEO_AVC;
  public static final java.lang.String MIMETYPE_VIDEO_DOLBY_VISION;
  public static final java.lang.String MIMETYPE_VIDEO_H263;
  public static final java.lang.String MIMETYPE_VIDEO_HEVC;
  public static final java.lang.String MIMETYPE_VIDEO_MPEG2;
  public static final java.lang.String MIMETYPE_VIDEO_MPEG4;
  public static final java.lang.String MIMETYPE_VIDEO_RAW;
  public static final java.lang.String MIMETYPE_VIDEO_VP8;
  public static final java.lang.String MIMETYPE_VIDEO_VP9;
}
public final class android.media.MediaMetadata
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean containsKey(java.lang.String);
  public int describeContents();
  public int size();
  public long getLong(java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Bitmap getBitmap(java.lang.String);
  public android.media.MediaDescription getDescription();
  public android.media.Rating getRating(java.lang.String);
  public java.lang.CharSequence getText(java.lang.String);
  public java.lang.String getString(java.lang.String);
  public java.util.Set keySet();
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String METADATA_KEY_ALBUM;
  public static final java.lang.String METADATA_KEY_ALBUM_ART;
  public static final java.lang.String METADATA_KEY_ALBUM_ARTIST;
  public static final java.lang.String METADATA_KEY_ALBUM_ART_URI;
  public static final java.lang.String METADATA_KEY_ART;
  public static final java.lang.String METADATA_KEY_ARTIST;
  public static final java.lang.String METADATA_KEY_ART_URI;
  public static final java.lang.String METADATA_KEY_AUTHOR;
  public static final java.lang.String METADATA_KEY_COMPILATION;
  public static final java.lang.String METADATA_KEY_COMPOSER;
  public static final java.lang.String METADATA_KEY_DATE;
  public static final java.lang.String METADATA_KEY_DISC_NUMBER;
  public static final java.lang.String METADATA_KEY_DISPLAY_DESCRIPTION;
  public static final java.lang.String METADATA_KEY_DISPLAY_ICON;
  public static final java.lang.String METADATA_KEY_DISPLAY_ICON_URI;
  public static final java.lang.String METADATA_KEY_DISPLAY_SUBTITLE;
  public static final java.lang.String METADATA_KEY_DISPLAY_TITLE;
  public static final java.lang.String METADATA_KEY_DURATION;
  public static final java.lang.String METADATA_KEY_GENRE;
  public static final java.lang.String METADATA_KEY_MEDIA_ID;
  public static final java.lang.String METADATA_KEY_NUM_TRACKS;
  public static final java.lang.String METADATA_KEY_RATING;
  public static final java.lang.String METADATA_KEY_TITLE;
  public static final java.lang.String METADATA_KEY_TRACK_NUMBER;
  public static final java.lang.String METADATA_KEY_USER_RATING;
  public static final java.lang.String METADATA_KEY_WRITER;
  public static final java.lang.String METADATA_KEY_YEAR;
}
public final class android.media.MediaMetadata$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.media.MediaMetadata);
  public android.media.MediaMetadata build();
  public android.media.MediaMetadata$Builder putBitmap(java.lang.String, android.graphics.Bitmap);
  public android.media.MediaMetadata$Builder putLong(java.lang.String, long);
  public android.media.MediaMetadata$Builder putRating(java.lang.String, android.media.Rating);
  public android.media.MediaMetadata$Builder putString(java.lang.String, java.lang.String);
  public android.media.MediaMetadata$Builder putText(java.lang.String, java.lang.CharSequence);
}
public abstract class android.media.MediaMetadataEditor
  extends java.lang.Object
{
  public abstract void apply();
  public long getLong(int, long)  throws java.lang.IllegalArgumentException;
  public void addEditableKey(int);
  public void clear();
  public void removeEditableKeys();
  public android.graphics.Bitmap getBitmap(int, android.graphics.Bitmap)  throws java.lang.IllegalArgumentException;
  public android.media.MediaMetadataEditor putBitmap(int, android.graphics.Bitmap)  throws java.lang.IllegalArgumentException;
  public android.media.MediaMetadataEditor putLong(int, long)  throws java.lang.IllegalArgumentException;
  public android.media.MediaMetadataEditor putObject(int, java.lang.Object)  throws java.lang.IllegalArgumentException;
  public android.media.MediaMetadataEditor putString(int, java.lang.String)  throws java.lang.IllegalArgumentException;
  public int[] getEditableKeys();
  public java.lang.Object getObject(int, java.lang.Object)  throws java.lang.IllegalArgumentException;
  public java.lang.String getString(int, java.lang.String)  throws java.lang.IllegalArgumentException;
  public static final int BITMAP_KEY_ARTWORK;
  public static final int RATING_KEY_BY_OTHERS;
  public static final int RATING_KEY_BY_USER;
}
public class android.media.MediaMetadataRetriever
  extends java.lang.Object
{
  public void <init>();
  public native void release();
  public native void setDataSource(java.io.FileDescriptor, long, long)  throws java.lang.IllegalArgumentException;
  public void setDataSource(android.content.Context, android.net.Uri)  throws java.lang.IllegalArgumentException, java.lang.SecurityException;
  public void setDataSource(android.media.MediaDataSource)  throws java.lang.IllegalArgumentException;
  public void setDataSource(java.io.FileDescriptor)  throws java.lang.IllegalArgumentException;
  public void setDataSource(java.lang.String)  throws java.lang.IllegalArgumentException;
  public void setDataSource(java.lang.String, java.util.Map)  throws java.lang.IllegalArgumentException;
  public android.graphics.Bitmap getFrameAtTime();
  public android.graphics.Bitmap getFrameAtTime(long);
  public android.graphics.Bitmap getFrameAtTime(long, int);
  public byte[] getEmbeddedPicture();
  public native java.lang.String extractMetadata(int);
  protected void finalize()  throws java.lang.Throwable;
  public static final int METADATA_KEY_ALBUM;
  public static final int METADATA_KEY_ALBUMARTIST;
  public static final int METADATA_KEY_ARTIST;
  public static final int METADATA_KEY_AUTHOR;
  public static final int METADATA_KEY_BITRATE;
  public static final int METADATA_KEY_CAPTURE_FRAMERATE;
  public static final int METADATA_KEY_CD_TRACK_NUMBER;
  public static final int METADATA_KEY_COMPILATION;
  public static final int METADATA_KEY_COMPOSER;
  public static final int METADATA_KEY_DATE;
  public static final int METADATA_KEY_DISC_NUMBER;
  public static final int METADATA_KEY_DURATION;
  public static final int METADATA_KEY_GENRE;
  public static final int METADATA_KEY_HAS_AUDIO;
  public static final int METADATA_KEY_HAS_VIDEO;
  public static final int METADATA_KEY_LOCATION;
  public static final int METADATA_KEY_MIMETYPE;
  public static final int METADATA_KEY_NUM_TRACKS;
  public static final int METADATA_KEY_TITLE;
  public static final int METADATA_KEY_VIDEO_HEIGHT;
  public static final int METADATA_KEY_VIDEO_ROTATION;
  public static final int METADATA_KEY_VIDEO_WIDTH;
  public static final int METADATA_KEY_WRITER;
  public static final int METADATA_KEY_YEAR;
  public static final int OPTION_CLOSEST;
  public static final int OPTION_CLOSEST_SYNC;
  public static final int OPTION_NEXT_SYNC;
  public static final int OPTION_PREVIOUS_SYNC;
}
public final class android.media.MediaMuxer
  extends java.lang.Object
{
  public void <init>(java.lang.String, int)  throws java.io.IOException;
  public int addTrack(android.media.MediaFormat);
  public void release();
  public void setLocation(float, float);
  public void setOrientationHint(int);
  public void start();
  public void stop();
  public void writeSampleData(int, java.nio.ByteBuffer, android.media.MediaCodec$BufferInfo);
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.media.MediaMuxer$OutputFormat
  extends java.lang.Object
{
  public static final int MUXER_OUTPUT_MPEG_4;
  public static final int MUXER_OUTPUT_WEBM;
}
public class android.media.MediaPlayer
  extends java.lang.Object
{
  public static android.media.MediaPlayer create(android.content.Context, android.net.Uri);
  public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder);
  public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder, android.media.AudioAttributes, int);
  public static android.media.MediaPlayer create(android.content.Context, int);
  public static android.media.MediaPlayer create(android.content.Context, int, android.media.AudioAttributes, int);
  public void <init>();
  public int getSelectedTrack(int)  throws java.lang.IllegalStateException;
  public native boolean isLooping();
  public native boolean isPlaying();
  public native int getAudioSessionId();
  public native int getCurrentPosition();
  public native int getDuration();
  public native int getVideoHeight();
  public native int getVideoWidth();
  public native void attachAuxEffect(int);
  public native void prepareAsync()  throws java.lang.IllegalStateException;
  public native void seekTo(int)  throws java.lang.IllegalStateException;
  public native void setAudioSessionId(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public native void setLooping(boolean);
  public native void setNextMediaPlayer(android.media.MediaPlayer);
  public native void setPlaybackParams(android.media.PlaybackParams);
  public native void setSyncParams(android.media.SyncParams);
  public void addTimedTextSource(android.content.Context, android.net.Uri, java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void addTimedTextSource(java.io.FileDescriptor, java.lang.String)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void addTimedTextSource(java.io.FileDescriptor, long, long, java.lang.String)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void addTimedTextSource(java.lang.String, java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void deselectTrack(int)  throws java.lang.IllegalStateException;
  public void pause()  throws java.lang.IllegalStateException;
  public void prepare()  throws java.io.IOException, java.lang.IllegalStateException;
  public void release();
  public void reset();
  public void selectTrack(int)  throws java.lang.IllegalStateException;
  public void setAudioAttributes(android.media.AudioAttributes)  throws java.lang.IllegalArgumentException;
  public void setAudioStreamType(int);
  public void setAuxEffectSendLevel(float);
  public void setDataSource(android.content.Context, android.net.Uri)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
  public void setDataSource(android.content.Context, android.net.Uri, java.util.Map)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
  public void setDataSource(android.content.res.AssetFileDescriptor)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void setDataSource(android.media.MediaDataSource)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void setDataSource(java.io.FileDescriptor)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void setDataSource(java.io.FileDescriptor, long, long)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public void setDataSource(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.SecurityException;
  public void setDisplay(android.view.SurfaceHolder);
  public void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener);
  public void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener);
  public void setOnErrorListener(android.media.MediaPlayer$OnErrorListener);
  public void setOnInfoListener(android.media.MediaPlayer$OnInfoListener);
  public void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener);
  public void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener);
  public void setOnTimedMetaDataAvailableListener(android.media.MediaPlayer$OnTimedMetaDataAvailableListener);
  public void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener);
  public void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener);
  public void setScreenOnWhilePlaying(boolean);
  public void setSurface(android.view.Surface);
  public void setVideoScalingMode(int);
  public void setVolume(float, float);
  public void setWakeMode(android.content.Context, int);
  public void start()  throws java.lang.IllegalStateException;
  public void stop()  throws java.lang.IllegalStateException;
  public android.media.MediaPlayer$TrackInfo[] getTrackInfo()  throws java.lang.IllegalStateException;
  public android.media.MediaTimestamp getTimestamp();
  public native android.media.PlaybackParams getPlaybackParams();
  public native android.media.SyncParams getSyncParams();
  protected void finalize();
  public static final int MEDIA_ERROR_IO;
  public static final int MEDIA_ERROR_MALFORMED;
  public static final int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK;
  public static final int MEDIA_ERROR_SERVER_DIED;
  public static final int MEDIA_ERROR_TIMED_OUT;
  public static final int MEDIA_ERROR_UNKNOWN;
  public static final int MEDIA_ERROR_UNSUPPORTED;
  public static final int MEDIA_INFO_BAD_INTERLEAVING;
  public static final int MEDIA_INFO_BUFFERING_END;
  public static final int MEDIA_INFO_BUFFERING_START;
  public static final int MEDIA_INFO_METADATA_UPDATE;
  public static final int MEDIA_INFO_NOT_SEEKABLE;
  public static final int MEDIA_INFO_SUBTITLE_TIMED_OUT;
  public static final int MEDIA_INFO_UNKNOWN;
  public static final int MEDIA_INFO_UNSUPPORTED_SUBTITLE;
  public static final int MEDIA_INFO_VIDEO_RENDERING_START;
  public static final int MEDIA_INFO_VIDEO_TRACK_LAGGING;
  public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT;
  public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
  public static final java.lang.String MEDIA_MIMETYPE_TEXT_SUBRIP;
}
public interface android.media.MediaPlayer$OnBufferingUpdateListener
{
  public abstract void onBufferingUpdate(android.media.MediaPlayer, int);
}
public interface android.media.MediaPlayer$OnCompletionListener
{
  public abstract void onCompletion(android.media.MediaPlayer);
}
public interface android.media.MediaPlayer$OnErrorListener
{
  public abstract boolean onError(android.media.MediaPlayer, int, int);
}
public interface android.media.MediaPlayer$OnInfoListener
{
  public abstract boolean onInfo(android.media.MediaPlayer, int, int);
}
public interface android.media.MediaPlayer$OnPreparedListener
{
  public abstract void onPrepared(android.media.MediaPlayer);
}
public interface android.media.MediaPlayer$OnSeekCompleteListener
{
  public abstract void onSeekComplete(android.media.MediaPlayer);
}
public interface android.media.MediaPlayer$OnTimedMetaDataAvailableListener
{
  public abstract void onTimedMetaDataAvailable(android.media.MediaPlayer, android.media.TimedMetaData);
}
public interface android.media.MediaPlayer$OnTimedTextListener
{
  public abstract void onTimedText(android.media.MediaPlayer, android.media.TimedText);
}
public interface android.media.MediaPlayer$OnVideoSizeChangedListener
{
  public abstract void onVideoSizeChanged(android.media.MediaPlayer, int, int);
}
public class android.media.MediaPlayer$TrackInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getTrackType();
  public void writeToParcel(android.os.Parcel, int);
  public android.media.MediaFormat getFormat();
  public java.lang.String getLanguage();
  public java.lang.String toString();
  public static final int MEDIA_TRACK_TYPE_AUDIO;
  public static final int MEDIA_TRACK_TYPE_METADATA;
  public static final int MEDIA_TRACK_TYPE_SUBTITLE;
  public static final int MEDIA_TRACK_TYPE_TIMEDTEXT;
  public static final int MEDIA_TRACK_TYPE_UNKNOWN;
  public static final int MEDIA_TRACK_TYPE_VIDEO;
}
public class android.media.MediaRecorder
  extends java.lang.Object
{
  public static final int getAudioSourceMax();
  public void <init>();
  public native int getMaxAmplitude()  throws java.lang.IllegalStateException;
  public native void pause()  throws java.lang.IllegalStateException;
  public native void release();
  public native void resume()  throws java.lang.IllegalStateException;
  public native void setAudioEncoder(int)  throws java.lang.IllegalStateException;
  public native void setAudioSource(int)  throws java.lang.IllegalStateException;
  public native void setCamera(android.hardware.Camera);
  public native void setMaxDuration(int)  throws java.lang.IllegalArgumentException;
  public native void setMaxFileSize(long)  throws java.lang.IllegalArgumentException;
  public native void setOutputFormat(int)  throws java.lang.IllegalStateException;
  public native void setVideoEncoder(int)  throws java.lang.IllegalStateException;
  public native void setVideoFrameRate(int)  throws java.lang.IllegalStateException;
  public native void setVideoSize(int, int)  throws java.lang.IllegalStateException;
  public native void setVideoSource(int)  throws java.lang.IllegalStateException;
  public native void start()  throws java.lang.IllegalStateException;
  public native void stop()  throws java.lang.IllegalStateException;
  public void prepare()  throws java.io.IOException, java.lang.IllegalStateException;
  public void reset();
  public void setAudioChannels(int);
  public void setAudioEncodingBitRate(int);
  public void setAudioSamplingRate(int);
  public void setCaptureRate(double);
  public void setInputSurface(android.view.Surface);
  public void setLocation(float, float);
  public void setOnErrorListener(android.media.MediaRecorder$OnErrorListener);
  public void setOnInfoListener(android.media.MediaRecorder$OnInfoListener);
  public void setOrientationHint(int);
  public void setOutputFile(java.io.FileDescriptor)  throws java.lang.IllegalStateException;
  public void setOutputFile(java.lang.String)  throws java.lang.IllegalStateException;
  public void setPreviewDisplay(android.view.Surface);
  public void setProfile(android.media.CamcorderProfile);
  public void setVideoEncodingBitRate(int);
  public native android.view.Surface getSurface();
  protected void finalize();
  public static final int MEDIA_ERROR_SERVER_DIED;
  public static final int MEDIA_RECORDER_ERROR_UNKNOWN;
  public static final int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED;
  public static final int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED;
  public static final int MEDIA_RECORDER_INFO_UNKNOWN;
}
public final class android.media.MediaRecorder$AudioEncoder
  extends java.lang.Object
{
  public static final int AAC;
  public static final int AAC_ELD;
  public static final int AMR_NB;
  public static final int AMR_WB;
  public static final int DEFAULT;
  public static final int HE_AAC;
  public static final int VORBIS;
}
public final class android.media.MediaRecorder$AudioSource
  extends java.lang.Object
{
  public static final int CAMCORDER;
  public static final int DEFAULT;
  public static final int MIC;
  public static final int REMOTE_SUBMIX;
  public static final int UNPROCESSED;
  public static final int VOICE_CALL;
  public static final int VOICE_COMMUNICATION;
  public static final int VOICE_DOWNLINK;
  public static final int VOICE_RECOGNITION;
  public static final int VOICE_UPLINK;
}
public interface android.media.MediaRecorder$OnErrorListener
{
  public abstract void onError(android.media.MediaRecorder, int, int);
}
public interface android.media.MediaRecorder$OnInfoListener
{
  public abstract void onInfo(android.media.MediaRecorder, int, int);
}
public final class android.media.MediaRecorder$OutputFormat
  extends java.lang.Object
{
  public static final int AAC_ADTS;
  public static final int AMR_NB;
  public static final int AMR_WB;
  public static final int DEFAULT;
  public static final int MPEG_4;
  public static final int RAW_AMR;
  public static final int THREE_GPP;
  public static final int WEBM;
}
public final class android.media.MediaRecorder$VideoEncoder
  extends java.lang.Object
{
  public static final int DEFAULT;
  public static final int H263;
  public static final int H264;
  public static final int HEVC;
  public static final int MPEG_4_SP;
  public static final int VP8;
}
public final class android.media.MediaRecorder$VideoSource
  extends java.lang.Object
{
  public static final int CAMERA;
  public static final int DEFAULT;
  public static final int SURFACE;
}
public class android.media.MediaRouter
  extends java.lang.Object
{
  public int getCategoryCount();
  public int getRouteCount();
  public void addCallback(int, android.media.MediaRouter$Callback);
  public void addCallback(int, android.media.MediaRouter$Callback, int);
  public void addUserRoute(android.media.MediaRouter$UserRouteInfo);
  public void clearUserRoutes();
  public void removeCallback(android.media.MediaRouter$Callback);
  public void removeUserRoute(android.media.MediaRouter$UserRouteInfo);
  public void selectRoute(int, android.media.MediaRouter$RouteInfo);
  public android.media.MediaRouter$RouteCategory createRouteCategory(int, boolean);
  public android.media.MediaRouter$RouteCategory createRouteCategory(java.lang.CharSequence, boolean);
  public android.media.MediaRouter$RouteCategory getCategoryAt(int);
  public android.media.MediaRouter$RouteInfo getDefaultRoute();
  public android.media.MediaRouter$RouteInfo getRouteAt(int);
  public android.media.MediaRouter$RouteInfo getSelectedRoute(int);
  public android.media.MediaRouter$UserRouteInfo createUserRoute(android.media.MediaRouter$RouteCategory);
  public static final int CALLBACK_FLAG_PERFORM_ACTIVE_SCAN;
  public static final int CALLBACK_FLAG_UNFILTERED_EVENTS;
  public static final int ROUTE_TYPE_LIVE_AUDIO;
  public static final int ROUTE_TYPE_LIVE_VIDEO;
  public static final int ROUTE_TYPE_USER;
}
public abstract class android.media.MediaRouter$Callback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onRouteAdded(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
  public abstract void onRouteChanged(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
  public abstract void onRouteGrouped(android.media.MediaRouter, android.media.MediaRouter$RouteInfo, android.media.MediaRouter$RouteGroup, int);
  public abstract void onRouteRemoved(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
  public abstract void onRouteSelected(android.media.MediaRouter, int, android.media.MediaRouter$RouteInfo);
  public abstract void onRouteUngrouped(android.media.MediaRouter, android.media.MediaRouter$RouteInfo, android.media.MediaRouter$RouteGroup);
  public abstract void onRouteUnselected(android.media.MediaRouter, int, android.media.MediaRouter$RouteInfo);
  public abstract void onRouteVolumeChanged(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
  public void onRoutePresentationDisplayChanged(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
}
public class android.media.MediaRouter$RouteCategory
  extends java.lang.Object
{
  public boolean isGroupable();
  public int getSupportedTypes();
  public java.lang.CharSequence getName();
  public java.lang.CharSequence getName(android.content.Context);
  public java.lang.String toString();
  public java.util.List getRoutes(java.util.List);
}
public class android.media.MediaRouter$RouteGroup
  extends android.media.MediaRouter$RouteInfo
{
  public int getRouteCount();
  public void addRoute(android.media.MediaRouter$RouteInfo);
  public void addRoute(android.media.MediaRouter$RouteInfo, int);
  public void removeRoute(android.media.MediaRouter$RouteInfo);
  public void removeRoute(int);
  public void requestSetVolume(int);
  public void requestUpdateVolume(int);
  public void setIconDrawable(android.graphics.drawable.Drawable);
  public void setIconResource(int);
  public android.media.MediaRouter$RouteInfo getRouteAt(int);
  public java.lang.String toString();
}
public class android.media.MediaRouter$RouteInfo
  extends java.lang.Object
{
  public boolean isConnecting();
  public boolean isEnabled();
  public int getDeviceType();
  public int getPlaybackStream();
  public int getPlaybackType();
  public int getSupportedTypes();
  public int getVolume();
  public int getVolumeHandling();
  public int getVolumeMax();
  public void requestSetVolume(int);
  public void requestUpdateVolume(int);
  public void setTag(java.lang.Object);
  public android.graphics.drawable.Drawable getIconDrawable();
  public android.media.MediaRouter$RouteCategory getCategory();
  public android.media.MediaRouter$RouteGroup getGroup();
  public android.view.Display getPresentationDisplay();
  public java.lang.CharSequence getDescription();
  public java.lang.CharSequence getName();
  public java.lang.CharSequence getName(android.content.Context);
  public java.lang.CharSequence getStatus();
  public java.lang.Object getTag();
  public java.lang.String toString();
  public static final int DEVICE_TYPE_BLUETOOTH;
  public static final int DEVICE_TYPE_SPEAKER;
  public static final int DEVICE_TYPE_TV;
  public static final int DEVICE_TYPE_UNKNOWN;
  public static final int PLAYBACK_TYPE_LOCAL;
  public static final int PLAYBACK_TYPE_REMOTE;
  public static final int PLAYBACK_VOLUME_FIXED;
  public static final int PLAYBACK_VOLUME_VARIABLE;
}
public class android.media.MediaRouter$SimpleCallback
  extends android.media.MediaRouter$Callback
{
  public void <init>();
  public void onRouteAdded(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
  public void onRouteChanged(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
  public void onRouteGrouped(android.media.MediaRouter, android.media.MediaRouter$RouteInfo, android.media.MediaRouter$RouteGroup, int);
  public void onRouteRemoved(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
  public void onRouteSelected(android.media.MediaRouter, int, android.media.MediaRouter$RouteInfo);
  public void onRouteUngrouped(android.media.MediaRouter, android.media.MediaRouter$RouteInfo, android.media.MediaRouter$RouteGroup);
  public void onRouteUnselected(android.media.MediaRouter, int, android.media.MediaRouter$RouteInfo);
  public void onRouteVolumeChanged(android.media.MediaRouter, android.media.MediaRouter$RouteInfo);
}
public class android.media.MediaRouter$UserRouteInfo
  extends android.media.MediaRouter$RouteInfo
{
  public void requestSetVolume(int);
  public void requestUpdateVolume(int);
  public void setDescription(java.lang.CharSequence);
  public void setIconDrawable(android.graphics.drawable.Drawable);
  public void setIconResource(int);
  public void setName(int);
  public void setName(java.lang.CharSequence);
  public void setPlaybackStream(int);
  public void setPlaybackType(int);
  public void setRemoteControlClient(android.media.RemoteControlClient);
  public void setStatus(java.lang.CharSequence);
  public void setVolume(int);
  public void setVolumeCallback(android.media.MediaRouter$VolumeCallback);
  public void setVolumeHandling(int);
  public void setVolumeMax(int);
  public android.media.RemoteControlClient getRemoteControlClient();
}
public abstract class android.media.MediaRouter$VolumeCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onVolumeSetRequest(android.media.MediaRouter$RouteInfo, int);
  public abstract void onVolumeUpdateRequest(android.media.MediaRouter$RouteInfo, int);
}
public class android.media.MediaScannerConnection
  extends java.lang.Object
  implements android.content.ServiceConnection
{
  public static void scanFile(android.content.Context, java.lang.String[], java.lang.String[], android.media.MediaScannerConnection$OnScanCompletedListener);
  public void <init>(android.content.Context, android.media.MediaScannerConnection$MediaScannerConnectionClient);
  public boolean isConnected();
  public void connect();
  public void disconnect();
  public void onServiceConnected(android.content.ComponentName, android.os.IBinder);
  public void onServiceDisconnected(android.content.ComponentName);
  public void scanFile(java.lang.String, java.lang.String);
}
public interface android.media.MediaScannerConnection$MediaScannerConnectionClient
  extends android.media.MediaScannerConnection$OnScanCompletedListener
{
  public abstract void onMediaScannerConnected();
  public abstract void onScanCompleted(java.lang.String, android.net.Uri);
}
public interface android.media.MediaScannerConnection$OnScanCompletedListener
{
  public abstract void onScanCompleted(java.lang.String, android.net.Uri);
}
public final class android.media.MediaSync
  extends java.lang.Object
{
  public void <init>();
  public final void release();
  public final native android.view.Surface createInputSurface();
  public void flush();
  public void queueAudio(java.nio.ByteBuffer, int, long);
  public void setAudioTrack(android.media.AudioTrack);
  public void setCallback(android.media.MediaSync$Callback, android.os.Handler);
  public void setOnErrorListener(android.media.MediaSync$OnErrorListener, android.os.Handler);
  public void setPlaybackParams(android.media.PlaybackParams);
  public void setSurface(android.view.Surface);
  public void setSyncParams(android.media.SyncParams);
  public android.media.MediaTimestamp getTimestamp();
  public native android.media.PlaybackParams getPlaybackParams();
  public native android.media.SyncParams getSyncParams();
  protected void finalize();
  public static final int MEDIASYNC_ERROR_AUDIOTRACK_FAIL;
  public static final int MEDIASYNC_ERROR_SURFACE_FAIL;
}
public abstract class android.media.MediaSync$Callback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onAudioBufferConsumed(android.media.MediaSync, java.nio.ByteBuffer, int);
}
public interface android.media.MediaSync$OnErrorListener
{
  public abstract void onError(android.media.MediaSync, int, int);
}
public class android.media.MediaSyncEvent
  extends java.lang.Object
{
  public static android.media.MediaSyncEvent createEvent(int)  throws java.lang.IllegalArgumentException;
  public int getAudioSessionId();
  public int getType();
  public android.media.MediaSyncEvent setAudioSessionId(int)  throws java.lang.IllegalArgumentException;
  public static final int SYNC_EVENT_NONE;
  public static final int SYNC_EVENT_PRESENTATION_COMPLETE;
}
public final class android.media.MediaTimestamp
  extends java.lang.Object
{
  public float getMediaClockRate();
  public long getAnchorMediaTimeUs();
  public long getAnchorSytemNanoTime();
}
public final class android.media.NotProvisionedException
  extends android.media.MediaDrmException
{
  public void <init>(java.lang.String);
}
public final class android.media.PlaybackParams
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public float getPitch();
  public float getSpeed();
  public int describeContents();
  public int getAudioFallbackMode();
  public void writeToParcel(android.os.Parcel, int);
  public android.media.PlaybackParams allowDefaults();
  public android.media.PlaybackParams setAudioFallbackMode(int);
  public android.media.PlaybackParams setPitch(float);
  public android.media.PlaybackParams setSpeed(float);
  public static final int AUDIO_FALLBACK_MODE_DEFAULT;
  public static final int AUDIO_FALLBACK_MODE_FAIL;
  public static final int AUDIO_FALLBACK_MODE_MUTE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.media.Rating
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.media.Rating newHeartRating(boolean);
  public static android.media.Rating newPercentageRating(float);
  public static android.media.Rating newStarRating(int, float);
  public static android.media.Rating newThumbRating(boolean);
  public static android.media.Rating newUnratedRating(int);
  public boolean hasHeart();
  public boolean isRated();
  public boolean isThumbUp();
  public float getPercentRating();
  public float getStarRating();
  public int describeContents();
  public int getRatingStyle();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int RATING_3_STARS;
  public static final int RATING_4_STARS;
  public static final int RATING_5_STARS;
  public static final int RATING_HEART;
  public static final int RATING_NONE;
  public static final int RATING_PERCENTAGE;
  public static final int RATING_THUMB_UP_DOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.media.RemoteControlClient
  extends java.lang.Object
{
  public void <init>(android.app.PendingIntent);
  public void <init>(android.app.PendingIntent, android.os.Looper);
  public void setMetadataUpdateListener(android.media.RemoteControlClient$OnMetadataUpdateListener);
  public void setOnGetPlaybackPositionListener(android.media.RemoteControlClient$OnGetPlaybackPositionListener);
  public void setPlaybackPositionUpdateListener(android.media.RemoteControlClient$OnPlaybackPositionUpdateListener);
  public void setPlaybackState(int);
  public void setPlaybackState(int, long, float);
  public void setTransportControlFlags(int);
  public android.media.RemoteControlClient$MetadataEditor editMetadata(boolean);
  public android.media.session.MediaSession getMediaSession();
  public static final int FLAG_KEY_MEDIA_FAST_FORWARD;
  public static final int FLAG_KEY_MEDIA_NEXT;
  public static final int FLAG_KEY_MEDIA_PAUSE;
  public static final int FLAG_KEY_MEDIA_PLAY;
  public static final int FLAG_KEY_MEDIA_PLAY_PAUSE;
  public static final int FLAG_KEY_MEDIA_POSITION_UPDATE;
  public static final int FLAG_KEY_MEDIA_PREVIOUS;
  public static final int FLAG_KEY_MEDIA_RATING;
  public static final int FLAG_KEY_MEDIA_REWIND;
  public static final int FLAG_KEY_MEDIA_STOP;
  public static final int PLAYSTATE_BUFFERING;
  public static final int PLAYSTATE_ERROR;
  public static final int PLAYSTATE_FAST_FORWARDING;
  public static final int PLAYSTATE_PAUSED;
  public static final int PLAYSTATE_PLAYING;
  public static final int PLAYSTATE_REWINDING;
  public static final int PLAYSTATE_SKIPPING_BACKWARDS;
  public static final int PLAYSTATE_SKIPPING_FORWARDS;
  public static final int PLAYSTATE_STOPPED;
}
public class android.media.RemoteControlClient$MetadataEditor
  extends android.media.MediaMetadataEditor
{
  public void apply();
  public void clear();
  public android.media.MediaMetadataEditor putBitmap(int, android.graphics.Bitmap)  throws java.lang.IllegalArgumentException;
  public android.media.MediaMetadataEditor putLong(int, long)  throws java.lang.IllegalArgumentException;
  public android.media.MediaMetadataEditor putObject(int, java.lang.Object)  throws java.lang.IllegalArgumentException;
  public android.media.MediaMetadataEditor putString(int, java.lang.String)  throws java.lang.IllegalArgumentException;
  public android.media.RemoteControlClient$MetadataEditor putBitmap(int, android.graphics.Bitmap)  throws java.lang.IllegalArgumentException;
  public android.media.RemoteControlClient$MetadataEditor putLong(int, long)  throws java.lang.IllegalArgumentException;
  public android.media.RemoteControlClient$MetadataEditor putObject(int, java.lang.Object)  throws java.lang.IllegalArgumentException;
  public android.media.RemoteControlClient$MetadataEditor putString(int, java.lang.String)  throws java.lang.IllegalArgumentException;
  public static final int BITMAP_KEY_ARTWORK;
}
public interface android.media.RemoteControlClient$OnGetPlaybackPositionListener
{
  public abstract long onGetPlaybackPosition();
}
public interface android.media.RemoteControlClient$OnMetadataUpdateListener
{
  public abstract void onMetadataUpdate(int, java.lang.Object);
}
public interface android.media.RemoteControlClient$OnPlaybackPositionUpdateListener
{
  public abstract void onPlaybackPositionUpdate(long);
}
public final class android.media.RemoteController
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.media.RemoteController$OnClientUpdateListener)  throws java.lang.IllegalArgumentException;
  public void <init>(android.content.Context, android.media.RemoteController$OnClientUpdateListener, android.os.Looper)  throws java.lang.IllegalArgumentException;
  public boolean clearArtworkConfiguration();
  public boolean seekTo(long)  throws java.lang.IllegalArgumentException;
  public boolean sendMediaKeyEvent(android.view.KeyEvent)  throws java.lang.IllegalArgumentException;
  public boolean setArtworkConfiguration(int, int)  throws java.lang.IllegalArgumentException;
  public boolean setSynchronizationMode(int)  throws java.lang.IllegalArgumentException;
  public long getEstimatedMediaPosition();
  public android.media.RemoteController$MetadataEditor editMetadata();
  public static final int POSITION_SYNCHRONIZATION_CHECK;
  public static final int POSITION_SYNCHRONIZATION_NONE;
}
public class android.media.RemoteController$MetadataEditor
  extends android.media.MediaMetadataEditor
{
  public void apply();
}
public interface android.media.RemoteController$OnClientUpdateListener
{
  public abstract void onClientChange(boolean);
  public abstract void onClientMetadataUpdate(android.media.RemoteController$MetadataEditor);
  public abstract void onClientPlaybackStateUpdate(int);
  public abstract void onClientPlaybackStateUpdate(int, long, long, float);
  public abstract void onClientTransportControlUpdate(int);
}
public final class android.media.ResourceBusyException
  extends android.media.MediaDrmException
{
  public void <init>(java.lang.String);
}
public class android.media.Ringtone
  extends java.lang.Object
{
  public boolean isPlaying();
  public int getStreamType();
  public void play();
  public void setAudioAttributes(android.media.AudioAttributes)  throws java.lang.IllegalArgumentException;
  public void setStreamType(int);
  public void stop();
  public android.media.AudioAttributes getAudioAttributes();
  public java.lang.String getTitle(android.content.Context);
  protected void finalize();
}
public class android.media.RingtoneManager
  extends java.lang.Object
{
  public static boolean isDefault(android.net.Uri);
  public static int getDefaultType(android.net.Uri);
  public static void setActualDefaultRingtoneUri(android.content.Context, int, android.net.Uri);
  public static android.media.Ringtone getRingtone(android.content.Context, android.net.Uri);
  public static android.net.Uri getActualDefaultRingtoneUri(android.content.Context, int);
  public static android.net.Uri getDefaultUri(int);
  public static android.net.Uri getValidRingtoneUri(android.content.Context);
  public void <init>(android.app.Activity);
  public void <init>(android.content.Context);
  public boolean getIncludeDrm();
  public boolean getStopPreviousRingtone();
  public int getRingtonePosition(android.net.Uri);
  public int inferStreamType();
  public void setIncludeDrm(boolean);
  public void setStopPreviousRingtone(boolean);
  public void setType(int);
  public void stopPreviousRingtone();
  public android.database.Cursor getCursor();
  public android.media.Ringtone getRingtone(int);
  public android.net.Uri getRingtoneUri(int);
  public static final int ID_COLUMN_INDEX;
  public static final int TITLE_COLUMN_INDEX;
  public static final int TYPE_ALARM;
  public static final int TYPE_ALL;
  public static final int TYPE_NOTIFICATION;
  public static final int TYPE_RINGTONE;
  public static final int URI_COLUMN_INDEX;
  public static final java.lang.String ACTION_RINGTONE_PICKER;
  public static final java.lang.String EXTRA_RINGTONE_DEFAULT_URI;
  public static final java.lang.String EXTRA_RINGTONE_EXISTING_URI;
  public static final java.lang.String EXTRA_RINGTONE_INCLUDE_DRM;
  public static final java.lang.String EXTRA_RINGTONE_PICKED_URI;
  public static final java.lang.String EXTRA_RINGTONE_SHOW_DEFAULT;
  public static final java.lang.String EXTRA_RINGTONE_SHOW_SILENT;
  public static final java.lang.String EXTRA_RINGTONE_TITLE;
  public static final java.lang.String EXTRA_RINGTONE_TYPE;
}
public class android.media.SoundPool
  extends java.lang.Object
{
  public void <init>(int, int, int);
  public final int play(int, float, float, int, int, float);
  public final native boolean unload(int);
  public final native void autoPause();
  public final native void autoResume();
  public final native void pause(int);
  public final native void resume(int);
  public final native void setLoop(int, int);
  public final native void setPriority(int, int);
  public final native void setRate(int, float);
  public final native void stop(int);
  public final void release();
  public final void setVolume(int, float, float);
  public int load(android.content.Context, int, int);
  public int load(android.content.res.AssetFileDescriptor, int);
  public int load(java.io.FileDescriptor, long, long, int);
  public int load(java.lang.String, int);
  public void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener);
  protected void finalize();
}
public class android.media.SoundPool$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.media.SoundPool build();
  public android.media.SoundPool$Builder setAudioAttributes(android.media.AudioAttributes)  throws java.lang.IllegalArgumentException;
  public android.media.SoundPool$Builder setMaxStreams(int)  throws java.lang.IllegalArgumentException;
}
public interface android.media.SoundPool$OnLoadCompleteListener
{
  public abstract void onLoadComplete(android.media.SoundPool, int, int);
}
public final class android.media.SyncParams
  extends java.lang.Object
{
  public void <init>();
  public float getFrameRate();
  public float getTolerance();
  public int getAudioAdjustMode();
  public int getSyncSource();
  public android.media.SyncParams allowDefaults();
  public android.media.SyncParams setAudioAdjustMode(int);
  public android.media.SyncParams setFrameRate(float);
  public android.media.SyncParams setSyncSource(int);
  public android.media.SyncParams setTolerance(float);
  public static final int AUDIO_ADJUST_MODE_DEFAULT;
  public static final int AUDIO_ADJUST_MODE_RESAMPLE;
  public static final int AUDIO_ADJUST_MODE_STRETCH;
  public static final int SYNC_SOURCE_AUDIO;
  public static final int SYNC_SOURCE_DEFAULT;
  public static final int SYNC_SOURCE_SYSTEM_CLOCK;
  public static final int SYNC_SOURCE_VSYNC;
}
public class android.media.ThumbnailUtils
  extends java.lang.Object
{
  public static android.graphics.Bitmap createVideoThumbnail(java.lang.String, int);
  public static android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap, int, int);
  public static android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap, int, int, int);
  public void <init>();
  public static final int OPTIONS_RECYCLE_INPUT;
}
public final class android.media.TimedMetaData
  extends java.lang.Object
{
  public long getTimestamp();
  public byte[] getMetaData();
}
public final class android.media.TimedText
  extends java.lang.Object
{
  public android.graphics.Rect getBounds();
  public java.lang.String getText();
}
public class android.media.ToneGenerator
  extends java.lang.Object
{
  public void <init>(int, int);
  public final native int getAudioSessionId();
  public boolean startTone(int);
  public native boolean startTone(int, int);
  public native void release();
  public native void stopTone();
  protected void finalize();
  public static final int MAX_VOLUME;
  public static final int MIN_VOLUME;
  public static final int TONE_CDMA_ABBR_ALERT;
  public static final int TONE_CDMA_ABBR_INTERCEPT;
  public static final int TONE_CDMA_ABBR_REORDER;
  public static final int TONE_CDMA_ALERT_AUTOREDIAL_LITE;
  public static final int TONE_CDMA_ALERT_CALL_GUARD;
  public static final int TONE_CDMA_ALERT_INCALL_LITE;
  public static final int TONE_CDMA_ALERT_NETWORK_LITE;
  public static final int TONE_CDMA_ANSWER;
  public static final int TONE_CDMA_CALLDROP_LITE;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT3;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT5;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT6;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_PAT7;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING;
  public static final int TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI;
  public static final int TONE_CDMA_CONFIRM;
  public static final int TONE_CDMA_DIAL_TONE_LITE;
  public static final int TONE_CDMA_EMERGENCY_RINGBACK;
  public static final int TONE_CDMA_HIGH_L;
  public static final int TONE_CDMA_HIGH_PBX_L;
  public static final int TONE_CDMA_HIGH_PBX_SLS;
  public static final int TONE_CDMA_HIGH_PBX_SS;
  public static final int TONE_CDMA_HIGH_PBX_SSL;
  public static final int TONE_CDMA_HIGH_PBX_S_X4;
  public static final int TONE_CDMA_HIGH_SLS;
  public static final int TONE_CDMA_HIGH_SS;
  public static final int TONE_CDMA_HIGH_SSL;
  public static final int TONE_CDMA_HIGH_SS_2;
  public static final int TONE_CDMA_HIGH_S_X4;
  public static final int TONE_CDMA_INTERCEPT;
  public static final int TONE_CDMA_KEYPAD_VOLUME_KEY_LITE;
  public static final int TONE_CDMA_LOW_L;
  public static final int TONE_CDMA_LOW_PBX_L;
  public static final int TONE_CDMA_LOW_PBX_SLS;
  public static final int TONE_CDMA_LOW_PBX_SS;
  public static final int TONE_CDMA_LOW_PBX_SSL;
  public static final int TONE_CDMA_LOW_PBX_S_X4;
  public static final int TONE_CDMA_LOW_SLS;
  public static final int TONE_CDMA_LOW_SS;
  public static final int TONE_CDMA_LOW_SSL;
  public static final int TONE_CDMA_LOW_SS_2;
  public static final int TONE_CDMA_LOW_S_X4;
  public static final int TONE_CDMA_MED_L;
  public static final int TONE_CDMA_MED_PBX_L;
  public static final int TONE_CDMA_MED_PBX_SLS;
  public static final int TONE_CDMA_MED_PBX_SS;
  public static final int TONE_CDMA_MED_PBX_SSL;
  public static final int TONE_CDMA_MED_PBX_S_X4;
  public static final int TONE_CDMA_MED_SLS;
  public static final int TONE_CDMA_MED_SS;
  public static final int TONE_CDMA_MED_SSL;
  public static final int TONE_CDMA_MED_SS_2;
  public static final int TONE_CDMA_MED_S_X4;
  public static final int TONE_CDMA_NETWORK_BUSY;
  public static final int TONE_CDMA_NETWORK_BUSY_ONE_SHOT;
  public static final int TONE_CDMA_NETWORK_CALLWAITING;
  public static final int TONE_CDMA_NETWORK_USA_RINGBACK;
  public static final int TONE_CDMA_ONE_MIN_BEEP;
  public static final int TONE_CDMA_PIP;
  public static final int TONE_CDMA_PRESSHOLDKEY_LITE;
  public static final int TONE_CDMA_REORDER;
  public static final int TONE_CDMA_SIGNAL_OFF;
  public static final int TONE_CDMA_SOFT_ERROR_LITE;
  public static final int TONE_DTMF_0;
  public static final int TONE_DTMF_1;
  public static final int TONE_DTMF_2;
  public static final int TONE_DTMF_3;
  public static final int TONE_DTMF_4;
  public static final int TONE_DTMF_5;
  public static final int TONE_DTMF_6;
  public static final int TONE_DTMF_7;
  public static final int TONE_DTMF_8;
  public static final int TONE_DTMF_9;
  public static final int TONE_DTMF_A;
  public static final int TONE_DTMF_B;
  public static final int TONE_DTMF_C;
  public static final int TONE_DTMF_D;
  public static final int TONE_DTMF_P;
  public static final int TONE_DTMF_S;
  public static final int TONE_PROP_ACK;
  public static final int TONE_PROP_BEEP2;
  public static final int TONE_PROP_BEEP;
  public static final int TONE_PROP_NACK;
  public static final int TONE_PROP_PROMPT;
  public static final int TONE_SUP_BUSY;
  public static final int TONE_SUP_CALL_WAITING;
  public static final int TONE_SUP_CONFIRM;
  public static final int TONE_SUP_CONGESTION;
  public static final int TONE_SUP_CONGESTION_ABBREV;
  public static final int TONE_SUP_DIAL;
  public static final int TONE_SUP_ERROR;
  public static final int TONE_SUP_INTERCEPT;
  public static final int TONE_SUP_INTERCEPT_ABBREV;
  public static final int TONE_SUP_PIP;
  public static final int TONE_SUP_RADIO_ACK;
  public static final int TONE_SUP_RADIO_NOTAVAIL;
  public static final int TONE_SUP_RINGTONE;
}
public final class android.media.UnsupportedSchemeException
  extends android.media.MediaDrmException
{
  public void <init>(java.lang.String);
}
public abstract class android.media.VolumeProvider
  extends java.lang.Object
{
  public void <init>(int, int, int);
  public final int getCurrentVolume();
  public final int getMaxVolume();
  public final int getVolumeControl();
  public final void setCurrentVolume(int);
  public void onAdjustVolume(int);
  public void onSetVolumeTo(int);
  public static final int VOLUME_CONTROL_ABSOLUTE;
  public static final int VOLUME_CONTROL_FIXED;
  public static final int VOLUME_CONTROL_RELATIVE;
}
public class android.media.audiofx.AcousticEchoCanceler
  extends android.media.audiofx.AudioEffect
{
  public static boolean isAvailable();
  public static android.media.audiofx.AcousticEchoCanceler create(int);
}
public class android.media.audiofx.AudioEffect
  extends java.lang.Object
{
  public static android.media.audiofx.AudioEffect$Descriptor[] queryEffects();
  public boolean getEnabled()  throws java.lang.IllegalStateException;
  public boolean hasControl()  throws java.lang.IllegalStateException;
  public int getId()  throws java.lang.IllegalStateException;
  public int setEnabled(boolean)  throws java.lang.IllegalStateException;
  public void release();
  public void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener);
  public void setEnableStatusListener(android.media.audiofx.AudioEffect$OnEnableStatusChangeListener);
  public android.media.audiofx.AudioEffect$Descriptor getDescriptor()  throws java.lang.IllegalStateException;
  protected void finalize();
  public static final int ALREADY_EXISTS;
  public static final int CONTENT_TYPE_GAME;
  public static final int CONTENT_TYPE_MOVIE;
  public static final int CONTENT_TYPE_MUSIC;
  public static final int CONTENT_TYPE_VOICE;
  public static final int ERROR;
  public static final int ERROR_BAD_VALUE;
  public static final int ERROR_DEAD_OBJECT;
  public static final int ERROR_INVALID_OPERATION;
  public static final int ERROR_NO_INIT;
  public static final int ERROR_NO_MEMORY;
  public static final int SUCCESS;
  public static final java.lang.String ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION;
  public static final java.lang.String ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL;
  public static final java.lang.String ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION;
  public static final java.lang.String EFFECT_AUXILIARY;
  public static final java.lang.String EFFECT_INSERT;
  public static final java.lang.String EXTRA_AUDIO_SESSION;
  public static final java.lang.String EXTRA_CONTENT_TYPE;
  public static final java.lang.String EXTRA_PACKAGE_NAME;
  public static final java.util.UUID EFFECT_TYPE_AEC;
  public static final java.util.UUID EFFECT_TYPE_AGC;
  public static final java.util.UUID EFFECT_TYPE_BASS_BOOST;
  public static final java.util.UUID EFFECT_TYPE_ENV_REVERB;
  public static final java.util.UUID EFFECT_TYPE_EQUALIZER;
  public static final java.util.UUID EFFECT_TYPE_LOUDNESS_ENHANCER;
  public static final java.util.UUID EFFECT_TYPE_NS;
  public static final java.util.UUID EFFECT_TYPE_PRESET_REVERB;
  public static final java.util.UUID EFFECT_TYPE_VIRTUALIZER;
}
public class android.media.audiofx.AudioEffect$Descriptor
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String connectMode;
  public java.lang.String implementor;
  public java.lang.String name;
  public java.util.UUID type;
  public java.util.UUID uuid;
}
public interface android.media.audiofx.AudioEffect$OnControlStatusChangeListener
{
  public abstract void onControlStatusChange(android.media.audiofx.AudioEffect, boolean);
}
public interface android.media.audiofx.AudioEffect$OnEnableStatusChangeListener
{
  public abstract void onEnableStatusChange(android.media.audiofx.AudioEffect, boolean);
}
public class android.media.audiofx.AutomaticGainControl
  extends android.media.audiofx.AudioEffect
{
  public static boolean isAvailable();
  public static android.media.audiofx.AutomaticGainControl create(int);
}
public class android.media.audiofx.BassBoost
  extends android.media.audiofx.AudioEffect
{
  public void <init>(int, int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.RuntimeException, java.lang.UnsupportedOperationException;
  public boolean getStrengthSupported();
  public short getRoundedStrength()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setParameterListener(android.media.audiofx.BassBoost$OnParameterChangeListener);
  public void setProperties(android.media.audiofx.BassBoost$Settings)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setStrength(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public android.media.audiofx.BassBoost$Settings getProperties()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public static final int PARAM_STRENGTH;
  public static final int PARAM_STRENGTH_SUPPORTED;
}
public interface android.media.audiofx.BassBoost$OnParameterChangeListener
{
  public abstract void onParameterChange(android.media.audiofx.BassBoost, int, int, short);
}
public class android.media.audiofx.BassBoost$Settings
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.String);
  public java.lang.String toString();
  public short strength;
}
public class android.media.audiofx.EnvironmentalReverb
  extends android.media.audiofx.AudioEffect
{
  public void <init>(int, int)  throws java.lang.IllegalArgumentException, java.lang.RuntimeException, java.lang.UnsupportedOperationException;
  public int getDecayTime()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public int getReflectionsDelay()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public int getReverbDelay()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getDecayHFRatio()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getDensity()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getDiffusion()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getReflectionsLevel()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getReverbLevel()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getRoomHFLevel()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getRoomLevel()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setDecayHFRatio(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setDecayTime(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setDensity(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setDiffusion(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setParameterListener(android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener);
  public void setProperties(android.media.audiofx.EnvironmentalReverb$Settings)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setReflectionsDelay(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setReflectionsLevel(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setReverbDelay(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setReverbLevel(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setRoomHFLevel(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setRoomLevel(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public android.media.audiofx.EnvironmentalReverb$Settings getProperties()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public static final int PARAM_DECAY_HF_RATIO;
  public static final int PARAM_DECAY_TIME;
  public static final int PARAM_DENSITY;
  public static final int PARAM_DIFFUSION;
  public static final int PARAM_REFLECTIONS_DELAY;
  public static final int PARAM_REFLECTIONS_LEVEL;
  public static final int PARAM_REVERB_DELAY;
  public static final int PARAM_REVERB_LEVEL;
  public static final int PARAM_ROOM_HF_LEVEL;
  public static final int PARAM_ROOM_LEVEL;
}
public interface android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener
{
  public abstract void onParameterChange(android.media.audiofx.EnvironmentalReverb, int, int, int);
}
public class android.media.audiofx.EnvironmentalReverb$Settings
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.String);
  public java.lang.String toString();
  public int decayTime;
  public int reflectionsDelay;
  public int reverbDelay;
  public short decayHFRatio;
  public short density;
  public short diffusion;
  public short reflectionsLevel;
  public short reverbLevel;
  public short roomHFLevel;
  public short roomLevel;
}
public class android.media.audiofx.Equalizer
  extends android.media.audiofx.AudioEffect
{
  public void <init>(int, int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.RuntimeException, java.lang.UnsupportedOperationException;
  public int getCenterFreq(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getBand(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getBandLevel(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getCurrentPreset()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getNumberOfBands()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getNumberOfPresets()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setBandLevel(short, short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setParameterListener(android.media.audiofx.Equalizer$OnParameterChangeListener);
  public void setProperties(android.media.audiofx.Equalizer$Settings)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void usePreset(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public android.media.audiofx.Equalizer$Settings getProperties()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public int[] getBandFreqRange(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public java.lang.String getPresetName(short);
  public short[] getBandLevelRange()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public static final int PARAM_BAND_FREQ_RANGE;
  public static final int PARAM_BAND_LEVEL;
  public static final int PARAM_CENTER_FREQ;
  public static final int PARAM_CURRENT_PRESET;
  public static final int PARAM_GET_BAND;
  public static final int PARAM_GET_NUM_OF_PRESETS;
  public static final int PARAM_GET_PRESET_NAME;
  public static final int PARAM_LEVEL_RANGE;
  public static final int PARAM_NUM_BANDS;
  public static final int PARAM_STRING_SIZE_MAX;
}
public interface android.media.audiofx.Equalizer$OnParameterChangeListener
{
  public abstract void onParameterChange(android.media.audiofx.Equalizer, int, int, int, int);
}
public class android.media.audiofx.Equalizer$Settings
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.String);
  public java.lang.String toString();
  public short curPreset;
  public short numBands;
  public short[] bandLevels;
}
public class android.media.audiofx.LoudnessEnhancer
  extends android.media.audiofx.AudioEffect
{
  public void <init>(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.RuntimeException, java.lang.UnsupportedOperationException;
  public float getTargetGain()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setTargetGain(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public static final int PARAM_TARGET_GAIN_MB;
}
public class android.media.audiofx.NoiseSuppressor
  extends android.media.audiofx.AudioEffect
{
  public static boolean isAvailable();
  public static android.media.audiofx.NoiseSuppressor create(int);
}
public class android.media.audiofx.PresetReverb
  extends android.media.audiofx.AudioEffect
{
  public void <init>(int, int)  throws java.lang.IllegalArgumentException, java.lang.RuntimeException, java.lang.UnsupportedOperationException;
  public short getPreset()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setParameterListener(android.media.audiofx.PresetReverb$OnParameterChangeListener);
  public void setPreset(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setProperties(android.media.audiofx.PresetReverb$Settings)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public android.media.audiofx.PresetReverb$Settings getProperties()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public static final int PARAM_PRESET;
  public static final short PRESET_LARGEHALL;
  public static final short PRESET_LARGEROOM;
  public static final short PRESET_MEDIUMHALL;
  public static final short PRESET_MEDIUMROOM;
  public static final short PRESET_NONE;
  public static final short PRESET_PLATE;
  public static final short PRESET_SMALLROOM;
}
public interface android.media.audiofx.PresetReverb$OnParameterChangeListener
{
  public abstract void onParameterChange(android.media.audiofx.PresetReverb, int, int, short);
}
public class android.media.audiofx.PresetReverb$Settings
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.String);
  public java.lang.String toString();
  public short preset;
}
public class android.media.audiofx.Virtualizer
  extends android.media.audiofx.AudioEffect
{
  public void <init>(int, int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.RuntimeException, java.lang.UnsupportedOperationException;
  public boolean canVirtualize(int, int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public boolean forceVirtualizationMode(int)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public boolean getSpeakerAngles(int, int, int[])  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public boolean getStrengthSupported();
  public int getVirtualizationMode()  throws java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public short getRoundedStrength()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setParameterListener(android.media.audiofx.Virtualizer$OnParameterChangeListener);
  public void setProperties(android.media.audiofx.Virtualizer$Settings)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public void setStrength(short)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public android.media.audiofx.Virtualizer$Settings getProperties()  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.lang.UnsupportedOperationException;
  public static final int PARAM_STRENGTH;
  public static final int PARAM_STRENGTH_SUPPORTED;
  public static final int VIRTUALIZATION_MODE_AUTO;
  public static final int VIRTUALIZATION_MODE_BINAURAL;
  public static final int VIRTUALIZATION_MODE_OFF;
  public static final int VIRTUALIZATION_MODE_TRANSAURAL;
}
public interface android.media.audiofx.Virtualizer$OnParameterChangeListener
{
  public abstract void onParameterChange(android.media.audiofx.Virtualizer, int, int, short);
}
public class android.media.audiofx.Virtualizer$Settings
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.String);
  public java.lang.String toString();
  public short strength;
}
public class android.media.audiofx.Visualizer
  extends java.lang.Object
{
  public static native int getMaxCaptureRate();
  public static native int[] getCaptureSizeRange();
  public void <init>(int)  throws java.lang.RuntimeException, java.lang.UnsupportedOperationException;
  public boolean getEnabled();
  public int getCaptureSize()  throws java.lang.IllegalStateException;
  public int getFft(byte[])  throws java.lang.IllegalStateException;
  public int getMeasurementMode()  throws java.lang.IllegalStateException;
  public int getMeasurementPeakRms(android.media.audiofx.Visualizer$MeasurementPeakRms);
  public int getSamplingRate()  throws java.lang.IllegalStateException;
  public int getScalingMode()  throws java.lang.IllegalStateException;
  public int getWaveForm(byte[])  throws java.lang.IllegalStateException;
  public int setCaptureSize(int)  throws java.lang.IllegalStateException;
  public int setDataCaptureListener(android.media.audiofx.Visualizer$OnDataCaptureListener, int, boolean, boolean);
  public int setEnabled(boolean)  throws java.lang.IllegalStateException;
  public int setMeasurementMode(int)  throws java.lang.IllegalStateException;
  public int setScalingMode(int)  throws java.lang.IllegalStateException;
  public void release();
  protected void finalize();
  public static final int ALREADY_EXISTS;
  public static final int ERROR;
  public static final int ERROR_BAD_VALUE;
  public static final int ERROR_DEAD_OBJECT;
  public static final int ERROR_INVALID_OPERATION;
  public static final int ERROR_NO_INIT;
  public static final int ERROR_NO_MEMORY;
  public static final int MEASUREMENT_MODE_NONE;
  public static final int MEASUREMENT_MODE_PEAK_RMS;
  public static final int SCALING_MODE_AS_PLAYED;
  public static final int SCALING_MODE_NORMALIZED;
  public static final int STATE_ENABLED;
  public static final int STATE_INITIALIZED;
  public static final int STATE_UNINITIALIZED;
  public static final int SUCCESS;
}
public final class android.media.audiofx.Visualizer$MeasurementPeakRms
  extends java.lang.Object
{
  public void <init>();
  public int mPeak;
  public int mRms;
}
public interface android.media.audiofx.Visualizer$OnDataCaptureListener
{
  public abstract void onFftDataCapture(android.media.audiofx.Visualizer, byte[], int);
  public abstract void onWaveFormDataCapture(android.media.audiofx.Visualizer, byte[], int);
}
public final class android.media.browse.MediaBrowser
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.content.ComponentName, android.media.browse.MediaBrowser$ConnectionCallback, android.os.Bundle);
  public boolean isConnected();
  public void connect();
  public void disconnect();
  public void getItem(java.lang.String, android.media.browse.MediaBrowser$ItemCallback);
  public void subscribe(java.lang.String, android.media.browse.MediaBrowser$SubscriptionCallback);
  public void subscribe(java.lang.String, android.os.Bundle, android.media.browse.MediaBrowser$SubscriptionCallback);
  public void unsubscribe(java.lang.String);
  public void unsubscribe(java.lang.String, android.media.browse.MediaBrowser$SubscriptionCallback);
  public android.content.ComponentName getServiceComponent();
  public android.media.session.MediaSession$Token getSessionToken();
  public android.os.Bundle getExtras();
  public java.lang.String getRoot();
  public static final java.lang.String EXTRA_PAGE;
  public static final java.lang.String EXTRA_PAGE_SIZE;
}
public class android.media.browse.MediaBrowser$ConnectionCallback
  extends java.lang.Object
{
  public void <init>();
  public void onConnected();
  public void onConnectionFailed();
  public void onConnectionSuspended();
}
public abstract class android.media.browse.MediaBrowser$ItemCallback
  extends java.lang.Object
{
  public void <init>();
  public void onError(java.lang.String);
  public void onItemLoaded(android.media.browse.MediaBrowser$MediaItem);
}
public class android.media.browse.MediaBrowser$MediaItem
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.media.MediaDescription, int);
  public boolean isBrowsable();
  public boolean isPlayable();
  public int describeContents();
  public int getFlags();
  public void writeToParcel(android.os.Parcel, int);
  public android.media.MediaDescription getDescription();
  public java.lang.String getMediaId();
  public java.lang.String toString();
  public static final int FLAG_BROWSABLE;
  public static final int FLAG_PLAYABLE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.media.browse.MediaBrowser$SubscriptionCallback
  extends java.lang.Object
{
  public void <init>();
  public void onChildrenLoaded(java.lang.String, java.util.List);
  public void onChildrenLoaded(java.lang.String, java.util.List, android.os.Bundle);
  public void onError(java.lang.String);
  public void onError(java.lang.String, android.os.Bundle);
}
public abstract class android.media.effect.Effect
  extends java.lang.Object
{
  public void <init>();
  public abstract void apply(int, int, int, int);
  public abstract void release();
  public abstract void setParameter(java.lang.String, java.lang.Object);
  public abstract java.lang.String getName();
  public void setUpdateListener(android.media.effect.EffectUpdateListener);
}
public class android.media.effect.EffectContext
  extends java.lang.Object
{
  public static android.media.effect.EffectContext createWithCurrentGlContext();
  public void release();
  public android.media.effect.EffectFactory getFactory();
}
public class android.media.effect.EffectFactory
  extends java.lang.Object
{
  public static boolean isEffectSupported(java.lang.String);
  public android.media.effect.Effect createEffect(java.lang.String);
  public static final java.lang.String EFFECT_AUTOFIX;
  public static final java.lang.String EFFECT_BACKDROPPER;
  public static final java.lang.String EFFECT_BITMAPOVERLAY;
  public static final java.lang.String EFFECT_BLACKWHITE;
  public static final java.lang.String EFFECT_BRIGHTNESS;
  public static final java.lang.String EFFECT_CONTRAST;
  public static final java.lang.String EFFECT_CROP;
  public static final java.lang.String EFFECT_CROSSPROCESS;
  public static final java.lang.String EFFECT_DOCUMENTARY;
  public static final java.lang.String EFFECT_DUOTONE;
  public static final java.lang.String EFFECT_FILLLIGHT;
  public static final java.lang.String EFFECT_FISHEYE;
  public static final java.lang.String EFFECT_FLIP;
  public static final java.lang.String EFFECT_GRAIN;
  public static final java.lang.String EFFECT_GRAYSCALE;
  public static final java.lang.String EFFECT_LOMOISH;
  public static final java.lang.String EFFECT_NEGATIVE;
  public static final java.lang.String EFFECT_POSTERIZE;
  public static final java.lang.String EFFECT_REDEYE;
  public static final java.lang.String EFFECT_ROTATE;
  public static final java.lang.String EFFECT_SATURATE;
  public static final java.lang.String EFFECT_SEPIA;
  public static final java.lang.String EFFECT_SHARPEN;
  public static final java.lang.String EFFECT_STRAIGHTEN;
  public static final java.lang.String EFFECT_TEMPERATURE;
  public static final java.lang.String EFFECT_TINT;
  public static final java.lang.String EFFECT_VIGNETTE;
}
public interface android.media.effect.EffectUpdateListener
{
  public abstract void onEffectUpdated(android.media.effect.Effect, java.lang.Object);
}
public final class android.media.midi.MidiDevice
  extends java.lang.Object
  implements java.io.Closeable
{
  public void close()  throws java.io.IOException;
  public android.media.midi.MidiDevice$MidiConnection connectPorts(android.media.midi.MidiInputPort, int);
  public android.media.midi.MidiDeviceInfo getInfo();
  public android.media.midi.MidiInputPort openInputPort(int);
  public android.media.midi.MidiOutputPort openOutputPort(int);
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.media.midi.MidiDevice$MidiConnection
  extends java.lang.Object
  implements java.io.Closeable
{
  public void close()  throws java.io.IOException;
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.media.midi.MidiDeviceInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean isPrivate();
  public int describeContents();
  public int getId();
  public int getInputPortCount();
  public int getOutputPortCount();
  public int getType();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.media.midi.MidiDeviceInfo$PortInfo[] getPorts();
  public android.os.Bundle getProperties();
  public java.lang.String toString();
  public static final int TYPE_BLUETOOTH;
  public static final int TYPE_USB;
  public static final int TYPE_VIRTUAL;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String PROPERTY_BLUETOOTH_DEVICE;
  public static final java.lang.String PROPERTY_MANUFACTURER;
  public static final java.lang.String PROPERTY_NAME;
  public static final java.lang.String PROPERTY_PRODUCT;
  public static final java.lang.String PROPERTY_SERIAL_NUMBER;
  public static final java.lang.String PROPERTY_USB_DEVICE;
  public static final java.lang.String PROPERTY_VERSION;
}
public final class android.media.midi.MidiDeviceInfo$PortInfo
  extends java.lang.Object
{
  public int getPortNumber();
  public int getType();
  public java.lang.String getName();
  public static final int TYPE_INPUT;
  public static final int TYPE_OUTPUT;
}
public abstract class android.media.midi.MidiDeviceService
  extends android.app.Service
{
  public void <init>();
  public final android.media.midi.MidiDeviceInfo getDeviceInfo();
  public final android.media.midi.MidiReceiver[] getOutputPortReceivers();
  public abstract android.media.midi.MidiReceiver[] onGetInputPortReceivers();
  public void onClose();
  public void onCreate();
  public void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus);
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String SERVICE_INTERFACE;
}
public final class android.media.midi.MidiDeviceStatus
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean isInputPortOpen(int);
  public int describeContents();
  public int getOutputPortOpenCount(int);
  public void writeToParcel(android.os.Parcel, int);
  public android.media.midi.MidiDeviceInfo getDeviceInfo();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.media.midi.MidiInputPort
  extends android.media.midi.MidiReceiver
  implements java.io.Closeable
{
  public final int getPortNumber();
  public void close()  throws java.io.IOException;
  public void onFlush()  throws java.io.IOException;
  public void onSend(byte[], int, int, long)  throws java.io.IOException;
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.media.midi.MidiManager
  extends java.lang.Object
{
  public void openBluetoothDevice(android.bluetooth.BluetoothDevice, android.media.midi.MidiManager$OnDeviceOpenedListener, android.os.Handler);
  public void openDevice(android.media.midi.MidiDeviceInfo, android.media.midi.MidiManager$OnDeviceOpenedListener, android.os.Handler);
  public void registerDeviceCallback(android.media.midi.MidiManager$DeviceCallback, android.os.Handler);
  public void unregisterDeviceCallback(android.media.midi.MidiManager$DeviceCallback);
  public android.media.midi.MidiDeviceInfo[] getDevices();
}
public class android.media.midi.MidiManager$DeviceCallback
  extends java.lang.Object
{
  public void <init>();
  public void onDeviceAdded(android.media.midi.MidiDeviceInfo);
  public void onDeviceRemoved(android.media.midi.MidiDeviceInfo);
  public void onDeviceStatusChanged(android.media.midi.MidiDeviceStatus);
}
public interface android.media.midi.MidiManager$OnDeviceOpenedListener
{
  public abstract void onDeviceOpened(android.media.midi.MidiDevice);
}
public final class android.media.midi.MidiOutputPort
  extends android.media.midi.MidiSender
  implements java.io.Closeable
{
  public final int getPortNumber();
  public void close()  throws java.io.IOException;
  public void onConnect(android.media.midi.MidiReceiver);
  public void onDisconnect(android.media.midi.MidiReceiver);
  protected void finalize()  throws java.lang.Throwable;
}
public abstract class android.media.midi.MidiReceiver
  extends java.lang.Object
{
  public void <init>();
  public void <init>(int);
  public final int getMaxMessageSize();
  public abstract void onSend(byte[], int, int, long)  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void onFlush()  throws java.io.IOException;
  public void send(byte[], int, int)  throws java.io.IOException;
  public void send(byte[], int, int, long)  throws java.io.IOException;
}
public abstract class android.media.midi.MidiSender
  extends java.lang.Object
{
  public void <init>();
  public abstract void onConnect(android.media.midi.MidiReceiver);
  public abstract void onDisconnect(android.media.midi.MidiReceiver);
  public void connect(android.media.midi.MidiReceiver);
  public void disconnect(android.media.midi.MidiReceiver);
}
public final class android.media.projection.MediaProjection
  extends java.lang.Object
{
  public void registerCallback(android.media.projection.MediaProjection$Callback, android.os.Handler);
  public void stop();
  public void unregisterCallback(android.media.projection.MediaProjection$Callback);
  public android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, int, android.view.Surface, android.hardware.display.VirtualDisplay$Callback, android.os.Handler);
}
public abstract class android.media.projection.MediaProjection$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onStop();
}
public final class android.media.projection.MediaProjectionManager
  extends java.lang.Object
{
  public android.content.Intent createScreenCaptureIntent();
  public android.media.projection.MediaProjection getMediaProjection(int, android.content.Intent);
}
public final class android.media.session.MediaController
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.media.session.MediaSession$Token);
  public boolean dispatchMediaButtonEvent(android.view.KeyEvent);
  public int getRatingType();
  public long getFlags();
  public void adjustVolume(int, int);
  public void registerCallback(android.media.session.MediaController$Callback);
  public void registerCallback(android.media.session.MediaController$Callback, android.os.Handler);
  public void sendCommand(java.lang.String, android.os.Bundle, android.os.ResultReceiver);
  public void setVolumeTo(int, int);
  public void unregisterCallback(android.media.session.MediaController$Callback);
  public android.app.PendingIntent getSessionActivity();
  public android.media.MediaMetadata getMetadata();
  public android.media.session.MediaController$PlaybackInfo getPlaybackInfo();
  public android.media.session.MediaController$TransportControls getTransportControls();
  public android.media.session.MediaSession$Token getSessionToken();
  public android.media.session.PlaybackState getPlaybackState();
  public android.os.Bundle getExtras();
  public java.lang.CharSequence getQueueTitle();
  public java.lang.String getPackageName();
  public java.util.List getQueue();
}
public abstract class android.media.session.MediaController$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onAudioInfoChanged(android.media.session.MediaController$PlaybackInfo);
  public void onExtrasChanged(android.os.Bundle);
  public void onMetadataChanged(android.media.MediaMetadata);
  public void onPlaybackStateChanged(android.media.session.PlaybackState);
  public void onQueueChanged(java.util.List);
  public void onQueueTitleChanged(java.lang.CharSequence);
  public void onSessionDestroyed();
  public void onSessionEvent(java.lang.String, android.os.Bundle);
}
public final class android.media.session.MediaController$PlaybackInfo
  extends java.lang.Object
{
  public int getCurrentVolume();
  public int getMaxVolume();
  public int getPlaybackType();
  public int getVolumeControl();
  public android.media.AudioAttributes getAudioAttributes();
  public static final int PLAYBACK_TYPE_LOCAL;
  public static final int PLAYBACK_TYPE_REMOTE;
}
public final class android.media.session.MediaController$TransportControls
  extends java.lang.Object
{
  public void fastForward();
  public void pause();
  public void play();
  public void playFromMediaId(java.lang.String, android.os.Bundle);
  public void playFromSearch(java.lang.String, android.os.Bundle);
  public void playFromUri(android.net.Uri, android.os.Bundle);
  public void prepare();
  public void prepareFromMediaId(java.lang.String, android.os.Bundle);
  public void prepareFromSearch(java.lang.String, android.os.Bundle);
  public void prepareFromUri(android.net.Uri, android.os.Bundle);
  public void rewind();
  public void seekTo(long);
  public void sendCustomAction(android.media.session.PlaybackState$CustomAction, android.os.Bundle);
  public void sendCustomAction(java.lang.String, android.os.Bundle);
  public void setRating(android.media.Rating);
  public void skipToNext();
  public void skipToPrevious();
  public void skipToQueueItem(long);
  public void stop();
}
public final class android.media.session.MediaSession
  extends java.lang.Object
{
  public void <init>(android.content.Context, java.lang.String);
  public boolean isActive();
  public void release();
  public void sendSessionEvent(java.lang.String, android.os.Bundle);
  public void setActive(boolean);
  public void setCallback(android.media.session.MediaSession$Callback);
  public void setCallback(android.media.session.MediaSession$Callback, android.os.Handler);
  public void setExtras(android.os.Bundle);
  public void setFlags(int);
  public void setMediaButtonReceiver(android.app.PendingIntent);
  public void setMetadata(android.media.MediaMetadata);
  public void setPlaybackState(android.media.session.PlaybackState);
  public void setPlaybackToLocal(android.media.AudioAttributes);
  public void setPlaybackToRemote(android.media.VolumeProvider);
  public void setQueue(java.util.List);
  public void setQueueTitle(java.lang.CharSequence);
  public void setRatingType(int);
  public void setSessionActivity(android.app.PendingIntent);
  public android.media.session.MediaController getController();
  public android.media.session.MediaSession$Token getSessionToken();
  public static final int FLAG_HANDLES_MEDIA_BUTTONS;
  public static final int FLAG_HANDLES_TRANSPORT_CONTROLS;
}
public abstract class android.media.session.MediaSession$Callback
  extends java.lang.Object
{
  public void <init>();
  public boolean onMediaButtonEvent(android.content.Intent);
  public void onCommand(java.lang.String, android.os.Bundle, android.os.ResultReceiver);
  public void onCustomAction(java.lang.String, android.os.Bundle);
  public void onFastForward();
  public void onPause();
  public void onPlay();
  public void onPlayFromMediaId(java.lang.String, android.os.Bundle);
  public void onPlayFromSearch(java.lang.String, android.os.Bundle);
  public void onPlayFromUri(android.net.Uri, android.os.Bundle);
  public void onPrepare();
  public void onPrepareFromMediaId(java.lang.String, android.os.Bundle);
  public void onPrepareFromSearch(java.lang.String, android.os.Bundle);
  public void onPrepareFromUri(android.net.Uri, android.os.Bundle);
  public void onRewind();
  public void onSeekTo(long);
  public void onSetRating(android.media.Rating);
  public void onSkipToNext();
  public void onSkipToPrevious();
  public void onSkipToQueueItem(long);
  public void onStop();
}
public final class android.media.session.MediaSession$QueueItem
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.media.MediaDescription, long);
  public int describeContents();
  public long getQueueId();
  public void writeToParcel(android.os.Parcel, int);
  public android.media.MediaDescription getDescription();
  public java.lang.String toString();
  public static final int UNKNOWN_ID;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.media.session.MediaSession$Token
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.media.session.MediaSessionManager
  extends java.lang.Object
{
  public void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName);
  public void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName, android.os.Handler);
  public void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener);
  public java.util.List getActiveSessions(android.content.ComponentName);
}
public interface android.media.session.MediaSessionManager$OnActiveSessionsChangedListener
{
  public abstract void onActiveSessionsChanged(java.util.List);
}
public final class android.media.session.PlaybackState
  extends java.lang.Object
  implements android.os.Parcelable
{
  public float getPlaybackSpeed();
  public int describeContents();
  public int getState();
  public long getActions();
  public long getActiveQueueItemId();
  public long getBufferedPosition();
  public long getLastPositionUpdateTime();
  public long getPosition();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getExtras();
  public java.lang.CharSequence getErrorMessage();
  public java.lang.String toString();
  public java.util.List getCustomActions();
  public static final int STATE_BUFFERING;
  public static final int STATE_CONNECTING;
  public static final int STATE_ERROR;
  public static final int STATE_FAST_FORWARDING;
  public static final int STATE_NONE;
  public static final int STATE_PAUSED;
  public static final int STATE_PLAYING;
  public static final int STATE_REWINDING;
  public static final int STATE_SKIPPING_TO_NEXT;
  public static final int STATE_SKIPPING_TO_PREVIOUS;
  public static final int STATE_SKIPPING_TO_QUEUE_ITEM;
  public static final int STATE_STOPPED;
  public static final long ACTION_FAST_FORWARD;
  public static final long ACTION_PAUSE;
  public static final long ACTION_PLAY;
  public static final long ACTION_PLAY_FROM_MEDIA_ID;
  public static final long ACTION_PLAY_FROM_SEARCH;
  public static final long ACTION_PLAY_FROM_URI;
  public static final long ACTION_PLAY_PAUSE;
  public static final long ACTION_PREPARE;
  public static final long ACTION_PREPARE_FROM_MEDIA_ID;
  public static final long ACTION_PREPARE_FROM_SEARCH;
  public static final long ACTION_PREPARE_FROM_URI;
  public static final long ACTION_REWIND;
  public static final long ACTION_SEEK_TO;
  public static final long ACTION_SET_RATING;
  public static final long ACTION_SKIP_TO_NEXT;
  public static final long ACTION_SKIP_TO_PREVIOUS;
  public static final long ACTION_SKIP_TO_QUEUE_ITEM;
  public static final long ACTION_STOP;
  public static final long PLAYBACK_POSITION_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.media.session.PlaybackState$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.media.session.PlaybackState);
  public android.media.session.PlaybackState build();
  public android.media.session.PlaybackState$Builder addCustomAction(android.media.session.PlaybackState$CustomAction);
  public android.media.session.PlaybackState$Builder addCustomAction(java.lang.String, java.lang.String, int);
  public android.media.session.PlaybackState$Builder setActions(long);
  public android.media.session.PlaybackState$Builder setActiveQueueItemId(long);
  public android.media.session.PlaybackState$Builder setBufferedPosition(long);
  public android.media.session.PlaybackState$Builder setErrorMessage(java.lang.CharSequence);
  public android.media.session.PlaybackState$Builder setExtras(android.os.Bundle);
  public android.media.session.PlaybackState$Builder setState(int, long, float);
  public android.media.session.PlaybackState$Builder setState(int, long, float, long);
}
public final class android.media.session.PlaybackState$CustomAction
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getIcon();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getExtras();
  public java.lang.CharSequence getName();
  public java.lang.String getAction();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.media.session.PlaybackState$CustomAction$Builder
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.CharSequence, int);
  public android.media.session.PlaybackState$CustomAction build();
  public android.media.session.PlaybackState$CustomAction$Builder setExtras(android.os.Bundle);
}
public final class android.media.tv.TvContentRating
  extends java.lang.Object
{
  public static android.media.tv.TvContentRating createRating(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]);
  public static android.media.tv.TvContentRating unflattenFromString(java.lang.String);
  public final boolean contains(android.media.tv.TvContentRating);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String flattenToString();
  public java.lang.String getDomain();
  public java.lang.String getMainRating();
  public java.lang.String getRatingSystem();
  public java.util.List getSubRatings();
  public static final android.media.tv.TvContentRating UNRATED;
}
public final class android.media.tv.TvContract
  extends java.lang.Object
{
  public static final boolean isChannelUri(android.net.Uri);
  public static final boolean isChannelUriForPassthroughInput(android.net.Uri);
  public static final boolean isChannelUriForTunerInput(android.net.Uri);
  public static final boolean isProgramUri(android.net.Uri);
  public static final android.net.Uri buildChannelLogoUri(android.net.Uri);
  public static final android.net.Uri buildChannelLogoUri(long);
  public static final android.net.Uri buildChannelUri(long);
  public static final android.net.Uri buildChannelUriForPassthroughInput(java.lang.String);
  public static final android.net.Uri buildChannelsUriForInput(java.lang.String);
  public static final android.net.Uri buildProgramUri(long);
  public static final android.net.Uri buildProgramsUriForChannel(android.net.Uri);
  public static final android.net.Uri buildProgramsUriForChannel(android.net.Uri, long, long);
  public static final android.net.Uri buildProgramsUriForChannel(long);
  public static final android.net.Uri buildProgramsUriForChannel(long, long, long);
  public static final android.net.Uri buildRecordedProgramUri(long);
  public static final java.lang.String buildInputId(android.content.ComponentName);
  public static final java.lang.String AUTHORITY;
}
public interface android.media.tv.TvContract$BaseTvColumns
  extends android.provider.BaseColumns
{
  public static final java.lang.String COLUMN_PACKAGE_NAME;
}
public final class android.media.tv.TvContract$Channels
  extends java.lang.Object
  implements android.media.tv.TvContract$BaseTvColumns
{
  public static final java.lang.String getVideoResolution(java.lang.String);
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String COLUMN_APP_LINK_COLOR;
  public static final java.lang.String COLUMN_APP_LINK_ICON_URI;
  public static final java.lang.String COLUMN_APP_LINK_INTENT_URI;
  public static final java.lang.String COLUMN_APP_LINK_POSTER_ART_URI;
  public static final java.lang.String COLUMN_APP_LINK_TEXT;
  public static final java.lang.String COLUMN_DESCRIPTION;
  public static final java.lang.String COLUMN_DISPLAY_NAME;
  public static final java.lang.String COLUMN_DISPLAY_NUMBER;
  public static final java.lang.String COLUMN_INPUT_ID;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4;
  public static final java.lang.String COLUMN_NETWORK_AFFILIATION;
  public static final java.lang.String COLUMN_ORIGINAL_NETWORK_ID;
  public static final java.lang.String COLUMN_SEARCHABLE;
  public static final java.lang.String COLUMN_SERVICE_ID;
  public static final java.lang.String COLUMN_SERVICE_TYPE;
  public static final java.lang.String COLUMN_TRANSPORT_STREAM_ID;
  public static final java.lang.String COLUMN_TYPE;
  public static final java.lang.String COLUMN_VERSION_NUMBER;
  public static final java.lang.String COLUMN_VIDEO_FORMAT;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String SERVICE_TYPE_AUDIO;
  public static final java.lang.String SERVICE_TYPE_AUDIO_VIDEO;
  public static final java.lang.String SERVICE_TYPE_OTHER;
  public static final java.lang.String TYPE_1SEG;
  public static final java.lang.String TYPE_ATSC_C;
  public static final java.lang.String TYPE_ATSC_M_H;
  public static final java.lang.String TYPE_ATSC_T;
  public static final java.lang.String TYPE_CMMB;
  public static final java.lang.String TYPE_DTMB;
  public static final java.lang.String TYPE_DVB_C2;
  public static final java.lang.String TYPE_DVB_C;
  public static final java.lang.String TYPE_DVB_H;
  public static final java.lang.String TYPE_DVB_S2;
  public static final java.lang.String TYPE_DVB_S;
  public static final java.lang.String TYPE_DVB_SH;
  public static final java.lang.String TYPE_DVB_T2;
  public static final java.lang.String TYPE_DVB_T;
  public static final java.lang.String TYPE_ISDB_C;
  public static final java.lang.String TYPE_ISDB_S;
  public static final java.lang.String TYPE_ISDB_T;
  public static final java.lang.String TYPE_ISDB_TB;
  public static final java.lang.String TYPE_NTSC;
  public static final java.lang.String TYPE_OTHER;
  public static final java.lang.String TYPE_PAL;
  public static final java.lang.String TYPE_SECAM;
  public static final java.lang.String TYPE_S_DMB;
  public static final java.lang.String TYPE_T_DMB;
  public static final java.lang.String VIDEO_FORMAT_1080I;
  public static final java.lang.String VIDEO_FORMAT_1080P;
  public static final java.lang.String VIDEO_FORMAT_2160P;
  public static final java.lang.String VIDEO_FORMAT_240P;
  public static final java.lang.String VIDEO_FORMAT_360P;
  public static final java.lang.String VIDEO_FORMAT_4320P;
  public static final java.lang.String VIDEO_FORMAT_480I;
  public static final java.lang.String VIDEO_FORMAT_480P;
  public static final java.lang.String VIDEO_FORMAT_576I;
  public static final java.lang.String VIDEO_FORMAT_576P;
  public static final java.lang.String VIDEO_FORMAT_720P;
  public static final java.lang.String VIDEO_RESOLUTION_ED;
  public static final java.lang.String VIDEO_RESOLUTION_FHD;
  public static final java.lang.String VIDEO_RESOLUTION_HD;
  public static final java.lang.String VIDEO_RESOLUTION_SD;
  public static final java.lang.String VIDEO_RESOLUTION_UHD;
}
public final class android.media.tv.TvContract$Channels$Logo
  extends java.lang.Object
{
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.media.tv.TvContract$Programs
  extends java.lang.Object
  implements android.media.tv.TvContract$BaseTvColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String COLUMN_AUDIO_LANGUAGE;
  public static final java.lang.String COLUMN_BROADCAST_GENRE;
  public static final java.lang.String COLUMN_CANONICAL_GENRE;
  public static final java.lang.String COLUMN_CHANNEL_ID;
  public static final java.lang.String COLUMN_CONTENT_RATING;
  public static final java.lang.String COLUMN_END_TIME_UTC_MILLIS;
  public static final java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER;
  public static final java.lang.String COLUMN_EPISODE_NUMBER;
  public static final java.lang.String COLUMN_EPISODE_TITLE;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4;
  public static final java.lang.String COLUMN_LONG_DESCRIPTION;
  public static final java.lang.String COLUMN_POSTER_ART_URI;
  public static final java.lang.String COLUMN_RECORDING_PROHIBITED;
  public static final java.lang.String COLUMN_SEARCHABLE;
  public static final java.lang.String COLUMN_SEASON_DISPLAY_NUMBER;
  public static final java.lang.String COLUMN_SEASON_NUMBER;
  public static final java.lang.String COLUMN_SEASON_TITLE;
  public static final java.lang.String COLUMN_SHORT_DESCRIPTION;
  public static final java.lang.String COLUMN_START_TIME_UTC_MILLIS;
  public static final java.lang.String COLUMN_THUMBNAIL_URI;
  public static final java.lang.String COLUMN_TITLE;
  public static final java.lang.String COLUMN_VERSION_NUMBER;
  public static final java.lang.String COLUMN_VIDEO_HEIGHT;
  public static final java.lang.String COLUMN_VIDEO_WIDTH;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
}
public final class android.media.tv.TvContract$Programs$Genres
  extends java.lang.Object
{
  public static boolean isCanonical(java.lang.String);
  public static java.lang.String encode(java.lang.String[]);
  public static java.lang.String[] decode(java.lang.String);
  public static final java.lang.String ANIMAL_WILDLIFE;
  public static final java.lang.String ARTS;
  public static final java.lang.String COMEDY;
  public static final java.lang.String DRAMA;
  public static final java.lang.String EDUCATION;
  public static final java.lang.String ENTERTAINMENT;
  public static final java.lang.String FAMILY_KIDS;
  public static final java.lang.String GAMING;
  public static final java.lang.String LIFE_STYLE;
  public static final java.lang.String MOVIES;
  public static final java.lang.String MUSIC;
  public static final java.lang.String NEWS;
  public static final java.lang.String PREMIER;
  public static final java.lang.String SHOPPING;
  public static final java.lang.String SPORTS;
  public static final java.lang.String TECH_SCIENCE;
  public static final java.lang.String TRAVEL;
}
public final class android.media.tv.TvContract$RecordedPrograms
  extends java.lang.Object
  implements android.media.tv.TvContract$BaseTvColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String COLUMN_AUDIO_LANGUAGE;
  public static final java.lang.String COLUMN_BROADCAST_GENRE;
  public static final java.lang.String COLUMN_CANONICAL_GENRE;
  public static final java.lang.String COLUMN_CHANNEL_ID;
  public static final java.lang.String COLUMN_CONTENT_RATING;
  public static final java.lang.String COLUMN_END_TIME_UTC_MILLIS;
  public static final java.lang.String COLUMN_EPISODE_DISPLAY_NUMBER;
  public static final java.lang.String COLUMN_EPISODE_TITLE;
  public static final java.lang.String COLUMN_INPUT_ID;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_DATA;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG1;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG2;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG3;
  public static final java.lang.String COLUMN_INTERNAL_PROVIDER_FLAG4;
  public static final java.lang.String COLUMN_LONG_DESCRIPTION;
  public static final java.lang.String COLUMN_POSTER_ART_URI;
  public static final java.lang.String COLUMN_RECORDING_DATA_BYTES;
  public static final java.lang.String COLUMN_RECORDING_DATA_URI;
  public static final java.lang.String COLUMN_RECORDING_DURATION_MILLIS;
  public static final java.lang.String COLUMN_RECORDING_EXPIRE_TIME_UTC_MILLIS;
  public static final java.lang.String COLUMN_SEARCHABLE;
  public static final java.lang.String COLUMN_SEASON_DISPLAY_NUMBER;
  public static final java.lang.String COLUMN_SEASON_TITLE;
  public static final java.lang.String COLUMN_SHORT_DESCRIPTION;
  public static final java.lang.String COLUMN_START_TIME_UTC_MILLIS;
  public static final java.lang.String COLUMN_THUMBNAIL_URI;
  public static final java.lang.String COLUMN_TITLE;
  public static final java.lang.String COLUMN_VERSION_NUMBER;
  public static final java.lang.String COLUMN_VIDEO_HEIGHT;
  public static final java.lang.String COLUMN_VIDEO_WIDTH;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
}
public final class android.media.tv.TvInputInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean canRecord();
  public boolean equals(java.lang.Object);
  public boolean isHidden(android.content.Context);
  public boolean isPassthroughInput();
  public int describeContents();
  public int getTunerCount();
  public int getType();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.Intent createSettingsIntent();
  public android.content.Intent createSetupIntent();
  public android.content.pm.ServiceInfo getServiceInfo();
  public android.graphics.drawable.Drawable loadIcon(android.content.Context);
  public android.os.Bundle getExtras();
  public java.lang.CharSequence loadCustomLabel(android.content.Context);
  public java.lang.CharSequence loadLabel(android.content.Context);
  public java.lang.String getId();
  public java.lang.String getParentId();
  public java.lang.String toString();
  public static final int TYPE_COMPONENT;
  public static final int TYPE_COMPOSITE;
  public static final int TYPE_DISPLAY_PORT;
  public static final int TYPE_DVI;
  public static final int TYPE_HDMI;
  public static final int TYPE_OTHER;
  public static final int TYPE_SCART;
  public static final int TYPE_SVIDEO;
  public static final int TYPE_TUNER;
  public static final int TYPE_VGA;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String EXTRA_INPUT_ID;
}
public final class android.media.tv.TvInputInfo$Builder
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.content.ComponentName);
  public android.media.tv.TvInputInfo build();
  public android.media.tv.TvInputInfo$Builder setCanRecord(boolean);
  public android.media.tv.TvInputInfo$Builder setExtras(android.os.Bundle);
  public android.media.tv.TvInputInfo$Builder setTunerCount(int);
}
public final class android.media.tv.TvInputManager
  extends java.lang.Object
{
  public boolean isParentalControlsEnabled();
  public boolean isRatingBlocked(android.media.tv.TvContentRating);
  public int getInputState(java.lang.String);
  public void registerCallback(android.media.tv.TvInputManager$TvInputCallback, android.os.Handler);
  public void unregisterCallback(android.media.tv.TvInputManager$TvInputCallback);
  public void updateTvInputInfo(android.media.tv.TvInputInfo);
  public android.media.tv.TvInputInfo getTvInputInfo(java.lang.String);
  public java.util.List getTvInputList();
  public static final int INPUT_STATE_CONNECTED;
  public static final int INPUT_STATE_CONNECTED_STANDBY;
  public static final int INPUT_STATE_DISCONNECTED;
  public static final int RECORDING_ERROR_INSUFFICIENT_SPACE;
  public static final int RECORDING_ERROR_RESOURCE_BUSY;
  public static final int RECORDING_ERROR_UNKNOWN;
  public static final int TIME_SHIFT_STATUS_AVAILABLE;
  public static final int TIME_SHIFT_STATUS_UNAVAILABLE;
  public static final int TIME_SHIFT_STATUS_UNKNOWN;
  public static final int TIME_SHIFT_STATUS_UNSUPPORTED;
  public static final int VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY;
  public static final int VIDEO_UNAVAILABLE_REASON_BUFFERING;
  public static final int VIDEO_UNAVAILABLE_REASON_TUNING;
  public static final int VIDEO_UNAVAILABLE_REASON_UNKNOWN;
  public static final int VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL;
  public static final long TIME_SHIFT_INVALID_TIME;
  public static final java.lang.String ACTION_BLOCKED_RATINGS_CHANGED;
  public static final java.lang.String ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED;
  public static final java.lang.String ACTION_QUERY_CONTENT_RATING_SYSTEMS;
  public static final java.lang.String ACTION_SETUP_INPUTS;
  public static final java.lang.String META_DATA_CONTENT_RATING_SYSTEMS;
}
public abstract class android.media.tv.TvInputManager$TvInputCallback
  extends java.lang.Object
{
  public void <init>();
  public void onInputAdded(java.lang.String);
  public void onInputRemoved(java.lang.String);
  public void onInputStateChanged(java.lang.String, int);
  public void onInputUpdated(java.lang.String);
  public void onTvInputInfoUpdated(android.media.tv.TvInputInfo);
}
public abstract class android.media.tv.TvInputService
  extends android.app.Service
{
  public void <init>();
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract android.media.tv.TvInputService$Session onCreateSession(java.lang.String);
  public android.media.tv.TvInputService$RecordingSession onCreateRecordingSession(java.lang.String);
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public abstract class android.media.tv.TvInputService$HardwareSession
  extends android.media.tv.TvInputService$Session
{
  public void <init>(android.content.Context);
  public final boolean onSetSurface(android.view.Surface);
  public abstract java.lang.String getHardwareInputId();
  public void onHardwareVideoAvailable();
  public void onHardwareVideoUnavailable(int);
}
public abstract class android.media.tv.TvInputService$RecordingSession
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public abstract void onRelease();
  public abstract void onStartRecording(android.net.Uri);
  public abstract void onStopRecording();
  public abstract void onTune(android.net.Uri);
  public void notifyError(int);
  public void notifyRecordingStopped(android.net.Uri);
  public void notifyTuned(android.net.Uri);
  public void onAppPrivateCommand(java.lang.String, android.os.Bundle);
  public void onTune(android.net.Uri, android.os.Bundle);
}
public abstract class android.media.tv.TvInputService$Session
  extends java.lang.Object
  implements android.view.KeyEvent$Callback
{
  public void <init>(android.content.Context);
  public abstract boolean onSetSurface(android.view.Surface);
  public abstract boolean onTune(android.net.Uri);
  public abstract void onRelease();
  public abstract void onSetCaptionEnabled(boolean);
  public abstract void onSetStreamVolume(float);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onSelectTrack(int, java.lang.String);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean onTune(android.net.Uri, android.os.Bundle);
  public long onTimeShiftGetCurrentPosition();
  public long onTimeShiftGetStartPosition();
  public void layoutSurface(int, int, int, int);
  public void notifyChannelRetuned(android.net.Uri);
  public void notifyContentAllowed();
  public void notifyContentBlocked(android.media.tv.TvContentRating);
  public void notifyTimeShiftStatusChanged(int);
  public void notifyTrackSelected(int, java.lang.String);
  public void notifyTracksChanged(java.util.List);
  public void notifyVideoAvailable();
  public void notifyVideoUnavailable(int);
  public void onAppPrivateCommand(java.lang.String, android.os.Bundle);
  public void onOverlayViewSizeChanged(int, int);
  public void onSurfaceChanged(int, int, int);
  public void onTimeShiftPause();
  public void onTimeShiftPlay(android.net.Uri);
  public void onTimeShiftResume();
  public void onTimeShiftSeekTo(long);
  public void onTimeShiftSetPlaybackParams(android.media.PlaybackParams);
  public void onUnblockContent(android.media.tv.TvContentRating);
  public void setOverlayViewEnabled(boolean);
  public android.view.View onCreateOverlayView();
}
public class android.media.tv.TvRecordingClient
  extends java.lang.Object
{
  public void <init>(android.content.Context, java.lang.String, android.media.tv.TvRecordingClient$RecordingCallback, android.os.Handler);
  public void release();
  public void sendAppPrivateCommand(java.lang.String, android.os.Bundle);
  public void startRecording(android.net.Uri);
  public void stopRecording();
  public void tune(java.lang.String, android.net.Uri);
  public void tune(java.lang.String, android.net.Uri, android.os.Bundle);
}
public abstract class android.media.tv.TvRecordingClient$RecordingCallback
  extends java.lang.Object
{
  public void <init>();
  public void onConnectionFailed(java.lang.String);
  public void onDisconnected(java.lang.String);
  public void onError(int);
  public void onRecordingStopped(android.net.Uri);
  public void onTuned(android.net.Uri);
}
public final class android.media.tv.TvTrackInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public final byte getVideoActiveFormatDescription();
  public final float getVideoFrameRate();
  public final float getVideoPixelAspectRatio();
  public final int getAudioChannelCount();
  public final int getAudioSampleRate();
  public final int getType();
  public final int getVideoHeight();
  public final int getVideoWidth();
  public final android.os.Bundle getExtra();
  public final java.lang.CharSequence getDescription();
  public final java.lang.String getId();
  public final java.lang.String getLanguage();
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public static final int TYPE_AUDIO;
  public static final int TYPE_SUBTITLE;
  public static final int TYPE_VIDEO;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.media.tv.TvTrackInfo$Builder
  extends java.lang.Object
{
  public void <init>(int, java.lang.String);
  public final android.media.tv.TvTrackInfo$Builder setAudioChannelCount(int);
  public final android.media.tv.TvTrackInfo$Builder setAudioSampleRate(int);
  public final android.media.tv.TvTrackInfo$Builder setDescription(java.lang.CharSequence);
  public final android.media.tv.TvTrackInfo$Builder setExtra(android.os.Bundle);
  public final android.media.tv.TvTrackInfo$Builder setLanguage(java.lang.String);
  public final android.media.tv.TvTrackInfo$Builder setVideoActiveFormatDescription(byte);
  public final android.media.tv.TvTrackInfo$Builder setVideoFrameRate(float);
  public final android.media.tv.TvTrackInfo$Builder setVideoHeight(int);
  public final android.media.tv.TvTrackInfo$Builder setVideoPixelAspectRatio(float);
  public final android.media.tv.TvTrackInfo$Builder setVideoWidth(int);
  public android.media.tv.TvTrackInfo build();
}
public class android.media.tv.TvView
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean dispatchUnhandledInputEvent(android.view.InputEvent);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public boolean onUnhandledInputEvent(android.view.InputEvent);
  public void dispatchWindowFocusChanged(boolean);
  public void draw(android.graphics.Canvas);
  public void reset();
  public void selectTrack(int, java.lang.String);
  public void sendAppPrivateCommand(java.lang.String, android.os.Bundle);
  public void setCallback(android.media.tv.TvView$TvInputCallback);
  public void setCaptionEnabled(boolean);
  public void setOnUnhandledInputEventListener(android.media.tv.TvView$OnUnhandledInputEventListener);
  public void setStreamVolume(float);
  public void setTimeShiftPositionCallback(android.media.tv.TvView$TimeShiftPositionCallback);
  public void setZOrderMediaOverlay(boolean);
  public void setZOrderOnTop(boolean);
  public void timeShiftPause();
  public void timeShiftPlay(java.lang.String, android.net.Uri);
  public void timeShiftResume();
  public void timeShiftSeekTo(long);
  public void timeShiftSetPlaybackParams(android.media.PlaybackParams);
  public void tune(java.lang.String, android.net.Uri);
  public void tune(java.lang.String, android.net.Uri, android.os.Bundle);
  public java.lang.String getSelectedTrack(int);
  public java.util.List getTracks(int);
  protected void dispatchDraw(android.graphics.Canvas);
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onVisibilityChanged(android.view.View, int);
}
public interface android.media.tv.TvView$OnUnhandledInputEventListener
{
  public abstract boolean onUnhandledInputEvent(android.view.InputEvent);
}
public abstract class android.media.tv.TvView$TimeShiftPositionCallback
  extends java.lang.Object
{
  public void <init>();
  public void onTimeShiftCurrentPositionChanged(java.lang.String, long);
  public void onTimeShiftStartPositionChanged(java.lang.String, long);
}
public abstract class android.media.tv.TvView$TvInputCallback
  extends java.lang.Object
{
  public void <init>();
  public void onChannelRetuned(java.lang.String, android.net.Uri);
  public void onConnectionFailed(java.lang.String);
  public void onContentAllowed(java.lang.String);
  public void onContentBlocked(java.lang.String, android.media.tv.TvContentRating);
  public void onDisconnected(java.lang.String);
  public void onTimeShiftStatusChanged(java.lang.String, int);
  public void onTrackSelected(java.lang.String, int, java.lang.String);
  public void onTracksChanged(java.lang.String, java.util.List);
  public void onVideoAvailable(java.lang.String);
  public void onVideoSizeChanged(java.lang.String, int, int);
  public void onVideoUnavailable(java.lang.String, int);
}
public final class android.mtp.MtpConstants
  extends java.lang.Object
{
  public static boolean isAbstractObject(int);
  public void <init>();
  public static final int ASSOCIATION_TYPE_GENERIC_FOLDER;
  public static final int FORMAT_3GP_CONTAINER;
  public static final int FORMAT_AAC;
  public static final int FORMAT_ABSTRACT_AUDIO_ALBUM;
  public static final int FORMAT_ABSTRACT_AUDIO_PLAYLIST;
  public static final int FORMAT_ABSTRACT_AV_PLAYLIST;
  public static final int FORMAT_ABSTRACT_DOCUMENT;
  public static final int FORMAT_ABSTRACT_IMAGE_ALBUM;
  public static final int FORMAT_ABSTRACT_MEDIACAST;
  public static final int FORMAT_ABSTRACT_MULTIMEDIA_ALBUM;
  public static final int FORMAT_ABSTRACT_VIDEO_ALBUM;
  public static final int FORMAT_ABSTRACT_VIDEO_PLAYLIST;
  public static final int FORMAT_AIFF;
  public static final int FORMAT_ASF;
  public static final int FORMAT_ASSOCIATION;
  public static final int FORMAT_ASX_PLAYLIST;
  public static final int FORMAT_AUDIBLE;
  public static final int FORMAT_AVI;
  public static final int FORMAT_BMP;
  public static final int FORMAT_DEFINED;
  public static final int FORMAT_DNG;
  public static final int FORMAT_DPOF;
  public static final int FORMAT_EXECUTABLE;
  public static final int FORMAT_EXIF_JPEG;
  public static final int FORMAT_FLAC;
  public static final int FORMAT_GIF;
  public static final int FORMAT_HTML;
  public static final int FORMAT_JFIF;
  public static final int FORMAT_JP2;
  public static final int FORMAT_JPX;
  public static final int FORMAT_M3U_PLAYLIST;
  public static final int FORMAT_MP2;
  public static final int FORMAT_MP3;
  public static final int FORMAT_MP4_CONTAINER;
  public static final int FORMAT_MPEG;
  public static final int FORMAT_MPL_PLAYLIST;
  public static final int FORMAT_MS_EXCEL_SPREADSHEET;
  public static final int FORMAT_MS_POWERPOINT_PRESENTATION;
  public static final int FORMAT_MS_WORD_DOCUMENT;
  public static final int FORMAT_OGG;
  public static final int FORMAT_PICT;
  public static final int FORMAT_PLS_PLAYLIST;
  public static final int FORMAT_PNG;
  public static final int FORMAT_SCRIPT;
  public static final int FORMAT_TEXT;
  public static final int FORMAT_TIFF;
  public static final int FORMAT_TIFF_EP;
  public static final int FORMAT_UNDEFINED;
  public static final int FORMAT_UNDEFINED_AUDIO;
  public static final int FORMAT_UNDEFINED_COLLECTION;
  public static final int FORMAT_UNDEFINED_DOCUMENT;
  public static final int FORMAT_UNDEFINED_FIRMWARE;
  public static final int FORMAT_UNDEFINED_VIDEO;
  public static final int FORMAT_WAV;
  public static final int FORMAT_WINDOWS_IMAGE_FORMAT;
  public static final int FORMAT_WMA;
  public static final int FORMAT_WMV;
  public static final int FORMAT_WPL_PLAYLIST;
  public static final int FORMAT_XML_DOCUMENT;
  public static final int OPERATION_CLOSE_SESSION;
  public static final int OPERATION_COPY_OBJECT;
  public static final int OPERATION_DELETE_OBJECT;
  public static final int OPERATION_FORMAT_STORE;
  public static final int OPERATION_GET_DEVICE_INFO;
  public static final int OPERATION_GET_DEVICE_PROP_DESC;
  public static final int OPERATION_GET_DEVICE_PROP_VALUE;
  public static final int OPERATION_GET_NUM_OBJECTS;
  public static final int OPERATION_GET_OBJECT;
  public static final int OPERATION_GET_OBJECT_HANDLES;
  public static final int OPERATION_GET_OBJECT_INFO;
  public static final int OPERATION_GET_OBJECT_PROPS_SUPPORTED;
  public static final int OPERATION_GET_OBJECT_PROP_DESC;
  public static final int OPERATION_GET_OBJECT_PROP_VALUE;
  public static final int OPERATION_GET_OBJECT_REFERENCES;
  public static final int OPERATION_GET_PARTIAL_OBJECT;
  public static final int OPERATION_GET_PARTIAL_OBJECT_64;
  public static final int OPERATION_GET_STORAGE_INFO;
  public static final int OPERATION_GET_STORAGE_I_DS;
  public static final int OPERATION_GET_THUMB;
  public static final int OPERATION_INITIATE_CAPTURE;
  public static final int OPERATION_INITIATE_OPEN_CAPTURE;
  public static final int OPERATION_MOVE_OBJECT;
  public static final int OPERATION_OPEN_SESSION;
  public static final int OPERATION_POWER_DOWN;
  public static final int OPERATION_RESET_DEVICE;
  public static final int OPERATION_RESET_DEVICE_PROP_VALUE;
  public static final int OPERATION_SELF_TEST;
  public static final int OPERATION_SEND_OBJECT;
  public static final int OPERATION_SEND_OBJECT_INFO;
  public static final int OPERATION_SET_DEVICE_PROP_VALUE;
  public static final int OPERATION_SET_OBJECT_PROP_VALUE;
  public static final int OPERATION_SET_OBJECT_PROTECTION;
  public static final int OPERATION_SET_OBJECT_REFERENCES;
  public static final int OPERATION_SKIP;
  public static final int OPERATION_TERMINATE_OPEN_CAPTURE;
  public static final int PROTECTION_STATUS_NONE;
  public static final int PROTECTION_STATUS_NON_TRANSFERABLE_DATA;
  public static final int PROTECTION_STATUS_READ_ONLY;
  public static final int PROTECTION_STATUS_READ_ONLY_DATA;
}
public final class android.mtp.MtpDevice
  extends java.lang.Object
{
  public void <init>(android.hardware.usb.UsbDevice);
  public boolean deleteObject(int);
  public boolean importFile(int, android.os.ParcelFileDescriptor);
  public boolean importFile(int, java.lang.String);
  public boolean open(android.hardware.usb.UsbDeviceConnection);
  public boolean sendObject(int, long, android.os.ParcelFileDescriptor);
  public int getDeviceId();
  public long getParent(int);
  public long getPartialObject(int, long, long, byte[])  throws java.io.IOException;
  public long getPartialObject64(int, long, long, byte[])  throws java.io.IOException;
  public long getStorageId(int);
  public void close();
  public android.mtp.MtpDeviceInfo getDeviceInfo();
  public android.mtp.MtpEvent readEvent(android.os.CancellationSignal)  throws java.io.IOException;
  public android.mtp.MtpObjectInfo getObjectInfo(int);
  public android.mtp.MtpObjectInfo sendObjectInfo(android.mtp.MtpObjectInfo);
  public android.mtp.MtpStorageInfo getStorageInfo(int);
  public byte[] getObject(int, int);
  public byte[] getThumbnail(int);
  public int[] getObjectHandles(int, int, int);
  public int[] getStorageIds();
  public java.lang.String getDeviceName();
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.mtp.MtpDeviceInfo
  extends java.lang.Object
{
  public final int[] getEventsSupported();
  public final int[] getOperationsSupported();
  public final java.lang.String getManufacturer();
  public final java.lang.String getModel();
  public final java.lang.String getSerialNumber();
  public final java.lang.String getVersion();
  public boolean isEventSupported(int);
  public boolean isOperationSupported(int);
}
public class android.mtp.MtpEvent
  extends java.lang.Object
{
  public int getDevicePropCode();
  public int getEventCode();
  public int getObjectFormatCode();
  public int getObjectHandle();
  public int getObjectPropCode();
  public int getParameter1();
  public int getParameter2();
  public int getParameter3();
  public int getStorageId();
  public int getTransactionId();
  public static final int EVENT_CANCEL_TRANSACTION;
  public static final int EVENT_CAPTURE_COMPLETE;
  public static final int EVENT_DEVICE_INFO_CHANGED;
  public static final int EVENT_DEVICE_PROP_CHANGED;
  public static final int EVENT_DEVICE_RESET;
  public static final int EVENT_OBJECT_ADDED;
  public static final int EVENT_OBJECT_INFO_CHANGED;
  public static final int EVENT_OBJECT_PROP_CHANGED;
  public static final int EVENT_OBJECT_PROP_DESC_CHANGED;
  public static final int EVENT_OBJECT_REFERENCES_CHANGED;
  public static final int EVENT_OBJECT_REMOVED;
  public static final int EVENT_REQUEST_OBJECT_TRANSFER;
  public static final int EVENT_STORAGE_INFO_CHANGED;
  public static final int EVENT_STORE_ADDED;
  public static final int EVENT_STORE_FULL;
  public static final int EVENT_STORE_REMOVED;
  public static final int EVENT_UNDEFINED;
  public static final int EVENT_UNREPORTED_STATUS;
}
public final class android.mtp.MtpObjectInfo
  extends java.lang.Object
{
  public final int getAssociationDesc();
  public final int getAssociationType();
  public final int getCompressedSize();
  public final int getFormat();
  public final int getImagePixDepth();
  public final int getImagePixHeight();
  public final int getImagePixWidth();
  public final int getObjectHandle();
  public final int getParent();
  public final int getProtectionStatus();
  public final int getSequenceNumber();
  public final int getStorageId();
  public final int getThumbCompressedSize();
  public final int getThumbFormat();
  public final int getThumbPixHeight();
  public final int getThumbPixWidth();
  public final long getCompressedSizeLong();
  public final long getDateCreated();
  public final long getDateModified();
  public final long getImagePixDepthLong();
  public final long getImagePixHeightLong();
  public final long getImagePixWidthLong();
  public final long getSequenceNumberLong();
  public final long getThumbCompressedSizeLong();
  public final long getThumbPixHeightLong();
  public final long getThumbPixWidthLong();
  public final java.lang.String getKeywords();
  public final java.lang.String getName();
}
public class android.mtp.MtpObjectInfo$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.mtp.MtpObjectInfo);
  public android.mtp.MtpObjectInfo build();
  public android.mtp.MtpObjectInfo$Builder setAssociationDesc(int);
  public android.mtp.MtpObjectInfo$Builder setAssociationType(int);
  public android.mtp.MtpObjectInfo$Builder setCompressedSize(long);
  public android.mtp.MtpObjectInfo$Builder setDateCreated(long);
  public android.mtp.MtpObjectInfo$Builder setDateModified(long);
  public android.mtp.MtpObjectInfo$Builder setFormat(int);
  public android.mtp.MtpObjectInfo$Builder setImagePixDepth(long);
  public android.mtp.MtpObjectInfo$Builder setImagePixHeight(long);
  public android.mtp.MtpObjectInfo$Builder setImagePixWidth(long);
  public android.mtp.MtpObjectInfo$Builder setKeywords(java.lang.String);
  public android.mtp.MtpObjectInfo$Builder setName(java.lang.String);
  public android.mtp.MtpObjectInfo$Builder setObjectHandle(int);
  public android.mtp.MtpObjectInfo$Builder setParent(int);
  public android.mtp.MtpObjectInfo$Builder setProtectionStatus(int);
  public android.mtp.MtpObjectInfo$Builder setSequenceNumber(long);
  public android.mtp.MtpObjectInfo$Builder setStorageId(int);
  public android.mtp.MtpObjectInfo$Builder setThumbCompressedSize(long);
  public android.mtp.MtpObjectInfo$Builder setThumbFormat(int);
  public android.mtp.MtpObjectInfo$Builder setThumbPixHeight(long);
  public android.mtp.MtpObjectInfo$Builder setThumbPixWidth(long);
}
public final class android.mtp.MtpStorageInfo
  extends java.lang.Object
{
  public final int getStorageId();
  public final long getFreeSpace();
  public final long getMaxCapacity();
  public final java.lang.String getDescription();
  public final java.lang.String getVolumeIdentifier();
}
public class android.net.CaptivePortal
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void ignoreNetwork();
  public void reportCaptivePortalDismissed();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.ConnectivityManager
  extends java.lang.Object
{
  public static boolean isNetworkTypeValid(int);
  public static boolean setProcessDefaultNetwork(android.net.Network);
  public static android.net.Network getProcessDefaultNetwork();
  public boolean bindProcessToNetwork(android.net.Network);
  public boolean getBackgroundDataSetting();
  public boolean isActiveNetworkMetered();
  public boolean isDefaultNetworkActive();
  public boolean requestBandwidthUpdate(android.net.Network);
  public boolean requestRouteToHost(int, int);
  public int getNetworkPreference();
  public int getRestrictBackgroundStatus();
  public int startUsingNetworkFeature(int, java.lang.String);
  public int stopUsingNetworkFeature(int, java.lang.String);
  public void addDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener);
  public void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback);
  public void registerNetworkCallback(android.net.NetworkRequest, android.app.PendingIntent);
  public void registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback);
  public void releaseNetworkRequest(android.app.PendingIntent);
  public void removeDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener);
  public void reportBadNetwork(android.net.Network);
  public void reportNetworkConnectivity(android.net.Network, boolean);
  public void requestNetwork(android.net.NetworkRequest, android.app.PendingIntent);
  public void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback);
  public void setNetworkPreference(int);
  public void unregisterNetworkCallback(android.app.PendingIntent);
  public void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback);
  public android.net.LinkProperties getLinkProperties(android.net.Network);
  public android.net.Network getActiveNetwork();
  public android.net.Network getBoundNetworkForProcess();
  public android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network);
  public android.net.NetworkInfo getActiveNetworkInfo();
  public android.net.NetworkInfo getNetworkInfo(android.net.Network);
  public android.net.NetworkInfo getNetworkInfo(int);
  public android.net.NetworkInfo[] getAllNetworkInfo();
  public android.net.Network[] getAllNetworks();
  public android.net.ProxyInfo getDefaultProxy();
  public static final int DEFAULT_NETWORK_PREFERENCE;
  public static final int RESTRICT_BACKGROUND_STATUS_DISABLED;
  public static final int RESTRICT_BACKGROUND_STATUS_ENABLED;
  public static final int RESTRICT_BACKGROUND_STATUS_WHITELISTED;
  public static final int TYPE_BLUETOOTH;
  public static final int TYPE_DUMMY;
  public static final int TYPE_ETHERNET;
  public static final int TYPE_MOBILE;
  public static final int TYPE_MOBILE_DUN;
  public static final int TYPE_MOBILE_HIPRI;
  public static final int TYPE_MOBILE_MMS;
  public static final int TYPE_MOBILE_SUPL;
  public static final int TYPE_VPN;
  public static final int TYPE_WIFI;
  public static final int TYPE_WIMAX;
  public static final java.lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED;
  public static final java.lang.String ACTION_CAPTIVE_PORTAL_SIGN_IN;
  public static final java.lang.String ACTION_RESTRICT_BACKGROUND_CHANGED;
  public static final java.lang.String CONNECTIVITY_ACTION;
  public static final java.lang.String EXTRA_CAPTIVE_PORTAL;
  public static final java.lang.String EXTRA_CAPTIVE_PORTAL_URL;
  public static final java.lang.String EXTRA_EXTRA_INFO;
  public static final java.lang.String EXTRA_IS_FAILOVER;
  public static final java.lang.String EXTRA_NETWORK;
  public static final java.lang.String EXTRA_NETWORK_INFO;
  public static final java.lang.String EXTRA_NETWORK_REQUEST;
  public static final java.lang.String EXTRA_NETWORK_TYPE;
  public static final java.lang.String EXTRA_NO_CONNECTIVITY;
  public static final java.lang.String EXTRA_OTHER_NETWORK_INFO;
  public static final java.lang.String EXTRA_REASON;
}
public class android.net.ConnectivityManager$NetworkCallback
  extends java.lang.Object
{
  public void <init>();
  public void onAvailable(android.net.Network);
  public void onCapabilitiesChanged(android.net.Network, android.net.NetworkCapabilities);
  public void onLinkPropertiesChanged(android.net.Network, android.net.LinkProperties);
  public void onLosing(android.net.Network, int);
  public void onLost(android.net.Network);
}
public interface android.net.ConnectivityManager$OnNetworkActiveListener
{
  public abstract void onNetworkActive();
}
public class android.net.Credentials
  extends java.lang.Object
{
  public void <init>(int, int, int);
  public int getGid();
  public int getPid();
  public int getUid();
}
public class android.net.DhcpInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public int dns1;
  public int dns2;
  public int gateway;
  public int ipAddress;
  public int leaseDuration;
  public int netmask;
  public int serverAddress;
}
public final class android.net.IpPrefix
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean contains(java.net.InetAddress);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getPrefixLength();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public byte[] getRawAddress();
  public java.lang.String toString();
  public java.net.InetAddress getAddress();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.LinkAddress
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getFlags();
  public int getPrefixLength();
  public int getScope();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public java.net.InetAddress getAddress();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.net.LinkProperties
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.ProxyInfo getHttpProxy();
  public java.lang.String getDomains();
  public java.lang.String getInterfaceName();
  public java.lang.String toString();
  public java.util.List getDnsServers();
  public java.util.List getLinkAddresses();
  public java.util.List getRoutes();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.LocalServerSocket
  extends java.lang.Object
{
  public void <init>(java.io.FileDescriptor)  throws java.io.IOException;
  public void <init>(java.lang.String)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public android.net.LocalSocket accept()  throws java.io.IOException;
  public android.net.LocalSocketAddress getLocalSocketAddress();
  public java.io.FileDescriptor getFileDescriptor();
}
public class android.net.LocalSocket
  extends java.lang.Object
  implements java.io.Closeable
{
  public void <init>();
  public void <init>(int);
  public boolean isBound();
  public boolean isClosed();
  public boolean isConnected();
  public boolean isInputShutdown();
  public boolean isOutputShutdown();
  public int getReceiveBufferSize()  throws java.io.IOException;
  public int getSendBufferSize()  throws java.io.IOException;
  public int getSoTimeout()  throws java.io.IOException;
  public void bind(android.net.LocalSocketAddress)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void connect(android.net.LocalSocketAddress)  throws java.io.IOException;
  public void connect(android.net.LocalSocketAddress, int)  throws java.io.IOException;
  public void setFileDescriptorsForSend(java.io.FileDescriptor[]);
  public void setReceiveBufferSize(int)  throws java.io.IOException;
  public void setSendBufferSize(int)  throws java.io.IOException;
  public void setSoTimeout(int)  throws java.io.IOException;
  public void shutdownInput()  throws java.io.IOException;
  public void shutdownOutput()  throws java.io.IOException;
  public android.net.Credentials getPeerCredentials()  throws java.io.IOException;
  public android.net.LocalSocketAddress getLocalSocketAddress();
  public android.net.LocalSocketAddress getRemoteSocketAddress();
  public java.io.FileDescriptor getFileDescriptor();
  public java.io.FileDescriptor[] getAncillaryFileDescriptors()  throws java.io.IOException;
  public java.io.InputStream getInputStream()  throws java.io.IOException;
  public java.io.OutputStream getOutputStream()  throws java.io.IOException;
  public java.lang.String toString();
  public static final int SOCKET_DGRAM;
  public static final int SOCKET_SEQPACKET;
  public static final int SOCKET_STREAM;
}
public class android.net.LocalSocketAddress
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, android.net.LocalSocketAddress$Namespace);
  public android.net.LocalSocketAddress$Namespace getNamespace();
  public java.lang.String getName();
}
public final class android.net.LocalSocketAddress$Namespace
  extends java.lang.Enum
{
  public static android.net.LocalSocketAddress$Namespace valueOf(java.lang.String);
  public static android.net.LocalSocketAddress$Namespace[] values();
  public static final android.net.LocalSocketAddress$Namespace ABSTRACT;
  public static final android.net.LocalSocketAddress$Namespace FILESYSTEM;
  public static final android.net.LocalSocketAddress$Namespace RESERVED;
}
public class android.net.MailTo
  extends java.lang.Object
{
  public static boolean isMailTo(java.lang.String);
  public static android.net.MailTo parse(java.lang.String)  throws android.net.ParseException;
  public java.lang.String getBody();
  public java.lang.String getCc();
  public java.lang.String getSubject();
  public java.lang.String getTo();
  public java.lang.String toString();
  public java.util.Map getHeaders();
  public static final java.lang.String MAILTO_SCHEME;
}
public class android.net.Network
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public long getNetworkHandle();
  public void bindSocket(java.io.FileDescriptor)  throws java.io.IOException;
  public void bindSocket(java.net.DatagramSocket)  throws java.io.IOException;
  public void bindSocket(java.net.Socket)  throws java.io.IOException;
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public java.net.InetAddress getByName(java.lang.String)  throws java.net.UnknownHostException;
  public java.net.InetAddress[] getAllByName(java.lang.String)  throws java.net.UnknownHostException;
  public java.net.URLConnection openConnection(java.net.URL)  throws java.io.IOException;
  public java.net.URLConnection openConnection(java.net.URL, java.net.Proxy)  throws java.io.IOException;
  public javax.net.SocketFactory getSocketFactory();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.net.NetworkCapabilities
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.net.NetworkCapabilities);
  public boolean equals(java.lang.Object);
  public boolean hasCapability(int);
  public boolean hasTransport(int);
  public int describeContents();
  public int getLinkDownstreamBandwidthKbps();
  public int getLinkUpstreamBandwidthKbps();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int NET_CAPABILITY_CAPTIVE_PORTAL;
  public static final int NET_CAPABILITY_CBS;
  public static final int NET_CAPABILITY_DUN;
  public static final int NET_CAPABILITY_EIMS;
  public static final int NET_CAPABILITY_FOTA;
  public static final int NET_CAPABILITY_IA;
  public static final int NET_CAPABILITY_IMS;
  public static final int NET_CAPABILITY_INTERNET;
  public static final int NET_CAPABILITY_MMS;
  public static final int NET_CAPABILITY_NOT_METERED;
  public static final int NET_CAPABILITY_NOT_RESTRICTED;
  public static final int NET_CAPABILITY_NOT_VPN;
  public static final int NET_CAPABILITY_RCS;
  public static final int NET_CAPABILITY_SUPL;
  public static final int NET_CAPABILITY_TRUSTED;
  public static final int NET_CAPABILITY_VALIDATED;
  public static final int NET_CAPABILITY_WIFI_P2P;
  public static final int NET_CAPABILITY_XCAP;
  public static final int TRANSPORT_BLUETOOTH;
  public static final int TRANSPORT_CELLULAR;
  public static final int TRANSPORT_ETHERNET;
  public static final int TRANSPORT_VPN;
  public static final int TRANSPORT_WIFI;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.NetworkInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean isAvailable();
  public boolean isConnected();
  public boolean isConnectedOrConnecting();
  public boolean isFailover();
  public boolean isRoaming();
  public int describeContents();
  public int getSubtype();
  public int getType();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.NetworkInfo$DetailedState getDetailedState();
  public android.net.NetworkInfo$State getState();
  public java.lang.String getExtraInfo();
  public java.lang.String getReason();
  public java.lang.String getSubtypeName();
  public java.lang.String getTypeName();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.net.NetworkInfo$DetailedState
  extends java.lang.Enum
{
  public static android.net.NetworkInfo$DetailedState valueOf(java.lang.String);
  public static android.net.NetworkInfo$DetailedState[] values();
  public static final android.net.NetworkInfo$DetailedState AUTHENTICATING;
  public static final android.net.NetworkInfo$DetailedState BLOCKED;
  public static final android.net.NetworkInfo$DetailedState CAPTIVE_PORTAL_CHECK;
  public static final android.net.NetworkInfo$DetailedState CONNECTED;
  public static final android.net.NetworkInfo$DetailedState CONNECTING;
  public static final android.net.NetworkInfo$DetailedState DISCONNECTED;
  public static final android.net.NetworkInfo$DetailedState DISCONNECTING;
  public static final android.net.NetworkInfo$DetailedState FAILED;
  public static final android.net.NetworkInfo$DetailedState IDLE;
  public static final android.net.NetworkInfo$DetailedState OBTAINING_IPADDR;
  public static final android.net.NetworkInfo$DetailedState SCANNING;
  public static final android.net.NetworkInfo$DetailedState SUSPENDED;
  public static final android.net.NetworkInfo$DetailedState VERIFYING_POOR_LINK;
}
public final class android.net.NetworkInfo$State
  extends java.lang.Enum
{
  public static android.net.NetworkInfo$State valueOf(java.lang.String);
  public static android.net.NetworkInfo$State[] values();
  public static final android.net.NetworkInfo$State CONNECTED;
  public static final android.net.NetworkInfo$State CONNECTING;
  public static final android.net.NetworkInfo$State DISCONNECTED;
  public static final android.net.NetworkInfo$State DISCONNECTING;
  public static final android.net.NetworkInfo$State SUSPENDED;
  public static final android.net.NetworkInfo$State UNKNOWN;
}
public class android.net.NetworkRequest
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.NetworkRequest$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.net.NetworkRequest build();
  public android.net.NetworkRequest$Builder addCapability(int);
  public android.net.NetworkRequest$Builder addTransportType(int);
  public android.net.NetworkRequest$Builder removeCapability(int);
  public android.net.NetworkRequest$Builder removeTransportType(int);
  public android.net.NetworkRequest$Builder setNetworkSpecifier(java.lang.String);
}
public class android.net.ParseException
  extends java.lang.RuntimeException
{
  public java.lang.String response;
}
public final class android.net.Proxy
  extends java.lang.Object
{
  public static final int getDefaultPort();
  public static final int getPort(android.content.Context);
  public static final java.lang.String getDefaultHost();
  public static final java.lang.String getHost(android.content.Context);
  public void <init>();
  public static final java.lang.String EXTRA_PROXY_INFO;
  public static final java.lang.String PROXY_CHANGE_ACTION;
}
public class android.net.ProxyInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.net.ProxyInfo buildDirectProxy(java.lang.String, int);
  public static android.net.ProxyInfo buildDirectProxy(java.lang.String, int, java.util.List);
  public static android.net.ProxyInfo buildPacProxy(android.net.Uri);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getPort();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.Uri getPacFileUrl();
  public java.lang.String getHost();
  public java.lang.String toString();
  public java.lang.String[] getExclusionList();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.net.PskKeyManager
  extends java.lang.Object
{
  public void <init>();
  public java.lang.String chooseClientKeyIdentity(java.lang.String, java.net.Socket);
  public java.lang.String chooseClientKeyIdentity(java.lang.String, javax.net.ssl.SSLEngine);
  public java.lang.String chooseServerKeyIdentityHint(java.net.Socket);
  public java.lang.String chooseServerKeyIdentityHint(javax.net.ssl.SSLEngine);
  public javax.crypto.SecretKey getKey(java.lang.String, java.lang.String, java.net.Socket);
  public javax.crypto.SecretKey getKey(java.lang.String, java.lang.String, javax.net.ssl.SSLEngine);
  public static final int MAX_IDENTITY_HINT_LENGTH_BYTES;
  public static final int MAX_IDENTITY_LENGTH_BYTES;
  public static final int MAX_KEY_LENGTH_BYTES;
}
public final class android.net.RouteInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean isDefaultRoute();
  public boolean matches(java.net.InetAddress);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.IpPrefix getDestination();
  public java.lang.String getInterface();
  public java.lang.String toString();
  public java.net.InetAddress getGateway();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.SSLCertificateSocketFactory
  extends javax.net.ssl.SSLSocketFactory
{
  public static javax.net.SocketFactory getDefault(int);
  public static javax.net.ssl.SSLSocketFactory getDefault(int, android.net.SSLSessionCache);
  public static javax.net.ssl.SSLSocketFactory getInsecure(int, android.net.SSLSessionCache);
  public void <init>(int);
  public void setHostname(java.net.Socket, java.lang.String);
  public void setKeyManagers(javax.net.ssl.KeyManager[]);
  public void setNpnProtocols(byte[][]);
  public void setTrustManagers(javax.net.ssl.TrustManager[]);
  public void setUseSessionTickets(java.net.Socket, boolean);
  public byte[] getNpnSelectedProtocol(java.net.Socket);
  public java.lang.String[] getDefaultCipherSuites();
  public java.lang.String[] getSupportedCipherSuites();
  public java.net.Socket createSocket()  throws java.io.IOException;
  public java.net.Socket createSocket(java.lang.String, int)  throws java.io.IOException;
  public java.net.Socket createSocket(java.lang.String, int, java.net.InetAddress, int)  throws java.io.IOException;
  public java.net.Socket createSocket(java.net.InetAddress, int)  throws java.io.IOException;
  public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int)  throws java.io.IOException;
  public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean)  throws java.io.IOException;
}
public final class android.net.SSLSessionCache
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public void <init>(java.io.File)  throws java.io.IOException;
}
public class android.net.TrafficStats
  extends java.lang.Object
{
  public static int getThreadStatsTag();
  public static long getMobileRxBytes();
  public static long getMobileRxPackets();
  public static long getMobileTxBytes();
  public static long getMobileTxPackets();
  public static long getTotalRxBytes();
  public static long getTotalRxPackets();
  public static long getTotalTxBytes();
  public static long getTotalTxPackets();
  public static long getUidRxBytes(int);
  public static long getUidRxPackets(int);
  public static long getUidTcpRxBytes(int);
  public static long getUidTcpRxSegments(int);
  public static long getUidTcpTxBytes(int);
  public static long getUidTcpTxSegments(int);
  public static long getUidTxBytes(int);
  public static long getUidTxPackets(int);
  public static long getUidUdpRxBytes(int);
  public static long getUidUdpRxPackets(int);
  public static long getUidUdpTxBytes(int);
  public static long getUidUdpTxPackets(int);
  public static void clearThreadStatsTag();
  public static void incrementOperationCount(int);
  public static void incrementOperationCount(int, int);
  public static void setThreadStatsTag(int);
  public static void tagDatagramSocket(java.net.DatagramSocket)  throws java.net.SocketException;
  public static void tagSocket(java.net.Socket)  throws java.net.SocketException;
  public static void untagDatagramSocket(java.net.DatagramSocket)  throws java.net.SocketException;
  public static void untagSocket(java.net.Socket)  throws java.net.SocketException;
  public void <init>();
  public static final int UNSUPPORTED;
}
public abstract class android.net.Uri
  extends java.lang.Object
  implements android.os.Parcelable, java.lang.Comparable
{
  public static void writeToParcel(android.os.Parcel, android.net.Uri);
  public static android.net.Uri fromFile(java.io.File);
  public static android.net.Uri fromParts(java.lang.String, java.lang.String, java.lang.String);
  public static android.net.Uri parse(java.lang.String);
  public static android.net.Uri withAppendedPath(android.net.Uri, java.lang.String);
  public static java.lang.String decode(java.lang.String);
  public static java.lang.String encode(java.lang.String);
  public static java.lang.String encode(java.lang.String, java.lang.String);
  public abstract boolean isHierarchical();
  public abstract boolean isRelative();
  public abstract int getPort();
  public abstract android.net.Uri$Builder buildUpon();
  public abstract java.lang.String getAuthority();
  public abstract java.lang.String getEncodedAuthority();
  public abstract java.lang.String getEncodedFragment();
  public abstract java.lang.String getEncodedPath();
  public abstract java.lang.String getEncodedQuery();
  public abstract java.lang.String getEncodedSchemeSpecificPart();
  public abstract java.lang.String getEncodedUserInfo();
  public abstract java.lang.String getFragment();
  public abstract java.lang.String getHost();
  public abstract java.lang.String getLastPathSegment();
  public abstract java.lang.String getPath();
  public abstract java.lang.String getQuery();
  public abstract java.lang.String getScheme();
  public abstract java.lang.String getSchemeSpecificPart();
  public abstract java.lang.String getUserInfo();
  public abstract java.lang.String toString();
  public abstract java.util.List getPathSegments();
  public boolean equals(java.lang.Object);
  public boolean getBooleanQueryParameter(java.lang.String, boolean);
  public boolean isAbsolute();
  public boolean isOpaque();
  public int compareTo(android.net.Uri);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public android.net.Uri normalizeScheme();
  public java.lang.String getQueryParameter(java.lang.String);
  public java.util.List getQueryParameters(java.lang.String);
  public java.util.Set getQueryParameterNames();
  public static final android.net.Uri EMPTY;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.net.Uri$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.net.Uri build();
  public android.net.Uri$Builder appendEncodedPath(java.lang.String);
  public android.net.Uri$Builder appendPath(java.lang.String);
  public android.net.Uri$Builder appendQueryParameter(java.lang.String, java.lang.String);
  public android.net.Uri$Builder authority(java.lang.String);
  public android.net.Uri$Builder clearQuery();
  public android.net.Uri$Builder encodedAuthority(java.lang.String);
  public android.net.Uri$Builder encodedFragment(java.lang.String);
  public android.net.Uri$Builder encodedOpaquePart(java.lang.String);
  public android.net.Uri$Builder encodedPath(java.lang.String);
  public android.net.Uri$Builder encodedQuery(java.lang.String);
  public android.net.Uri$Builder fragment(java.lang.String);
  public android.net.Uri$Builder opaquePart(java.lang.String);
  public android.net.Uri$Builder path(java.lang.String);
  public android.net.Uri$Builder query(java.lang.String);
  public android.net.Uri$Builder scheme(java.lang.String);
  public java.lang.String toString();
}
public class android.net.UrlQuerySanitizer
  extends java.lang.Object
{
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulAndAngleBracketsLegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulLegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getAllButWhitespaceLegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getAllIllegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getAmpAndSpaceLegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getAmpLegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getSpaceLegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getUrlAndSpaceLegal();
  public static final android.net.UrlQuerySanitizer$ValueSanitizer getUrlLegal();
  public void <init>();
  public void <init>(java.lang.String);
  public boolean getAllowUnregisteredParamaters();
  public boolean getPreferFirstRepeatedParameter();
  public boolean hasParameter(java.lang.String);
  public void parseQuery(java.lang.String);
  public void parseUrl(java.lang.String);
  public void registerParameter(java.lang.String, android.net.UrlQuerySanitizer$ValueSanitizer);
  public void registerParameters(java.lang.String[], android.net.UrlQuerySanitizer$ValueSanitizer);
  public void setAllowUnregisteredParamaters(boolean);
  public void setPreferFirstRepeatedParameter(boolean);
  public void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer$ValueSanitizer);
  public android.net.UrlQuerySanitizer$ValueSanitizer getEffectiveValueSanitizer(java.lang.String);
  public android.net.UrlQuerySanitizer$ValueSanitizer getUnregisteredParameterValueSanitizer();
  public android.net.UrlQuerySanitizer$ValueSanitizer getValueSanitizer(java.lang.String);
  public java.lang.String getValue(java.lang.String);
  public java.lang.String unescape(java.lang.String);
  public java.util.List getParameterList();
  public java.util.Set getParameterSet();
  protected boolean isHexDigit(char);
  protected int decodeHexDigit(char);
  protected void addSanitizedEntry(java.lang.String, java.lang.String);
  protected void clear();
  protected void parseEntry(java.lang.String, java.lang.String);
}
public class android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer
  extends java.lang.Object
  implements android.net.UrlQuerySanitizer$ValueSanitizer
{
  public void <init>(int);
  public java.lang.String sanitize(java.lang.String);
  public static final int ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL;
  public static final int ALL_BUT_NUL_LEGAL;
  public static final int ALL_BUT_WHITESPACE_LEGAL;
  public static final int ALL_ILLEGAL;
  public static final int ALL_OK;
  public static final int ALL_WHITESPACE_OK;
  public static final int AMP_AND_SPACE_LEGAL;
  public static final int AMP_LEGAL;
  public static final int AMP_OK;
  public static final int DQUOTE_OK;
  public static final int GT_OK;
  public static final int LT_OK;
  public static final int NON_7_BIT_ASCII_OK;
  public static final int NUL_OK;
  public static final int OTHER_WHITESPACE_OK;
  public static final int PCT_OK;
  public static final int SCRIPT_URL_OK;
  public static final int SPACE_LEGAL;
  public static final int SPACE_OK;
  public static final int SQUOTE_OK;
  public static final int URL_AND_SPACE_LEGAL;
  public static final int URL_LEGAL;
}
public class android.net.UrlQuerySanitizer$ParameterValuePair
  extends java.lang.Object
{
  public void <init>(android.net.UrlQuerySanitizer, java.lang.String, java.lang.String);
  public java.lang.String mParameter;
  public java.lang.String mValue;
}
public interface android.net.UrlQuerySanitizer$ValueSanitizer
{
  public abstract java.lang.String sanitize(java.lang.String);
}
public class android.net.VpnService
  extends android.app.Service
{
  public static android.content.Intent prepare(android.content.Context);
  public void <init>();
  public boolean protect(int);
  public boolean protect(java.net.DatagramSocket);
  public boolean protect(java.net.Socket);
  public boolean setUnderlyingNetworks(android.net.Network[]);
  public void onRevoke();
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String SERVICE_INTERFACE;
}
public class android.net.VpnService$Builder
  extends java.lang.Object
{
  public void <init>(android.net.VpnService);
  public android.net.VpnService$Builder addAddress(java.lang.String, int);
  public android.net.VpnService$Builder addAddress(java.net.InetAddress, int);
  public android.net.VpnService$Builder addAllowedApplication(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.net.VpnService$Builder addDisallowedApplication(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.net.VpnService$Builder addDnsServer(java.lang.String);
  public android.net.VpnService$Builder addDnsServer(java.net.InetAddress);
  public android.net.VpnService$Builder addRoute(java.lang.String, int);
  public android.net.VpnService$Builder addRoute(java.net.InetAddress, int);
  public android.net.VpnService$Builder addSearchDomain(java.lang.String);
  public android.net.VpnService$Builder allowBypass();
  public android.net.VpnService$Builder allowFamily(int);
  public android.net.VpnService$Builder setBlocking(boolean);
  public android.net.VpnService$Builder setConfigureIntent(android.app.PendingIntent);
  public android.net.VpnService$Builder setMtu(int);
  public android.net.VpnService$Builder setSession(java.lang.String);
  public android.net.VpnService$Builder setUnderlyingNetworks(android.net.Network[]);
  public android.os.ParcelFileDescriptor establish();
}
public final class android.net.http.HttpResponseCache
  extends java.net.ResponseCache
  implements java.io.Closeable
{
  public static android.net.http.HttpResponseCache getInstalled();
  public static android.net.http.HttpResponseCache install(java.io.File, long)  throws java.io.IOException;
  public int getHitCount();
  public int getNetworkCount();
  public int getRequestCount();
  public long maxSize();
  public long size();
  public void close()  throws java.io.IOException;
  public void delete()  throws java.io.IOException;
  public void flush();
  public java.net.CacheRequest put(java.net.URI, java.net.URLConnection)  throws java.io.IOException;
  public java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map)  throws java.io.IOException;
}
public class android.net.http.SslCertificate
  extends java.lang.Object
{
  public static android.net.http.SslCertificate restoreState(android.os.Bundle);
  public static android.os.Bundle saveState(android.net.http.SslCertificate);
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, java.util.Date, java.util.Date);
  public void <init>(java.security.cert.X509Certificate);
  public android.net.http.SslCertificate$DName getIssuedBy();
  public android.net.http.SslCertificate$DName getIssuedTo();
  public java.lang.String getValidNotAfter();
  public java.lang.String getValidNotBefore();
  public java.lang.String toString();
  public java.util.Date getValidNotAfterDate();
  public java.util.Date getValidNotBeforeDate();
}
public class android.net.http.SslCertificate$DName
  extends java.lang.Object
{
  public void <init>(android.net.http.SslCertificate, java.lang.String);
  public java.lang.String getCName();
  public java.lang.String getDName();
  public java.lang.String getOName();
  public java.lang.String getUName();
}
public class android.net.http.SslError
  extends java.lang.Object
{
  public void <init>(int, android.net.http.SslCertificate);
  public void <init>(int, android.net.http.SslCertificate, java.lang.String);
  public void <init>(int, java.security.cert.X509Certificate);
  public void <init>(int, java.security.cert.X509Certificate, java.lang.String);
  public boolean addError(int);
  public boolean hasError(int);
  public int getPrimaryError();
  public android.net.http.SslCertificate getCertificate();
  public java.lang.String getUrl();
  public java.lang.String toString();
  public static final int SSL_DATE_INVALID;
  public static final int SSL_EXPIRED;
  public static final int SSL_IDMISMATCH;
  public static final int SSL_INVALID;
  public static final int SSL_MAX_ERROR;
  public static final int SSL_NOTYETVALID;
  public static final int SSL_UNTRUSTED;
}
public class android.net.http.X509TrustManagerExtensions
  extends java.lang.Object
{
  public void <init>(javax.net.ssl.X509TrustManager)  throws java.lang.IllegalArgumentException;
  public boolean isUserAddedCertificate(java.security.cert.X509Certificate);
  public java.util.List checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, java.lang.String)  throws java.security.cert.CertificateException;
}
public final class android.net.nsd.NsdManager
  extends java.lang.Object
{
  public void discoverServices(java.lang.String, int, android.net.nsd.NsdManager$DiscoveryListener);
  public void registerService(android.net.nsd.NsdServiceInfo, int, android.net.nsd.NsdManager$RegistrationListener);
  public void resolveService(android.net.nsd.NsdServiceInfo, android.net.nsd.NsdManager$ResolveListener);
  public void stopServiceDiscovery(android.net.nsd.NsdManager$DiscoveryListener);
  public void unregisterService(android.net.nsd.NsdManager$RegistrationListener);
  public static final int FAILURE_ALREADY_ACTIVE;
  public static final int FAILURE_INTERNAL_ERROR;
  public static final int FAILURE_MAX_LIMIT;
  public static final int NSD_STATE_DISABLED;
  public static final int NSD_STATE_ENABLED;
  public static final int PROTOCOL_DNS_SD;
  public static final java.lang.String ACTION_NSD_STATE_CHANGED;
  public static final java.lang.String EXTRA_NSD_STATE;
}
public interface android.net.nsd.NsdManager$DiscoveryListener
{
  public abstract void onDiscoveryStarted(java.lang.String);
  public abstract void onDiscoveryStopped(java.lang.String);
  public abstract void onServiceFound(android.net.nsd.NsdServiceInfo);
  public abstract void onServiceLost(android.net.nsd.NsdServiceInfo);
  public abstract void onStartDiscoveryFailed(java.lang.String, int);
  public abstract void onStopDiscoveryFailed(java.lang.String, int);
}
public interface android.net.nsd.NsdManager$RegistrationListener
{
  public abstract void onRegistrationFailed(android.net.nsd.NsdServiceInfo, int);
  public abstract void onServiceRegistered(android.net.nsd.NsdServiceInfo);
  public abstract void onServiceUnregistered(android.net.nsd.NsdServiceInfo);
  public abstract void onUnregistrationFailed(android.net.nsd.NsdServiceInfo, int);
}
public interface android.net.nsd.NsdManager$ResolveListener
{
  public abstract void onResolveFailed(android.net.nsd.NsdServiceInfo, int);
  public abstract void onServiceResolved(android.net.nsd.NsdServiceInfo);
}
public final class android.net.nsd.NsdServiceInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public int getPort();
  public void removeAttribute(java.lang.String);
  public void setAttribute(java.lang.String, java.lang.String);
  public void setHost(java.net.InetAddress);
  public void setPort(int);
  public void setServiceName(java.lang.String);
  public void setServiceType(java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getServiceName();
  public java.lang.String getServiceType();
  public java.lang.String toString();
  public java.net.InetAddress getHost();
  public java.util.Map getAttributes();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.rtp.AudioCodec
  extends java.lang.Object
{
  public static android.net.rtp.AudioCodec getCodec(int, java.lang.String, java.lang.String);
  public static android.net.rtp.AudioCodec[] getCodecs();
  public static final android.net.rtp.AudioCodec AMR;
  public static final android.net.rtp.AudioCodec GSM;
  public static final android.net.rtp.AudioCodec GSM_EFR;
  public static final android.net.rtp.AudioCodec PCMA;
  public static final android.net.rtp.AudioCodec PCMU;
  public final int type;
  public final java.lang.String fmtp;
  public final java.lang.String rtpmap;
}
public class android.net.rtp.AudioGroup
  extends java.lang.Object
{
  public void <init>();
  public int getMode();
  public void clear();
  public void sendDtmf(int);
  public void setMode(int);
  public android.net.rtp.AudioStream[] getStreams();
  protected void finalize()  throws java.lang.Throwable;
  public static final int MODE_ECHO_SUPPRESSION;
  public static final int MODE_MUTED;
  public static final int MODE_NORMAL;
  public static final int MODE_ON_HOLD;
}
public class android.net.rtp.AudioStream
  extends android.net.rtp.RtpStream
{
  public void <init>(java.net.InetAddress)  throws java.net.SocketException;
  public final boolean isBusy();
  public int getDtmfType();
  public void join(android.net.rtp.AudioGroup);
  public void setCodec(android.net.rtp.AudioCodec);
  public void setDtmfType(int);
  public android.net.rtp.AudioCodec getCodec();
  public android.net.rtp.AudioGroup getGroup();
}
public class android.net.rtp.RtpStream
  extends java.lang.Object
{
  public boolean isBusy();
  public int getLocalPort();
  public int getMode();
  public int getRemotePort();
  public void associate(java.net.InetAddress, int);
  public void release();
  public void setMode(int);
  public java.net.InetAddress getLocalAddress();
  public java.net.InetAddress getRemoteAddress();
  protected void finalize()  throws java.lang.Throwable;
  public static final int MODE_NORMAL;
  public static final int MODE_RECEIVE_ONLY;
  public static final int MODE_SEND_ONLY;
}
public class android.net.sip.SipAudioCall
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.net.sip.SipProfile);
  public boolean isInCall();
  public boolean isMuted();
  public boolean isOnHold();
  public int getState();
  public void answerCall(int)  throws android.net.sip.SipException;
  public void attachCall(android.net.sip.SipSession, java.lang.String)  throws android.net.sip.SipException;
  public void close();
  public void continueCall(int)  throws android.net.sip.SipException;
  public void endCall()  throws android.net.sip.SipException;
  public void holdCall(int)  throws android.net.sip.SipException;
  public void makeCall(android.net.sip.SipProfile, android.net.sip.SipSession, int)  throws android.net.sip.SipException;
  public void sendDtmf(int);
  public void sendDtmf(int, android.os.Message);
  public void setListener(android.net.sip.SipAudioCall$Listener);
  public void setListener(android.net.sip.SipAudioCall$Listener, boolean);
  public void setSpeakerMode(boolean);
  public void startAudio();
  public void toggleMute();
  public android.net.sip.SipProfile getLocalProfile();
  public android.net.sip.SipProfile getPeerProfile();
}
public class android.net.sip.SipAudioCall$Listener
  extends java.lang.Object
{
  public void <init>();
  public void onCallBusy(android.net.sip.SipAudioCall);
  public void onCallEnded(android.net.sip.SipAudioCall);
  public void onCallEstablished(android.net.sip.SipAudioCall);
  public void onCallHeld(android.net.sip.SipAudioCall);
  public void onCalling(android.net.sip.SipAudioCall);
  public void onChanged(android.net.sip.SipAudioCall);
  public void onError(android.net.sip.SipAudioCall, int, java.lang.String);
  public void onReadyToCall(android.net.sip.SipAudioCall);
  public void onRinging(android.net.sip.SipAudioCall, android.net.sip.SipProfile);
  public void onRingingBack(android.net.sip.SipAudioCall);
}
public class android.net.sip.SipErrorCode
  extends java.lang.Object
{
  public static java.lang.String toString(int);
  public static final int CLIENT_ERROR;
  public static final int CROSS_DOMAIN_AUTHENTICATION;
  public static final int DATA_CONNECTION_LOST;
  public static final int INVALID_CREDENTIALS;
  public static final int INVALID_REMOTE_URI;
  public static final int IN_PROGRESS;
  public static final int NO_ERROR;
  public static final int PEER_NOT_REACHABLE;
  public static final int SERVER_ERROR;
  public static final int SERVER_UNREACHABLE;
  public static final int SOCKET_ERROR;
  public static final int TIME_OUT;
  public static final int TRANSACTION_TERMINTED;
}
public class android.net.sip.SipException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public class android.net.sip.SipManager
  extends java.lang.Object
{
  public static boolean isApiSupported(android.content.Context);
  public static boolean isIncomingCallIntent(android.content.Intent);
  public static boolean isSipWifiOnly(android.content.Context);
  public static boolean isVoipSupported(android.content.Context);
  public static android.net.sip.SipManager newInstance(android.content.Context);
  public static java.lang.String getCallId(android.content.Intent);
  public static java.lang.String getOfferSessionDescription(android.content.Intent);
  public boolean isOpened(java.lang.String)  throws android.net.sip.SipException;
  public boolean isRegistered(java.lang.String)  throws android.net.sip.SipException;
  public void close(java.lang.String)  throws android.net.sip.SipException;
  public void open(android.net.sip.SipProfile)  throws android.net.sip.SipException;
  public void open(android.net.sip.SipProfile, android.app.PendingIntent, android.net.sip.SipRegistrationListener)  throws android.net.sip.SipException;
  public void register(android.net.sip.SipProfile, int, android.net.sip.SipRegistrationListener)  throws android.net.sip.SipException;
  public void setRegistrationListener(java.lang.String, android.net.sip.SipRegistrationListener)  throws android.net.sip.SipException;
  public void unregister(android.net.sip.SipProfile, android.net.sip.SipRegistrationListener)  throws android.net.sip.SipException;
  public android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile, android.net.sip.SipProfile, android.net.sip.SipAudioCall$Listener, int)  throws android.net.sip.SipException;
  public android.net.sip.SipAudioCall makeAudioCall(java.lang.String, java.lang.String, android.net.sip.SipAudioCall$Listener, int)  throws android.net.sip.SipException;
  public android.net.sip.SipAudioCall takeAudioCall(android.content.Intent, android.net.sip.SipAudioCall$Listener)  throws android.net.sip.SipException;
  public android.net.sip.SipSession createSipSession(android.net.sip.SipProfile, android.net.sip.SipSession$Listener)  throws android.net.sip.SipException;
  public android.net.sip.SipSession getSessionFor(android.content.Intent)  throws android.net.sip.SipException;
  public static final int INCOMING_CALL_RESULT_CODE;
  public static final java.lang.String EXTRA_CALL_ID;
  public static final java.lang.String EXTRA_OFFER_SD;
}
public class android.net.sip.SipProfile
  extends java.lang.Object
  implements android.os.Parcelable, java.io.Serializable, java.lang.Cloneable
{
  public boolean getAutoRegistration();
  public boolean getSendKeepAlive();
  public int describeContents();
  public int getPort();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getAuthUserName();
  public java.lang.String getDisplayName();
  public java.lang.String getPassword();
  public java.lang.String getProfileName();
  public java.lang.String getProtocol();
  public java.lang.String getProxyAddress();
  public java.lang.String getSipDomain();
  public java.lang.String getUriString();
  public java.lang.String getUserName();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.sip.SipProfile$Builder
  extends java.lang.Object
{
  public void <init>(android.net.sip.SipProfile);
  public void <init>(java.lang.String)  throws java.text.ParseException;
  public void <init>(java.lang.String, java.lang.String)  throws java.text.ParseException;
  public android.net.sip.SipProfile build();
  public android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String);
  public android.net.sip.SipProfile$Builder setAutoRegistration(boolean);
  public android.net.sip.SipProfile$Builder setDisplayName(java.lang.String);
  public android.net.sip.SipProfile$Builder setOutboundProxy(java.lang.String);
  public android.net.sip.SipProfile$Builder setPassword(java.lang.String);
  public android.net.sip.SipProfile$Builder setPort(int)  throws java.lang.IllegalArgumentException;
  public android.net.sip.SipProfile$Builder setProfileName(java.lang.String);
  public android.net.sip.SipProfile$Builder setProtocol(java.lang.String)  throws java.lang.IllegalArgumentException;
  public android.net.sip.SipProfile$Builder setSendKeepAlive(boolean);
}
public interface android.net.sip.SipRegistrationListener
{
  public abstract void onRegistering(java.lang.String);
  public abstract void onRegistrationDone(java.lang.String, long);
  public abstract void onRegistrationFailed(java.lang.String, int, java.lang.String);
}
public final class android.net.sip.SipSession
  extends java.lang.Object
{
  public boolean isInCall();
  public int getState();
  public void answerCall(java.lang.String, int);
  public void changeCall(java.lang.String, int);
  public void endCall();
  public void makeCall(android.net.sip.SipProfile, java.lang.String, int);
  public void register(int);
  public void setListener(android.net.sip.SipSession$Listener);
  public void unregister();
  public android.net.sip.SipProfile getLocalProfile();
  public android.net.sip.SipProfile getPeerProfile();
  public java.lang.String getCallId();
  public java.lang.String getLocalIp();
}
public class android.net.sip.SipSession$Listener
  extends java.lang.Object
{
  public void <init>();
  public void onCallBusy(android.net.sip.SipSession);
  public void onCallChangeFailed(android.net.sip.SipSession, int, java.lang.String);
  public void onCallEnded(android.net.sip.SipSession);
  public void onCallEstablished(android.net.sip.SipSession, java.lang.String);
  public void onCalling(android.net.sip.SipSession);
  public void onError(android.net.sip.SipSession, int, java.lang.String);
  public void onRegistering(android.net.sip.SipSession);
  public void onRegistrationDone(android.net.sip.SipSession, int);
  public void onRegistrationFailed(android.net.sip.SipSession, int, java.lang.String);
  public void onRegistrationTimeout(android.net.sip.SipSession);
  public void onRinging(android.net.sip.SipSession, android.net.sip.SipProfile, java.lang.String);
  public void onRingingBack(android.net.sip.SipSession);
}
public class android.net.sip.SipSession$State
  extends java.lang.Object
{
  public static java.lang.String toString(int);
  public static final int DEREGISTERING;
  public static final int INCOMING_CALL;
  public static final int INCOMING_CALL_ANSWERING;
  public static final int IN_CALL;
  public static final int NOT_DEFINED;
  public static final int OUTGOING_CALL;
  public static final int OUTGOING_CALL_CANCELING;
  public static final int OUTGOING_CALL_RING_BACK;
  public static final int PINGING;
  public static final int READY_TO_CALL;
  public static final int REGISTERING;
}
public class android.net.wifi.ScanResult
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean is80211mcResponder();
  public boolean isPasspointNetwork();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int CHANNEL_WIDTH_160MHZ;
  public static final int CHANNEL_WIDTH_20MHZ;
  public static final int CHANNEL_WIDTH_40MHZ;
  public static final int CHANNEL_WIDTH_80MHZ;
  public static final int CHANNEL_WIDTH_80MHZ_PLUS_MHZ;
  public int centerFreq0;
  public int centerFreq1;
  public int channelWidth;
  public int frequency;
  public int level;
  public long timestamp;
  public java.lang.CharSequence operatorFriendlyName;
  public java.lang.CharSequence venueName;
  public java.lang.String BSSID;
  public java.lang.String SSID;
  public java.lang.String capabilities;
}
public final class android.net.wifi.SupplicantState
  extends java.lang.Enum
  implements android.os.Parcelable
{
  public static boolean isValidState(android.net.wifi.SupplicantState);
  public static android.net.wifi.SupplicantState valueOf(java.lang.String);
  public static android.net.wifi.SupplicantState[] values();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.net.wifi.SupplicantState ASSOCIATED;
  public static final android.net.wifi.SupplicantState ASSOCIATING;
  public static final android.net.wifi.SupplicantState AUTHENTICATING;
  public static final android.net.wifi.SupplicantState COMPLETED;
  public static final android.net.wifi.SupplicantState DISCONNECTED;
  public static final android.net.wifi.SupplicantState DORMANT;
  public static final android.net.wifi.SupplicantState FOUR_WAY_HANDSHAKE;
  public static final android.net.wifi.SupplicantState GROUP_HANDSHAKE;
  public static final android.net.wifi.SupplicantState INACTIVE;
  public static final android.net.wifi.SupplicantState INTERFACE_DISABLED;
  public static final android.net.wifi.SupplicantState INVALID;
  public static final android.net.wifi.SupplicantState SCANNING;
  public static final android.net.wifi.SupplicantState UNINITIALIZED;
}
public class android.net.wifi.WifiConfiguration
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public boolean isPasspoint();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public boolean hiddenSSID;
  public int networkId;
  public int priority;
  public int status;
  public int wepTxKeyIndex;
  public android.net.wifi.WifiEnterpriseConfig enterpriseConfig;
  public java.lang.String BSSID;
  public java.lang.String FQDN;
  public java.lang.String SSID;
  public java.lang.String preSharedKey;
  public java.lang.String providerFriendlyName;
  public java.lang.String[] wepKeys;
  public java.util.BitSet allowedAuthAlgorithms;
  public java.util.BitSet allowedGroupCiphers;
  public java.util.BitSet allowedKeyManagement;
  public java.util.BitSet allowedPairwiseCiphers;
  public java.util.BitSet allowedProtocols;
  public long[] roamingConsortiumIds;
}
public class android.net.wifi.WifiConfiguration$AuthAlgorithm
  extends java.lang.Object
{
  public static final int LEAP;
  public static final int OPEN;
  public static final int SHARED;
  public static final java.lang.String varName;
  public static final java.lang.String[] strings;
}
public class android.net.wifi.WifiConfiguration$GroupCipher
  extends java.lang.Object
{
  public static final int CCMP;
  public static final int TKIP;
  public static final int WEP104;
  public static final int WEP40;
  public static final java.lang.String varName;
  public static final java.lang.String[] strings;
}
public class android.net.wifi.WifiConfiguration$KeyMgmt
  extends java.lang.Object
{
  public static final int IEEE8021X;
  public static final int NONE;
  public static final int WPA_EAP;
  public static final int WPA_PSK;
  public static final java.lang.String varName;
  public static final java.lang.String[] strings;
}
public class android.net.wifi.WifiConfiguration$PairwiseCipher
  extends java.lang.Object
{
  public static final int CCMP;
  public static final int NONE;
  public static final int TKIP;
  public static final java.lang.String varName;
  public static final java.lang.String[] strings;
}
public class android.net.wifi.WifiConfiguration$Protocol
  extends java.lang.Object
{
  public static final int RSN;
  public static final int WPA;
  public static final java.lang.String varName;
  public static final java.lang.String[] strings;
}
public class android.net.wifi.WifiConfiguration$Status
  extends java.lang.Object
{
  public static final int CURRENT;
  public static final int DISABLED;
  public static final int ENABLED;
  public static final java.lang.String[] strings;
}
public class android.net.wifi.WifiEnterpriseConfig
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.net.wifi.WifiEnterpriseConfig);
  public int describeContents();
  public int getEapMethod();
  public int getPhase2Method();
  public void setAltSubjectMatch(java.lang.String);
  public void setAnonymousIdentity(java.lang.String);
  public void setCaCertificate(java.security.cert.X509Certificate);
  public void setCaCertificates(java.security.cert.X509Certificate[]);
  public void setClientKeyEntry(java.security.PrivateKey, java.security.cert.X509Certificate);
  public void setDomainSuffixMatch(java.lang.String);
  public void setEapMethod(int);
  public void setIdentity(java.lang.String);
  public void setPassword(java.lang.String);
  public void setPhase2Method(int);
  public void setPlmn(java.lang.String);
  public void setRealm(java.lang.String);
  public void setSubjectMatch(java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getAltSubjectMatch();
  public java.lang.String getAnonymousIdentity();
  public java.lang.String getDomainSuffixMatch();
  public java.lang.String getIdentity();
  public java.lang.String getPassword();
  public java.lang.String getPlmn();
  public java.lang.String getRealm();
  public java.lang.String getSubjectMatch();
  public java.lang.String toString();
  public java.security.cert.X509Certificate getCaCertificate();
  public java.security.cert.X509Certificate getClientCertificate();
  public java.security.cert.X509Certificate[] getCaCertificates();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.net.wifi.WifiEnterpriseConfig$Eap
  extends java.lang.Object
{
  public static final int AKA;
  public static final int AKA_PRIME;
  public static final int NONE;
  public static final int PEAP;
  public static final int PWD;
  public static final int SIM;
  public static final int TLS;
  public static final int TTLS;
  public static final int UNAUTH_TLS;
}
public final class android.net.wifi.WifiEnterpriseConfig$Phase2
  extends java.lang.Object
{
  public static final int GTC;
  public static final int MSCHAP;
  public static final int MSCHAPV2;
  public static final int NONE;
  public static final int PAP;
}
public class android.net.wifi.WifiInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState);
  public boolean getHiddenSSID();
  public int describeContents();
  public int getFrequency();
  public int getIpAddress();
  public int getLinkSpeed();
  public int getNetworkId();
  public int getRssi();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.SupplicantState getSupplicantState();
  public java.lang.String getBSSID();
  public java.lang.String getMacAddress();
  public java.lang.String getSSID();
  public java.lang.String toString();
  public static final java.lang.String FREQUENCY_UNITS;
  public static final java.lang.String LINK_SPEED_UNITS;
}
public class android.net.wifi.WifiManager
  extends java.lang.Object
{
  public static int calculateSignalLevel(int, int);
  public static int compareSignalLevel(int, int);
  public boolean disableNetwork(int);
  public boolean disconnect();
  public boolean enableNetwork(int, boolean);
  public boolean is5GHzBandSupported();
  public boolean isDeviceToApRttSupported();
  public boolean isEnhancedPowerReportingSupported();
  public boolean isP2pSupported();
  public boolean isPreferredNetworkOffloadSupported();
  public boolean isScanAlwaysAvailable();
  public boolean isTdlsSupported();
  public boolean isWifiEnabled();
  public boolean pingSupplicant();
  public boolean reassociate();
  public boolean reconnect();
  public boolean removeNetwork(int);
  public boolean saveConfiguration();
  public boolean setWifiEnabled(boolean);
  public boolean startScan();
  public int addNetwork(android.net.wifi.WifiConfiguration);
  public int getWifiState();
  public int updateNetwork(android.net.wifi.WifiConfiguration);
  public void cancelWps(android.net.wifi.WifiManager$WpsCallback);
  public void setTdlsEnabled(java.net.InetAddress, boolean);
  public void setTdlsEnabledWithMacAddress(java.lang.String, boolean);
  public void startWps(android.net.wifi.WpsInfo, android.net.wifi.WifiManager$WpsCallback);
  public android.net.DhcpInfo getDhcpInfo();
  public android.net.wifi.WifiInfo getConnectionInfo();
  public android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String);
  public android.net.wifi.WifiManager$WifiLock createWifiLock(int, java.lang.String);
  public android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String);
  public java.util.List getConfiguredNetworks();
  public java.util.List getScanResults();
  protected void finalize()  throws java.lang.Throwable;
  public static final int ERROR_AUTHENTICATING;
  public static final int WIFI_MODE_FULL;
  public static final int WIFI_MODE_FULL_HIGH_PERF;
  public static final int WIFI_MODE_SCAN_ONLY;
  public static final int WIFI_STATE_DISABLED;
  public static final int WIFI_STATE_DISABLING;
  public static final int WIFI_STATE_ENABLED;
  public static final int WIFI_STATE_ENABLING;
  public static final int WIFI_STATE_UNKNOWN;
  public static final int WPS_AUTH_FAILURE;
  public static final int WPS_OVERLAP_ERROR;
  public static final int WPS_TIMED_OUT;
  public static final int WPS_TKIP_ONLY_PROHIBITED;
  public static final int WPS_WEP_PROHIBITED;
  public static final java.lang.String ACTION_PICK_WIFI_NETWORK;
  public static final java.lang.String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE;
  public static final java.lang.String EXTRA_BSSID;
  public static final java.lang.String EXTRA_NETWORK_INFO;
  public static final java.lang.String EXTRA_NEW_RSSI;
  public static final java.lang.String EXTRA_NEW_STATE;
  public static final java.lang.String EXTRA_PREVIOUS_WIFI_STATE;
  public static final java.lang.String EXTRA_RESULTS_UPDATED;
  public static final java.lang.String EXTRA_SUPPLICANT_CONNECTED;
  public static final java.lang.String EXTRA_SUPPLICANT_ERROR;
  public static final java.lang.String EXTRA_WIFI_INFO;
  public static final java.lang.String EXTRA_WIFI_STATE;
  public static final java.lang.String NETWORK_IDS_CHANGED_ACTION;
  public static final java.lang.String NETWORK_STATE_CHANGED_ACTION;
  public static final java.lang.String RSSI_CHANGED_ACTION;
  public static final java.lang.String SCAN_RESULTS_AVAILABLE_ACTION;
  public static final java.lang.String SUPPLICANT_CONNECTION_CHANGE_ACTION;
  public static final java.lang.String SUPPLICANT_STATE_CHANGED_ACTION;
  public static final java.lang.String WIFI_STATE_CHANGED_ACTION;
}
public class android.net.wifi.WifiManager$MulticastLock
  extends java.lang.Object
{
  public boolean isHeld();
  public void acquire();
  public void release();
  public void setReferenceCounted(boolean);
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.net.wifi.WifiManager$WifiLock
  extends java.lang.Object
{
  public boolean isHeld();
  public void acquire();
  public void release();
  public void setReferenceCounted(boolean);
  public void setWorkSource(android.os.WorkSource);
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
}
public abstract class android.net.wifi.WifiManager$WpsCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onFailed(int);
  public abstract void onStarted(java.lang.String);
  public abstract void onSucceeded();
}
public class android.net.wifi.WpsInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.net.wifi.WpsInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int DISPLAY;
  public static final int INVALID;
  public static final int KEYPAD;
  public static final int LABEL;
  public static final int PBC;
  public static final android.os.Parcelable$Creator CREATOR;
  public int setup;
  public java.lang.String BSSID;
  public java.lang.String pin;
}
public class android.net.wifi.p2p.WifiP2pConfig
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.net.wifi.p2p.WifiP2pConfig);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public int groupOwnerIntent;
  public android.net.wifi.WpsInfo wps;
  public java.lang.String deviceAddress;
}
public class android.net.wifi.p2p.WifiP2pDevice
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.net.wifi.p2p.WifiP2pDevice);
  public boolean equals(java.lang.Object);
  public boolean isGroupOwner();
  public boolean isServiceDiscoveryCapable();
  public boolean wpsDisplaySupported();
  public boolean wpsKeypadSupported();
  public boolean wpsPbcSupported();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int AVAILABLE;
  public static final int CONNECTED;
  public static final int FAILED;
  public static final int INVITED;
  public static final int UNAVAILABLE;
  public static final android.os.Parcelable$Creator CREATOR;
  public int status;
  public java.lang.String deviceAddress;
  public java.lang.String deviceName;
  public java.lang.String primaryDeviceType;
  public java.lang.String secondaryDeviceType;
}
public class android.net.wifi.p2p.WifiP2pDeviceList
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.net.wifi.p2p.WifiP2pDeviceList);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.p2p.WifiP2pDevice get(java.lang.String);
  public java.lang.String toString();
  public java.util.Collection getDeviceList();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.wifi.p2p.WifiP2pGroup
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.net.wifi.p2p.WifiP2pGroup);
  public boolean isGroupOwner();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.wifi.p2p.WifiP2pDevice getOwner();
  public java.lang.String getInterface();
  public java.lang.String getNetworkName();
  public java.lang.String getPassphrase();
  public java.lang.String toString();
  public java.util.Collection getClientList();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.net.wifi.p2p.WifiP2pInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.net.wifi.p2p.WifiP2pInfo);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public boolean groupFormed;
  public boolean isGroupOwner;
  public java.net.InetAddress groupOwnerAddress;
}
public class android.net.wifi.p2p.WifiP2pManager
  extends java.lang.Object
{
  public void addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.nsd.WifiP2pServiceInfo, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void addServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void clearLocalServices(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void clearServiceRequests(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void connect(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pConfig, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void removeLocalService(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.nsd.WifiP2pServiceInfo, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.nsd.WifiP2pServiceRequest, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener);
  public void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$GroupInfoListener);
  public void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$PeerListListener);
  public void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener, android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener);
  public void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener);
  public void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener);
  public void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager$Channel, android.net.wifi.p2p.WifiP2pManager$ActionListener);
  public android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context, android.os.Looper, android.net.wifi.p2p.WifiP2pManager$ChannelListener);
  public static final int BUSY;
  public static final int ERROR;
  public static final int NO_SERVICE_REQUESTS;
  public static final int P2P_UNSUPPORTED;
  public static final int WIFI_P2P_DISCOVERY_STARTED;
  public static final int WIFI_P2P_DISCOVERY_STOPPED;
  public static final int WIFI_P2P_STATE_DISABLED;
  public static final int WIFI_P2P_STATE_ENABLED;
  public static final java.lang.String EXTRA_DISCOVERY_STATE;
  public static final java.lang.String EXTRA_NETWORK_INFO;
  public static final java.lang.String EXTRA_P2P_DEVICE_LIST;
  public static final java.lang.String EXTRA_WIFI_P2P_DEVICE;
  public static final java.lang.String EXTRA_WIFI_P2P_GROUP;
  public static final java.lang.String EXTRA_WIFI_P2P_INFO;
  public static final java.lang.String EXTRA_WIFI_STATE;
  public static final java.lang.String WIFI_P2P_CONNECTION_CHANGED_ACTION;
  public static final java.lang.String WIFI_P2P_DISCOVERY_CHANGED_ACTION;
  public static final java.lang.String WIFI_P2P_PEERS_CHANGED_ACTION;
  public static final java.lang.String WIFI_P2P_STATE_CHANGED_ACTION;
  public static final java.lang.String WIFI_P2P_THIS_DEVICE_CHANGED_ACTION;
}
public interface android.net.wifi.p2p.WifiP2pManager$ActionListener
{
  public abstract void onFailure(int);
  public abstract void onSuccess();
}
public class android.net.wifi.p2p.WifiP2pManager$Channel
  extends java.lang.Object
{
}
public interface android.net.wifi.p2p.WifiP2pManager$ChannelListener
{
  public abstract void onChannelDisconnected();
}
public interface android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener
{
  public abstract void onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo);
}
public interface android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener
{
  public abstract void onDnsSdServiceAvailable(java.lang.String, java.lang.String, android.net.wifi.p2p.WifiP2pDevice);
}
public interface android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener
{
  public abstract void onDnsSdTxtRecordAvailable(java.lang.String, java.util.Map, android.net.wifi.p2p.WifiP2pDevice);
}
public interface android.net.wifi.p2p.WifiP2pManager$GroupInfoListener
{
  public abstract void onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup);
}
public interface android.net.wifi.p2p.WifiP2pManager$PeerListListener
{
  public abstract void onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList);
}
public interface android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener
{
  public abstract void onServiceAvailable(int, byte[], android.net.wifi.p2p.WifiP2pDevice);
}
public interface android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener
{
  public abstract void onUpnpServiceAvailable(java.util.List, android.net.wifi.p2p.WifiP2pDevice);
}
public class android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo
  extends android.net.wifi.p2p.nsd.WifiP2pServiceInfo
{
  public static android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo newInstance(java.lang.String, java.lang.String, java.util.Map);
}
public class android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest
  extends android.net.wifi.p2p.nsd.WifiP2pServiceRequest
{
  public static android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance();
  public static android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String);
  public static android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest newInstance(java.lang.String, java.lang.String);
}
public class android.net.wifi.p2p.nsd.WifiP2pServiceInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public static final int SERVICE_TYPE_ALL;
  public static final int SERVICE_TYPE_BONJOUR;
  public static final int SERVICE_TYPE_UPNP;
  public static final int SERVICE_TYPE_VENDOR_SPECIFIC;
}
public class android.net.wifi.p2p.nsd.WifiP2pServiceRequest
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int);
  public static android.net.wifi.p2p.nsd.WifiP2pServiceRequest newInstance(int, java.lang.String);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
}
public class android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo
  extends android.net.wifi.p2p.nsd.WifiP2pServiceInfo
{
  public static android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo newInstance(java.lang.String, java.lang.String, java.util.List);
}
public class android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest
  extends android.net.wifi.p2p.nsd.WifiP2pServiceRequest
{
  public static android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance();
  public static android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest newInstance(java.lang.String);
}
public class android.nfc.FormatException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public final class android.nfc.NdefMessage
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.nfc.NdefRecord, android.nfc.NdefRecord[]);
  public void <init>(android.nfc.NdefRecord[]);
  public void <init>(byte[])  throws android.nfc.FormatException;
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getByteArrayLength();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.nfc.NdefRecord[] getRecords();
  public byte[] toByteArray();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.nfc.NdefRecord
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.nfc.NdefRecord createApplicationRecord(java.lang.String);
  public static android.nfc.NdefRecord createExternal(java.lang.String, java.lang.String, byte[]);
  public static android.nfc.NdefRecord createMime(java.lang.String, byte[]);
  public static android.nfc.NdefRecord createTextRecord(java.lang.String, java.lang.String);
  public static android.nfc.NdefRecord createUri(android.net.Uri);
  public static android.nfc.NdefRecord createUri(java.lang.String);
  public void <init>(byte[])  throws android.nfc.FormatException;
  public void <init>(short, byte[], byte[], byte[]);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public short getTnf();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.Uri toUri();
  public byte[] getId();
  public byte[] getPayload();
  public byte[] getType();
  public byte[] toByteArray();
  public java.lang.String toMimeType();
  public java.lang.String toString();
  public static final short TNF_ABSOLUTE_URI;
  public static final short TNF_EMPTY;
  public static final short TNF_EXTERNAL_TYPE;
  public static final short TNF_MIME_MEDIA;
  public static final short TNF_UNCHANGED;
  public static final short TNF_UNKNOWN;
  public static final short TNF_WELL_KNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final byte[] RTD_ALTERNATIVE_CARRIER;
  public static final byte[] RTD_HANDOVER_CARRIER;
  public static final byte[] RTD_HANDOVER_REQUEST;
  public static final byte[] RTD_HANDOVER_SELECT;
  public static final byte[] RTD_SMART_POSTER;
  public static final byte[] RTD_TEXT;
  public static final byte[] RTD_URI;
}
public final class android.nfc.NfcAdapter
  extends java.lang.Object
{
  public static android.nfc.NfcAdapter getDefaultAdapter(android.content.Context);
  public boolean ignore(android.nfc.Tag, int, android.nfc.NfcAdapter$OnTagRemovedListener, android.os.Handler);
  public boolean invokeBeam(android.app.Activity);
  public boolean isEnabled();
  public boolean isNdefPushEnabled();
  public void disableForegroundDispatch(android.app.Activity);
  public void disableForegroundNdefPush(android.app.Activity);
  public void disableReaderMode(android.app.Activity);
  public void enableForegroundDispatch(android.app.Activity, android.app.PendingIntent, android.content.IntentFilter[], java.lang.String[][]);
  public void enableForegroundNdefPush(android.app.Activity, android.nfc.NdefMessage);
  public void enableReaderMode(android.app.Activity, android.nfc.NfcAdapter$ReaderCallback, int, android.os.Bundle);
  public void setBeamPushUris(android.net.Uri[], android.app.Activity);
  public void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback, android.app.Activity);
  public void setNdefPushMessage(android.nfc.NdefMessage, android.app.Activity, android.app.Activity[]);
  public void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback, android.app.Activity, android.app.Activity[]);
  public void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback, android.app.Activity, android.app.Activity[]);
  public static final int FLAG_READER_NFC_A;
  public static final int FLAG_READER_NFC_B;
  public static final int FLAG_READER_NFC_BARCODE;
  public static final int FLAG_READER_NFC_F;
  public static final int FLAG_READER_NFC_V;
  public static final int FLAG_READER_NO_PLATFORM_SOUNDS;
  public static final int FLAG_READER_SKIP_NDEF_CHECK;
  public static final int STATE_OFF;
  public static final int STATE_ON;
  public static final int STATE_TURNING_OFF;
  public static final int STATE_TURNING_ON;
  public static final java.lang.String ACTION_ADAPTER_STATE_CHANGED;
  public static final java.lang.String ACTION_NDEF_DISCOVERED;
  public static final java.lang.String ACTION_TAG_DISCOVERED;
  public static final java.lang.String ACTION_TECH_DISCOVERED;
  public static final java.lang.String EXTRA_ADAPTER_STATE;
  public static final java.lang.String EXTRA_ID;
  public static final java.lang.String EXTRA_NDEF_MESSAGES;
  public static final java.lang.String EXTRA_READER_PRESENCE_CHECK_DELAY;
  public static final java.lang.String EXTRA_TAG;
}
public interface android.nfc.NfcAdapter$CreateBeamUrisCallback
{
  public abstract android.net.Uri[] createBeamUris(android.nfc.NfcEvent);
}
public interface android.nfc.NfcAdapter$CreateNdefMessageCallback
{
  public abstract android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent);
}
public interface android.nfc.NfcAdapter$OnNdefPushCompleteCallback
{
  public abstract void onNdefPushComplete(android.nfc.NfcEvent);
}
public interface android.nfc.NfcAdapter$OnTagRemovedListener
{
  public abstract void onTagRemoved();
}
public interface android.nfc.NfcAdapter$ReaderCallback
{
  public abstract void onTagDiscovered(android.nfc.Tag);
}
public final class android.nfc.NfcEvent
  extends java.lang.Object
{
  public final int peerLlcpMajorVersion;
  public final int peerLlcpMinorVersion;
  public final android.nfc.NfcAdapter nfcAdapter;
}
public final class android.nfc.NfcManager
  extends java.lang.Object
{
  public android.nfc.NfcAdapter getDefaultAdapter();
}
public final class android.nfc.Tag
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public byte[] getId();
  public java.lang.String toString();
  public java.lang.String[] getTechList();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.nfc.TagLostException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class android.nfc.cardemulation.CardEmulation
  extends java.lang.Object
{
  public static android.nfc.cardemulation.CardEmulation getInstance(android.nfc.NfcAdapter);
  public boolean categoryAllowsForegroundPreference(java.lang.String);
  public boolean isDefaultServiceForAid(android.content.ComponentName, java.lang.String);
  public boolean isDefaultServiceForCategory(android.content.ComponentName, java.lang.String);
  public boolean registerAidsForService(android.content.ComponentName, java.lang.String, java.util.List);
  public boolean removeAidsForService(android.content.ComponentName, java.lang.String);
  public boolean setPreferredService(android.app.Activity, android.content.ComponentName);
  public boolean supportsAidPrefixRegistration();
  public boolean unsetPreferredService(android.app.Activity);
  public int getSelectionModeForCategory(java.lang.String);
  public java.util.List getAidsForService(android.content.ComponentName, java.lang.String);
  public static final int SELECTION_MODE_ALWAYS_ASK;
  public static final int SELECTION_MODE_ASK_IF_CONFLICT;
  public static final int SELECTION_MODE_PREFER_DEFAULT;
  public static final java.lang.String ACTION_CHANGE_DEFAULT;
  public static final java.lang.String CATEGORY_OTHER;
  public static final java.lang.String CATEGORY_PAYMENT;
  public static final java.lang.String EXTRA_CATEGORY;
  public static final java.lang.String EXTRA_SERVICE_COMPONENT;
}
public abstract class android.nfc.cardemulation.HostApduService
  extends android.app.Service
{
  public void <init>();
  public final void notifyUnhandled();
  public final void sendResponseApdu(byte[]);
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract void onDeactivated(int);
  public abstract byte[] processCommandApdu(byte[], android.os.Bundle);
  public static final int DEACTIVATION_DESELECTED;
  public static final int DEACTIVATION_LINK_LOSS;
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public abstract class android.nfc.cardemulation.HostNfcFService
  extends android.app.Service
{
  public void <init>();
  public final void sendResponsePacket(byte[]);
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract void onDeactivated(int);
  public abstract byte[] processNfcFPacket(byte[], android.os.Bundle);
  public static final int DEACTIVATION_LINK_LOSS;
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public final class android.nfc.cardemulation.NfcFCardEmulation
  extends java.lang.Object
{
  public static android.nfc.cardemulation.NfcFCardEmulation getInstance(android.nfc.NfcAdapter);
  public boolean disableService(android.app.Activity)  throws java.lang.RuntimeException;
  public boolean enableService(android.app.Activity, android.content.ComponentName)  throws java.lang.RuntimeException;
  public boolean registerSystemCodeForService(android.content.ComponentName, java.lang.String)  throws java.lang.RuntimeException;
  public boolean setNfcid2ForService(android.content.ComponentName, java.lang.String)  throws java.lang.RuntimeException;
  public boolean unregisterSystemCodeForService(android.content.ComponentName)  throws java.lang.RuntimeException;
  public java.lang.String getNfcid2ForService(android.content.ComponentName)  throws java.lang.RuntimeException;
  public java.lang.String getSystemCodeForService(android.content.ComponentName)  throws java.lang.RuntimeException;
}
public abstract class android.nfc.cardemulation.OffHostApduService
  extends android.app.Service
{
  public void <init>();
  public abstract android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public final class android.nfc.tech.IsoDep
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.IsoDep get(android.nfc.Tag);
  public boolean isConnected();
  public boolean isExtendedLengthApduSupported();
  public int getMaxTransceiveLength();
  public int getTimeout();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public void setTimeout(int);
  public android.nfc.Tag getTag();
  public byte[] getHiLayerResponse();
  public byte[] getHistoricalBytes();
  public byte[] transceive(byte[])  throws java.io.IOException;
}
public final class android.nfc.tech.MifareClassic
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.MifareClassic get(android.nfc.Tag);
  public boolean authenticateSectorWithKeyA(int, byte[])  throws java.io.IOException;
  public boolean authenticateSectorWithKeyB(int, byte[])  throws java.io.IOException;
  public boolean isConnected();
  public int blockToSector(int);
  public int getBlockCount();
  public int getBlockCountInSector(int);
  public int getMaxTransceiveLength();
  public int getSectorCount();
  public int getSize();
  public int getTimeout();
  public int getType();
  public int sectorToBlock(int);
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public void decrement(int, int)  throws java.io.IOException;
  public void increment(int, int)  throws java.io.IOException;
  public void restore(int)  throws java.io.IOException;
  public void setTimeout(int);
  public void transfer(int)  throws java.io.IOException;
  public void writeBlock(int, byte[])  throws java.io.IOException;
  public android.nfc.Tag getTag();
  public byte[] readBlock(int)  throws java.io.IOException;
  public byte[] transceive(byte[])  throws java.io.IOException;
  public static final int BLOCK_SIZE;
  public static final int SIZE_1K;
  public static final int SIZE_2K;
  public static final int SIZE_4K;
  public static final int SIZE_MINI;
  public static final int TYPE_CLASSIC;
  public static final int TYPE_PLUS;
  public static final int TYPE_PRO;
  public static final int TYPE_UNKNOWN;
  public static final byte[] KEY_DEFAULT;
  public static final byte[] KEY_MIFARE_APPLICATION_DIRECTORY;
  public static final byte[] KEY_NFC_FORUM;
}
public final class android.nfc.tech.MifareUltralight
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.MifareUltralight get(android.nfc.Tag);
  public boolean isConnected();
  public int getMaxTransceiveLength();
  public int getTimeout();
  public int getType();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public void setTimeout(int);
  public void writePage(int, byte[])  throws java.io.IOException;
  public android.nfc.Tag getTag();
  public byte[] readPages(int)  throws java.io.IOException;
  public byte[] transceive(byte[])  throws java.io.IOException;
  public static final int PAGE_SIZE;
  public static final int TYPE_ULTRALIGHT;
  public static final int TYPE_ULTRALIGHT_C;
  public static final int TYPE_UNKNOWN;
}
public final class android.nfc.tech.Ndef
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.Ndef get(android.nfc.Tag);
  public boolean canMakeReadOnly();
  public boolean isConnected();
  public boolean isWritable();
  public boolean makeReadOnly()  throws java.io.IOException;
  public int getMaxSize();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public void writeNdefMessage(android.nfc.NdefMessage)  throws android.nfc.FormatException, java.io.IOException;
  public android.nfc.NdefMessage getCachedNdefMessage();
  public android.nfc.NdefMessage getNdefMessage()  throws android.nfc.FormatException, java.io.IOException;
  public android.nfc.Tag getTag();
  public java.lang.String getType();
  public static final java.lang.String MIFARE_CLASSIC;
  public static final java.lang.String NFC_FORUM_TYPE_1;
  public static final java.lang.String NFC_FORUM_TYPE_2;
  public static final java.lang.String NFC_FORUM_TYPE_3;
  public static final java.lang.String NFC_FORUM_TYPE_4;
}
public final class android.nfc.tech.NdefFormatable
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.NdefFormatable get(android.nfc.Tag);
  public boolean isConnected();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public void format(android.nfc.NdefMessage)  throws android.nfc.FormatException, java.io.IOException;
  public void formatReadOnly(android.nfc.NdefMessage)  throws android.nfc.FormatException, java.io.IOException;
  public android.nfc.Tag getTag();
}
public final class android.nfc.tech.NfcA
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.NfcA get(android.nfc.Tag);
  public boolean isConnected();
  public int getMaxTransceiveLength();
  public int getTimeout();
  public short getSak();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public void setTimeout(int);
  public android.nfc.Tag getTag();
  public byte[] getAtqa();
  public byte[] transceive(byte[])  throws java.io.IOException;
}
public final class android.nfc.tech.NfcB
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.NfcB get(android.nfc.Tag);
  public boolean isConnected();
  public int getMaxTransceiveLength();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public android.nfc.Tag getTag();
  public byte[] getApplicationData();
  public byte[] getProtocolInfo();
  public byte[] transceive(byte[])  throws java.io.IOException;
}
public final class android.nfc.tech.NfcBarcode
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.NfcBarcode get(android.nfc.Tag);
  public boolean isConnected();
  public int getType();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public android.nfc.Tag getTag();
  public byte[] getBarcode();
  public static final int TYPE_KOVIO;
  public static final int TYPE_UNKNOWN;
}
public final class android.nfc.tech.NfcF
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.NfcF get(android.nfc.Tag);
  public boolean isConnected();
  public int getMaxTransceiveLength();
  public int getTimeout();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public void setTimeout(int);
  public android.nfc.Tag getTag();
  public byte[] getManufacturer();
  public byte[] getSystemCode();
  public byte[] transceive(byte[])  throws java.io.IOException;
}
public final class android.nfc.tech.NfcV
  extends android.nfc.tech.BasicTagTechnology
{
  public static android.nfc.tech.NfcV get(android.nfc.Tag);
  public boolean isConnected();
  public byte getDsfId();
  public byte getResponseFlags();
  public int getMaxTransceiveLength();
  public void close()  throws java.io.IOException;
  public void connect()  throws java.io.IOException;
  public android.nfc.Tag getTag();
  public byte[] transceive(byte[])  throws java.io.IOException;
}
public interface android.nfc.tech.TagTechnology
  extends java.io.Closeable
{
  public abstract boolean isConnected();
  public abstract void close()  throws java.io.IOException;
  public abstract void connect()  throws java.io.IOException;
  public abstract android.nfc.Tag getTag();
}
public class android.opengl.EGL14
  extends java.lang.Object
{
  public static native boolean eglBindAPI(int);
  public static native boolean eglBindTexImage(android.opengl.EGLDisplay, android.opengl.EGLSurface, int);
  public static native boolean eglChooseConfig(android.opengl.EGLDisplay, int[], int, android.opengl.EGLConfig[], int, int, int[], int);
  public static native boolean eglCopyBuffers(android.opengl.EGLDisplay, android.opengl.EGLSurface, int);
  public static native boolean eglDestroyContext(android.opengl.EGLDisplay, android.opengl.EGLContext);
  public static native boolean eglDestroySurface(android.opengl.EGLDisplay, android.opengl.EGLSurface);
  public static native boolean eglGetConfigAttrib(android.opengl.EGLDisplay, android.opengl.EGLConfig, int, int[], int);
  public static native boolean eglGetConfigs(android.opengl.EGLDisplay, android.opengl.EGLConfig[], int, int, int[], int);
  public static native boolean eglInitialize(android.opengl.EGLDisplay, int[], int, int[], int);
  public static native boolean eglMakeCurrent(android.opengl.EGLDisplay, android.opengl.EGLSurface, android.opengl.EGLSurface, android.opengl.EGLContext);
  public static native boolean eglQueryContext(android.opengl.EGLDisplay, android.opengl.EGLContext, int, int[], int);
  public static native boolean eglQuerySurface(android.opengl.EGLDisplay, android.opengl.EGLSurface, int, int[], int);
  public static native boolean eglReleaseTexImage(android.opengl.EGLDisplay, android.opengl.EGLSurface, int);
  public static native boolean eglReleaseThread();
  public static native boolean eglSurfaceAttrib(android.opengl.EGLDisplay, android.opengl.EGLSurface, int, int);
  public static native boolean eglSwapBuffers(android.opengl.EGLDisplay, android.opengl.EGLSurface);
  public static native boolean eglSwapInterval(android.opengl.EGLDisplay, int);
  public static native boolean eglTerminate(android.opengl.EGLDisplay);
  public static native boolean eglWaitClient();
  public static native boolean eglWaitGL();
  public static native boolean eglWaitNative(int);
  public static native int eglGetError();
  public static native int eglQueryAPI();
  public static android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLDisplay, android.opengl.EGLConfig, java.lang.Object, int[], int);
  public static native android.opengl.EGLContext eglCreateContext(android.opengl.EGLDisplay, android.opengl.EGLConfig, android.opengl.EGLContext, int[], int);
  public static native android.opengl.EGLContext eglGetCurrentContext();
  public static native android.opengl.EGLDisplay eglGetCurrentDisplay();
  public static native android.opengl.EGLDisplay eglGetDisplay(int);
  public static native android.opengl.EGLSurface eglCreatePbufferFromClientBuffer(android.opengl.EGLDisplay, int, int, android.opengl.EGLConfig, int[], int);
  public static native android.opengl.EGLSurface eglCreatePbufferSurface(android.opengl.EGLDisplay, android.opengl.EGLConfig, int[], int);
  public static native android.opengl.EGLSurface eglCreatePixmapSurface(android.opengl.EGLDisplay, android.opengl.EGLConfig, int, int[], int);
  public static native android.opengl.EGLSurface eglGetCurrentSurface(int);
  public static native java.lang.String eglQueryString(android.opengl.EGLDisplay, int);
  public void <init>();
  public static final int EGL_ALPHA_MASK_SIZE;
  public static final int EGL_ALPHA_SIZE;
  public static final int EGL_BACK_BUFFER;
  public static final int EGL_BAD_ACCESS;
  public static final int EGL_BAD_ALLOC;
  public static final int EGL_BAD_ATTRIBUTE;
  public static final int EGL_BAD_CONFIG;
  public static final int EGL_BAD_CONTEXT;
  public static final int EGL_BAD_CURRENT_SURFACE;
  public static final int EGL_BAD_DISPLAY;
  public static final int EGL_BAD_MATCH;
  public static final int EGL_BAD_NATIVE_PIXMAP;
  public static final int EGL_BAD_NATIVE_WINDOW;
  public static final int EGL_BAD_PARAMETER;
  public static final int EGL_BAD_SURFACE;
  public static final int EGL_BIND_TO_TEXTURE_RGB;
  public static final int EGL_BIND_TO_TEXTURE_RGBA;
  public static final int EGL_BLUE_SIZE;
  public static final int EGL_BUFFER_DESTROYED;
  public static final int EGL_BUFFER_PRESERVED;
  public static final int EGL_BUFFER_SIZE;
  public static final int EGL_CLIENT_APIS;
  public static final int EGL_COLOR_BUFFER_TYPE;
  public static final int EGL_CONFIG_CAVEAT;
  public static final int EGL_CONFIG_ID;
  public static final int EGL_CONFORMANT;
  public static final int EGL_CONTEXT_CLIENT_TYPE;
  public static final int EGL_CONTEXT_CLIENT_VERSION;
  public static final int EGL_CONTEXT_LOST;
  public static final int EGL_CORE_NATIVE_ENGINE;
  public static final int EGL_DEFAULT_DISPLAY;
  public static final int EGL_DEPTH_SIZE;
  public static final int EGL_DISPLAY_SCALING;
  public static final int EGL_DRAW;
  public static final int EGL_EXTENSIONS;
  public static final int EGL_FALSE;
  public static final int EGL_GREEN_SIZE;
  public static final int EGL_HEIGHT;
  public static final int EGL_HORIZONTAL_RESOLUTION;
  public static final int EGL_LARGEST_PBUFFER;
  public static final int EGL_LEVEL;
  public static final int EGL_LUMINANCE_BUFFER;
  public static final int EGL_LUMINANCE_SIZE;
  public static final int EGL_MATCH_NATIVE_PIXMAP;
  public static final int EGL_MAX_PBUFFER_HEIGHT;
  public static final int EGL_MAX_PBUFFER_PIXELS;
  public static final int EGL_MAX_PBUFFER_WIDTH;
  public static final int EGL_MAX_SWAP_INTERVAL;
  public static final int EGL_MIN_SWAP_INTERVAL;
  public static final int EGL_MIPMAP_LEVEL;
  public static final int EGL_MIPMAP_TEXTURE;
  public static final int EGL_MULTISAMPLE_RESOLVE;
  public static final int EGL_MULTISAMPLE_RESOLVE_BOX;
  public static final int EGL_MULTISAMPLE_RESOLVE_BOX_BIT;
  public static final int EGL_MULTISAMPLE_RESOLVE_DEFAULT;
  public static final int EGL_NATIVE_RENDERABLE;
  public static final int EGL_NATIVE_VISUAL_ID;
  public static final int EGL_NATIVE_VISUAL_TYPE;
  public static final int EGL_NONE;
  public static final int EGL_NON_CONFORMANT_CONFIG;
  public static final int EGL_NOT_INITIALIZED;
  public static final int EGL_NO_TEXTURE;
  public static final int EGL_OPENGL_API;
  public static final int EGL_OPENGL_BIT;
  public static final int EGL_OPENGL_ES2_BIT;
  public static final int EGL_OPENGL_ES_API;
  public static final int EGL_OPENGL_ES_BIT;
  public static final int EGL_OPENVG_API;
  public static final int EGL_OPENVG_BIT;
  public static final int EGL_OPENVG_IMAGE;
  public static final int EGL_PBUFFER_BIT;
  public static final int EGL_PIXEL_ASPECT_RATIO;
  public static final int EGL_PIXMAP_BIT;
  public static final int EGL_READ;
  public static final int EGL_RED_SIZE;
  public static final int EGL_RENDERABLE_TYPE;
  public static final int EGL_RENDER_BUFFER;
  public static final int EGL_RGB_BUFFER;
  public static final int EGL_SAMPLES;
  public static final int EGL_SAMPLE_BUFFERS;
  public static final int EGL_SINGLE_BUFFER;
  public static final int EGL_SLOW_CONFIG;
  public static final int EGL_STENCIL_SIZE;
  public static final int EGL_SUCCESS;
  public static final int EGL_SURFACE_TYPE;
  public static final int EGL_SWAP_BEHAVIOR;
  public static final int EGL_SWAP_BEHAVIOR_PRESERVED_BIT;
  public static final int EGL_TEXTURE_2D;
  public static final int EGL_TEXTURE_FORMAT;
  public static final int EGL_TEXTURE_RGB;
  public static final int EGL_TEXTURE_RGBA;
  public static final int EGL_TEXTURE_TARGET;
  public static final int EGL_TRANSPARENT_BLUE_VALUE;
  public static final int EGL_TRANSPARENT_GREEN_VALUE;
  public static final int EGL_TRANSPARENT_RED_VALUE;
  public static final int EGL_TRANSPARENT_RGB;
  public static final int EGL_TRANSPARENT_TYPE;
  public static final int EGL_TRUE;
  public static final int EGL_VENDOR;
  public static final int EGL_VERSION;
  public static final int EGL_VERTICAL_RESOLUTION;
  public static final int EGL_VG_ALPHA_FORMAT;
  public static final int EGL_VG_ALPHA_FORMAT_NONPRE;
  public static final int EGL_VG_ALPHA_FORMAT_PRE;
  public static final int EGL_VG_ALPHA_FORMAT_PRE_BIT;
  public static final int EGL_VG_COLORSPACE;
  public static final int EGL_VG_COLORSPACE_LINEAR;
  public static final int EGL_VG_COLORSPACE_LINEAR_BIT;
  public static final int EGL_VG_COLORSPACE_sRGB;
  public static final int EGL_WIDTH;
  public static final int EGL_WINDOW_BIT;
  public static android.opengl.EGLContext EGL_NO_CONTEXT;
  public static android.opengl.EGLDisplay EGL_NO_DISPLAY;
  public static android.opengl.EGLSurface EGL_NO_SURFACE;
}
public class android.opengl.EGLConfig
  extends android.opengl.EGLObjectHandle
{
  public boolean equals(java.lang.Object);
}
public class android.opengl.EGLContext
  extends android.opengl.EGLObjectHandle
{
  public boolean equals(java.lang.Object);
}
public class android.opengl.EGLDisplay
  extends android.opengl.EGLObjectHandle
{
  public boolean equals(java.lang.Object);
}
public class android.opengl.EGLExt
  extends java.lang.Object
{
  public static native boolean eglPresentationTimeANDROID(android.opengl.EGLDisplay, android.opengl.EGLSurface, long);
  public void <init>();
  public static final int EGL_CONTEXT_FLAGS_KHR;
  public static final int EGL_CONTEXT_MAJOR_VERSION_KHR;
  public static final int EGL_CONTEXT_MINOR_VERSION_KHR;
  public static final int EGL_OPENGL_ES3_BIT_KHR;
}
public abstract class android.opengl.EGLObjectHandle
  extends java.lang.Object
{
  public int getHandle();
  public int hashCode();
  public long getNativeHandle();
  protected void <init>(int);
  protected void <init>(long);
}
public class android.opengl.EGLSurface
  extends android.opengl.EGLObjectHandle
{
  public boolean equals(java.lang.Object);
}
public class android.opengl.ETC1
  extends java.lang.Object
{
  public static native boolean isValid(java.nio.Buffer);
  public static native int getEncodedDataSize(int, int);
  public static native int getHeight(java.nio.Buffer);
  public static native int getWidth(java.nio.Buffer);
  public static native void decodeBlock(java.nio.Buffer, java.nio.Buffer);
  public static native void decodeImage(java.nio.Buffer, java.nio.Buffer, int, int, int, int);
  public static native void encodeBlock(java.nio.Buffer, int, java.nio.Buffer);
  public static native void encodeImage(java.nio.Buffer, int, int, int, int, java.nio.Buffer);
  public static native void formatHeader(java.nio.Buffer, int, int);
  public void <init>();
  public static final int DECODED_BLOCK_SIZE;
  public static final int ENCODED_BLOCK_SIZE;
  public static final int ETC1_RGB8_OES;
  public static final int ETC_PKM_HEADER_SIZE;
}
public class android.opengl.ETC1Util
  extends java.lang.Object
{
  public static boolean isETC1Supported();
  public static void loadTexture(int, int, int, int, int, android.opengl.ETC1Util$ETC1Texture);
  public static void loadTexture(int, int, int, int, int, java.io.InputStream)  throws java.io.IOException;
  public static void writeTexture(android.opengl.ETC1Util$ETC1Texture, java.io.OutputStream)  throws java.io.IOException;
  public static android.opengl.ETC1Util$ETC1Texture compressTexture(java.nio.Buffer, int, int, int, int);
  public static android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream)  throws java.io.IOException;
  public void <init>();
}
public class android.opengl.ETC1Util$ETC1Texture
  extends java.lang.Object
{
  public void <init>(int, int, java.nio.ByteBuffer);
  public int getHeight();
  public int getWidth();
  public java.nio.ByteBuffer getData();
}
public class android.opengl.GLDebugHelper
  extends java.lang.Object
{
  public static javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL, int, java.io.Writer);
  public static javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL, int, java.io.Writer);
  public void <init>();
  public static final int CONFIG_CHECK_GL_ERROR;
  public static final int CONFIG_CHECK_THREAD;
  public static final int CONFIG_LOG_ARGUMENT_NAMES;
  public static final int ERROR_WRONG_THREAD;
}
public class android.opengl.GLES10
  extends java.lang.Object
{
  public static native int glGetError();
  public static native void glActiveTexture(int);
  public static native void glAlphaFunc(int, float);
  public static native void glAlphaFuncx(int, int);
  public static native void glBindTexture(int, int);
  public static native void glBlendFunc(int, int);
  public static native void glClear(int);
  public static native void glClearColor(float, float, float, float);
  public static native void glClearColorx(int, int, int, int);
  public static native void glClearDepthf(float);
  public static native void glClearDepthx(int);
  public static native void glClearStencil(int);
  public static native void glClientActiveTexture(int);
  public static native void glColor4f(float, float, float, float);
  public static native void glColor4x(int, int, int, int);
  public static native void glColorMask(boolean, boolean, boolean, boolean);
  public static native void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public static native void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public static native void glCullFace(int);
  public static native void glDeleteTextures(int, int[], int);
  public static native void glDeleteTextures(int, java.nio.IntBuffer);
  public static native void glDepthFunc(int);
  public static native void glDepthMask(boolean);
  public static native void glDepthRangef(float, float);
  public static native void glDepthRangex(int, int);
  public static native void glDisable(int);
  public static native void glDisableClientState(int);
  public static native void glDrawArrays(int, int, int);
  public static native void glDrawElements(int, int, int, java.nio.Buffer);
  public static native void glEnable(int);
  public static native void glEnableClientState(int);
  public static native void glFinish();
  public static native void glFlush();
  public static native void glFogf(int, float);
  public static native void glFogfv(int, float[], int);
  public static native void glFogfv(int, java.nio.FloatBuffer);
  public static native void glFogx(int, int);
  public static native void glFogxv(int, int[], int);
  public static native void glFogxv(int, java.nio.IntBuffer);
  public static native void glFrontFace(int);
  public static native void glFrustumf(float, float, float, float, float, float);
  public static native void glFrustumx(int, int, int, int, int, int);
  public static native void glGenTextures(int, int[], int);
  public static native void glGenTextures(int, java.nio.IntBuffer);
  public static native void glGetIntegerv(int, int[], int);
  public static native void glGetIntegerv(int, java.nio.IntBuffer);
  public static native void glHint(int, int);
  public static native void glLightModelf(int, float);
  public static native void glLightModelfv(int, float[], int);
  public static native void glLightModelfv(int, java.nio.FloatBuffer);
  public static native void glLightModelx(int, int);
  public static native void glLightModelxv(int, int[], int);
  public static native void glLightModelxv(int, java.nio.IntBuffer);
  public static native void glLightf(int, int, float);
  public static native void glLightfv(int, int, float[], int);
  public static native void glLightfv(int, int, java.nio.FloatBuffer);
  public static native void glLightx(int, int, int);
  public static native void glLightxv(int, int, int[], int);
  public static native void glLightxv(int, int, java.nio.IntBuffer);
  public static native void glLineWidth(float);
  public static native void glLineWidthx(int);
  public static native void glLoadIdentity();
  public static native void glLoadMatrixf(float[], int);
  public static native void glLoadMatrixf(java.nio.FloatBuffer);
  public static native void glLoadMatrixx(int[], int);
  public static native void glLoadMatrixx(java.nio.IntBuffer);
  public static native void glLogicOp(int);
  public static native void glMaterialf(int, int, float);
  public static native void glMaterialfv(int, int, float[], int);
  public static native void glMaterialfv(int, int, java.nio.FloatBuffer);
  public static native void glMaterialx(int, int, int);
  public static native void glMaterialxv(int, int, int[], int);
  public static native void glMaterialxv(int, int, java.nio.IntBuffer);
  public static native void glMatrixMode(int);
  public static native void glMultMatrixf(float[], int);
  public static native void glMultMatrixf(java.nio.FloatBuffer);
  public static native void glMultMatrixx(int[], int);
  public static native void glMultMatrixx(java.nio.IntBuffer);
  public static native void glMultiTexCoord4f(int, float, float, float, float);
  public static native void glMultiTexCoord4x(int, int, int, int, int);
  public static native void glNormal3f(float, float, float);
  public static native void glNormal3x(int, int, int);
  public static native void glOrthof(float, float, float, float, float, float);
  public static native void glOrthox(int, int, int, int, int, int);
  public static native void glPixelStorei(int, int);
  public static native void glPointSize(float);
  public static native void glPointSizex(int);
  public static native void glPolygonOffset(float, float);
  public static native void glPolygonOffsetx(int, int);
  public static native void glPopMatrix();
  public static native void glPushMatrix();
  public static native void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public static native void glRotatef(float, float, float, float);
  public static native void glRotatex(int, int, int, int);
  public static native void glSampleCoverage(float, boolean);
  public static native void glSampleCoveragex(int, boolean);
  public static native void glScalef(float, float, float);
  public static native void glScalex(int, int, int);
  public static native void glScissor(int, int, int, int);
  public static native void glShadeModel(int);
  public static native void glStencilFunc(int, int, int);
  public static native void glStencilMask(int);
  public static native void glStencilOp(int, int, int);
  public static native void glTexEnvf(int, int, float);
  public static native void glTexEnvfv(int, int, float[], int);
  public static native void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public static native void glTexEnvx(int, int, int);
  public static native void glTexEnvxv(int, int, int[], int);
  public static native void glTexEnvxv(int, int, java.nio.IntBuffer);
  public static native void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTexParameterf(int, int, float);
  public static native void glTexParameterx(int, int, int);
  public static native void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTranslatef(float, float, float);
  public static native void glTranslatex(int, int, int);
  public static native void glViewport(int, int, int, int);
  public static void glColorPointer(int, int, int, java.nio.Buffer);
  public static void glNormalPointer(int, int, java.nio.Buffer);
  public static void glTexCoordPointer(int, int, int, java.nio.Buffer);
  public static void glVertexPointer(int, int, int, java.nio.Buffer);
  public static native java.lang.String glGetString(int);
  public void <init>();
  public static final int GL_ADD;
  public static final int GL_ALIASED_LINE_WIDTH_RANGE;
  public static final int GL_ALIASED_POINT_SIZE_RANGE;
  public static final int GL_ALPHA;
  public static final int GL_ALPHA_BITS;
  public static final int GL_ALPHA_TEST;
  public static final int GL_ALWAYS;
  public static final int GL_AMBIENT;
  public static final int GL_AMBIENT_AND_DIFFUSE;
  public static final int GL_AND;
  public static final int GL_AND_INVERTED;
  public static final int GL_AND_REVERSE;
  public static final int GL_BACK;
  public static final int GL_BLEND;
  public static final int GL_BLUE_BITS;
  public static final int GL_BYTE;
  public static final int GL_CCW;
  public static final int GL_CLAMP_TO_EDGE;
  public static final int GL_CLEAR;
  public static final int GL_COLOR_ARRAY;
  public static final int GL_COLOR_BUFFER_BIT;
  public static final int GL_COLOR_LOGIC_OP;
  public static final int GL_COLOR_MATERIAL;
  public static final int GL_COMPRESSED_TEXTURE_FORMATS;
  public static final int GL_CONSTANT_ATTENUATION;
  public static final int GL_COPY;
  public static final int GL_COPY_INVERTED;
  public static final int GL_CULL_FACE;
  public static final int GL_CW;
  public static final int GL_DECAL;
  public static final int GL_DECR;
  public static final int GL_DEPTH_BITS;
  public static final int GL_DEPTH_BUFFER_BIT;
  public static final int GL_DEPTH_TEST;
  public static final int GL_DIFFUSE;
  public static final int GL_DITHER;
  public static final int GL_DONT_CARE;
  public static final int GL_DST_ALPHA;
  public static final int GL_DST_COLOR;
  public static final int GL_EMISSION;
  public static final int GL_EQUAL;
  public static final int GL_EQUIV;
  public static final int GL_EXP2;
  public static final int GL_EXP;
  public static final int GL_EXTENSIONS;
  public static final int GL_FALSE;
  public static final int GL_FASTEST;
  public static final int GL_FIXED;
  public static final int GL_FLAT;
  public static final int GL_FLOAT;
  public static final int GL_FOG;
  public static final int GL_FOG_COLOR;
  public static final int GL_FOG_DENSITY;
  public static final int GL_FOG_END;
  public static final int GL_FOG_HINT;
  public static final int GL_FOG_MODE;
  public static final int GL_FOG_START;
  public static final int GL_FRONT;
  public static final int GL_FRONT_AND_BACK;
  public static final int GL_GEQUAL;
  public static final int GL_GREATER;
  public static final int GL_GREEN_BITS;
  public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES;
  public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES;
  public static final int GL_INCR;
  public static final int GL_INVALID_ENUM;
  public static final int GL_INVALID_OPERATION;
  public static final int GL_INVALID_VALUE;
  public static final int GL_INVERT;
  public static final int GL_KEEP;
  public static final int GL_LEQUAL;
  public static final int GL_LESS;
  public static final int GL_LIGHT0;
  public static final int GL_LIGHT1;
  public static final int GL_LIGHT2;
  public static final int GL_LIGHT3;
  public static final int GL_LIGHT4;
  public static final int GL_LIGHT5;
  public static final int GL_LIGHT6;
  public static final int GL_LIGHT7;
  public static final int GL_LIGHTING;
  public static final int GL_LIGHT_MODEL_AMBIENT;
  public static final int GL_LIGHT_MODEL_TWO_SIDE;
  public static final int GL_LINEAR;
  public static final int GL_LINEAR_ATTENUATION;
  public static final int GL_LINEAR_MIPMAP_LINEAR;
  public static final int GL_LINEAR_MIPMAP_NEAREST;
  public static final int GL_LINES;
  public static final int GL_LINE_LOOP;
  public static final int GL_LINE_SMOOTH;
  public static final int GL_LINE_SMOOTH_HINT;
  public static final int GL_LINE_STRIP;
  public static final int GL_LUMINANCE;
  public static final int GL_LUMINANCE_ALPHA;
  public static final int GL_MAX_ELEMENTS_INDICES;
  public static final int GL_MAX_ELEMENTS_VERTICES;
  public static final int GL_MAX_LIGHTS;
  public static final int GL_MAX_MODELVIEW_STACK_DEPTH;
  public static final int GL_MAX_PROJECTION_STACK_DEPTH;
  public static final int GL_MAX_TEXTURE_SIZE;
  public static final int GL_MAX_TEXTURE_STACK_DEPTH;
  public static final int GL_MAX_TEXTURE_UNITS;
  public static final int GL_MAX_VIEWPORT_DIMS;
  public static final int GL_MODELVIEW;
  public static final int GL_MODULATE;
  public static final int GL_MULTISAMPLE;
  public static final int GL_NAND;
  public static final int GL_NEAREST;
  public static final int GL_NEAREST_MIPMAP_LINEAR;
  public static final int GL_NEAREST_MIPMAP_NEAREST;
  public static final int GL_NEVER;
  public static final int GL_NICEST;
  public static final int GL_NOOP;
  public static final int GL_NOR;
  public static final int GL_NORMALIZE;
  public static final int GL_NORMAL_ARRAY;
  public static final int GL_NOTEQUAL;
  public static final int GL_NO_ERROR;
  public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS;
  public static final int GL_ONE;
  public static final int GL_ONE_MINUS_DST_ALPHA;
  public static final int GL_ONE_MINUS_DST_COLOR;
  public static final int GL_ONE_MINUS_SRC_ALPHA;
  public static final int GL_ONE_MINUS_SRC_COLOR;
  public static final int GL_OR;
  public static final int GL_OR_INVERTED;
  public static final int GL_OR_REVERSE;
  public static final int GL_OUT_OF_MEMORY;
  public static final int GL_PACK_ALIGNMENT;
  public static final int GL_PALETTE4_R5_G6_B5_OES;
  public static final int GL_PALETTE4_RGB5_A1_OES;
  public static final int GL_PALETTE4_RGB8_OES;
  public static final int GL_PALETTE4_RGBA4_OES;
  public static final int GL_PALETTE4_RGBA8_OES;
  public static final int GL_PALETTE8_R5_G6_B5_OES;
  public static final int GL_PALETTE8_RGB5_A1_OES;
  public static final int GL_PALETTE8_RGB8_OES;
  public static final int GL_PALETTE8_RGBA4_OES;
  public static final int GL_PALETTE8_RGBA8_OES;
  public static final int GL_PERSPECTIVE_CORRECTION_HINT;
  public static final int GL_POINTS;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE;
  public static final int GL_POINT_SIZE;
  public static final int GL_POINT_SMOOTH;
  public static final int GL_POINT_SMOOTH_HINT;
  public static final int GL_POLYGON_OFFSET_FILL;
  public static final int GL_POLYGON_SMOOTH_HINT;
  public static final int GL_POSITION;
  public static final int GL_PROJECTION;
  public static final int GL_QUADRATIC_ATTENUATION;
  public static final int GL_RED_BITS;
  public static final int GL_RENDERER;
  public static final int GL_REPEAT;
  public static final int GL_REPLACE;
  public static final int GL_RESCALE_NORMAL;
  public static final int GL_RGB;
  public static final int GL_RGBA;
  public static final int GL_SAMPLE_ALPHA_TO_COVERAGE;
  public static final int GL_SAMPLE_ALPHA_TO_ONE;
  public static final int GL_SAMPLE_COVERAGE;
  public static final int GL_SCISSOR_TEST;
  public static final int GL_SET;
  public static final int GL_SHININESS;
  public static final int GL_SHORT;
  public static final int GL_SMOOTH;
  public static final int GL_SMOOTH_LINE_WIDTH_RANGE;
  public static final int GL_SMOOTH_POINT_SIZE_RANGE;
  public static final int GL_SPECULAR;
  public static final int GL_SPOT_CUTOFF;
  public static final int GL_SPOT_DIRECTION;
  public static final int GL_SPOT_EXPONENT;
  public static final int GL_SRC_ALPHA;
  public static final int GL_SRC_ALPHA_SATURATE;
  public static final int GL_SRC_COLOR;
  public static final int GL_STACK_OVERFLOW;
  public static final int GL_STACK_UNDERFLOW;
  public static final int GL_STENCIL_BITS;
  public static final int GL_STENCIL_BUFFER_BIT;
  public static final int GL_STENCIL_TEST;
  public static final int GL_SUBPIXEL_BITS;
  public static final int GL_TEXTURE0;
  public static final int GL_TEXTURE10;
  public static final int GL_TEXTURE11;
  public static final int GL_TEXTURE12;
  public static final int GL_TEXTURE13;
  public static final int GL_TEXTURE14;
  public static final int GL_TEXTURE15;
  public static final int GL_TEXTURE16;
  public static final int GL_TEXTURE17;
  public static final int GL_TEXTURE18;
  public static final int GL_TEXTURE19;
  public static final int GL_TEXTURE1;
  public static final int GL_TEXTURE20;
  public static final int GL_TEXTURE21;
  public static final int GL_TEXTURE22;
  public static final int GL_TEXTURE23;
  public static final int GL_TEXTURE24;
  public static final int GL_TEXTURE25;
  public static final int GL_TEXTURE26;
  public static final int GL_TEXTURE27;
  public static final int GL_TEXTURE28;
  public static final int GL_TEXTURE29;
  public static final int GL_TEXTURE2;
  public static final int GL_TEXTURE30;
  public static final int GL_TEXTURE31;
  public static final int GL_TEXTURE3;
  public static final int GL_TEXTURE4;
  public static final int GL_TEXTURE5;
  public static final int GL_TEXTURE6;
  public static final int GL_TEXTURE7;
  public static final int GL_TEXTURE8;
  public static final int GL_TEXTURE9;
  public static final int GL_TEXTURE;
  public static final int GL_TEXTURE_2D;
  public static final int GL_TEXTURE_COORD_ARRAY;
  public static final int GL_TEXTURE_ENV;
  public static final int GL_TEXTURE_ENV_COLOR;
  public static final int GL_TEXTURE_ENV_MODE;
  public static final int GL_TEXTURE_MAG_FILTER;
  public static final int GL_TEXTURE_MIN_FILTER;
  public static final int GL_TEXTURE_WRAP_S;
  public static final int GL_TEXTURE_WRAP_T;
  public static final int GL_TRIANGLES;
  public static final int GL_TRIANGLE_FAN;
  public static final int GL_TRIANGLE_STRIP;
  public static final int GL_TRUE;
  public static final int GL_UNPACK_ALIGNMENT;
  public static final int GL_UNSIGNED_BYTE;
  public static final int GL_UNSIGNED_SHORT;
  public static final int GL_UNSIGNED_SHORT_4_4_4_4;
  public static final int GL_UNSIGNED_SHORT_5_5_5_1;
  public static final int GL_UNSIGNED_SHORT_5_6_5;
  public static final int GL_VENDOR;
  public static final int GL_VERSION;
  public static final int GL_VERTEX_ARRAY;
  public static final int GL_XOR;
  public static final int GL_ZERO;
}
public class android.opengl.GLES10Ext
  extends java.lang.Object
{
  public static native int glQueryMatrixxOES(int[], int, int[], int);
  public static native int glQueryMatrixxOES(java.nio.IntBuffer, java.nio.IntBuffer);
  public void <init>();
}
public class android.opengl.GLES11
  extends android.opengl.GLES10
{
  public static native boolean glIsBuffer(int);
  public static native boolean glIsEnabled(int);
  public static native boolean glIsTexture(int);
  public static native void glBindBuffer(int, int);
  public static native void glBufferData(int, int, java.nio.Buffer, int);
  public static native void glBufferSubData(int, int, int, java.nio.Buffer);
  public static native void glClipPlanef(int, float[], int);
  public static native void glClipPlanef(int, java.nio.FloatBuffer);
  public static native void glClipPlanex(int, int[], int);
  public static native void glClipPlanex(int, java.nio.IntBuffer);
  public static native void glColor4ub(byte, byte, byte, byte);
  public static native void glColorPointer(int, int, int, int);
  public static native void glDeleteBuffers(int, int[], int);
  public static native void glDeleteBuffers(int, java.nio.IntBuffer);
  public static native void glDrawElements(int, int, int, int);
  public static native void glGenBuffers(int, int[], int);
  public static native void glGenBuffers(int, java.nio.IntBuffer);
  public static native void glGetBooleanv(int, boolean[], int);
  public static native void glGetBooleanv(int, java.nio.IntBuffer);
  public static native void glGetBufferParameteriv(int, int, int[], int);
  public static native void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetClipPlanef(int, float[], int);
  public static native void glGetClipPlanef(int, java.nio.FloatBuffer);
  public static native void glGetClipPlanex(int, int[], int);
  public static native void glGetClipPlanex(int, java.nio.IntBuffer);
  public static native void glGetFixedv(int, int[], int);
  public static native void glGetFixedv(int, java.nio.IntBuffer);
  public static native void glGetFloatv(int, float[], int);
  public static native void glGetFloatv(int, java.nio.FloatBuffer);
  public static native void glGetLightfv(int, int, float[], int);
  public static native void glGetLightfv(int, int, java.nio.FloatBuffer);
  public static native void glGetLightxv(int, int, int[], int);
  public static native void glGetLightxv(int, int, java.nio.IntBuffer);
  public static native void glGetMaterialfv(int, int, float[], int);
  public static native void glGetMaterialfv(int, int, java.nio.FloatBuffer);
  public static native void glGetMaterialxv(int, int, int[], int);
  public static native void glGetMaterialxv(int, int, java.nio.IntBuffer);
  public static native void glGetTexEnvfv(int, int, float[], int);
  public static native void glGetTexEnvfv(int, int, java.nio.FloatBuffer);
  public static native void glGetTexEnviv(int, int, int[], int);
  public static native void glGetTexEnviv(int, int, java.nio.IntBuffer);
  public static native void glGetTexEnvxv(int, int, int[], int);
  public static native void glGetTexEnvxv(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterfv(int, int, float[], int);
  public static native void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glGetTexParameteriv(int, int, int[], int);
  public static native void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterxv(int, int, int[], int);
  public static native void glGetTexParameterxv(int, int, java.nio.IntBuffer);
  public static native void glNormalPointer(int, int, int);
  public static native void glPointParameterf(int, float);
  public static native void glPointParameterfv(int, float[], int);
  public static native void glPointParameterfv(int, java.nio.FloatBuffer);
  public static native void glPointParameterx(int, int);
  public static native void glPointParameterxv(int, int[], int);
  public static native void glPointParameterxv(int, java.nio.IntBuffer);
  public static native void glTexCoordPointer(int, int, int, int);
  public static native void glTexEnvi(int, int, int);
  public static native void glTexEnviv(int, int, int[], int);
  public static native void glTexEnviv(int, int, java.nio.IntBuffer);
  public static native void glTexParameterfv(int, int, float[], int);
  public static native void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glTexParameteri(int, int, int);
  public static native void glTexParameteriv(int, int, int[], int);
  public static native void glTexParameteriv(int, int, java.nio.IntBuffer);
  public static native void glTexParameterxv(int, int, int[], int);
  public static native void glTexParameterxv(int, int, java.nio.IntBuffer);
  public static native void glVertexPointer(int, int, int, int);
  public static void glPointSizePointerOES(int, int, java.nio.Buffer);
  public void <init>();
  public static final int GL_ACTIVE_TEXTURE;
  public static final int GL_ADD_SIGNED;
  public static final int GL_ALPHA_SCALE;
  public static final int GL_ALPHA_TEST_FUNC;
  public static final int GL_ALPHA_TEST_REF;
  public static final int GL_ARRAY_BUFFER;
  public static final int GL_ARRAY_BUFFER_BINDING;
  public static final int GL_BLEND_DST;
  public static final int GL_BLEND_SRC;
  public static final int GL_BUFFER_ACCESS;
  public static final int GL_BUFFER_SIZE;
  public static final int GL_BUFFER_USAGE;
  public static final int GL_CLIENT_ACTIVE_TEXTURE;
  public static final int GL_CLIP_PLANE0;
  public static final int GL_CLIP_PLANE1;
  public static final int GL_CLIP_PLANE2;
  public static final int GL_CLIP_PLANE3;
  public static final int GL_CLIP_PLANE4;
  public static final int GL_CLIP_PLANE5;
  public static final int GL_COLOR_ARRAY_BUFFER_BINDING;
  public static final int GL_COLOR_ARRAY_POINTER;
  public static final int GL_COLOR_ARRAY_SIZE;
  public static final int GL_COLOR_ARRAY_STRIDE;
  public static final int GL_COLOR_ARRAY_TYPE;
  public static final int GL_COLOR_CLEAR_VALUE;
  public static final int GL_COLOR_WRITEMASK;
  public static final int GL_COMBINE;
  public static final int GL_COMBINE_ALPHA;
  public static final int GL_COMBINE_RGB;
  public static final int GL_CONSTANT;
  public static final int GL_COORD_REPLACE_OES;
  public static final int GL_CULL_FACE_MODE;
  public static final int GL_CURRENT_COLOR;
  public static final int GL_CURRENT_NORMAL;
  public static final int GL_CURRENT_TEXTURE_COORDS;
  public static final int GL_DEPTH_CLEAR_VALUE;
  public static final int GL_DEPTH_FUNC;
  public static final int GL_DEPTH_RANGE;
  public static final int GL_DEPTH_WRITEMASK;
  public static final int GL_DOT3_RGB;
  public static final int GL_DOT3_RGBA;
  public static final int GL_DYNAMIC_DRAW;
  public static final int GL_ELEMENT_ARRAY_BUFFER;
  public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING;
  public static final int GL_FRONT_FACE;
  public static final int GL_GENERATE_MIPMAP;
  public static final int GL_GENERATE_MIPMAP_HINT;
  public static final int GL_INTERPOLATE;
  public static final int GL_LINE_WIDTH;
  public static final int GL_LOGIC_OP_MODE;
  public static final int GL_MATRIX_MODE;
  public static final int GL_MAX_CLIP_PLANES;
  public static final int GL_MODELVIEW_MATRIX;
  public static final int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_MODELVIEW_STACK_DEPTH;
  public static final int GL_NORMAL_ARRAY_BUFFER_BINDING;
  public static final int GL_NORMAL_ARRAY_POINTER;
  public static final int GL_NORMAL_ARRAY_STRIDE;
  public static final int GL_NORMAL_ARRAY_TYPE;
  public static final int GL_OPERAND0_ALPHA;
  public static final int GL_OPERAND0_RGB;
  public static final int GL_OPERAND1_ALPHA;
  public static final int GL_OPERAND1_RGB;
  public static final int GL_OPERAND2_ALPHA;
  public static final int GL_OPERAND2_RGB;
  public static final int GL_POINT_DISTANCE_ATTENUATION;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE;
  public static final int GL_POINT_SIZE;
  public static final int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES;
  public static final int GL_POINT_SIZE_ARRAY_OES;
  public static final int GL_POINT_SIZE_ARRAY_POINTER_OES;
  public static final int GL_POINT_SIZE_ARRAY_STRIDE_OES;
  public static final int GL_POINT_SIZE_ARRAY_TYPE_OES;
  public static final int GL_POINT_SIZE_MAX;
  public static final int GL_POINT_SIZE_MIN;
  public static final int GL_POINT_SPRITE_OES;
  public static final int GL_POLYGON_OFFSET_FACTOR;
  public static final int GL_POLYGON_OFFSET_UNITS;
  public static final int GL_PREVIOUS;
  public static final int GL_PRIMARY_COLOR;
  public static final int GL_PROJECTION_MATRIX;
  public static final int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_PROJECTION_STACK_DEPTH;
  public static final int GL_RGB_SCALE;
  public static final int GL_SAMPLES;
  public static final int GL_SAMPLE_BUFFERS;
  public static final int GL_SAMPLE_COVERAGE_INVERT;
  public static final int GL_SAMPLE_COVERAGE_VALUE;
  public static final int GL_SCISSOR_BOX;
  public static final int GL_SHADE_MODEL;
  public static final int GL_SRC0_ALPHA;
  public static final int GL_SRC0_RGB;
  public static final int GL_SRC1_ALPHA;
  public static final int GL_SRC1_RGB;
  public static final int GL_SRC2_ALPHA;
  public static final int GL_SRC2_RGB;
  public static final int GL_STATIC_DRAW;
  public static final int GL_STENCIL_CLEAR_VALUE;
  public static final int GL_STENCIL_FAIL;
  public static final int GL_STENCIL_FUNC;
  public static final int GL_STENCIL_PASS_DEPTH_FAIL;
  public static final int GL_STENCIL_PASS_DEPTH_PASS;
  public static final int GL_STENCIL_REF;
  public static final int GL_STENCIL_VALUE_MASK;
  public static final int GL_STENCIL_WRITEMASK;
  public static final int GL_SUBTRACT;
  public static final int GL_TEXTURE_BINDING_2D;
  public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING;
  public static final int GL_TEXTURE_COORD_ARRAY_POINTER;
  public static final int GL_TEXTURE_COORD_ARRAY_SIZE;
  public static final int GL_TEXTURE_COORD_ARRAY_STRIDE;
  public static final int GL_TEXTURE_COORD_ARRAY_TYPE;
  public static final int GL_TEXTURE_MATRIX;
  public static final int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_TEXTURE_STACK_DEPTH;
  public static final int GL_VERTEX_ARRAY_BUFFER_BINDING;
  public static final int GL_VERTEX_ARRAY_POINTER;
  public static final int GL_VERTEX_ARRAY_SIZE;
  public static final int GL_VERTEX_ARRAY_STRIDE;
  public static final int GL_VERTEX_ARRAY_TYPE;
  public static final int GL_VIEWPORT;
  public static final int GL_WRITE_ONLY;
}
public class android.opengl.GLES11Ext
  extends java.lang.Object
{
  public static native boolean glIsFramebufferOES(int);
  public static native boolean glIsRenderbufferOES(int);
  public static native int glCheckFramebufferStatusOES(int);
  public static native void glAlphaFuncxOES(int, int);
  public static native void glBindFramebufferOES(int, int);
  public static native void glBindRenderbufferOES(int, int);
  public static native void glBlendEquationOES(int);
  public static native void glBlendEquationSeparateOES(int, int);
  public static native void glBlendFuncSeparateOES(int, int, int, int);
  public static native void glClearColorxOES(int, int, int, int);
  public static native void glClearDepthfOES(float);
  public static native void glClearDepthxOES(int);
  public static native void glClipPlanefOES(int, float[], int);
  public static native void glClipPlanefOES(int, java.nio.FloatBuffer);
  public static native void glClipPlanexOES(int, int[], int);
  public static native void glClipPlanexOES(int, java.nio.IntBuffer);
  public static native void glColor4xOES(int, int, int, int);
  public static native void glCurrentPaletteMatrixOES(int);
  public static native void glDeleteFramebuffersOES(int, int[], int);
  public static native void glDeleteFramebuffersOES(int, java.nio.IntBuffer);
  public static native void glDeleteRenderbuffersOES(int, int[], int);
  public static native void glDeleteRenderbuffersOES(int, java.nio.IntBuffer);
  public static native void glDepthRangefOES(float, float);
  public static native void glDepthRangexOES(int, int);
  public static native void glDrawTexfOES(float, float, float, float, float);
  public static native void glDrawTexfvOES(float[], int);
  public static native void glDrawTexfvOES(java.nio.FloatBuffer);
  public static native void glDrawTexiOES(int, int, int, int, int);
  public static native void glDrawTexivOES(int[], int);
  public static native void glDrawTexivOES(java.nio.IntBuffer);
  public static native void glDrawTexsOES(short, short, short, short, short);
  public static native void glDrawTexsvOES(java.nio.ShortBuffer);
  public static native void glDrawTexsvOES(short[], int);
  public static native void glDrawTexxOES(int, int, int, int, int);
  public static native void glDrawTexxvOES(int[], int);
  public static native void glDrawTexxvOES(java.nio.IntBuffer);
  public static native void glEGLImageTargetRenderbufferStorageOES(int, java.nio.Buffer);
  public static native void glEGLImageTargetTexture2DOES(int, java.nio.Buffer);
  public static native void glFogxOES(int, int);
  public static native void glFogxvOES(int, int[], int);
  public static native void glFogxvOES(int, java.nio.IntBuffer);
  public static native void glFramebufferRenderbufferOES(int, int, int, int);
  public static native void glFramebufferTexture2DOES(int, int, int, int, int);
  public static native void glFrustumfOES(float, float, float, float, float, float);
  public static native void glFrustumxOES(int, int, int, int, int, int);
  public static native void glGenFramebuffersOES(int, int[], int);
  public static native void glGenFramebuffersOES(int, java.nio.IntBuffer);
  public static native void glGenRenderbuffersOES(int, int[], int);
  public static native void glGenRenderbuffersOES(int, java.nio.IntBuffer);
  public static native void glGenerateMipmapOES(int);
  public static native void glGetClipPlanefOES(int, float[], int);
  public static native void glGetClipPlanefOES(int, java.nio.FloatBuffer);
  public static native void glGetClipPlanexOES(int, int[], int);
  public static native void glGetClipPlanexOES(int, java.nio.IntBuffer);
  public static native void glGetFixedvOES(int, int[], int);
  public static native void glGetFixedvOES(int, java.nio.IntBuffer);
  public static native void glGetFramebufferAttachmentParameterivOES(int, int, int, int[], int);
  public static native void glGetFramebufferAttachmentParameterivOES(int, int, int, java.nio.IntBuffer);
  public static native void glGetLightxvOES(int, int, int[], int);
  public static native void glGetLightxvOES(int, int, java.nio.IntBuffer);
  public static native void glGetMaterialxvOES(int, int, int[], int);
  public static native void glGetMaterialxvOES(int, int, java.nio.IntBuffer);
  public static native void glGetRenderbufferParameterivOES(int, int, int[], int);
  public static native void glGetRenderbufferParameterivOES(int, int, java.nio.IntBuffer);
  public static native void glGetTexEnvxvOES(int, int, int[], int);
  public static native void glGetTexEnvxvOES(int, int, java.nio.IntBuffer);
  public static native void glGetTexGenfvOES(int, int, float[], int);
  public static native void glGetTexGenfvOES(int, int, java.nio.FloatBuffer);
  public static native void glGetTexGenivOES(int, int, int[], int);
  public static native void glGetTexGenivOES(int, int, java.nio.IntBuffer);
  public static native void glGetTexGenxvOES(int, int, int[], int);
  public static native void glGetTexGenxvOES(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterxvOES(int, int, int[], int);
  public static native void glGetTexParameterxvOES(int, int, java.nio.IntBuffer);
  public static native void glLightModelxOES(int, int);
  public static native void glLightModelxvOES(int, int[], int);
  public static native void glLightModelxvOES(int, java.nio.IntBuffer);
  public static native void glLightxOES(int, int, int);
  public static native void glLightxvOES(int, int, int[], int);
  public static native void glLightxvOES(int, int, java.nio.IntBuffer);
  public static native void glLineWidthxOES(int);
  public static native void glLoadMatrixxOES(int[], int);
  public static native void glLoadMatrixxOES(java.nio.IntBuffer);
  public static native void glLoadPaletteFromModelViewMatrixOES();
  public static native void glMaterialxOES(int, int, int);
  public static native void glMaterialxvOES(int, int, int[], int);
  public static native void glMaterialxvOES(int, int, java.nio.IntBuffer);
  public static native void glMultMatrixxOES(int[], int);
  public static native void glMultMatrixxOES(java.nio.IntBuffer);
  public static native void glMultiTexCoord4xOES(int, int, int, int, int);
  public static native void glNormal3xOES(int, int, int);
  public static native void glOrthofOES(float, float, float, float, float, float);
  public static native void glOrthoxOES(int, int, int, int, int, int);
  public static native void glPointParameterxOES(int, int);
  public static native void glPointParameterxvOES(int, int[], int);
  public static native void glPointParameterxvOES(int, java.nio.IntBuffer);
  public static native void glPointSizexOES(int);
  public static native void glPolygonOffsetxOES(int, int);
  public static native void glRenderbufferStorageOES(int, int, int, int);
  public static native void glRotatexOES(int, int, int, int);
  public static native void glSampleCoveragexOES(int, boolean);
  public static native void glScalexOES(int, int, int);
  public static native void glTexEnvxOES(int, int, int);
  public static native void glTexEnvxvOES(int, int, int[], int);
  public static native void glTexEnvxvOES(int, int, java.nio.IntBuffer);
  public static native void glTexGenfOES(int, int, float);
  public static native void glTexGenfvOES(int, int, float[], int);
  public static native void glTexGenfvOES(int, int, java.nio.FloatBuffer);
  public static native void glTexGeniOES(int, int, int);
  public static native void glTexGenivOES(int, int, int[], int);
  public static native void glTexGenivOES(int, int, java.nio.IntBuffer);
  public static native void glTexGenxOES(int, int, int);
  public static native void glTexGenxvOES(int, int, int[], int);
  public static native void glTexGenxvOES(int, int, java.nio.IntBuffer);
  public static native void glTexParameterxOES(int, int, int);
  public static native void glTexParameterxvOES(int, int, int[], int);
  public static native void glTexParameterxvOES(int, int, java.nio.IntBuffer);
  public static native void glTranslatexOES(int, int, int);
  public static void glMatrixIndexPointerOES(int, int, int, java.nio.Buffer);
  public static void glWeightPointerOES(int, int, int, java.nio.Buffer);
  public void <init>();
  public static final int GL_3DC_XY_AMD;
  public static final int GL_3DC_X_AMD;
  public static final int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD;
  public static final int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD;
  public static final int GL_ATC_RGB_AMD;
  public static final int GL_BGRA;
  public static final int GL_BLEND_DST_ALPHA_OES;
  public static final int GL_BLEND_DST_RGB_OES;
  public static final int GL_BLEND_EQUATION_ALPHA_OES;
  public static final int GL_BLEND_EQUATION_OES;
  public static final int GL_BLEND_EQUATION_RGB_OES;
  public static final int GL_BLEND_SRC_ALPHA_OES;
  public static final int GL_BLEND_SRC_RGB_OES;
  public static final int GL_BUFFER_ACCESS_OES;
  public static final int GL_BUFFER_MAPPED_OES;
  public static final int GL_BUFFER_MAP_POINTER_OES;
  public static final int GL_COLOR_ATTACHMENT0_OES;
  public static final int GL_CURRENT_PALETTE_MATRIX_OES;
  public static final int GL_DECR_WRAP_OES;
  public static final int GL_DEPTH24_STENCIL8_OES;
  public static final int GL_DEPTH_ATTACHMENT_OES;
  public static final int GL_DEPTH_COMPONENT16_OES;
  public static final int GL_DEPTH_COMPONENT24_OES;
  public static final int GL_DEPTH_COMPONENT32_OES;
  public static final int GL_DEPTH_STENCIL_OES;
  public static final int GL_ETC1_RGB8_OES;
  public static final int GL_FIXED_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES;
  public static final int GL_FRAMEBUFFER_BINDING_OES;
  public static final int GL_FRAMEBUFFER_COMPLETE_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES;
  public static final int GL_FRAMEBUFFER_OES;
  public static final int GL_FRAMEBUFFER_UNSUPPORTED_OES;
  public static final int GL_FUNC_ADD_OES;
  public static final int GL_FUNC_REVERSE_SUBTRACT_OES;
  public static final int GL_FUNC_SUBTRACT_OES;
  public static final int GL_INCR_WRAP_OES;
  public static final int GL_INVALID_FRAMEBUFFER_OPERATION_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_POINTER_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_SIZE_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_STRIDE_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_TYPE_OES;
  public static final int GL_MATRIX_PALETTE_OES;
  public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES;
  public static final int GL_MAX_PALETTE_MATRICES_OES;
  public static final int GL_MAX_RENDERBUFFER_SIZE_OES;
  public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
  public static final int GL_MAX_VERTEX_UNITS_OES;
  public static final int GL_MIRRORED_REPEAT_OES;
  public static final int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_NONE_OES;
  public static final int GL_NORMAL_MAP_OES;
  public static final int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_REFLECTION_MAP_OES;
  public static final int GL_RENDERBUFFER_ALPHA_SIZE_OES;
  public static final int GL_RENDERBUFFER_BINDING_OES;
  public static final int GL_RENDERBUFFER_BLUE_SIZE_OES;
  public static final int GL_RENDERBUFFER_DEPTH_SIZE_OES;
  public static final int GL_RENDERBUFFER_GREEN_SIZE_OES;
  public static final int GL_RENDERBUFFER_HEIGHT_OES;
  public static final int GL_RENDERBUFFER_INTERNAL_FORMAT_OES;
  public static final int GL_RENDERBUFFER_OES;
  public static final int GL_RENDERBUFFER_RED_SIZE_OES;
  public static final int GL_RENDERBUFFER_STENCIL_SIZE_OES;
  public static final int GL_RENDERBUFFER_WIDTH_OES;
  public static final int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES;
  public static final int GL_RGB565_OES;
  public static final int GL_RGB5_A1_OES;
  public static final int GL_RGB8_OES;
  public static final int GL_RGBA4_OES;
  public static final int GL_RGBA8_OES;
  public static final int GL_SAMPLER_EXTERNAL_OES;
  public static final int GL_STENCIL_ATTACHMENT_OES;
  public static final int GL_STENCIL_INDEX1_OES;
  public static final int GL_STENCIL_INDEX4_OES;
  public static final int GL_STENCIL_INDEX8_OES;
  public static final int GL_TEXTURE_BINDING_CUBE_MAP_OES;
  public static final int GL_TEXTURE_BINDING_EXTERNAL_OES;
  public static final int GL_TEXTURE_CROP_RECT_OES;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES;
  public static final int GL_TEXTURE_CUBE_MAP_OES;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES;
  public static final int GL_TEXTURE_EXTERNAL_OES;
  public static final int GL_TEXTURE_GEN_MODE_OES;
  public static final int GL_TEXTURE_GEN_STR_OES;
  public static final int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT;
  public static final int GL_UNSIGNED_INT_24_8_OES;
  public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES;
  public static final int GL_WEIGHT_ARRAY_OES;
  public static final int GL_WEIGHT_ARRAY_POINTER_OES;
  public static final int GL_WEIGHT_ARRAY_SIZE_OES;
  public static final int GL_WEIGHT_ARRAY_STRIDE_OES;
  public static final int GL_WEIGHT_ARRAY_TYPE_OES;
  public static final int GL_WRITE_ONLY_OES;
}
public class android.opengl.GLES20
  extends java.lang.Object
{
  public static native boolean glIsBuffer(int);
  public static native boolean glIsEnabled(int);
  public static native boolean glIsFramebuffer(int);
  public static native boolean glIsProgram(int);
  public static native boolean glIsRenderbuffer(int);
  public static native boolean glIsShader(int);
  public static native boolean glIsTexture(int);
  public static native int glCheckFramebufferStatus(int);
  public static native int glCreateProgram();
  public static native int glCreateShader(int);
  public static native int glGetAttribLocation(int, java.lang.String);
  public static native int glGetError();
  public static native int glGetUniformLocation(int, java.lang.String);
  public static native void glActiveTexture(int);
  public static native void glAttachShader(int, int);
  public static native void glBindAttribLocation(int, int, java.lang.String);
  public static native void glBindBuffer(int, int);
  public static native void glBindFramebuffer(int, int);
  public static native void glBindRenderbuffer(int, int);
  public static native void glBindTexture(int, int);
  public static native void glBlendColor(float, float, float, float);
  public static native void glBlendEquation(int);
  public static native void glBlendEquationSeparate(int, int);
  public static native void glBlendFunc(int, int);
  public static native void glBlendFuncSeparate(int, int, int, int);
  public static native void glBufferData(int, int, java.nio.Buffer, int);
  public static native void glBufferSubData(int, int, int, java.nio.Buffer);
  public static native void glClear(int);
  public static native void glClearColor(float, float, float, float);
  public static native void glClearDepthf(float);
  public static native void glClearStencil(int);
  public static native void glColorMask(boolean, boolean, boolean, boolean);
  public static native void glCompileShader(int);
  public static native void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public static native void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public static native void glCullFace(int);
  public static native void glDeleteBuffers(int, int[], int);
  public static native void glDeleteBuffers(int, java.nio.IntBuffer);
  public static native void glDeleteFramebuffers(int, int[], int);
  public static native void glDeleteFramebuffers(int, java.nio.IntBuffer);
  public static native void glDeleteProgram(int);
  public static native void glDeleteRenderbuffers(int, int[], int);
  public static native void glDeleteRenderbuffers(int, java.nio.IntBuffer);
  public static native void glDeleteShader(int);
  public static native void glDeleteTextures(int, int[], int);
  public static native void glDeleteTextures(int, java.nio.IntBuffer);
  public static native void glDepthFunc(int);
  public static native void glDepthMask(boolean);
  public static native void glDepthRangef(float, float);
  public static native void glDetachShader(int, int);
  public static native void glDisable(int);
  public static native void glDisableVertexAttribArray(int);
  public static native void glDrawArrays(int, int, int);
  public static native void glDrawElements(int, int, int, int);
  public static native void glDrawElements(int, int, int, java.nio.Buffer);
  public static native void glEnable(int);
  public static native void glEnableVertexAttribArray(int);
  public static native void glFinish();
  public static native void glFlush();
  public static native void glFramebufferRenderbuffer(int, int, int, int);
  public static native void glFramebufferTexture2D(int, int, int, int, int);
  public static native void glFrontFace(int);
  public static native void glGenBuffers(int, int[], int);
  public static native void glGenBuffers(int, java.nio.IntBuffer);
  public static native void glGenFramebuffers(int, int[], int);
  public static native void glGenFramebuffers(int, java.nio.IntBuffer);
  public static native void glGenRenderbuffers(int, int[], int);
  public static native void glGenRenderbuffers(int, java.nio.IntBuffer);
  public static native void glGenTextures(int, int[], int);
  public static native void glGenTextures(int, java.nio.IntBuffer);
  public static native void glGenerateMipmap(int);
  public static native void glGetActiveAttrib(int, int, int, int[], int, int[], int, int[], int, byte[], int);
  public static native void glGetActiveUniform(int, int, int, int[], int, int[], int, int[], int, byte[], int);
  public static native void glGetAttachedShaders(int, int, int[], int, int[], int);
  public static native void glGetAttachedShaders(int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native void glGetBooleanv(int, boolean[], int);
  public static native void glGetBooleanv(int, java.nio.IntBuffer);
  public static native void glGetBufferParameteriv(int, int, int[], int);
  public static native void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetFloatv(int, float[], int);
  public static native void glGetFloatv(int, java.nio.FloatBuffer);
  public static native void glGetFramebufferAttachmentParameteriv(int, int, int, int[], int);
  public static native void glGetFramebufferAttachmentParameteriv(int, int, int, java.nio.IntBuffer);
  public static native void glGetIntegerv(int, int[], int);
  public static native void glGetIntegerv(int, java.nio.IntBuffer);
  public static native void glGetProgramiv(int, int, int[], int);
  public static native void glGetProgramiv(int, int, java.nio.IntBuffer);
  public static native void glGetRenderbufferParameteriv(int, int, int[], int);
  public static native void glGetRenderbufferParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetShaderPrecisionFormat(int, int, int[], int, int[], int);
  public static native void glGetShaderPrecisionFormat(int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native void glGetShaderSource(int, int, int[], int, byte[], int);
  public static native void glGetShaderiv(int, int, int[], int);
  public static native void glGetShaderiv(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterfv(int, int, float[], int);
  public static native void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glGetTexParameteriv(int, int, int[], int);
  public static native void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetUniformfv(int, int, float[], int);
  public static native void glGetUniformfv(int, int, java.nio.FloatBuffer);
  public static native void glGetUniformiv(int, int, int[], int);
  public static native void glGetUniformiv(int, int, java.nio.IntBuffer);
  public static native void glGetVertexAttribfv(int, int, float[], int);
  public static native void glGetVertexAttribfv(int, int, java.nio.FloatBuffer);
  public static native void glGetVertexAttribiv(int, int, int[], int);
  public static native void glGetVertexAttribiv(int, int, java.nio.IntBuffer);
  public static native void glHint(int, int);
  public static native void glLineWidth(float);
  public static native void glLinkProgram(int);
  public static native void glPixelStorei(int, int);
  public static native void glPolygonOffset(float, float);
  public static native void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public static native void glReleaseShaderCompiler();
  public static native void glRenderbufferStorage(int, int, int, int);
  public static native void glSampleCoverage(float, boolean);
  public static native void glScissor(int, int, int, int);
  public static native void glShaderBinary(int, int[], int, int, java.nio.Buffer, int);
  public static native void glShaderBinary(int, java.nio.IntBuffer, int, java.nio.Buffer, int);
  public static native void glShaderSource(int, java.lang.String);
  public static native void glStencilFunc(int, int, int);
  public static native void glStencilFuncSeparate(int, int, int, int);
  public static native void glStencilMask(int);
  public static native void glStencilMaskSeparate(int, int);
  public static native void glStencilOp(int, int, int);
  public static native void glStencilOpSeparate(int, int, int, int);
  public static native void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTexParameterf(int, int, float);
  public static native void glTexParameterfv(int, int, float[], int);
  public static native void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glTexParameteri(int, int, int);
  public static native void glTexParameteriv(int, int, int[], int);
  public static native void glTexParameteriv(int, int, java.nio.IntBuffer);
  public static native void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glUniform1f(int, float);
  public static native void glUniform1fv(int, int, float[], int);
  public static native void glUniform1fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform1i(int, int);
  public static native void glUniform1iv(int, int, int[], int);
  public static native void glUniform1iv(int, int, java.nio.IntBuffer);
  public static native void glUniform2f(int, float, float);
  public static native void glUniform2fv(int, int, float[], int);
  public static native void glUniform2fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform2i(int, int, int);
  public static native void glUniform2iv(int, int, int[], int);
  public static native void glUniform2iv(int, int, java.nio.IntBuffer);
  public static native void glUniform3f(int, float, float, float);
  public static native void glUniform3fv(int, int, float[], int);
  public static native void glUniform3fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform3i(int, int, int, int);
  public static native void glUniform3iv(int, int, int[], int);
  public static native void glUniform3iv(int, int, java.nio.IntBuffer);
  public static native void glUniform4f(int, float, float, float, float);
  public static native void glUniform4fv(int, int, float[], int);
  public static native void glUniform4fv(int, int, java.nio.FloatBuffer);
  public static native void glUniform4i(int, int, int, int, int);
  public static native void glUniform4iv(int, int, int[], int);
  public static native void glUniform4iv(int, int, java.nio.IntBuffer);
  public static native void glUniformMatrix2fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix2fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix3fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix3fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix4fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix4fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUseProgram(int);
  public static native void glValidateProgram(int);
  public static native void glVertexAttrib1f(int, float);
  public static native void glVertexAttrib1fv(int, float[], int);
  public static native void glVertexAttrib1fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttrib2f(int, float, float);
  public static native void glVertexAttrib2fv(int, float[], int);
  public static native void glVertexAttrib2fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttrib3f(int, float, float, float);
  public static native void glVertexAttrib3fv(int, float[], int);
  public static native void glVertexAttrib3fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttrib4f(int, float, float, float, float);
  public static native void glVertexAttrib4fv(int, float[], int);
  public static native void glVertexAttrib4fv(int, java.nio.FloatBuffer);
  public static native void glVertexAttribPointer(int, int, int, boolean, int, int);
  public static native void glViewport(int, int, int, int);
  public static void glVertexAttribPointer(int, int, int, boolean, int, java.nio.Buffer);
  public static native java.lang.String glGetActiveAttrib(int, int, int[], int, int[], int);
  public static native java.lang.String glGetActiveAttrib(int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native java.lang.String glGetActiveUniform(int, int, int[], int, int[], int);
  public static native java.lang.String glGetActiveUniform(int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native java.lang.String glGetProgramInfoLog(int);
  public static native java.lang.String glGetShaderInfoLog(int);
  public static native java.lang.String glGetShaderSource(int);
  public static native java.lang.String glGetString(int);
  public void <init>();
  public static final int GL_ACTIVE_ATTRIBUTES;
  public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH;
  public static final int GL_ACTIVE_TEXTURE;
  public static final int GL_ACTIVE_UNIFORMS;
  public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH;
  public static final int GL_ALIASED_LINE_WIDTH_RANGE;
  public static final int GL_ALIASED_POINT_SIZE_RANGE;
  public static final int GL_ALPHA;
  public static final int GL_ALPHA_BITS;
  public static final int GL_ALWAYS;
  public static final int GL_ARRAY_BUFFER;
  public static final int GL_ARRAY_BUFFER_BINDING;
  public static final int GL_ATTACHED_SHADERS;
  public static final int GL_BACK;
  public static final int GL_BLEND;
  public static final int GL_BLEND_COLOR;
  public static final int GL_BLEND_DST_ALPHA;
  public static final int GL_BLEND_DST_RGB;
  public static final int GL_BLEND_EQUATION;
  public static final int GL_BLEND_EQUATION_ALPHA;
  public static final int GL_BLEND_EQUATION_RGB;
  public static final int GL_BLEND_SRC_ALPHA;
  public static final int GL_BLEND_SRC_RGB;
  public static final int GL_BLUE_BITS;
  public static final int GL_BOOL;
  public static final int GL_BOOL_VEC2;
  public static final int GL_BOOL_VEC3;
  public static final int GL_BOOL_VEC4;
  public static final int GL_BUFFER_SIZE;
  public static final int GL_BUFFER_USAGE;
  public static final int GL_BYTE;
  public static final int GL_CCW;
  public static final int GL_CLAMP_TO_EDGE;
  public static final int GL_COLOR_ATTACHMENT0;
  public static final int GL_COLOR_BUFFER_BIT;
  public static final int GL_COLOR_CLEAR_VALUE;
  public static final int GL_COLOR_WRITEMASK;
  public static final int GL_COMPILE_STATUS;
  public static final int GL_COMPRESSED_TEXTURE_FORMATS;
  public static final int GL_CONSTANT_ALPHA;
  public static final int GL_CONSTANT_COLOR;
  public static final int GL_CULL_FACE;
  public static final int GL_CULL_FACE_MODE;
  public static final int GL_CURRENT_PROGRAM;
  public static final int GL_CURRENT_VERTEX_ATTRIB;
  public static final int GL_CW;
  public static final int GL_DECR;
  public static final int GL_DECR_WRAP;
  public static final int GL_DELETE_STATUS;
  public static final int GL_DEPTH_ATTACHMENT;
  public static final int GL_DEPTH_BITS;
  public static final int GL_DEPTH_BUFFER_BIT;
  public static final int GL_DEPTH_CLEAR_VALUE;
  public static final int GL_DEPTH_COMPONENT16;
  public static final int GL_DEPTH_COMPONENT;
  public static final int GL_DEPTH_FUNC;
  public static final int GL_DEPTH_RANGE;
  public static final int GL_DEPTH_TEST;
  public static final int GL_DEPTH_WRITEMASK;
  public static final int GL_DITHER;
  public static final int GL_DONT_CARE;
  public static final int GL_DST_ALPHA;
  public static final int GL_DST_COLOR;
  public static final int GL_DYNAMIC_DRAW;
  public static final int GL_ELEMENT_ARRAY_BUFFER;
  public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING;
  public static final int GL_EQUAL;
  public static final int GL_EXTENSIONS;
  public static final int GL_FALSE;
  public static final int GL_FASTEST;
  public static final int GL_FIXED;
  public static final int GL_FLOAT;
  public static final int GL_FLOAT_MAT2;
  public static final int GL_FLOAT_MAT3;
  public static final int GL_FLOAT_MAT4;
  public static final int GL_FLOAT_VEC2;
  public static final int GL_FLOAT_VEC3;
  public static final int GL_FLOAT_VEC4;
  public static final int GL_FRAGMENT_SHADER;
  public static final int GL_FRAMEBUFFER;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
  public static final int GL_FRAMEBUFFER_BINDING;
  public static final int GL_FRAMEBUFFER_COMPLETE;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
  public static final int GL_FRAMEBUFFER_UNSUPPORTED;
  public static final int GL_FRONT;
  public static final int GL_FRONT_AND_BACK;
  public static final int GL_FRONT_FACE;
  public static final int GL_FUNC_ADD;
  public static final int GL_FUNC_REVERSE_SUBTRACT;
  public static final int GL_FUNC_SUBTRACT;
  public static final int GL_GENERATE_MIPMAP_HINT;
  public static final int GL_GEQUAL;
  public static final int GL_GREATER;
  public static final int GL_GREEN_BITS;
  public static final int GL_HIGH_FLOAT;
  public static final int GL_HIGH_INT;
  public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT;
  public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE;
  public static final int GL_INCR;
  public static final int GL_INCR_WRAP;
  public static final int GL_INFO_LOG_LENGTH;
  public static final int GL_INT;
  public static final int GL_INT_VEC2;
  public static final int GL_INT_VEC3;
  public static final int GL_INT_VEC4;
  public static final int GL_INVALID_ENUM;
  public static final int GL_INVALID_FRAMEBUFFER_OPERATION;
  public static final int GL_INVALID_OPERATION;
  public static final int GL_INVALID_VALUE;
  public static final int GL_INVERT;
  public static final int GL_KEEP;
  public static final int GL_LEQUAL;
  public static final int GL_LESS;
  public static final int GL_LINEAR;
  public static final int GL_LINEAR_MIPMAP_LINEAR;
  public static final int GL_LINEAR_MIPMAP_NEAREST;
  public static final int GL_LINES;
  public static final int GL_LINE_LOOP;
  public static final int GL_LINE_STRIP;
  public static final int GL_LINE_WIDTH;
  public static final int GL_LINK_STATUS;
  public static final int GL_LOW_FLOAT;
  public static final int GL_LOW_INT;
  public static final int GL_LUMINANCE;
  public static final int GL_LUMINANCE_ALPHA;
  public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS;
  public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE;
  public static final int GL_MAX_FRAGMENT_UNIFORM_VECTORS;
  public static final int GL_MAX_RENDERBUFFER_SIZE;
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS;
  public static final int GL_MAX_TEXTURE_SIZE;
  public static final int GL_MAX_VARYING_VECTORS;
  public static final int GL_MAX_VERTEX_ATTRIBS;
  public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS;
  public static final int GL_MAX_VERTEX_UNIFORM_VECTORS;
  public static final int GL_MAX_VIEWPORT_DIMS;
  public static final int GL_MEDIUM_FLOAT;
  public static final int GL_MEDIUM_INT;
  public static final int GL_MIRRORED_REPEAT;
  public static final int GL_NEAREST;
  public static final int GL_NEAREST_MIPMAP_LINEAR;
  public static final int GL_NEAREST_MIPMAP_NEAREST;
  public static final int GL_NEVER;
  public static final int GL_NICEST;
  public static final int GL_NONE;
  public static final int GL_NOTEQUAL;
  public static final int GL_NO_ERROR;
  public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS;
  public static final int GL_NUM_SHADER_BINARY_FORMATS;
  public static final int GL_ONE;
  public static final int GL_ONE_MINUS_CONSTANT_ALPHA;
  public static final int GL_ONE_MINUS_CONSTANT_COLOR;
  public static final int GL_ONE_MINUS_DST_ALPHA;
  public static final int GL_ONE_MINUS_DST_COLOR;
  public static final int GL_ONE_MINUS_SRC_ALPHA;
  public static final int GL_ONE_MINUS_SRC_COLOR;
  public static final int GL_OUT_OF_MEMORY;
  public static final int GL_PACK_ALIGNMENT;
  public static final int GL_POINTS;
  public static final int GL_POLYGON_OFFSET_FACTOR;
  public static final int GL_POLYGON_OFFSET_FILL;
  public static final int GL_POLYGON_OFFSET_UNITS;
  public static final int GL_RED_BITS;
  public static final int GL_RENDERBUFFER;
  public static final int GL_RENDERBUFFER_ALPHA_SIZE;
  public static final int GL_RENDERBUFFER_BINDING;
  public static final int GL_RENDERBUFFER_BLUE_SIZE;
  public static final int GL_RENDERBUFFER_DEPTH_SIZE;
  public static final int GL_RENDERBUFFER_GREEN_SIZE;
  public static final int GL_RENDERBUFFER_HEIGHT;
  public static final int GL_RENDERBUFFER_INTERNAL_FORMAT;
  public static final int GL_RENDERBUFFER_RED_SIZE;
  public static final int GL_RENDERBUFFER_STENCIL_SIZE;
  public static final int GL_RENDERBUFFER_WIDTH;
  public static final int GL_RENDERER;
  public static final int GL_REPEAT;
  public static final int GL_REPLACE;
  public static final int GL_RGB565;
  public static final int GL_RGB5_A1;
  public static final int GL_RGB;
  public static final int GL_RGBA4;
  public static final int GL_RGBA;
  public static final int GL_SAMPLER_2D;
  public static final int GL_SAMPLER_CUBE;
  public static final int GL_SAMPLES;
  public static final int GL_SAMPLE_ALPHA_TO_COVERAGE;
  public static final int GL_SAMPLE_BUFFERS;
  public static final int GL_SAMPLE_COVERAGE;
  public static final int GL_SAMPLE_COVERAGE_INVERT;
  public static final int GL_SAMPLE_COVERAGE_VALUE;
  public static final int GL_SCISSOR_BOX;
  public static final int GL_SCISSOR_TEST;
  public static final int GL_SHADER_BINARY_FORMATS;
  public static final int GL_SHADER_COMPILER;
  public static final int GL_SHADER_SOURCE_LENGTH;
  public static final int GL_SHADER_TYPE;
  public static final int GL_SHADING_LANGUAGE_VERSION;
  public static final int GL_SHORT;
  public static final int GL_SRC_ALPHA;
  public static final int GL_SRC_ALPHA_SATURATE;
  public static final int GL_SRC_COLOR;
  public static final int GL_STATIC_DRAW;
  public static final int GL_STENCIL_ATTACHMENT;
  public static final int GL_STENCIL_BACK_FAIL;
  public static final int GL_STENCIL_BACK_FUNC;
  public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL;
  public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS;
  public static final int GL_STENCIL_BACK_REF;
  public static final int GL_STENCIL_BACK_VALUE_MASK;
  public static final int GL_STENCIL_BACK_WRITEMASK;
  public static final int GL_STENCIL_BITS;
  public static final int GL_STENCIL_BUFFER_BIT;
  public static final int GL_STENCIL_CLEAR_VALUE;
  public static final int GL_STENCIL_FAIL;
  public static final int GL_STENCIL_FUNC;
  public static final int GL_STENCIL_INDEX8;
  public static final int GL_STENCIL_INDEX;
  public static final int GL_STENCIL_PASS_DEPTH_FAIL;
  public static final int GL_STENCIL_PASS_DEPTH_PASS;
  public static final int GL_STENCIL_REF;
  public static final int GL_STENCIL_TEST;
  public static final int GL_STENCIL_VALUE_MASK;
  public static final int GL_STENCIL_WRITEMASK;
  public static final int GL_STREAM_DRAW;
  public static final int GL_SUBPIXEL_BITS;
  public static final int GL_TEXTURE0;
  public static final int GL_TEXTURE10;
  public static final int GL_TEXTURE11;
  public static final int GL_TEXTURE12;
  public static final int GL_TEXTURE13;
  public static final int GL_TEXTURE14;
  public static final int GL_TEXTURE15;
  public static final int GL_TEXTURE16;
  public static final int GL_TEXTURE17;
  public static final int GL_TEXTURE18;
  public static final int GL_TEXTURE19;
  public static final int GL_TEXTURE1;
  public static final int GL_TEXTURE20;
  public static final int GL_TEXTURE21;
  public static final int GL_TEXTURE22;
  public static final int GL_TEXTURE23;
  public static final int GL_TEXTURE24;
  public static final int GL_TEXTURE25;
  public static final int GL_TEXTURE26;
  public static final int GL_TEXTURE27;
  public static final int GL_TEXTURE28;
  public static final int GL_TEXTURE29;
  public static final int GL_TEXTURE2;
  public static final int GL_TEXTURE30;
  public static final int GL_TEXTURE31;
  public static final int GL_TEXTURE3;
  public static final int GL_TEXTURE4;
  public static final int GL_TEXTURE5;
  public static final int GL_TEXTURE6;
  public static final int GL_TEXTURE7;
  public static final int GL_TEXTURE8;
  public static final int GL_TEXTURE9;
  public static final int GL_TEXTURE;
  public static final int GL_TEXTURE_2D;
  public static final int GL_TEXTURE_BINDING_2D;
  public static final int GL_TEXTURE_BINDING_CUBE_MAP;
  public static final int GL_TEXTURE_CUBE_MAP;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
  public static final int GL_TEXTURE_MAG_FILTER;
  public static final int GL_TEXTURE_MIN_FILTER;
  public static final int GL_TEXTURE_WRAP_S;
  public static final int GL_TEXTURE_WRAP_T;
  public static final int GL_TRIANGLES;
  public static final int GL_TRIANGLE_FAN;
  public static final int GL_TRIANGLE_STRIP;
  public static final int GL_TRUE;
  public static final int GL_UNPACK_ALIGNMENT;
  public static final int GL_UNSIGNED_BYTE;
  public static final int GL_UNSIGNED_INT;
  public static final int GL_UNSIGNED_SHORT;
  public static final int GL_UNSIGNED_SHORT_4_4_4_4;
  public static final int GL_UNSIGNED_SHORT_5_5_5_1;
  public static final int GL_UNSIGNED_SHORT_5_6_5;
  public static final int GL_VALIDATE_STATUS;
  public static final int GL_VENDOR;
  public static final int GL_VERSION;
  public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
  public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED;
  public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED;
  public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER;
  public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE;
  public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE;
  public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE;
  public static final int GL_VERTEX_SHADER;
  public static final int GL_VIEWPORT;
  public static final int GL_ZERO;
}
public class android.opengl.GLES30
  extends android.opengl.GLES20
{
  public static native boolean glIsQuery(int);
  public static native boolean glIsSampler(int);
  public static native boolean glIsSync(long);
  public static native boolean glIsTransformFeedback(int);
  public static native boolean glIsVertexArray(int);
  public static native boolean glUnmapBuffer(int);
  public static native int glClientWaitSync(long, int, long);
  public static native int glGetFragDataLocation(int, java.lang.String);
  public static native int glGetUniformBlockIndex(int, java.lang.String);
  public static native long glFenceSync(int, int);
  public static native void glBeginQuery(int, int);
  public static native void glBeginTransformFeedback(int);
  public static native void glBindBufferBase(int, int, int);
  public static native void glBindBufferRange(int, int, int, int, int);
  public static native void glBindSampler(int, int);
  public static native void glBindTransformFeedback(int, int);
  public static native void glBindVertexArray(int);
  public static native void glBlitFramebuffer(int, int, int, int, int, int, int, int, int, int);
  public static native void glClearBufferfi(int, int, float, int);
  public static native void glClearBufferfv(int, int, float[], int);
  public static native void glClearBufferfv(int, int, java.nio.FloatBuffer);
  public static native void glClearBufferiv(int, int, int[], int);
  public static native void glClearBufferiv(int, int, java.nio.IntBuffer);
  public static native void glClearBufferuiv(int, int, int[], int);
  public static native void glClearBufferuiv(int, int, java.nio.IntBuffer);
  public static native void glCompressedTexImage3D(int, int, int, int, int, int, int, int, int);
  public static native void glCompressedTexImage3D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCompressedTexSubImage3D(int, int, int, int, int, int, int, int, int, int, int);
  public static native void glCompressedTexSubImage3D(int, int, int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glCopyBufferSubData(int, int, int, int, int);
  public static native void glCopyTexSubImage3D(int, int, int, int, int, int, int, int, int);
  public static native void glDeleteQueries(int, int[], int);
  public static native void glDeleteQueries(int, java.nio.IntBuffer);
  public static native void glDeleteSamplers(int, int[], int);
  public static native void glDeleteSamplers(int, java.nio.IntBuffer);
  public static native void glDeleteSync(long);
  public static native void glDeleteTransformFeedbacks(int, int[], int);
  public static native void glDeleteTransformFeedbacks(int, java.nio.IntBuffer);
  public static native void glDeleteVertexArrays(int, int[], int);
  public static native void glDeleteVertexArrays(int, java.nio.IntBuffer);
  public static native void glDrawArraysInstanced(int, int, int, int);
  public static native void glDrawBuffers(int, int[], int);
  public static native void glDrawBuffers(int, java.nio.IntBuffer);
  public static native void glDrawElementsInstanced(int, int, int, int, int);
  public static native void glDrawElementsInstanced(int, int, int, java.nio.Buffer, int);
  public static native void glDrawRangeElements(int, int, int, int, int, int);
  public static native void glDrawRangeElements(int, int, int, int, int, java.nio.Buffer);
  public static native void glEndQuery(int);
  public static native void glEndTransformFeedback();
  public static native void glFlushMappedBufferRange(int, int, int);
  public static native void glFramebufferTextureLayer(int, int, int, int, int);
  public static native void glGenQueries(int, int[], int);
  public static native void glGenQueries(int, java.nio.IntBuffer);
  public static native void glGenSamplers(int, int[], int);
  public static native void glGenSamplers(int, java.nio.IntBuffer);
  public static native void glGenTransformFeedbacks(int, int[], int);
  public static native void glGenTransformFeedbacks(int, java.nio.IntBuffer);
  public static native void glGenVertexArrays(int, int[], int);
  public static native void glGenVertexArrays(int, java.nio.IntBuffer);
  public static native void glGetActiveUniformBlockName(int, int, int, int[], int, byte[], int);
  public static native void glGetActiveUniformBlockName(int, int, java.nio.Buffer, java.nio.Buffer);
  public static native void glGetActiveUniformBlockiv(int, int, int, int[], int);
  public static native void glGetActiveUniformBlockiv(int, int, int, java.nio.IntBuffer);
  public static native void glGetActiveUniformsiv(int, int, int[], int, int, int[], int);
  public static native void glGetActiveUniformsiv(int, int, java.nio.IntBuffer, int, java.nio.IntBuffer);
  public static native void glGetBufferParameteri64v(int, int, java.nio.LongBuffer);
  public static native void glGetBufferParameteri64v(int, int, long[], int);
  public static native void glGetInteger64i_v(int, int, java.nio.LongBuffer);
  public static native void glGetInteger64i_v(int, int, long[], int);
  public static native void glGetInteger64v(int, java.nio.LongBuffer);
  public static native void glGetInteger64v(int, long[], int);
  public static native void glGetIntegeri_v(int, int, int[], int);
  public static native void glGetIntegeri_v(int, int, java.nio.IntBuffer);
  public static native void glGetInternalformativ(int, int, int, int, int[], int);
  public static native void glGetInternalformativ(int, int, int, int, java.nio.IntBuffer);
  public static native void glGetProgramBinary(int, int, int[], int, int[], int, java.nio.Buffer);
  public static native void glGetProgramBinary(int, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.Buffer);
  public static native void glGetQueryObjectuiv(int, int, int[], int);
  public static native void glGetQueryObjectuiv(int, int, java.nio.IntBuffer);
  public static native void glGetQueryiv(int, int, int[], int);
  public static native void glGetQueryiv(int, int, java.nio.IntBuffer);
  public static native void glGetSamplerParameterfv(int, int, float[], int);
  public static native void glGetSamplerParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glGetSamplerParameteriv(int, int, int[], int);
  public static native void glGetSamplerParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetSynciv(long, int, int, int[], int, int[], int);
  public static native void glGetSynciv(long, int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native void glGetTransformFeedbackVarying(int, int, int, int[], int, int[], int, int[], int, byte[], int);
  public static native void glGetTransformFeedbackVarying(int, int, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, byte);
  public static native void glGetTransformFeedbackVarying(int, int, int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer);
  public static native void glGetUniformIndices(int, java.lang.String[], int[], int);
  public static native void glGetUniformIndices(int, java.lang.String[], java.nio.IntBuffer);
  public static native void glGetUniformuiv(int, int, int[], int);
  public static native void glGetUniformuiv(int, int, java.nio.IntBuffer);
  public static native void glGetVertexAttribIiv(int, int, int[], int);
  public static native void glGetVertexAttribIiv(int, int, java.nio.IntBuffer);
  public static native void glGetVertexAttribIuiv(int, int, int[], int);
  public static native void glGetVertexAttribIuiv(int, int, java.nio.IntBuffer);
  public static native void glInvalidateFramebuffer(int, int, int[], int);
  public static native void glInvalidateFramebuffer(int, int, java.nio.IntBuffer);
  public static native void glInvalidateSubFramebuffer(int, int, int[], int, int, int, int, int);
  public static native void glInvalidateSubFramebuffer(int, int, java.nio.IntBuffer, int, int, int, int);
  public static native void glPauseTransformFeedback();
  public static native void glProgramBinary(int, int, java.nio.Buffer, int);
  public static native void glProgramParameteri(int, int, int);
  public static native void glReadBuffer(int);
  public static native void glReadPixels(int, int, int, int, int, int, int);
  public static native void glRenderbufferStorageMultisample(int, int, int, int, int);
  public static native void glResumeTransformFeedback();
  public static native void glSamplerParameterf(int, int, float);
  public static native void glSamplerParameterfv(int, int, float[], int);
  public static native void glSamplerParameterfv(int, int, java.nio.FloatBuffer);
  public static native void glSamplerParameteri(int, int, int);
  public static native void glSamplerParameteriv(int, int, int[], int);
  public static native void glSamplerParameteriv(int, int, java.nio.IntBuffer);
  public static native void glTexImage3D(int, int, int, int, int, int, int, int, int, int);
  public static native void glTexImage3D(int, int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTexStorage2D(int, int, int, int, int);
  public static native void glTexStorage3D(int, int, int, int, int, int);
  public static native void glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, int);
  public static native void glTexSubImage3D(int, int, int, int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glTransformFeedbackVaryings(int, java.lang.String[], int);
  public static native void glUniform1ui(int, int);
  public static native void glUniform1uiv(int, int, int[], int);
  public static native void glUniform1uiv(int, int, java.nio.IntBuffer);
  public static native void glUniform2ui(int, int, int);
  public static native void glUniform2uiv(int, int, int[], int);
  public static native void glUniform2uiv(int, int, java.nio.IntBuffer);
  public static native void glUniform3ui(int, int, int, int);
  public static native void glUniform3uiv(int, int, int[], int);
  public static native void glUniform3uiv(int, int, java.nio.IntBuffer);
  public static native void glUniform4ui(int, int, int, int, int);
  public static native void glUniform4uiv(int, int, int[], int);
  public static native void glUniform4uiv(int, int, java.nio.IntBuffer);
  public static native void glUniformBlockBinding(int, int, int);
  public static native void glUniformMatrix2x3fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix2x3fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix2x4fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix2x4fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix3x2fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix3x2fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix3x4fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix3x4fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix4x2fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix4x2fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glUniformMatrix4x3fv(int, int, boolean, float[], int);
  public static native void glUniformMatrix4x3fv(int, int, boolean, java.nio.FloatBuffer);
  public static native void glVertexAttribDivisor(int, int);
  public static native void glVertexAttribI4i(int, int, int, int, int);
  public static native void glVertexAttribI4iv(int, int[], int);
  public static native void glVertexAttribI4iv(int, java.nio.IntBuffer);
  public static native void glVertexAttribI4ui(int, int, int, int, int);
  public static native void glVertexAttribI4uiv(int, int[], int);
  public static native void glVertexAttribI4uiv(int, java.nio.IntBuffer);
  public static native void glVertexAttribIPointer(int, int, int, int, int);
  public static native void glWaitSync(long, int, long);
  public static void glVertexAttribIPointer(int, int, int, int, java.nio.Buffer);
  public static native java.lang.String glGetActiveUniformBlockName(int, int);
  public static native java.lang.String glGetStringi(int, int);
  public static native java.lang.String glGetTransformFeedbackVarying(int, int, int[], int, int[], int);
  public static native java.lang.String glGetTransformFeedbackVarying(int, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native java.nio.Buffer glGetBufferPointerv(int, int);
  public static native java.nio.Buffer glMapBufferRange(int, int, int, int);
  public void <init>();
  public static final int GL_ACTIVE_UNIFORM_BLOCKS;
  public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH;
  public static final int GL_ALREADY_SIGNALED;
  public static final int GL_ANY_SAMPLES_PASSED;
  public static final int GL_ANY_SAMPLES_PASSED_CONSERVATIVE;
  public static final int GL_BLUE;
  public static final int GL_BUFFER_ACCESS_FLAGS;
  public static final int GL_BUFFER_MAPPED;
  public static final int GL_BUFFER_MAP_LENGTH;
  public static final int GL_BUFFER_MAP_OFFSET;
  public static final int GL_BUFFER_MAP_POINTER;
  public static final int GL_COLOR;
  public static final int GL_COLOR_ATTACHMENT10;
  public static final int GL_COLOR_ATTACHMENT11;
  public static final int GL_COLOR_ATTACHMENT12;
  public static final int GL_COLOR_ATTACHMENT13;
  public static final int GL_COLOR_ATTACHMENT14;
  public static final int GL_COLOR_ATTACHMENT15;
  public static final int GL_COLOR_ATTACHMENT1;
  public static final int GL_COLOR_ATTACHMENT2;
  public static final int GL_COLOR_ATTACHMENT3;
  public static final int GL_COLOR_ATTACHMENT4;
  public static final int GL_COLOR_ATTACHMENT5;
  public static final int GL_COLOR_ATTACHMENT6;
  public static final int GL_COLOR_ATTACHMENT7;
  public static final int GL_COLOR_ATTACHMENT8;
  public static final int GL_COLOR_ATTACHMENT9;
  public static final int GL_COMPARE_REF_TO_TEXTURE;
  public static final int GL_COMPRESSED_R11_EAC;
  public static final int GL_COMPRESSED_RG11_EAC;
  public static final int GL_COMPRESSED_RGB8_ETC2;
  public static final int GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
  public static final int GL_COMPRESSED_RGBA8_ETC2_EAC;
  public static final int GL_COMPRESSED_SIGNED_R11_EAC;
  public static final int GL_COMPRESSED_SIGNED_RG11_EAC;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
  public static final int GL_COMPRESSED_SRGB8_ETC2;
  public static final int GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
  public static final int GL_CONDITION_SATISFIED;
  public static final int GL_COPY_READ_BUFFER;
  public static final int GL_COPY_READ_BUFFER_BINDING;
  public static final int GL_COPY_WRITE_BUFFER;
  public static final int GL_COPY_WRITE_BUFFER_BINDING;
  public static final int GL_CURRENT_QUERY;
  public static final int GL_DEPTH24_STENCIL8;
  public static final int GL_DEPTH32F_STENCIL8;
  public static final int GL_DEPTH;
  public static final int GL_DEPTH_COMPONENT24;
  public static final int GL_DEPTH_COMPONENT32F;
  public static final int GL_DEPTH_STENCIL;
  public static final int GL_DEPTH_STENCIL_ATTACHMENT;
  public static final int GL_DRAW_BUFFER0;
  public static final int GL_DRAW_BUFFER10;
  public static final int GL_DRAW_BUFFER11;
  public static final int GL_DRAW_BUFFER12;
  public static final int GL_DRAW_BUFFER13;
  public static final int GL_DRAW_BUFFER14;
  public static final int GL_DRAW_BUFFER15;
  public static final int GL_DRAW_BUFFER1;
  public static final int GL_DRAW_BUFFER2;
  public static final int GL_DRAW_BUFFER3;
  public static final int GL_DRAW_BUFFER4;
  public static final int GL_DRAW_BUFFER5;
  public static final int GL_DRAW_BUFFER6;
  public static final int GL_DRAW_BUFFER7;
  public static final int GL_DRAW_BUFFER8;
  public static final int GL_DRAW_BUFFER9;
  public static final int GL_DRAW_FRAMEBUFFER;
  public static final int GL_DRAW_FRAMEBUFFER_BINDING;
  public static final int GL_DYNAMIC_COPY;
  public static final int GL_DYNAMIC_READ;
  public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV;
  public static final int GL_FLOAT_MAT2x3;
  public static final int GL_FLOAT_MAT2x4;
  public static final int GL_FLOAT_MAT3x2;
  public static final int GL_FLOAT_MAT3x4;
  public static final int GL_FLOAT_MAT4x2;
  public static final int GL_FLOAT_MAT4x3;
  public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
  public static final int GL_FRAMEBUFFER_DEFAULT;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
  public static final int GL_FRAMEBUFFER_UNDEFINED;
  public static final int GL_GREEN;
  public static final int GL_HALF_FLOAT;
  public static final int GL_INTERLEAVED_ATTRIBS;
  public static final int GL_INT_2_10_10_10_REV;
  public static final int GL_INT_SAMPLER_2D;
  public static final int GL_INT_SAMPLER_2D_ARRAY;
  public static final int GL_INT_SAMPLER_3D;
  public static final int GL_INT_SAMPLER_CUBE;
  public static final int GL_INVALID_INDEX;
  public static final int GL_MAJOR_VERSION;
  public static final int GL_MAP_FLUSH_EXPLICIT_BIT;
  public static final int GL_MAP_INVALIDATE_BUFFER_BIT;
  public static final int GL_MAP_INVALIDATE_RANGE_BIT;
  public static final int GL_MAP_READ_BIT;
  public static final int GL_MAP_UNSYNCHRONIZED_BIT;
  public static final int GL_MAP_WRITE_BIT;
  public static final int GL_MAX;
  public static final int GL_MAX_3D_TEXTURE_SIZE;
  public static final int GL_MAX_ARRAY_TEXTURE_LAYERS;
  public static final int GL_MAX_COLOR_ATTACHMENTS;
  public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
  public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS;
  public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
  public static final int GL_MAX_DRAW_BUFFERS;
  public static final int GL_MAX_ELEMENTS_INDICES;
  public static final int GL_MAX_ELEMENTS_VERTICES;
  public static final int GL_MAX_ELEMENT_INDEX;
  public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS;
  public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS;
  public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS;
  public static final int GL_MAX_PROGRAM_TEXEL_OFFSET;
  public static final int GL_MAX_SAMPLES;
  public static final int GL_MAX_SERVER_WAIT_TIMEOUT;
  public static final int GL_MAX_TEXTURE_LOD_BIAS;
  public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
  public static final int GL_MAX_UNIFORM_BLOCK_SIZE;
  public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS;
  public static final int GL_MAX_VARYING_COMPONENTS;
  public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS;
  public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS;
  public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS;
  public static final int GL_MIN;
  public static final int GL_MINOR_VERSION;
  public static final int GL_MIN_PROGRAM_TEXEL_OFFSET;
  public static final int GL_NUM_EXTENSIONS;
  public static final int GL_NUM_PROGRAM_BINARY_FORMATS;
  public static final int GL_NUM_SAMPLE_COUNTS;
  public static final int GL_OBJECT_TYPE;
  public static final int GL_PACK_ROW_LENGTH;
  public static final int GL_PACK_SKIP_PIXELS;
  public static final int GL_PACK_SKIP_ROWS;
  public static final int GL_PIXEL_PACK_BUFFER;
  public static final int GL_PIXEL_PACK_BUFFER_BINDING;
  public static final int GL_PIXEL_UNPACK_BUFFER;
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING;
  public static final int GL_PRIMITIVE_RESTART_FIXED_INDEX;
  public static final int GL_PROGRAM_BINARY_FORMATS;
  public static final int GL_PROGRAM_BINARY_LENGTH;
  public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT;
  public static final int GL_QUERY_RESULT;
  public static final int GL_QUERY_RESULT_AVAILABLE;
  public static final int GL_R11F_G11F_B10F;
  public static final int GL_R16F;
  public static final int GL_R16I;
  public static final int GL_R16UI;
  public static final int GL_R32F;
  public static final int GL_R32I;
  public static final int GL_R32UI;
  public static final int GL_R8;
  public static final int GL_R8I;
  public static final int GL_R8UI;
  public static final int GL_R8_SNORM;
  public static final int GL_RASTERIZER_DISCARD;
  public static final int GL_READ_BUFFER;
  public static final int GL_READ_FRAMEBUFFER;
  public static final int GL_READ_FRAMEBUFFER_BINDING;
  public static final int GL_RED;
  public static final int GL_RED_INTEGER;
  public static final int GL_RENDERBUFFER_SAMPLES;
  public static final int GL_RG16F;
  public static final int GL_RG16I;
  public static final int GL_RG16UI;
  public static final int GL_RG32F;
  public static final int GL_RG32I;
  public static final int GL_RG32UI;
  public static final int GL_RG8;
  public static final int GL_RG8I;
  public static final int GL_RG8UI;
  public static final int GL_RG8_SNORM;
  public static final int GL_RG;
  public static final int GL_RGB10_A2;
  public static final int GL_RGB10_A2UI;
  public static final int GL_RGB16F;
  public static final int GL_RGB16I;
  public static final int GL_RGB16UI;
  public static final int GL_RGB32F;
  public static final int GL_RGB32I;
  public static final int GL_RGB32UI;
  public static final int GL_RGB8;
  public static final int GL_RGB8I;
  public static final int GL_RGB8UI;
  public static final int GL_RGB8_SNORM;
  public static final int GL_RGB9_E5;
  public static final int GL_RGBA16F;
  public static final int GL_RGBA16I;
  public static final int GL_RGBA16UI;
  public static final int GL_RGBA32F;
  public static final int GL_RGBA32I;
  public static final int GL_RGBA32UI;
  public static final int GL_RGBA8;
  public static final int GL_RGBA8I;
  public static final int GL_RGBA8UI;
  public static final int GL_RGBA8_SNORM;
  public static final int GL_RGBA_INTEGER;
  public static final int GL_RGB_INTEGER;
  public static final int GL_RG_INTEGER;
  public static final int GL_SAMPLER_2D_ARRAY;
  public static final int GL_SAMPLER_2D_ARRAY_SHADOW;
  public static final int GL_SAMPLER_2D_SHADOW;
  public static final int GL_SAMPLER_3D;
  public static final int GL_SAMPLER_BINDING;
  public static final int GL_SAMPLER_CUBE_SHADOW;
  public static final int GL_SEPARATE_ATTRIBS;
  public static final int GL_SIGNALED;
  public static final int GL_SIGNED_NORMALIZED;
  public static final int GL_SRGB8;
  public static final int GL_SRGB8_ALPHA8;
  public static final int GL_SRGB;
  public static final int GL_STATIC_COPY;
  public static final int GL_STATIC_READ;
  public static final int GL_STENCIL;
  public static final int GL_STREAM_COPY;
  public static final int GL_STREAM_READ;
  public static final int GL_SYNC_CONDITION;
  public static final int GL_SYNC_FENCE;
  public static final int GL_SYNC_FLAGS;
  public static final int GL_SYNC_FLUSH_COMMANDS_BIT;
  public static final int GL_SYNC_GPU_COMMANDS_COMPLETE;
  public static final int GL_SYNC_STATUS;
  public static final int GL_TEXTURE_2D_ARRAY;
  public static final int GL_TEXTURE_3D;
  public static final int GL_TEXTURE_BASE_LEVEL;
  public static final int GL_TEXTURE_BINDING_2D_ARRAY;
  public static final int GL_TEXTURE_BINDING_3D;
  public static final int GL_TEXTURE_COMPARE_FUNC;
  public static final int GL_TEXTURE_COMPARE_MODE;
  public static final int GL_TEXTURE_IMMUTABLE_FORMAT;
  public static final int GL_TEXTURE_IMMUTABLE_LEVELS;
  public static final int GL_TEXTURE_MAX_LEVEL;
  public static final int GL_TEXTURE_MAX_LOD;
  public static final int GL_TEXTURE_MIN_LOD;
  public static final int GL_TEXTURE_SWIZZLE_A;
  public static final int GL_TEXTURE_SWIZZLE_B;
  public static final int GL_TEXTURE_SWIZZLE_G;
  public static final int GL_TEXTURE_SWIZZLE_R;
  public static final int GL_TEXTURE_WRAP_R;
  public static final int GL_TIMEOUT_EXPIRED;
  public static final int GL_TRANSFORM_FEEDBACK;
  public static final int GL_TRANSFORM_FEEDBACK_ACTIVE;
  public static final int GL_TRANSFORM_FEEDBACK_BINDING;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START;
  public static final int GL_TRANSFORM_FEEDBACK_PAUSED;
  public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
  public static final int GL_TRANSFORM_FEEDBACK_VARYINGS;
  public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH;
  public static final int GL_UNIFORM_ARRAY_STRIDE;
  public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS;
  public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
  public static final int GL_UNIFORM_BLOCK_BINDING;
  public static final int GL_UNIFORM_BLOCK_DATA_SIZE;
  public static final int GL_UNIFORM_BLOCK_INDEX;
  public static final int GL_UNIFORM_BLOCK_NAME_LENGTH;
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
  public static final int GL_UNIFORM_BUFFER;
  public static final int GL_UNIFORM_BUFFER_BINDING;
  public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT;
  public static final int GL_UNIFORM_BUFFER_SIZE;
  public static final int GL_UNIFORM_BUFFER_START;
  public static final int GL_UNIFORM_IS_ROW_MAJOR;
  public static final int GL_UNIFORM_MATRIX_STRIDE;
  public static final int GL_UNIFORM_NAME_LENGTH;
  public static final int GL_UNIFORM_OFFSET;
  public static final int GL_UNIFORM_SIZE;
  public static final int GL_UNIFORM_TYPE;
  public static final int GL_UNPACK_IMAGE_HEIGHT;
  public static final int GL_UNPACK_ROW_LENGTH;
  public static final int GL_UNPACK_SKIP_IMAGES;
  public static final int GL_UNPACK_SKIP_PIXELS;
  public static final int GL_UNPACK_SKIP_ROWS;
  public static final int GL_UNSIGNALED;
  public static final int GL_UNSIGNED_INT_10F_11F_11F_REV;
  public static final int GL_UNSIGNED_INT_24_8;
  public static final int GL_UNSIGNED_INT_2_10_10_10_REV;
  public static final int GL_UNSIGNED_INT_5_9_9_9_REV;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY;
  public static final int GL_UNSIGNED_INT_SAMPLER_3D;
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE;
  public static final int GL_UNSIGNED_INT_VEC2;
  public static final int GL_UNSIGNED_INT_VEC3;
  public static final int GL_UNSIGNED_INT_VEC4;
  public static final int GL_UNSIGNED_NORMALIZED;
  public static final int GL_VERTEX_ARRAY_BINDING;
  public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR;
  public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER;
  public static final int GL_WAIT_FAILED;
  public static final long GL_TIMEOUT_IGNORED;
}
public class android.opengl.GLES31
  extends android.opengl.GLES30
{
  public static native boolean glIsProgramPipeline(int);
  public static native int glCreateShaderProgramv(int, java.lang.String[]);
  public static native int glGetProgramResourceIndex(int, int, java.lang.String);
  public static native int glGetProgramResourceLocation(int, int, java.lang.String);
  public static native void glActiveShaderProgram(int, int);
  public static native void glBindImageTexture(int, int, int, boolean, int, int, int);
  public static native void glBindProgramPipeline(int);
  public static native void glBindVertexBuffer(int, int, long, int);
  public static native void glDeleteProgramPipelines(int, int[], int);
  public static native void glDeleteProgramPipelines(int, java.nio.IntBuffer);
  public static native void glDispatchCompute(int, int, int);
  public static native void glDispatchComputeIndirect(long);
  public static native void glDrawArraysIndirect(int, long);
  public static native void glDrawElementsIndirect(int, int, long);
  public static native void glFramebufferParameteri(int, int, int);
  public static native void glGenProgramPipelines(int, int[], int);
  public static native void glGenProgramPipelines(int, java.nio.IntBuffer);
  public static native void glGetBooleani_v(int, int, boolean[], int);
  public static native void glGetBooleani_v(int, int, java.nio.IntBuffer);
  public static native void glGetFramebufferParameteriv(int, int, int[], int);
  public static native void glGetFramebufferParameteriv(int, int, java.nio.IntBuffer);
  public static native void glGetMultisamplefv(int, int, float[], int);
  public static native void glGetMultisamplefv(int, int, java.nio.FloatBuffer);
  public static native void glGetProgramInterfaceiv(int, int, int, int[], int);
  public static native void glGetProgramInterfaceiv(int, int, int, java.nio.IntBuffer);
  public static native void glGetProgramPipelineiv(int, int, int[], int);
  public static native void glGetProgramPipelineiv(int, int, java.nio.IntBuffer);
  public static native void glGetProgramResourceiv(int, int, int, int, int[], int, int, int[], int, int[], int);
  public static native void glGetProgramResourceiv(int, int, int, int, java.nio.IntBuffer, int, java.nio.IntBuffer, java.nio.IntBuffer);
  public static native void glGetTexLevelParameterfv(int, int, int, float[], int);
  public static native void glGetTexLevelParameterfv(int, int, int, java.nio.FloatBuffer);
  public static native void glGetTexLevelParameteriv(int, int, int, int[], int);
  public static native void glGetTexLevelParameteriv(int, int, int, java.nio.IntBuffer);
  public static native void glMemoryBarrier(int);
  public static native void glMemoryBarrierByRegion(int);
  public static native void glProgramUniform1f(int, int, float);
  public static native void glProgramUniform1fv(int, int, int, float[], int);
  public static native void glProgramUniform1fv(int, int, int, java.nio.FloatBuffer);
  public static native void glProgramUniform1i(int, int, int);
  public static native void glProgramUniform1iv(int, int, int, int[], int);
  public static native void glProgramUniform1iv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniform1ui(int, int, int);
  public static native void glProgramUniform1uiv(int, int, int, int[], int);
  public static native void glProgramUniform1uiv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniform2f(int, int, float, float);
  public static native void glProgramUniform2fv(int, int, int, float[], int);
  public static native void glProgramUniform2fv(int, int, int, java.nio.FloatBuffer);
  public static native void glProgramUniform2i(int, int, int, int);
  public static native void glProgramUniform2iv(int, int, int, int[], int);
  public static native void glProgramUniform2iv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniform2ui(int, int, int, int);
  public static native void glProgramUniform2uiv(int, int, int, int[], int);
  public static native void glProgramUniform2uiv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniform3f(int, int, float, float, float);
  public static native void glProgramUniform3fv(int, int, int, float[], int);
  public static native void glProgramUniform3fv(int, int, int, java.nio.FloatBuffer);
  public static native void glProgramUniform3i(int, int, int, int, int);
  public static native void glProgramUniform3iv(int, int, int, int[], int);
  public static native void glProgramUniform3iv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniform3ui(int, int, int, int, int);
  public static native void glProgramUniform3uiv(int, int, int, int[], int);
  public static native void glProgramUniform3uiv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniform4f(int, int, float, float, float, float);
  public static native void glProgramUniform4fv(int, int, int, float[], int);
  public static native void glProgramUniform4fv(int, int, int, java.nio.FloatBuffer);
  public static native void glProgramUniform4i(int, int, int, int, int, int);
  public static native void glProgramUniform4iv(int, int, int, int[], int);
  public static native void glProgramUniform4iv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniform4ui(int, int, int, int, int, int);
  public static native void glProgramUniform4uiv(int, int, int, int[], int);
  public static native void glProgramUniform4uiv(int, int, int, java.nio.IntBuffer);
  public static native void glProgramUniformMatrix2fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix2fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix2x3fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix2x3fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix2x4fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix2x4fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix3fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix3fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix3x2fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix3x2fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix3x4fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix3x4fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix4fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix4fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix4x2fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix4x2fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glProgramUniformMatrix4x3fv(int, int, int, boolean, float[], int);
  public static native void glProgramUniformMatrix4x3fv(int, int, int, boolean, java.nio.FloatBuffer);
  public static native void glSampleMaski(int, int);
  public static native void glTexStorage2DMultisample(int, int, int, int, int, boolean);
  public static native void glUseProgramStages(int, int, int);
  public static native void glValidateProgramPipeline(int);
  public static native void glVertexAttribBinding(int, int);
  public static native void glVertexAttribFormat(int, int, int, boolean, int);
  public static native void glVertexAttribIFormat(int, int, int, int);
  public static native void glVertexBindingDivisor(int, int);
  public static native java.lang.String glGetProgramPipelineInfoLog(int);
  public static native java.lang.String glGetProgramResourceName(int, int, int);
  public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_ACTIVE_PROGRAM;
  public static final int GL_ACTIVE_RESOURCES;
  public static final int GL_ACTIVE_VARIABLES;
  public static final int GL_ALL_BARRIER_BITS;
  public static final int GL_ALL_SHADER_BITS;
  public static final int GL_ARRAY_SIZE;
  public static final int GL_ARRAY_STRIDE;
  public static final int GL_ATOMIC_COUNTER_BARRIER_BIT;
  public static final int GL_ATOMIC_COUNTER_BUFFER;
  public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING;
  public static final int GL_ATOMIC_COUNTER_BUFFER_INDEX;
  public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE;
  public static final int GL_ATOMIC_COUNTER_BUFFER_START;
  public static final int GL_BLOCK_INDEX;
  public static final int GL_BUFFER_BINDING;
  public static final int GL_BUFFER_DATA_SIZE;
  public static final int GL_BUFFER_UPDATE_BARRIER_BIT;
  public static final int GL_BUFFER_VARIABLE;
  public static final int GL_COMMAND_BARRIER_BIT;
  public static final int GL_COMPUTE_SHADER;
  public static final int GL_COMPUTE_SHADER_BIT;
  public static final int GL_COMPUTE_WORK_GROUP_SIZE;
  public static final int GL_DEPTH_STENCIL_TEXTURE_MODE;
  public static final int GL_DISPATCH_INDIRECT_BUFFER;
  public static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING;
  public static final int GL_DRAW_INDIRECT_BUFFER;
  public static final int GL_DRAW_INDIRECT_BUFFER_BINDING;
  public static final int GL_ELEMENT_ARRAY_BARRIER_BIT;
  public static final int GL_FRAGMENT_SHADER_BIT;
  public static final int GL_FRAMEBUFFER_BARRIER_BIT;
  public static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS;
  public static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT;
  public static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES;
  public static final int GL_FRAMEBUFFER_DEFAULT_WIDTH;
  public static final int GL_IMAGE_2D;
  public static final int GL_IMAGE_2D_ARRAY;
  public static final int GL_IMAGE_3D;
  public static final int GL_IMAGE_BINDING_ACCESS;
  public static final int GL_IMAGE_BINDING_FORMAT;
  public static final int GL_IMAGE_BINDING_LAYER;
  public static final int GL_IMAGE_BINDING_LAYERED;
  public static final int GL_IMAGE_BINDING_LEVEL;
  public static final int GL_IMAGE_BINDING_NAME;
  public static final int GL_IMAGE_CUBE;
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS;
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE;
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE;
  public static final int GL_INT_IMAGE_2D;
  public static final int GL_INT_IMAGE_2D_ARRAY;
  public static final int GL_INT_IMAGE_3D;
  public static final int GL_INT_IMAGE_CUBE;
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE;
  public static final int GL_IS_ROW_MAJOR;
  public static final int GL_LOCATION;
  public static final int GL_MATRIX_STRIDE;
  public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS;
  public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE;
  public static final int GL_MAX_COLOR_TEXTURE_SAMPLES;
  public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS;
  public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS;
  public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS;
  public static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES;
  public static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS;
  public static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS;
  public static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS;
  public static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS;
  public static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE;
  public static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS;
  public static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS;
  public static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS;
  public static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT;
  public static final int GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS;
  public static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE;
  public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES;
  public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS;
  public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS;
  public static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS;
  public static final int GL_MAX_FRAMEBUFFER_HEIGHT;
  public static final int GL_MAX_FRAMEBUFFER_SAMPLES;
  public static final int GL_MAX_FRAMEBUFFER_WIDTH;
  public static final int GL_MAX_IMAGE_UNITS;
  public static final int GL_MAX_INTEGER_SAMPLES;
  public static final int GL_MAX_NAME_LENGTH;
  public static final int GL_MAX_NUM_ACTIVE_VARIABLES;
  public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET;
  public static final int GL_MAX_SAMPLE_MASK_WORDS;
  public static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE;
  public static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS;
  public static final int GL_MAX_UNIFORM_LOCATIONS;
  public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS;
  public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_MAX_VERTEX_ATTRIB_BINDINGS;
  public static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET;
  public static final int GL_MAX_VERTEX_ATTRIB_STRIDE;
  public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS;
  public static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS;
  public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET;
  public static final int GL_NAME_LENGTH;
  public static final int GL_NUM_ACTIVE_VARIABLES;
  public static final int GL_OFFSET;
  public static final int GL_PIXEL_BUFFER_BARRIER_BIT;
  public static final int GL_PROGRAM_INPUT;
  public static final int GL_PROGRAM_OUTPUT;
  public static final int GL_PROGRAM_PIPELINE_BINDING;
  public static final int GL_PROGRAM_SEPARABLE;
  public static final int GL_READ_ONLY;
  public static final int GL_READ_WRITE;
  public static final int GL_REFERENCED_BY_COMPUTE_SHADER;
  public static final int GL_REFERENCED_BY_FRAGMENT_SHADER;
  public static final int GL_REFERENCED_BY_VERTEX_SHADER;
  public static final int GL_SAMPLER_2D_MULTISAMPLE;
  public static final int GL_SAMPLE_MASK;
  public static final int GL_SAMPLE_MASK_VALUE;
  public static final int GL_SAMPLE_POSITION;
  public static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT;
  public static final int GL_SHADER_STORAGE_BARRIER_BIT;
  public static final int GL_SHADER_STORAGE_BLOCK;
  public static final int GL_SHADER_STORAGE_BUFFER;
  public static final int GL_SHADER_STORAGE_BUFFER_BINDING;
  public static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT;
  public static final int GL_SHADER_STORAGE_BUFFER_SIZE;
  public static final int GL_SHADER_STORAGE_BUFFER_START;
  public static final int GL_STENCIL_INDEX;
  public static final int GL_TEXTURE_2D_MULTISAMPLE;
  public static final int GL_TEXTURE_ALPHA_SIZE;
  public static final int GL_TEXTURE_ALPHA_TYPE;
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE;
  public static final int GL_TEXTURE_BLUE_SIZE;
  public static final int GL_TEXTURE_BLUE_TYPE;
  public static final int GL_TEXTURE_COMPRESSED;
  public static final int GL_TEXTURE_DEPTH;
  public static final int GL_TEXTURE_DEPTH_SIZE;
  public static final int GL_TEXTURE_DEPTH_TYPE;
  public static final int GL_TEXTURE_FETCH_BARRIER_BIT;
  public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS;
  public static final int GL_TEXTURE_GREEN_SIZE;
  public static final int GL_TEXTURE_GREEN_TYPE;
  public static final int GL_TEXTURE_HEIGHT;
  public static final int GL_TEXTURE_INTERNAL_FORMAT;
  public static final int GL_TEXTURE_RED_SIZE;
  public static final int GL_TEXTURE_RED_TYPE;
  public static final int GL_TEXTURE_SAMPLES;
  public static final int GL_TEXTURE_SHARED_SIZE;
  public static final int GL_TEXTURE_STENCIL_SIZE;
  public static final int GL_TEXTURE_UPDATE_BARRIER_BIT;
  public static final int GL_TEXTURE_WIDTH;
  public static final int GL_TOP_LEVEL_ARRAY_SIZE;
  public static final int GL_TOP_LEVEL_ARRAY_STRIDE;
  public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT;
  public static final int GL_TRANSFORM_FEEDBACK_VARYING;
  public static final int GL_TYPE;
  public static final int GL_UNIFORM;
  public static final int GL_UNIFORM_BARRIER_BIT;
  public static final int GL_UNIFORM_BLOCK;
  public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER;
  public static final int GL_UNSIGNED_INT_IMAGE_2D;
  public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY;
  public static final int GL_UNSIGNED_INT_IMAGE_3D;
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE;
  public static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT;
  public static final int GL_VERTEX_ATTRIB_BINDING;
  public static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET;
  public static final int GL_VERTEX_BINDING_BUFFER;
  public static final int GL_VERTEX_BINDING_DIVISOR;
  public static final int GL_VERTEX_BINDING_OFFSET;
  public static final int GL_VERTEX_BINDING_STRIDE;
  public static final int GL_VERTEX_SHADER_BIT;
  public static final int GL_WRITE_ONLY;
}
public class android.opengl.GLES31Ext
  extends java.lang.Object
{
  public static native boolean glIsEnablediEXT(int, int);
  public static native int glGetDebugMessageLogKHR(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int);
  public static native int glGetDebugMessageLogKHR(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer);
  public static native void glBlendBarrierKHR();
  public static native void glBlendEquationSeparateiEXT(int, int, int);
  public static native void glBlendEquationiEXT(int, int);
  public static native void glBlendFuncSeparateiEXT(int, int, int, int, int);
  public static native void glBlendFunciEXT(int, int, int);
  public static native void glColorMaskiEXT(int, boolean, boolean, boolean, boolean);
  public static native void glCopyImageSubDataEXT(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
  public static native void glDebugMessageCallbackKHR(android.opengl.GLES31Ext$DebugProcKHR);
  public static native void glDebugMessageControlKHR(int, int, int, int, int[], int, boolean);
  public static native void glDebugMessageControlKHR(int, int, int, int, java.nio.IntBuffer, boolean);
  public static native void glDebugMessageInsertKHR(int, int, int, int, java.lang.String);
  public static native void glDisableiEXT(int, int);
  public static native void glEnableiEXT(int, int);
  public static native void glFramebufferTextureEXT(int, int, int, int);
  public static native void glGetSamplerParameterIivEXT(int, int, int[], int);
  public static native void glGetSamplerParameterIivEXT(int, int, java.nio.IntBuffer);
  public static native void glGetSamplerParameterIuivEXT(int, int, int[], int);
  public static native void glGetSamplerParameterIuivEXT(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterIivEXT(int, int, int[], int);
  public static native void glGetTexParameterIivEXT(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterIuivEXT(int, int, int[], int);
  public static native void glGetTexParameterIuivEXT(int, int, java.nio.IntBuffer);
  public static native void glMinSampleShadingOES(float);
  public static native void glObjectLabelKHR(int, int, int, java.lang.String);
  public static native void glObjectPtrLabelKHR(long, java.lang.String);
  public static native void glPatchParameteriEXT(int, int);
  public static native void glPopDebugGroupKHR();
  public static native void glPrimitiveBoundingBoxEXT(float, float, float, float, float, float, float, float);
  public static native void glPushDebugGroupKHR(int, int, int, java.lang.String);
  public static native void glSamplerParameterIivEXT(int, int, int[], int);
  public static native void glSamplerParameterIivEXT(int, int, java.nio.IntBuffer);
  public static native void glSamplerParameterIuivEXT(int, int, int[], int);
  public static native void glSamplerParameterIuivEXT(int, int, java.nio.IntBuffer);
  public static native void glTexBufferEXT(int, int, int);
  public static native void glTexBufferRangeEXT(int, int, int, int, int);
  public static native void glTexParameterIivEXT(int, int, int[], int);
  public static native void glTexParameterIivEXT(int, int, java.nio.IntBuffer);
  public static native void glTexParameterIuivEXT(int, int, int[], int);
  public static native void glTexParameterIuivEXT(int, int, java.nio.IntBuffer);
  public static native void glTexStorage3DMultisampleOES(int, int, int, int, int, int, boolean);
  public static native android.opengl.GLES31Ext$DebugProcKHR glGetDebugMessageCallbackKHR();
  public static native java.lang.String glGetObjectLabelKHR(int, int);
  public static native java.lang.String glGetObjectPtrLabelKHR(long);
  public static native java.lang.String[] glGetDebugMessageLogKHR(int, int[], int, int[], int, int[], int, int[], int);
  public static native java.lang.String[] glGetDebugMessageLogKHR(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer);
  public static final int GL_BLEND_ADVANCED_COHERENT_KHR;
  public static final int GL_BUFFER_KHR;
  public static final int GL_CLAMP_TO_BORDER_EXT;
  public static final int GL_COLORBURN_KHR;
  public static final int GL_COLORDODGE_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x10_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x5_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x6_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x8_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_12x10_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_12x12_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_4x4_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_5x4_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_5x5_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_6x5_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_6x6_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_8x5_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_8x6_KHR;
  public static final int GL_COMPRESSED_RGBA_ASTC_8x8_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
  public static final int GL_CONTEXT_FLAG_DEBUG_BIT_KHR;
  public static final int GL_DARKEN_KHR;
  public static final int GL_DEBUG_CALLBACK_FUNCTION_KHR;
  public static final int GL_DEBUG_CALLBACK_USER_PARAM_KHR;
  public static final int GL_DEBUG_GROUP_STACK_DEPTH_KHR;
  public static final int GL_DEBUG_LOGGED_MESSAGES_KHR;
  public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR;
  public static final int GL_DEBUG_OUTPUT_KHR;
  public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR;
  public static final int GL_DEBUG_SEVERITY_HIGH_KHR;
  public static final int GL_DEBUG_SEVERITY_LOW_KHR;
  public static final int GL_DEBUG_SEVERITY_MEDIUM_KHR;
  public static final int GL_DEBUG_SEVERITY_NOTIFICATION_KHR;
  public static final int GL_DEBUG_SOURCE_API_KHR;
  public static final int GL_DEBUG_SOURCE_APPLICATION_KHR;
  public static final int GL_DEBUG_SOURCE_OTHER_KHR;
  public static final int GL_DEBUG_SOURCE_SHADER_COMPILER_KHR;
  public static final int GL_DEBUG_SOURCE_THIRD_PARTY_KHR;
  public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR;
  public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR;
  public static final int GL_DEBUG_TYPE_ERROR_KHR;
  public static final int GL_DEBUG_TYPE_MARKER_KHR;
  public static final int GL_DEBUG_TYPE_OTHER_KHR;
  public static final int GL_DEBUG_TYPE_PERFORMANCE_KHR;
  public static final int GL_DEBUG_TYPE_POP_GROUP_KHR;
  public static final int GL_DEBUG_TYPE_PORTABILITY_KHR;
  public static final int GL_DEBUG_TYPE_PUSH_GROUP_KHR;
  public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR;
  public static final int GL_DECODE_EXT;
  public static final int GL_DIFFERENCE_KHR;
  public static final int GL_EXCLUSION_KHR;
  public static final int GL_FIRST_VERTEX_CONVENTION_EXT;
  public static final int GL_FRACTIONAL_EVEN_EXT;
  public static final int GL_FRACTIONAL_ODD_EXT;
  public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT;
  public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT;
  public static final int GL_GEOMETRY_LINKED_INPUT_TYPE_EXT;
  public static final int GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT;
  public static final int GL_GEOMETRY_LINKED_VERTICES_OUT_EXT;
  public static final int GL_GEOMETRY_SHADER_BIT_EXT;
  public static final int GL_GEOMETRY_SHADER_EXT;
  public static final int GL_GEOMETRY_SHADER_INVOCATIONS_EXT;
  public static final int GL_HARDLIGHT_KHR;
  public static final int GL_HSL_COLOR_KHR;
  public static final int GL_HSL_HUE_KHR;
  public static final int GL_HSL_LUMINOSITY_KHR;
  public static final int GL_HSL_SATURATION_KHR;
  public static final int GL_IMAGE_BUFFER_EXT;
  public static final int GL_IMAGE_CUBE_MAP_ARRAY_EXT;
  public static final int GL_INT_IMAGE_BUFFER_EXT;
  public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT;
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES;
  public static final int GL_INT_SAMPLER_BUFFER_EXT;
  public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT;
  public static final int GL_ISOLINES_EXT;
  public static final int GL_IS_PER_PATCH_EXT;
  public static final int GL_LAST_VERTEX_CONVENTION_EXT;
  public static final int GL_LAYER_PROVOKING_VERTEX_EXT;
  public static final int GL_LIGHTEN_KHR;
  public static final int GL_LINES_ADJACENCY_EXT;
  public static final int GL_LINE_STRIP_ADJACENCY_EXT;
  public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT;
  public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT;
  public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT;
  public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR;
  public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_KHR;
  public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_KHR;
  public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES;
  public static final int GL_MAX_FRAMEBUFFER_LAYERS_EXT;
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT;
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT;
  public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT;
  public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT;
  public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT;
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT;
  public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT;
  public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT;
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT;
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT;
  public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT;
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT;
  public static final int GL_MAX_LABEL_LENGTH_KHR;
  public static final int GL_MAX_PATCH_VERTICES_EXT;
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT;
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT;
  public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT;
  public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT;
  public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT;
  public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT;
  public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT;
  public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT;
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT;
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT;
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT;
  public static final int GL_MAX_TESS_GEN_LEVEL_EXT;
  public static final int GL_MAX_TESS_PATCH_COMPONENTS_EXT;
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT;
  public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES;
  public static final int GL_MIN_SAMPLE_SHADING_VALUE_OES;
  public static final int GL_MULTIPLY_KHR;
  public static final int GL_OVERLAY_KHR;
  public static final int GL_PATCHES_EXT;
  public static final int GL_PATCH_VERTICES_EXT;
  public static final int GL_PRIMITIVES_GENERATED_EXT;
  public static final int GL_PRIMITIVE_BOUNDING_BOX_EXT;
  public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED;
  public static final int GL_PROGRAM_KHR;
  public static final int GL_QUADS_EXT;
  public static final int GL_QUERY_KHR;
  public static final int GL_REFERENCED_BY_GEOMETRY_SHADER_EXT;
  public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT;
  public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT;
  public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES;
  public static final int GL_SAMPLER_BUFFER_EXT;
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_EXT;
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT;
  public static final int GL_SAMPLER_KHR;
  public static final int GL_SAMPLE_SHADING_OES;
  public static final int GL_SCREEN_KHR;
  public static final int GL_SHADER_KHR;
  public static final int GL_SKIP_DECODE_EXT;
  public static final int GL_SOFTLIGHT_KHR;
  public static final int GL_STACK_OVERFLOW_KHR;
  public static final int GL_STACK_UNDERFLOW_KHR;
  public static final int GL_STENCIL_INDEX8_OES;
  public static final int GL_STENCIL_INDEX_OES;
  public static final int GL_TESS_CONTROL_OUTPUT_VERTICES_EXT;
  public static final int GL_TESS_CONTROL_SHADER_BIT_EXT;
  public static final int GL_TESS_CONTROL_SHADER_EXT;
  public static final int GL_TESS_EVALUATION_SHADER_BIT_EXT;
  public static final int GL_TESS_EVALUATION_SHADER_EXT;
  public static final int GL_TESS_GEN_MODE_EXT;
  public static final int GL_TESS_GEN_POINT_MODE_EXT;
  public static final int GL_TESS_GEN_SPACING_EXT;
  public static final int GL_TESS_GEN_VERTEX_ORDER_EXT;
  public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES;
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES;
  public static final int GL_TEXTURE_BINDING_BUFFER_EXT;
  public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT;
  public static final int GL_TEXTURE_BORDER_COLOR_EXT;
  public static final int GL_TEXTURE_BUFFER_BINDING_EXT;
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT;
  public static final int GL_TEXTURE_BUFFER_EXT;
  public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT;
  public static final int GL_TEXTURE_BUFFER_OFFSET_EXT;
  public static final int GL_TEXTURE_BUFFER_SIZE_EXT;
  public static final int GL_TEXTURE_CUBE_MAP_ARRAY_EXT;
  public static final int GL_TEXTURE_SRGB_DECODE_EXT;
  public static final int GL_TRIANGLES_ADJACENCY_EXT;
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT;
  public static final int GL_UNDEFINED_VERTEX_EXT;
  public static final int GL_UNSIGNED_INT_IMAGE_BUFFER_EXT;
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES;
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT;
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT;
  public static final int GL_VERTEX_ARRAY_KHR;
}
public interface android.opengl.GLES31Ext$DebugProcKHR
{
  public abstract void onMessage(int, int, int, int, java.lang.String);
}
public class android.opengl.GLES32
  extends android.opengl.GLES31
{
  public static native boolean glIsEnabledi(int, int);
  public static native int glGetDebugMessageLog(int, int, int[], int, int[], int, int[], int, int[], int, int[], int, byte[], int);
  public static native int glGetDebugMessageLog(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.ByteBuffer);
  public static native int glGetGraphicsResetStatus();
  public static native long glGetPointerv(int);
  public static native void glBlendBarrier();
  public static native void glBlendEquationSeparatei(int, int, int);
  public static native void glBlendEquationi(int, int);
  public static native void glBlendFuncSeparatei(int, int, int, int, int);
  public static native void glBlendFunci(int, int, int);
  public static native void glColorMaski(int, boolean, boolean, boolean, boolean);
  public static native void glCopyImageSubData(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
  public static native void glDebugMessageCallback(android.opengl.GLES32$DebugProc);
  public static native void glDebugMessageControl(int, int, int, int, int[], int, boolean);
  public static native void glDebugMessageControl(int, int, int, int, java.nio.IntBuffer, boolean);
  public static native void glDebugMessageInsert(int, int, int, int, int, java.lang.String);
  public static native void glDisablei(int, int);
  public static native void glDrawElementsBaseVertex(int, int, int, java.nio.Buffer, int);
  public static native void glDrawElementsInstancedBaseVertex(int, int, int, int, int, int);
  public static native void glDrawElementsInstancedBaseVertex(int, int, int, java.nio.Buffer, int, int);
  public static native void glDrawRangeElementsBaseVertex(int, int, int, int, int, java.nio.Buffer, int);
  public static native void glEnablei(int, int);
  public static native void glFramebufferTexture(int, int, int, int);
  public static native void glGetSamplerParameterIiv(int, int, int[], int);
  public static native void glGetSamplerParameterIiv(int, int, java.nio.IntBuffer);
  public static native void glGetSamplerParameterIuiv(int, int, int[], int);
  public static native void glGetSamplerParameterIuiv(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterIiv(int, int, int[], int);
  public static native void glGetTexParameterIiv(int, int, java.nio.IntBuffer);
  public static native void glGetTexParameterIuiv(int, int, int[], int);
  public static native void glGetTexParameterIuiv(int, int, java.nio.IntBuffer);
  public static native void glGetnUniformfv(int, int, int, float[], int);
  public static native void glGetnUniformfv(int, int, int, java.nio.FloatBuffer);
  public static native void glGetnUniformiv(int, int, int, int[], int);
  public static native void glGetnUniformiv(int, int, int, java.nio.IntBuffer);
  public static native void glGetnUniformuiv(int, int, int, int[], int);
  public static native void glGetnUniformuiv(int, int, int, java.nio.IntBuffer);
  public static native void glMinSampleShading(float);
  public static native void glObjectLabel(int, int, int, java.lang.String);
  public static native void glObjectPtrLabel(long, java.lang.String);
  public static native void glPatchParameteri(int, int);
  public static native void glPopDebugGroup();
  public static native void glPrimitiveBoundingBox(float, float, float, float, float, float, float, float);
  public static native void glPushDebugGroup(int, int, int, java.lang.String);
  public static native void glReadnPixels(int, int, int, int, int, int, int, java.nio.Buffer);
  public static native void glSamplerParameterIiv(int, int, int[], int);
  public static native void glSamplerParameterIiv(int, int, java.nio.IntBuffer);
  public static native void glSamplerParameterIuiv(int, int, int[], int);
  public static native void glSamplerParameterIuiv(int, int, java.nio.IntBuffer);
  public static native void glTexBuffer(int, int, int);
  public static native void glTexBufferRange(int, int, int, int, int);
  public static native void glTexParameterIiv(int, int, int[], int);
  public static native void glTexParameterIiv(int, int, java.nio.IntBuffer);
  public static native void glTexParameterIuiv(int, int, int[], int);
  public static native void glTexParameterIuiv(int, int, java.nio.IntBuffer);
  public static native void glTexStorage3DMultisample(int, int, int, int, int, int, boolean);
  public static native java.lang.String glGetObjectLabel(int, int);
  public static native java.lang.String glGetObjectPtrLabel(long);
  public static native java.lang.String[] glGetDebugMessageLog(int, int[], int, int[], int, int[], int, int[], int);
  public static native java.lang.String[] glGetDebugMessageLog(int, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer);
  public static final int GL_BUFFER;
  public static final int GL_CLAMP_TO_BORDER;
  public static final int GL_COLORBURN;
  public static final int GL_COLORDODGE;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x10;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x5;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x6;
  public static final int GL_COMPRESSED_RGBA_ASTC_10x8;
  public static final int GL_COMPRESSED_RGBA_ASTC_12x10;
  public static final int GL_COMPRESSED_RGBA_ASTC_12x12;
  public static final int GL_COMPRESSED_RGBA_ASTC_4x4;
  public static final int GL_COMPRESSED_RGBA_ASTC_5x4;
  public static final int GL_COMPRESSED_RGBA_ASTC_5x5;
  public static final int GL_COMPRESSED_RGBA_ASTC_6x5;
  public static final int GL_COMPRESSED_RGBA_ASTC_6x6;
  public static final int GL_COMPRESSED_RGBA_ASTC_8x5;
  public static final int GL_COMPRESSED_RGBA_ASTC_8x6;
  public static final int GL_COMPRESSED_RGBA_ASTC_8x8;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6;
  public static final int GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8;
  public static final int GL_CONTEXT_FLAGS;
  public static final int GL_CONTEXT_FLAG_DEBUG_BIT;
  public static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT;
  public static final int GL_CONTEXT_LOST;
  public static final int GL_DARKEN;
  public static final int GL_DEBUG_CALLBACK_FUNCTION;
  public static final int GL_DEBUG_CALLBACK_USER_PARAM;
  public static final int GL_DEBUG_GROUP_STACK_DEPTH;
  public static final int GL_DEBUG_LOGGED_MESSAGES;
  public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH;
  public static final int GL_DEBUG_OUTPUT;
  public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS;
  public static final int GL_DEBUG_SEVERITY_HIGH;
  public static final int GL_DEBUG_SEVERITY_LOW;
  public static final int GL_DEBUG_SEVERITY_MEDIUM;
  public static final int GL_DEBUG_SEVERITY_NOTIFICATION;
  public static final int GL_DEBUG_SOURCE_API;
  public static final int GL_DEBUG_SOURCE_APPLICATION;
  public static final int GL_DEBUG_SOURCE_OTHER;
  public static final int GL_DEBUG_SOURCE_SHADER_COMPILER;
  public static final int GL_DEBUG_SOURCE_THIRD_PARTY;
  public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM;
  public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR;
  public static final int GL_DEBUG_TYPE_ERROR;
  public static final int GL_DEBUG_TYPE_MARKER;
  public static final int GL_DEBUG_TYPE_OTHER;
  public static final int GL_DEBUG_TYPE_PERFORMANCE;
  public static final int GL_DEBUG_TYPE_POP_GROUP;
  public static final int GL_DEBUG_TYPE_PORTABILITY;
  public static final int GL_DEBUG_TYPE_PUSH_GROUP;
  public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR;
  public static final int GL_DIFFERENCE;
  public static final int GL_EXCLUSION;
  public static final int GL_FIRST_VERTEX_CONVENTION;
  public static final int GL_FRACTIONAL_EVEN;
  public static final int GL_FRACTIONAL_ODD;
  public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED;
  public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS;
  public static final int GL_GEOMETRY_INPUT_TYPE;
  public static final int GL_GEOMETRY_OUTPUT_TYPE;
  public static final int GL_GEOMETRY_SHADER;
  public static final int GL_GEOMETRY_SHADER_BIT;
  public static final int GL_GEOMETRY_SHADER_INVOCATIONS;
  public static final int GL_GEOMETRY_VERTICES_OUT;
  public static final int GL_GUILTY_CONTEXT_RESET;
  public static final int GL_HARDLIGHT;
  public static final int GL_HSL_COLOR;
  public static final int GL_HSL_HUE;
  public static final int GL_HSL_LUMINOSITY;
  public static final int GL_HSL_SATURATION;
  public static final int GL_IMAGE_BUFFER;
  public static final int GL_IMAGE_CUBE_MAP_ARRAY;
  public static final int GL_INNOCENT_CONTEXT_RESET;
  public static final int GL_INT_IMAGE_BUFFER;
  public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY;
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY;
  public static final int GL_INT_SAMPLER_BUFFER;
  public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY;
  public static final int GL_ISOLINES;
  public static final int GL_IS_PER_PATCH;
  public static final int GL_LAST_VERTEX_CONVENTION;
  public static final int GL_LAYER_PROVOKING_VERTEX;
  public static final int GL_LIGHTEN;
  public static final int GL_LINES_ADJACENCY;
  public static final int GL_LINE_STRIP_ADJACENCY;
  public static final int GL_LOSE_CONTEXT_ON_RESET;
  public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS;
  public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS;
  public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS;
  public static final int GL_MAX_DEBUG_GROUP_STACK_DEPTH;
  public static final int GL_MAX_DEBUG_LOGGED_MESSAGES;
  public static final int GL_MAX_DEBUG_MESSAGE_LENGTH;
  public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET;
  public static final int GL_MAX_FRAMEBUFFER_LAYERS;
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS;
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS;
  public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS;
  public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS;
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES;
  public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS;
  public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS;
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS;
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS;
  public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS;
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS;
  public static final int GL_MAX_LABEL_LENGTH;
  public static final int GL_MAX_PATCH_VERTICES;
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS;
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS;
  public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS;
  public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS;
  public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS;
  public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS;
  public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS;
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS;
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS;
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS;
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS;
  public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS;
  public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS;
  public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS;
  public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS;
  public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS;
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS;
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS;
  public static final int GL_MAX_TESS_GEN_LEVEL;
  public static final int GL_MAX_TESS_PATCH_COMPONENTS;
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE;
  public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET;
  public static final int GL_MIN_SAMPLE_SHADING_VALUE;
  public static final int GL_MULTIPLY;
  public static final int GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY;
  public static final int GL_MULTISAMPLE_LINE_WIDTH_RANGE;
  public static final int GL_NO_RESET_NOTIFICATION;
  public static final int GL_OVERLAY;
  public static final int GL_PATCHES;
  public static final int GL_PATCH_VERTICES;
  public static final int GL_PRIMITIVES_GENERATED;
  public static final int GL_PRIMITIVE_BOUNDING_BOX;
  public static final int GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED;
  public static final int GL_PROGRAM;
  public static final int GL_PROGRAM_PIPELINE;
  public static final int GL_QUADS;
  public static final int GL_QUERY;
  public static final int GL_REFERENCED_BY_GEOMETRY_SHADER;
  public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER;
  public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER;
  public static final int GL_RESET_NOTIFICATION_STRATEGY;
  public static final int GL_SAMPLER;
  public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY;
  public static final int GL_SAMPLER_BUFFER;
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY;
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW;
  public static final int GL_SAMPLE_SHADING;
  public static final int GL_SCREEN;
  public static final int GL_SHADER;
  public static final int GL_SOFTLIGHT;
  public static final int GL_STACK_OVERFLOW;
  public static final int GL_STACK_UNDERFLOW;
  public static final int GL_TESS_CONTROL_OUTPUT_VERTICES;
  public static final int GL_TESS_CONTROL_SHADER;
  public static final int GL_TESS_CONTROL_SHADER_BIT;
  public static final int GL_TESS_EVALUATION_SHADER;
  public static final int GL_TESS_EVALUATION_SHADER_BIT;
  public static final int GL_TESS_GEN_MODE;
  public static final int GL_TESS_GEN_POINT_MODE;
  public static final int GL_TESS_GEN_SPACING;
  public static final int GL_TESS_GEN_VERTEX_ORDER;
  public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY;
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY;
  public static final int GL_TEXTURE_BINDING_BUFFER;
  public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY;
  public static final int GL_TEXTURE_BORDER_COLOR;
  public static final int GL_TEXTURE_BUFFER;
  public static final int GL_TEXTURE_BUFFER_BINDING;
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING;
  public static final int GL_TEXTURE_BUFFER_OFFSET;
  public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT;
  public static final int GL_TEXTURE_BUFFER_SIZE;
  public static final int GL_TEXTURE_CUBE_MAP_ARRAY;
  public static final int GL_TRIANGLES_ADJACENCY;
  public static final int GL_TRIANGLE_STRIP_ADJACENCY;
  public static final int GL_UNDEFINED_VERTEX;
  public static final int GL_UNKNOWN_CONTEXT_RESET;
  public static final int GL_UNSIGNED_INT_IMAGE_BUFFER;
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY;
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER;
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY;
  public static final int GL_VERTEX_ARRAY;
}
public interface android.opengl.GLES32$DebugProc
{
  public abstract void onMessage(int, int, int, int, java.lang.String);
}
public class android.opengl.GLException
  extends java.lang.RuntimeException
{
  public void <init>(int);
  public void <init>(int, java.lang.String);
}
public class android.opengl.GLSurfaceView
  extends android.view.SurfaceView
  implements android.view.SurfaceHolder$Callback2
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean getPreserveEGLContextOnPause();
  public int getDebugFlags();
  public int getRenderMode();
  public void onPause();
  public void onResume();
  public void queueEvent(java.lang.Runnable);
  public void requestRender();
  public void setDebugFlags(int);
  public void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser);
  public void setEGLConfigChooser(boolean);
  public void setEGLConfigChooser(int, int, int, int, int, int);
  public void setEGLContextClientVersion(int);
  public void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory);
  public void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory);
  public void setGLWrapper(android.opengl.GLSurfaceView$GLWrapper);
  public void setPreserveEGLContextOnPause(boolean);
  public void setRenderMode(int);
  public void setRenderer(android.opengl.GLSurfaceView$Renderer);
  public void surfaceChanged(android.view.SurfaceHolder, int, int, int);
  public void surfaceCreated(android.view.SurfaceHolder);
  public void surfaceDestroyed(android.view.SurfaceHolder);
  public void surfaceRedrawNeeded(android.view.SurfaceHolder);
  protected void finalize()  throws java.lang.Throwable;
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  public static final int DEBUG_CHECK_GL_ERROR;
  public static final int DEBUG_LOG_GL_CALLS;
  public static final int RENDERMODE_CONTINUOUSLY;
  public static final int RENDERMODE_WHEN_DIRTY;
}
public interface android.opengl.GLSurfaceView$EGLConfigChooser
{
  public abstract javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay);
}
public interface android.opengl.GLSurfaceView$EGLContextFactory
{
  public abstract void destroyContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext);
  public abstract javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig);
}
public interface android.opengl.GLSurfaceView$EGLWindowSurfaceFactory
{
  public abstract void destroySurface(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public abstract javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object);
}
public interface android.opengl.GLSurfaceView$GLWrapper
{
  public abstract javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL);
}
public interface android.opengl.GLSurfaceView$Renderer
{
  public abstract void onDrawFrame(javax.microedition.khronos.opengles.GL10);
  public abstract void onSurfaceChanged(javax.microedition.khronos.opengles.GL10, int, int);
  public abstract void onSurfaceCreated(javax.microedition.khronos.opengles.GL10, javax.microedition.khronos.egl.EGLConfig);
}
public class android.opengl.GLU
  extends java.lang.Object
{
  public static int gluProject(float, float, float, float[], int, float[], int, int[], int, float[], int);
  public static int gluUnProject(float, float, float, float[], int, float[], int, int[], int, float[], int);
  public static void gluLookAt(javax.microedition.khronos.opengles.GL10, float, float, float, float, float, float, float, float, float);
  public static void gluOrtho2D(javax.microedition.khronos.opengles.GL10, float, float, float, float);
  public static void gluPerspective(javax.microedition.khronos.opengles.GL10, float, float, float, float);
  public static java.lang.String gluErrorString(int);
  public void <init>();
}
public final class android.opengl.GLUtils
  extends java.lang.Object
{
  public static int getInternalFormat(android.graphics.Bitmap);
  public static int getType(android.graphics.Bitmap);
  public static void texImage2D(int, int, android.graphics.Bitmap, int);
  public static void texImage2D(int, int, int, android.graphics.Bitmap, int);
  public static void texImage2D(int, int, int, android.graphics.Bitmap, int, int);
  public static void texSubImage2D(int, int, int, int, android.graphics.Bitmap);
  public static void texSubImage2D(int, int, int, int, android.graphics.Bitmap, int, int);
  public static java.lang.String getEGLErrorString(int);
}
public class android.opengl.Matrix
  extends java.lang.Object
{
  public static boolean invertM(float[], int, float[], int);
  public static float length(float, float, float);
  public static native void multiplyMM(float[], int, float[], int, float[], int);
  public static native void multiplyMV(float[], int, float[], int, float[], int);
  public static void frustumM(float[], int, float, float, float, float, float, float);
  public static void orthoM(float[], int, float, float, float, float, float, float);
  public static void perspectiveM(float[], int, float, float, float, float);
  public static void rotateM(float[], int, float, float, float, float);
  public static void rotateM(float[], int, float[], int, float, float, float, float);
  public static void scaleM(float[], int, float, float, float);
  public static void scaleM(float[], int, float[], int, float, float, float);
  public static void setIdentityM(float[], int);
  public static void setLookAtM(float[], int, float, float, float, float, float, float, float, float, float);
  public static void setRotateEulerM(float[], int, float, float, float);
  public static void setRotateM(float[], int, float, float, float, float);
  public static void translateM(float[], int, float, float, float);
  public static void translateM(float[], int, float[], int, float, float, float);
  public static void transposeM(float[], int, float[], int);
  public void <init>();
}
public class android.opengl.Visibility
  extends java.lang.Object
{
  public static native int frustumCullSpheres(float[], int, float[], int, int, int[], int, int);
  public static native int visibilityTest(float[], int, float[], int, char[], int, int);
  public static native void computeBoundingSphere(float[], int, int, float[], int);
  public void <init>();
}
public abstract class android.os.AsyncTask
  extends java.lang.Object
{
  public static void execute(java.lang.Runnable);
  public void <init>();
  public final boolean cancel(boolean);
  public final boolean isCancelled();
  public final android.os.AsyncTask execute(java.lang.Object[]);
  public final android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor, java.lang.Object[]);
  public final android.os.AsyncTask$Status getStatus();
  public final java.lang.Object get()  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public final java.lang.Object get(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  protected final void publishProgress(java.lang.Object[]);
  protected abstract java.lang.Object doInBackground(java.lang.Object[]);
  protected void onCancelled();
  protected void onCancelled(java.lang.Object);
  protected void onPostExecute(java.lang.Object);
  protected void onPreExecute();
  protected void onProgressUpdate(java.lang.Object[]);
  public static final java.util.concurrent.Executor SERIAL_EXECUTOR;
  public static final java.util.concurrent.Executor THREAD_POOL_EXECUTOR;
}
public final class android.os.AsyncTask$Status
  extends java.lang.Enum
{
  public static android.os.AsyncTask$Status valueOf(java.lang.String);
  public static android.os.AsyncTask$Status[] values();
  public static final android.os.AsyncTask$Status FINISHED;
  public static final android.os.AsyncTask$Status PENDING;
  public static final android.os.AsyncTask$Status RUNNING;
}
public class android.os.BadParcelableException
  extends android.util.AndroidRuntimeException
{
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.String);
}
public class android.os.BaseBundle
  extends java.lang.Object
{
  public boolean containsKey(java.lang.String);
  public boolean getBoolean(java.lang.String);
  public boolean getBoolean(java.lang.String, boolean);
  public boolean isEmpty();
  public double getDouble(java.lang.String);
  public double getDouble(java.lang.String, double);
  public int getInt(java.lang.String);
  public int getInt(java.lang.String, int);
  public int size();
  public long getLong(java.lang.String);
  public long getLong(java.lang.String, long);
  public void clear();
  public void putAll(android.os.PersistableBundle);
  public void putBoolean(java.lang.String, boolean);
  public void putBooleanArray(java.lang.String, boolean[]);
  public void putDouble(java.lang.String, double);
  public void putDoubleArray(java.lang.String, double[]);
  public void putInt(java.lang.String, int);
  public void putIntArray(java.lang.String, int[]);
  public void putLong(java.lang.String, long);
  public void putLongArray(java.lang.String, long[]);
  public void putString(java.lang.String, java.lang.String);
  public void putStringArray(java.lang.String, java.lang.String[]);
  public void remove(java.lang.String);
  public boolean[] getBooleanArray(java.lang.String);
  public double[] getDoubleArray(java.lang.String);
  public int[] getIntArray(java.lang.String);
  public java.lang.Object get(java.lang.String);
  public java.lang.String getString(java.lang.String);
  public java.lang.String getString(java.lang.String, java.lang.String);
  public java.lang.String[] getStringArray(java.lang.String);
  public java.util.Set keySet();
  public long[] getLongArray(java.lang.String);
}
public class android.os.BatteryManager
  extends java.lang.Object
{
  public boolean isCharging();
  public int getIntProperty(int);
  public long getLongProperty(int);
  public static final int BATTERY_HEALTH_COLD;
  public static final int BATTERY_HEALTH_DEAD;
  public static final int BATTERY_HEALTH_GOOD;
  public static final int BATTERY_HEALTH_OVERHEAT;
  public static final int BATTERY_HEALTH_OVER_VOLTAGE;
  public static final int BATTERY_HEALTH_UNKNOWN;
  public static final int BATTERY_HEALTH_UNSPECIFIED_FAILURE;
  public static final int BATTERY_PLUGGED_AC;
  public static final int BATTERY_PLUGGED_USB;
  public static final int BATTERY_PLUGGED_WIRELESS;
  public static final int BATTERY_PROPERTY_CAPACITY;
  public static final int BATTERY_PROPERTY_CHARGE_COUNTER;
  public static final int BATTERY_PROPERTY_CURRENT_AVERAGE;
  public static final int BATTERY_PROPERTY_CURRENT_NOW;
  public static final int BATTERY_PROPERTY_ENERGY_COUNTER;
  public static final int BATTERY_STATUS_CHARGING;
  public static final int BATTERY_STATUS_DISCHARGING;
  public static final int BATTERY_STATUS_FULL;
  public static final int BATTERY_STATUS_NOT_CHARGING;
  public static final int BATTERY_STATUS_UNKNOWN;
  public static final java.lang.String ACTION_CHARGING;
  public static final java.lang.String ACTION_DISCHARGING;
  public static final java.lang.String EXTRA_HEALTH;
  public static final java.lang.String EXTRA_ICON_SMALL;
  public static final java.lang.String EXTRA_LEVEL;
  public static final java.lang.String EXTRA_PLUGGED;
  public static final java.lang.String EXTRA_PRESENT;
  public static final java.lang.String EXTRA_SCALE;
  public static final java.lang.String EXTRA_STATUS;
  public static final java.lang.String EXTRA_TECHNOLOGY;
  public static final java.lang.String EXTRA_TEMPERATURE;
  public static final java.lang.String EXTRA_VOLTAGE;
}
public class android.os.Binder
  extends java.lang.Object
  implements android.os.IBinder
{
  public static final native int getCallingPid();
  public static final native int getCallingUid();
  public static final native long clearCallingIdentity();
  public static final native void flushPendingCommands();
  public static final native void joinThreadPool();
  public static final native void restoreCallingIdentity(long);
  public static final android.os.UserHandle getCallingUserHandle();
  public void <init>();
  public final boolean transact(int, android.os.Parcel, android.os.Parcel, int)  throws android.os.RemoteException;
  public boolean isBinderAlive();
  public boolean pingBinder();
  public boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int);
  public void attachInterface(android.os.IInterface, java.lang.String);
  public void dump(java.io.FileDescriptor, java.lang.String[]);
  public void dumpAsync(java.io.FileDescriptor, java.lang.String[]);
  public void linkToDeath(android.os.IBinder$DeathRecipient, int);
  public android.os.IInterface queryLocalInterface(java.lang.String);
  public java.lang.String getInterfaceDescriptor();
  protected boolean onTransact(int, android.os.Parcel, android.os.Parcel, int)  throws android.os.RemoteException;
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  protected void finalize()  throws java.lang.Throwable;
}
public class android.os.Build
  extends java.lang.Object
{
  public static java.lang.String getRadioVersion();
  public void <init>();
  public static final long TIME;
  public static final java.lang.String BOARD;
  public static final java.lang.String BOOTLOADER;
  public static final java.lang.String BRAND;
  public static final java.lang.String CPU_ABI2;
  public static final java.lang.String CPU_ABI;
  public static final java.lang.String DEVICE;
  public static final java.lang.String DISPLAY;
  public static final java.lang.String FINGERPRINT;
  public static final java.lang.String HARDWARE;
  public static final java.lang.String HOST;
  public static final java.lang.String ID;
  public static final java.lang.String MANUFACTURER;
  public static final java.lang.String MODEL;
  public static final java.lang.String PRODUCT;
  public static final java.lang.String RADIO;
  public static final java.lang.String SERIAL;
  public static final java.lang.String TAGS;
  public static final java.lang.String TYPE;
  public static final java.lang.String UNKNOWN;
  public static final java.lang.String USER;
  public static final java.lang.String[] SUPPORTED_32_BIT_ABIS;
  public static final java.lang.String[] SUPPORTED_64_BIT_ABIS;
  public static final java.lang.String[] SUPPORTED_ABIS;
}
public class android.os.Build$VERSION
  extends java.lang.Object
{
  public void <init>();
  public static final int PREVIEW_SDK_INT;
  public static final int SDK_INT;
  public static final java.lang.String BASE_OS;
  public static final java.lang.String CODENAME;
  public static final java.lang.String INCREMENTAL;
  public static final java.lang.String RELEASE;
  public static final java.lang.String SDK;
  public static final java.lang.String SECURITY_PATCH;
}
public class android.os.Build$VERSION_CODES
  extends java.lang.Object
{
  public void <init>();
  public static final int BASE;
  public static final int BASE_1_1;
  public static final int CUPCAKE;
  public static final int CUR_DEVELOPMENT;
  public static final int DONUT;
  public static final int ECLAIR;
  public static final int ECLAIR_0_1;
  public static final int ECLAIR_MR1;
  public static final int FROYO;
  public static final int GINGERBREAD;
  public static final int GINGERBREAD_MR1;
  public static final int HONEYCOMB;
  public static final int HONEYCOMB_MR1;
  public static final int HONEYCOMB_MR2;
  public static final int ICE_CREAM_SANDWICH;
  public static final int ICE_CREAM_SANDWICH_MR1;
  public static final int JELLY_BEAN;
  public static final int JELLY_BEAN_MR1;
  public static final int JELLY_BEAN_MR2;
  public static final int KITKAT;
  public static final int KITKAT_WATCH;
  public static final int LOLLIPOP;
  public static final int LOLLIPOP_MR1;
  public static final int M;
  public static final int N;
}
public final class android.os.Bundle
  extends android.os.BaseBundle
  implements java.lang.Cloneable, android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.Bundle);
  public void <init>(android.os.PersistableBundle);
  public void <init>(int);
  public void <init>(java.lang.ClassLoader);
  public boolean hasFileDescriptors();
  public byte getByte(java.lang.String);
  public char getChar(java.lang.String);
  public char getChar(java.lang.String, char);
  public float getFloat(java.lang.String);
  public float getFloat(java.lang.String, float);
  public int describeContents();
  public short getShort(java.lang.String);
  public short getShort(java.lang.String, short);
  public void clear();
  public void putAll(android.os.Bundle);
  public void putBinder(java.lang.String, android.os.IBinder);
  public void putBundle(java.lang.String, android.os.Bundle);
  public void putByte(java.lang.String, byte);
  public void putByteArray(java.lang.String, byte[]);
  public void putChar(java.lang.String, char);
  public void putCharArray(java.lang.String, char[]);
  public void putCharSequence(java.lang.String, java.lang.CharSequence);
  public void putCharSequenceArray(java.lang.String, java.lang.CharSequence[]);
  public void putCharSequenceArrayList(java.lang.String, java.util.ArrayList);
  public void putFloat(java.lang.String, float);
  public void putFloatArray(java.lang.String, float[]);
  public void putIntegerArrayList(java.lang.String, java.util.ArrayList);
  public void putParcelable(java.lang.String, android.os.Parcelable);
  public void putParcelableArray(java.lang.String, android.os.Parcelable[]);
  public void putParcelableArrayList(java.lang.String, java.util.ArrayList);
  public void putSerializable(java.lang.String, java.io.Serializable);
  public void putShort(java.lang.String, short);
  public void putShortArray(java.lang.String, short[]);
  public void putSize(java.lang.String, android.util.Size);
  public void putSizeF(java.lang.String, android.util.SizeF);
  public void putSparseParcelableArray(java.lang.String, android.util.SparseArray);
  public void putStringArrayList(java.lang.String, java.util.ArrayList);
  public void readFromParcel(android.os.Parcel);
  public void remove(java.lang.String);
  public void setClassLoader(java.lang.ClassLoader);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getBundle(java.lang.String);
  public android.os.IBinder getBinder(java.lang.String);
  public android.os.Parcelable getParcelable(java.lang.String);
  public android.os.Parcelable[] getParcelableArray(java.lang.String);
  public android.util.Size getSize(java.lang.String);
  public android.util.SizeF getSizeF(java.lang.String);
  public android.util.SparseArray getSparseParcelableArray(java.lang.String);
  public byte[] getByteArray(java.lang.String);
  public char[] getCharArray(java.lang.String);
  public float[] getFloatArray(java.lang.String);
  public java.io.Serializable getSerializable(java.lang.String);
  public java.lang.Byte getByte(java.lang.String, byte);
  public java.lang.CharSequence getCharSequence(java.lang.String);
  public java.lang.CharSequence getCharSequence(java.lang.String, java.lang.CharSequence);
  public java.lang.CharSequence[] getCharSequenceArray(java.lang.String);
  public java.lang.ClassLoader getClassLoader();
  public java.lang.Object clone();
  public java.lang.String toString();
  public java.util.ArrayList getCharSequenceArrayList(java.lang.String);
  public java.util.ArrayList getIntegerArrayList(java.lang.String);
  public java.util.ArrayList getParcelableArrayList(java.lang.String);
  public java.util.ArrayList getStringArrayList(java.lang.String);
  public short[] getShortArray(java.lang.String);
  public static final android.os.Bundle EMPTY;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.os.CancellationSignal
  extends java.lang.Object
{
  public void <init>();
  public boolean isCanceled();
  public void cancel();
  public void setOnCancelListener(android.os.CancellationSignal$OnCancelListener);
  public void throwIfCanceled();
}
public interface android.os.CancellationSignal$OnCancelListener
{
  public abstract void onCancel();
}
public class android.os.ConditionVariable
  extends java.lang.Object
{
  public void <init>();
  public void <init>(boolean);
  public boolean block(long);
  public void block();
  public void close();
  public void open();
}
public abstract class android.os.CountDownTimer
  extends java.lang.Object
{
  public void <init>(long, long);
  public final void cancel();
  public final android.os.CountDownTimer start();
  public abstract void onFinish();
  public abstract void onTick(long);
}
public final class android.os.CpuUsageInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public long getActive();
  public long getTotal();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.os.DeadObjectException
  extends android.os.RemoteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.os.DeadSystemException
  extends android.os.DeadObjectException
{
  public void <init>();
}
public final class android.os.Debug
  extends java.lang.Object
{
  public static final native int getBinderDeathObjectCount();
  public static final native int getBinderLocalObjectCount();
  public static final native int getBinderProxyObjectCount();
  public static boolean dumpService(java.lang.String, java.io.FileDescriptor, java.lang.String[]);
  public static boolean isDebuggerConnected();
  public static boolean waitingForDebugger();
  public static int getGlobalAllocCount();
  public static int getGlobalAllocSize();
  public static int getGlobalClassInitCount();
  public static int getGlobalClassInitTime();
  public static int getGlobalExternalAllocCount();
  public static int getGlobalExternalAllocSize();
  public static int getGlobalExternalFreedCount();
  public static int getGlobalExternalFreedSize();
  public static int getGlobalFreedCount();
  public static int getGlobalFreedSize();
  public static int getGlobalGcInvocationCount();
  public static int getLoadedClassCount();
  public static int getThreadAllocCount();
  public static int getThreadAllocSize();
  public static int getThreadExternalAllocCount();
  public static int getThreadExternalAllocSize();
  public static int getThreadGcInvocationCount();
  public static int setAllocationLimit(int);
  public static int setGlobalAllocationLimit(int);
  public static long threadCpuTimeNanos();
  public static native int getBinderReceivedTransactions();
  public static native int getBinderSentTransactions();
  public static native long getNativeHeapAllocatedSize();
  public static native long getNativeHeapFreeSize();
  public static native long getNativeHeapSize();
  public static native long getPss();
  public static native void getMemoryInfo(android.os.Debug$MemoryInfo);
  public static void changeDebugPort(int);
  public static void dumpHprofData(java.lang.String)  throws java.io.IOException;
  public static void enableEmulatorTraceOutput();
  public static void printLoadedClasses(int);
  public static void resetAllCounts();
  public static void resetGlobalAllocCount();
  public static void resetGlobalAllocSize();
  public static void resetGlobalClassInitCount();
  public static void resetGlobalClassInitTime();
  public static void resetGlobalExternalAllocCount();
  public static void resetGlobalExternalAllocSize();
  public static void resetGlobalExternalFreedCount();
  public static void resetGlobalExternalFreedSize();
  public static void resetGlobalFreedCount();
  public static void resetGlobalFreedSize();
  public static void resetGlobalGcInvocationCount();
  public static void resetThreadAllocCount();
  public static void resetThreadAllocSize();
  public static void resetThreadExternalAllocCount();
  public static void resetThreadExternalAllocSize();
  public static void resetThreadGcInvocationCount();
  public static void startAllocCounting();
  public static void startMethodTracing();
  public static void startMethodTracing(java.lang.String);
  public static void startMethodTracing(java.lang.String, int);
  public static void startMethodTracing(java.lang.String, int, int);
  public static void startMethodTracingSampling(java.lang.String, int, int);
  public static void startNativeTracing();
  public static void stopAllocCounting();
  public static void stopMethodTracing();
  public static void stopNativeTracing();
  public static void waitForDebugger();
  public static java.lang.String getRuntimeStat(java.lang.String);
  public static java.util.Map getRuntimeStats();
  public static final int SHOW_CLASSLOADER;
  public static final int SHOW_FULL_DETAIL;
  public static final int SHOW_INITIALIZED;
  public static final int TRACE_COUNT_ALLOCS;
}
public class android.os.Debug$InstructionCount
  extends java.lang.Object
{
  public void <init>();
  public boolean collect();
  public boolean resetAndStart();
  public int globalMethodInvocations();
  public int globalTotal();
}
public class android.os.Debug$MemoryInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public int getTotalPrivateClean();
  public int getTotalPrivateDirty();
  public int getTotalPss();
  public int getTotalSharedClean();
  public int getTotalSharedDirty();
  public int getTotalSwappablePss();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getMemoryStat(java.lang.String);
  public java.util.Map getMemoryStats();
  public static final android.os.Parcelable$Creator CREATOR;
  public int dalvikPrivateDirty;
  public int dalvikPss;
  public int dalvikSharedDirty;
  public int nativePrivateDirty;
  public int nativePss;
  public int nativeSharedDirty;
  public int otherPrivateDirty;
  public int otherPss;
  public int otherSharedDirty;
}
public class android.os.DropBoxManager
  extends java.lang.Object
{
  public boolean isTagEnabled(java.lang.String);
  public void addData(java.lang.String, byte[], int);
  public void addFile(java.lang.String, java.io.File, int)  throws java.io.IOException;
  public void addText(java.lang.String, java.lang.String);
  public android.os.DropBoxManager$Entry getNextEntry(java.lang.String, long);
  protected void <init>();
  public static final int IS_EMPTY;
  public static final int IS_GZIPPED;
  public static final int IS_TEXT;
  public static final java.lang.String ACTION_DROPBOX_ENTRY_ADDED;
  public static final java.lang.String EXTRA_TAG;
  public static final java.lang.String EXTRA_TIME;
}
public class android.os.DropBoxManager$Entry
  extends java.lang.Object
  implements android.os.Parcelable, java.io.Closeable
{
  public void <init>(java.lang.String, long);
  public void <init>(java.lang.String, long, android.os.ParcelFileDescriptor, int);
  public void <init>(java.lang.String, long, byte[], int);
  public void <init>(java.lang.String, long, java.io.File, int)  throws java.io.IOException;
  public void <init>(java.lang.String, long, java.lang.String);
  public int describeContents();
  public int getFlags();
  public long getTimeMillis();
  public void close();
  public void writeToParcel(android.os.Parcel, int);
  public java.io.InputStream getInputStream()  throws java.io.IOException;
  public java.lang.String getTag();
  public java.lang.String getText(int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.os.Environment
  extends java.lang.Object
{
  public static boolean isExternalStorageEmulated();
  public static boolean isExternalStorageEmulated(java.io.File);
  public static boolean isExternalStorageRemovable();
  public static boolean isExternalStorageRemovable(java.io.File);
  public static java.io.File getDataDirectory();
  public static java.io.File getDownloadCacheDirectory();
  public static java.io.File getExternalStorageDirectory();
  public static java.io.File getExternalStoragePublicDirectory(java.lang.String);
  public static java.io.File getRootDirectory();
  public static java.lang.String getExternalStorageState();
  public static java.lang.String getExternalStorageState(java.io.File);
  public static java.lang.String getStorageState(java.io.File);
  public void <init>();
  public static final java.lang.String MEDIA_BAD_REMOVAL;
  public static final java.lang.String MEDIA_CHECKING;
  public static final java.lang.String MEDIA_EJECTING;
  public static final java.lang.String MEDIA_MOUNTED;
  public static final java.lang.String MEDIA_MOUNTED_READ_ONLY;
  public static final java.lang.String MEDIA_NOFS;
  public static final java.lang.String MEDIA_REMOVED;
  public static final java.lang.String MEDIA_SHARED;
  public static final java.lang.String MEDIA_UNKNOWN;
  public static final java.lang.String MEDIA_UNMOUNTABLE;
  public static final java.lang.String MEDIA_UNMOUNTED;
  public static java.lang.String DIRECTORY_ALARMS;
  public static java.lang.String DIRECTORY_DCIM;
  public static java.lang.String DIRECTORY_DOCUMENTS;
  public static java.lang.String DIRECTORY_DOWNLOADS;
  public static java.lang.String DIRECTORY_MOVIES;
  public static java.lang.String DIRECTORY_MUSIC;
  public static java.lang.String DIRECTORY_NOTIFICATIONS;
  public static java.lang.String DIRECTORY_PICTURES;
  public static java.lang.String DIRECTORY_PODCASTS;
  public static java.lang.String DIRECTORY_RINGTONES;
}
public abstract class android.os.FileObserver
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int);
  public abstract void onEvent(int, java.lang.String);
  public void startWatching();
  public void stopWatching();
  protected void finalize();
  public static final int ACCESS;
  public static final int ALL_EVENTS;
  public static final int ATTRIB;
  public static final int CLOSE_NOWRITE;
  public static final int CLOSE_WRITE;
  public static final int CREATE;
  public static final int DELETE;
  public static final int DELETE_SELF;
  public static final int MODIFY;
  public static final int MOVED_FROM;
  public static final int MOVED_TO;
  public static final int MOVE_SELF;
  public static final int OPEN;
}
public class android.os.FileUriExposedException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.String);
}
public class android.os.Handler
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.os.Handler$Callback);
  public void <init>(android.os.Looper);
  public void <init>(android.os.Looper, android.os.Handler$Callback);
  public final boolean hasMessages(int);
  public final boolean hasMessages(int, java.lang.Object);
  public final boolean post(java.lang.Runnable);
  public final boolean postAtFrontOfQueue(java.lang.Runnable);
  public final boolean postAtTime(java.lang.Runnable, java.lang.Object, long);
  public final boolean postAtTime(java.lang.Runnable, long);
  public final boolean postDelayed(java.lang.Runnable, long);
  public final boolean sendEmptyMessage(int);
  public final boolean sendEmptyMessageAtTime(int, long);
  public final boolean sendEmptyMessageDelayed(int, long);
  public final boolean sendMessage(android.os.Message);
  public final boolean sendMessageAtFrontOfQueue(android.os.Message);
  public final boolean sendMessageDelayed(android.os.Message, long);
  public final void dump(android.util.Printer, java.lang.String);
  public final void removeCallbacks(java.lang.Runnable);
  public final void removeCallbacks(java.lang.Runnable, java.lang.Object);
  public final void removeCallbacksAndMessages(java.lang.Object);
  public final void removeMessages(int);
  public final void removeMessages(int, java.lang.Object);
  public final android.os.Looper getLooper();
  public final android.os.Message obtainMessage();
  public final android.os.Message obtainMessage(int);
  public final android.os.Message obtainMessage(int, int, int);
  public final android.os.Message obtainMessage(int, int, int, java.lang.Object);
  public final android.os.Message obtainMessage(int, java.lang.Object);
  public boolean sendMessageAtTime(android.os.Message, long);
  public void dispatchMessage(android.os.Message);
  public void handleMessage(android.os.Message);
  public java.lang.String getMessageName(android.os.Message);
  public java.lang.String toString();
}
public interface android.os.Handler$Callback
{
  public abstract boolean handleMessage(android.os.Message);
}
public class android.os.HandlerThread
  extends java.lang.Thread
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int);
  public boolean quit();
  public boolean quitSafely();
  public int getThreadId();
  public void run();
  public android.os.Looper getLooper();
  protected void onLooperPrepared();
}
public class android.os.HardwarePropertiesManager
  extends java.lang.Object
{
  public android.os.CpuUsageInfo[] getCpuUsages();
  public float[] getDeviceTemperatures(int, int);
  public float[] getFanSpeeds();
  public static final float UNDEFINED_TEMPERATURE;
  public static final int DEVICE_TEMPERATURE_BATTERY;
  public static final int DEVICE_TEMPERATURE_CPU;
  public static final int DEVICE_TEMPERATURE_GPU;
  public static final int DEVICE_TEMPERATURE_SKIN;
  public static final int TEMPERATURE_CURRENT;
  public static final int TEMPERATURE_SHUTDOWN;
  public static final int TEMPERATURE_THROTTLING;
  public static final int TEMPERATURE_THROTTLING_BELOW_VR_MIN;
}
public interface android.os.IBinder
{
  public abstract boolean isBinderAlive();
  public abstract boolean pingBinder();
  public abstract boolean transact(int, android.os.Parcel, android.os.Parcel, int)  throws android.os.RemoteException;
  public abstract boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int);
  public abstract void dump(java.io.FileDescriptor, java.lang.String[])  throws android.os.RemoteException;
  public abstract void dumpAsync(java.io.FileDescriptor, java.lang.String[])  throws android.os.RemoteException;
  public abstract void linkToDeath(android.os.IBinder$DeathRecipient, int)  throws android.os.RemoteException;
  public abstract android.os.IInterface queryLocalInterface(java.lang.String);
  public abstract java.lang.String getInterfaceDescriptor()  throws android.os.RemoteException;
  public static final int DUMP_TRANSACTION;
  public static final int FIRST_CALL_TRANSACTION;
  public static final int FLAG_ONEWAY;
  public static final int INTERFACE_TRANSACTION;
  public static final int LAST_CALL_TRANSACTION;
  public static final int LIKE_TRANSACTION;
  public static final int PING_TRANSACTION;
  public static final int TWEET_TRANSACTION;
}
public interface android.os.IBinder$DeathRecipient
{
  public abstract void binderDied();
}
public interface android.os.IInterface
{
  public abstract android.os.IBinder asBinder();
}
public final class android.os.LocaleList
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static void setDefault(android.os.LocaleList);
  public static android.os.LocaleList forLanguageTags(java.lang.String);
  public static android.os.LocaleList getAdjustedDefault();
  public static android.os.LocaleList getDefault();
  public static android.os.LocaleList getEmptyLocaleList();
  public void <init>(java.util.Locale[]);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public int describeContents();
  public int hashCode();
  public int indexOf(java.util.Locale);
  public int size();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toLanguageTags();
  public java.lang.String toString();
  public java.util.Locale get(int);
  public java.util.Locale getFirstMatch(java.lang.String[]);
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.os.Looper
  extends java.lang.Object
{
  public static void loop();
  public static void prepare();
  public static void prepareMainLooper();
  public static android.os.Looper getMainLooper();
  public static android.os.Looper myLooper();
  public static android.os.MessageQueue myQueue();
  public boolean isCurrentThread();
  public void dump(android.util.Printer, java.lang.String);
  public void quit();
  public void quitSafely();
  public void setMessageLogging(android.util.Printer);
  public android.os.MessageQueue getQueue();
  public java.lang.String toString();
  public java.lang.Thread getThread();
}
public class android.os.MemoryFile
  extends java.lang.Object
{
  public void <init>(java.lang.String, int)  throws java.io.IOException;
  public boolean allowPurging(boolean)  throws java.io.IOException;
  public boolean isPurgingAllowed();
  public int length();
  public int readBytes(byte[], int, int, int)  throws java.io.IOException;
  public void close();
  public void writeBytes(byte[], int, int, int)  throws java.io.IOException;
  public java.io.InputStream getInputStream();
  public java.io.OutputStream getOutputStream();
  protected void finalize();
}
public final class android.os.Message
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.os.Message obtain();
  public static android.os.Message obtain(android.os.Handler);
  public static android.os.Message obtain(android.os.Handler, int);
  public static android.os.Message obtain(android.os.Handler, int, int, int);
  public static android.os.Message obtain(android.os.Handler, int, int, int, java.lang.Object);
  public static android.os.Message obtain(android.os.Handler, int, java.lang.Object);
  public static android.os.Message obtain(android.os.Handler, java.lang.Runnable);
  public static android.os.Message obtain(android.os.Message);
  public void <init>();
  public boolean isAsynchronous();
  public int describeContents();
  public long getWhen();
  public void copyFrom(android.os.Message);
  public void recycle();
  public void sendToTarget();
  public void setAsynchronous(boolean);
  public void setData(android.os.Bundle);
  public void setTarget(android.os.Handler);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getData();
  public android.os.Bundle peekData();
  public android.os.Handler getTarget();
  public java.lang.Runnable getCallback();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public int arg1;
  public int arg2;
  public int sendingUid;
  public int what;
  public android.os.Messenger replyTo;
  public java.lang.Object obj;
}
public final class android.os.MessageQueue
  extends java.lang.Object
{
  public boolean isIdle();
  public void addIdleHandler(android.os.MessageQueue$IdleHandler);
  public void addOnFileDescriptorEventListener(java.io.FileDescriptor, int, android.os.MessageQueue$OnFileDescriptorEventListener);
  public void removeIdleHandler(android.os.MessageQueue$IdleHandler);
  public void removeOnFileDescriptorEventListener(java.io.FileDescriptor);
  protected void finalize()  throws java.lang.Throwable;
}
public interface android.os.MessageQueue$IdleHandler
{
  public abstract boolean queueIdle();
}
public interface android.os.MessageQueue$OnFileDescriptorEventListener
{
  public abstract int onFileDescriptorEvents(java.io.FileDescriptor, int);
  public static final int EVENT_ERROR;
  public static final int EVENT_INPUT;
  public static final int EVENT_OUTPUT;
}
public final class android.os.Messenger
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static void writeMessengerOrNullToParcel(android.os.Messenger, android.os.Parcel);
  public static android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel);
  public void <init>(android.os.Handler);
  public void <init>(android.os.IBinder);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void send(android.os.Message)  throws android.os.RemoteException;
  public void writeToParcel(android.os.Parcel, int);
  public android.os.IBinder getBinder();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.os.NetworkOnMainThreadException
  extends java.lang.RuntimeException
{
  public void <init>();
}
public class android.os.OperationCanceledException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class android.os.Parcel
  extends java.lang.Object
{
  public static android.os.Parcel obtain();
  public final boolean hasFileDescriptors();
  public final byte readByte();
  public final double readDouble();
  public final float readFloat();
  public final int dataAvail();
  public final int dataCapacity();
  public final int dataPosition();
  public final int dataSize();
  public final int readInt();
  public final long readLong();
  public final void appendFrom(android.os.Parcel, int, int);
  public final void enforceInterface(java.lang.String);
  public final void readBinderArray(android.os.IBinder[]);
  public final void readBinderList(java.util.List);
  public final void readBooleanArray(boolean[]);
  public final void readByteArray(byte[]);
  public final void readCharArray(char[]);
  public final void readDoubleArray(double[]);
  public final void readException();
  public final void readException(int, java.lang.String);
  public final void readFloatArray(float[]);
  public final void readIntArray(int[]);
  public final void readList(java.util.List, java.lang.ClassLoader);
  public final void readLongArray(long[]);
  public final void readMap(java.util.Map, java.lang.ClassLoader);
  public final void readStringArray(java.lang.String[]);
  public final void readStringList(java.util.List);
  public final void readTypedArray(java.lang.Object[], android.os.Parcelable$Creator);
  public final void readTypedList(java.util.List, android.os.Parcelable$Creator);
  public final void recycle();
  public final void setDataCapacity(int);
  public final void setDataPosition(int);
  public final void setDataSize(int);
  public final void unmarshall(byte[], int, int);
  public final void writeArray(java.lang.Object[]);
  public final void writeBinderArray(android.os.IBinder[]);
  public final void writeBinderList(java.util.List);
  public final void writeBooleanArray(boolean[]);
  public final void writeBundle(android.os.Bundle);
  public final void writeByte(byte);
  public final void writeByteArray(byte[]);
  public final void writeByteArray(byte[], int, int);
  public final void writeCharArray(char[]);
  public final void writeDouble(double);
  public final void writeDoubleArray(double[]);
  public final void writeException(java.lang.Exception);
  public final void writeFileDescriptor(java.io.FileDescriptor);
  public final void writeFloat(float);
  public final void writeFloatArray(float[]);
  public final void writeInt(int);
  public final void writeIntArray(int[]);
  public final void writeInterfaceToken(java.lang.String);
  public final void writeList(java.util.List);
  public final void writeLong(long);
  public final void writeLongArray(long[]);
  public final void writeMap(java.util.Map);
  public final void writeNoException();
  public final void writeParcelable(android.os.Parcelable, int);
  public final void writeParcelableArray(android.os.Parcelable[], int);
  public final void writePersistableBundle(android.os.PersistableBundle);
  public final void writeSerializable(java.io.Serializable);
  public final void writeSize(android.util.Size);
  public final void writeSizeF(android.util.SizeF);
  public final void writeSparseArray(android.util.SparseArray);
  public final void writeSparseBooleanArray(android.util.SparseBooleanArray);
  public final void writeString(java.lang.String);
  public final void writeStringArray(java.lang.String[]);
  public final void writeStringList(java.util.List);
  public final void writeStrongBinder(android.os.IBinder);
  public final void writeStrongInterface(android.os.IInterface);
  public final void writeTypedArray(android.os.Parcelable[], int);
  public final void writeTypedList(java.util.List);
  public final void writeTypedObject(android.os.Parcelable, int);
  public final void writeValue(java.lang.Object);
  public final android.os.Bundle readBundle();
  public final android.os.Bundle readBundle(java.lang.ClassLoader);
  public final android.os.IBinder readStrongBinder();
  public final android.os.IBinder[] createBinderArray();
  public final android.os.ParcelFileDescriptor readFileDescriptor();
  public final android.os.Parcelable readParcelable(java.lang.ClassLoader);
  public final android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader);
  public final android.os.PersistableBundle readPersistableBundle();
  public final android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader);
  public final android.util.Size readSize();
  public final android.util.SizeF readSizeF();
  public final android.util.SparseArray readSparseArray(java.lang.ClassLoader);
  public final android.util.SparseBooleanArray readSparseBooleanArray();
  public final boolean[] createBooleanArray();
  public final byte[] createByteArray();
  public final byte[] marshall();
  public final char[] createCharArray();
  public final double[] createDoubleArray();
  public final float[] createFloatArray();
  public final int[] createIntArray();
  public final java.io.Serializable readSerializable();
  public final java.lang.Object readTypedObject(android.os.Parcelable$Creator);
  public final java.lang.Object readValue(java.lang.ClassLoader);
  public final java.lang.Object[] createTypedArray(android.os.Parcelable$Creator);
  public final java.lang.Object[] readArray(java.lang.ClassLoader);
  public final java.lang.String readString();
  public final java.lang.String[] createStringArray();
  public final java.util.ArrayList createBinderArrayList();
  public final java.util.ArrayList createStringArrayList();
  public final java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator);
  public final java.util.ArrayList readArrayList(java.lang.ClassLoader);
  public final java.util.HashMap readHashMap(java.lang.ClassLoader);
  public final long[] createLongArray();
  protected void finalize()  throws java.lang.Throwable;
  public static final android.os.Parcelable$Creator STRING_CREATOR;
}
public class android.os.ParcelFileDescriptor
  extends java.lang.Object
  implements android.os.Parcelable, java.io.Closeable
{
  public static int parseMode(java.lang.String);
  public static android.os.ParcelFileDescriptor adoptFd(int);
  public static android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)  throws java.io.IOException;
  public static android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket);
  public static android.os.ParcelFileDescriptor fromFd(int)  throws java.io.IOException;
  public static android.os.ParcelFileDescriptor fromSocket(java.net.Socket);
  public static android.os.ParcelFileDescriptor open(java.io.File, int)  throws java.io.FileNotFoundException;
  public static android.os.ParcelFileDescriptor open(java.io.File, int, android.os.Handler, android.os.ParcelFileDescriptor$OnCloseListener)  throws java.io.IOException;
  public static android.os.ParcelFileDescriptor[] createPipe()  throws java.io.IOException;
  public static android.os.ParcelFileDescriptor[] createReliablePipe()  throws java.io.IOException;
  public static android.os.ParcelFileDescriptor[] createReliableSocketPair()  throws java.io.IOException;
  public static android.os.ParcelFileDescriptor[] createSocketPair()  throws java.io.IOException;
  public void <init>(android.os.ParcelFileDescriptor);
  public boolean canDetectErrors();
  public int describeContents();
  public int detachFd();
  public int getFd();
  public long getStatSize();
  public void checkError()  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void closeWithError(java.lang.String)  throws java.io.IOException;
  public void writeToParcel(android.os.Parcel, int);
  public android.os.ParcelFileDescriptor dup()  throws java.io.IOException;
  public java.io.FileDescriptor getFileDescriptor();
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
  public static final int MODE_APPEND;
  public static final int MODE_CREATE;
  public static final int MODE_READ_ONLY;
  public static final int MODE_READ_WRITE;
  public static final int MODE_TRUNCATE;
  public static final int MODE_WORLD_READABLE;
  public static final int MODE_WORLD_WRITEABLE;
  public static final int MODE_WRITE_ONLY;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.os.ParcelFileDescriptor$AutoCloseInputStream
  extends java.io.FileInputStream
{
  public void <init>(android.os.ParcelFileDescriptor);
  public int read()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
}
public class android.os.ParcelFileDescriptor$AutoCloseOutputStream
  extends java.io.FileOutputStream
{
  public void <init>(android.os.ParcelFileDescriptor);
  public void close()  throws java.io.IOException;
}
public class android.os.ParcelFileDescriptor$FileDescriptorDetachedException
  extends java.io.IOException
{
  public void <init>();
}
public interface android.os.ParcelFileDescriptor$OnCloseListener
{
  public abstract void onClose(java.io.IOException);
}
public class android.os.ParcelFormatException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class android.os.ParcelUuid
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.os.ParcelUuid fromString(java.lang.String);
  public void <init>(java.util.UUID);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public java.util.UUID getUuid();
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.os.Parcelable
{
  public abstract int describeContents();
  public abstract void writeToParcel(android.os.Parcel, int);
  public static final int CONTENTS_FILE_DESCRIPTOR;
  public static final int PARCELABLE_WRITE_RETURN_VALUE;
}
public interface android.os.Parcelable$ClassLoaderCreator
  extends android.os.Parcelable$Creator
{
  public abstract java.lang.Object createFromParcel(android.os.Parcel, java.lang.ClassLoader);
}
public interface android.os.Parcelable$Creator
{
  public abstract java.lang.Object createFromParcel(android.os.Parcel);
  public abstract java.lang.Object[] newArray(int);
}
public class android.os.PatternMatcher
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, int);
  public final int getType();
  public final java.lang.String getPath();
  public boolean match(java.lang.String);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int PATTERN_LITERAL;
  public static final int PATTERN_PREFIX;
  public static final int PATTERN_SIMPLE_GLOB;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.os.PersistableBundle
  extends android.os.BaseBundle
  implements java.lang.Cloneable, android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.PersistableBundle);
  public void <init>(int);
  public int describeContents();
  public void putPersistableBundle(java.lang.String, android.os.PersistableBundle);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.PersistableBundle getPersistableBundle(java.lang.String);
  public java.lang.Object clone();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public static final android.os.PersistableBundle EMPTY;
}
public final class android.os.PowerManager
  extends java.lang.Object
{
  public boolean isDeviceIdleMode();
  public boolean isIgnoringBatteryOptimizations(java.lang.String);
  public boolean isInteractive();
  public boolean isPowerSaveMode();
  public boolean isScreenOn();
  public boolean isSustainedPerformanceModeSupported();
  public boolean isWakeLockLevelSupported(int);
  public void reboot(java.lang.String);
  public android.os.PowerManager$WakeLock newWakeLock(int, java.lang.String);
  public static final int ACQUIRE_CAUSES_WAKEUP;
  public static final int FULL_WAKE_LOCK;
  public static final int ON_AFTER_RELEASE;
  public static final int PARTIAL_WAKE_LOCK;
  public static final int PROXIMITY_SCREEN_OFF_WAKE_LOCK;
  public static final int RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY;
  public static final int SCREEN_BRIGHT_WAKE_LOCK;
  public static final int SCREEN_DIM_WAKE_LOCK;
  public static final java.lang.String ACTION_DEVICE_IDLE_MODE_CHANGED;
  public static final java.lang.String ACTION_POWER_SAVE_MODE_CHANGED;
}
public final class android.os.PowerManager$WakeLock
  extends java.lang.Object
{
  public boolean isHeld();
  public void acquire();
  public void acquire(long);
  public void release();
  public void release(int);
  public void setReferenceCounted(boolean);
  public void setWorkSource(android.os.WorkSource);
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.os.Process
  extends java.lang.Object
{
  public static final boolean is64Bit();
  public static final boolean supportsProcesses();
  public static final int myPid();
  public static final int myTid();
  public static final int myUid();
  public static final long getStartElapsedRealtime();
  public static final long getStartUptimeMillis();
  public static final native int getGidForName(java.lang.String);
  public static final native int getThreadPriority(int)  throws java.lang.IllegalArgumentException;
  public static final native int getUidForName(java.lang.String);
  public static final native long getElapsedCpuTime();
  public static final native void sendSignal(int, int);
  public static final native void setThreadPriority(int)  throws java.lang.IllegalArgumentException, java.lang.SecurityException;
  public static final native void setThreadPriority(int, int)  throws java.lang.IllegalArgumentException, java.lang.SecurityException;
  public static final void killProcess(int);
  public static final native int[] getExclusiveCores();
  public static boolean isApplicationUid(int);
  public static android.os.UserHandle myUserHandle();
  public void <init>();
  public static final int FIRST_APPLICATION_UID;
  public static final int LAST_APPLICATION_UID;
  public static final int PHONE_UID;
  public static final int SIGNAL_KILL;
  public static final int SIGNAL_QUIT;
  public static final int SIGNAL_USR1;
  public static final int SYSTEM_UID;
  public static final int THREAD_PRIORITY_AUDIO;
  public static final int THREAD_PRIORITY_BACKGROUND;
  public static final int THREAD_PRIORITY_DEFAULT;
  public static final int THREAD_PRIORITY_DISPLAY;
  public static final int THREAD_PRIORITY_FOREGROUND;
  public static final int THREAD_PRIORITY_LESS_FAVORABLE;
  public static final int THREAD_PRIORITY_LOWEST;
  public static final int THREAD_PRIORITY_MORE_FAVORABLE;
  public static final int THREAD_PRIORITY_URGENT_AUDIO;
  public static final int THREAD_PRIORITY_URGENT_DISPLAY;
}
public class android.os.RecoverySystem
  extends java.lang.Object
{
  public static void installPackage(android.content.Context, java.io.File)  throws java.io.IOException;
  public static void rebootWipeCache(android.content.Context)  throws java.io.IOException;
  public static void rebootWipeUserData(android.content.Context)  throws java.io.IOException;
  public static void verifyPackage(java.io.File, android.os.RecoverySystem$ProgressListener, java.io.File)  throws java.io.IOException, java.security.GeneralSecurityException;
}
public interface android.os.RecoverySystem$ProgressListener
{
  public abstract void onProgress(int);
}
public class android.os.RemoteCallbackList
  extends java.lang.Object
{
  public void <init>();
  public boolean register(android.os.IInterface);
  public boolean register(android.os.IInterface, java.lang.Object);
  public boolean unregister(android.os.IInterface);
  public int beginBroadcast();
  public int getRegisteredCallbackCount();
  public void finishBroadcast();
  public void kill();
  public void onCallbackDied(android.os.IInterface);
  public void onCallbackDied(android.os.IInterface, java.lang.Object);
  public android.os.IInterface getBroadcastItem(int);
  public java.lang.Object getBroadcastCookie(int);
}
public class android.os.RemoteException
  extends android.util.AndroidException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.os.ResultReceiver
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Handler);
  public int describeContents();
  public void send(int, android.os.Bundle);
  public void writeToParcel(android.os.Parcel, int);
  protected void onReceiveResult(int, android.os.Bundle);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.os.StatFs
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public int getAvailableBlocks();
  public int getBlockCount();
  public int getBlockSize();
  public int getFreeBlocks();
  public long getAvailableBlocksLong();
  public long getAvailableBytes();
  public long getBlockCountLong();
  public long getBlockSizeLong();
  public long getFreeBlocksLong();
  public long getFreeBytes();
  public long getTotalBytes();
  public void restat(java.lang.String);
}
public final class android.os.StrictMode
  extends java.lang.Object
{
  public static void enableDefaults();
  public static void noteSlowCall(java.lang.String);
  public static void setThreadPolicy(android.os.StrictMode$ThreadPolicy);
  public static void setVmPolicy(android.os.StrictMode$VmPolicy);
  public static android.os.StrictMode$ThreadPolicy allowThreadDiskReads();
  public static android.os.StrictMode$ThreadPolicy allowThreadDiskWrites();
  public static android.os.StrictMode$ThreadPolicy getThreadPolicy();
  public static android.os.StrictMode$VmPolicy getVmPolicy();
}
public final class android.os.StrictMode$ThreadPolicy
  extends java.lang.Object
{
  public java.lang.String toString();
  public static final android.os.StrictMode$ThreadPolicy LAX;
}
public final class android.os.StrictMode$ThreadPolicy$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.os.StrictMode$ThreadPolicy);
  public android.os.StrictMode$ThreadPolicy build();
  public android.os.StrictMode$ThreadPolicy$Builder detectAll();
  public android.os.StrictMode$ThreadPolicy$Builder detectCustomSlowCalls();
  public android.os.StrictMode$ThreadPolicy$Builder detectDiskReads();
  public android.os.StrictMode$ThreadPolicy$Builder detectDiskWrites();
  public android.os.StrictMode$ThreadPolicy$Builder detectNetwork();
  public android.os.StrictMode$ThreadPolicy$Builder detectResourceMismatches();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDeath();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDeathOnNetwork();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDialog();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyDropBox();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyFlashScreen();
  public android.os.StrictMode$ThreadPolicy$Builder penaltyLog();
  public android.os.StrictMode$ThreadPolicy$Builder permitAll();
  public android.os.StrictMode$ThreadPolicy$Builder permitCustomSlowCalls();
  public android.os.StrictMode$ThreadPolicy$Builder permitDiskReads();
  public android.os.StrictMode$ThreadPolicy$Builder permitDiskWrites();
  public android.os.StrictMode$ThreadPolicy$Builder permitNetwork();
  public android.os.StrictMode$ThreadPolicy$Builder permitResourceMismatches();
}
public final class android.os.StrictMode$VmPolicy
  extends java.lang.Object
{
  public java.lang.String toString();
  public static final android.os.StrictMode$VmPolicy LAX;
}
public final class android.os.StrictMode$VmPolicy$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.os.StrictMode$VmPolicy);
  public android.os.StrictMode$VmPolicy build();
  public android.os.StrictMode$VmPolicy$Builder detectActivityLeaks();
  public android.os.StrictMode$VmPolicy$Builder detectAll();
  public android.os.StrictMode$VmPolicy$Builder detectCleartextNetwork();
  public android.os.StrictMode$VmPolicy$Builder detectFileUriExposure();
  public android.os.StrictMode$VmPolicy$Builder detectLeakedClosableObjects();
  public android.os.StrictMode$VmPolicy$Builder detectLeakedRegistrationObjects();
  public android.os.StrictMode$VmPolicy$Builder detectLeakedSqlLiteObjects();
  public android.os.StrictMode$VmPolicy$Builder penaltyDeath();
  public android.os.StrictMode$VmPolicy$Builder penaltyDeathOnCleartextNetwork();
  public android.os.StrictMode$VmPolicy$Builder penaltyDeathOnFileUriExposure();
  public android.os.StrictMode$VmPolicy$Builder penaltyDropBox();
  public android.os.StrictMode$VmPolicy$Builder penaltyLog();
  public android.os.StrictMode$VmPolicy$Builder setClassInstanceLimit(java.lang.Class, int);
}
public final class android.os.SystemClock
  extends java.lang.Object
{
  public static boolean setCurrentTimeMillis(long);
  public static native long currentThreadTimeMillis();
  public static native long elapsedRealtime();
  public static native long elapsedRealtimeNanos();
  public static native long uptimeMillis();
  public static void sleep(long);
}
public abstract class android.os.TokenWatcher
  extends java.lang.Object
{
  public void <init>(android.os.Handler, java.lang.String);
  public abstract void acquired();
  public abstract void released();
  public boolean isAcquired();
  public void acquire(android.os.IBinder, java.lang.String);
  public void cleanup(android.os.IBinder, boolean);
  public void dump();
  public void dump(java.io.PrintWriter);
  public void release(android.os.IBinder);
}
public final class android.os.Trace
  extends java.lang.Object
{
  public static void beginSection(java.lang.String);
  public static void endSection();
}
public class android.os.TransactionTooLargeException
  extends android.os.RemoteException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class android.os.UserHandle
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static void writeToParcel(android.os.UserHandle, android.os.Parcel);
  public static android.os.UserHandle getUserHandleForUid(int);
  public static android.os.UserHandle readFromParcel(android.os.Parcel);
  public void <init>(android.os.Parcel);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.os.UserManager
  extends java.lang.Object
{
  public static boolean supportsMultipleUsers();
  public static android.content.Intent createUserCreationIntent(java.lang.String, java.lang.String, java.lang.String, android.os.PersistableBundle);
  public boolean hasUserRestriction(java.lang.String);
  public boolean isQuietModeEnabled(android.os.UserHandle);
  public boolean isSystemUser();
  public boolean isUserAGoat();
  public boolean isUserRunning(android.os.UserHandle);
  public boolean isUserRunningOrStopping(android.os.UserHandle);
  public boolean isUserUnlocked();
  public boolean isUserUnlocked(android.os.UserHandle);
  public boolean setRestrictionsChallenge(java.lang.String);
  public int getUserCount();
  public long getSerialNumberForUser(android.os.UserHandle);
  public long getUserCreationTime(android.os.UserHandle);
  public void setUserRestriction(java.lang.String, boolean);
  public void setUserRestrictions(android.os.Bundle);
  public void setUserRestrictions(android.os.Bundle, android.os.UserHandle);
  public android.os.Bundle getApplicationRestrictions(java.lang.String);
  public android.os.Bundle getUserRestrictions();
  public android.os.Bundle getUserRestrictions(android.os.UserHandle);
  public android.os.UserHandle getUserForSerialNumber(long);
  public java.lang.String getUserName();
  public java.util.List getUserProfiles();
  public static final int USER_CREATION_FAILED_NOT_PERMITTED;
  public static final int USER_CREATION_FAILED_NO_MORE_USERS;
  public static final java.lang.String ALLOW_PARENT_PROFILE_APP_LINKING;
  public static final java.lang.String DISALLOW_ADD_USER;
  public static final java.lang.String DISALLOW_ADJUST_VOLUME;
  public static final java.lang.String DISALLOW_APPS_CONTROL;
  public static final java.lang.String DISALLOW_CONFIG_BLUETOOTH;
  public static final java.lang.String DISALLOW_CONFIG_CELL_BROADCASTS;
  public static final java.lang.String DISALLOW_CONFIG_CREDENTIALS;
  public static final java.lang.String DISALLOW_CONFIG_MOBILE_NETWORKS;
  public static final java.lang.String DISALLOW_CONFIG_TETHERING;
  public static final java.lang.String DISALLOW_CONFIG_VPN;
  public static final java.lang.String DISALLOW_CONFIG_WIFI;
  public static final java.lang.String DISALLOW_CREATE_WINDOWS;
  public static final java.lang.String DISALLOW_CROSS_PROFILE_COPY_PASTE;
  public static final java.lang.String DISALLOW_DATA_ROAMING;
  public static final java.lang.String DISALLOW_DEBUGGING_FEATURES;
  public static final java.lang.String DISALLOW_FACTORY_RESET;
  public static final java.lang.String DISALLOW_FUN;
  public static final java.lang.String DISALLOW_INSTALL_APPS;
  public static final java.lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES;
  public static final java.lang.String DISALLOW_MODIFY_ACCOUNTS;
  public static final java.lang.String DISALLOW_MOUNT_PHYSICAL_MEDIA;
  public static final java.lang.String DISALLOW_NETWORK_RESET;
  public static final java.lang.String DISALLOW_OUTGOING_BEAM;
  public static final java.lang.String DISALLOW_OUTGOING_CALLS;
  public static final java.lang.String DISALLOW_REMOVE_USER;
  public static final java.lang.String DISALLOW_SAFE_BOOT;
  public static final java.lang.String DISALLOW_SET_USER_ICON;
  public static final java.lang.String DISALLOW_SET_WALLPAPER;
  public static final java.lang.String DISALLOW_SHARE_LOCATION;
  public static final java.lang.String DISALLOW_SMS;
  public static final java.lang.String DISALLOW_UNINSTALL_APPS;
  public static final java.lang.String DISALLOW_UNMUTE_MICROPHONE;
  public static final java.lang.String DISALLOW_USB_FILE_TRANSFER;
  public static final java.lang.String ENSURE_VERIFY_APPS;
  public static final java.lang.String KEY_RESTRICTIONS_PENDING;
}
public abstract class android.os.Vibrator
  extends java.lang.Object
{
  public abstract boolean hasVibrator();
  public abstract void cancel();
  public void vibrate(long);
  public void vibrate(long, android.media.AudioAttributes);
  public void vibrate(long[], int);
  public void vibrate(long[], int, android.media.AudioAttributes);
}
public class android.os.WorkSource
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.WorkSource);
  public boolean add(android.os.WorkSource);
  public boolean diff(android.os.WorkSource);
  public boolean equals(java.lang.Object);
  public boolean remove(android.os.WorkSource);
  public int describeContents();
  public int hashCode();
  public void clear();
  public void set(android.os.WorkSource);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.os.health.HealthStats
  extends java.lang.Object
{
  public boolean hasMeasurement(int);
  public boolean hasMeasurements(int);
  public boolean hasStats(int);
  public boolean hasTimer(int);
  public boolean hasTimers(int);
  public int getMeasurementKeyAt(int);
  public int getMeasurementKeyCount();
  public int getMeasurementsKeyAt(int);
  public int getMeasurementsKeyCount();
  public int getStatsKeyAt(int);
  public int getStatsKeyCount();
  public int getTimerCount(int);
  public int getTimerKeyAt(int);
  public int getTimerKeyCount();
  public int getTimersKeyAt(int);
  public int getTimersKeyCount();
  public long getMeasurement(int);
  public long getTimerTime(int);
  public android.os.health.TimerStat getTimer(int);
  public java.lang.String getDataType();
  public java.util.Map getMeasurements(int);
  public java.util.Map getStats(int);
  public java.util.Map getTimers(int);
}
public final class android.os.health.PackageHealthStats
  extends java.lang.Object
{
  public static final int MEASUREMENTS_WAKEUP_ALARMS_COUNT;
  public static final int STATS_SERVICES;
}
public final class android.os.health.PidHealthStats
  extends java.lang.Object
{
  public static final int MEASUREMENT_WAKE_NESTING_COUNT;
  public static final int MEASUREMENT_WAKE_START_MS;
  public static final int MEASUREMENT_WAKE_SUM_MS;
}
public final class android.os.health.ProcessHealthStats
  extends java.lang.Object
{
  public static final int MEASUREMENT_ANR_COUNT;
  public static final int MEASUREMENT_CRASHES_COUNT;
  public static final int MEASUREMENT_FOREGROUND_MS;
  public static final int MEASUREMENT_STARTS_COUNT;
  public static final int MEASUREMENT_SYSTEM_TIME_MS;
  public static final int MEASUREMENT_USER_TIME_MS;
}
public final class android.os.health.ServiceHealthStats
  extends java.lang.Object
{
  public static final int MEASUREMENT_LAUNCH_COUNT;
  public static final int MEASUREMENT_START_SERVICE_COUNT;
}
public class android.os.health.SystemHealthManager
  extends java.lang.Object
{
  public android.os.health.HealthStats takeMyUidSnapshot();
  public android.os.health.HealthStats takeUidSnapshot(int);
  public android.os.health.HealthStats[] takeUidSnapshots(int[]);
}
public final class android.os.health.TimerStat
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(int, long);
  public int describeContents();
  public int getCount();
  public long getTime();
  public void setCount(int);
  public void setTime(long);
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.os.health.UidHealthStats
  extends java.lang.Object
{
  public static final int MEASUREMENT_BLUETOOTH_IDLE_MS;
  public static final int MEASUREMENT_BLUETOOTH_POWER_MAMS;
  public static final int MEASUREMENT_BLUETOOTH_RX_BYTES;
  public static final int MEASUREMENT_BLUETOOTH_RX_MS;
  public static final int MEASUREMENT_BLUETOOTH_RX_PACKETS;
  public static final int MEASUREMENT_BLUETOOTH_TX_BYTES;
  public static final int MEASUREMENT_BLUETOOTH_TX_MS;
  public static final int MEASUREMENT_BLUETOOTH_TX_PACKETS;
  public static final int MEASUREMENT_BUTTON_USER_ACTIVITY_COUNT;
  public static final int MEASUREMENT_CPU_POWER_MAMS;
  public static final int MEASUREMENT_MOBILE_IDLE_MS;
  public static final int MEASUREMENT_MOBILE_POWER_MAMS;
  public static final int MEASUREMENT_MOBILE_RX_BYTES;
  public static final int MEASUREMENT_MOBILE_RX_MS;
  public static final int MEASUREMENT_MOBILE_RX_PACKETS;
  public static final int MEASUREMENT_MOBILE_TX_BYTES;
  public static final int MEASUREMENT_MOBILE_TX_MS;
  public static final int MEASUREMENT_MOBILE_TX_PACKETS;
  public static final int MEASUREMENT_OTHER_USER_ACTIVITY_COUNT;
  public static final int MEASUREMENT_REALTIME_BATTERY_MS;
  public static final int MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MS;
  public static final int MEASUREMENT_SYSTEM_CPU_TIME_MS;
  public static final int MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT;
  public static final int MEASUREMENT_UPTIME_BATTERY_MS;
  public static final int MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MS;
  public static final int MEASUREMENT_USER_CPU_TIME_MS;
  public static final int MEASUREMENT_WIFI_FULL_LOCK_MS;
  public static final int MEASUREMENT_WIFI_IDLE_MS;
  public static final int MEASUREMENT_WIFI_MULTICAST_MS;
  public static final int MEASUREMENT_WIFI_POWER_MAMS;
  public static final int MEASUREMENT_WIFI_RUNNING_MS;
  public static final int MEASUREMENT_WIFI_RX_BYTES;
  public static final int MEASUREMENT_WIFI_RX_MS;
  public static final int MEASUREMENT_WIFI_RX_PACKETS;
  public static final int MEASUREMENT_WIFI_TX_BYTES;
  public static final int MEASUREMENT_WIFI_TX_MS;
  public static final int MEASUREMENT_WIFI_TX_PACKETS;
  public static final int STATS_PACKAGES;
  public static final int STATS_PIDS;
  public static final int STATS_PROCESSES;
  public static final int TIMERS_JOBS;
  public static final int TIMERS_SENSORS;
  public static final int TIMERS_SYNCS;
  public static final int TIMERS_WAKELOCKS_DRAW;
  public static final int TIMERS_WAKELOCKS_FULL;
  public static final int TIMERS_WAKELOCKS_PARTIAL;
  public static final int TIMERS_WAKELOCKS_WINDOW;
  public static final int TIMER_AUDIO;
  public static final int TIMER_BLUETOOTH_SCAN;
  public static final int TIMER_CAMERA;
  public static final int TIMER_FLASHLIGHT;
  public static final int TIMER_FOREGROUND_ACTIVITY;
  public static final int TIMER_GPS_SENSOR;
  public static final int TIMER_MOBILE_RADIO_ACTIVE;
  public static final int TIMER_PROCESS_STATE_BACKGROUND_MS;
  public static final int TIMER_PROCESS_STATE_CACHED_MS;
  public static final int TIMER_PROCESS_STATE_FOREGROUND_MS;
  public static final int TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MS;
  public static final int TIMER_PROCESS_STATE_TOP_MS;
  public static final int TIMER_PROCESS_STATE_TOP_SLEEPING_MS;
  public static final int TIMER_VIBRATOR;
  public static final int TIMER_VIDEO;
  public static final int TIMER_WIFI_SCAN;
}
public abstract class android.os.storage.OnObbStateChangeListener
  extends java.lang.Object
{
  public void <init>();
  public void onObbStateChange(java.lang.String, int);
  public static final int ERROR_ALREADY_MOUNTED;
  public static final int ERROR_COULD_NOT_MOUNT;
  public static final int ERROR_COULD_NOT_UNMOUNT;
  public static final int ERROR_INTERNAL;
  public static final int ERROR_NOT_MOUNTED;
  public static final int ERROR_PERMISSION_DENIED;
  public static final int MOUNTED;
  public static final int UNMOUNTED;
}
public class android.os.storage.StorageManager
  extends java.lang.Object
{
  public boolean isEncrypted(java.io.File);
  public boolean isObbMounted(java.lang.String);
  public boolean mountObb(java.lang.String, java.lang.String, android.os.storage.OnObbStateChangeListener);
  public boolean unmountObb(java.lang.String, boolean, android.os.storage.OnObbStateChangeListener);
  public android.os.storage.StorageVolume getPrimaryStorageVolume();
  public android.os.storage.StorageVolume getStorageVolume(java.io.File);
  public java.lang.String getMountedObbPath(java.lang.String);
  public java.util.List getStorageVolumes();
}
public final class android.os.storage.StorageVolume
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean isEmulated();
  public boolean isPrimary();
  public boolean isRemovable();
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.Intent createAccessIntent(java.lang.String);
  public java.lang.String getDescription(android.content.Context);
  public java.lang.String getState();
  public java.lang.String getUuid();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String EXTRA_STORAGE_VOLUME;
}
public class android.preference.CheckBoxPreference
  extends android.preference.TwoStatePreference
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  protected void onBindView(android.view.View);
}
public abstract class android.preference.DialogPreference
  extends android.preference.Preference
  implements android.content.DialogInterface$OnClickListener, android.content.DialogInterface$OnDismissListener, android.preference.PreferenceManager$OnActivityDestroyListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public int getDialogLayoutResource();
  public void onActivityDestroy();
  public void onClick(android.content.DialogInterface, int);
  public void onDismiss(android.content.DialogInterface);
  public void setDialogIcon(android.graphics.drawable.Drawable);
  public void setDialogIcon(int);
  public void setDialogLayoutResource(int);
  public void setDialogMessage(int);
  public void setDialogMessage(java.lang.CharSequence);
  public void setDialogTitle(int);
  public void setDialogTitle(java.lang.CharSequence);
  public void setNegativeButtonText(int);
  public void setNegativeButtonText(java.lang.CharSequence);
  public void setPositiveButtonText(int);
  public void setPositiveButtonText(java.lang.CharSequence);
  public android.app.Dialog getDialog();
  public android.graphics.drawable.Drawable getDialogIcon();
  public java.lang.CharSequence getDialogMessage();
  public java.lang.CharSequence getDialogTitle();
  public java.lang.CharSequence getNegativeButtonText();
  public java.lang.CharSequence getPositiveButtonText();
  protected void onBindDialogView(android.view.View);
  protected void onClick();
  protected void onDialogClosed(boolean);
  protected void onPrepareDialogBuilder(android.app.AlertDialog$Builder);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void showDialog(android.os.Bundle);
  protected android.os.Parcelable onSaveInstanceState();
  protected android.view.View onCreateDialogView();
}
public class android.preference.EditTextPreference
  extends android.preference.DialogPreference
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean shouldDisableDependents();
  public void setText(java.lang.String);
  public android.widget.EditText getEditText();
  public java.lang.String getText();
  protected void onAddEditTextToDialogView(android.view.View, android.widget.EditText);
  protected void onBindDialogView(android.view.View);
  protected void onDialogClosed(boolean);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void onSetInitialValue(boolean, java.lang.Object);
  protected android.os.Parcelable onSaveInstanceState();
  protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray, int);
}
public class android.preference.ListPreference
  extends android.preference.DialogPreference
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public int findIndexOfValue(java.lang.String);
  public void setEntries(int);
  public void setEntries(java.lang.CharSequence[]);
  public void setEntryValues(int);
  public void setEntryValues(java.lang.CharSequence[]);
  public void setSummary(java.lang.CharSequence);
  public void setValue(java.lang.String);
  public void setValueIndex(int);
  public java.lang.CharSequence getEntry();
  public java.lang.CharSequence getSummary();
  public java.lang.CharSequence[] getEntries();
  public java.lang.CharSequence[] getEntryValues();
  public java.lang.String getValue();
  protected void onDialogClosed(boolean);
  protected void onPrepareDialogBuilder(android.app.AlertDialog$Builder);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void onSetInitialValue(boolean, java.lang.Object);
  protected android.os.Parcelable onSaveInstanceState();
  protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray, int);
}
public class android.preference.MultiSelectListPreference
  extends android.preference.DialogPreference
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public int findIndexOfValue(java.lang.String);
  public void setEntries(int);
  public void setEntries(java.lang.CharSequence[]);
  public void setEntryValues(int);
  public void setEntryValues(java.lang.CharSequence[]);
  public void setValues(java.util.Set);
  public java.lang.CharSequence[] getEntries();
  public java.lang.CharSequence[] getEntryValues();
  public java.util.Set getValues();
  protected void onDialogClosed(boolean);
  protected void onPrepareDialogBuilder(android.app.AlertDialog$Builder);
  protected void onSetInitialValue(boolean, java.lang.Object);
  protected android.os.Parcelable onSaveInstanceState();
  protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray, int);
}
public class android.preference.Preference
  extends java.lang.Object
  implements java.lang.Comparable
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getShouldDisableView();
  public boolean hasKey();
  public boolean isEnabled();
  public boolean isPersistent();
  public boolean isSelectable();
  public boolean persistStringSet(java.util.Set);
  public boolean shouldCommit();
  public boolean shouldDisableDependents();
  public int compareTo(android.preference.Preference);
  public int compareTo(java.lang.Object);
  public int getLayoutResource();
  public int getOrder();
  public int getTitleRes();
  public int getWidgetLayoutResource();
  public void notifyDependencyChange(boolean);
  public void onDependencyChanged(android.preference.Preference, boolean);
  public void onParentChanged(android.preference.Preference, boolean);
  public void restoreHierarchyState(android.os.Bundle);
  public void saveHierarchyState(android.os.Bundle);
  public void setDefaultValue(java.lang.Object);
  public void setDependency(java.lang.String);
  public void setEnabled(boolean);
  public void setFragment(java.lang.String);
  public void setIcon(android.graphics.drawable.Drawable);
  public void setIcon(int);
  public void setIntent(android.content.Intent);
  public void setKey(java.lang.String);
  public void setLayoutResource(int);
  public void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener);
  public void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener);
  public void setOrder(int);
  public void setPersistent(boolean);
  public void setSelectable(boolean);
  public void setShouldDisableView(boolean);
  public void setSummary(int);
  public void setSummary(java.lang.CharSequence);
  public void setTitle(int);
  public void setTitle(java.lang.CharSequence);
  public void setWidgetLayoutResource(int);
  public android.content.Context getContext();
  public android.content.Intent getIntent();
  public android.content.SharedPreferences getSharedPreferences();
  public android.content.SharedPreferences$Editor getEditor();
  public android.graphics.drawable.Drawable getIcon();
  public android.os.Bundle getExtras();
  public android.os.Bundle peekExtras();
  public android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener();
  public android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener();
  public android.preference.PreferenceManager getPreferenceManager();
  public android.view.View getView(android.view.View, android.view.ViewGroup);
  public java.lang.CharSequence getSummary();
  public java.lang.CharSequence getTitle();
  public java.lang.String getDependency();
  public java.lang.String getFragment();
  public java.lang.String getKey();
  public java.lang.String toString();
  public java.util.Set getPersistedStringSet(java.util.Set);
  protected boolean callChangeListener(java.lang.Object);
  protected boolean getPersistedBoolean(boolean);
  protected boolean persistBoolean(boolean);
  protected boolean persistFloat(float);
  protected boolean persistInt(int);
  protected boolean persistLong(long);
  protected boolean persistString(java.lang.String);
  protected boolean shouldPersist();
  protected float getPersistedFloat(float);
  protected int getPersistedInt(int);
  protected long getPersistedLong(long);
  protected void notifyChanged();
  protected void notifyHierarchyChanged();
  protected void onAttachedToActivity();
  protected void onAttachedToHierarchy(android.preference.PreferenceManager);
  protected void onBindView(android.view.View);
  protected void onClick();
  protected void onPrepareForRemoval();
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void onSetInitialValue(boolean, java.lang.Object);
  protected android.os.Parcelable onSaveInstanceState();
  protected android.preference.Preference findPreferenceInHierarchy(java.lang.String);
  protected android.view.View onCreateView(android.view.ViewGroup);
  protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray, int);
  protected java.lang.String getPersistedString(java.lang.String);
  public static final int DEFAULT_ORDER;
}
public class android.preference.Preference$BaseSavedState
  extends android.view.AbsSavedState
{
  public void <init>(android.os.Parcel);
  public void <init>(android.os.Parcelable);
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.preference.Preference$OnPreferenceChangeListener
{
  public abstract boolean onPreferenceChange(android.preference.Preference, java.lang.Object);
}
public interface android.preference.Preference$OnPreferenceClickListener
{
  public abstract boolean onPreferenceClick(android.preference.Preference);
}
public abstract class android.preference.PreferenceActivity
  extends android.app.ListActivity
  implements android.preference.PreferenceFragment$OnPreferenceStartFragmentCallback
{
  public void <init>();
  public boolean hasHeaders();
  public boolean isMultiPane();
  public boolean onIsHidingHeaders();
  public boolean onIsMultiPane();
  public boolean onPreferenceStartFragment(android.preference.PreferenceFragment, android.preference.Preference);
  public boolean onPreferenceTreeClick(android.preference.PreferenceScreen, android.preference.Preference);
  public void addPreferencesFromIntent(android.content.Intent);
  public void addPreferencesFromResource(int);
  public void finishPreferencePanel(android.app.Fragment, int, android.content.Intent);
  public void invalidateHeaders();
  public void loadHeadersFromResource(int, java.util.List);
  public void onBuildHeaders(java.util.List);
  public void onContentChanged();
  public void onHeaderClick(android.preference.PreferenceActivity$Header, int);
  public void setListFooter(android.view.View);
  public void setParentTitle(java.lang.CharSequence, java.lang.CharSequence, android.view.View$OnClickListener);
  public void setPreferenceScreen(android.preference.PreferenceScreen);
  public void showBreadCrumbs(java.lang.CharSequence, java.lang.CharSequence);
  public void startPreferenceFragment(android.app.Fragment, boolean);
  public void startPreferencePanel(java.lang.String, android.os.Bundle, int, java.lang.CharSequence, android.app.Fragment, int);
  public void startWithFragment(java.lang.String, android.os.Bundle, android.app.Fragment, int);
  public void startWithFragment(java.lang.String, android.os.Bundle, android.app.Fragment, int, int, int);
  public void switchToHeader(android.preference.PreferenceActivity$Header);
  public void switchToHeader(java.lang.String, android.os.Bundle);
  public android.content.Intent onBuildStartFragmentIntent(java.lang.String, android.os.Bundle, int, int);
  public android.preference.Preference findPreference(java.lang.CharSequence);
  public android.preference.PreferenceActivity$Header onGetInitialHeader();
  public android.preference.PreferenceActivity$Header onGetNewHeader();
  public android.preference.PreferenceManager getPreferenceManager();
  public android.preference.PreferenceScreen getPreferenceScreen();
  protected boolean isValidFragment(java.lang.String);
  protected void onActivityResult(int, int, android.content.Intent);
  protected void onCreate(android.os.Bundle);
  protected void onDestroy();
  protected void onListItemClick(android.widget.ListView, android.view.View, int, long);
  protected void onNewIntent(android.content.Intent);
  protected void onRestoreInstanceState(android.os.Bundle);
  protected void onSaveInstanceState(android.os.Bundle);
  protected void onStop();
  public static final long HEADER_ID_UNDEFINED;
  public static final java.lang.String EXTRA_NO_HEADERS;
  public static final java.lang.String EXTRA_SHOW_FRAGMENT;
  public static final java.lang.String EXTRA_SHOW_FRAGMENT_ARGUMENTS;
  public static final java.lang.String EXTRA_SHOW_FRAGMENT_SHORT_TITLE;
  public static final java.lang.String EXTRA_SHOW_FRAGMENT_TITLE;
}
public final class android.preference.PreferenceActivity$Header
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getBreadCrumbShortTitle(android.content.res.Resources);
  public java.lang.CharSequence getBreadCrumbTitle(android.content.res.Resources);
  public java.lang.CharSequence getSummary(android.content.res.Resources);
  public java.lang.CharSequence getTitle(android.content.res.Resources);
  public static final android.os.Parcelable$Creator CREATOR;
  public int breadCrumbShortTitleRes;
  public int breadCrumbTitleRes;
  public int iconRes;
  public int summaryRes;
  public int titleRes;
  public long id;
  public android.content.Intent intent;
  public android.os.Bundle extras;
  public android.os.Bundle fragmentArguments;
  public java.lang.CharSequence breadCrumbShortTitle;
  public java.lang.CharSequence breadCrumbTitle;
  public java.lang.CharSequence summary;
  public java.lang.CharSequence title;
  public java.lang.String fragment;
}
public class android.preference.PreferenceCategory
  extends android.preference.PreferenceGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isEnabled();
  public boolean shouldDisableDependents();
  protected boolean onPrepareAddPreference(android.preference.Preference);
}
public abstract class android.preference.PreferenceFragment
  extends android.app.Fragment
{
  public void <init>();
  public boolean onPreferenceTreeClick(android.preference.PreferenceScreen, android.preference.Preference);
  public void addPreferencesFromIntent(android.content.Intent);
  public void addPreferencesFromResource(int);
  public void onActivityCreated(android.os.Bundle);
  public void onActivityResult(int, int, android.content.Intent);
  public void onCreate(android.os.Bundle);
  public void onDestroy();
  public void onDestroyView();
  public void onSaveInstanceState(android.os.Bundle);
  public void onStart();
  public void onStop();
  public void onViewCreated(android.view.View, android.os.Bundle);
  public void setPreferenceScreen(android.preference.PreferenceScreen);
  public android.preference.Preference findPreference(java.lang.CharSequence);
  public android.preference.PreferenceManager getPreferenceManager();
  public android.preference.PreferenceScreen getPreferenceScreen();
  public android.view.View onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle);
}
public interface android.preference.PreferenceFragment$OnPreferenceStartFragmentCallback
{
  public abstract boolean onPreferenceStartFragment(android.preference.PreferenceFragment, android.preference.Preference);
}
public abstract class android.preference.PreferenceGroup
  extends android.preference.Preference
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean addPreference(android.preference.Preference);
  public boolean isOrderingAsAdded();
  public boolean removePreference(android.preference.Preference);
  public int getPreferenceCount();
  public void addItemFromInflater(android.preference.Preference);
  public void notifyDependencyChange(boolean);
  public void removeAll();
  public void setOrderingAsAdded(boolean);
  public android.preference.Preference findPreference(java.lang.CharSequence);
  public android.preference.Preference getPreference(int);
  protected boolean isOnSameScreenAsChildren();
  protected boolean onPrepareAddPreference(android.preference.Preference);
  protected void dispatchRestoreInstanceState(android.os.Bundle);
  protected void dispatchSaveInstanceState(android.os.Bundle);
  protected void onAttachedToActivity();
  protected void onPrepareForRemoval();
}
public class android.preference.PreferenceManager
  extends java.lang.Object
{
  public static void setDefaultValues(android.content.Context, int, boolean);
  public static void setDefaultValues(android.content.Context, java.lang.String, int, int, boolean);
  public static android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context);
  public static java.lang.String getDefaultSharedPreferencesName(android.content.Context);
  public boolean isStorageDefault();
  public boolean isStorageDeviceProtected();
  public int getSharedPreferencesMode();
  public void setSharedPreferencesMode(int);
  public void setSharedPreferencesName(java.lang.String);
  public void setStorageDefault();
  public void setStorageDeviceProtected();
  public android.content.SharedPreferences getSharedPreferences();
  public android.preference.Preference findPreference(java.lang.CharSequence);
  public android.preference.PreferenceScreen createPreferenceScreen(android.content.Context);
  public java.lang.String getSharedPreferencesName();
  public static final java.lang.String KEY_HAS_SET_DEFAULT_VALUES;
  public static final java.lang.String METADATA_KEY_PREFERENCES;
}
public interface android.preference.PreferenceManager$OnActivityDestroyListener
{
  public abstract void onActivityDestroy();
}
public interface android.preference.PreferenceManager$OnActivityResultListener
{
  public abstract boolean onActivityResult(int, int, android.content.Intent);
}
public interface android.preference.PreferenceManager$OnActivityStopListener
{
  public abstract void onActivityStop();
}
public final class android.preference.PreferenceScreen
  extends android.preference.PreferenceGroup
  implements android.widget.AdapterView$OnItemClickListener, android.content.DialogInterface$OnDismissListener
{
  public void bind(android.widget.ListView);
  public void onDismiss(android.content.DialogInterface);
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
  public android.app.Dialog getDialog();
  public android.widget.ListAdapter getRootAdapter();
  protected boolean isOnSameScreenAsChildren();
  protected void onClick();
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected android.os.Parcelable onSaveInstanceState();
  protected android.widget.ListAdapter onCreateRootAdapter();
}
public class android.preference.RingtonePreference
  extends android.preference.Preference
  implements android.preference.PreferenceManager$OnActivityResultListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getShowDefault();
  public boolean getShowSilent();
  public boolean onActivityResult(int, int, android.content.Intent);
  public int getRingtoneType();
  public void setRingtoneType(int);
  public void setShowDefault(boolean);
  public void setShowSilent(boolean);
  protected void onAttachedToHierarchy(android.preference.PreferenceManager);
  protected void onClick();
  protected void onPrepareRingtonePickerIntent(android.content.Intent);
  protected void onSaveRingtone(android.net.Uri);
  protected void onSetInitialValue(boolean, java.lang.Object);
  protected android.net.Uri onRestoreRingtone();
  protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray, int);
}
public class android.preference.SwitchPreference
  extends android.preference.TwoStatePreference
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void setSwitchTextOff(int);
  public void setSwitchTextOff(java.lang.CharSequence);
  public void setSwitchTextOn(int);
  public void setSwitchTextOn(java.lang.CharSequence);
  public java.lang.CharSequence getSwitchTextOff();
  public java.lang.CharSequence getSwitchTextOn();
  protected void onBindView(android.view.View);
}
public abstract class android.preference.TwoStatePreference
  extends android.preference.Preference
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getDisableDependentsState();
  public boolean isChecked();
  public boolean shouldDisableDependents();
  public void setChecked(boolean);
  public void setDisableDependentsState(boolean);
  public void setSummaryOff(int);
  public void setSummaryOff(java.lang.CharSequence);
  public void setSummaryOn(int);
  public void setSummaryOn(java.lang.CharSequence);
  public java.lang.CharSequence getSummaryOff();
  public java.lang.CharSequence getSummaryOn();
  protected void onClick();
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void onSetInitialValue(boolean, java.lang.Object);
  protected android.os.Parcelable onSaveInstanceState();
  protected java.lang.Object onGetDefaultValue(android.content.res.TypedArray, int);
}
public final class android.print.PageRange
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int, int);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getEnd();
  public int getStart();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
  public static final android.print.PageRange ALL_PAGES;
}
public final class android.print.PrintAttributes
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getColorMode();
  public int getDuplexMode();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.print.PrintAttributes$Margins getMinMargins();
  public android.print.PrintAttributes$MediaSize getMediaSize();
  public android.print.PrintAttributes$Resolution getResolution();
  public java.lang.String toString();
  public static final int COLOR_MODE_COLOR;
  public static final int COLOR_MODE_MONOCHROME;
  public static final int DUPLEX_MODE_LONG_EDGE;
  public static final int DUPLEX_MODE_NONE;
  public static final int DUPLEX_MODE_SHORT_EDGE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.print.PrintAttributes$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.print.PrintAttributes build();
  public android.print.PrintAttributes$Builder setColorMode(int);
  public android.print.PrintAttributes$Builder setDuplexMode(int);
  public android.print.PrintAttributes$Builder setMediaSize(android.print.PrintAttributes$MediaSize);
  public android.print.PrintAttributes$Builder setMinMargins(android.print.PrintAttributes$Margins);
  public android.print.PrintAttributes$Builder setResolution(android.print.PrintAttributes$Resolution);
}
public final class android.print.PrintAttributes$Margins
  extends java.lang.Object
{
  public void <init>(int, int, int, int);
  public boolean equals(java.lang.Object);
  public int getBottomMils();
  public int getLeftMils();
  public int getRightMils();
  public int getTopMils();
  public int hashCode();
  public java.lang.String toString();
  public static final android.print.PrintAttributes$Margins NO_MARGINS;
}
public final class android.print.PrintAttributes$MediaSize
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String, int, int);
  public boolean equals(java.lang.Object);
  public boolean isPortrait();
  public int getHeightMils();
  public int getWidthMils();
  public int hashCode();
  public android.print.PrintAttributes$MediaSize asLandscape();
  public android.print.PrintAttributes$MediaSize asPortrait();
  public java.lang.String getId();
  public java.lang.String getLabel(android.content.pm.PackageManager);
  public java.lang.String toString();
  public static final android.print.PrintAttributes$MediaSize ISO_A0;
  public static final android.print.PrintAttributes$MediaSize ISO_A10;
  public static final android.print.PrintAttributes$MediaSize ISO_A1;
  public static final android.print.PrintAttributes$MediaSize ISO_A2;
  public static final android.print.PrintAttributes$MediaSize ISO_A3;
  public static final android.print.PrintAttributes$MediaSize ISO_A4;
  public static final android.print.PrintAttributes$MediaSize ISO_A5;
  public static final android.print.PrintAttributes$MediaSize ISO_A6;
  public static final android.print.PrintAttributes$MediaSize ISO_A7;
  public static final android.print.PrintAttributes$MediaSize ISO_A8;
  public static final android.print.PrintAttributes$MediaSize ISO_A9;
  public static final android.print.PrintAttributes$MediaSize ISO_B0;
  public static final android.print.PrintAttributes$MediaSize ISO_B10;
  public static final android.print.PrintAttributes$MediaSize ISO_B1;
  public static final android.print.PrintAttributes$MediaSize ISO_B2;
  public static final android.print.PrintAttributes$MediaSize ISO_B3;
  public static final android.print.PrintAttributes$MediaSize ISO_B4;
  public static final android.print.PrintAttributes$MediaSize ISO_B5;
  public static final android.print.PrintAttributes$MediaSize ISO_B6;
  public static final android.print.PrintAttributes$MediaSize ISO_B7;
  public static final android.print.PrintAttributes$MediaSize ISO_B8;
  public static final android.print.PrintAttributes$MediaSize ISO_B9;
  public static final android.print.PrintAttributes$MediaSize ISO_C0;
  public static final android.print.PrintAttributes$MediaSize ISO_C10;
  public static final android.print.PrintAttributes$MediaSize ISO_C1;
  public static final android.print.PrintAttributes$MediaSize ISO_C2;
  public static final android.print.PrintAttributes$MediaSize ISO_C3;
  public static final android.print.PrintAttributes$MediaSize ISO_C4;
  public static final android.print.PrintAttributes$MediaSize ISO_C5;
  public static final android.print.PrintAttributes$MediaSize ISO_C6;
  public static final android.print.PrintAttributes$MediaSize ISO_C7;
  public static final android.print.PrintAttributes$MediaSize ISO_C8;
  public static final android.print.PrintAttributes$MediaSize ISO_C9;
  public static final android.print.PrintAttributes$MediaSize JIS_B0;
  public static final android.print.PrintAttributes$MediaSize JIS_B10;
  public static final android.print.PrintAttributes$MediaSize JIS_B1;
  public static final android.print.PrintAttributes$MediaSize JIS_B2;
  public static final android.print.PrintAttributes$MediaSize JIS_B3;
  public static final android.print.PrintAttributes$MediaSize JIS_B4;
  public static final android.print.PrintAttributes$MediaSize JIS_B5;
  public static final android.print.PrintAttributes$MediaSize JIS_B6;
  public static final android.print.PrintAttributes$MediaSize JIS_B7;
  public static final android.print.PrintAttributes$MediaSize JIS_B8;
  public static final android.print.PrintAttributes$MediaSize JIS_B9;
  public static final android.print.PrintAttributes$MediaSize JIS_EXEC;
  public static final android.print.PrintAttributes$MediaSize JPN_CHOU2;
  public static final android.print.PrintAttributes$MediaSize JPN_CHOU3;
  public static final android.print.PrintAttributes$MediaSize JPN_CHOU4;
  public static final android.print.PrintAttributes$MediaSize JPN_HAGAKI;
  public static final android.print.PrintAttributes$MediaSize JPN_KAHU;
  public static final android.print.PrintAttributes$MediaSize JPN_KAKU2;
  public static final android.print.PrintAttributes$MediaSize JPN_OUFUKU;
  public static final android.print.PrintAttributes$MediaSize JPN_YOU4;
  public static final android.print.PrintAttributes$MediaSize NA_FOOLSCAP;
  public static final android.print.PrintAttributes$MediaSize NA_GOVT_LETTER;
  public static final android.print.PrintAttributes$MediaSize NA_INDEX_3X5;
  public static final android.print.PrintAttributes$MediaSize NA_INDEX_4X6;
  public static final android.print.PrintAttributes$MediaSize NA_INDEX_5X8;
  public static final android.print.PrintAttributes$MediaSize NA_JUNIOR_LEGAL;
  public static final android.print.PrintAttributes$MediaSize NA_LEDGER;
  public static final android.print.PrintAttributes$MediaSize NA_LEGAL;
  public static final android.print.PrintAttributes$MediaSize NA_LETTER;
  public static final android.print.PrintAttributes$MediaSize NA_MONARCH;
  public static final android.print.PrintAttributes$MediaSize NA_QUARTO;
  public static final android.print.PrintAttributes$MediaSize NA_TABLOID;
  public static final android.print.PrintAttributes$MediaSize OM_DAI_PA_KAI;
  public static final android.print.PrintAttributes$MediaSize OM_JUURO_KU_KAI;
  public static final android.print.PrintAttributes$MediaSize OM_PA_KAI;
  public static final android.print.PrintAttributes$MediaSize PRC_10;
  public static final android.print.PrintAttributes$MediaSize PRC_16K;
  public static final android.print.PrintAttributes$MediaSize PRC_1;
  public static final android.print.PrintAttributes$MediaSize PRC_2;
  public static final android.print.PrintAttributes$MediaSize PRC_3;
  public static final android.print.PrintAttributes$MediaSize PRC_4;
  public static final android.print.PrintAttributes$MediaSize PRC_5;
  public static final android.print.PrintAttributes$MediaSize PRC_6;
  public static final android.print.PrintAttributes$MediaSize PRC_7;
  public static final android.print.PrintAttributes$MediaSize PRC_8;
  public static final android.print.PrintAttributes$MediaSize PRC_9;
  public static final android.print.PrintAttributes$MediaSize ROC_16K;
  public static final android.print.PrintAttributes$MediaSize ROC_8K;
  public static final android.print.PrintAttributes$MediaSize UNKNOWN_LANDSCAPE;
  public static final android.print.PrintAttributes$MediaSize UNKNOWN_PORTRAIT;
}
public final class android.print.PrintAttributes$Resolution
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String, int, int);
  public boolean equals(java.lang.Object);
  public int getHorizontalDpi();
  public int getVerticalDpi();
  public int hashCode();
  public java.lang.String getId();
  public java.lang.String getLabel();
  public java.lang.String toString();
}
public abstract class android.print.PrintDocumentAdapter
  extends java.lang.Object
{
  public void <init>();
  public abstract void onLayout(android.print.PrintAttributes, android.print.PrintAttributes, android.os.CancellationSignal, android.print.PrintDocumentAdapter$LayoutResultCallback, android.os.Bundle);
  public abstract void onWrite(android.print.PageRange[], android.os.ParcelFileDescriptor, android.os.CancellationSignal, android.print.PrintDocumentAdapter$WriteResultCallback);
  public void onFinish();
  public void onStart();
  public static final java.lang.String EXTRA_PRINT_PREVIEW;
}
public abstract class android.print.PrintDocumentAdapter$LayoutResultCallback
  extends java.lang.Object
{
  public void onLayoutCancelled();
  public void onLayoutFailed(java.lang.CharSequence);
  public void onLayoutFinished(android.print.PrintDocumentInfo, boolean);
}
public abstract class android.print.PrintDocumentAdapter$WriteResultCallback
  extends java.lang.Object
{
  public void onWriteCancelled();
  public void onWriteFailed(java.lang.CharSequence);
  public void onWriteFinished(android.print.PageRange[]);
}
public final class android.print.PrintDocumentInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getContentType();
  public int getPageCount();
  public int hashCode();
  public long getDataSize();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getName();
  public java.lang.String toString();
  public static final int CONTENT_TYPE_DOCUMENT;
  public static final int CONTENT_TYPE_PHOTO;
  public static final int CONTENT_TYPE_UNKNOWN;
  public static final int PAGE_COUNT_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.print.PrintDocumentInfo$Builder
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public android.print.PrintDocumentInfo build();
  public android.print.PrintDocumentInfo$Builder setContentType(int);
  public android.print.PrintDocumentInfo$Builder setPageCount(int);
}
public final class android.print.PrintJob
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public boolean isBlocked();
  public boolean isCancelled();
  public boolean isCompleted();
  public boolean isFailed();
  public boolean isQueued();
  public boolean isStarted();
  public int hashCode();
  public void cancel();
  public void restart();
  public android.print.PrintJobId getId();
  public android.print.PrintJobInfo getInfo();
}
public final class android.print.PrintJobId
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.print.PrintJobInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getCopies();
  public int getState();
  public long getCreationTime();
  public void writeToParcel(android.os.Parcel, int);
  public android.print.PageRange[] getPages();
  public android.print.PrintAttributes getAttributes();
  public android.print.PrintJobId getId();
  public android.print.PrinterId getPrinterId();
  public java.lang.String getLabel();
  public java.lang.String toString();
  public static final int STATE_BLOCKED;
  public static final int STATE_CANCELED;
  public static final int STATE_COMPLETED;
  public static final int STATE_CREATED;
  public static final int STATE_FAILED;
  public static final int STATE_QUEUED;
  public static final int STATE_STARTED;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.print.PrintJobInfo$Builder
  extends java.lang.Object
{
  public void <init>(android.print.PrintJobInfo);
  public void putAdvancedOption(java.lang.String, int);
  public void putAdvancedOption(java.lang.String, java.lang.String);
  public void setAttributes(android.print.PrintAttributes);
  public void setCopies(int);
  public void setPages(android.print.PageRange[]);
  public android.print.PrintJobInfo build();
}
public final class android.print.PrintManager
  extends java.lang.Object
{
  public android.print.PrintJob print(java.lang.String, android.print.PrintDocumentAdapter, android.print.PrintAttributes);
  public java.util.List getPrintJobs();
}
public final class android.print.PrinterCapabilitiesInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getColorModes();
  public int getDuplexModes();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.print.PrintAttributes getDefaults();
  public android.print.PrintAttributes$Margins getMinMargins();
  public java.lang.String toString();
  public java.util.List getMediaSizes();
  public java.util.List getResolutions();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.print.PrinterCapabilitiesInfo$Builder
  extends java.lang.Object
{
  public void <init>(android.print.PrinterId);
  public android.print.PrinterCapabilitiesInfo build();
  public android.print.PrinterCapabilitiesInfo$Builder addMediaSize(android.print.PrintAttributes$MediaSize, boolean);
  public android.print.PrinterCapabilitiesInfo$Builder addResolution(android.print.PrintAttributes$Resolution, boolean);
  public android.print.PrinterCapabilitiesInfo$Builder setColorModes(int, int);
  public android.print.PrinterCapabilitiesInfo$Builder setDuplexModes(int, int);
  public android.print.PrinterCapabilitiesInfo$Builder setMinMargins(android.print.PrintAttributes$Margins);
}
public final class android.print.PrinterId
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getLocalId();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.print.PrinterInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getStatus();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.print.PrinterCapabilitiesInfo getCapabilities();
  public android.print.PrinterId getId();
  public java.lang.String getDescription();
  public java.lang.String getName();
  public java.lang.String toString();
  public static final int STATUS_BUSY;
  public static final int STATUS_IDLE;
  public static final int STATUS_UNAVAILABLE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.print.PrinterInfo$Builder
  extends java.lang.Object
{
  public void <init>(android.print.PrinterId, java.lang.String, int);
  public void <init>(android.print.PrinterInfo);
  public android.print.PrinterInfo build();
  public android.print.PrinterInfo$Builder setCapabilities(android.print.PrinterCapabilitiesInfo);
  public android.print.PrinterInfo$Builder setDescription(java.lang.String);
  public android.print.PrinterInfo$Builder setHasCustomPrinterIcon(boolean);
  public android.print.PrinterInfo$Builder setIconResourceId(int);
  public android.print.PrinterInfo$Builder setInfoIntent(android.app.PendingIntent);
  public android.print.PrinterInfo$Builder setName(java.lang.String);
  public android.print.PrinterInfo$Builder setStatus(int);
}
public class android.print.pdf.PrintedPdfDocument
  extends android.graphics.pdf.PdfDocument
{
  public void <init>(android.content.Context, android.print.PrintAttributes);
  public int getPageHeight();
  public int getPageWidth();
  public android.graphics.Rect getPageContentRect();
  public android.graphics.pdf.PdfDocument$Page startPage(int);
}
public final class android.printservice.CustomPrinterIconCallback
  extends java.lang.Object
{
  public boolean onCustomPrinterIconLoaded(android.graphics.drawable.Icon);
}
public final class android.printservice.PrintDocument
  extends java.lang.Object
{
  public android.os.ParcelFileDescriptor getData();
  public android.print.PrintDocumentInfo getInfo();
}
public final class android.printservice.PrintJob
  extends java.lang.Object
{
  public boolean block(java.lang.String);
  public boolean cancel();
  public boolean complete();
  public boolean equals(java.lang.Object);
  public boolean fail(java.lang.String);
  public boolean hasAdvancedOption(java.lang.String);
  public boolean isBlocked();
  public boolean isCancelled();
  public boolean isCompleted();
  public boolean isFailed();
  public boolean isQueued();
  public boolean isStarted();
  public boolean setTag(java.lang.String);
  public boolean start();
  public int getAdvancedIntOption(java.lang.String);
  public int hashCode();
  public void setProgress(float);
  public void setStatus(int);
  public void setStatus(java.lang.CharSequence);
  public android.print.PrintJobId getId();
  public android.print.PrintJobInfo getInfo();
  public android.printservice.PrintDocument getDocument();
  public java.lang.String getAdvancedStringOption(java.lang.String);
  public java.lang.String getTag();
}
public abstract class android.printservice.PrintService
  extends android.app.Service
{
  public void <init>();
  public final android.os.IBinder onBind(android.content.Intent);
  public final android.print.PrinterId generatePrinterId(java.lang.String);
  public final java.util.List getActivePrintJobs();
  protected final void attachBaseContext(android.content.Context);
  protected abstract void onPrintJobQueued(android.printservice.PrintJob);
  protected abstract void onRequestCancelPrintJob(android.printservice.PrintJob);
  protected abstract android.printservice.PrinterDiscoverySession onCreatePrinterDiscoverySession();
  protected void onConnected();
  protected void onDisconnected();
  public static final java.lang.String EXTRA_PRINTER_INFO;
  public static final java.lang.String EXTRA_PRINT_DOCUMENT_INFO;
  public static final java.lang.String EXTRA_PRINT_JOB_INFO;
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public abstract class android.printservice.PrinterDiscoverySession
  extends java.lang.Object
{
  public void <init>();
  public final boolean isDestroyed();
  public final boolean isPrinterDiscoveryStarted();
  public final void addPrinters(java.util.List);
  public final void removePrinters(java.util.List);
  public final java.util.List getPrinters();
  public final java.util.List getTrackedPrinters();
  public abstract void onDestroy();
  public abstract void onStartPrinterDiscovery(java.util.List);
  public abstract void onStartPrinterStateTracking(android.print.PrinterId);
  public abstract void onStopPrinterDiscovery();
  public abstract void onStopPrinterStateTracking(android.print.PrinterId);
  public abstract void onValidatePrinters(java.util.List);
  public void onRequestCustomPrinterIcon(android.print.PrinterId, android.os.CancellationSignal, android.printservice.CustomPrinterIconCallback);
}
public final class android.provider.AlarmClock
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String ACTION_DISMISS_ALARM;
  public static final java.lang.String ACTION_SET_ALARM;
  public static final java.lang.String ACTION_SET_TIMER;
  public static final java.lang.String ACTION_SHOW_ALARMS;
  public static final java.lang.String ACTION_SNOOZE_ALARM;
  public static final java.lang.String ALARM_SEARCH_MODE_ALL;
  public static final java.lang.String ALARM_SEARCH_MODE_LABEL;
  public static final java.lang.String ALARM_SEARCH_MODE_NEXT;
  public static final java.lang.String ALARM_SEARCH_MODE_TIME;
  public static final java.lang.String EXTRA_ALARM_SEARCH_MODE;
  public static final java.lang.String EXTRA_ALARM_SNOOZE_DURATION;
  public static final java.lang.String EXTRA_DAYS;
  public static final java.lang.String EXTRA_HOUR;
  public static final java.lang.String EXTRA_IS_PM;
  public static final java.lang.String EXTRA_LENGTH;
  public static final java.lang.String EXTRA_MESSAGE;
  public static final java.lang.String EXTRA_MINUTES;
  public static final java.lang.String EXTRA_RINGTONE;
  public static final java.lang.String EXTRA_SKIP_UI;
  public static final java.lang.String EXTRA_VIBRATE;
  public static final java.lang.String VALUE_RINGTONE_SILENT;
}
public interface android.provider.BaseColumns
{
  public static final java.lang.String _COUNT;
  public static final java.lang.String _ID;
}
public class android.provider.BlockedNumberContract
  extends java.lang.Object
{
  public static boolean canCurrentUserBlockNumbers(android.content.Context);
  public static boolean isBlocked(android.content.Context, java.lang.String);
  public static int unblock(android.content.Context, java.lang.String);
  public static final android.net.Uri AUTHORITY_URI;
  public static final java.lang.String AUTHORITY;
}
public class android.provider.BlockedNumberContract$BlockedNumbers
  extends java.lang.Object
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String COLUMN_E164_NUMBER;
  public static final java.lang.String COLUMN_ID;
  public static final java.lang.String COLUMN_ORIGINAL_NUMBER;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
}
public class android.provider.Browser
  extends java.lang.Object
{
  public static final void sendString(android.content.Context, java.lang.String);
  public void <init>();
  public static final java.lang.String EXTRA_APPLICATION_ID;
  public static final java.lang.String EXTRA_CREATE_NEW_TAB;
  public static final java.lang.String EXTRA_HEADERS;
  public static final java.lang.String INITIAL_ZOOM_LEVEL;
}
public final class android.provider.CalendarContract
  extends java.lang.Object
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String ACCOUNT_TYPE_LOCAL;
  public static final java.lang.String ACTION_EVENT_REMINDER;
  public static final java.lang.String ACTION_HANDLE_CUSTOM_EVENT;
  public static final java.lang.String AUTHORITY;
  public static final java.lang.String CALLER_IS_SYNCADAPTER;
  public static final java.lang.String EXTRA_CUSTOM_APP_URI;
  public static final java.lang.String EXTRA_EVENT_ALL_DAY;
  public static final java.lang.String EXTRA_EVENT_BEGIN_TIME;
  public static final java.lang.String EXTRA_EVENT_END_TIME;
}
public final class android.provider.CalendarContract$Attendees
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$AttendeesColumns, android.provider.CalendarContract$EventsColumns
{
  public static final android.database.Cursor query(android.content.ContentResolver, long, java.lang.String[]);
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.CalendarContract$AttendeesColumns
{
  public static final int ATTENDEE_STATUS_ACCEPTED;
  public static final int ATTENDEE_STATUS_DECLINED;
  public static final int ATTENDEE_STATUS_INVITED;
  public static final int ATTENDEE_STATUS_NONE;
  public static final int ATTENDEE_STATUS_TENTATIVE;
  public static final int RELATIONSHIP_ATTENDEE;
  public static final int RELATIONSHIP_NONE;
  public static final int RELATIONSHIP_ORGANIZER;
  public static final int RELATIONSHIP_PERFORMER;
  public static final int RELATIONSHIP_SPEAKER;
  public static final int TYPE_NONE;
  public static final int TYPE_OPTIONAL;
  public static final int TYPE_REQUIRED;
  public static final int TYPE_RESOURCE;
  public static final java.lang.String ATTENDEE_EMAIL;
  public static final java.lang.String ATTENDEE_IDENTITY;
  public static final java.lang.String ATTENDEE_ID_NAMESPACE;
  public static final java.lang.String ATTENDEE_NAME;
  public static final java.lang.String ATTENDEE_RELATIONSHIP;
  public static final java.lang.String ATTENDEE_STATUS;
  public static final java.lang.String ATTENDEE_TYPE;
  public static final java.lang.String EVENT_ID;
}
public final class android.provider.CalendarContract$CalendarAlerts
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$CalendarAlertsColumns, android.provider.CalendarContract$EventsColumns, android.provider.CalendarContract$CalendarColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri CONTENT_URI_BY_INSTANCE;
}
public interface android.provider.CalendarContract$CalendarAlertsColumns
{
  public static final int STATE_DISMISSED;
  public static final int STATE_FIRED;
  public static final int STATE_SCHEDULED;
  public static final java.lang.String ALARM_TIME;
  public static final java.lang.String BEGIN;
  public static final java.lang.String CREATION_TIME;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String END;
  public static final java.lang.String EVENT_ID;
  public static final java.lang.String MINUTES;
  public static final java.lang.String NOTIFY_TIME;
  public static final java.lang.String RECEIVED_TIME;
  public static final java.lang.String STATE;
}
public final class android.provider.CalendarContract$CalendarCache
  extends java.lang.Object
  implements android.provider.CalendarContract$CalendarCacheColumns
{
  public static final android.net.Uri URI;
  public static final java.lang.String KEY_TIMEZONE_INSTANCES;
  public static final java.lang.String KEY_TIMEZONE_INSTANCES_PREVIOUS;
  public static final java.lang.String KEY_TIMEZONE_TYPE;
  public static final java.lang.String TIMEZONE_TYPE_AUTO;
  public static final java.lang.String TIMEZONE_TYPE_HOME;
}
public interface android.provider.CalendarContract$CalendarCacheColumns
{
  public static final java.lang.String KEY;
  public static final java.lang.String VALUE;
}
public interface android.provider.CalendarContract$CalendarColumns
{
  public static final int CAL_ACCESS_CONTRIBUTOR;
  public static final int CAL_ACCESS_EDITOR;
  public static final int CAL_ACCESS_FREEBUSY;
  public static final int CAL_ACCESS_NONE;
  public static final int CAL_ACCESS_OVERRIDE;
  public static final int CAL_ACCESS_OWNER;
  public static final int CAL_ACCESS_READ;
  public static final int CAL_ACCESS_RESPOND;
  public static final int CAL_ACCESS_ROOT;
  public static final java.lang.String ALLOWED_ATTENDEE_TYPES;
  public static final java.lang.String ALLOWED_AVAILABILITY;
  public static final java.lang.String ALLOWED_REMINDERS;
  public static final java.lang.String CALENDAR_ACCESS_LEVEL;
  public static final java.lang.String CALENDAR_COLOR;
  public static final java.lang.String CALENDAR_COLOR_KEY;
  public static final java.lang.String CALENDAR_DISPLAY_NAME;
  public static final java.lang.String CALENDAR_TIME_ZONE;
  public static final java.lang.String CAN_MODIFY_TIME_ZONE;
  public static final java.lang.String CAN_ORGANIZER_RESPOND;
  public static final java.lang.String IS_PRIMARY;
  public static final java.lang.String MAX_REMINDERS;
  public static final java.lang.String OWNER_ACCOUNT;
  public static final java.lang.String SYNC_EVENTS;
  public static final java.lang.String VISIBLE;
}
public final class android.provider.CalendarContract$CalendarEntity
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$SyncColumns, android.provider.CalendarContract$CalendarColumns
{
  public static android.content.EntityIterator newEntityIterator(android.database.Cursor);
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.CalendarContract$CalendarSyncColumns
{
  public static final java.lang.String CAL_SYNC10;
  public static final java.lang.String CAL_SYNC1;
  public static final java.lang.String CAL_SYNC2;
  public static final java.lang.String CAL_SYNC3;
  public static final java.lang.String CAL_SYNC4;
  public static final java.lang.String CAL_SYNC5;
  public static final java.lang.String CAL_SYNC6;
  public static final java.lang.String CAL_SYNC7;
  public static final java.lang.String CAL_SYNC8;
  public static final java.lang.String CAL_SYNC9;
}
public final class android.provider.CalendarContract$Calendars
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$SyncColumns, android.provider.CalendarContract$CalendarColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CALENDAR_LOCATION;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String NAME;
}
public final class android.provider.CalendarContract$Colors
  extends java.lang.Object
  implements android.provider.CalendarContract$ColorsColumns
{
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.CalendarContract$ColorsColumns
  extends android.provider.SyncStateContract$Columns
{
  public static final int TYPE_CALENDAR;
  public static final int TYPE_EVENT;
  public static final java.lang.String COLOR;
  public static final java.lang.String COLOR_KEY;
  public static final java.lang.String COLOR_TYPE;
}
public final class android.provider.CalendarContract$EventDays
  extends java.lang.Object
  implements android.provider.CalendarContract$EventDaysColumns
{
  public static final android.database.Cursor query(android.content.ContentResolver, int, int, java.lang.String[]);
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.CalendarContract$EventDaysColumns
{
  public static final java.lang.String ENDDAY;
  public static final java.lang.String STARTDAY;
}
public final class android.provider.CalendarContract$Events
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$SyncColumns, android.provider.CalendarContract$EventsColumns, android.provider.CalendarContract$CalendarColumns
{
  public static final android.net.Uri CONTENT_EXCEPTION_URI;
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.CalendarContract$EventsColumns
{
  public static final int ACCESS_CONFIDENTIAL;
  public static final int ACCESS_DEFAULT;
  public static final int ACCESS_PRIVATE;
  public static final int ACCESS_PUBLIC;
  public static final int AVAILABILITY_BUSY;
  public static final int AVAILABILITY_FREE;
  public static final int AVAILABILITY_TENTATIVE;
  public static final int STATUS_CANCELED;
  public static final int STATUS_CONFIRMED;
  public static final int STATUS_TENTATIVE;
  public static final java.lang.String ACCESS_LEVEL;
  public static final java.lang.String ALL_DAY;
  public static final java.lang.String AVAILABILITY;
  public static final java.lang.String CALENDAR_ID;
  public static final java.lang.String CAN_INVITE_OTHERS;
  public static final java.lang.String CUSTOM_APP_PACKAGE;
  public static final java.lang.String CUSTOM_APP_URI;
  public static final java.lang.String DESCRIPTION;
  public static final java.lang.String DISPLAY_COLOR;
  public static final java.lang.String DTEND;
  public static final java.lang.String DTSTART;
  public static final java.lang.String DURATION;
  public static final java.lang.String EVENT_COLOR;
  public static final java.lang.String EVENT_COLOR_KEY;
  public static final java.lang.String EVENT_END_TIMEZONE;
  public static final java.lang.String EVENT_LOCATION;
  public static final java.lang.String EVENT_TIMEZONE;
  public static final java.lang.String EXDATE;
  public static final java.lang.String EXRULE;
  public static final java.lang.String GUESTS_CAN_INVITE_OTHERS;
  public static final java.lang.String GUESTS_CAN_MODIFY;
  public static final java.lang.String GUESTS_CAN_SEE_GUESTS;
  public static final java.lang.String HAS_ALARM;
  public static final java.lang.String HAS_ATTENDEE_DATA;
  public static final java.lang.String HAS_EXTENDED_PROPERTIES;
  public static final java.lang.String IS_ORGANIZER;
  public static final java.lang.String LAST_DATE;
  public static final java.lang.String LAST_SYNCED;
  public static final java.lang.String ORGANIZER;
  public static final java.lang.String ORIGINAL_ALL_DAY;
  public static final java.lang.String ORIGINAL_ID;
  public static final java.lang.String ORIGINAL_INSTANCE_TIME;
  public static final java.lang.String ORIGINAL_SYNC_ID;
  public static final java.lang.String RDATE;
  public static final java.lang.String RRULE;
  public static final java.lang.String SELF_ATTENDEE_STATUS;
  public static final java.lang.String STATUS;
  public static final java.lang.String SYNC_DATA10;
  public static final java.lang.String SYNC_DATA1;
  public static final java.lang.String SYNC_DATA2;
  public static final java.lang.String SYNC_DATA3;
  public static final java.lang.String SYNC_DATA4;
  public static final java.lang.String SYNC_DATA5;
  public static final java.lang.String SYNC_DATA6;
  public static final java.lang.String SYNC_DATA7;
  public static final java.lang.String SYNC_DATA8;
  public static final java.lang.String SYNC_DATA9;
  public static final java.lang.String TITLE;
  public static final java.lang.String UID_2445;
}
public final class android.provider.CalendarContract$EventsEntity
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$SyncColumns, android.provider.CalendarContract$EventsColumns
{
  public static android.content.EntityIterator newEntityIterator(android.database.Cursor, android.content.ContentProviderClient);
  public static android.content.EntityIterator newEntityIterator(android.database.Cursor, android.content.ContentResolver);
  public static final android.net.Uri CONTENT_URI;
}
public final class android.provider.CalendarContract$ExtendedProperties
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$ExtendedPropertiesColumns, android.provider.CalendarContract$EventsColumns
{
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.CalendarContract$ExtendedPropertiesColumns
{
  public static final java.lang.String EVENT_ID;
  public static final java.lang.String NAME;
  public static final java.lang.String VALUE;
}
public final class android.provider.CalendarContract$Instances
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$EventsColumns, android.provider.CalendarContract$CalendarColumns
{
  public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[], long, long);
  public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[], long, long, java.lang.String);
  public static final android.net.Uri CONTENT_BY_DAY_URI;
  public static final android.net.Uri CONTENT_SEARCH_BY_DAY_URI;
  public static final android.net.Uri CONTENT_SEARCH_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String BEGIN;
  public static final java.lang.String END;
  public static final java.lang.String END_DAY;
  public static final java.lang.String END_MINUTE;
  public static final java.lang.String EVENT_ID;
  public static final java.lang.String START_DAY;
  public static final java.lang.String START_MINUTE;
}
public final class android.provider.CalendarContract$Reminders
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.CalendarContract$RemindersColumns, android.provider.CalendarContract$EventsColumns
{
  public static final android.database.Cursor query(android.content.ContentResolver, long, java.lang.String[]);
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.CalendarContract$RemindersColumns
{
  public static final int METHOD_ALARM;
  public static final int METHOD_ALERT;
  public static final int METHOD_DEFAULT;
  public static final int METHOD_EMAIL;
  public static final int METHOD_SMS;
  public static final int MINUTES_DEFAULT;
  public static final java.lang.String EVENT_ID;
  public static final java.lang.String METHOD;
  public static final java.lang.String MINUTES;
}
public interface android.provider.CalendarContract$SyncColumns
  extends android.provider.CalendarContract$CalendarSyncColumns
{
  public static final java.lang.String ACCOUNT_NAME;
  public static final java.lang.String ACCOUNT_TYPE;
  public static final java.lang.String CAN_PARTIALLY_UPDATE;
  public static final java.lang.String DELETED;
  public static final java.lang.String DIRTY;
  public static final java.lang.String MUTATORS;
  public static final java.lang.String _SYNC_ID;
}
public final class android.provider.CalendarContract$SyncState
  extends java.lang.Object
  implements android.provider.SyncStateContract$Columns
{
  public static final android.net.Uri CONTENT_URI;
}
public class android.provider.CallLog
  extends java.lang.Object
{
  public void <init>();
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String AUTHORITY;
}
public class android.provider.CallLog$Calls
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static java.lang.String getLastOutgoingCall(android.content.Context);
  public void <init>();
  public static final int BLOCKED_TYPE;
  public static final int FEATURES_VIDEO;
  public static final int INCOMING_TYPE;
  public static final int MISSED_TYPE;
  public static final int OUTGOING_TYPE;
  public static final int PRESENTATION_ALLOWED;
  public static final int PRESENTATION_PAYPHONE;
  public static final int PRESENTATION_RESTRICTED;
  public static final int PRESENTATION_UNKNOWN;
  public static final int REJECTED_TYPE;
  public static final int VOICEMAIL_TYPE;
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri CONTENT_URI_WITH_VOICEMAIL;
  public static final java.lang.String CACHED_FORMATTED_NUMBER;
  public static final java.lang.String CACHED_LOOKUP_URI;
  public static final java.lang.String CACHED_MATCHED_NUMBER;
  public static final java.lang.String CACHED_NAME;
  public static final java.lang.String CACHED_NORMALIZED_NUMBER;
  public static final java.lang.String CACHED_NUMBER_LABEL;
  public static final java.lang.String CACHED_NUMBER_TYPE;
  public static final java.lang.String CACHED_PHOTO_ID;
  public static final java.lang.String CACHED_PHOTO_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String COUNTRY_ISO;
  public static final java.lang.String DATA_USAGE;
  public static final java.lang.String DATE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String DURATION;
  public static final java.lang.String EXTRA_CALL_TYPE_FILTER;
  public static final java.lang.String FEATURES;
  public static final java.lang.String GEOCODED_LOCATION;
  public static final java.lang.String IS_READ;
  public static final java.lang.String LAST_MODIFIED;
  public static final java.lang.String LIMIT_PARAM_KEY;
  public static final java.lang.String NEW;
  public static final java.lang.String NUMBER;
  public static final java.lang.String NUMBER_PRESENTATION;
  public static final java.lang.String OFFSET_PARAM_KEY;
  public static final java.lang.String PHONE_ACCOUNT_COMPONENT_NAME;
  public static final java.lang.String PHONE_ACCOUNT_ID;
  public static final java.lang.String POST_DIAL_DIGITS;
  public static final java.lang.String TRANSCRIPTION;
  public static final java.lang.String TYPE;
  public static final java.lang.String VIA_NUMBER;
  public static final java.lang.String VOICEMAIL_URI;
}
public class android.provider.Contacts
  extends java.lang.Object
{
  public static final int KIND_EMAIL;
  public static final int KIND_IM;
  public static final int KIND_ORGANIZATION;
  public static final int KIND_PHONE;
  public static final int KIND_POSTAL;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String AUTHORITY;
}
public final class android.provider.Contacts$ContactMethods
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$ContactMethodsColumns, android.provider.Contacts$PeopleColumns
{
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, int, java.lang.CharSequence);
  public static java.lang.Object decodeImProtocol(java.lang.String);
  public static java.lang.String encodeCustomImProtocol(java.lang.String);
  public static java.lang.String encodePredefinedImProtocol(int);
  public void addPostalLocation(android.content.Context, long, double, double);
  public static final int PROTOCOL_AIM;
  public static final int PROTOCOL_GOOGLE_TALK;
  public static final int PROTOCOL_ICQ;
  public static final int PROTOCOL_JABBER;
  public static final int PROTOCOL_MSN;
  public static final int PROTOCOL_QQ;
  public static final int PROTOCOL_SKYPE;
  public static final int PROTOCOL_YAHOO;
  public static final android.net.Uri CONTENT_EMAIL_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_EMAIL_ITEM_TYPE;
  public static final java.lang.String CONTENT_EMAIL_TYPE;
  public static final java.lang.String CONTENT_IM_ITEM_TYPE;
  public static final java.lang.String CONTENT_POSTAL_ITEM_TYPE;
  public static final java.lang.String CONTENT_POSTAL_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String PERSON_ID;
  public static final java.lang.String POSTAL_LOCATION_LATITUDE;
  public static final java.lang.String POSTAL_LOCATION_LONGITUDE;
}
public interface android.provider.Contacts$ContactMethodsColumns
{
  public static final int TYPE_CUSTOM;
  public static final int TYPE_HOME;
  public static final int TYPE_OTHER;
  public static final int TYPE_WORK;
  public static final java.lang.String AUX_DATA;
  public static final java.lang.String DATA;
  public static final java.lang.String ISPRIMARY;
  public static final java.lang.String KIND;
  public static final java.lang.String LABEL;
  public static final java.lang.String TYPE;
}
public final class android.provider.Contacts$Extensions
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$ExtensionsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String PERSON_ID;
}
public interface android.provider.Contacts$ExtensionsColumns
{
  public static final java.lang.String NAME;
  public static final java.lang.String VALUE;
}
public final class android.provider.Contacts$GroupMembership
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$GroupsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri RAW_CONTENT_URI;
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String GROUP_ID;
  public static final java.lang.String GROUP_SYNC_ACCOUNT;
  public static final java.lang.String GROUP_SYNC_ACCOUNT_TYPE;
  public static final java.lang.String GROUP_SYNC_ID;
  public static final java.lang.String PERSON_ID;
}
public final class android.provider.Contacts$Groups
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$GroupsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri DELETED_CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String GROUP_ANDROID_STARRED;
  public static final java.lang.String GROUP_MY_CONTACTS;
}
public interface android.provider.Contacts$GroupsColumns
{
  public static final java.lang.String NAME;
  public static final java.lang.String NOTES;
  public static final java.lang.String SHOULD_SYNC;
  public static final java.lang.String SYSTEM_ID;
}
public final class android.provider.Contacts$Intents
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String ATTACH_IMAGE;
  public static final java.lang.String EXTRA_CREATE_DESCRIPTION;
  public static final java.lang.String EXTRA_FORCE_CREATE;
  public static final java.lang.String SEARCH_SUGGESTION_CLICKED;
  public static final java.lang.String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED;
  public static final java.lang.String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED;
  public static final java.lang.String SHOW_OR_CREATE_CONTACT;
}
public final class android.provider.Contacts$Intents$Insert
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String ACTION;
  public static final java.lang.String COMPANY;
  public static final java.lang.String EMAIL;
  public static final java.lang.String EMAIL_ISPRIMARY;
  public static final java.lang.String EMAIL_TYPE;
  public static final java.lang.String FULL_MODE;
  public static final java.lang.String IM_HANDLE;
  public static final java.lang.String IM_ISPRIMARY;
  public static final java.lang.String IM_PROTOCOL;
  public static final java.lang.String JOB_TITLE;
  public static final java.lang.String NAME;
  public static final java.lang.String NOTES;
  public static final java.lang.String PHONE;
  public static final java.lang.String PHONETIC_NAME;
  public static final java.lang.String PHONE_ISPRIMARY;
  public static final java.lang.String PHONE_TYPE;
  public static final java.lang.String POSTAL;
  public static final java.lang.String POSTAL_ISPRIMARY;
  public static final java.lang.String POSTAL_TYPE;
  public static final java.lang.String SECONDARY_EMAIL;
  public static final java.lang.String SECONDARY_EMAIL_TYPE;
  public static final java.lang.String SECONDARY_PHONE;
  public static final java.lang.String SECONDARY_PHONE_TYPE;
  public static final java.lang.String TERTIARY_EMAIL;
  public static final java.lang.String TERTIARY_EMAIL_TYPE;
  public static final java.lang.String TERTIARY_PHONE;
  public static final java.lang.String TERTIARY_PHONE_TYPE;
}
public final class android.provider.Contacts$Intents$UI
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String FILTER_CONTACTS_ACTION;
  public static final java.lang.String FILTER_TEXT_EXTRA_KEY;
  public static final java.lang.String GROUP_NAME_EXTRA_KEY;
  public static final java.lang.String LIST_ALL_CONTACTS_ACTION;
  public static final java.lang.String LIST_CONTACTS_WITH_PHONES_ACTION;
  public static final java.lang.String LIST_DEFAULT;
  public static final java.lang.String LIST_FREQUENT_ACTION;
  public static final java.lang.String LIST_GROUP_ACTION;
  public static final java.lang.String LIST_STARRED_ACTION;
  public static final java.lang.String LIST_STREQUENT_ACTION;
  public static final java.lang.String TITLE_EXTRA_KEY;
}
public interface android.provider.Contacts$OrganizationColumns
{
  public static final int TYPE_CUSTOM;
  public static final int TYPE_OTHER;
  public static final int TYPE_WORK;
  public static final java.lang.String COMPANY;
  public static final java.lang.String ISPRIMARY;
  public static final java.lang.String LABEL;
  public static final java.lang.String PERSON_ID;
  public static final java.lang.String TITLE;
  public static final java.lang.String TYPE;
}
public final class android.provider.Contacts$Organizations
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$OrganizationColumns
{
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence);
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Contacts$People
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$PeopleColumns, android.provider.Contacts$PhonesColumns, android.provider.Contacts$PresenceColumns
{
  public static void markAsContacted(android.content.ContentResolver, long);
  public static void setPhotoData(android.content.ContentResolver, android.net.Uri, byte[]);
  public static android.database.Cursor queryGroups(android.content.ContentResolver, long);
  public static android.graphics.Bitmap loadContactPhoto(android.content.Context, android.net.Uri, int, android.graphics.BitmapFactory$Options);
  public static android.net.Uri addToGroup(android.content.ContentResolver, long, java.lang.String);
  public static android.net.Uri addToGroup(android.content.ContentResolver, long, long);
  public static android.net.Uri addToMyContactsGroup(android.content.ContentResolver, long);
  public static android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver, android.content.ContentValues);
  public static java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver, android.net.Uri);
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri DELETED_CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String PRIMARY_EMAIL_ID;
  public static final java.lang.String PRIMARY_ORGANIZATION_ID;
  public static final java.lang.String PRIMARY_PHONE_ID;
}
public final class android.provider.Contacts$People$ContactMethods
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$ContactMethodsColumns, android.provider.Contacts$PeopleColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public class android.provider.Contacts$People$Extensions
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$ExtensionsColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String PERSON_ID;
}
public final class android.provider.Contacts$People$Phones
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$PhonesColumns, android.provider.Contacts$PeopleColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public interface android.provider.Contacts$PeopleColumns
{
  public static final java.lang.String CUSTOM_RINGTONE;
  public static final java.lang.String DISPLAY_NAME;
  public static final java.lang.String LAST_TIME_CONTACTED;
  public static final java.lang.String NAME;
  public static final java.lang.String NOTES;
  public static final java.lang.String PHONETIC_NAME;
  public static final java.lang.String PHOTO_VERSION;
  public static final java.lang.String SEND_TO_VOICEMAIL;
  public static final java.lang.String STARRED;
  public static final java.lang.String TIMES_CONTACTED;
}
public final class android.provider.Contacts$Phones
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$PhonesColumns, android.provider.Contacts$PeopleColumns
{
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence);
  public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence, java.lang.CharSequence[]);
  public static final android.net.Uri CONTENT_FILTER_URL;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String PERSON_ID;
}
public interface android.provider.Contacts$PhonesColumns
{
  public static final int TYPE_CUSTOM;
  public static final int TYPE_FAX_HOME;
  public static final int TYPE_FAX_WORK;
  public static final int TYPE_HOME;
  public static final int TYPE_MOBILE;
  public static final int TYPE_OTHER;
  public static final int TYPE_PAGER;
  public static final int TYPE_WORK;
  public static final java.lang.String ISPRIMARY;
  public static final java.lang.String LABEL;
  public static final java.lang.String NUMBER;
  public static final java.lang.String NUMBER_KEY;
  public static final java.lang.String TYPE;
}
public final class android.provider.Contacts$Photos
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$PhotosColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public interface android.provider.Contacts$PhotosColumns
{
  public static final java.lang.String DATA;
  public static final java.lang.String DOWNLOAD_REQUIRED;
  public static final java.lang.String EXISTS_ON_SERVER;
  public static final java.lang.String LOCAL_VERSION;
  public static final java.lang.String PERSON_ID;
  public static final java.lang.String SYNC_ERROR;
}
public interface android.provider.Contacts$PresenceColumns
{
  public static final int AVAILABLE;
  public static final int AWAY;
  public static final int DO_NOT_DISTURB;
  public static final int IDLE;
  public static final int INVISIBLE;
  public static final int OFFLINE;
  public static final java.lang.String IM_ACCOUNT;
  public static final java.lang.String IM_HANDLE;
  public static final java.lang.String IM_PROTOCOL;
  public static final java.lang.String PRESENCE_CUSTOM_STATUS;
  public static final java.lang.String PRESENCE_STATUS;
  public static final java.lang.String PRIORITY;
}
public final class android.provider.Contacts$Settings
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Contacts$SettingsColumns
{
  public static void setSetting(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String getSetting(android.content.ContentResolver, java.lang.String, java.lang.String);
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String SYNC_EVERYTHING;
}
public interface android.provider.Contacts$SettingsColumns
{
  public static final java.lang.String KEY;
  public static final java.lang.String VALUE;
  public static final java.lang.String _SYNC_ACCOUNT;
  public static final java.lang.String _SYNC_ACCOUNT_TYPE;
}
public final class android.provider.ContactsContract
  extends java.lang.Object
{
  public static boolean isProfileId(long);
  public void <init>();
  public static final android.net.Uri AUTHORITY_URI;
  public static final java.lang.String AUTHORITY;
  public static final java.lang.String CALLER_IS_SYNCADAPTER;
  public static final java.lang.String DEFERRED_SNIPPETING;
  public static final java.lang.String DEFERRED_SNIPPETING_QUERY;
  public static final java.lang.String DIRECTORY_PARAM_KEY;
  public static final java.lang.String LIMIT_PARAM_KEY;
  public static final java.lang.String PRIMARY_ACCOUNT_NAME;
  public static final java.lang.String PRIMARY_ACCOUNT_TYPE;
  public static final java.lang.String REMOVE_DUPLICATE_ENTRIES;
  public static final java.lang.String STREQUENT_PHONE_ONLY;
}
public final class android.provider.ContactsContract$AggregationExceptions
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final int TYPE_AUTOMATIC;
  public static final int TYPE_KEEP_SEPARATE;
  public static final int TYPE_KEEP_TOGETHER;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String RAW_CONTACT_ID1;
  public static final java.lang.String RAW_CONTACT_ID2;
  public static final java.lang.String TYPE;
}
public interface android.provider.ContactsContract$BaseSyncColumns
{
  public static final java.lang.String SYNC1;
  public static final java.lang.String SYNC2;
  public static final java.lang.String SYNC3;
  public static final java.lang.String SYNC4;
}
public final class android.provider.ContactsContract$CommonDataKinds
  extends java.lang.Object
{
}
public interface android.provider.ContactsContract$CommonDataKinds$BaseTypes
{
  public static final int TYPE_CUSTOM;
}
public final class android.provider.ContactsContract$CommonDataKinds$Callable
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public void <init>();
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
}
public interface android.provider.ContactsContract$CommonDataKinds$CommonColumns
  extends android.provider.ContactsContract$CommonDataKinds$BaseTypes
{
  public static final java.lang.String DATA;
  public static final java.lang.String LABEL;
  public static final java.lang.String TYPE;
}
public final class android.provider.ContactsContract$CommonDataKinds$Contactables
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public void <init>();
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String VISIBLE_CONTACTS_ONLY;
}
public final class android.provider.ContactsContract$CommonDataKinds$Email
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int TYPE_HOME;
  public static final int TYPE_MOBILE;
  public static final int TYPE_OTHER;
  public static final int TYPE_WORK;
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri CONTENT_LOOKUP_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI;
  public static final android.net.Uri ENTERPRISE_CONTENT_LOOKUP_URI;
  public static final java.lang.String ADDRESS;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DISPLAY_NAME;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
}
public final class android.provider.ContactsContract$CommonDataKinds$Event
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static int getTypeResource(java.lang.Integer);
  public static final int TYPE_ANNIVERSARY;
  public static final int TYPE_BIRTHDAY;
  public static final int TYPE_OTHER;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String START_DATE;
}
public final class android.provider.ContactsContract$CommonDataKinds$GroupMembership
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins
{
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String GROUP_ROW_ID;
  public static final java.lang.String GROUP_SOURCE_ID;
}
public final class android.provider.ContactsContract$CommonDataKinds$Identity
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins
{
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String IDENTITY;
  public static final java.lang.String NAMESPACE;
}
public final class android.provider.ContactsContract$CommonDataKinds$Im
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int getProtocolLabelResource(int);
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getProtocolLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int PROTOCOL_AIM;
  public static final int PROTOCOL_CUSTOM;
  public static final int PROTOCOL_GOOGLE_TALK;
  public static final int PROTOCOL_ICQ;
  public static final int PROTOCOL_JABBER;
  public static final int PROTOCOL_MSN;
  public static final int PROTOCOL_NETMEETING;
  public static final int PROTOCOL_QQ;
  public static final int PROTOCOL_SKYPE;
  public static final int PROTOCOL_YAHOO;
  public static final int TYPE_HOME;
  public static final int TYPE_OTHER;
  public static final int TYPE_WORK;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CUSTOM_PROTOCOL;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String PROTOCOL;
}
public final class android.provider.ContactsContract$CommonDataKinds$Nickname
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int TYPE_DEFAULT;
  public static final int TYPE_INITIALS;
  public static final int TYPE_MAIDEN_NAME;
  public static final int TYPE_MAINDEN_NAME;
  public static final int TYPE_OTHER_NAME;
  public static final int TYPE_SHORT_NAME;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String NAME;
}
public final class android.provider.ContactsContract$CommonDataKinds$Note
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins
{
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String NOTE;
}
public final class android.provider.ContactsContract$CommonDataKinds$Organization
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int TYPE_OTHER;
  public static final int TYPE_WORK;
  public static final java.lang.String COMPANY;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String DEPARTMENT;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String JOB_DESCRIPTION;
  public static final java.lang.String OFFICE_LOCATION;
  public static final java.lang.String PHONETIC_NAME;
  public static final java.lang.String PHONETIC_NAME_STYLE;
  public static final java.lang.String SYMBOL;
  public static final java.lang.String TITLE;
}
public final class android.provider.ContactsContract$CommonDataKinds$Phone
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int TYPE_ASSISTANT;
  public static final int TYPE_CALLBACK;
  public static final int TYPE_CAR;
  public static final int TYPE_COMPANY_MAIN;
  public static final int TYPE_FAX_HOME;
  public static final int TYPE_FAX_WORK;
  public static final int TYPE_HOME;
  public static final int TYPE_ISDN;
  public static final int TYPE_MAIN;
  public static final int TYPE_MMS;
  public static final int TYPE_MOBILE;
  public static final int TYPE_OTHER;
  public static final int TYPE_OTHER_FAX;
  public static final int TYPE_PAGER;
  public static final int TYPE_RADIO;
  public static final int TYPE_TELEX;
  public static final int TYPE_TTY_TDD;
  public static final int TYPE_WORK;
  public static final int TYPE_WORK_MOBILE;
  public static final int TYPE_WORK_PAGER;
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String NORMALIZED_NUMBER;
  public static final java.lang.String NUMBER;
  public static final java.lang.String SEARCH_DISPLAY_NAME_KEY;
  public static final java.lang.String SEARCH_PHONE_NUMBER_KEY;
}
public final class android.provider.ContactsContract$CommonDataKinds$Photo
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins
{
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String PHOTO;
  public static final java.lang.String PHOTO_FILE_ID;
}
public final class android.provider.ContactsContract$CommonDataKinds$Relation
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int TYPE_ASSISTANT;
  public static final int TYPE_BROTHER;
  public static final int TYPE_CHILD;
  public static final int TYPE_DOMESTIC_PARTNER;
  public static final int TYPE_FATHER;
  public static final int TYPE_FRIEND;
  public static final int TYPE_MANAGER;
  public static final int TYPE_MOTHER;
  public static final int TYPE_PARENT;
  public static final int TYPE_PARTNER;
  public static final int TYPE_REFERRED_BY;
  public static final int TYPE_RELATIVE;
  public static final int TYPE_SISTER;
  public static final int TYPE_SPOUSE;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String NAME;
}
public final class android.provider.ContactsContract$CommonDataKinds$SipAddress
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int TYPE_HOME;
  public static final int TYPE_OTHER;
  public static final int TYPE_WORK;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String SIP_ADDRESS;
}
public final class android.provider.ContactsContract$CommonDataKinds$StructuredName
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins
{
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String DISPLAY_NAME;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String FAMILY_NAME;
  public static final java.lang.String FULL_NAME_STYLE;
  public static final java.lang.String GIVEN_NAME;
  public static final java.lang.String MIDDLE_NAME;
  public static final java.lang.String PHONETIC_FAMILY_NAME;
  public static final java.lang.String PHONETIC_GIVEN_NAME;
  public static final java.lang.String PHONETIC_MIDDLE_NAME;
  public static final java.lang.String PHONETIC_NAME_STYLE;
  public static final java.lang.String PREFIX;
  public static final java.lang.String SUFFIX;
}
public final class android.provider.ContactsContract$CommonDataKinds$StructuredPostal
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int getTypeLabelResource(int);
  public static final java.lang.CharSequence getTypeLabel(android.content.res.Resources, int, java.lang.CharSequence);
  public static final int TYPE_HOME;
  public static final int TYPE_OTHER;
  public static final int TYPE_WORK;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CITY;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String COUNTRY;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String FORMATTED_ADDRESS;
  public static final java.lang.String NEIGHBORHOOD;
  public static final java.lang.String POBOX;
  public static final java.lang.String POSTCODE;
  public static final java.lang.String REGION;
  public static final java.lang.String STREET;
}
public final class android.provider.ContactsContract$CommonDataKinds$Website
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins, android.provider.ContactsContract$CommonDataKinds$CommonColumns
{
  public static final int TYPE_BLOG;
  public static final int TYPE_FTP;
  public static final int TYPE_HOME;
  public static final int TYPE_HOMEPAGE;
  public static final int TYPE_OTHER;
  public static final int TYPE_PROFILE;
  public static final int TYPE_WORK;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String URL;
}
public interface android.provider.ContactsContract$ContactNameColumns
{
  public static final java.lang.String DISPLAY_NAME_ALTERNATIVE;
  public static final java.lang.String DISPLAY_NAME_PRIMARY;
  public static final java.lang.String DISPLAY_NAME_SOURCE;
  public static final java.lang.String PHONETIC_NAME;
  public static final java.lang.String PHONETIC_NAME_STYLE;
  public static final java.lang.String SORT_KEY_ALTERNATIVE;
  public static final java.lang.String SORT_KEY_PRIMARY;
}
public interface android.provider.ContactsContract$ContactOptionsColumns
{
  public static final java.lang.String CUSTOM_RINGTONE;
  public static final java.lang.String LAST_TIME_CONTACTED;
  public static final java.lang.String PINNED;
  public static final java.lang.String SEND_TO_VOICEMAIL;
  public static final java.lang.String STARRED;
  public static final java.lang.String TIMES_CONTACTED;
}
public interface android.provider.ContactsContract$ContactStatusColumns
{
  public static final java.lang.String CONTACT_CHAT_CAPABILITY;
  public static final java.lang.String CONTACT_PRESENCE;
  public static final java.lang.String CONTACT_STATUS;
  public static final java.lang.String CONTACT_STATUS_ICON;
  public static final java.lang.String CONTACT_STATUS_LABEL;
  public static final java.lang.String CONTACT_STATUS_RES_PACKAGE;
  public static final java.lang.String CONTACT_STATUS_TIMESTAMP;
}
public class android.provider.ContactsContract$Contacts
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$ContactsColumns, android.provider.ContactsContract$ContactOptionsColumns, android.provider.ContactsContract$ContactNameColumns, android.provider.ContactsContract$ContactStatusColumns
{
  public static boolean isEnterpriseContactId(long);
  public static void markAsContacted(android.content.ContentResolver, long);
  public static android.net.Uri getLookupUri(android.content.ContentResolver, android.net.Uri);
  public static android.net.Uri getLookupUri(long, java.lang.String);
  public static android.net.Uri lookupContact(android.content.ContentResolver, android.net.Uri);
  public static java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver, android.net.Uri);
  public static java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver, android.net.Uri, boolean);
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri CONTENT_FREQUENT_URI;
  public static final android.net.Uri CONTENT_GROUP_URI;
  public static final android.net.Uri CONTENT_LOOKUP_URI;
  public static final android.net.Uri CONTENT_MULTI_VCARD_URI;
  public static final android.net.Uri CONTENT_STREQUENT_FILTER_URI;
  public static final android.net.Uri CONTENT_STREQUENT_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri CONTENT_VCARD_URI;
  public static final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String CONTENT_VCARD_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String QUERY_PARAMETER_VCARD_NO_PHOTO;
}
public final class android.provider.ContactsContract$Contacts$AggregationSuggestions
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$ContactsColumns, android.provider.ContactsContract$ContactOptionsColumns, android.provider.ContactsContract$ContactStatusColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.net.Uri build();
  public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder addNameParameter(java.lang.String);
  public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setContactId(long);
  public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setLimit(int);
}
public final class android.provider.ContactsContract$Contacts$Data
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$DataColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.provider.ContactsContract$Contacts$Entity
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$ContactsColumns, android.provider.ContactsContract$ContactNameColumns, android.provider.ContactsContract$RawContactsColumns, android.provider.ContactsContract$BaseSyncColumns, android.provider.ContactsContract$SyncColumns, android.provider.ContactsContract$DataColumns, android.provider.ContactsContract$StatusColumns, android.provider.ContactsContract$ContactOptionsColumns, android.provider.ContactsContract$ContactStatusColumns, android.provider.ContactsContract$DataUsageStatColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DATA_ID;
  public static final java.lang.String RAW_CONTACT_ID;
}
public final class android.provider.ContactsContract$Contacts$Photo
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$DataColumnsWithJoins
{
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DISPLAY_PHOTO;
  public static final java.lang.String PHOTO;
  public static final java.lang.String PHOTO_FILE_ID;
}
public interface android.provider.ContactsContract$ContactsColumns
{
  public static final java.lang.String CONTACT_LAST_UPDATED_TIMESTAMP;
  public static final java.lang.String DISPLAY_NAME;
  public static final java.lang.String HAS_PHONE_NUMBER;
  public static final java.lang.String IN_DEFAULT_DIRECTORY;
  public static final java.lang.String IN_VISIBLE_GROUP;
  public static final java.lang.String IS_USER_PROFILE;
  public static final java.lang.String LOOKUP_KEY;
  public static final java.lang.String NAME_RAW_CONTACT_ID;
  public static final java.lang.String PHOTO_FILE_ID;
  public static final java.lang.String PHOTO_ID;
  public static final java.lang.String PHOTO_THUMBNAIL_URI;
  public static final java.lang.String PHOTO_URI;
}
public final class android.provider.ContactsContract$Data
  extends java.lang.Object
  implements android.provider.ContactsContract$DataColumnsWithJoins
{
  public static android.net.Uri getContactLookupUri(android.content.ContentResolver, android.net.Uri);
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS;
  public static final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES;
  public static final java.lang.String VISIBLE_CONTACTS_ONLY;
}
public interface android.provider.ContactsContract$DataColumns
{
  public static final int CARRIER_PRESENCE_VT_CAPABLE;
  public static final java.lang.String CARRIER_PRESENCE;
  public static final java.lang.String DATA10;
  public static final java.lang.String DATA11;
  public static final java.lang.String DATA12;
  public static final java.lang.String DATA13;
  public static final java.lang.String DATA14;
  public static final java.lang.String DATA15;
  public static final java.lang.String DATA1;
  public static final java.lang.String DATA2;
  public static final java.lang.String DATA3;
  public static final java.lang.String DATA4;
  public static final java.lang.String DATA5;
  public static final java.lang.String DATA6;
  public static final java.lang.String DATA7;
  public static final java.lang.String DATA8;
  public static final java.lang.String DATA9;
  public static final java.lang.String DATA_VERSION;
  public static final java.lang.String IS_PRIMARY;
  public static final java.lang.String IS_READ_ONLY;
  public static final java.lang.String IS_SUPER_PRIMARY;
  public static final java.lang.String MIMETYPE;
  public static final java.lang.String RAW_CONTACT_ID;
  public static final java.lang.String RES_PACKAGE;
  public static final java.lang.String SYNC1;
  public static final java.lang.String SYNC2;
  public static final java.lang.String SYNC3;
  public static final java.lang.String SYNC4;
}
public interface android.provider.ContactsContract$DataColumnsWithJoins
  extends android.provider.BaseColumns, android.provider.ContactsContract$DataColumns, android.provider.ContactsContract$StatusColumns, android.provider.ContactsContract$RawContactsColumns, android.provider.ContactsContract$ContactsColumns, android.provider.ContactsContract$ContactNameColumns, android.provider.ContactsContract$ContactOptionsColumns, android.provider.ContactsContract$ContactStatusColumns, android.provider.ContactsContract$DataUsageStatColumns
{
}
public final class android.provider.ContactsContract$DataUsageFeedback
  extends java.lang.Object
{
  public void <init>();
  public static final android.net.Uri DELETE_USAGE_URI;
  public static final android.net.Uri FEEDBACK_URI;
  public static final java.lang.String USAGE_TYPE;
  public static final java.lang.String USAGE_TYPE_CALL;
  public static final java.lang.String USAGE_TYPE_LONG_TEXT;
  public static final java.lang.String USAGE_TYPE_SHORT_TEXT;
}
public interface android.provider.ContactsContract$DataUsageStatColumns
{
  public static final java.lang.String LAST_TIME_USED;
  public static final java.lang.String TIMES_USED;
}
public final class android.provider.ContactsContract$DeletedContacts
  extends java.lang.Object
  implements android.provider.ContactsContract$DeletedContactsColumns
{
  public static final long DAYS_KEPT_MILLISECONDS;
  public static final android.net.Uri CONTENT_URI;
}
public interface android.provider.ContactsContract$DeletedContactsColumns
{
  public static final java.lang.String CONTACT_DELETED_TIMESTAMP;
  public static final java.lang.String CONTACT_ID;
}
public final class android.provider.ContactsContract$Directory
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static boolean isEnterpriseDirectoryId(long);
  public static boolean isRemoteDirectoryId(long);
  public static void notifyDirectoryChange(android.content.ContentResolver);
  public static final int EXPORT_SUPPORT_ANY_ACCOUNT;
  public static final int EXPORT_SUPPORT_NONE;
  public static final int EXPORT_SUPPORT_SAME_ACCOUNT_ONLY;
  public static final int PHOTO_SUPPORT_FULL;
  public static final int PHOTO_SUPPORT_FULL_SIZE_ONLY;
  public static final int PHOTO_SUPPORT_NONE;
  public static final int PHOTO_SUPPORT_THUMBNAIL_ONLY;
  public static final int SHORTCUT_SUPPORT_DATA_ITEMS_ONLY;
  public static final int SHORTCUT_SUPPORT_FULL;
  public static final int SHORTCUT_SUPPORT_NONE;
  public static final long DEFAULT;
  public static final long ENTERPRISE_DEFAULT;
  public static final long ENTERPRISE_LOCAL_INVISIBLE;
  public static final long LOCAL_INVISIBLE;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri ENTERPRISE_CONTENT_URI;
  public static final java.lang.String ACCOUNT_NAME;
  public static final java.lang.String ACCOUNT_TYPE;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DIRECTORY_AUTHORITY;
  public static final java.lang.String DISPLAY_NAME;
  public static final java.lang.String EXPORT_SUPPORT;
  public static final java.lang.String PACKAGE_NAME;
  public static final java.lang.String PHOTO_SUPPORT;
  public static final java.lang.String SHORTCUT_SUPPORT;
  public static final java.lang.String TYPE_RESOURCE_ID;
}
public interface android.provider.ContactsContract$DisplayNameSources
{
  public static final int EMAIL;
  public static final int NICKNAME;
  public static final int ORGANIZATION;
  public static final int PHONE;
  public static final int STRUCTURED_NAME;
  public static final int STRUCTURED_PHONETIC_NAME;
  public static final int UNDEFINED;
}
public final class android.provider.ContactsContract$DisplayPhoto
  extends java.lang.Object
{
  public static final android.net.Uri CONTENT_MAX_DIMENSIONS_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DISPLAY_MAX_DIM;
  public static final java.lang.String THUMBNAIL_MAX_DIM;
}
public interface android.provider.ContactsContract$FullNameStyle
{
  public static final int CHINESE;
  public static final int CJK;
  public static final int JAPANESE;
  public static final int KOREAN;
  public static final int UNDEFINED;
  public static final int WESTERN;
}
public final class android.provider.ContactsContract$Groups
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$GroupsColumns, android.provider.ContactsContract$SyncColumns
{
  public static android.content.EntityIterator newEntityIterator(android.database.Cursor);
  public static final android.net.Uri CONTENT_SUMMARY_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
}
public interface android.provider.ContactsContract$GroupsColumns
{
  public static final java.lang.String AUTO_ADD;
  public static final java.lang.String DATA_SET;
  public static final java.lang.String DELETED;
  public static final java.lang.String FAVORITES;
  public static final java.lang.String GROUP_IS_READ_ONLY;
  public static final java.lang.String GROUP_VISIBLE;
  public static final java.lang.String NOTES;
  public static final java.lang.String RES_PACKAGE;
  public static final java.lang.String SHOULD_SYNC;
  public static final java.lang.String SUMMARY_COUNT;
  public static final java.lang.String SUMMARY_WITH_PHONES;
  public static final java.lang.String SYSTEM_ID;
  public static final java.lang.String TITLE;
  public static final java.lang.String TITLE_RES;
}
public final class android.provider.ContactsContract$Intents
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS;
  public static final java.lang.String ATTACH_IMAGE;
  public static final java.lang.String CONTACTS_DATABASE_CREATED;
  public static final java.lang.String EXTRA_CREATE_DESCRIPTION;
  public static final java.lang.String EXTRA_FORCE_CREATE;
  public static final java.lang.String EXTRA_RECIPIENT_CONTACT_CHAT_ID;
  public static final java.lang.String EXTRA_RECIPIENT_CONTACT_NAME;
  public static final java.lang.String EXTRA_RECIPIENT_CONTACT_URI;
  public static final java.lang.String INVITE_CONTACT;
  public static final java.lang.String METADATA_ACCOUNT_TYPE;
  public static final java.lang.String METADATA_MIMETYPE;
  public static final java.lang.String SEARCH_SUGGESTION_CLICKED;
  public static final java.lang.String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED;
  public static final java.lang.String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED;
  public static final java.lang.String SHOW_OR_CREATE_CONTACT;
}
public final class android.provider.ContactsContract$Intents$Insert
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String ACTION;
  public static final java.lang.String COMPANY;
  public static final java.lang.String DATA;
  public static final java.lang.String EMAIL;
  public static final java.lang.String EMAIL_ISPRIMARY;
  public static final java.lang.String EMAIL_TYPE;
  public static final java.lang.String EXTRA_ACCOUNT;
  public static final java.lang.String EXTRA_DATA_SET;
  public static final java.lang.String FULL_MODE;
  public static final java.lang.String IM_HANDLE;
  public static final java.lang.String IM_ISPRIMARY;
  public static final java.lang.String IM_PROTOCOL;
  public static final java.lang.String JOB_TITLE;
  public static final java.lang.String NAME;
  public static final java.lang.String NOTES;
  public static final java.lang.String PHONE;
  public static final java.lang.String PHONETIC_NAME;
  public static final java.lang.String PHONE_ISPRIMARY;
  public static final java.lang.String PHONE_TYPE;
  public static final java.lang.String POSTAL;
  public static final java.lang.String POSTAL_ISPRIMARY;
  public static final java.lang.String POSTAL_TYPE;
  public static final java.lang.String SECONDARY_EMAIL;
  public static final java.lang.String SECONDARY_EMAIL_TYPE;
  public static final java.lang.String SECONDARY_PHONE;
  public static final java.lang.String SECONDARY_PHONE_TYPE;
  public static final java.lang.String TERTIARY_EMAIL;
  public static final java.lang.String TERTIARY_EMAIL_TYPE;
  public static final java.lang.String TERTIARY_PHONE;
  public static final java.lang.String TERTIARY_PHONE_TYPE;
}
public final class android.provider.ContactsContract$PhoneLookup
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$PhoneLookupColumns, android.provider.ContactsContract$ContactsColumns, android.provider.ContactsContract$ContactOptionsColumns
{
  public static final android.net.Uri CONTENT_FILTER_URI;
  public static final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI;
  public static final java.lang.String QUERY_PARAMETER_SIP_ADDRESS;
}
public interface android.provider.ContactsContract$PhoneLookupColumns
{
  public static final java.lang.String CONTACT_ID;
  public static final java.lang.String DATA_ID;
  public static final java.lang.String LABEL;
  public static final java.lang.String NORMALIZED_NUMBER;
  public static final java.lang.String NUMBER;
  public static final java.lang.String TYPE;
}
public interface android.provider.ContactsContract$PhoneticNameStyle
{
  public static final int JAPANESE;
  public static final int KOREAN;
  public static final int PINYIN;
  public static final int UNDEFINED;
}
public final class android.provider.ContactsContract$PinnedPositions
  extends java.lang.Object
{
  public static void pin(android.content.ContentResolver, long, int);
  public static void undemote(android.content.ContentResolver, long);
  public void <init>();
  public static final int DEMOTED;
  public static final int UNPINNED;
}
public final class android.provider.ContactsContract$Presence
  extends android.provider.ContactsContract$StatusUpdates
{
  public void <init>();
}
public interface android.provider.ContactsContract$PresenceColumns
{
  public static final java.lang.String CUSTOM_PROTOCOL;
  public static final java.lang.String DATA_ID;
  public static final java.lang.String IM_ACCOUNT;
  public static final java.lang.String IM_HANDLE;
  public static final java.lang.String PROTOCOL;
}
public final class android.provider.ContactsContract$Profile
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$ContactsColumns, android.provider.ContactsContract$ContactOptionsColumns, android.provider.ContactsContract$ContactNameColumns, android.provider.ContactsContract$ContactStatusColumns
{
  public static final long MIN_ID;
  public static final android.net.Uri CONTENT_RAW_CONTACTS_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri CONTENT_VCARD_URI;
}
public final class android.provider.ContactsContract$ProfileSyncState
  extends java.lang.Object
  implements android.provider.SyncStateContract$Columns
{
  public static void set(android.content.ContentProviderClient, android.accounts.Account, byte[])  throws android.os.RemoteException;
  public static android.content.ContentProviderOperation newSetOperation(android.accounts.Account, byte[]);
  public static android.util.Pair getWithUri(android.content.ContentProviderClient, android.accounts.Account)  throws android.os.RemoteException;
  public static byte[] get(android.content.ContentProviderClient, android.accounts.Account)  throws android.os.RemoteException;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.provider.ContactsContract$ProviderStatus
  extends java.lang.Object
{
  public static final int STATUS_BUSY;
  public static final int STATUS_EMPTY;
  public static final int STATUS_NORMAL;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String STATUS;
}
public final class android.provider.ContactsContract$QuickContact
  extends java.lang.Object
{
  public static void showQuickContact(android.content.Context, android.graphics.Rect, android.net.Uri, int, java.lang.String[]);
  public static void showQuickContact(android.content.Context, android.graphics.Rect, android.net.Uri, java.lang.String[], java.lang.String);
  public static void showQuickContact(android.content.Context, android.view.View, android.net.Uri, int, java.lang.String[]);
  public static void showQuickContact(android.content.Context, android.view.View, android.net.Uri, java.lang.String[], java.lang.String);
  public void <init>();
  public static final int MODE_LARGE;
  public static final int MODE_MEDIUM;
  public static final int MODE_SMALL;
  public static final java.lang.String ACTION_QUICK_CONTACT;
  public static final java.lang.String EXTRA_EXCLUDE_MIMES;
  public static final java.lang.String EXTRA_MODE;
  public static final java.lang.String EXTRA_PRIORITIZED_MIMETYPE;
}
public final class android.provider.ContactsContract$RawContacts
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$RawContactsColumns, android.provider.ContactsContract$ContactOptionsColumns, android.provider.ContactsContract$ContactNameColumns, android.provider.ContactsContract$SyncColumns
{
  public static android.content.EntityIterator newEntityIterator(android.database.Cursor);
  public static android.net.Uri getContactLookupUri(android.content.ContentResolver, android.net.Uri);
  public static final int AGGREGATION_MODE_DEFAULT;
  public static final int AGGREGATION_MODE_DISABLED;
  public static final int AGGREGATION_MODE_IMMEDIATE;
  public static final int AGGREGATION_MODE_SUSPENDED;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
}
public final class android.provider.ContactsContract$RawContacts$Data
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$DataColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.provider.ContactsContract$RawContacts$DisplayPhoto
  extends java.lang.Object
{
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.provider.ContactsContract$RawContacts$Entity
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$DataColumns
{
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DATA_ID;
}
public interface android.provider.ContactsContract$RawContactsColumns
{
  public static final java.lang.String ACCOUNT_TYPE_AND_DATA_SET;
  public static final java.lang.String AGGREGATION_MODE;
  public static final java.lang.String BACKUP_ID;
  public static final java.lang.String CONTACT_ID;
  public static final java.lang.String DATA_SET;
  public static final java.lang.String DELETED;
  public static final java.lang.String METADATA_DIRTY;
  public static final java.lang.String RAW_CONTACT_IS_READ_ONLY;
  public static final java.lang.String RAW_CONTACT_IS_USER_PROFILE;
}
public final class android.provider.ContactsContract$RawContactsEntity
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.ContactsContract$DataColumns, android.provider.ContactsContract$RawContactsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri PROFILE_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DATA_ID;
}
public class android.provider.ContactsContract$SearchSnippets
  extends java.lang.Object
{
  public void <init>();
  public static final java.lang.String DEFERRED_SNIPPETING_KEY;
  public static final java.lang.String SNIPPET;
}
public final class android.provider.ContactsContract$Settings
  extends java.lang.Object
  implements android.provider.ContactsContract$SettingsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
}
public interface android.provider.ContactsContract$SettingsColumns
{
  public static final java.lang.String ACCOUNT_NAME;
  public static final java.lang.String ACCOUNT_TYPE;
  public static final java.lang.String ANY_UNSYNCED;
  public static final java.lang.String DATA_SET;
  public static final java.lang.String SHOULD_SYNC;
  public static final java.lang.String UNGROUPED_COUNT;
  public static final java.lang.String UNGROUPED_VISIBLE;
  public static final java.lang.String UNGROUPED_WITH_PHONES;
}
public interface android.provider.ContactsContract$StatusColumns
{
  public static final int AVAILABLE;
  public static final int AWAY;
  public static final int CAPABILITY_HAS_CAMERA;
  public static final int CAPABILITY_HAS_VIDEO;
  public static final int CAPABILITY_HAS_VOICE;
  public static final int DO_NOT_DISTURB;
  public static final int IDLE;
  public static final int INVISIBLE;
  public static final int OFFLINE;
  public static final java.lang.String CHAT_CAPABILITY;
  public static final java.lang.String PRESENCE;
  public static final java.lang.String PRESENCE_CUSTOM_STATUS;
  public static final java.lang.String PRESENCE_STATUS;
  public static final java.lang.String STATUS;
  public static final java.lang.String STATUS_ICON;
  public static final java.lang.String STATUS_LABEL;
  public static final java.lang.String STATUS_RES_PACKAGE;
  public static final java.lang.String STATUS_TIMESTAMP;
}
public class android.provider.ContactsContract$StatusUpdates
  extends java.lang.Object
  implements android.provider.ContactsContract$StatusColumns, android.provider.ContactsContract$PresenceColumns
{
  public static final int getPresenceIconResourceId(int);
  public static final int getPresencePrecedence(int);
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri PROFILE_CONTENT_URI;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
}
public interface android.provider.ContactsContract$SyncColumns
  extends android.provider.ContactsContract$BaseSyncColumns
{
  public static final java.lang.String ACCOUNT_NAME;
  public static final java.lang.String ACCOUNT_TYPE;
  public static final java.lang.String DIRTY;
  public static final java.lang.String SOURCE_ID;
  public static final java.lang.String VERSION;
}
public final class android.provider.ContactsContract$SyncState
  extends java.lang.Object
  implements android.provider.SyncStateContract$Columns
{
  public static void set(android.content.ContentProviderClient, android.accounts.Account, byte[])  throws android.os.RemoteException;
  public static android.content.ContentProviderOperation newSetOperation(android.accounts.Account, byte[]);
  public static android.util.Pair getWithUri(android.content.ContentProviderClient, android.accounts.Account)  throws android.os.RemoteException;
  public static byte[] get(android.content.ContentProviderClient, android.accounts.Account)  throws android.os.RemoteException;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.provider.DocumentsContract
  extends java.lang.Object
{
  public static boolean deleteDocument(android.content.ContentResolver, android.net.Uri);
  public static boolean isDocumentUri(android.content.Context, android.net.Uri);
  public static boolean isTreeUri(android.net.Uri);
  public static boolean removeDocument(android.content.ContentResolver, android.net.Uri, android.net.Uri);
  public static android.graphics.Bitmap getDocumentThumbnail(android.content.ContentResolver, android.net.Uri, android.graphics.Point, android.os.CancellationSignal);
  public static android.net.Uri buildChildDocumentsUri(java.lang.String, java.lang.String);
  public static android.net.Uri buildChildDocumentsUriUsingTree(android.net.Uri, java.lang.String);
  public static android.net.Uri buildDocumentUri(java.lang.String, java.lang.String);
  public static android.net.Uri buildDocumentUriUsingTree(android.net.Uri, java.lang.String);
  public static android.net.Uri buildRecentDocumentsUri(java.lang.String, java.lang.String);
  public static android.net.Uri buildRootUri(java.lang.String, java.lang.String);
  public static android.net.Uri buildRootsUri(java.lang.String);
  public static android.net.Uri buildSearchDocumentsUri(java.lang.String, java.lang.String, java.lang.String);
  public static android.net.Uri buildTreeDocumentUri(java.lang.String, java.lang.String);
  public static android.net.Uri copyDocument(android.content.ContentResolver, android.net.Uri, android.net.Uri);
  public static android.net.Uri createDocument(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String);
  public static android.net.Uri moveDocument(android.content.ContentResolver, android.net.Uri, android.net.Uri, android.net.Uri);
  public static android.net.Uri renameDocument(android.content.ContentResolver, android.net.Uri, java.lang.String);
  public static java.lang.String getDocumentId(android.net.Uri);
  public static java.lang.String getRootId(android.net.Uri);
  public static java.lang.String getSearchDocumentsQuery(android.net.Uri);
  public static java.lang.String getTreeDocumentId(android.net.Uri);
  public static final java.lang.String EXTRA_ERROR;
  public static final java.lang.String EXTRA_EXCLUDE_SELF;
  public static final java.lang.String EXTRA_INFO;
  public static final java.lang.String EXTRA_LOADING;
  public static final java.lang.String EXTRA_ORIENTATION;
  public static final java.lang.String EXTRA_PROMPT;
  public static final java.lang.String PROVIDER_INTERFACE;
}
public final class android.provider.DocumentsContract$Document
  extends java.lang.Object
{
  public static final int FLAG_DIR_PREFERS_GRID;
  public static final int FLAG_DIR_PREFERS_LAST_MODIFIED;
  public static final int FLAG_DIR_SUPPORTS_CREATE;
  public static final int FLAG_SUPPORTS_COPY;
  public static final int FLAG_SUPPORTS_DELETE;
  public static final int FLAG_SUPPORTS_MOVE;
  public static final int FLAG_SUPPORTS_REMOVE;
  public static final int FLAG_SUPPORTS_RENAME;
  public static final int FLAG_SUPPORTS_THUMBNAIL;
  public static final int FLAG_SUPPORTS_WRITE;
  public static final int FLAG_VIRTUAL_DOCUMENT;
  public static final java.lang.String COLUMN_DISPLAY_NAME;
  public static final java.lang.String COLUMN_DOCUMENT_ID;
  public static final java.lang.String COLUMN_FLAGS;
  public static final java.lang.String COLUMN_ICON;
  public static final java.lang.String COLUMN_LAST_MODIFIED;
  public static final java.lang.String COLUMN_MIME_TYPE;
  public static final java.lang.String COLUMN_SIZE;
  public static final java.lang.String COLUMN_SUMMARY;
  public static final java.lang.String MIME_TYPE_DIR;
}
public final class android.provider.DocumentsContract$Root
  extends java.lang.Object
{
  public static final int FLAG_LOCAL_ONLY;
  public static final int FLAG_SUPPORTS_CREATE;
  public static final int FLAG_SUPPORTS_IS_CHILD;
  public static final int FLAG_SUPPORTS_RECENTS;
  public static final int FLAG_SUPPORTS_SEARCH;
  public static final java.lang.String COLUMN_AVAILABLE_BYTES;
  public static final java.lang.String COLUMN_CAPACITY_BYTES;
  public static final java.lang.String COLUMN_DOCUMENT_ID;
  public static final java.lang.String COLUMN_FLAGS;
  public static final java.lang.String COLUMN_ICON;
  public static final java.lang.String COLUMN_MIME_TYPES;
  public static final java.lang.String COLUMN_ROOT_ID;
  public static final java.lang.String COLUMN_SUMMARY;
  public static final java.lang.String COLUMN_TITLE;
}
public abstract class android.provider.DocumentsProvider
  extends android.content.ContentProvider
{
  public void <init>();
  public final int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public final void revokeDocumentPermission(java.lang.String);
  public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle)  throws java.io.FileNotFoundException;
  public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public final android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public final android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String)  throws java.io.FileNotFoundException;
  public final android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public final java.lang.String getType(android.net.Uri);
  public abstract android.database.Cursor queryChildDocuments(java.lang.String, java.lang.String[], java.lang.String)  throws java.io.FileNotFoundException;
  public abstract android.database.Cursor queryDocument(java.lang.String, java.lang.String[])  throws java.io.FileNotFoundException;
  public abstract android.database.Cursor queryRoots(java.lang.String[])  throws java.io.FileNotFoundException;
  public abstract android.os.ParcelFileDescriptor openDocument(java.lang.String, java.lang.String, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public boolean isChildDocument(java.lang.String, java.lang.String);
  public void attachInfo(android.content.Context, android.content.pm.ProviderInfo);
  public void deleteDocument(java.lang.String)  throws java.io.FileNotFoundException;
  public void removeDocument(java.lang.String, java.lang.String)  throws java.io.FileNotFoundException;
  public android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String, android.graphics.Point, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public android.content.res.AssetFileDescriptor openTypedDocument(java.lang.String, java.lang.String, android.os.Bundle, android.os.CancellationSignal)  throws java.io.FileNotFoundException;
  public android.database.Cursor queryRecentDocuments(java.lang.String, java.lang.String[])  throws java.io.FileNotFoundException;
  public android.database.Cursor querySearchDocuments(java.lang.String, java.lang.String, java.lang.String[])  throws java.io.FileNotFoundException;
  public android.net.Uri canonicalize(android.net.Uri);
  public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle);
  public java.lang.String copyDocument(java.lang.String, java.lang.String)  throws java.io.FileNotFoundException;
  public java.lang.String createDocument(java.lang.String, java.lang.String, java.lang.String)  throws java.io.FileNotFoundException;
  public java.lang.String getDocumentType(java.lang.String)  throws java.io.FileNotFoundException;
  public java.lang.String moveDocument(java.lang.String, java.lang.String, java.lang.String)  throws java.io.FileNotFoundException;
  public java.lang.String renameDocument(java.lang.String, java.lang.String)  throws java.io.FileNotFoundException;
  public java.lang.String[] getDocumentStreamTypes(java.lang.String, java.lang.String);
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
}
public final class android.provider.LiveFolders
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final int DISPLAY_MODE_GRID;
  public static final int DISPLAY_MODE_LIST;
  public static final java.lang.String ACTION_CREATE_LIVE_FOLDER;
  public static final java.lang.String DESCRIPTION;
  public static final java.lang.String EXTRA_LIVE_FOLDER_BASE_INTENT;
  public static final java.lang.String EXTRA_LIVE_FOLDER_DISPLAY_MODE;
  public static final java.lang.String EXTRA_LIVE_FOLDER_ICON;
  public static final java.lang.String EXTRA_LIVE_FOLDER_NAME;
  public static final java.lang.String ICON_BITMAP;
  public static final java.lang.String ICON_PACKAGE;
  public static final java.lang.String ICON_RESOURCE;
  public static final java.lang.String INTENT;
  public static final java.lang.String NAME;
}
public final class android.provider.MediaStore
  extends java.lang.Object
{
  public static android.net.Uri getMediaScannerUri();
  public static java.lang.String getVersion(android.content.Context);
  public void <init>();
  public static final java.lang.String ACTION_IMAGE_CAPTURE;
  public static final java.lang.String ACTION_IMAGE_CAPTURE_SECURE;
  public static final java.lang.String ACTION_VIDEO_CAPTURE;
  public static final java.lang.String AUTHORITY;
  public static final java.lang.String EXTRA_DURATION_LIMIT;
  public static final java.lang.String EXTRA_FINISH_ON_COMPLETION;
  public static final java.lang.String EXTRA_FULL_SCREEN;
  public static final java.lang.String EXTRA_MEDIA_ALBUM;
  public static final java.lang.String EXTRA_MEDIA_ARTIST;
  public static final java.lang.String EXTRA_MEDIA_FOCUS;
  public static final java.lang.String EXTRA_MEDIA_GENRE;
  public static final java.lang.String EXTRA_MEDIA_PLAYLIST;
  public static final java.lang.String EXTRA_MEDIA_RADIO_CHANNEL;
  public static final java.lang.String EXTRA_MEDIA_TITLE;
  public static final java.lang.String EXTRA_OUTPUT;
  public static final java.lang.String EXTRA_SCREEN_ORIENTATION;
  public static final java.lang.String EXTRA_SHOW_ACTION_ICONS;
  public static final java.lang.String EXTRA_SIZE_LIMIT;
  public static final java.lang.String EXTRA_VIDEO_QUALITY;
  public static final java.lang.String INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH;
  public static final java.lang.String INTENT_ACTION_MEDIA_SEARCH;
  public static final java.lang.String INTENT_ACTION_MUSIC_PLAYER;
  public static final java.lang.String INTENT_ACTION_STILL_IMAGE_CAMERA;
  public static final java.lang.String INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE;
  public static final java.lang.String INTENT_ACTION_TEXT_OPEN_FROM_SEARCH;
  public static final java.lang.String INTENT_ACTION_VIDEO_CAMERA;
  public static final java.lang.String INTENT_ACTION_VIDEO_PLAY_FROM_SEARCH;
  public static final java.lang.String MEDIA_IGNORE_FILENAME;
  public static final java.lang.String MEDIA_SCANNER_VOLUME;
  public static final java.lang.String META_DATA_STILL_IMAGE_CAMERA_PREWARM_SERVICE;
  public static final java.lang.String UNKNOWN_STRING;
}
public final class android.provider.MediaStore$Audio
  extends java.lang.Object
{
  public static java.lang.String keyFor(java.lang.String);
  public void <init>();
}
public interface android.provider.MediaStore$Audio$AlbumColumns
{
  public static final java.lang.String ALBUM;
  public static final java.lang.String ALBUM_ART;
  public static final java.lang.String ALBUM_ID;
  public static final java.lang.String ALBUM_KEY;
  public static final java.lang.String ARTIST;
  public static final java.lang.String FIRST_YEAR;
  public static final java.lang.String LAST_YEAR;
  public static final java.lang.String NUMBER_OF_SONGS;
  public static final java.lang.String NUMBER_OF_SONGS_FOR_ARTIST;
}
public final class android.provider.MediaStore$Audio$Albums
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.MediaStore$Audio$AlbumColumns
{
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String ENTRY_CONTENT_TYPE;
}
public interface android.provider.MediaStore$Audio$ArtistColumns
{
  public static final java.lang.String ARTIST;
  public static final java.lang.String ARTIST_KEY;
  public static final java.lang.String NUMBER_OF_ALBUMS;
  public static final java.lang.String NUMBER_OF_TRACKS;
}
public final class android.provider.MediaStore$Audio$Artists
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.MediaStore$Audio$ArtistColumns
{
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String ENTRY_CONTENT_TYPE;
}
public final class android.provider.MediaStore$Audio$Artists$Albums
  extends java.lang.Object
  implements android.provider.MediaStore$Audio$AlbumColumns
{
  public static final android.net.Uri getContentUri(java.lang.String, long);
  public void <init>();
}
public interface android.provider.MediaStore$Audio$AudioColumns
  extends android.provider.MediaStore$MediaColumns
{
  public static final java.lang.String ALBUM;
  public static final java.lang.String ALBUM_ID;
  public static final java.lang.String ALBUM_KEY;
  public static final java.lang.String ARTIST;
  public static final java.lang.String ARTIST_ID;
  public static final java.lang.String ARTIST_KEY;
  public static final java.lang.String BOOKMARK;
  public static final java.lang.String COMPOSER;
  public static final java.lang.String DURATION;
  public static final java.lang.String IS_ALARM;
  public static final java.lang.String IS_MUSIC;
  public static final java.lang.String IS_NOTIFICATION;
  public static final java.lang.String IS_PODCAST;
  public static final java.lang.String IS_RINGTONE;
  public static final java.lang.String TITLE_KEY;
  public static final java.lang.String TRACK;
  public static final java.lang.String YEAR;
}
public final class android.provider.MediaStore$Audio$Genres
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.MediaStore$Audio$GenresColumns
{
  public static android.net.Uri getContentUri(java.lang.String);
  public static android.net.Uri getContentUriForAudioId(java.lang.String, int);
  public void <init>();
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String ENTRY_CONTENT_TYPE;
}
public final class android.provider.MediaStore$Audio$Genres$Members
  extends java.lang.Object
  implements android.provider.MediaStore$Audio$AudioColumns
{
  public static final android.net.Uri getContentUri(java.lang.String, long);
  public void <init>();
  public static final java.lang.String AUDIO_ID;
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String GENRE_ID;
}
public interface android.provider.MediaStore$Audio$GenresColumns
{
  public static final java.lang.String NAME;
}
public final class android.provider.MediaStore$Audio$Media
  extends java.lang.Object
  implements android.provider.MediaStore$Audio$AudioColumns
{
  public static android.net.Uri getContentUri(java.lang.String);
  public static android.net.Uri getContentUriForPath(java.lang.String);
  public void <init>();
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String ENTRY_CONTENT_TYPE;
  public static final java.lang.String EXTRA_MAX_BYTES;
  public static final java.lang.String RECORD_SOUND_ACTION;
}
public final class android.provider.MediaStore$Audio$Playlists
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.MediaStore$Audio$PlaylistsColumns
{
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String ENTRY_CONTENT_TYPE;
}
public final class android.provider.MediaStore$Audio$Playlists$Members
  extends java.lang.Object
  implements android.provider.MediaStore$Audio$AudioColumns
{
  public static final boolean moveItem(android.content.ContentResolver, long, int, int);
  public static final android.net.Uri getContentUri(java.lang.String, long);
  public void <init>();
  public static final java.lang.String AUDIO_ID;
  public static final java.lang.String CONTENT_DIRECTORY;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String PLAYLIST_ID;
  public static final java.lang.String PLAY_ORDER;
  public static final java.lang.String _ID;
}
public interface android.provider.MediaStore$Audio$PlaylistsColumns
{
  public static final java.lang.String DATA;
  public static final java.lang.String DATE_ADDED;
  public static final java.lang.String DATE_MODIFIED;
  public static final java.lang.String NAME;
}
public final class android.provider.MediaStore$Audio$Radio
  extends java.lang.Object
{
  public static final java.lang.String ENTRY_CONTENT_TYPE;
}
public final class android.provider.MediaStore$Files
  extends java.lang.Object
{
  public static final android.net.Uri getContentUri(java.lang.String, long);
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
}
public interface android.provider.MediaStore$Files$FileColumns
  extends android.provider.MediaStore$MediaColumns
{
  public static final int MEDIA_TYPE_AUDIO;
  public static final int MEDIA_TYPE_IMAGE;
  public static final int MEDIA_TYPE_NONE;
  public static final int MEDIA_TYPE_PLAYLIST;
  public static final int MEDIA_TYPE_VIDEO;
  public static final java.lang.String MEDIA_TYPE;
  public static final java.lang.String MIME_TYPE;
  public static final java.lang.String PARENT;
  public static final java.lang.String TITLE;
}
public final class android.provider.MediaStore$Images
  extends java.lang.Object
{
  public void <init>();
}
public interface android.provider.MediaStore$Images$ImageColumns
  extends android.provider.MediaStore$MediaColumns
{
  public static final java.lang.String BUCKET_DISPLAY_NAME;
  public static final java.lang.String BUCKET_ID;
  public static final java.lang.String DATE_TAKEN;
  public static final java.lang.String DESCRIPTION;
  public static final java.lang.String IS_PRIVATE;
  public static final java.lang.String LATITUDE;
  public static final java.lang.String LONGITUDE;
  public static final java.lang.String MINI_THUMB_MAGIC;
  public static final java.lang.String ORIENTATION;
  public static final java.lang.String PICASA_ID;
}
public final class android.provider.MediaStore$Images$Media
  extends java.lang.Object
  implements android.provider.MediaStore$Images$ImageColumns
{
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[]);
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String);
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public static final android.graphics.Bitmap getBitmap(android.content.ContentResolver, android.net.Uri)  throws java.io.FileNotFoundException, java.io.IOException;
  public static final java.lang.String insertImage(android.content.ContentResolver, android.graphics.Bitmap, java.lang.String, java.lang.String);
  public static final java.lang.String insertImage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String)  throws java.io.FileNotFoundException;
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public class android.provider.MediaStore$Images$Thumbnails
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[]);
  public static final android.database.Cursor queryMiniThumbnail(android.content.ContentResolver, long, int, java.lang.String[]);
  public static final android.database.Cursor queryMiniThumbnails(android.content.ContentResolver, android.net.Uri, int, java.lang.String[]);
  public static void cancelThumbnailRequest(android.content.ContentResolver, long);
  public static void cancelThumbnailRequest(android.content.ContentResolver, long, long);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, int, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, long, int, android.graphics.BitmapFactory$Options);
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
  public static final int FULL_SCREEN_KIND;
  public static final int MICRO_KIND;
  public static final int MINI_KIND;
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String DATA;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String HEIGHT;
  public static final java.lang.String IMAGE_ID;
  public static final java.lang.String KIND;
  public static final java.lang.String THUMB_DATA;
  public static final java.lang.String WIDTH;
}
public interface android.provider.MediaStore$MediaColumns
  extends android.provider.BaseColumns
{
  public static final java.lang.String DATA;
  public static final java.lang.String DATE_ADDED;
  public static final java.lang.String DATE_MODIFIED;
  public static final java.lang.String DISPLAY_NAME;
  public static final java.lang.String HEIGHT;
  public static final java.lang.String MIME_TYPE;
  public static final java.lang.String SIZE;
  public static final java.lang.String TITLE;
  public static final java.lang.String WIDTH;
}
public final class android.provider.MediaStore$Video
  extends java.lang.Object
{
  public static final android.database.Cursor query(android.content.ContentResolver, android.net.Uri, java.lang.String[]);
  public void <init>();
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.MediaStore$Video$Media
  extends java.lang.Object
  implements android.provider.MediaStore$Video$VideoColumns
{
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public class android.provider.MediaStore$Video$Thumbnails
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static void cancelThumbnailRequest(android.content.ContentResolver, long);
  public static void cancelThumbnailRequest(android.content.ContentResolver, long, long);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, int, android.graphics.BitmapFactory$Options);
  public static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, long, int, android.graphics.BitmapFactory$Options);
  public static android.net.Uri getContentUri(java.lang.String);
  public void <init>();
  public static final int FULL_SCREEN_KIND;
  public static final int MICRO_KIND;
  public static final int MINI_KIND;
  public static final android.net.Uri EXTERNAL_CONTENT_URI;
  public static final android.net.Uri INTERNAL_CONTENT_URI;
  public static final java.lang.String DATA;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String HEIGHT;
  public static final java.lang.String KIND;
  public static final java.lang.String VIDEO_ID;
  public static final java.lang.String WIDTH;
}
public interface android.provider.MediaStore$Video$VideoColumns
  extends android.provider.MediaStore$MediaColumns
{
  public static final java.lang.String ALBUM;
  public static final java.lang.String ARTIST;
  public static final java.lang.String BOOKMARK;
  public static final java.lang.String BUCKET_DISPLAY_NAME;
  public static final java.lang.String BUCKET_ID;
  public static final java.lang.String CATEGORY;
  public static final java.lang.String DATE_TAKEN;
  public static final java.lang.String DESCRIPTION;
  public static final java.lang.String DURATION;
  public static final java.lang.String IS_PRIVATE;
  public static final java.lang.String LANGUAGE;
  public static final java.lang.String LATITUDE;
  public static final java.lang.String LONGITUDE;
  public static final java.lang.String MINI_THUMB_MAGIC;
  public static final java.lang.String RESOLUTION;
  public static final java.lang.String TAGS;
}
public interface android.provider.OpenableColumns
{
  public static final java.lang.String DISPLAY_NAME;
  public static final java.lang.String SIZE;
}
public class android.provider.SearchRecentSuggestions
  extends java.lang.Object
{
  public void <init>(android.content.Context, java.lang.String, int);
  public void clearHistory();
  public void saveRecentQuery(java.lang.String, java.lang.String);
  protected void truncateHistory(android.content.ContentResolver, int);
  public static final int QUERIES_PROJECTION_DATE_INDEX;
  public static final int QUERIES_PROJECTION_DISPLAY1_INDEX;
  public static final int QUERIES_PROJECTION_DISPLAY2_INDEX;
  public static final int QUERIES_PROJECTION_QUERY_INDEX;
  public static final java.lang.String[] QUERIES_PROJECTION_1LINE;
  public static final java.lang.String[] QUERIES_PROJECTION_2LINE;
}
public final class android.provider.Settings
  extends java.lang.Object
{
  public static boolean canDrawOverlays(android.content.Context);
  public void <init>();
  public static final java.lang.String ACTION_ACCESSIBILITY_SETTINGS;
  public static final java.lang.String ACTION_ADD_ACCOUNT;
  public static final java.lang.String ACTION_AIRPLANE_MODE_SETTINGS;
  public static final java.lang.String ACTION_APN_SETTINGS;
  public static final java.lang.String ACTION_APPLICATION_DETAILS_SETTINGS;
  public static final java.lang.String ACTION_APPLICATION_DEVELOPMENT_SETTINGS;
  public static final java.lang.String ACTION_APPLICATION_SETTINGS;
  public static final java.lang.String ACTION_BATTERY_SAVER_SETTINGS;
  public static final java.lang.String ACTION_BLUETOOTH_SETTINGS;
  public static final java.lang.String ACTION_CAPTIONING_SETTINGS;
  public static final java.lang.String ACTION_CAST_SETTINGS;
  public static final java.lang.String ACTION_DATA_ROAMING_SETTINGS;
  public static final java.lang.String ACTION_DATE_SETTINGS;
  public static final java.lang.String ACTION_DEVICE_INFO_SETTINGS;
  public static final java.lang.String ACTION_DISPLAY_SETTINGS;
  public static final java.lang.String ACTION_DREAM_SETTINGS;
  public static final java.lang.String ACTION_HARD_KEYBOARD_SETTINGS;
  public static final java.lang.String ACTION_HOME_SETTINGS;
  public static final java.lang.String ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS;
  public static final java.lang.String ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS;
  public static final java.lang.String ACTION_INPUT_METHOD_SETTINGS;
  public static final java.lang.String ACTION_INPUT_METHOD_SUBTYPE_SETTINGS;
  public static final java.lang.String ACTION_INTERNAL_STORAGE_SETTINGS;
  public static final java.lang.String ACTION_LOCALE_SETTINGS;
  public static final java.lang.String ACTION_LOCATION_SOURCE_SETTINGS;
  public static final java.lang.String ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS;
  public static final java.lang.String ACTION_MANAGE_APPLICATIONS_SETTINGS;
  public static final java.lang.String ACTION_MANAGE_DEFAULT_APPS_SETTINGS;
  public static final java.lang.String ACTION_MANAGE_OVERLAY_PERMISSION;
  public static final java.lang.String ACTION_MANAGE_WRITE_SETTINGS;
  public static final java.lang.String ACTION_MEMORY_CARD_SETTINGS;
  public static final java.lang.String ACTION_NETWORK_OPERATOR_SETTINGS;
  public static final java.lang.String ACTION_NFCSHARING_SETTINGS;
  public static final java.lang.String ACTION_NFC_PAYMENT_SETTINGS;
  public static final java.lang.String ACTION_NFC_SETTINGS;
  public static final java.lang.String ACTION_NOTIFICATION_LISTENER_SETTINGS;
  public static final java.lang.String ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS;
  public static final java.lang.String ACTION_PRINT_SETTINGS;
  public static final java.lang.String ACTION_PRIVACY_SETTINGS;
  public static final java.lang.String ACTION_QUICK_LAUNCH_SETTINGS;
  public static final java.lang.String ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS;
  public static final java.lang.String ACTION_SEARCH_SETTINGS;
  public static final java.lang.String ACTION_SECURITY_SETTINGS;
  public static final java.lang.String ACTION_SETTINGS;
  public static final java.lang.String ACTION_SHOW_REGULATORY_INFO;
  public static final java.lang.String ACTION_SOUND_SETTINGS;
  public static final java.lang.String ACTION_SYNC_SETTINGS;
  public static final java.lang.String ACTION_USAGE_ACCESS_SETTINGS;
  public static final java.lang.String ACTION_USER_DICTIONARY_SETTINGS;
  public static final java.lang.String ACTION_VOICE_CONTROL_AIRPLANE_MODE;
  public static final java.lang.String ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE;
  public static final java.lang.String ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE;
  public static final java.lang.String ACTION_VOICE_INPUT_SETTINGS;
  public static final java.lang.String ACTION_VPN_SETTINGS;
  public static final java.lang.String ACTION_VR_LISTENER_SETTINGS;
  public static final java.lang.String ACTION_WEBVIEW_SETTINGS;
  public static final java.lang.String ACTION_WIFI_IP_SETTINGS;
  public static final java.lang.String ACTION_WIFI_SETTINGS;
  public static final java.lang.String ACTION_WIRELESS_SETTINGS;
  public static final java.lang.String AUTHORITY;
  public static final java.lang.String EXTRA_ACCOUNT_TYPES;
  public static final java.lang.String EXTRA_AIRPLANE_MODE_ENABLED;
  public static final java.lang.String EXTRA_AUTHORITIES;
  public static final java.lang.String EXTRA_BATTERY_SAVER_MODE_ENABLED;
  public static final java.lang.String EXTRA_DO_NOT_DISTURB_MODE_ENABLED;
  public static final java.lang.String EXTRA_DO_NOT_DISTURB_MODE_MINUTES;
  public static final java.lang.String EXTRA_INPUT_METHOD_ID;
  public static final java.lang.String INTENT_CATEGORY_USAGE_ACCESS_CONFIG;
  public static final java.lang.String METADATA_USAGE_ACCESS_REASON;
}
public final class android.provider.Settings$Global
  extends android.provider.Settings$NameValueTable
{
  public static boolean putFloat(android.content.ContentResolver, java.lang.String, float);
  public static boolean putInt(android.content.ContentResolver, java.lang.String, int);
  public static boolean putLong(android.content.ContentResolver, java.lang.String, long);
  public static boolean putString(android.content.ContentResolver, java.lang.String, java.lang.String);
  public static float getFloat(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static float getFloat(android.content.ContentResolver, java.lang.String, float);
  public static int getInt(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static int getInt(android.content.ContentResolver, java.lang.String, int);
  public static long getLong(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static long getLong(android.content.ContentResolver, java.lang.String, long);
  public static android.net.Uri getUriFor(java.lang.String);
  public static java.lang.String getString(android.content.ContentResolver, java.lang.String);
  public void <init>();
  public static final int WIFI_SLEEP_POLICY_DEFAULT;
  public static final int WIFI_SLEEP_POLICY_NEVER;
  public static final int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String ADB_ENABLED;
  public static final java.lang.String AIRPLANE_MODE_ON;
  public static final java.lang.String AIRPLANE_MODE_RADIOS;
  public static final java.lang.String ALWAYS_FINISH_ACTIVITIES;
  public static final java.lang.String ANIMATOR_DURATION_SCALE;
  public static final java.lang.String AUTO_TIME;
  public static final java.lang.String AUTO_TIME_ZONE;
  public static final java.lang.String BLUETOOTH_ON;
  public static final java.lang.String BOOT_COUNT;
  public static final java.lang.String CONTACT_METADATA_SYNC_ENABLED;
  public static final java.lang.String DATA_ROAMING;
  public static final java.lang.String DEBUG_APP;
  public static final java.lang.String DEVELOPMENT_SETTINGS_ENABLED;
  public static final java.lang.String DEVICE_PROVISIONED;
  public static final java.lang.String HTTP_PROXY;
  public static final java.lang.String INSTALL_NON_MARKET_APPS;
  public static final java.lang.String MODE_RINGER;
  public static final java.lang.String NETWORK_PREFERENCE;
  public static final java.lang.String RADIO_BLUETOOTH;
  public static final java.lang.String RADIO_CELL;
  public static final java.lang.String RADIO_NFC;
  public static final java.lang.String RADIO_WIFI;
  public static final java.lang.String SHOW_PROCESSES;
  public static final java.lang.String STAY_ON_WHILE_PLUGGED_IN;
  public static final java.lang.String TRANSITION_ANIMATION_SCALE;
  public static final java.lang.String USB_MASS_STORAGE_ENABLED;
  public static final java.lang.String USE_GOOGLE_MAIL;
  public static final java.lang.String WAIT_FOR_DEBUGGER;
  public static final java.lang.String WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN;
  public static final java.lang.String WIFI_MAX_DHCP_RETRY_COUNT;
  public static final java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS;
  public static final java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON;
  public static final java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY;
  public static final java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT;
  public static final java.lang.String WIFI_ON;
  public static final java.lang.String WIFI_SLEEP_POLICY;
  public static final java.lang.String WIFI_WATCHDOG_ON;
  public static final java.lang.String WINDOW_ANIMATION_SCALE;
}
public class android.provider.Settings$NameValueTable
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static android.net.Uri getUriFor(android.net.Uri, java.lang.String);
  public void <init>();
  protected static boolean putString(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String);
  public static final java.lang.String NAME;
  public static final java.lang.String VALUE;
}
public final class android.provider.Settings$Secure
  extends android.provider.Settings$NameValueTable
{
  public static final boolean isLocationProviderEnabled(android.content.ContentResolver, java.lang.String);
  public static final void setLocationProviderEnabled(android.content.ContentResolver, java.lang.String, boolean);
  public static boolean putFloat(android.content.ContentResolver, java.lang.String, float);
  public static boolean putInt(android.content.ContentResolver, java.lang.String, int);
  public static boolean putLong(android.content.ContentResolver, java.lang.String, long);
  public static boolean putString(android.content.ContentResolver, java.lang.String, java.lang.String);
  public static float getFloat(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static float getFloat(android.content.ContentResolver, java.lang.String, float);
  public static int getInt(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static int getInt(android.content.ContentResolver, java.lang.String, int);
  public static long getLong(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static long getLong(android.content.ContentResolver, java.lang.String, long);
  public static android.net.Uri getUriFor(java.lang.String);
  public static java.lang.String getString(android.content.ContentResolver, java.lang.String);
  public void <init>();
  public static final int LOCATION_MODE_BATTERY_SAVING;
  public static final int LOCATION_MODE_HIGH_ACCURACY;
  public static final int LOCATION_MODE_OFF;
  public static final int LOCATION_MODE_SENSORS_ONLY;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String ACCESSIBILITY_DISPLAY_INVERSION_ENABLED;
  public static final java.lang.String ACCESSIBILITY_ENABLED;
  public static final java.lang.String ACCESSIBILITY_SPEAK_PASSWORD;
  public static final java.lang.String ADB_ENABLED;
  public static final java.lang.String ALLOWED_GEOLOCATION_ORIGINS;
  public static final java.lang.String ALLOW_MOCK_LOCATION;
  public static final java.lang.String ANDROID_ID;
  public static final java.lang.String BACKGROUND_DATA;
  public static final java.lang.String BLUETOOTH_ON;
  public static final java.lang.String DATA_ROAMING;
  public static final java.lang.String DEFAULT_INPUT_METHOD;
  public static final java.lang.String DEVELOPMENT_SETTINGS_ENABLED;
  public static final java.lang.String DEVICE_PROVISIONED;
  public static final java.lang.String ENABLED_ACCESSIBILITY_SERVICES;
  public static final java.lang.String ENABLED_INPUT_METHODS;
  public static final java.lang.String HTTP_PROXY;
  public static final java.lang.String INPUT_METHOD_SELECTOR_VISIBILITY;
  public static final java.lang.String INSTALL_NON_MARKET_APPS;
  public static final java.lang.String LOCATION_MODE;
  public static final java.lang.String LOCATION_PROVIDERS_ALLOWED;
  public static final java.lang.String LOCK_PATTERN_ENABLED;
  public static final java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED;
  public static final java.lang.String LOCK_PATTERN_VISIBLE;
  public static final java.lang.String LOGGING_ID;
  public static final java.lang.String NETWORK_PREFERENCE;
  public static final java.lang.String PARENTAL_CONTROL_ENABLED;
  public static final java.lang.String PARENTAL_CONTROL_LAST_UPDATE;
  public static final java.lang.String PARENTAL_CONTROL_REDIRECT_URL;
  public static final java.lang.String SELECTED_INPUT_METHOD_SUBTYPE;
  public static final java.lang.String SETTINGS_CLASSNAME;
  public static final java.lang.String SKIP_FIRST_USE_HINTS;
  public static final java.lang.String TOUCH_EXPLORATION_ENABLED;
  public static final java.lang.String TTS_DEFAULT_COUNTRY;
  public static final java.lang.String TTS_DEFAULT_LANG;
  public static final java.lang.String TTS_DEFAULT_PITCH;
  public static final java.lang.String TTS_DEFAULT_RATE;
  public static final java.lang.String TTS_DEFAULT_SYNTH;
  public static final java.lang.String TTS_DEFAULT_VARIANT;
  public static final java.lang.String TTS_ENABLED_PLUGINS;
  public static final java.lang.String TTS_USE_DEFAULTS;
  public static final java.lang.String USB_MASS_STORAGE_ENABLED;
  public static final java.lang.String USE_GOOGLE_MAIL;
  public static final java.lang.String WIFI_MAX_DHCP_RETRY_COUNT;
  public static final java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS;
  public static final java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON;
  public static final java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY;
  public static final java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT;
  public static final java.lang.String WIFI_ON;
  public static final java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE;
  public static final java.lang.String WIFI_WATCHDOG_AP_COUNT;
  public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS;
  public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED;
  public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS;
  public static final java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT;
  public static final java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS;
  public static final java.lang.String WIFI_WATCHDOG_ON;
  public static final java.lang.String WIFI_WATCHDOG_PING_COUNT;
  public static final java.lang.String WIFI_WATCHDOG_PING_DELAY_MS;
  public static final java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS;
  public static final java.lang.String WIFI_WATCHDOG_WATCH_LIST;
}
public class android.provider.Settings$SettingNotFoundException
  extends android.util.AndroidException
{
  public void <init>(java.lang.String);
}
public final class android.provider.Settings$System
  extends android.provider.Settings$NameValueTable
{
  public static boolean canWrite(android.content.Context);
  public static boolean getShowGTalkServiceStatus(android.content.ContentResolver);
  public static boolean putConfiguration(android.content.ContentResolver, android.content.res.Configuration);
  public static boolean putFloat(android.content.ContentResolver, java.lang.String, float);
  public static boolean putInt(android.content.ContentResolver, java.lang.String, int);
  public static boolean putLong(android.content.ContentResolver, java.lang.String, long);
  public static boolean putString(android.content.ContentResolver, java.lang.String, java.lang.String);
  public static float getFloat(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static float getFloat(android.content.ContentResolver, java.lang.String, float);
  public static int getInt(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static int getInt(android.content.ContentResolver, java.lang.String, int);
  public static long getLong(android.content.ContentResolver, java.lang.String)  throws android.provider.Settings$SettingNotFoundException;
  public static long getLong(android.content.ContentResolver, java.lang.String, long);
  public static void getConfiguration(android.content.ContentResolver, android.content.res.Configuration);
  public static void setShowGTalkServiceStatus(android.content.ContentResolver, boolean);
  public static android.net.Uri getUriFor(java.lang.String);
  public static java.lang.String getString(android.content.ContentResolver, java.lang.String);
  public void <init>();
  public static final int SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
  public static final int SCREEN_BRIGHTNESS_MODE_MANUAL;
  public static final int WIFI_SLEEP_POLICY_DEFAULT;
  public static final int WIFI_SLEEP_POLICY_NEVER;
  public static final int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri DEFAULT_ALARM_ALERT_URI;
  public static final android.net.Uri DEFAULT_NOTIFICATION_URI;
  public static final android.net.Uri DEFAULT_RINGTONE_URI;
  public static final java.lang.String ACCELEROMETER_ROTATION;
  public static final java.lang.String ADB_ENABLED;
  public static final java.lang.String AIRPLANE_MODE_ON;
  public static final java.lang.String AIRPLANE_MODE_RADIOS;
  public static final java.lang.String ALARM_ALERT;
  public static final java.lang.String ALWAYS_FINISH_ACTIVITIES;
  public static final java.lang.String ANDROID_ID;
  public static final java.lang.String ANIMATOR_DURATION_SCALE;
  public static final java.lang.String AUTO_TIME;
  public static final java.lang.String AUTO_TIME_ZONE;
  public static final java.lang.String BLUETOOTH_DISCOVERABILITY;
  public static final java.lang.String BLUETOOTH_DISCOVERABILITY_TIMEOUT;
  public static final java.lang.String BLUETOOTH_ON;
  public static final java.lang.String DATA_ROAMING;
  public static final java.lang.String DATE_FORMAT;
  public static final java.lang.String DEBUG_APP;
  public static final java.lang.String DEVICE_PROVISIONED;
  public static final java.lang.String DIM_SCREEN;
  public static final java.lang.String DTMF_TONE_TYPE_WHEN_DIALING;
  public static final java.lang.String DTMF_TONE_WHEN_DIALING;
  public static final java.lang.String END_BUTTON_BEHAVIOR;
  public static final java.lang.String FONT_SCALE;
  public static final java.lang.String HAPTIC_FEEDBACK_ENABLED;
  public static final java.lang.String HTTP_PROXY;
  public static final java.lang.String INSTALL_NON_MARKET_APPS;
  public static final java.lang.String LOCATION_PROVIDERS_ALLOWED;
  public static final java.lang.String LOCK_PATTERN_ENABLED;
  public static final java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED;
  public static final java.lang.String LOCK_PATTERN_VISIBLE;
  public static final java.lang.String LOGGING_ID;
  public static final java.lang.String MODE_RINGER;
  public static final java.lang.String MODE_RINGER_STREAMS_AFFECTED;
  public static final java.lang.String MUTE_STREAMS_AFFECTED;
  public static final java.lang.String NETWORK_PREFERENCE;
  public static final java.lang.String NEXT_ALARM_FORMATTED;
  public static final java.lang.String NOTIFICATION_SOUND;
  public static final java.lang.String PARENTAL_CONTROL_ENABLED;
  public static final java.lang.String PARENTAL_CONTROL_LAST_UPDATE;
  public static final java.lang.String PARENTAL_CONTROL_REDIRECT_URL;
  public static final java.lang.String RADIO_BLUETOOTH;
  public static final java.lang.String RADIO_CELL;
  public static final java.lang.String RADIO_NFC;
  public static final java.lang.String RADIO_WIFI;
  public static final java.lang.String RINGTONE;
  public static final java.lang.String SCREEN_BRIGHTNESS;
  public static final java.lang.String SCREEN_BRIGHTNESS_MODE;
  public static final java.lang.String SCREEN_OFF_TIMEOUT;
  public static final java.lang.String SETTINGS_CLASSNAME;
  public static final java.lang.String SETUP_WIZARD_HAS_RUN;
  public static final java.lang.String SHOW_GTALK_SERVICE_STATUS;
  public static final java.lang.String SHOW_PROCESSES;
  public static final java.lang.String SHOW_WEB_SUGGESTIONS;
  public static final java.lang.String SOUND_EFFECTS_ENABLED;
  public static final java.lang.String STAY_ON_WHILE_PLUGGED_IN;
  public static final java.lang.String TEXT_AUTO_CAPS;
  public static final java.lang.String TEXT_AUTO_PUNCTUATE;
  public static final java.lang.String TEXT_AUTO_REPLACE;
  public static final java.lang.String TEXT_SHOW_PASSWORD;
  public static final java.lang.String TIME_12_24;
  public static final java.lang.String TRANSITION_ANIMATION_SCALE;
  public static final java.lang.String USB_MASS_STORAGE_ENABLED;
  public static final java.lang.String USER_ROTATION;
  public static final java.lang.String USE_GOOGLE_MAIL;
  public static final java.lang.String VIBRATE_ON;
  public static final java.lang.String VIBRATE_WHEN_RINGING;
  public static final java.lang.String WAIT_FOR_DEBUGGER;
  public static final java.lang.String WALLPAPER_ACTIVITY;
  public static final java.lang.String WIFI_MAX_DHCP_RETRY_COUNT;
  public static final java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS;
  public static final java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON;
  public static final java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY;
  public static final java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT;
  public static final java.lang.String WIFI_ON;
  public static final java.lang.String WIFI_SLEEP_POLICY;
  public static final java.lang.String WIFI_STATIC_DNS1;
  public static final java.lang.String WIFI_STATIC_DNS2;
  public static final java.lang.String WIFI_STATIC_GATEWAY;
  public static final java.lang.String WIFI_STATIC_IP;
  public static final java.lang.String WIFI_STATIC_NETMASK;
  public static final java.lang.String WIFI_USE_STATIC_IP;
  public static final java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE;
  public static final java.lang.String WIFI_WATCHDOG_AP_COUNT;
  public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS;
  public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED;
  public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS;
  public static final java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT;
  public static final java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS;
  public static final java.lang.String WIFI_WATCHDOG_ON;
  public static final java.lang.String WIFI_WATCHDOG_PING_COUNT;
  public static final java.lang.String WIFI_WATCHDOG_PING_DELAY_MS;
  public static final java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS;
  public static final java.lang.String WINDOW_ANIMATION_SCALE;
}
public class android.provider.SyncStateContract
  extends java.lang.Object
{
  public void <init>();
}
public interface android.provider.SyncStateContract$Columns
  extends android.provider.BaseColumns
{
  public static final java.lang.String ACCOUNT_NAME;
  public static final java.lang.String ACCOUNT_TYPE;
  public static final java.lang.String DATA;
}
public class android.provider.SyncStateContract$Constants
  extends java.lang.Object
  implements android.provider.SyncStateContract$Columns
{
  public void <init>();
  public static final java.lang.String CONTENT_DIRECTORY;
}
public final class android.provider.SyncStateContract$Helpers
  extends java.lang.Object
{
  public static void set(android.content.ContentProviderClient, android.net.Uri, android.accounts.Account, byte[])  throws android.os.RemoteException;
  public static void update(android.content.ContentProviderClient, android.net.Uri, byte[])  throws android.os.RemoteException;
  public static android.content.ContentProviderOperation newSetOperation(android.net.Uri, android.accounts.Account, byte[]);
  public static android.content.ContentProviderOperation newUpdateOperation(android.net.Uri, byte[]);
  public static android.net.Uri insert(android.content.ContentProviderClient, android.net.Uri, android.accounts.Account, byte[])  throws android.os.RemoteException;
  public static android.util.Pair getWithUri(android.content.ContentProviderClient, android.net.Uri, android.accounts.Account)  throws android.os.RemoteException;
  public static byte[] get(android.content.ContentProviderClient, android.net.Uri, android.accounts.Account)  throws android.os.RemoteException;
  public void <init>();
}
public final class android.provider.Telephony
  extends java.lang.Object
{
}
public interface android.provider.Telephony$BaseMmsColumns
  extends android.provider.BaseColumns
{
  public static final int MESSAGE_BOX_ALL;
  public static final int MESSAGE_BOX_DRAFTS;
  public static final int MESSAGE_BOX_FAILED;
  public static final int MESSAGE_BOX_INBOX;
  public static final int MESSAGE_BOX_OUTBOX;
  public static final int MESSAGE_BOX_SENT;
  public static final java.lang.String CONTENT_CLASS;
  public static final java.lang.String CONTENT_LOCATION;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String CREATOR;
  public static final java.lang.String DATE;
  public static final java.lang.String DATE_SENT;
  public static final java.lang.String DELIVERY_REPORT;
  public static final java.lang.String DELIVERY_TIME;
  public static final java.lang.String EXPIRY;
  public static final java.lang.String LOCKED;
  public static final java.lang.String MESSAGE_BOX;
  public static final java.lang.String MESSAGE_CLASS;
  public static final java.lang.String MESSAGE_ID;
  public static final java.lang.String MESSAGE_SIZE;
  public static final java.lang.String MESSAGE_TYPE;
  public static final java.lang.String MMS_VERSION;
  public static final java.lang.String PRIORITY;
  public static final java.lang.String READ;
  public static final java.lang.String READ_REPORT;
  public static final java.lang.String READ_STATUS;
  public static final java.lang.String REPORT_ALLOWED;
  public static final java.lang.String RESPONSE_STATUS;
  public static final java.lang.String RESPONSE_TEXT;
  public static final java.lang.String RETRIEVE_STATUS;
  public static final java.lang.String RETRIEVE_TEXT;
  public static final java.lang.String RETRIEVE_TEXT_CHARSET;
  public static final java.lang.String SEEN;
  public static final java.lang.String STATUS;
  public static final java.lang.String SUBJECT;
  public static final java.lang.String SUBJECT_CHARSET;
  public static final java.lang.String SUBSCRIPTION_ID;
  public static final java.lang.String TEXT_ONLY;
  public static final java.lang.String THREAD_ID;
  public static final java.lang.String TRANSACTION_ID;
}
public interface android.provider.Telephony$CanonicalAddressesColumns
  extends android.provider.BaseColumns
{
  public static final java.lang.String ADDRESS;
}
public final class android.provider.Telephony$Carriers
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String APN;
  public static final java.lang.String AUTH_TYPE;
  public static final java.lang.String BEARER;
  public static final java.lang.String CARRIER_ENABLED;
  public static final java.lang.String CURRENT;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String MCC;
  public static final java.lang.String MMSC;
  public static final java.lang.String MMSPORT;
  public static final java.lang.String MMSPROXY;
  public static final java.lang.String MNC;
  public static final java.lang.String MVNO_MATCH_DATA;
  public static final java.lang.String MVNO_TYPE;
  public static final java.lang.String NAME;
  public static final java.lang.String NUMERIC;
  public static final java.lang.String PASSWORD;
  public static final java.lang.String PORT;
  public static final java.lang.String PROTOCOL;
  public static final java.lang.String PROXY;
  public static final java.lang.String ROAMING_PROTOCOL;
  public static final java.lang.String SERVER;
  public static final java.lang.String SUBSCRIPTION_ID;
  public static final java.lang.String TYPE;
  public static final java.lang.String USER;
}
public final class android.provider.Telephony$Mms
  extends java.lang.Object
  implements android.provider.Telephony$BaseMmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri REPORT_REQUEST_URI;
  public static final android.net.Uri REPORT_STATUS_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Mms$Addr
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final java.lang.String ADDRESS;
  public static final java.lang.String CHARSET;
  public static final java.lang.String CONTACT_ID;
  public static final java.lang.String MSG_ID;
  public static final java.lang.String TYPE;
}
public final class android.provider.Telephony$Mms$Draft
  extends java.lang.Object
  implements android.provider.Telephony$BaseMmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Mms$Inbox
  extends java.lang.Object
  implements android.provider.Telephony$BaseMmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Mms$Intents
  extends java.lang.Object
{
  public static final java.lang.String CONTENT_CHANGED_ACTION;
  public static final java.lang.String DELETED_CONTENTS;
}
public final class android.provider.Telephony$Mms$Outbox
  extends java.lang.Object
  implements android.provider.Telephony$BaseMmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Mms$Part
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final java.lang.String CHARSET;
  public static final java.lang.String CONTENT_DISPOSITION;
  public static final java.lang.String CONTENT_ID;
  public static final java.lang.String CONTENT_LOCATION;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String CT_START;
  public static final java.lang.String CT_TYPE;
  public static final java.lang.String FILENAME;
  public static final java.lang.String MSG_ID;
  public static final java.lang.String NAME;
  public static final java.lang.String SEQ;
  public static final java.lang.String TEXT;
  public static final java.lang.String _DATA;
}
public final class android.provider.Telephony$Mms$Rate
  extends java.lang.Object
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String SENT_TIME;
}
public final class android.provider.Telephony$Mms$Sent
  extends java.lang.Object
  implements android.provider.Telephony$BaseMmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$MmsSms
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final int ERR_TYPE_GENERIC;
  public static final int ERR_TYPE_GENERIC_PERMANENT;
  public static final int ERR_TYPE_MMS_PROTO_PERMANENT;
  public static final int ERR_TYPE_MMS_PROTO_TRANSIENT;
  public static final int ERR_TYPE_SMS_PROTO_PERMANENT;
  public static final int ERR_TYPE_SMS_PROTO_TRANSIENT;
  public static final int ERR_TYPE_TRANSPORT_FAILURE;
  public static final int MMS_PROTO;
  public static final int NO_ERROR;
  public static final int SMS_PROTO;
  public static final android.net.Uri CONTENT_CONVERSATIONS_URI;
  public static final android.net.Uri CONTENT_DRAFT_URI;
  public static final android.net.Uri CONTENT_FILTER_BYPHONE_URI;
  public static final android.net.Uri CONTENT_LOCKED_URI;
  public static final android.net.Uri CONTENT_UNDELIVERED_URI;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri SEARCH_URI;
  public static final java.lang.String TYPE_DISCRIMINATOR_COLUMN;
}
public final class android.provider.Telephony$MmsSms$PendingMessages
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DUE_TIME;
  public static final java.lang.String ERROR_CODE;
  public static final java.lang.String ERROR_TYPE;
  public static final java.lang.String LAST_TRY;
  public static final java.lang.String MSG_ID;
  public static final java.lang.String MSG_TYPE;
  public static final java.lang.String PROTO_TYPE;
  public static final java.lang.String RETRY_INDEX;
  public static final java.lang.String SUBSCRIPTION_ID;
}
public final class android.provider.Telephony$Sms
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Telephony$TextBasedSmsColumns
{
  public static java.lang.String getDefaultSmsPackage(android.content.Context);
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Sms$Conversations
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Telephony$TextBasedSmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String MESSAGE_COUNT;
  public static final java.lang.String SNIPPET;
}
public final class android.provider.Telephony$Sms$Draft
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Telephony$TextBasedSmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Sms$Inbox
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Telephony$TextBasedSmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Sms$Intents
  extends java.lang.Object
{
  public static android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent);
  public static final int RESULT_SMS_DUPLICATED;
  public static final int RESULT_SMS_GENERIC_ERROR;
  public static final int RESULT_SMS_HANDLED;
  public static final int RESULT_SMS_OUT_OF_MEMORY;
  public static final int RESULT_SMS_UNSUPPORTED;
  public static final java.lang.String ACTION_CHANGE_DEFAULT;
  public static final java.lang.String ACTION_DEFAULT_SMS_PACKAGE_CHANGED;
  public static final java.lang.String ACTION_EXTERNAL_PROVIDER_CHANGE;
  public static final java.lang.String DATA_SMS_RECEIVED_ACTION;
  public static final java.lang.String EXTRA_IS_DEFAULT_SMS_APP;
  public static final java.lang.String EXTRA_PACKAGE_NAME;
  public static final java.lang.String SIM_FULL_ACTION;
  public static final java.lang.String SMS_CB_RECEIVED_ACTION;
  public static final java.lang.String SMS_DELIVER_ACTION;
  public static final java.lang.String SMS_RECEIVED_ACTION;
  public static final java.lang.String SMS_REJECTED_ACTION;
  public static final java.lang.String SMS_SERVICE_CATEGORY_PROGRAM_DATA_RECEIVED_ACTION;
  public static final java.lang.String WAP_PUSH_DELIVER_ACTION;
  public static final java.lang.String WAP_PUSH_RECEIVED_ACTION;
}
public final class android.provider.Telephony$Sms$Outbox
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Telephony$TextBasedSmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public final class android.provider.Telephony$Sms$Sent
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.Telephony$TextBasedSmsColumns
{
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DEFAULT_SORT_ORDER;
}
public interface android.provider.Telephony$TextBasedSmsColumns
{
  public static final int MESSAGE_TYPE_ALL;
  public static final int MESSAGE_TYPE_DRAFT;
  public static final int MESSAGE_TYPE_FAILED;
  public static final int MESSAGE_TYPE_INBOX;
  public static final int MESSAGE_TYPE_OUTBOX;
  public static final int MESSAGE_TYPE_QUEUED;
  public static final int MESSAGE_TYPE_SENT;
  public static final int STATUS_COMPLETE;
  public static final int STATUS_FAILED;
  public static final int STATUS_NONE;
  public static final int STATUS_PENDING;
  public static final java.lang.String ADDRESS;
  public static final java.lang.String BODY;
  public static final java.lang.String CREATOR;
  public static final java.lang.String DATE;
  public static final java.lang.String DATE_SENT;
  public static final java.lang.String ERROR_CODE;
  public static final java.lang.String LOCKED;
  public static final java.lang.String PERSON;
  public static final java.lang.String PROTOCOL;
  public static final java.lang.String READ;
  public static final java.lang.String REPLY_PATH_PRESENT;
  public static final java.lang.String SEEN;
  public static final java.lang.String SERVICE_CENTER;
  public static final java.lang.String STATUS;
  public static final java.lang.String SUBJECT;
  public static final java.lang.String SUBSCRIPTION_ID;
  public static final java.lang.String THREAD_ID;
  public static final java.lang.String TYPE;
}
public final class android.provider.Telephony$Threads
  extends java.lang.Object
  implements android.provider.Telephony$ThreadsColumns
{
  public static long getOrCreateThreadId(android.content.Context, java.lang.String);
  public static long getOrCreateThreadId(android.content.Context, java.util.Set);
  public static final int BROADCAST_THREAD;
  public static final int COMMON_THREAD;
  public static final android.net.Uri CONTENT_URI;
  public static final android.net.Uri OBSOLETE_THREADS_URI;
}
public interface android.provider.Telephony$ThreadsColumns
  extends android.provider.BaseColumns
{
  public static final java.lang.String ARCHIVED;
  public static final java.lang.String DATE;
  public static final java.lang.String ERROR;
  public static final java.lang.String HAS_ATTACHMENT;
  public static final java.lang.String MESSAGE_COUNT;
  public static final java.lang.String READ;
  public static final java.lang.String RECIPIENT_IDS;
  public static final java.lang.String SNIPPET;
  public static final java.lang.String SNIPPET_CHARSET;
  public static final java.lang.String TYPE;
}
public class android.provider.UserDictionary
  extends java.lang.Object
{
  public void <init>();
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String AUTHORITY;
}
public class android.provider.UserDictionary$Words
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static void addWord(android.content.Context, java.lang.String, int, int);
  public static void addWord(android.content.Context, java.lang.String, int, java.lang.String, java.util.Locale);
  public void <init>();
  public static final int LOCALE_TYPE_ALL;
  public static final int LOCALE_TYPE_CURRENT;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String APP_ID;
  public static final java.lang.String CONTENT_ITEM_TYPE;
  public static final java.lang.String CONTENT_TYPE;
  public static final java.lang.String DEFAULT_SORT_ORDER;
  public static final java.lang.String FREQUENCY;
  public static final java.lang.String LOCALE;
  public static final java.lang.String SHORTCUT;
  public static final java.lang.String WORD;
  public static final java.lang.String _ID;
}
public class android.provider.VoicemailContract
  extends java.lang.Object
{
  public static final java.lang.String ACTION_FETCH_VOICEMAIL;
  public static final java.lang.String ACTION_NEW_VOICEMAIL;
  public static final java.lang.String ACTION_SYNC_VOICEMAIL;
  public static final java.lang.String AUTHORITY;
  public static final java.lang.String EXTRA_SELF_CHANGE;
  public static final java.lang.String PARAM_KEY_SOURCE_PACKAGE;
}
public final class android.provider.VoicemailContract$Status
  extends java.lang.Object
  implements android.provider.BaseColumns
{
  public static android.net.Uri buildSourceUri(java.lang.String);
  public static final int CONFIGURATION_STATE_CAN_BE_CONFIGURED;
  public static final int CONFIGURATION_STATE_NOT_CONFIGURED;
  public static final int CONFIGURATION_STATE_OK;
  public static final int DATA_CHANNEL_STATE_BAD_CONFIGURATION;
  public static final int DATA_CHANNEL_STATE_COMMUNICATION_ERROR;
  public static final int DATA_CHANNEL_STATE_NO_CONNECTION;
  public static final int DATA_CHANNEL_STATE_NO_CONNECTION_CELLULAR_REQUIRED;
  public static final int DATA_CHANNEL_STATE_OK;
  public static final int DATA_CHANNEL_STATE_SERVER_CONNECTION_ERROR;
  public static final int DATA_CHANNEL_STATE_SERVER_ERROR;
  public static final int NOTIFICATION_CHANNEL_STATE_MESSAGE_WAITING;
  public static final int NOTIFICATION_CHANNEL_STATE_NO_CONNECTION;
  public static final int NOTIFICATION_CHANNEL_STATE_OK;
  public static final int QUOTA_UNAVAILABLE;
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String CONFIGURATION_STATE;
  public static final java.lang.String DATA_CHANNEL_STATE;
  public static final java.lang.String DIR_TYPE;
  public static final java.lang.String ITEM_TYPE;
  public static final java.lang.String NOTIFICATION_CHANNEL_STATE;
  public static final java.lang.String PHONE_ACCOUNT_COMPONENT_NAME;
  public static final java.lang.String PHONE_ACCOUNT_ID;
  public static final java.lang.String QUOTA_OCCUPIED;
  public static final java.lang.String QUOTA_TOTAL;
  public static final java.lang.String SETTINGS_URI;
  public static final java.lang.String SOURCE_PACKAGE;
  public static final java.lang.String VOICEMAIL_ACCESS_URI;
}
public final class android.provider.VoicemailContract$Voicemails
  extends java.lang.Object
  implements android.provider.BaseColumns, android.provider.OpenableColumns
{
  public static android.net.Uri buildSourceUri(java.lang.String);
  public static final android.net.Uri CONTENT_URI;
  public static final java.lang.String DATE;
  public static final java.lang.String DELETED;
  public static final java.lang.String DIRTY;
  public static final java.lang.String DIR_TYPE;
  public static final java.lang.String DURATION;
  public static final java.lang.String HAS_CONTENT;
  public static final java.lang.String IS_READ;
  public static final java.lang.String ITEM_TYPE;
  public static final java.lang.String LAST_MODIFIED;
  public static final java.lang.String MIME_TYPE;
  public static final java.lang.String NUMBER;
  public static final java.lang.String PHONE_ACCOUNT_COMPONENT_NAME;
  public static final java.lang.String PHONE_ACCOUNT_ID;
  public static final java.lang.String SOURCE_DATA;
  public static final java.lang.String SOURCE_PACKAGE;
  public static final java.lang.String TRANSCRIPTION;
}
public class android.renderscript.Allocation
  extends android.renderscript.BaseObj
{
  public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap);
  public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap);
  public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap);
  public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int);
  public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createFromString(android.renderscript.RenderScript, java.lang.String, int);
  public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int);
  public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int, int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, android.renderscript.Allocation$MipmapControl, int);
  public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, int);
  public static android.renderscript.Allocation[] createAllocations(android.renderscript.RenderScript, android.renderscript.Type, int, int);
  public int getBytesSize();
  public int getUsage();
  public long getStride();
  public long getTimeStamp();
  public void copy1DRangeFrom(int, int, android.renderscript.Allocation, int);
  public void copy1DRangeFrom(int, int, byte[]);
  public void copy1DRangeFrom(int, int, float[]);
  public void copy1DRangeFrom(int, int, int[]);
  public void copy1DRangeFrom(int, int, java.lang.Object);
  public void copy1DRangeFrom(int, int, short[]);
  public void copy1DRangeFromUnchecked(int, int, byte[]);
  public void copy1DRangeFromUnchecked(int, int, float[]);
  public void copy1DRangeFromUnchecked(int, int, int[]);
  public void copy1DRangeFromUnchecked(int, int, java.lang.Object);
  public void copy1DRangeFromUnchecked(int, int, short[]);
  public void copy1DRangeTo(int, int, byte[]);
  public void copy1DRangeTo(int, int, float[]);
  public void copy1DRangeTo(int, int, int[]);
  public void copy1DRangeTo(int, int, java.lang.Object);
  public void copy1DRangeTo(int, int, short[]);
  public void copy1DRangeToUnchecked(int, int, byte[]);
  public void copy1DRangeToUnchecked(int, int, float[]);
  public void copy1DRangeToUnchecked(int, int, int[]);
  public void copy1DRangeToUnchecked(int, int, java.lang.Object);
  public void copy1DRangeToUnchecked(int, int, short[]);
  public void copy2DRangeFrom(int, int, android.graphics.Bitmap);
  public void copy2DRangeFrom(int, int, int, int, android.renderscript.Allocation, int, int);
  public void copy2DRangeFrom(int, int, int, int, byte[]);
  public void copy2DRangeFrom(int, int, int, int, float[]);
  public void copy2DRangeFrom(int, int, int, int, int[]);
  public void copy2DRangeFrom(int, int, int, int, java.lang.Object);
  public void copy2DRangeFrom(int, int, int, int, short[]);
  public void copy2DRangeTo(int, int, int, int, byte[]);
  public void copy2DRangeTo(int, int, int, int, float[]);
  public void copy2DRangeTo(int, int, int, int, int[]);
  public void copy2DRangeTo(int, int, int, int, java.lang.Object);
  public void copy2DRangeTo(int, int, int, int, short[]);
  public void copy3DRangeFrom(int, int, int, int, int, int, android.renderscript.Allocation, int, int, int);
  public void copy3DRangeFrom(int, int, int, int, int, int, java.lang.Object);
  public void copy3DRangeTo(int, int, int, int, int, int, java.lang.Object);
  public void copyFrom(android.graphics.Bitmap);
  public void copyFrom(android.renderscript.Allocation);
  public void copyFrom(android.renderscript.BaseObj[]);
  public void copyFrom(byte[]);
  public void copyFrom(float[]);
  public void copyFrom(int[]);
  public void copyFrom(java.lang.Object);
  public void copyFrom(short[]);
  public void copyFromUnchecked(byte[]);
  public void copyFromUnchecked(float[]);
  public void copyFromUnchecked(int[]);
  public void copyFromUnchecked(java.lang.Object);
  public void copyFromUnchecked(short[]);
  public void copyTo(android.graphics.Bitmap);
  public void copyTo(byte[]);
  public void copyTo(float[]);
  public void copyTo(int[]);
  public void copyTo(java.lang.Object);
  public void copyTo(short[]);
  public void destroy();
  public void generateMipmaps();
  public void ioReceive();
  public void ioSend();
  public void resize(int);
  public void setAutoPadding(boolean);
  public void setFromFieldPacker(int, android.renderscript.FieldPacker);
  public void setFromFieldPacker(int, int, android.renderscript.FieldPacker);
  public void setFromFieldPacker(int, int, int, int, android.renderscript.FieldPacker);
  public void setOnBufferAvailableListener(android.renderscript.Allocation$OnBufferAvailableListener);
  public void setSurface(android.view.Surface);
  public void syncAll(int);
  public android.renderscript.Element getElement();
  public android.renderscript.Type getType();
  public android.view.Surface getSurface();
  public java.nio.ByteBuffer getByteBuffer();
  protected void finalize()  throws java.lang.Throwable;
  public static final int USAGE_GRAPHICS_CONSTANTS;
  public static final int USAGE_GRAPHICS_RENDER_TARGET;
  public static final int USAGE_GRAPHICS_TEXTURE;
  public static final int USAGE_GRAPHICS_VERTEX;
  public static final int USAGE_IO_INPUT;
  public static final int USAGE_IO_OUTPUT;
  public static final int USAGE_SCRIPT;
  public static final int USAGE_SHARED;
}
public final class android.renderscript.Allocation$MipmapControl
  extends java.lang.Enum
{
  public static android.renderscript.Allocation$MipmapControl valueOf(java.lang.String);
  public static android.renderscript.Allocation$MipmapControl[] values();
  public static final android.renderscript.Allocation$MipmapControl MIPMAP_FULL;
  public static final android.renderscript.Allocation$MipmapControl MIPMAP_NONE;
  public static final android.renderscript.Allocation$MipmapControl MIPMAP_ON_SYNC_TO_TEXTURE;
}
public interface android.renderscript.Allocation$OnBufferAvailableListener
{
  public abstract void onBufferAvailable(android.renderscript.Allocation);
}
public class android.renderscript.AllocationAdapter
  extends android.renderscript.Allocation
{
  public static android.renderscript.AllocationAdapter create1D(android.renderscript.RenderScript, android.renderscript.Allocation);
  public static android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript, android.renderscript.Allocation);
  public static android.renderscript.AllocationAdapter createTyped(android.renderscript.RenderScript, android.renderscript.Allocation, android.renderscript.Type);
  public void resize(int);
  public void setFace(android.renderscript.Type$CubemapFace);
  public void setLOD(int);
  public void setX(int);
  public void setY(int);
  public void setZ(int);
}
public class android.renderscript.BaseObj
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void destroy();
  public void setName(java.lang.String);
  public java.lang.String getName();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.renderscript.Byte2
  extends java.lang.Object
{
  public void <init>();
  public void <init>(byte, byte);
  public byte x;
  public byte y;
}
public class android.renderscript.Byte3
  extends java.lang.Object
{
  public void <init>();
  public void <init>(byte, byte, byte);
  public byte x;
  public byte y;
  public byte z;
}
public class android.renderscript.Byte4
  extends java.lang.Object
{
  public void <init>();
  public void <init>(byte, byte, byte, byte);
  public byte w;
  public byte x;
  public byte y;
  public byte z;
}
public class android.renderscript.Double2
  extends java.lang.Object
{
  public void <init>();
  public void <init>(double, double);
  public double x;
  public double y;
}
public class android.renderscript.Double3
  extends java.lang.Object
{
  public void <init>();
  public void <init>(double, double, double);
  public double x;
  public double y;
  public double z;
}
public class android.renderscript.Double4
  extends java.lang.Object
{
  public void <init>();
  public void <init>(double, double, double, double);
  public double w;
  public double x;
  public double y;
  public double z;
}
public class android.renderscript.Element
  extends android.renderscript.BaseObj
{
  public static android.renderscript.Element ALLOCATION(android.renderscript.RenderScript);
  public static android.renderscript.Element A_8(android.renderscript.RenderScript);
  public static android.renderscript.Element BOOLEAN(android.renderscript.RenderScript);
  public static android.renderscript.Element ELEMENT(android.renderscript.RenderScript);
  public static android.renderscript.Element F16(android.renderscript.RenderScript);
  public static android.renderscript.Element F16_2(android.renderscript.RenderScript);
  public static android.renderscript.Element F16_3(android.renderscript.RenderScript);
  public static android.renderscript.Element F16_4(android.renderscript.RenderScript);
  public static android.renderscript.Element F32(android.renderscript.RenderScript);
  public static android.renderscript.Element F32_2(android.renderscript.RenderScript);
  public static android.renderscript.Element F32_3(android.renderscript.RenderScript);
  public static android.renderscript.Element F32_4(android.renderscript.RenderScript);
  public static android.renderscript.Element F64(android.renderscript.RenderScript);
  public static android.renderscript.Element F64_2(android.renderscript.RenderScript);
  public static android.renderscript.Element F64_3(android.renderscript.RenderScript);
  public static android.renderscript.Element F64_4(android.renderscript.RenderScript);
  public static android.renderscript.Element FONT(android.renderscript.RenderScript);
  public static android.renderscript.Element I16(android.renderscript.RenderScript);
  public static android.renderscript.Element I16_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I16_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I16_4(android.renderscript.RenderScript);
  public static android.renderscript.Element I32(android.renderscript.RenderScript);
  public static android.renderscript.Element I32_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I32_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I32_4(android.renderscript.RenderScript);
  public static android.renderscript.Element I64(android.renderscript.RenderScript);
  public static android.renderscript.Element I64_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I64_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I64_4(android.renderscript.RenderScript);
  public static android.renderscript.Element I8(android.renderscript.RenderScript);
  public static android.renderscript.Element I8_2(android.renderscript.RenderScript);
  public static android.renderscript.Element I8_3(android.renderscript.RenderScript);
  public static android.renderscript.Element I8_4(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX4X4(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX_2X2(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX_3X3(android.renderscript.RenderScript);
  public static android.renderscript.Element MATRIX_4X4(android.renderscript.RenderScript);
  public static android.renderscript.Element MESH(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_FRAGMENT(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_RASTER(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_STORE(android.renderscript.RenderScript);
  public static android.renderscript.Element PROGRAM_VERTEX(android.renderscript.RenderScript);
  public static android.renderscript.Element RGBA_4444(android.renderscript.RenderScript);
  public static android.renderscript.Element RGBA_5551(android.renderscript.RenderScript);
  public static android.renderscript.Element RGBA_8888(android.renderscript.RenderScript);
  public static android.renderscript.Element RGB_565(android.renderscript.RenderScript);
  public static android.renderscript.Element RGB_888(android.renderscript.RenderScript);
  public static android.renderscript.Element SAMPLER(android.renderscript.RenderScript);
  public static android.renderscript.Element SCRIPT(android.renderscript.RenderScript);
  public static android.renderscript.Element TYPE(android.renderscript.RenderScript);
  public static android.renderscript.Element U16(android.renderscript.RenderScript);
  public static android.renderscript.Element U16_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U16_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U16_4(android.renderscript.RenderScript);
  public static android.renderscript.Element U32(android.renderscript.RenderScript);
  public static android.renderscript.Element U32_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U32_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U32_4(android.renderscript.RenderScript);
  public static android.renderscript.Element U64(android.renderscript.RenderScript);
  public static android.renderscript.Element U64_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U64_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U64_4(android.renderscript.RenderScript);
  public static android.renderscript.Element U8(android.renderscript.RenderScript);
  public static android.renderscript.Element U8_2(android.renderscript.RenderScript);
  public static android.renderscript.Element U8_3(android.renderscript.RenderScript);
  public static android.renderscript.Element U8_4(android.renderscript.RenderScript);
  public static android.renderscript.Element YUV(android.renderscript.RenderScript);
  public static android.renderscript.Element createPixel(android.renderscript.RenderScript, android.renderscript.Element$DataType, android.renderscript.Element$DataKind);
  public static android.renderscript.Element createVector(android.renderscript.RenderScript, android.renderscript.Element$DataType, int);
  public boolean isCompatible(android.renderscript.Element);
  public boolean isComplex();
  public int getBytesSize();
  public int getSubElementArraySize(int);
  public int getSubElementCount();
  public int getSubElementOffsetBytes(int);
  public int getVectorSize();
  public android.renderscript.Element getSubElement(int);
  public android.renderscript.Element$DataKind getDataKind();
  public android.renderscript.Element$DataType getDataType();
  public java.lang.String getSubElementName(int);
}
public class android.renderscript.Element$Builder
  extends java.lang.Object
{
  public void <init>(android.renderscript.RenderScript);
  public android.renderscript.Element create();
  public android.renderscript.Element$Builder add(android.renderscript.Element, java.lang.String);
  public android.renderscript.Element$Builder add(android.renderscript.Element, java.lang.String, int);
}
public final class android.renderscript.Element$DataKind
  extends java.lang.Enum
{
  public static android.renderscript.Element$DataKind valueOf(java.lang.String);
  public static android.renderscript.Element$DataKind[] values();
  public static final android.renderscript.Element$DataKind PIXEL_A;
  public static final android.renderscript.Element$DataKind PIXEL_DEPTH;
  public static final android.renderscript.Element$DataKind PIXEL_L;
  public static final android.renderscript.Element$DataKind PIXEL_LA;
  public static final android.renderscript.Element$DataKind PIXEL_RGB;
  public static final android.renderscript.Element$DataKind PIXEL_RGBA;
  public static final android.renderscript.Element$DataKind PIXEL_YUV;
  public static final android.renderscript.Element$DataKind USER;
}
public final class android.renderscript.Element$DataType
  extends java.lang.Enum
{
  public static android.renderscript.Element$DataType valueOf(java.lang.String);
  public static android.renderscript.Element$DataType[] values();
  public static final android.renderscript.Element$DataType BOOLEAN;
  public static final android.renderscript.Element$DataType FLOAT_16;
  public static final android.renderscript.Element$DataType FLOAT_32;
  public static final android.renderscript.Element$DataType FLOAT_64;
  public static final android.renderscript.Element$DataType MATRIX_2X2;
  public static final android.renderscript.Element$DataType MATRIX_3X3;
  public static final android.renderscript.Element$DataType MATRIX_4X4;
  public static final android.renderscript.Element$DataType NONE;
  public static final android.renderscript.Element$DataType RS_ALLOCATION;
  public static final android.renderscript.Element$DataType RS_ELEMENT;
  public static final android.renderscript.Element$DataType RS_FONT;
  public static final android.renderscript.Element$DataType RS_MESH;
  public static final android.renderscript.Element$DataType RS_PROGRAM_FRAGMENT;
  public static final android.renderscript.Element$DataType RS_PROGRAM_RASTER;
  public static final android.renderscript.Element$DataType RS_PROGRAM_STORE;
  public static final android.renderscript.Element$DataType RS_PROGRAM_VERTEX;
  public static final android.renderscript.Element$DataType RS_SAMPLER;
  public static final android.renderscript.Element$DataType RS_SCRIPT;
  public static final android.renderscript.Element$DataType RS_TYPE;
  public static final android.renderscript.Element$DataType SIGNED_16;
  public static final android.renderscript.Element$DataType SIGNED_32;
  public static final android.renderscript.Element$DataType SIGNED_64;
  public static final android.renderscript.Element$DataType SIGNED_8;
  public static final android.renderscript.Element$DataType UNSIGNED_16;
  public static final android.renderscript.Element$DataType UNSIGNED_32;
  public static final android.renderscript.Element$DataType UNSIGNED_4_4_4_4;
  public static final android.renderscript.Element$DataType UNSIGNED_5_5_5_1;
  public static final android.renderscript.Element$DataType UNSIGNED_5_6_5;
  public static final android.renderscript.Element$DataType UNSIGNED_64;
  public static final android.renderscript.Element$DataType UNSIGNED_8;
}
public class android.renderscript.FieldPacker
  extends java.lang.Object
{
  public void <init>(byte[]);
  public void <init>(int);
  public final byte[] getData();
  public boolean subBoolean();
  public byte subI8();
  public double subF64();
  public float subF32();
  public int subI32();
  public long subI64();
  public short subI16();
  public void addBoolean(boolean);
  public void addF32(android.renderscript.Float2);
  public void addF32(android.renderscript.Float3);
  public void addF32(android.renderscript.Float4);
  public void addF32(float);
  public void addF64(android.renderscript.Double2);
  public void addF64(android.renderscript.Double3);
  public void addF64(android.renderscript.Double4);
  public void addF64(double);
  public void addI16(android.renderscript.Short2);
  public void addI16(android.renderscript.Short3);
  public void addI16(android.renderscript.Short4);
  public void addI16(short);
  public void addI32(android.renderscript.Int2);
  public void addI32(android.renderscript.Int3);
  public void addI32(android.renderscript.Int4);
  public void addI32(int);
  public void addI64(android.renderscript.Long2);
  public void addI64(android.renderscript.Long3);
  public void addI64(android.renderscript.Long4);
  public void addI64(long);
  public void addI8(android.renderscript.Byte2);
  public void addI8(android.renderscript.Byte3);
  public void addI8(android.renderscript.Byte4);
  public void addI8(byte);
  public void addMatrix(android.renderscript.Matrix2f);
  public void addMatrix(android.renderscript.Matrix3f);
  public void addMatrix(android.renderscript.Matrix4f);
  public void addObj(android.renderscript.BaseObj);
  public void addU16(android.renderscript.Int2);
  public void addU16(android.renderscript.Int3);
  public void addU16(android.renderscript.Int4);
  public void addU16(int);
  public void addU32(android.renderscript.Long2);
  public void addU32(android.renderscript.Long3);
  public void addU32(android.renderscript.Long4);
  public void addU32(long);
  public void addU64(android.renderscript.Long2);
  public void addU64(android.renderscript.Long3);
  public void addU64(android.renderscript.Long4);
  public void addU64(long);
  public void addU8(android.renderscript.Short2);
  public void addU8(android.renderscript.Short3);
  public void addU8(android.renderscript.Short4);
  public void addU8(short);
  public void align(int);
  public void reset();
  public void reset(int);
  public void skip(int);
  public void subalign(int);
  public android.renderscript.Byte2 subByte2();
  public android.renderscript.Byte3 subByte3();
  public android.renderscript.Byte4 subByte4();
  public android.renderscript.Double2 subDouble2();
  public android.renderscript.Double3 subDouble3();
  public android.renderscript.Double4 subDouble4();
  public android.renderscript.Float2 subFloat2();
  public android.renderscript.Float3 subFloat3();
  public android.renderscript.Float4 subFloat4();
  public android.renderscript.Int2 subInt2();
  public android.renderscript.Int3 subInt3();
  public android.renderscript.Int4 subInt4();
  public android.renderscript.Long2 subLong2();
  public android.renderscript.Long3 subLong3();
  public android.renderscript.Long4 subLong4();
  public android.renderscript.Matrix2f subMatrix2f();
  public android.renderscript.Matrix3f subMatrix3f();
  public android.renderscript.Matrix4f subMatrix4f();
  public android.renderscript.Short2 subShort2();
  public android.renderscript.Short3 subShort3();
  public android.renderscript.Short4 subShort4();
}
public class android.renderscript.Float2
  extends java.lang.Object
{
  public void <init>();
  public void <init>(float, float);
  public float x;
  public float y;
}
public class android.renderscript.Float3
  extends java.lang.Object
{
  public void <init>();
  public void <init>(float, float, float);
  public float x;
  public float y;
  public float z;
}
public class android.renderscript.Float4
  extends java.lang.Object
{
  public void <init>();
  public void <init>(float, float, float, float);
  public float w;
  public float x;
  public float y;
  public float z;
}
public class android.renderscript.Int2
  extends java.lang.Object
{
  public void <init>();
  public void <init>(int, int);
  public int x;
  public int y;
}
public class android.renderscript.Int3
  extends java.lang.Object
{
  public void <init>();
  public void <init>(int, int, int);
  public int x;
  public int y;
  public int z;
}
public class android.renderscript.Int4
  extends java.lang.Object
{
  public void <init>();
  public void <init>(int, int, int, int);
  public int w;
  public int x;
  public int y;
  public int z;
}
public class android.renderscript.Long2
  extends java.lang.Object
{
  public void <init>();
  public void <init>(long, long);
  public long x;
  public long y;
}
public class android.renderscript.Long3
  extends java.lang.Object
{
  public void <init>();
  public void <init>(long, long, long);
  public long x;
  public long y;
  public long z;
}
public class android.renderscript.Long4
  extends java.lang.Object
{
  public void <init>();
  public void <init>(long, long, long, long);
  public long w;
  public long x;
  public long y;
  public long z;
}
public class android.renderscript.Matrix2f
  extends java.lang.Object
{
  public void <init>();
  public void <init>(float[]);
  public float get(int, int);
  public void load(android.renderscript.Matrix2f);
  public void loadIdentity();
  public void loadMultiply(android.renderscript.Matrix2f, android.renderscript.Matrix2f);
  public void loadRotate(float);
  public void loadScale(float, float);
  public void multiply(android.renderscript.Matrix2f);
  public void rotate(float);
  public void scale(float, float);
  public void set(int, int, float);
  public void transpose();
  public float[] getArray();
}
public class android.renderscript.Matrix3f
  extends java.lang.Object
{
  public void <init>();
  public void <init>(float[]);
  public float get(int, int);
  public void load(android.renderscript.Matrix3f);
  public void loadIdentity();
  public void loadMultiply(android.renderscript.Matrix3f, android.renderscript.Matrix3f);
  public void loadRotate(float);
  public void loadRotate(float, float, float, float);
  public void loadScale(float, float);
  public void loadScale(float, float, float);
  public void loadTranslate(float, float);
  public void multiply(android.renderscript.Matrix3f);
  public void rotate(float);
  public void rotate(float, float, float, float);
  public void scale(float, float);
  public void scale(float, float, float);
  public void set(int, int, float);
  public void translate(float, float);
  public void transpose();
  public float[] getArray();
}
public class android.renderscript.Matrix4f
  extends java.lang.Object
{
  public void <init>();
  public void <init>(float[]);
  public boolean inverse();
  public boolean inverseTranspose();
  public float get(int, int);
  public void load(android.renderscript.Matrix4f);
  public void loadFrustum(float, float, float, float, float, float);
  public void loadIdentity();
  public void loadMultiply(android.renderscript.Matrix4f, android.renderscript.Matrix4f);
  public void loadOrtho(float, float, float, float, float, float);
  public void loadOrthoWindow(int, int);
  public void loadPerspective(float, float, float, float);
  public void loadProjectionNormalized(int, int);
  public void loadRotate(float, float, float, float);
  public void loadScale(float, float, float);
  public void loadTranslate(float, float, float);
  public void multiply(android.renderscript.Matrix4f);
  public void rotate(float, float, float, float);
  public void scale(float, float, float);
  public void set(int, int, float);
  public void translate(float, float, float);
  public void transpose();
  public float[] getArray();
}
public class android.renderscript.RSDriverException
  extends android.renderscript.RSRuntimeException
{
  public void <init>(java.lang.String);
}
public class android.renderscript.RSIllegalArgumentException
  extends android.renderscript.RSRuntimeException
{
  public void <init>(java.lang.String);
}
public class android.renderscript.RSInvalidStateException
  extends android.renderscript.RSRuntimeException
{
  public void <init>(java.lang.String);
}
public class android.renderscript.RSRuntimeException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.String);
}
public class android.renderscript.RenderScript
  extends java.lang.Object
{
  public static long getMinorVersion();
  public static void releaseAllContexts();
  public static android.renderscript.RenderScript create(android.content.Context);
  public static android.renderscript.RenderScript create(android.content.Context, android.renderscript.RenderScript$ContextType);
  public static android.renderscript.RenderScript create(android.content.Context, android.renderscript.RenderScript$ContextType, int);
  public static android.renderscript.RenderScript createMultiContext(android.content.Context, android.renderscript.RenderScript$ContextType, int, int);
  public final android.content.Context getApplicationContext();
  public void contextDump();
  public void destroy();
  public void finish();
  public void sendMessage(int, int[]);
  public void setErrorHandler(android.renderscript.RenderScript$RSErrorHandler);
  public void setMessageHandler(android.renderscript.RenderScript$RSMessageHandler);
  public void setPriority(android.renderscript.RenderScript$Priority);
  public android.renderscript.RenderScript$RSErrorHandler getErrorHandler();
  public android.renderscript.RenderScript$RSMessageHandler getMessageHandler();
  protected void finalize()  throws java.lang.Throwable;
  public static final int CREATE_FLAG_LOW_LATENCY;
  public static final int CREATE_FLAG_LOW_POWER;
  public static final int CREATE_FLAG_NONE;
}
public final class android.renderscript.RenderScript$ContextType
  extends java.lang.Enum
{
  public static android.renderscript.RenderScript$ContextType valueOf(java.lang.String);
  public static android.renderscript.RenderScript$ContextType[] values();
  public static final android.renderscript.RenderScript$ContextType DEBUG;
  public static final android.renderscript.RenderScript$ContextType NORMAL;
  public static final android.renderscript.RenderScript$ContextType PROFILE;
}
public final class android.renderscript.RenderScript$Priority
  extends java.lang.Enum
{
  public static android.renderscript.RenderScript$Priority valueOf(java.lang.String);
  public static android.renderscript.RenderScript$Priority[] values();
  public static final android.renderscript.RenderScript$Priority LOW;
  public static final android.renderscript.RenderScript$Priority NORMAL;
}
public class android.renderscript.RenderScript$RSErrorHandler
  extends java.lang.Object
  implements java.lang.Runnable
{
  public void <init>();
  public void run();
  protected int mErrorNum;
  protected java.lang.String mErrorMessage;
}
public class android.renderscript.RenderScript$RSMessageHandler
  extends java.lang.Object
  implements java.lang.Runnable
{
  public void <init>();
  public void run();
  protected int mID;
  protected int mLength;
  protected int[] mData;
}
public class android.renderscript.Sampler
  extends android.renderscript.BaseObj
{
  public static android.renderscript.Sampler CLAMP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler CLAMP_NEAREST(android.renderscript.RenderScript);
  public static android.renderscript.Sampler MIRRORED_REPEAT_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler MIRRORED_REPEAT_NEAREST(android.renderscript.RenderScript);
  public static android.renderscript.Sampler WRAP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript);
  public static android.renderscript.Sampler WRAP_NEAREST(android.renderscript.RenderScript);
  public float getAnisotropy();
  public android.renderscript.Sampler$Value getMagnification();
  public android.renderscript.Sampler$Value getMinification();
  public android.renderscript.Sampler$Value getWrapS();
  public android.renderscript.Sampler$Value getWrapT();
}
public class android.renderscript.Sampler$Builder
  extends java.lang.Object
{
  public void <init>(android.renderscript.RenderScript);
  public void setAnisotropy(float);
  public void setMagnification(android.renderscript.Sampler$Value);
  public void setMinification(android.renderscript.Sampler$Value);
  public void setWrapS(android.renderscript.Sampler$Value);
  public void setWrapT(android.renderscript.Sampler$Value);
  public android.renderscript.Sampler create();
}
public final class android.renderscript.Sampler$Value
  extends java.lang.Enum
{
  public static android.renderscript.Sampler$Value valueOf(java.lang.String);
  public static android.renderscript.Sampler$Value[] values();
  public static final android.renderscript.Sampler$Value CLAMP;
  public static final android.renderscript.Sampler$Value LINEAR;
  public static final android.renderscript.Sampler$Value LINEAR_MIP_LINEAR;
  public static final android.renderscript.Sampler$Value LINEAR_MIP_NEAREST;
  public static final android.renderscript.Sampler$Value MIRRORED_REPEAT;
  public static final android.renderscript.Sampler$Value NEAREST;
  public static final android.renderscript.Sampler$Value WRAP;
}
public class android.renderscript.Script
  extends android.renderscript.BaseObj
{
  public boolean getVarB(int);
  public double getVarD(int);
  public float getVarF(int);
  public int getVarI(int);
  public long getVarJ(int);
  public void bindAllocation(android.renderscript.Allocation, int);
  public void getVarV(int, android.renderscript.FieldPacker);
  public void setTimeZone(java.lang.String);
  public void setVar(int, android.renderscript.BaseObj);
  public void setVar(int, android.renderscript.FieldPacker);
  public void setVar(int, android.renderscript.FieldPacker, android.renderscript.Element, int[]);
  public void setVar(int, boolean);
  public void setVar(int, double);
  public void setVar(int, float);
  public void setVar(int, int);
  public void setVar(int, long);
  protected void forEach(int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.FieldPacker);
  protected void forEach(int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.FieldPacker, android.renderscript.Script$LaunchOptions);
  protected void forEach(int, android.renderscript.Allocation[], android.renderscript.Allocation, android.renderscript.FieldPacker);
  protected void forEach(int, android.renderscript.Allocation[], android.renderscript.Allocation, android.renderscript.FieldPacker, android.renderscript.Script$LaunchOptions);
  protected void invoke(int);
  protected void invoke(int, android.renderscript.FieldPacker);
  protected void reduce(int, android.renderscript.Allocation[], android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  protected android.renderscript.Script$FieldID createFieldID(int, android.renderscript.Element);
  protected android.renderscript.Script$InvokeID createInvokeID(int);
  protected android.renderscript.Script$KernelID createKernelID(int, int, android.renderscript.Element, android.renderscript.Element);
}
public class android.renderscript.Script$Builder
  extends java.lang.Object
{
}
public class android.renderscript.Script$FieldBase
  extends java.lang.Object
{
  public void updateAllocation();
  public android.renderscript.Allocation getAllocation();
  public android.renderscript.Element getElement();
  public android.renderscript.Type getType();
  protected void <init>();
  protected void init(android.renderscript.RenderScript, int);
  protected void init(android.renderscript.RenderScript, int, int);
  protected android.renderscript.Allocation mAllocation;
  protected android.renderscript.Element mElement;
}
public final class android.renderscript.Script$FieldID
  extends android.renderscript.BaseObj
{
}
public final class android.renderscript.Script$InvokeID
  extends android.renderscript.BaseObj
{
}
public final class android.renderscript.Script$KernelID
  extends android.renderscript.BaseObj
{
}
public final class android.renderscript.Script$LaunchOptions
  extends java.lang.Object
{
  public void <init>();
  public int getXEnd();
  public int getXStart();
  public int getYEnd();
  public int getYStart();
  public int getZEnd();
  public int getZStart();
  public android.renderscript.Script$LaunchOptions setX(int, int);
  public android.renderscript.Script$LaunchOptions setY(int, int);
  public android.renderscript.Script$LaunchOptions setZ(int, int);
}
public class android.renderscript.ScriptC
  extends android.renderscript.Script
{
  protected void <init>(android.renderscript.RenderScript, android.content.res.Resources, int);
  protected void <init>(android.renderscript.RenderScript, java.lang.String, byte[], byte[]);
  protected void <init>(int, android.renderscript.RenderScript);
  protected void <init>(long, android.renderscript.RenderScript);
}
public final class android.renderscript.ScriptGroup
  extends android.renderscript.BaseObj
{
  public void destroy();
  public void execute();
  public void setInput(android.renderscript.Script$KernelID, android.renderscript.Allocation);
  public void setOutput(android.renderscript.Script$KernelID, android.renderscript.Allocation);
  public java.lang.Object[] execute(java.lang.Object[]);
}
public final class android.renderscript.ScriptGroup$Binding
  extends java.lang.Object
{
  public void <init>(android.renderscript.Script$FieldID, java.lang.Object);
}
public final class android.renderscript.ScriptGroup$Builder
  extends java.lang.Object
{
  public void <init>(android.renderscript.RenderScript);
  public android.renderscript.ScriptGroup create();
  public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$FieldID);
  public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$KernelID);
  public android.renderscript.ScriptGroup$Builder addKernel(android.renderscript.Script$KernelID);
}
public final class android.renderscript.ScriptGroup$Builder2
  extends java.lang.Object
{
  public void <init>(android.renderscript.RenderScript);
  public android.renderscript.ScriptGroup create(java.lang.String, android.renderscript.ScriptGroup$Future[]);
  public android.renderscript.ScriptGroup$Closure addInvoke(android.renderscript.Script$InvokeID, java.lang.Object[]);
  public android.renderscript.ScriptGroup$Closure addKernel(android.renderscript.Script$KernelID, android.renderscript.Type, java.lang.Object[]);
  public android.renderscript.ScriptGroup$Input addInput();
}
public final class android.renderscript.ScriptGroup$Closure
  extends android.renderscript.BaseObj
{
  public void destroy();
  public android.renderscript.ScriptGroup$Future getGlobal(android.renderscript.Script$FieldID);
  public android.renderscript.ScriptGroup$Future getReturn();
  protected void finalize()  throws java.lang.Throwable;
}
public final class android.renderscript.ScriptGroup$Future
  extends java.lang.Object
{
}
public final class android.renderscript.ScriptGroup$Input
  extends java.lang.Object
{
}
public abstract class android.renderscript.ScriptIntrinsic
  extends android.renderscript.Script
{
}
public final class android.renderscript.ScriptIntrinsic3DLUT
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsic3DLUT create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEach(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setLUT(android.renderscript.Allocation);
  public android.renderscript.Script$KernelID getKernelID();
}
public final class android.renderscript.ScriptIntrinsicBLAS
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicBLAS create(android.renderscript.RenderScript);
  public void BNNM(android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation, int, int);
  public void CGBMV(int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int);
  public void CGEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation);
  public void CGEMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int);
  public void CGERC(android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void CGERU(android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void CHBMV(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int);
  public void CHEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation);
  public void CHEMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int);
  public void CHER(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void CHER2(int, android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void CHER2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation);
  public void CHERK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation);
  public void CHPMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int);
  public void CHPR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void CHPR2(int, android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void CSYMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation);
  public void CSYR2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation);
  public void CSYRK(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation);
  public void CTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void CTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void CTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void CTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void CTRMM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation);
  public void CTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void CTRSM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation);
  public void CTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void DGBMV(int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int);
  public void DGEMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation);
  public void DGEMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int);
  public void DGER(double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void DSBMV(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int);
  public void DSPMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int);
  public void DSPR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void DSPR2(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void DSYMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation);
  public void DSYMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int);
  public void DSYR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void DSYR2(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void DSYR2K(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation);
  public void DSYRK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation);
  public void DTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void DTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void DTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void DTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void DTRMM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation);
  public void DTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void DTRSM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation);
  public void DTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void SGBMV(int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int);
  public void SGEMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation);
  public void SGEMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int);
  public void SGER(float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void SSBMV(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int);
  public void SSPMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int);
  public void SSPR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void SSPR2(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void SSYMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation);
  public void SSYMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int);
  public void SSYR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void SSYR2(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void SSYR2K(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation);
  public void SSYRK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation);
  public void STBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void STBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void STPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void STPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void STRMM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation);
  public void STRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void STRSM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation);
  public void STRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void ZGBMV(int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int);
  public void ZGEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation);
  public void ZGEMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int);
  public void ZGERC(android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void ZGERU(android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void ZHBMV(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int);
  public void ZHEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation);
  public void ZHEMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int);
  public void ZHER(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void ZHER2(int, android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void ZHER2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation);
  public void ZHERK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation);
  public void ZHPMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int);
  public void ZHPR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void ZHPR2(int, android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation);
  public void ZSYMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation);
  public void ZSYR2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation);
  public void ZSYRK(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation);
  public void ZTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void ZTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void ZTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void ZTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void ZTRMM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation);
  public void ZTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public void ZTRSM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation);
  public void ZTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int);
  public static final int CONJ_TRANSPOSE;
  public static final int LEFT;
  public static final int LOWER;
  public static final int NON_UNIT;
  public static final int NO_TRANSPOSE;
  public static final int RIGHT;
  public static final int TRANSPOSE;
  public static final int UNIT;
  public static final int UPPER;
}
public class android.renderscript.ScriptIntrinsicBlend
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicBlend create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEachAdd(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachAdd(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachClear(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachClear(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachDst(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachDst(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachDstAtop(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachDstAtop(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachDstIn(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachDstIn(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachDstOut(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachDstOut(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachDstOver(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachDstOver(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachMultiply(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachMultiply(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachSrc(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachSrc(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachSrcAtop(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachSrcAtop(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachSrcIn(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachSrcIn(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachSrcOut(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachSrcOut(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachSrcOver(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachSrcOver(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachSubtract(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachSubtract(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEachXor(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEachXor(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public android.renderscript.Script$KernelID getKernelIDAdd();
  public android.renderscript.Script$KernelID getKernelIDClear();
  public android.renderscript.Script$KernelID getKernelIDDst();
  public android.renderscript.Script$KernelID getKernelIDDstAtop();
  public android.renderscript.Script$KernelID getKernelIDDstIn();
  public android.renderscript.Script$KernelID getKernelIDDstOut();
  public android.renderscript.Script$KernelID getKernelIDDstOver();
  public android.renderscript.Script$KernelID getKernelIDMultiply();
  public android.renderscript.Script$KernelID getKernelIDSrc();
  public android.renderscript.Script$KernelID getKernelIDSrcAtop();
  public android.renderscript.Script$KernelID getKernelIDSrcIn();
  public android.renderscript.Script$KernelID getKernelIDSrcOut();
  public android.renderscript.Script$KernelID getKernelIDSrcOver();
  public android.renderscript.Script$KernelID getKernelIDSubtract();
  public android.renderscript.Script$KernelID getKernelIDXor();
}
public final class android.renderscript.ScriptIntrinsicBlur
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicBlur create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation);
  public void forEach(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setInput(android.renderscript.Allocation);
  public void setRadius(float);
  public android.renderscript.Script$FieldID getFieldID_Input();
  public android.renderscript.Script$KernelID getKernelID();
}
public final class android.renderscript.ScriptIntrinsicColorMatrix
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript);
  public static android.renderscript.ScriptIntrinsicColorMatrix create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEach(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setAdd(android.renderscript.Float4);
  public void setAdd(float, float, float, float);
  public void setColorMatrix(android.renderscript.Matrix3f);
  public void setColorMatrix(android.renderscript.Matrix4f);
  public void setGreyscale();
  public void setRGBtoYUV();
  public void setYUVtoRGB();
  public android.renderscript.Script$KernelID getKernelID();
}
public final class android.renderscript.ScriptIntrinsicConvolve3x3
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicConvolve3x3 create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation);
  public void forEach(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setCoefficients(float[]);
  public void setInput(android.renderscript.Allocation);
  public android.renderscript.Script$FieldID getFieldID_Input();
  public android.renderscript.Script$KernelID getKernelID();
}
public final class android.renderscript.ScriptIntrinsicConvolve5x5
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicConvolve5x5 create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation);
  public void forEach(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setCoefficients(float[]);
  public void setInput(android.renderscript.Allocation);
  public android.renderscript.Script$FieldID getFieldID_Input();
  public android.renderscript.Script$KernelID getKernelID();
}
public final class android.renderscript.ScriptIntrinsicHistogram
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicHistogram create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation);
  public void forEach(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void forEach_Dot(android.renderscript.Allocation);
  public void forEach_Dot(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setDotCoefficients(float, float, float, float);
  public void setOutput(android.renderscript.Allocation);
  public android.renderscript.Script$FieldID getFieldID_Input();
  public android.renderscript.Script$KernelID getKernelID_Separate();
}
public final class android.renderscript.ScriptIntrinsicLUT
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicLUT create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation, android.renderscript.Allocation);
  public void forEach(android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setAlpha(int, int);
  public void setBlue(int, int);
  public void setGreen(int, int);
  public void setRed(int, int);
  public android.renderscript.Script$KernelID getKernelID();
}
public final class android.renderscript.ScriptIntrinsicResize
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicResize create(android.renderscript.RenderScript);
  public void forEach_bicubic(android.renderscript.Allocation);
  public void forEach_bicubic(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions);
  public void setInput(android.renderscript.Allocation);
  public android.renderscript.Script$FieldID getFieldID_Input();
  public android.renderscript.Script$KernelID getKernelID_bicubic();
}
public final class android.renderscript.ScriptIntrinsicYuvToRGB
  extends android.renderscript.ScriptIntrinsic
{
  public static android.renderscript.ScriptIntrinsicYuvToRGB create(android.renderscript.RenderScript, android.renderscript.Element);
  public void forEach(android.renderscript.Allocation);
  public void setInput(android.renderscript.Allocation);
  public android.renderscript.Script$FieldID getFieldID_Input();
  public android.renderscript.Script$KernelID getKernelID();
}
public class android.renderscript.Short2
  extends java.lang.Object
{
  public void <init>();
  public void <init>(short, short);
  public short x;
  public short y;
}
public class android.renderscript.Short3
  extends java.lang.Object
{
  public void <init>();
  public void <init>(short, short, short);
  public short x;
  public short y;
  public short z;
}
public class android.renderscript.Short4
  extends java.lang.Object
{
  public void <init>();
  public void <init>(short, short, short, short);
  public short w;
  public short x;
  public short y;
  public short z;
}
public class android.renderscript.Type
  extends android.renderscript.BaseObj
{
  public static android.renderscript.Type createX(android.renderscript.RenderScript, android.renderscript.Element, int);
  public static android.renderscript.Type createXY(android.renderscript.RenderScript, android.renderscript.Element, int, int);
  public static android.renderscript.Type createXYZ(android.renderscript.RenderScript, android.renderscript.Element, int, int, int);
  public boolean hasFaces();
  public boolean hasMipmaps();
  public int getCount();
  public int getX();
  public int getY();
  public int getYuv();
  public int getZ();
  public android.renderscript.Element getElement();
}
public class android.renderscript.Type$Builder
  extends java.lang.Object
{
  public void <init>(android.renderscript.RenderScript, android.renderscript.Element);
  public android.renderscript.Type create();
  public android.renderscript.Type$Builder setFaces(boolean);
  public android.renderscript.Type$Builder setMipmaps(boolean);
  public android.renderscript.Type$Builder setX(int);
  public android.renderscript.Type$Builder setY(int);
  public android.renderscript.Type$Builder setYuvFormat(int);
  public android.renderscript.Type$Builder setZ(int);
}
public final class android.renderscript.Type$CubemapFace
  extends java.lang.Enum
{
  public static android.renderscript.Type$CubemapFace valueOf(java.lang.String);
  public static android.renderscript.Type$CubemapFace[] values();
  public static final android.renderscript.Type$CubemapFace NEGATIVE_X;
  public static final android.renderscript.Type$CubemapFace NEGATIVE_Y;
  public static final android.renderscript.Type$CubemapFace NEGATIVE_Z;
  public static final android.renderscript.Type$CubemapFace POSITIVE_X;
  public static final android.renderscript.Type$CubemapFace POSITIVE_Y;
  public static final android.renderscript.Type$CubemapFace POSITIVE_Z;
  public static final android.renderscript.Type$CubemapFace POSITVE_X;
  public static final android.renderscript.Type$CubemapFace POSITVE_Y;
  public static final android.renderscript.Type$CubemapFace POSITVE_Z;
}
public class android.sax.Element
  extends java.lang.Object
{
  public void setElementListener(android.sax.ElementListener);
  public void setEndElementListener(android.sax.EndElementListener);
  public void setEndTextElementListener(android.sax.EndTextElementListener);
  public void setStartElementListener(android.sax.StartElementListener);
  public void setTextElementListener(android.sax.TextElementListener);
  public android.sax.Element getChild(java.lang.String);
  public android.sax.Element getChild(java.lang.String, java.lang.String);
  public android.sax.Element requireChild(java.lang.String);
  public android.sax.Element requireChild(java.lang.String, java.lang.String);
  public java.lang.String toString();
}
public interface android.sax.ElementListener
  extends android.sax.StartElementListener, android.sax.EndElementListener
{
}
public interface android.sax.EndElementListener
{
  public abstract void end();
}
public interface android.sax.EndTextElementListener
{
  public abstract void end(java.lang.String);
}
public class android.sax.RootElement
  extends android.sax.Element
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public org.xml.sax.ContentHandler getContentHandler();
}
public interface android.sax.StartElementListener
{
  public abstract void start(org.xml.sax.Attributes);
}
public interface android.sax.TextElementListener
  extends android.sax.StartElementListener, android.sax.EndTextElementListener
{
}
public final class android.security.KeyChain
  extends java.lang.Object
{
  public static boolean isBoundKeyAlgorithm(java.lang.String);
  public static boolean isKeyAlgorithmSupported(java.lang.String);
  public static void choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], android.net.Uri, java.lang.String);
  public static void choosePrivateKeyAlias(android.app.Activity, android.security.KeyChainAliasCallback, java.lang.String[], java.security.Principal[], java.lang.String, int, java.lang.String);
  public static android.content.Intent createInstallIntent();
  public static java.security.PrivateKey getPrivateKey(android.content.Context, java.lang.String)  throws android.security.KeyChainException, java.lang.InterruptedException;
  public static java.security.cert.X509Certificate[] getCertificateChain(android.content.Context, java.lang.String)  throws android.security.KeyChainException, java.lang.InterruptedException;
  public void <init>();
  public static final java.lang.String ACTION_STORAGE_CHANGED;
  public static final java.lang.String EXTRA_CERTIFICATE;
  public static final java.lang.String EXTRA_NAME;
  public static final java.lang.String EXTRA_PKCS12;
}
public interface android.security.KeyChainAliasCallback
{
  public abstract void alias(java.lang.String);
}
public class android.security.KeyChainException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public final class android.security.KeyPairGeneratorSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public boolean isEncryptionRequired();
  public int getKeySize();
  public android.content.Context getContext();
  public java.lang.String getKeyType();
  public java.lang.String getKeystoreAlias();
  public java.math.BigInteger getSerialNumber();
  public java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec();
  public java.util.Date getEndDate();
  public java.util.Date getStartDate();
  public javax.security.auth.x500.X500Principal getSubjectDN();
}
public final class android.security.KeyPairGeneratorSpec$Builder
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public android.security.KeyPairGeneratorSpec build();
  public android.security.KeyPairGeneratorSpec$Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec);
  public android.security.KeyPairGeneratorSpec$Builder setAlias(java.lang.String);
  public android.security.KeyPairGeneratorSpec$Builder setEncryptionRequired();
  public android.security.KeyPairGeneratorSpec$Builder setEndDate(java.util.Date);
  public android.security.KeyPairGeneratorSpec$Builder setKeySize(int);
  public android.security.KeyPairGeneratorSpec$Builder setKeyType(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public android.security.KeyPairGeneratorSpec$Builder setSerialNumber(java.math.BigInteger);
  public android.security.KeyPairGeneratorSpec$Builder setStartDate(java.util.Date);
  public android.security.KeyPairGeneratorSpec$Builder setSubject(javax.security.auth.x500.X500Principal);
}
public final class android.security.KeyStoreParameter
  extends java.lang.Object
  implements java.security.KeyStore$ProtectionParameter
{
  public boolean isEncryptionRequired();
}
public final class android.security.KeyStoreParameter$Builder
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public android.security.KeyStoreParameter build();
  public android.security.KeyStoreParameter$Builder setEncryptionRequired(boolean);
}
public class android.security.NetworkSecurityPolicy
  extends java.lang.Object
{
  public static android.security.NetworkSecurityPolicy getInstance();
  public boolean isCleartextTrafficPermitted();
  public boolean isCleartextTrafficPermitted(java.lang.String);
}
public class android.security.keystore.KeyExpiredException
  extends java.security.InvalidKeyException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public final class android.security.keystore.KeyGenParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public boolean isDigestsSpecified();
  public boolean isInvalidatedByBiometricEnrollment();
  public boolean isRandomizedEncryptionRequired();
  public boolean isUserAuthenticationRequired();
  public boolean isUserAuthenticationValidWhileOnBody();
  public int getKeySize();
  public int getPurposes();
  public int getUserAuthenticationValidityDurationSeconds();
  public byte[] getAttestationChallenge();
  public java.lang.String getKeystoreAlias();
  public java.lang.String[] getBlockModes();
  public java.lang.String[] getDigests();
  public java.lang.String[] getEncryptionPaddings();
  public java.lang.String[] getSignaturePaddings();
  public java.math.BigInteger getCertificateSerialNumber();
  public java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec();
  public java.util.Date getCertificateNotAfter();
  public java.util.Date getCertificateNotBefore();
  public java.util.Date getKeyValidityForConsumptionEnd();
  public java.util.Date getKeyValidityForOriginationEnd();
  public java.util.Date getKeyValidityStart();
  public javax.security.auth.x500.X500Principal getCertificateSubject();
}
public final class android.security.keystore.KeyGenParameterSpec$Builder
  extends java.lang.Object
{
  public void <init>(java.lang.String, int);
  public android.security.keystore.KeyGenParameterSpec build();
  public android.security.keystore.KeyGenParameterSpec$Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec);
  public android.security.keystore.KeyGenParameterSpec$Builder setAttestationChallenge(byte[]);
  public android.security.keystore.KeyGenParameterSpec$Builder setBlockModes(java.lang.String[]);
  public android.security.keystore.KeyGenParameterSpec$Builder setCertificateNotAfter(java.util.Date);
  public android.security.keystore.KeyGenParameterSpec$Builder setCertificateNotBefore(java.util.Date);
  public android.security.keystore.KeyGenParameterSpec$Builder setCertificateSerialNumber(java.math.BigInteger);
  public android.security.keystore.KeyGenParameterSpec$Builder setCertificateSubject(javax.security.auth.x500.X500Principal);
  public android.security.keystore.KeyGenParameterSpec$Builder setDigests(java.lang.String[]);
  public android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[]);
  public android.security.keystore.KeyGenParameterSpec$Builder setInvalidatedByBiometricEnrollment(boolean);
  public android.security.keystore.KeyGenParameterSpec$Builder setKeySize(int);
  public android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityEnd(java.util.Date);
  public android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityForConsumptionEnd(java.util.Date);
  public android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityForOriginationEnd(java.util.Date);
  public android.security.keystore.KeyGenParameterSpec$Builder setKeyValidityStart(java.util.Date);
  public android.security.keystore.KeyGenParameterSpec$Builder setRandomizedEncryptionRequired(boolean);
  public android.security.keystore.KeyGenParameterSpec$Builder setSignaturePaddings(java.lang.String[]);
  public android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationRequired(boolean);
  public android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationValidWhileOnBody(boolean);
  public android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationValidityDurationSeconds(int);
}
public class android.security.keystore.KeyInfo
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public boolean isInsideSecureHardware();
  public boolean isInvalidatedByBiometricEnrollment();
  public boolean isUserAuthenticationRequired();
  public boolean isUserAuthenticationRequirementEnforcedBySecureHardware();
  public boolean isUserAuthenticationValidWhileOnBody();
  public int getKeySize();
  public int getOrigin();
  public int getPurposes();
  public int getUserAuthenticationValidityDurationSeconds();
  public java.lang.String getKeystoreAlias();
  public java.lang.String[] getBlockModes();
  public java.lang.String[] getDigests();
  public java.lang.String[] getEncryptionPaddings();
  public java.lang.String[] getSignaturePaddings();
  public java.util.Date getKeyValidityForConsumptionEnd();
  public java.util.Date getKeyValidityForOriginationEnd();
  public java.util.Date getKeyValidityStart();
}
public class android.security.keystore.KeyNotYetValidException
  extends java.security.InvalidKeyException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public class android.security.keystore.KeyPermanentlyInvalidatedException
  extends java.security.InvalidKeyException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public abstract class android.security.keystore.KeyProperties
  extends java.lang.Object
{
  public static final int ORIGIN_GENERATED;
  public static final int ORIGIN_IMPORTED;
  public static final int ORIGIN_UNKNOWN;
  public static final int PURPOSE_DECRYPT;
  public static final int PURPOSE_ENCRYPT;
  public static final int PURPOSE_SIGN;
  public static final int PURPOSE_VERIFY;
  public static final java.lang.String BLOCK_MODE_CBC;
  public static final java.lang.String BLOCK_MODE_CTR;
  public static final java.lang.String BLOCK_MODE_ECB;
  public static final java.lang.String BLOCK_MODE_GCM;
  public static final java.lang.String DIGEST_MD5;
  public static final java.lang.String DIGEST_NONE;
  public static final java.lang.String DIGEST_SHA1;
  public static final java.lang.String DIGEST_SHA224;
  public static final java.lang.String DIGEST_SHA256;
  public static final java.lang.String DIGEST_SHA384;
  public static final java.lang.String DIGEST_SHA512;
  public static final java.lang.String ENCRYPTION_PADDING_NONE;
  public static final java.lang.String ENCRYPTION_PADDING_PKCS7;
  public static final java.lang.String ENCRYPTION_PADDING_RSA_OAEP;
  public static final java.lang.String ENCRYPTION_PADDING_RSA_PKCS1;
  public static final java.lang.String KEY_ALGORITHM_AES;
  public static final java.lang.String KEY_ALGORITHM_EC;
  public static final java.lang.String KEY_ALGORITHM_HMAC_SHA1;
  public static final java.lang.String KEY_ALGORITHM_HMAC_SHA224;
  public static final java.lang.String KEY_ALGORITHM_HMAC_SHA256;
  public static final java.lang.String KEY_ALGORITHM_HMAC_SHA384;
  public static final java.lang.String KEY_ALGORITHM_HMAC_SHA512;
  public static final java.lang.String KEY_ALGORITHM_RSA;
  public static final java.lang.String SIGNATURE_PADDING_RSA_PKCS1;
  public static final java.lang.String SIGNATURE_PADDING_RSA_PSS;
}
public final class android.security.keystore.KeyProtection
  extends java.lang.Object
  implements java.security.KeyStore$ProtectionParameter
{
  public boolean isDigestsSpecified();
  public boolean isInvalidatedByBiometricEnrollment();
  public boolean isRandomizedEncryptionRequired();
  public boolean isUserAuthenticationRequired();
  public boolean isUserAuthenticationValidWhileOnBody();
  public int getPurposes();
  public int getUserAuthenticationValidityDurationSeconds();
  public java.lang.String[] getBlockModes();
  public java.lang.String[] getDigests();
  public java.lang.String[] getEncryptionPaddings();
  public java.lang.String[] getSignaturePaddings();
  public java.util.Date getKeyValidityForConsumptionEnd();
  public java.util.Date getKeyValidityForOriginationEnd();
  public java.util.Date getKeyValidityStart();
}
public final class android.security.keystore.KeyProtection$Builder
  extends java.lang.Object
{
  public void <init>(int);
  public android.security.keystore.KeyProtection build();
  public android.security.keystore.KeyProtection$Builder setBlockModes(java.lang.String[]);
  public android.security.keystore.KeyProtection$Builder setDigests(java.lang.String[]);
  public android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[]);
  public android.security.keystore.KeyProtection$Builder setInvalidatedByBiometricEnrollment(boolean);
  public android.security.keystore.KeyProtection$Builder setKeyValidityEnd(java.util.Date);
  public android.security.keystore.KeyProtection$Builder setKeyValidityForConsumptionEnd(java.util.Date);
  public android.security.keystore.KeyProtection$Builder setKeyValidityForOriginationEnd(java.util.Date);
  public android.security.keystore.KeyProtection$Builder setKeyValidityStart(java.util.Date);
  public android.security.keystore.KeyProtection$Builder setRandomizedEncryptionRequired(boolean);
  public android.security.keystore.KeyProtection$Builder setSignaturePaddings(java.lang.String[]);
  public android.security.keystore.KeyProtection$Builder setUserAuthenticationRequired(boolean);
  public android.security.keystore.KeyProtection$Builder setUserAuthenticationValidWhileOnBody(boolean);
  public android.security.keystore.KeyProtection$Builder setUserAuthenticationValidityDurationSeconds(int);
}
public class android.security.keystore.UserNotAuthenticatedException
  extends java.security.InvalidKeyException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public class android.service.carrier.CarrierIdentifier
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getGid1();
  public java.lang.String getGid2();
  public java.lang.String getImsi();
  public java.lang.String getMcc();
  public java.lang.String getMnc();
  public java.lang.String getSpn();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.service.carrier.CarrierMessagingService
  extends android.app.Service
{
  public void <init>();
  public void onDownloadMms(android.net.Uri, int, android.net.Uri, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onFilterSms(android.service.carrier.MessagePdu, java.lang.String, int, int, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onReceiveTextSms(android.service.carrier.MessagePdu, java.lang.String, int, int, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onSendDataSms(byte[], int, java.lang.String, int, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onSendDataSms(byte[], int, java.lang.String, int, int, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onSendMms(android.net.Uri, int, android.net.Uri, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onSendMultipartTextSms(java.util.List, int, java.lang.String, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onSendMultipartTextSms(java.util.List, int, java.lang.String, int, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onSendTextSms(java.lang.String, int, java.lang.String, android.service.carrier.CarrierMessagingService$ResultCallback);
  public void onSendTextSms(java.lang.String, int, java.lang.String, int, android.service.carrier.CarrierMessagingService$ResultCallback);
  public android.os.IBinder onBind(android.content.Intent);
  public static final int DOWNLOAD_STATUS_ERROR;
  public static final int DOWNLOAD_STATUS_OK;
  public static final int DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK;
  public static final int RECEIVE_OPTIONS_DEFAULT;
  public static final int RECEIVE_OPTIONS_DROP;
  public static final int RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE;
  public static final int SEND_FLAG_REQUEST_DELIVERY_STATUS;
  public static final int SEND_STATUS_ERROR;
  public static final int SEND_STATUS_OK;
  public static final int SEND_STATUS_RETRY_ON_CARRIER_NETWORK;
  public static final java.lang.String SERVICE_INTERFACE;
}
public interface android.service.carrier.CarrierMessagingService$ResultCallback
{
  public abstract void onReceiveResult(java.lang.Object)  throws android.os.RemoteException;
}
public final class android.service.carrier.CarrierMessagingService$SendMmsResult
  extends java.lang.Object
{
  public void <init>(int, byte[]);
  public int getSendStatus();
  public byte[] getSendConfPdu();
}
public final class android.service.carrier.CarrierMessagingService$SendMultipartSmsResult
  extends java.lang.Object
{
  public void <init>(int, int[]);
  public int getSendStatus();
  public int[] getMessageRefs();
}
public final class android.service.carrier.CarrierMessagingService$SendSmsResult
  extends java.lang.Object
{
  public void <init>(int, int);
  public int getMessageRef();
  public int getSendStatus();
}
public abstract class android.service.carrier.CarrierService
  extends android.app.Service
{
  public void <init>();
  public final void notifyCarrierNetworkChange(boolean);
  public abstract android.os.PersistableBundle onLoadConfig(android.service.carrier.CarrierIdentifier);
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String CARRIER_SERVICE_INTERFACE;
}
public final class android.service.carrier.MessagePdu
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.util.List);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.util.List getPdus();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.service.chooser.ChooserTarget
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.CharSequence, android.graphics.drawable.Icon, float, android.content.ComponentName, android.os.Bundle);
  public float getScore();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getComponentName();
  public android.graphics.drawable.Icon getIcon();
  public android.os.Bundle getIntentExtras();
  public java.lang.CharSequence getTitle();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.service.chooser.ChooserTargetService
  extends android.app.Service
{
  public void <init>();
  public abstract java.util.List onGetChooserTargets(android.content.ComponentName, android.content.IntentFilter);
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String BIND_PERMISSION;
  public static final java.lang.String META_DATA_NAME;
  public static final java.lang.String SERVICE_INTERFACE;
}
public class android.service.dreams.DreamService
  extends android.app.Service
  implements android.view.Window$Callback
{
  public void <init>();
  public final void finish();
  public final void wakeUp();
  public final android.os.IBinder onBind(android.content.Intent);
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean isFullscreen();
  public boolean isInteractive();
  public boolean isScreenBright();
  public boolean onCreatePanelMenu(int, android.view.Menu);
  public boolean onMenuItemSelected(int, android.view.MenuItem);
  public boolean onMenuOpened(int, android.view.Menu);
  public boolean onPreparePanel(int, android.view.View, android.view.Menu);
  public boolean onSearchRequested();
  public boolean onSearchRequested(android.view.SearchEvent);
  public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void onActionModeFinished(android.view.ActionMode);
  public void onActionModeStarted(android.view.ActionMode);
  public void onAttachedToWindow();
  public void onContentChanged();
  public void onCreate();
  public void onDestroy();
  public void onDetachedFromWindow();
  public void onDreamingStarted();
  public void onDreamingStopped();
  public void onPanelClosed(int, android.view.Menu);
  public void onWakeUp();
  public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
  public void onWindowFocusChanged(boolean);
  public void setContentView(android.view.View);
  public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void setContentView(int);
  public void setFullscreen(boolean);
  public void setInteractive(boolean);
  public void setScreenBright(boolean);
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
  public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback, int);
  public android.view.View findViewById(int);
  public android.view.View onCreatePanelView(int);
  public android.view.Window getWindow();
  public android.view.WindowManager getWindowManager();
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public static final java.lang.String DREAM_META_DATA;
  public static final java.lang.String SERVICE_INTERFACE;
}
public abstract class android.service.media.CameraPrewarmService
  extends android.app.Service
{
  public void <init>();
  public abstract void onCooldown(boolean);
  public abstract void onPrewarm();
  public boolean onUnbind(android.content.Intent);
  public android.os.IBinder onBind(android.content.Intent);
}
public abstract class android.service.media.MediaBrowserService
  extends android.app.Service
{
  public void <init>();
  public final android.os.Bundle getBrowserRootHints();
  public abstract void onLoadChildren(java.lang.String, android.service.media.MediaBrowserService$Result);
  public abstract android.service.media.MediaBrowserService$BrowserRoot onGetRoot(java.lang.String, int, android.os.Bundle);
  public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void notifyChildrenChanged(java.lang.String);
  public void notifyChildrenChanged(java.lang.String, android.os.Bundle);
  public void onCreate();
  public void onLoadChildren(java.lang.String, android.service.media.MediaBrowserService$Result, android.os.Bundle);
  public void onLoadItem(java.lang.String, android.service.media.MediaBrowserService$Result);
  public void setSessionToken(android.media.session.MediaSession$Token);
  public android.media.session.MediaSession$Token getSessionToken();
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String SERVICE_INTERFACE;
}
public final class android.service.media.MediaBrowserService$BrowserRoot
  extends java.lang.Object
{
  public void <init>(java.lang.String, android.os.Bundle);
  public android.os.Bundle getExtras();
  public java.lang.String getRootId();
  public static final java.lang.String EXTRA_OFFLINE;
  public static final java.lang.String EXTRA_RECENT;
  public static final java.lang.String EXTRA_SUGGESTED;
}
public class android.service.media.MediaBrowserService$Result
  extends java.lang.Object
{
  public void detach();
  public void sendResult(java.lang.Object);
}
public final class android.service.notification.Condition
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static boolean isValidId(android.net.Uri, java.lang.String);
  public static android.net.Uri$Builder newId(android.content.Context);
  public static java.lang.String relevanceToString(int);
  public static java.lang.String stateToString(int);
  public void <init>(android.net.Uri, java.lang.String, int);
  public void <init>(android.net.Uri, java.lang.String, java.lang.String, java.lang.String, int, int, int);
  public void <init>(android.os.Parcel);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.service.notification.Condition copy();
  public java.lang.String toString();
  public static final int FLAG_RELEVANT_ALWAYS;
  public static final int FLAG_RELEVANT_NOW;
  public static final int STATE_ERROR;
  public static final int STATE_FALSE;
  public static final int STATE_TRUE;
  public static final int STATE_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String SCHEME;
  public final int flags;
  public final int icon;
  public final int state;
  public final android.net.Uri id;
  public final java.lang.String line1;
  public final java.lang.String line2;
  public final java.lang.String summary;
}
public abstract class android.service.notification.ConditionProviderService
  extends android.app.Service
{
  public void <init>();
  public final void notifyCondition(android.service.notification.Condition);
  public final void notifyConditions(android.service.notification.Condition[]);
  public abstract void onConnected();
  public abstract void onSubscribe(android.net.Uri);
  public abstract void onUnsubscribe(android.net.Uri);
  public void onRequestConditions(int);
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String EXTRA_RULE_ID;
  public static final java.lang.String META_DATA_CONFIGURATION_ACTIVITY;
  public static final java.lang.String META_DATA_RULE_INSTANCE_LIMIT;
  public static final java.lang.String META_DATA_RULE_TYPE;
  public static final java.lang.String SERVICE_INTERFACE;
}
public abstract class android.service.notification.NotificationListenerService
  extends android.app.Service
{
  public static void requestRebind(android.content.ComponentName);
  public void <init>();
  public final int getCurrentInterruptionFilter();
  public final int getCurrentListenerHints();
  public final void cancelAllNotifications();
  public final void cancelNotification(java.lang.String);
  public final void cancelNotification(java.lang.String, java.lang.String, int);
  public final void cancelNotifications(java.lang.String[]);
  public final void requestInterruptionFilter(int);
  public final void requestListenerHints(int);
  public final void requestUnbind();
  public final void setNotificationsShown(java.lang.String[]);
  public void onDestroy();
  public void onInterruptionFilterChanged(int);
  public void onListenerConnected();
  public void onListenerDisconnected();
  public void onListenerHintsChanged(int);
  public void onNotificationPosted(android.service.notification.StatusBarNotification);
  public void onNotificationPosted(android.service.notification.StatusBarNotification, android.service.notification.NotificationListenerService$RankingMap);
  public void onNotificationRankingUpdate(android.service.notification.NotificationListenerService$RankingMap);
  public void onNotificationRemoved(android.service.notification.StatusBarNotification);
  public void onNotificationRemoved(android.service.notification.StatusBarNotification, android.service.notification.NotificationListenerService$RankingMap);
  public android.os.IBinder onBind(android.content.Intent);
  public android.service.notification.NotificationListenerService$RankingMap getCurrentRanking();
  public android.service.notification.StatusBarNotification[] getActiveNotifications();
  public android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[]);
  protected void attachBaseContext(android.content.Context);
  public static final int HINT_HOST_DISABLE_CALL_EFFECTS;
  public static final int HINT_HOST_DISABLE_EFFECTS;
  public static final int HINT_HOST_DISABLE_NOTIFICATION_EFFECTS;
  public static final int INTERRUPTION_FILTER_ALARMS;
  public static final int INTERRUPTION_FILTER_ALL;
  public static final int INTERRUPTION_FILTER_NONE;
  public static final int INTERRUPTION_FILTER_PRIORITY;
  public static final int INTERRUPTION_FILTER_UNKNOWN;
  public static final int SUPPRESSED_EFFECT_SCREEN_OFF;
  public static final int SUPPRESSED_EFFECT_SCREEN_ON;
  public static final java.lang.String SERVICE_INTERFACE;
}
public class android.service.notification.NotificationListenerService$Ranking
  extends java.lang.Object
{
  public void <init>();
  public boolean isAmbient();
  public boolean matchesInterruptionFilter();
  public int getImportance();
  public int getRank();
  public int getSuppressedVisualEffects();
  public java.lang.CharSequence getImportanceExplanation();
  public java.lang.String getKey();
  public java.lang.String getOverrideGroupKey();
}
public class android.service.notification.NotificationListenerService$RankingMap
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean getRanking(java.lang.String, android.service.notification.NotificationListenerService$Ranking);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String[] getOrderedKeys();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.service.notification.StatusBarNotification
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.String, int, int, int, android.app.Notification, android.os.UserHandle, long);
  public boolean isClearable();
  public boolean isGroup();
  public boolean isOngoing();
  public int describeContents();
  public int getId();
  public int getUserId();
  public long getPostTime();
  public void setOverrideGroupKey(java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.app.Notification getNotification();
  public android.os.UserHandle getUser();
  public android.service.notification.StatusBarNotification clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String getGroupKey();
  public java.lang.String getKey();
  public java.lang.String getOverrideGroupKey();
  public java.lang.String getPackageName();
  public java.lang.String getTag();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.service.quicksettings.Tile
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getState();
  public void setContentDescription(java.lang.CharSequence);
  public void setIcon(android.graphics.drawable.Icon);
  public void setLabel(java.lang.CharSequence);
  public void setState(int);
  public void updateTile();
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.drawable.Icon getIcon();
  public java.lang.CharSequence getContentDescription();
  public java.lang.CharSequence getLabel();
  public static final int STATE_ACTIVE;
  public static final int STATE_INACTIVE;
  public static final int STATE_UNAVAILABLE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.service.quicksettings.TileService
  extends android.app.Service
{
  public static final void requestListeningState(android.content.Context, android.content.ComponentName);
  public void <init>();
  public final boolean isLocked();
  public final boolean isSecure();
  public final void showDialog(android.app.Dialog);
  public final void startActivityAndCollapse(android.content.Intent);
  public final void unlockAndRun(java.lang.Runnable);
  public final android.service.quicksettings.Tile getQsTile();
  public void onClick();
  public void onDestroy();
  public void onStartListening();
  public void onStopListening();
  public void onTileAdded();
  public void onTileRemoved();
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String ACTION_QS_TILE;
  public static final java.lang.String ACTION_QS_TILE_PREFERENCES;
  public static final java.lang.String META_DATA_ACTIVE_TILE;
}
public abstract class android.service.restrictions.RestrictionsReceiver
  extends android.content.BroadcastReceiver
{
  public void <init>();
  public abstract void onRequestPermission(android.content.Context, java.lang.String, java.lang.String, java.lang.String, android.os.PersistableBundle);
  public void onReceive(android.content.Context, android.content.Intent);
}
public abstract class android.service.textservice.SpellCheckerService
  extends android.app.Service
{
  public void <init>();
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract android.service.textservice.SpellCheckerService$Session createSession();
  public static final java.lang.String SERVICE_INTERFACE;
}
public abstract class android.service.textservice.SpellCheckerService$Session
  extends java.lang.Object
{
  public void <init>();
  public abstract void onCreate();
  public abstract android.view.textservice.SuggestionsInfo onGetSuggestions(android.view.textservice.TextInfo, int);
  public void onCancel();
  public void onClose();
  public android.os.Bundle getBundle();
  public android.view.textservice.SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[], int);
  public android.view.textservice.SuggestionsInfo[] onGetSuggestionsMultiple(android.view.textservice.TextInfo[], int, boolean);
  public java.lang.String getLocale();
}
public class android.service.voice.AlwaysOnHotwordDetector
  extends java.lang.Object
{
  public boolean startRecognition(int);
  public boolean stopRecognition();
  public int getSupportedRecognitionModes();
  public android.content.Intent createEnrollIntent();
  public android.content.Intent createReEnrollIntent();
  public android.content.Intent createUnEnrollIntent();
  public static final int RECOGNITION_FLAG_ALLOW_MULTIPLE_TRIGGERS;
  public static final int RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO;
  public static final int RECOGNITION_MODE_USER_IDENTIFICATION;
  public static final int RECOGNITION_MODE_VOICE_TRIGGER;
  public static final int STATE_HARDWARE_UNAVAILABLE;
  public static final int STATE_KEYPHRASE_ENROLLED;
  public static final int STATE_KEYPHRASE_UNENROLLED;
  public static final int STATE_KEYPHRASE_UNSUPPORTED;
}
public abstract class android.service.voice.AlwaysOnHotwordDetector$Callback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onAvailabilityChanged(int);
  public abstract void onDetected(android.service.voice.AlwaysOnHotwordDetector$EventPayload);
  public abstract void onError();
  public abstract void onRecognitionPaused();
  public abstract void onRecognitionResumed();
}
public class android.service.voice.AlwaysOnHotwordDetector$EventPayload
  extends java.lang.Object
{
  public android.media.AudioFormat getCaptureAudioFormat();
  public byte[] getTriggerAudio();
}
public class android.service.voice.VoiceInteractionService
  extends android.app.Service
{
  public static boolean isActiveService(android.content.Context, android.content.ComponentName);
  public void <init>();
  public final android.service.voice.AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(java.lang.String, java.util.Locale, android.service.voice.AlwaysOnHotwordDetector$Callback);
  public int getDisabledShowContext();
  public void onCreate();
  public void onLaunchVoiceAssistFromKeyguard();
  public void onReady();
  public void onShutdown();
  public void setDisabledShowContext(int);
  public void showSession(android.os.Bundle, int);
  public android.os.IBinder onBind(android.content.Intent);
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public class android.service.voice.VoiceInteractionSession
  extends java.lang.Object
  implements android.view.KeyEvent$Callback, android.content.ComponentCallbacks2
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.os.Handler);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public int getDisabledShowContext();
  public int getUserDisabledShowContext();
  public void closeSystemDialogs();
  public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public void finish();
  public void hide();
  public void onAssistStructureFailure(java.lang.Throwable);
  public void onBackPressed();
  public void onCancelRequest(android.service.voice.VoiceInteractionSession$Request);
  public void onCloseSystemDialogs();
  public void onComputeInsets(android.service.voice.VoiceInteractionSession$Insets);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onCreate();
  public void onDestroy();
  public void onHandleAssist(android.os.Bundle, android.app.assist.AssistStructure, android.app.assist.AssistContent);
  public void onHandleAssistSecondary(android.os.Bundle, android.app.assist.AssistStructure, android.app.assist.AssistContent, int, int);
  public void onHandleScreenshot(android.graphics.Bitmap);
  public void onHide();
  public void onLockscreenShown();
  public void onLowMemory();
  public void onRequestAbortVoice(android.service.voice.VoiceInteractionSession$AbortVoiceRequest);
  public void onRequestCommand(android.service.voice.VoiceInteractionSession$CommandRequest);
  public void onRequestCompleteVoice(android.service.voice.VoiceInteractionSession$CompleteVoiceRequest);
  public void onRequestConfirmation(android.service.voice.VoiceInteractionSession$ConfirmationRequest);
  public void onRequestPickOption(android.service.voice.VoiceInteractionSession$PickOptionRequest);
  public void onShow(android.os.Bundle, int);
  public void onTaskFinished(android.content.Intent, int);
  public void onTaskStarted(android.content.Intent, int);
  public void onTrimMemory(int);
  public void setContentView(android.view.View);
  public void setDisabledShowContext(int);
  public void setKeepAwake(boolean);
  public void setTheme(int);
  public void show(android.os.Bundle, int);
  public void startVoiceActivity(android.content.Intent);
  public android.app.Dialog getWindow();
  public android.content.Context getContext();
  public android.view.LayoutInflater getLayoutInflater();
  public android.view.View onCreateContentView();
  public boolean[] onGetSupportedCommands(java.lang.String[]);
  public static final int SHOW_SOURCE_ACTIVITY;
  public static final int SHOW_SOURCE_APPLICATION;
  public static final int SHOW_SOURCE_ASSIST_GESTURE;
  public static final int SHOW_WITH_ASSIST;
  public static final int SHOW_WITH_SCREENSHOT;
}
public final class android.service.voice.VoiceInteractionSession$AbortVoiceRequest
  extends android.service.voice.VoiceInteractionSession$Request
{
  public void sendAbortResult(android.os.Bundle);
  public android.app.VoiceInteractor$Prompt getVoicePrompt();
  public java.lang.CharSequence getMessage();
}
public final class android.service.voice.VoiceInteractionSession$CommandRequest
  extends android.service.voice.VoiceInteractionSession$Request
{
  public void sendIntermediateResult(android.os.Bundle);
  public void sendResult(android.os.Bundle);
  public java.lang.String getCommand();
}
public final class android.service.voice.VoiceInteractionSession$CompleteVoiceRequest
  extends android.service.voice.VoiceInteractionSession$Request
{
  public void sendCompleteResult(android.os.Bundle);
  public android.app.VoiceInteractor$Prompt getVoicePrompt();
  public java.lang.CharSequence getMessage();
}
public final class android.service.voice.VoiceInteractionSession$ConfirmationRequest
  extends android.service.voice.VoiceInteractionSession$Request
{
  public void sendConfirmationResult(boolean, android.os.Bundle);
  public android.app.VoiceInteractor$Prompt getVoicePrompt();
  public java.lang.CharSequence getPrompt();
}
public final class android.service.voice.VoiceInteractionSession$Insets
  extends java.lang.Object
{
  public void <init>();
  public static final int TOUCHABLE_INSETS_CONTENT;
  public static final int TOUCHABLE_INSETS_FRAME;
  public static final int TOUCHABLE_INSETS_REGION;
  public final android.graphics.Rect contentInsets;
  public final android.graphics.Region touchableRegion;
  public int touchableInsets;
}
public final class android.service.voice.VoiceInteractionSession$PickOptionRequest
  extends android.service.voice.VoiceInteractionSession$Request
{
  public void sendIntermediatePickOptionResult(android.app.VoiceInteractor$PickOptionRequest$Option[], android.os.Bundle);
  public void sendPickOptionResult(android.app.VoiceInteractor$PickOptionRequest$Option[], android.os.Bundle);
  public android.app.VoiceInteractor$PickOptionRequest$Option[] getOptions();
  public android.app.VoiceInteractor$Prompt getVoicePrompt();
  public java.lang.CharSequence getPrompt();
}
public class android.service.voice.VoiceInteractionSession$Request
  extends java.lang.Object
{
  public boolean isActive();
  public int getCallingUid();
  public void cancel();
  public android.os.Bundle getExtras();
  public java.lang.String getCallingPackage();
  public java.lang.String toString();
}
public abstract class android.service.voice.VoiceInteractionSessionService
  extends android.app.Service
{
  public void <init>();
  public abstract android.service.voice.VoiceInteractionSession onNewSession(android.os.Bundle);
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onCreate();
  public void onLowMemory();
  public void onTrimMemory(int);
  public android.os.IBinder onBind(android.content.Intent);
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
}
public abstract class android.service.vr.VrListenerService
  extends android.app.Service
{
  public static final boolean isVrModePackageEnabled(android.content.Context, android.content.ComponentName);
  public void <init>();
  public void onCurrentVrActivityChanged(android.content.ComponentName);
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String SERVICE_INTERFACE;
}
public abstract class android.service.wallpaper.WallpaperService
  extends android.app.Service
{
  public void <init>();
  public final android.os.IBinder onBind(android.content.Intent);
  public abstract android.service.wallpaper.WallpaperService$Engine onCreateEngine();
  public void onCreate();
  public void onDestroy();
  protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public class android.service.wallpaper.WallpaperService$Engine
  extends java.lang.Object
{
  public void <init>(android.service.wallpaper.WallpaperService);
  public boolean isPreview();
  public boolean isVisible();
  public int getDesiredMinimumHeight();
  public int getDesiredMinimumWidth();
  public void onApplyWindowInsets(android.view.WindowInsets);
  public void onCreate(android.view.SurfaceHolder);
  public void onDesiredSizeChanged(int, int);
  public void onDestroy();
  public void onOffsetsChanged(float, float, float, float, int, int);
  public void onSurfaceChanged(android.view.SurfaceHolder, int, int, int);
  public void onSurfaceCreated(android.view.SurfaceHolder);
  public void onSurfaceDestroyed(android.view.SurfaceHolder);
  public void onSurfaceRedrawNeeded(android.view.SurfaceHolder);
  public void onTouchEvent(android.view.MotionEvent);
  public void onVisibilityChanged(boolean);
  public void setOffsetNotificationsEnabled(boolean);
  public void setTouchEventsEnabled(boolean);
  public android.os.Bundle onCommand(java.lang.String, int, int, int, android.os.Bundle, boolean);
  public android.view.SurfaceHolder getSurfaceHolder();
  protected void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]);
}
public interface android.speech.RecognitionListener
{
  public abstract void onBeginningOfSpeech();
  public abstract void onBufferReceived(byte[]);
  public abstract void onEndOfSpeech();
  public abstract void onError(int);
  public abstract void onEvent(int, android.os.Bundle);
  public abstract void onPartialResults(android.os.Bundle);
  public abstract void onReadyForSpeech(android.os.Bundle);
  public abstract void onResults(android.os.Bundle);
  public abstract void onRmsChanged(float);
}
public abstract class android.speech.RecognitionService
  extends android.app.Service
{
  public void <init>();
  public final android.os.IBinder onBind(android.content.Intent);
  public void onDestroy();
  protected abstract void onCancel(android.speech.RecognitionService$Callback);
  protected abstract void onStartListening(android.content.Intent, android.speech.RecognitionService$Callback);
  protected abstract void onStopListening(android.speech.RecognitionService$Callback);
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public class android.speech.RecognitionService$Callback
  extends java.lang.Object
{
  public int getCallingUid();
  public void beginningOfSpeech()  throws android.os.RemoteException;
  public void bufferReceived(byte[])  throws android.os.RemoteException;
  public void endOfSpeech()  throws android.os.RemoteException;
  public void error(int)  throws android.os.RemoteException;
  public void partialResults(android.os.Bundle)  throws android.os.RemoteException;
  public void readyForSpeech(android.os.Bundle)  throws android.os.RemoteException;
  public void results(android.os.Bundle)  throws android.os.RemoteException;
  public void rmsChanged(float)  throws android.os.RemoteException;
}
public class android.speech.RecognizerIntent
  extends java.lang.Object
{
  public static final android.content.Intent getVoiceDetailsIntent(android.content.Context);
  public static final int RESULT_AUDIO_ERROR;
  public static final int RESULT_CLIENT_ERROR;
  public static final int RESULT_NETWORK_ERROR;
  public static final int RESULT_NO_MATCH;
  public static final int RESULT_SERVER_ERROR;
  public static final java.lang.String ACTION_GET_LANGUAGE_DETAILS;
  public static final java.lang.String ACTION_RECOGNIZE_SPEECH;
  public static final java.lang.String ACTION_VOICE_SEARCH_HANDS_FREE;
  public static final java.lang.String ACTION_WEB_SEARCH;
  public static final java.lang.String DETAILS_META_DATA;
  public static final java.lang.String EXTRA_CALLING_PACKAGE;
  public static final java.lang.String EXTRA_CONFIDENCE_SCORES;
  public static final java.lang.String EXTRA_LANGUAGE;
  public static final java.lang.String EXTRA_LANGUAGE_MODEL;
  public static final java.lang.String EXTRA_LANGUAGE_PREFERENCE;
  public static final java.lang.String EXTRA_MAX_RESULTS;
  public static final java.lang.String EXTRA_ONLY_RETURN_LANGUAGE_PREFERENCE;
  public static final java.lang.String EXTRA_ORIGIN;
  public static final java.lang.String EXTRA_PARTIAL_RESULTS;
  public static final java.lang.String EXTRA_PREFER_OFFLINE;
  public static final java.lang.String EXTRA_PROMPT;
  public static final java.lang.String EXTRA_RESULTS;
  public static final java.lang.String EXTRA_RESULTS_PENDINGINTENT;
  public static final java.lang.String EXTRA_RESULTS_PENDINGINTENT_BUNDLE;
  public static final java.lang.String EXTRA_SECURE;
  public static final java.lang.String EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS;
  public static final java.lang.String EXTRA_SPEECH_INPUT_MINIMUM_LENGTH_MILLIS;
  public static final java.lang.String EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS;
  public static final java.lang.String EXTRA_SUPPORTED_LANGUAGES;
  public static final java.lang.String EXTRA_WEB_SEARCH_ONLY;
  public static final java.lang.String LANGUAGE_MODEL_FREE_FORM;
  public static final java.lang.String LANGUAGE_MODEL_WEB_SEARCH;
}
public class android.speech.RecognizerResultsIntent
  extends java.lang.Object
{
  public static final java.lang.String ACTION_VOICE_SEARCH_RESULTS;
  public static final java.lang.String EXTRA_VOICE_SEARCH_RESULT_HTML;
  public static final java.lang.String EXTRA_VOICE_SEARCH_RESULT_HTML_BASE_URLS;
  public static final java.lang.String EXTRA_VOICE_SEARCH_RESULT_HTTP_HEADERS;
  public static final java.lang.String EXTRA_VOICE_SEARCH_RESULT_STRINGS;
  public static final java.lang.String EXTRA_VOICE_SEARCH_RESULT_URLS;
  public static final java.lang.String URI_SCHEME_INLINE;
}
public class android.speech.SpeechRecognizer
  extends java.lang.Object
{
  public static boolean isRecognitionAvailable(android.content.Context);
  public static android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context);
  public static android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context, android.content.ComponentName);
  public void cancel();
  public void destroy();
  public void setRecognitionListener(android.speech.RecognitionListener);
  public void startListening(android.content.Intent);
  public void stopListening();
  public static final int ERROR_AUDIO;
  public static final int ERROR_CLIENT;
  public static final int ERROR_INSUFFICIENT_PERMISSIONS;
  public static final int ERROR_NETWORK;
  public static final int ERROR_NETWORK_TIMEOUT;
  public static final int ERROR_NO_MATCH;
  public static final int ERROR_RECOGNIZER_BUSY;
  public static final int ERROR_SERVER;
  public static final int ERROR_SPEECH_TIMEOUT;
  public static final java.lang.String CONFIDENCE_SCORES;
  public static final java.lang.String RESULTS_RECOGNITION;
}
public interface android.speech.tts.SynthesisCallback
{
  public abstract boolean hasFinished();
  public abstract boolean hasStarted();
  public abstract int audioAvailable(byte[], int, int);
  public abstract int done();
  public abstract int getMaxBufferSize();
  public abstract int start(int, int, int);
  public abstract void error();
  public abstract void error(int);
}
public final class android.speech.tts.SynthesisRequest
  extends java.lang.Object
{
  public void <init>(java.lang.CharSequence, android.os.Bundle);
  public void <init>(java.lang.String, android.os.Bundle);
  public int getCallerUid();
  public int getPitch();
  public int getSpeechRate();
  public android.os.Bundle getParams();
  public java.lang.CharSequence getCharSequenceText();
  public java.lang.String getCountry();
  public java.lang.String getLanguage();
  public java.lang.String getText();
  public java.lang.String getVariant();
  public java.lang.String getVoiceName();
}
public class android.speech.tts.TextToSpeech
  extends java.lang.Object
{
  public static int getMaxSpeechInputLength();
  public void <init>(android.content.Context, android.speech.tts.TextToSpeech$OnInitListener);
  public void <init>(android.content.Context, android.speech.tts.TextToSpeech$OnInitListener, java.lang.String);
  public boolean areDefaultsEnforced();
  public boolean isSpeaking();
  public int addEarcon(java.lang.String, java.io.File);
  public int addEarcon(java.lang.String, java.lang.String);
  public int addEarcon(java.lang.String, java.lang.String, int);
  public int addSpeech(java.lang.CharSequence, java.io.File);
  public int addSpeech(java.lang.CharSequence, java.lang.String, int);
  public int addSpeech(java.lang.String, java.lang.String);
  public int addSpeech(java.lang.String, java.lang.String, int);
  public int isLanguageAvailable(java.util.Locale);
  public int playEarcon(java.lang.String, int, android.os.Bundle, java.lang.String);
  public int playEarcon(java.lang.String, int, java.util.HashMap);
  public int playSilence(long, int, java.util.HashMap);
  public int playSilentUtterance(long, int, java.lang.String);
  public int setAudioAttributes(android.media.AudioAttributes);
  public int setEngineByPackageName(java.lang.String);
  public int setLanguage(java.util.Locale);
  public int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener);
  public int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener);
  public int setPitch(float);
  public int setSpeechRate(float);
  public int setVoice(android.speech.tts.Voice);
  public int speak(java.lang.CharSequence, int, android.os.Bundle, java.lang.String);
  public int speak(java.lang.String, int, java.util.HashMap);
  public int stop();
  public int synthesizeToFile(java.lang.CharSequence, android.os.Bundle, java.io.File, java.lang.String);
  public int synthesizeToFile(java.lang.String, java.util.HashMap, java.lang.String);
  public void shutdown();
  public android.speech.tts.Voice getDefaultVoice();
  public android.speech.tts.Voice getVoice();
  public java.lang.String getDefaultEngine();
  public java.util.List getEngines();
  public java.util.Locale getDefaultLanguage();
  public java.util.Locale getLanguage();
  public java.util.Set getAvailableLanguages();
  public java.util.Set getFeatures(java.util.Locale);
  public java.util.Set getVoices();
  public static final int ERROR;
  public static final int ERROR_INVALID_REQUEST;
  public static final int ERROR_NETWORK;
  public static final int ERROR_NETWORK_TIMEOUT;
  public static final int ERROR_NOT_INSTALLED_YET;
  public static final int ERROR_OUTPUT;
  public static final int ERROR_SERVICE;
  public static final int ERROR_SYNTHESIS;
  public static final int LANG_AVAILABLE;
  public static final int LANG_COUNTRY_AVAILABLE;
  public static final int LANG_COUNTRY_VAR_AVAILABLE;
  public static final int LANG_MISSING_DATA;
  public static final int LANG_NOT_SUPPORTED;
  public static final int QUEUE_ADD;
  public static final int QUEUE_FLUSH;
  public static final int STOPPED;
  public static final int SUCCESS;
  public static final java.lang.String ACTION_TTS_QUEUE_PROCESSING_COMPLETED;
}
public class android.speech.tts.TextToSpeech$Engine
  extends java.lang.Object
{
  public void <init>(android.speech.tts.TextToSpeech);
  public static final int CHECK_VOICE_DATA_BAD_DATA;
  public static final int CHECK_VOICE_DATA_FAIL;
  public static final int CHECK_VOICE_DATA_MISSING_DATA;
  public static final int CHECK_VOICE_DATA_MISSING_VOLUME;
  public static final int CHECK_VOICE_DATA_PASS;
  public static final int DEFAULT_STREAM;
  public static final java.lang.String ACTION_CHECK_TTS_DATA;
  public static final java.lang.String ACTION_GET_SAMPLE_TEXT;
  public static final java.lang.String ACTION_INSTALL_TTS_DATA;
  public static final java.lang.String ACTION_TTS_DATA_INSTALLED;
  public static final java.lang.String EXTRA_AVAILABLE_VOICES;
  public static final java.lang.String EXTRA_CHECK_VOICE_DATA_FOR;
  public static final java.lang.String EXTRA_SAMPLE_TEXT;
  public static final java.lang.String EXTRA_TTS_DATA_INSTALLED;
  public static final java.lang.String EXTRA_UNAVAILABLE_VOICES;
  public static final java.lang.String EXTRA_VOICE_DATA_FILES;
  public static final java.lang.String EXTRA_VOICE_DATA_FILES_INFO;
  public static final java.lang.String EXTRA_VOICE_DATA_ROOT_DIRECTORY;
  public static final java.lang.String INTENT_ACTION_TTS_SERVICE;
  public static final java.lang.String KEY_FEATURE_EMBEDDED_SYNTHESIS;
  public static final java.lang.String KEY_FEATURE_NETWORK_RETRIES_COUNT;
  public static final java.lang.String KEY_FEATURE_NETWORK_SYNTHESIS;
  public static final java.lang.String KEY_FEATURE_NETWORK_TIMEOUT_MS;
  public static final java.lang.String KEY_FEATURE_NOT_INSTALLED;
  public static final java.lang.String KEY_PARAM_PAN;
  public static final java.lang.String KEY_PARAM_SESSION_ID;
  public static final java.lang.String KEY_PARAM_STREAM;
  public static final java.lang.String KEY_PARAM_UTTERANCE_ID;
  public static final java.lang.String KEY_PARAM_VOLUME;
  public static final java.lang.String SERVICE_META_DATA;
}
public class android.speech.tts.TextToSpeech$EngineInfo
  extends java.lang.Object
{
  public void <init>();
  public java.lang.String toString();
  public int icon;
  public java.lang.String label;
  public java.lang.String name;
}
public interface android.speech.tts.TextToSpeech$OnInitListener
{
  public abstract void onInit(int);
}
public interface android.speech.tts.TextToSpeech$OnUtteranceCompletedListener
{
  public abstract void onUtteranceCompleted(java.lang.String);
}
public abstract class android.speech.tts.TextToSpeechService
  extends android.app.Service
{
  public void <init>();
  public int onIsValidVoiceName(java.lang.String);
  public int onLoadVoice(java.lang.String);
  public void onCreate();
  public void onDestroy();
  public android.os.IBinder onBind(android.content.Intent);
  public java.lang.String onGetDefaultVoiceNameFor(java.lang.String, java.lang.String, java.lang.String);
  public java.util.List onGetVoices();
  protected abstract int onIsLanguageAvailable(java.lang.String, java.lang.String, java.lang.String);
  protected abstract int onLoadLanguage(java.lang.String, java.lang.String, java.lang.String);
  protected abstract void onStop();
  protected abstract void onSynthesizeText(android.speech.tts.SynthesisRequest, android.speech.tts.SynthesisCallback);
  protected abstract java.lang.String[] onGetLanguage();
  protected java.util.Set onGetFeaturesForLanguage(java.lang.String, java.lang.String, java.lang.String);
}
public abstract class android.speech.tts.UtteranceProgressListener
  extends java.lang.Object
{
  public void <init>();
  public abstract void onDone(java.lang.String);
  public abstract void onError(java.lang.String);
  public abstract void onStart(java.lang.String);
  public void onAudioAvailable(java.lang.String, byte[]);
  public void onBeginSynthesis(java.lang.String, int, int, int);
  public void onError(java.lang.String, int);
  public void onStop(java.lang.String, boolean);
}
public class android.speech.tts.Voice
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.String, java.util.Locale, int, int, boolean, java.util.Set);
  public boolean equals(java.lang.Object);
  public boolean isNetworkConnectionRequired();
  public int describeContents();
  public int getLatency();
  public int getQuality();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getName();
  public java.lang.String toString();
  public java.util.Locale getLocale();
  public java.util.Set getFeatures();
  public static final int LATENCY_HIGH;
  public static final int LATENCY_LOW;
  public static final int LATENCY_NORMAL;
  public static final int LATENCY_VERY_HIGH;
  public static final int LATENCY_VERY_LOW;
  public static final int QUALITY_HIGH;
  public static final int QUALITY_LOW;
  public static final int QUALITY_NORMAL;
  public static final int QUALITY_VERY_HIGH;
  public static final int QUALITY_VERY_LOW;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.system.ErrnoException
  extends java.lang.Exception
{
  public void <init>(java.lang.String, int);
  public void <init>(java.lang.String, int, java.lang.Throwable);
  public java.lang.String getMessage();
  public final int errno;
}
public final class android.system.Os
  extends java.lang.Object
{
  public static boolean access(java.lang.String, int)  throws android.system.ErrnoException;
  public static boolean isatty(java.io.FileDescriptor);
  public static int getegid();
  public static int geteuid();
  public static int getgid();
  public static int getpid();
  public static int getppid();
  public static int gettid();
  public static int getuid();
  public static int poll(android.system.StructPollfd[], int)  throws android.system.ErrnoException;
  public static int prctl(int, long, long, long, long)  throws android.system.ErrnoException;
  public static int pread(java.io.FileDescriptor, byte[], int, int, long)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int pread(java.io.FileDescriptor, java.nio.ByteBuffer, long)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int pwrite(java.io.FileDescriptor, byte[], int, int, long)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int pwrite(java.io.FileDescriptor, java.nio.ByteBuffer, long)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int read(java.io.FileDescriptor, byte[], int, int)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int read(java.io.FileDescriptor, java.nio.ByteBuffer)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int readv(java.io.FileDescriptor, java.lang.Object[], int[], int[])  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int recvfrom(java.io.FileDescriptor, byte[], int, int, int, java.net.InetSocketAddress)  throws android.system.ErrnoException, java.net.SocketException;
  public static int recvfrom(java.io.FileDescriptor, java.nio.ByteBuffer, int, java.net.InetSocketAddress)  throws android.system.ErrnoException, java.net.SocketException;
  public static int sendto(java.io.FileDescriptor, byte[], int, int, int, java.net.InetAddress, int)  throws android.system.ErrnoException, java.net.SocketException;
  public static int sendto(java.io.FileDescriptor, java.nio.ByteBuffer, int, java.net.InetAddress, int)  throws android.system.ErrnoException, java.net.SocketException;
  public static int setsid()  throws android.system.ErrnoException;
  public static int umask(int);
  public static int waitpid(int, android.util.MutableInt, int)  throws android.system.ErrnoException;
  public static int write(java.io.FileDescriptor, byte[], int, int)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int write(java.io.FileDescriptor, java.nio.ByteBuffer)  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static int writev(java.io.FileDescriptor, java.lang.Object[], int[], int[])  throws android.system.ErrnoException, java.io.InterruptedIOException;
  public static long lseek(java.io.FileDescriptor, long, int)  throws android.system.ErrnoException;
  public static long mmap(long, long, int, int, java.io.FileDescriptor, long)  throws android.system.ErrnoException;
  public static long sendfile(java.io.FileDescriptor, java.io.FileDescriptor, android.util.MutableLong, long)  throws android.system.ErrnoException;
  public static long sysconf(int);
  public static void bind(java.io.FileDescriptor, java.net.InetAddress, int)  throws android.system.ErrnoException, java.net.SocketException;
  public static void chmod(java.lang.String, int)  throws android.system.ErrnoException;
  public static void chown(java.lang.String, int, int)  throws android.system.ErrnoException;
  public static void close(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static void connect(java.io.FileDescriptor, java.net.InetAddress, int)  throws android.system.ErrnoException, java.net.SocketException;
  public static void execv(java.lang.String, java.lang.String[])  throws android.system.ErrnoException;
  public static void execve(java.lang.String, java.lang.String[], java.lang.String[])  throws android.system.ErrnoException;
  public static void fchmod(java.io.FileDescriptor, int)  throws android.system.ErrnoException;
  public static void fchown(java.io.FileDescriptor, int, int)  throws android.system.ErrnoException;
  public static void fdatasync(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static void fsync(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static void ftruncate(java.io.FileDescriptor, long)  throws android.system.ErrnoException;
  public static void kill(int, int)  throws android.system.ErrnoException;
  public static void lchown(java.lang.String, int, int)  throws android.system.ErrnoException;
  public static void link(java.lang.String, java.lang.String)  throws android.system.ErrnoException;
  public static void listen(java.io.FileDescriptor, int)  throws android.system.ErrnoException;
  public static void mincore(long, long, byte[])  throws android.system.ErrnoException;
  public static void mkdir(java.lang.String, int)  throws android.system.ErrnoException;
  public static void mkfifo(java.lang.String, int)  throws android.system.ErrnoException;
  public static void mlock(long, long)  throws android.system.ErrnoException;
  public static void msync(long, long, int)  throws android.system.ErrnoException;
  public static void munlock(long, long)  throws android.system.ErrnoException;
  public static void munmap(long, long)  throws android.system.ErrnoException;
  public static void posix_fallocate(java.io.FileDescriptor, long, long)  throws android.system.ErrnoException;
  public static void remove(java.lang.String)  throws android.system.ErrnoException;
  public static void rename(java.lang.String, java.lang.String)  throws android.system.ErrnoException;
  public static void setegid(int)  throws android.system.ErrnoException;
  public static void setenv(java.lang.String, java.lang.String, boolean)  throws android.system.ErrnoException;
  public static void seteuid(int)  throws android.system.ErrnoException;
  public static void setgid(int)  throws android.system.ErrnoException;
  public static void setuid(int)  throws android.system.ErrnoException;
  public static void shutdown(java.io.FileDescriptor, int)  throws android.system.ErrnoException;
  public static void socketpair(int, int, int, java.io.FileDescriptor, java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static void symlink(java.lang.String, java.lang.String)  throws android.system.ErrnoException;
  public static void tcdrain(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static void tcsendbreak(java.io.FileDescriptor, int)  throws android.system.ErrnoException;
  public static void unsetenv(java.lang.String)  throws android.system.ErrnoException;
  public static android.system.StructStat fstat(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static android.system.StructStat lstat(java.lang.String)  throws android.system.ErrnoException;
  public static android.system.StructStat stat(java.lang.String)  throws android.system.ErrnoException;
  public static android.system.StructStatVfs fstatvfs(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static android.system.StructStatVfs statvfs(java.lang.String)  throws android.system.ErrnoException;
  public static android.system.StructUtsname uname();
  public static java.io.FileDescriptor accept(java.io.FileDescriptor, java.net.InetSocketAddress)  throws android.system.ErrnoException, java.net.SocketException;
  public static java.io.FileDescriptor dup(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static java.io.FileDescriptor dup2(java.io.FileDescriptor, int)  throws android.system.ErrnoException;
  public static java.io.FileDescriptor open(java.lang.String, int, int)  throws android.system.ErrnoException;
  public static java.io.FileDescriptor socket(int, int, int)  throws android.system.ErrnoException;
  public static java.io.FileDescriptor[] pipe()  throws android.system.ErrnoException;
  public static java.lang.String gai_strerror(int);
  public static java.lang.String getenv(java.lang.String);
  public static java.lang.String if_indextoname(int);
  public static java.lang.String readlink(java.lang.String)  throws android.system.ErrnoException;
  public static java.lang.String strerror(int);
  public static java.lang.String strsignal(int);
  public static java.lang.String[] environ();
  public static java.net.InetAddress inet_pton(int, java.lang.String);
  public static java.net.SocketAddress getpeername(java.io.FileDescriptor)  throws android.system.ErrnoException;
  public static java.net.SocketAddress getsockname(java.io.FileDescriptor)  throws android.system.ErrnoException;
}
public final class android.system.OsConstants
  extends java.lang.Object
{
  public static boolean S_ISBLK(int);
  public static boolean S_ISCHR(int);
  public static boolean S_ISDIR(int);
  public static boolean S_ISFIFO(int);
  public static boolean S_ISLNK(int);
  public static boolean S_ISREG(int);
  public static boolean S_ISSOCK(int);
  public static boolean WCOREDUMP(int);
  public static boolean WIFEXITED(int);
  public static boolean WIFSIGNALED(int);
  public static boolean WIFSTOPPED(int);
  public static int WEXITSTATUS(int);
  public static int WSTOPSIG(int);
  public static int WTERMSIG(int);
  public static java.lang.String errnoName(int);
  public static java.lang.String gaiName(int);
  public static final int AF_INET6;
  public static final int AF_INET;
  public static final int AF_UNIX;
  public static final int AF_UNSPEC;
  public static final int AI_ADDRCONFIG;
  public static final int AI_ALL;
  public static final int AI_CANONNAME;
  public static final int AI_NUMERICHOST;
  public static final int AI_NUMERICSERV;
  public static final int AI_PASSIVE;
  public static final int AI_V4MAPPED;
  public static final int CAP_AUDIT_CONTROL;
  public static final int CAP_AUDIT_WRITE;
  public static final int CAP_BLOCK_SUSPEND;
  public static final int CAP_CHOWN;
  public static final int CAP_DAC_OVERRIDE;
  public static final int CAP_DAC_READ_SEARCH;
  public static final int CAP_FOWNER;
  public static final int CAP_FSETID;
  public static final int CAP_IPC_LOCK;
  public static final int CAP_IPC_OWNER;
  public static final int CAP_KILL;
  public static final int CAP_LAST_CAP;
  public static final int CAP_LEASE;
  public static final int CAP_LINUX_IMMUTABLE;
  public static final int CAP_MAC_ADMIN;
  public static final int CAP_MAC_OVERRIDE;
  public static final int CAP_MKNOD;
  public static final int CAP_NET_ADMIN;
  public static final int CAP_NET_BIND_SERVICE;
  public static final int CAP_NET_BROADCAST;
  public static final int CAP_NET_RAW;
  public static final int CAP_SETFCAP;
  public static final int CAP_SETGID;
  public static final int CAP_SETPCAP;
  public static final int CAP_SETUID;
  public static final int CAP_SYSLOG;
  public static final int CAP_SYS_ADMIN;
  public static final int CAP_SYS_BOOT;
  public static final int CAP_SYS_CHROOT;
  public static final int CAP_SYS_MODULE;
  public static final int CAP_SYS_NICE;
  public static final int CAP_SYS_PACCT;
  public static final int CAP_SYS_PTRACE;
  public static final int CAP_SYS_RAWIO;
  public static final int CAP_SYS_RESOURCE;
  public static final int CAP_SYS_TIME;
  public static final int CAP_SYS_TTY_CONFIG;
  public static final int CAP_WAKE_ALARM;
  public static final int E2BIG;
  public static final int EACCES;
  public static final int EADDRINUSE;
  public static final int EADDRNOTAVAIL;
  public static final int EAFNOSUPPORT;
  public static final int EAGAIN;
  public static final int EAI_AGAIN;
  public static final int EAI_BADFLAGS;
  public static final int EAI_FAIL;
  public static final int EAI_FAMILY;
  public static final int EAI_MEMORY;
  public static final int EAI_NODATA;
  public static final int EAI_NONAME;
  public static final int EAI_OVERFLOW;
  public static final int EAI_SERVICE;
  public static final int EAI_SOCKTYPE;
  public static final int EAI_SYSTEM;
  public static final int EALREADY;
  public static final int EBADF;
  public static final int EBADMSG;
  public static final int EBUSY;
  public static final int ECANCELED;
  public static final int ECHILD;
  public static final int ECONNABORTED;
  public static final int ECONNREFUSED;
  public static final int ECONNRESET;
  public static final int EDEADLK;
  public static final int EDESTADDRREQ;
  public static final int EDOM;
  public static final int EDQUOT;
  public static final int EEXIST;
  public static final int EFAULT;
  public static final int EFBIG;
  public static final int EHOSTUNREACH;
  public static final int EIDRM;
  public static final int EILSEQ;
  public static final int EINPROGRESS;
  public static final int EINTR;
  public static final int EINVAL;
  public static final int EIO;
  public static final int EISCONN;
  public static final int EISDIR;
  public static final int ELOOP;
  public static final int EMFILE;
  public static final int EMLINK;
  public static final int EMSGSIZE;
  public static final int EMULTIHOP;
  public static final int ENAMETOOLONG;
  public static final int ENETDOWN;
  public static final int ENETRESET;
  public static final int ENETUNREACH;
  public static final int ENFILE;
  public static final int ENOBUFS;
  public static final int ENODATA;
  public static final int ENODEV;
  public static final int ENOENT;
  public static final int ENOEXEC;
  public static final int ENOLCK;
  public static final int ENOLINK;
  public static final int ENOMEM;
  public static final int ENOMSG;
  public static final int ENOPROTOOPT;
  public static final int ENOSPC;
  public static final int ENOSR;
  public static final int ENOSTR;
  public static final int ENOSYS;
  public static final int ENOTCONN;
  public static final int ENOTDIR;
  public static final int ENOTEMPTY;
  public static final int ENOTSOCK;
  public static final int ENOTSUP;
  public static final int ENOTTY;
  public static final int ENXIO;
  public static final int EOPNOTSUPP;
  public static final int EOVERFLOW;
  public static final int EPERM;
  public static final int EPIPE;
  public static final int EPROTO;
  public static final int EPROTONOSUPPORT;
  public static final int EPROTOTYPE;
  public static final int ERANGE;
  public static final int EROFS;
  public static final int ESPIPE;
  public static final int ESRCH;
  public static final int ESTALE;
  public static final int ETIME;
  public static final int ETIMEDOUT;
  public static final int ETXTBSY;
  public static final int EXDEV;
  public static final int EXIT_FAILURE;
  public static final int EXIT_SUCCESS;
  public static final int FD_CLOEXEC;
  public static final int FIONREAD;
  public static final int F_DUPFD;
  public static final int F_GETFD;
  public static final int F_GETFL;
  public static final int F_GETLK64;
  public static final int F_GETLK;
  public static final int F_GETOWN;
  public static final int F_OK;
  public static final int F_RDLCK;
  public static final int F_SETFD;
  public static final int F_SETFL;
  public static final int F_SETLK64;
  public static final int F_SETLK;
  public static final int F_SETLKW64;
  public static final int F_SETLKW;
  public static final int F_SETOWN;
  public static final int F_UNLCK;
  public static final int F_WRLCK;
  public static final int IFA_F_DADFAILED;
  public static final int IFA_F_DEPRECATED;
  public static final int IFA_F_HOMEADDRESS;
  public static final int IFA_F_NODAD;
  public static final int IFA_F_OPTIMISTIC;
  public static final int IFA_F_PERMANENT;
  public static final int IFA_F_SECONDARY;
  public static final int IFA_F_TEMPORARY;
  public static final int IFA_F_TENTATIVE;
  public static final int IFF_ALLMULTI;
  public static final int IFF_AUTOMEDIA;
  public static final int IFF_BROADCAST;
  public static final int IFF_DEBUG;
  public static final int IFF_DYNAMIC;
  public static final int IFF_LOOPBACK;
  public static final int IFF_MASTER;
  public static final int IFF_MULTICAST;
  public static final int IFF_NOARP;
  public static final int IFF_NOTRAILERS;
  public static final int IFF_POINTOPOINT;
  public static final int IFF_PORTSEL;
  public static final int IFF_PROMISC;
  public static final int IFF_RUNNING;
  public static final int IFF_SLAVE;
  public static final int IFF_UP;
  public static final int IPPROTO_ICMP;
  public static final int IPPROTO_ICMPV6;
  public static final int IPPROTO_IP;
  public static final int IPPROTO_IPV6;
  public static final int IPPROTO_RAW;
  public static final int IPPROTO_TCP;
  public static final int IPPROTO_UDP;
  public static final int IPV6_CHECKSUM;
  public static final int IPV6_MULTICAST_HOPS;
  public static final int IPV6_MULTICAST_IF;
  public static final int IPV6_MULTICAST_LOOP;
  public static final int IPV6_RECVDSTOPTS;
  public static final int IPV6_RECVHOPLIMIT;
  public static final int IPV6_RECVHOPOPTS;
  public static final int IPV6_RECVPKTINFO;
  public static final int IPV6_RECVRTHDR;
  public static final int IPV6_RECVTCLASS;
  public static final int IPV6_TCLASS;
  public static final int IPV6_UNICAST_HOPS;
  public static final int IPV6_V6ONLY;
  public static final int IP_MULTICAST_IF;
  public static final int IP_MULTICAST_LOOP;
  public static final int IP_MULTICAST_TTL;
  public static final int IP_TOS;
  public static final int IP_TTL;
  public static final int MAP_FIXED;
  public static final int MAP_PRIVATE;
  public static final int MAP_SHARED;
  public static final int MCAST_BLOCK_SOURCE;
  public static final int MCAST_JOIN_GROUP;
  public static final int MCAST_JOIN_SOURCE_GROUP;
  public static final int MCAST_LEAVE_GROUP;
  public static final int MCAST_LEAVE_SOURCE_GROUP;
  public static final int MCAST_UNBLOCK_SOURCE;
  public static final int MCL_CURRENT;
  public static final int MCL_FUTURE;
  public static final int MSG_CTRUNC;
  public static final int MSG_DONTROUTE;
  public static final int MSG_EOR;
  public static final int MSG_OOB;
  public static final int MSG_PEEK;
  public static final int MSG_TRUNC;
  public static final int MSG_WAITALL;
  public static final int MS_ASYNC;
  public static final int MS_INVALIDATE;
  public static final int MS_SYNC;
  public static final int NI_DGRAM;
  public static final int NI_NAMEREQD;
  public static final int NI_NOFQDN;
  public static final int NI_NUMERICHOST;
  public static final int NI_NUMERICSERV;
  public static final int O_ACCMODE;
  public static final int O_APPEND;
  public static final int O_CREAT;
  public static final int O_EXCL;
  public static final int O_NOCTTY;
  public static final int O_NOFOLLOW;
  public static final int O_NONBLOCK;
  public static final int O_RDONLY;
  public static final int O_RDWR;
  public static final int O_SYNC;
  public static final int O_TRUNC;
  public static final int O_WRONLY;
  public static final int POLLERR;
  public static final int POLLHUP;
  public static final int POLLIN;
  public static final int POLLNVAL;
  public static final int POLLOUT;
  public static final int POLLPRI;
  public static final int POLLRDBAND;
  public static final int POLLRDNORM;
  public static final int POLLWRBAND;
  public static final int POLLWRNORM;
  public static final int PROT_EXEC;
  public static final int PROT_NONE;
  public static final int PROT_READ;
  public static final int PROT_WRITE;
  public static final int PR_GET_DUMPABLE;
  public static final int PR_SET_DUMPABLE;
  public static final int PR_SET_NO_NEW_PRIVS;
  public static final int RT_SCOPE_HOST;
  public static final int RT_SCOPE_LINK;
  public static final int RT_SCOPE_NOWHERE;
  public static final int RT_SCOPE_SITE;
  public static final int RT_SCOPE_UNIVERSE;
  public static final int R_OK;
  public static final int SEEK_CUR;
  public static final int SEEK_END;
  public static final int SEEK_SET;
  public static final int SHUT_RD;
  public static final int SHUT_RDWR;
  public static final int SHUT_WR;
  public static final int SIGABRT;
  public static final int SIGALRM;
  public static final int SIGBUS;
  public static final int SIGCHLD;
  public static final int SIGCONT;
  public static final int SIGFPE;
  public static final int SIGHUP;
  public static final int SIGILL;
  public static final int SIGINT;
  public static final int SIGIO;
  public static final int SIGKILL;
  public static final int SIGPIPE;
  public static final int SIGPROF;
  public static final int SIGPWR;
  public static final int SIGQUIT;
  public static final int SIGRTMAX;
  public static final int SIGRTMIN;
  public static final int SIGSEGV;
  public static final int SIGSTKFLT;
  public static final int SIGSTOP;
  public static final int SIGSYS;
  public static final int SIGTERM;
  public static final int SIGTRAP;
  public static final int SIGTSTP;
  public static final int SIGTTIN;
  public static final int SIGTTOU;
  public static final int SIGURG;
  public static final int SIGUSR1;
  public static final int SIGUSR2;
  public static final int SIGVTALRM;
  public static final int SIGWINCH;
  public static final int SIGXCPU;
  public static final int SIGXFSZ;
  public static final int SIOCGIFADDR;
  public static final int SIOCGIFBRDADDR;
  public static final int SIOCGIFDSTADDR;
  public static final int SIOCGIFNETMASK;
  public static final int SOCK_DGRAM;
  public static final int SOCK_RAW;
  public static final int SOCK_SEQPACKET;
  public static final int SOCK_STREAM;
  public static final int SOL_SOCKET;
  public static final int SO_BINDTODEVICE;
  public static final int SO_BROADCAST;
  public static final int SO_DEBUG;
  public static final int SO_DONTROUTE;
  public static final int SO_ERROR;
  public static final int SO_KEEPALIVE;
  public static final int SO_LINGER;
  public static final int SO_OOBINLINE;
  public static final int SO_PASSCRED;
  public static final int SO_PEERCRED;
  public static final int SO_RCVBUF;
  public static final int SO_RCVLOWAT;
  public static final int SO_RCVTIMEO;
  public static final int SO_REUSEADDR;
  public static final int SO_SNDBUF;
  public static final int SO_SNDLOWAT;
  public static final int SO_SNDTIMEO;
  public static final int SO_TYPE;
  public static final int STDERR_FILENO;
  public static final int STDIN_FILENO;
  public static final int STDOUT_FILENO;
  public static final int ST_MANDLOCK;
  public static final int ST_NOATIME;
  public static final int ST_NODEV;
  public static final int ST_NODIRATIME;
  public static final int ST_NOEXEC;
  public static final int ST_NOSUID;
  public static final int ST_RDONLY;
  public static final int ST_RELATIME;
  public static final int ST_SYNCHRONOUS;
  public static final int S_IFBLK;
  public static final int S_IFCHR;
  public static final int S_IFDIR;
  public static final int S_IFIFO;
  public static final int S_IFLNK;
  public static final int S_IFMT;
  public static final int S_IFREG;
  public static final int S_IFSOCK;
  public static final int S_IRGRP;
  public static final int S_IROTH;
  public static final int S_IRUSR;
  public static final int S_IRWXG;
  public static final int S_IRWXO;
  public static final int S_IRWXU;
  public static final int S_ISGID;
  public static final int S_ISUID;
  public static final int S_ISVTX;
  public static final int S_IWGRP;
  public static final int S_IWOTH;
  public static final int S_IWUSR;
  public static final int S_IXGRP;
  public static final int S_IXOTH;
  public static final int S_IXUSR;
  public static final int TCP_NODELAY;
  public static final int WCONTINUED;
  public static final int WEXITED;
  public static final int WNOHANG;
  public static final int WNOWAIT;
  public static final int WSTOPPED;
  public static final int WUNTRACED;
  public static final int W_OK;
  public static final int X_OK;
  public static final int _SC_2_CHAR_TERM;
  public static final int _SC_2_C_BIND;
  public static final int _SC_2_C_DEV;
  public static final int _SC_2_C_VERSION;
  public static final int _SC_2_FORT_DEV;
  public static final int _SC_2_FORT_RUN;
  public static final int _SC_2_LOCALEDEF;
  public static final int _SC_2_SW_DEV;
  public static final int _SC_2_UPE;
  public static final int _SC_2_VERSION;
  public static final int _SC_AIO_LISTIO_MAX;
  public static final int _SC_AIO_MAX;
  public static final int _SC_AIO_PRIO_DELTA_MAX;
  public static final int _SC_ARG_MAX;
  public static final int _SC_ASYNCHRONOUS_IO;
  public static final int _SC_ATEXIT_MAX;
  public static final int _SC_AVPHYS_PAGES;
  public static final int _SC_BC_BASE_MAX;
  public static final int _SC_BC_DIM_MAX;
  public static final int _SC_BC_SCALE_MAX;
  public static final int _SC_BC_STRING_MAX;
  public static final int _SC_CHILD_MAX;
  public static final int _SC_CLK_TCK;
  public static final int _SC_COLL_WEIGHTS_MAX;
  public static final int _SC_DELAYTIMER_MAX;
  public static final int _SC_EXPR_NEST_MAX;
  public static final int _SC_FSYNC;
  public static final int _SC_GETGR_R_SIZE_MAX;
  public static final int _SC_GETPW_R_SIZE_MAX;
  public static final int _SC_IOV_MAX;
  public static final int _SC_JOB_CONTROL;
  public static final int _SC_LINE_MAX;
  public static final int _SC_LOGIN_NAME_MAX;
  public static final int _SC_MAPPED_FILES;
  public static final int _SC_MEMLOCK;
  public static final int _SC_MEMLOCK_RANGE;
  public static final int _SC_MEMORY_PROTECTION;
  public static final int _SC_MESSAGE_PASSING;
  public static final int _SC_MQ_OPEN_MAX;
  public static final int _SC_MQ_PRIO_MAX;
  public static final int _SC_NGROUPS_MAX;
  public static final int _SC_NPROCESSORS_CONF;
  public static final int _SC_NPROCESSORS_ONLN;
  public static final int _SC_OPEN_MAX;
  public static final int _SC_PAGESIZE;
  public static final int _SC_PAGE_SIZE;
  public static final int _SC_PASS_MAX;
  public static final int _SC_PHYS_PAGES;
  public static final int _SC_PRIORITIZED_IO;
  public static final int _SC_PRIORITY_SCHEDULING;
  public static final int _SC_REALTIME_SIGNALS;
  public static final int _SC_RE_DUP_MAX;
  public static final int _SC_RTSIG_MAX;
  public static final int _SC_SAVED_IDS;
  public static final int _SC_SEMAPHORES;
  public static final int _SC_SEM_NSEMS_MAX;
  public static final int _SC_SEM_VALUE_MAX;
  public static final int _SC_SHARED_MEMORY_OBJECTS;
  public static final int _SC_SIGQUEUE_MAX;
  public static final int _SC_STREAM_MAX;
  public static final int _SC_SYNCHRONIZED_IO;
  public static final int _SC_THREADS;
  public static final int _SC_THREAD_ATTR_STACKADDR;
  public static final int _SC_THREAD_ATTR_STACKSIZE;
  public static final int _SC_THREAD_DESTRUCTOR_ITERATIONS;
  public static final int _SC_THREAD_KEYS_MAX;
  public static final int _SC_THREAD_PRIORITY_SCHEDULING;
  public static final int _SC_THREAD_PRIO_INHERIT;
  public static final int _SC_THREAD_PRIO_PROTECT;
  public static final int _SC_THREAD_SAFE_FUNCTIONS;
  public static final int _SC_THREAD_STACK_MIN;
  public static final int _SC_THREAD_THREADS_MAX;
  public static final int _SC_TIMERS;
  public static final int _SC_TIMER_MAX;
  public static final int _SC_TTY_NAME_MAX;
  public static final int _SC_TZNAME_MAX;
  public static final int _SC_VERSION;
  public static final int _SC_XBS5_ILP32_OFF32;
  public static final int _SC_XBS5_ILP32_OFFBIG;
  public static final int _SC_XBS5_LP64_OFF64;
  public static final int _SC_XBS5_LPBIG_OFFBIG;
  public static final int _SC_XOPEN_CRYPT;
  public static final int _SC_XOPEN_ENH_I18N;
  public static final int _SC_XOPEN_LEGACY;
  public static final int _SC_XOPEN_REALTIME;
  public static final int _SC_XOPEN_REALTIME_THREADS;
  public static final int _SC_XOPEN_SHM;
  public static final int _SC_XOPEN_UNIX;
  public static final int _SC_XOPEN_VERSION;
  public static final int _SC_XOPEN_XCU_VERSION;
}
public final class android.system.StructPollfd
  extends java.lang.Object
{
  public void <init>();
  public java.lang.String toString();
  public short events;
  public short revents;
  public java.io.FileDescriptor fd;
  public java.lang.Object userData;
}
public final class android.system.StructStat
  extends java.lang.Object
{
  public void <init>(long, long, int, long, int, int, long, long, long, long, long, long, long);
  public java.lang.String toString();
  public final int st_gid;
  public final int st_mode;
  public final int st_uid;
  public final long st_atime;
  public final long st_blksize;
  public final long st_blocks;
  public final long st_ctime;
  public final long st_dev;
  public final long st_ino;
  public final long st_mtime;
  public final long st_nlink;
  public final long st_rdev;
  public final long st_size;
}
public final class android.system.StructStatVfs
  extends java.lang.Object
{
  public void <init>(long, long, long, long, long, long, long, long, long, long, long);
  public java.lang.String toString();
  public final long f_bavail;
  public final long f_bfree;
  public final long f_blocks;
  public final long f_bsize;
  public final long f_favail;
  public final long f_ffree;
  public final long f_files;
  public final long f_flag;
  public final long f_frsize;
  public final long f_fsid;
  public final long f_namemax;
}
public final class android.system.StructUtsname
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String toString();
  public final java.lang.String machine;
  public final java.lang.String nodename;
  public final java.lang.String release;
  public final java.lang.String sysname;
  public final java.lang.String version;
}
public final class android.telecom.Call
  extends java.lang.Object
{
  public int getState();
  public void answer(int);
  public void conference(android.telecom.Call);
  public void disconnect();
  public void hold();
  public void mergeConference();
  public void phoneAccountSelected(android.telecom.PhoneAccountHandle, boolean);
  public void playDtmfTone(char);
  public void postDialContinue(boolean);
  public void registerCallback(android.telecom.Call$Callback);
  public void registerCallback(android.telecom.Call$Callback, android.os.Handler);
  public void reject(boolean, java.lang.String);
  public void splitFromConference();
  public void stopDtmfTone();
  public void swapConference();
  public void unhold();
  public void unregisterCallback(android.telecom.Call$Callback);
  public android.telecom.Call getParent();
  public android.telecom.Call$Details getDetails();
  public android.telecom.InCallService$VideoCall getVideoCall();
  public java.lang.String getRemainingPostDialSequence();
  public java.lang.String toString();
  public java.util.List getCannedTextResponses();
  public java.util.List getChildren();
  public java.util.List getConferenceableCalls();
  public static final int STATE_ACTIVE;
  public static final int STATE_CONNECTING;
  public static final int STATE_DIALING;
  public static final int STATE_DISCONNECTED;
  public static final int STATE_DISCONNECTING;
  public static final int STATE_HOLDING;
  public static final int STATE_NEW;
  public static final int STATE_RINGING;
  public static final int STATE_SELECT_PHONE_ACCOUNT;
  public static final java.lang.String AVAILABLE_PHONE_ACCOUNTS;
}
public abstract class android.telecom.Call$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onCallDestroyed(android.telecom.Call);
  public void onCannedTextResponsesLoaded(android.telecom.Call, java.util.List);
  public void onChildrenChanged(android.telecom.Call, java.util.List);
  public void onConferenceableCallsChanged(android.telecom.Call, java.util.List);
  public void onDetailsChanged(android.telecom.Call, android.telecom.Call$Details);
  public void onParentChanged(android.telecom.Call, android.telecom.Call);
  public void onPostDialWait(android.telecom.Call, java.lang.String);
  public void onStateChanged(android.telecom.Call, int);
  public void onVideoCallChanged(android.telecom.Call, android.telecom.InCallService$VideoCall);
}
public class android.telecom.Call$Details
  extends java.lang.Object
{
  public static boolean can(int, int);
  public static boolean hasProperty(int, int);
  public static java.lang.String capabilitiesToString(int);
  public static java.lang.String propertiesToString(int);
  public final long getConnectTimeMillis();
  public boolean can(int);
  public boolean equals(java.lang.Object);
  public boolean hasProperty(int);
  public int getCallCapabilities();
  public int getCallProperties();
  public int getCallerDisplayNamePresentation();
  public int getHandlePresentation();
  public int getVideoState();
  public int hashCode();
  public android.net.Uri getHandle();
  public android.os.Bundle getExtras();
  public android.os.Bundle getIntentExtras();
  public android.telecom.DisconnectCause getDisconnectCause();
  public android.telecom.GatewayInfo getGatewayInfo();
  public android.telecom.PhoneAccountHandle getAccountHandle();
  public android.telecom.StatusHints getStatusHints();
  public java.lang.String getCallerDisplayName();
  public java.lang.String toString();
  public static final int CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO;
  public static final int CAPABILITY_CAN_PAUSE_VIDEO;
  public static final int CAPABILITY_DISCONNECT_FROM_CONFERENCE;
  public static final int CAPABILITY_HOLD;
  public static final int CAPABILITY_MANAGE_CONFERENCE;
  public static final int CAPABILITY_MERGE_CONFERENCE;
  public static final int CAPABILITY_MUTE;
  public static final int CAPABILITY_RESPOND_VIA_TEXT;
  public static final int CAPABILITY_SEPARATE_FROM_CONFERENCE;
  public static final int CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL;
  public static final int CAPABILITY_SUPPORTS_VT_LOCAL_RX;
  public static final int CAPABILITY_SUPPORTS_VT_LOCAL_TX;
  public static final int CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL;
  public static final int CAPABILITY_SUPPORTS_VT_REMOTE_RX;
  public static final int CAPABILITY_SUPPORTS_VT_REMOTE_TX;
  public static final int CAPABILITY_SUPPORT_HOLD;
  public static final int CAPABILITY_SWAP_CONFERENCE;
  public static final int PROPERTY_CONFERENCE;
  public static final int PROPERTY_EMERGENCY_CALLBACK_MODE;
  public static final int PROPERTY_ENTERPRISE_CALL;
  public static final int PROPERTY_GENERIC_CONFERENCE;
  public static final int PROPERTY_HIGH_DEF_AUDIO;
  public static final int PROPERTY_WIFI;
}
public final class android.telecom.CallAudioState
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static java.lang.String audioRouteToString(int);
  public void <init>(boolean, int, int);
  public boolean equals(java.lang.Object);
  public boolean isMuted();
  public int describeContents();
  public int getRoute();
  public int getSupportedRouteMask();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int ROUTE_BLUETOOTH;
  public static final int ROUTE_EARPIECE;
  public static final int ROUTE_SPEAKER;
  public static final int ROUTE_WIRED_HEADSET;
  public static final int ROUTE_WIRED_OR_EARPIECE;
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.telecom.CallScreeningService
  extends android.app.Service
{
  public void <init>();
  public final void respondToCall(android.telecom.Call$Details, android.telecom.CallScreeningService$CallResponse);
  public abstract void onScreenCall(android.telecom.Call$Details);
  public boolean onUnbind(android.content.Intent);
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String SERVICE_INTERFACE;
}
public class android.telecom.CallScreeningService$CallResponse
  extends java.lang.Object
{
  public boolean getDisallowCall();
  public boolean getRejectCall();
  public boolean getSkipCallLog();
  public boolean getSkipNotification();
}
public class android.telecom.CallScreeningService$CallResponse$Builder
  extends java.lang.Object
{
  public void <init>();
  public android.telecom.CallScreeningService$CallResponse build();
  public android.telecom.CallScreeningService$CallResponse$Builder setDisallowCall(boolean);
  public android.telecom.CallScreeningService$CallResponse$Builder setRejectCall(boolean);
  public android.telecom.CallScreeningService$CallResponse$Builder setSkipCallLog(boolean);
  public android.telecom.CallScreeningService$CallResponse$Builder setSkipNotification(boolean);
}
public abstract class android.telecom.Conference
  extends android.telecom.Conferenceable
{
  public void <init>(android.telecom.PhoneAccountHandle);
  public final boolean addConnection(android.telecom.Connection);
  public final int getConnectionCapabilities();
  public final int getState();
  public final long getConnectionTime();
  public final void destroy();
  public final void removeConnection(android.telecom.Connection);
  public final void setActive();
  public final void setConferenceableConnections(java.util.List);
  public final void setConnectionCapabilities(int);
  public final void setConnectionTime(long);
  public final void setDialing();
  public final void setDisconnected(android.telecom.DisconnectCause);
  public final void setExtras(android.os.Bundle);
  public final void setOnHold();
  public final void setStatusHints(android.telecom.StatusHints);
  public final void setVideoProvider(android.telecom.Connection, android.telecom.Connection$VideoProvider);
  public final void setVideoState(android.telecom.Connection, int);
  public final android.os.Bundle getExtras();
  public final android.telecom.CallAudioState getCallAudioState();
  public final android.telecom.DisconnectCause getDisconnectCause();
  public final android.telecom.PhoneAccountHandle getPhoneAccountHandle();
  public final android.telecom.StatusHints getStatusHints();
  public final java.util.List getConferenceableConnections();
  public final java.util.List getConnections();
  public int getVideoState();
  public void onCallAudioStateChanged(android.telecom.CallAudioState);
  public void onConnectionAdded(android.telecom.Connection);
  public void onDisconnect();
  public void onHold();
  public void onMerge();
  public void onMerge(android.telecom.Connection);
  public void onPlayDtmfTone(char);
  public void onSeparate(android.telecom.Connection);
  public void onStopDtmfTone();
  public void onSwap();
  public void onUnhold();
  public android.telecom.Connection$VideoProvider getVideoProvider();
  public java.lang.String toString();
  public static final long CONNECT_TIME_NOT_SPECIFIED;
}
public abstract class android.telecom.Conferenceable
  extends java.lang.Object
{
}
public abstract class android.telecom.Connection
  extends android.telecom.Conferenceable
{
  public static android.telecom.Connection createCanceledConnection();
  public static android.telecom.Connection createFailedConnection(android.telecom.DisconnectCause);
  public static java.lang.String capabilitiesToString(int);
  public static java.lang.String stateToString(int);
  public void <init>();
  public final boolean getAudioModeIsVoip();
  public final boolean isRingbackRequested();
  public final int getAddressPresentation();
  public final int getCallerDisplayNamePresentation();
  public final int getConnectionCapabilities();
  public final int getState();
  public final void destroy();
  public final void setActive();
  public final void setAddress(android.net.Uri, int);
  public final void setAudioModeIsVoip(boolean);
  public final void setCallerDisplayName(java.lang.String, int);
  public final void setConferenceableConnections(java.util.List);
  public final void setConferenceables(java.util.List);
  public final void setConnectionCapabilities(int);
  public final void setDialing();
  public final void setDisconnected(android.telecom.DisconnectCause);
  public final void setExtras(android.os.Bundle);
  public final void setInitialized();
  public final void setInitializing();
  public final void setNextPostDialChar(char);
  public final void setOnHold();
  public final void setPostDialWait(java.lang.String);
  public final void setRingbackRequested(boolean);
  public final void setRinging();
  public final void setStatusHints(android.telecom.StatusHints);
  public final void setVideoProvider(android.telecom.Connection$VideoProvider);
  public final void setVideoState(int);
  public final android.net.Uri getAddress();
  public final android.os.Bundle getExtras();
  public final android.telecom.CallAudioState getCallAudioState();
  public final android.telecom.Conference getConference();
  public final android.telecom.Connection$VideoProvider getVideoProvider();
  public final android.telecom.DisconnectCause getDisconnectCause();
  public final android.telecom.StatusHints getStatusHints();
  public final java.lang.String getCallerDisplayName();
  public final java.util.List getConferenceables();
  public void onAbort();
  public void onAnswer();
  public void onAnswer(int);
  public void onCallAudioStateChanged(android.telecom.CallAudioState);
  public void onDisconnect();
  public void onHold();
  public void onPlayDtmfTone(char);
  public void onPostDialContinue(boolean);
  public void onReject();
  public void onReject(java.lang.String);
  public void onSeparate();
  public void onStateChanged(int);
  public void onStopDtmfTone();
  public void onUnhold();
  public static final int CAPABILITY_CANNOT_DOWNGRADE_VIDEO_TO_AUDIO;
  public static final int CAPABILITY_CAN_PAUSE_VIDEO;
  public static final int CAPABILITY_CAN_SEND_RESPONSE_VIA_CONNECTION;
  public static final int CAPABILITY_CAN_UPGRADE_TO_VIDEO;
  public static final int CAPABILITY_DISCONNECT_FROM_CONFERENCE;
  public static final int CAPABILITY_HOLD;
  public static final int CAPABILITY_MANAGE_CONFERENCE;
  public static final int CAPABILITY_MERGE_CONFERENCE;
  public static final int CAPABILITY_MUTE;
  public static final int CAPABILITY_RESPOND_VIA_TEXT;
  public static final int CAPABILITY_SEPARATE_FROM_CONFERENCE;
  public static final int CAPABILITY_SUPPORTS_VT_LOCAL_BIDIRECTIONAL;
  public static final int CAPABILITY_SUPPORTS_VT_LOCAL_RX;
  public static final int CAPABILITY_SUPPORTS_VT_LOCAL_TX;
  public static final int CAPABILITY_SUPPORTS_VT_REMOTE_BIDIRECTIONAL;
  public static final int CAPABILITY_SUPPORTS_VT_REMOTE_RX;
  public static final int CAPABILITY_SUPPORTS_VT_REMOTE_TX;
  public static final int CAPABILITY_SUPPORT_HOLD;
  public static final int CAPABILITY_SWAP_CONFERENCE;
  public static final int STATE_ACTIVE;
  public static final int STATE_DIALING;
  public static final int STATE_DISCONNECTED;
  public static final int STATE_HOLDING;
  public static final int STATE_INITIALIZING;
  public static final int STATE_NEW;
  public static final int STATE_RINGING;
  public static final java.lang.String EXTRA_CALL_SUBJECT;
  public static final java.lang.String EXTRA_CHILD_ADDRESS;
  public static final java.lang.String EXTRA_LAST_FORWARDED_NUMBER;
}
public abstract class android.telecom.Connection$VideoProvider
  extends java.lang.Object
{
  public void <init>();
  public abstract void onRequestCameraCapabilities();
  public abstract void onRequestConnectionDataUsage();
  public abstract void onSendSessionModifyRequest(android.telecom.VideoProfile, android.telecom.VideoProfile);
  public abstract void onSendSessionModifyResponse(android.telecom.VideoProfile);
  public abstract void onSetCamera(java.lang.String);
  public abstract void onSetDeviceOrientation(int);
  public abstract void onSetDisplaySurface(android.view.Surface);
  public abstract void onSetPauseImage(android.net.Uri);
  public abstract void onSetPreviewSurface(android.view.Surface);
  public abstract void onSetZoom(float);
  public void changeCameraCapabilities(android.telecom.VideoProfile$CameraCapabilities);
  public void changePeerDimensions(int, int);
  public void changeVideoQuality(int);
  public void handleCallSessionEvent(int);
  public void receiveSessionModifyRequest(android.telecom.VideoProfile);
  public void receiveSessionModifyResponse(int, android.telecom.VideoProfile, android.telecom.VideoProfile);
  public void setCallDataUsage(long);
  public static final int SESSION_EVENT_CAMERA_FAILURE;
  public static final int SESSION_EVENT_CAMERA_READY;
  public static final int SESSION_EVENT_RX_PAUSE;
  public static final int SESSION_EVENT_RX_RESUME;
  public static final int SESSION_EVENT_TX_START;
  public static final int SESSION_EVENT_TX_STOP;
  public static final int SESSION_MODIFY_REQUEST_FAIL;
  public static final int SESSION_MODIFY_REQUEST_INVALID;
  public static final int SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE;
  public static final int SESSION_MODIFY_REQUEST_SUCCESS;
  public static final int SESSION_MODIFY_REQUEST_TIMED_OUT;
}
public final class android.telecom.ConnectionRequest
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.telecom.PhoneAccountHandle, android.net.Uri, android.os.Bundle);
  public void <init>(android.telecom.PhoneAccountHandle, android.net.Uri, android.os.Bundle, int);
  public int describeContents();
  public int getVideoState();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.Uri getAddress();
  public android.os.Bundle getExtras();
  public android.telecom.PhoneAccountHandle getAccountHandle();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.telecom.ConnectionService
  extends android.app.Service
{
  public void <init>();
  public final void addConference(android.telecom.Conference);
  public final void addExistingConnection(android.telecom.PhoneAccountHandle, android.telecom.Connection);
  public final void conferenceRemoteConnections(android.telecom.RemoteConnection, android.telecom.RemoteConnection);
  public final android.os.IBinder onBind(android.content.Intent);
  public final android.telecom.RemoteConnection createRemoteIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest);
  public final android.telecom.RemoteConnection createRemoteOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest);
  public final java.util.Collection getAllConferences();
  public final java.util.Collection getAllConnections();
  public boolean onUnbind(android.content.Intent);
  public void onConference(android.telecom.Connection, android.telecom.Connection);
  public void onRemoteConferenceAdded(android.telecom.RemoteConference);
  public void onRemoteExistingConnectionAdded(android.telecom.RemoteConnection);
  public android.telecom.Connection onCreateIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest);
  public android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest);
  public static final java.lang.String SERVICE_INTERFACE;
}
public final class android.telecom.DisconnectCause
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int);
  public void <init>(int, java.lang.CharSequence, java.lang.CharSequence, java.lang.String);
  public void <init>(int, java.lang.CharSequence, java.lang.CharSequence, java.lang.String, int);
  public void <init>(int, java.lang.String);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getCode();
  public int getTone();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getDescription();
  public java.lang.CharSequence getLabel();
  public java.lang.String getReason();
  public java.lang.String toString();
  public static final int BUSY;
  public static final int CANCELED;
  public static final int CONNECTION_MANAGER_NOT_SUPPORTED;
  public static final int ERROR;
  public static final int LOCAL;
  public static final int MISSED;
  public static final int OTHER;
  public static final int REJECTED;
  public static final int REMOTE;
  public static final int RESTRICTED;
  public static final int UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telecom.GatewayInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.String, android.net.Uri, android.net.Uri);
  public boolean isEmpty();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public android.net.Uri getGatewayAddress();
  public android.net.Uri getOriginalAddress();
  public java.lang.String getGatewayProviderPackageName();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.telecom.InCallService
  extends android.app.Service
{
  public void <init>();
  public final boolean canAddCall();
  public final void setAudioRoute(int);
  public final void setMuted(boolean);
  public final android.telecom.CallAudioState getCallAudioState();
  public final java.util.List getCalls();
  public boolean onUnbind(android.content.Intent);
  public void onBringToForeground(boolean);
  public void onCallAdded(android.telecom.Call);
  public void onCallAudioStateChanged(android.telecom.CallAudioState);
  public void onCallRemoved(android.telecom.Call);
  public void onCanAddCallChanged(boolean);
  public void onSilenceRinger();
  public android.os.IBinder onBind(android.content.Intent);
  public static final java.lang.String SERVICE_INTERFACE;
}
public abstract class android.telecom.InCallService$VideoCall
  extends java.lang.Object
{
  public void <init>();
  public abstract void registerCallback(android.telecom.InCallService$VideoCall$Callback);
  public abstract void registerCallback(android.telecom.InCallService$VideoCall$Callback, android.os.Handler);
  public abstract void requestCallDataUsage();
  public abstract void requestCameraCapabilities();
  public abstract void sendSessionModifyRequest(android.telecom.VideoProfile);
  public abstract void sendSessionModifyResponse(android.telecom.VideoProfile);
  public abstract void setCamera(java.lang.String);
  public abstract void setDeviceOrientation(int);
  public abstract void setDisplaySurface(android.view.Surface);
  public abstract void setPauseImage(android.net.Uri);
  public abstract void setPreviewSurface(android.view.Surface);
  public abstract void setZoom(float);
  public abstract void unregisterCallback(android.telecom.InCallService$VideoCall$Callback);
}
public abstract class android.telecom.InCallService$VideoCall$Callback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onCallDataUsageChanged(long);
  public abstract void onCallSessionEvent(int);
  public abstract void onCameraCapabilitiesChanged(android.telecom.VideoProfile$CameraCapabilities);
  public abstract void onPeerDimensionsChanged(int, int);
  public abstract void onSessionModifyRequestReceived(android.telecom.VideoProfile);
  public abstract void onSessionModifyResponseReceived(int, android.telecom.VideoProfile, android.telecom.VideoProfile);
  public abstract void onVideoQualityChanged(int);
}
public final class android.telecom.PhoneAccount
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.telecom.PhoneAccount$Builder builder(android.telecom.PhoneAccountHandle, java.lang.CharSequence);
  public boolean hasCapabilities(int);
  public boolean isEnabled();
  public boolean supportsUriScheme(java.lang.String);
  public int describeContents();
  public int getCapabilities();
  public int getHighlightColor();
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.drawable.Icon getIcon();
  public android.net.Uri getAddress();
  public android.net.Uri getSubscriptionAddress();
  public android.os.Bundle getExtras();
  public android.telecom.PhoneAccount$Builder toBuilder();
  public android.telecom.PhoneAccountHandle getAccountHandle();
  public java.lang.CharSequence getLabel();
  public java.lang.CharSequence getShortDescription();
  public java.lang.String toString();
  public java.util.List getSupportedUriSchemes();
  public static final int CAPABILITY_CALL_PROVIDER;
  public static final int CAPABILITY_CALL_SUBJECT;
  public static final int CAPABILITY_CONNECTION_MANAGER;
  public static final int CAPABILITY_PLACE_EMERGENCY_CALLS;
  public static final int CAPABILITY_SIM_SUBSCRIPTION;
  public static final int CAPABILITY_VIDEO_CALLING;
  public static final int CAPABILITY_VIDEO_CALLING_RELIES_ON_PRESENCE;
  public static final int NO_HIGHLIGHT_COLOR;
  public static final int NO_RESOURCE_ID;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String EXTRA_CALL_SUBJECT_CHARACTER_ENCODING;
  public static final java.lang.String EXTRA_CALL_SUBJECT_MAX_LENGTH;
  public static final java.lang.String SCHEME_SIP;
  public static final java.lang.String SCHEME_TEL;
  public static final java.lang.String SCHEME_VOICEMAIL;
}
public class android.telecom.PhoneAccount$Builder
  extends java.lang.Object
{
  public void <init>(android.telecom.PhoneAccount);
  public void <init>(android.telecom.PhoneAccountHandle, java.lang.CharSequence);
  public android.telecom.PhoneAccount build();
  public android.telecom.PhoneAccount$Builder addSupportedUriScheme(java.lang.String);
  public android.telecom.PhoneAccount$Builder setAddress(android.net.Uri);
  public android.telecom.PhoneAccount$Builder setCapabilities(int);
  public android.telecom.PhoneAccount$Builder setExtras(android.os.Bundle);
  public android.telecom.PhoneAccount$Builder setHighlightColor(int);
  public android.telecom.PhoneAccount$Builder setIcon(android.graphics.drawable.Icon);
  public android.telecom.PhoneAccount$Builder setShortDescription(java.lang.CharSequence);
  public android.telecom.PhoneAccount$Builder setSubscriptionAddress(android.net.Uri);
  public android.telecom.PhoneAccount$Builder setSupportedUriSchemes(java.util.List);
}
public final class android.telecom.PhoneAccountHandle
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.content.ComponentName, java.lang.String);
  public void <init>(android.content.ComponentName, java.lang.String, android.os.UserHandle);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getComponentName();
  public android.os.UserHandle getUserHandle();
  public java.lang.String getId();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telecom.RemoteConference
  extends java.lang.Object
{
  public final int getConnectionCapabilities();
  public final int getConnectionProperties();
  public final int getState();
  public final void registerCallback(android.telecom.RemoteConference$Callback);
  public final void registerCallback(android.telecom.RemoteConference$Callback, android.os.Handler);
  public final void unregisterCallback(android.telecom.RemoteConference$Callback);
  public final android.os.Bundle getExtras();
  public final java.util.List getConnections();
  public void disconnect();
  public void hold();
  public void merge();
  public void playDtmfTone(char);
  public void separate(android.telecom.RemoteConnection);
  public void setCallAudioState(android.telecom.CallAudioState);
  public void stopDtmfTone();
  public void swap();
  public void unhold();
  public android.telecom.DisconnectCause getDisconnectCause();
  public java.util.List getConferenceableConnections();
}
public abstract class android.telecom.RemoteConference$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onConferenceableConnectionsChanged(android.telecom.RemoteConference, java.util.List);
  public void onConnectionAdded(android.telecom.RemoteConference, android.telecom.RemoteConnection);
  public void onConnectionCapabilitiesChanged(android.telecom.RemoteConference, int);
  public void onConnectionRemoved(android.telecom.RemoteConference, android.telecom.RemoteConnection);
  public void onDestroyed(android.telecom.RemoteConference);
  public void onDisconnected(android.telecom.RemoteConference, android.telecom.DisconnectCause);
  public void onExtrasChanged(android.telecom.RemoteConference, android.os.Bundle);
  public void onStateChanged(android.telecom.RemoteConference, int, int);
}
public final class android.telecom.RemoteConnection
  extends java.lang.Object
{
  public final android.os.Bundle getExtras();
  public final android.telecom.RemoteConnection$VideoProvider getVideoProvider();
  public boolean isRingbackRequested();
  public boolean isVoipAudioMode();
  public int getAddressPresentation();
  public int getCallerDisplayNamePresentation();
  public int getConnectionCapabilities();
  public int getState();
  public int getVideoState();
  public void abort();
  public void answer();
  public void disconnect();
  public void hold();
  public void playDtmfTone(char);
  public void postDialContinue(boolean);
  public void registerCallback(android.telecom.RemoteConnection$Callback);
  public void registerCallback(android.telecom.RemoteConnection$Callback, android.os.Handler);
  public void reject();
  public void setCallAudioState(android.telecom.CallAudioState);
  public void stopDtmfTone();
  public void unhold();
  public void unregisterCallback(android.telecom.RemoteConnection$Callback);
  public android.net.Uri getAddress();
  public android.telecom.DisconnectCause getDisconnectCause();
  public android.telecom.RemoteConference getConference();
  public android.telecom.StatusHints getStatusHints();
  public java.lang.CharSequence getCallerDisplayName();
  public java.util.List getConferenceableConnections();
}
public abstract class android.telecom.RemoteConnection$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onAddressChanged(android.telecom.RemoteConnection, android.net.Uri, int);
  public void onCallerDisplayNameChanged(android.telecom.RemoteConnection, java.lang.String, int);
  public void onConferenceChanged(android.telecom.RemoteConnection, android.telecom.RemoteConference);
  public void onConferenceableConnectionsChanged(android.telecom.RemoteConnection, java.util.List);
  public void onConnectionCapabilitiesChanged(android.telecom.RemoteConnection, int);
  public void onDestroyed(android.telecom.RemoteConnection);
  public void onDisconnected(android.telecom.RemoteConnection, android.telecom.DisconnectCause);
  public void onExtrasChanged(android.telecom.RemoteConnection, android.os.Bundle);
  public void onPostDialChar(android.telecom.RemoteConnection, char);
  public void onPostDialWait(android.telecom.RemoteConnection, java.lang.String);
  public void onRingbackRequested(android.telecom.RemoteConnection, boolean);
  public void onStateChanged(android.telecom.RemoteConnection, int);
  public void onStatusHintsChanged(android.telecom.RemoteConnection, android.telecom.StatusHints);
  public void onVideoProviderChanged(android.telecom.RemoteConnection, android.telecom.RemoteConnection$VideoProvider);
  public void onVideoStateChanged(android.telecom.RemoteConnection, int);
  public void onVoipAudioChanged(android.telecom.RemoteConnection, boolean);
}
public class android.telecom.RemoteConnection$VideoProvider
  extends java.lang.Object
{
  public void registerCallback(android.telecom.RemoteConnection$VideoProvider$Callback);
  public void requestCallDataUsage();
  public void requestCameraCapabilities();
  public void sendSessionModifyRequest(android.telecom.VideoProfile, android.telecom.VideoProfile);
  public void sendSessionModifyResponse(android.telecom.VideoProfile);
  public void setCamera(java.lang.String);
  public void setDeviceOrientation(int);
  public void setDisplaySurface(android.view.Surface);
  public void setPauseImage(android.net.Uri);
  public void setPreviewSurface(android.view.Surface);
  public void setZoom(float);
  public void unregisterCallback(android.telecom.RemoteConnection$VideoProvider$Callback);
}
public abstract class android.telecom.RemoteConnection$VideoProvider$Callback
  extends java.lang.Object
{
  public void <init>();
  public void onCallDataUsageChanged(android.telecom.RemoteConnection$VideoProvider, long);
  public void onCallSessionEvent(android.telecom.RemoteConnection$VideoProvider, int);
  public void onCameraCapabilitiesChanged(android.telecom.RemoteConnection$VideoProvider, android.telecom.VideoProfile$CameraCapabilities);
  public void onPeerDimensionsChanged(android.telecom.RemoteConnection$VideoProvider, int, int);
  public void onSessionModifyRequestReceived(android.telecom.RemoteConnection$VideoProvider, android.telecom.VideoProfile);
  public void onSessionModifyResponseReceived(android.telecom.RemoteConnection$VideoProvider, int, android.telecom.VideoProfile, android.telecom.VideoProfile);
  public void onVideoQualityChanged(android.telecom.RemoteConnection$VideoProvider, int);
}
public final class android.telecom.StatusHints
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.CharSequence, android.graphics.drawable.Icon, android.os.Bundle);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.drawable.Icon getIcon();
  public android.os.Bundle getExtras();
  public java.lang.CharSequence getLabel();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telecom.TelecomManager
  extends java.lang.Object
{
  public boolean handleMmi(java.lang.String);
  public boolean handleMmi(java.lang.String, android.telecom.PhoneAccountHandle);
  public boolean isInCall();
  public boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle, java.lang.String);
  public void addNewIncomingCall(android.telecom.PhoneAccountHandle, android.os.Bundle);
  public void cancelMissedCallsNotification();
  public void placeCall(android.net.Uri, android.os.Bundle);
  public void registerPhoneAccount(android.telecom.PhoneAccount);
  public void showInCallScreen(boolean);
  public void silenceRinger();
  public void unregisterPhoneAccount(android.telecom.PhoneAccountHandle);
  public android.content.Intent createManageBlockedNumbersIntent();
  public android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle);
  public android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle);
  public android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String);
  public android.telecom.PhoneAccountHandle getSimCallManager();
  public java.lang.String getDefaultDialerPackage();
  public java.lang.String getLine1Number(android.telecom.PhoneAccountHandle);
  public java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle);
  public java.util.List getCallCapablePhoneAccounts();
  public static final char DTMF_CHARACTER_PAUSE;
  public static final char DTMF_CHARACTER_WAIT;
  public static final int PRESENTATION_ALLOWED;
  public static final int PRESENTATION_PAYPHONE;
  public static final int PRESENTATION_RESTRICTED;
  public static final int PRESENTATION_UNKNOWN;
  public static final java.lang.String ACTION_CHANGE_DEFAULT_DIALER;
  public static final java.lang.String ACTION_CHANGE_PHONE_ACCOUNTS;
  public static final java.lang.String ACTION_CONFIGURE_PHONE_ACCOUNT;
  public static final java.lang.String ACTION_DEFAULT_DIALER_CHANGED;
  public static final java.lang.String ACTION_INCOMING_CALL;
  public static final java.lang.String ACTION_SHOW_CALL_ACCESSIBILITY_SETTINGS;
  public static final java.lang.String ACTION_SHOW_CALL_SETTINGS;
  public static final java.lang.String ACTION_SHOW_MISSED_CALLS_NOTIFICATION;
  public static final java.lang.String ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS;
  public static final java.lang.String EXTRA_CALL_BACK_NUMBER;
  public static final java.lang.String EXTRA_CALL_DISCONNECT_CAUSE;
  public static final java.lang.String EXTRA_CALL_DISCONNECT_MESSAGE;
  public static final java.lang.String EXTRA_CALL_SUBJECT;
  public static final java.lang.String EXTRA_CHANGE_DEFAULT_DIALER_PACKAGE_NAME;
  public static final java.lang.String EXTRA_INCOMING_CALL_ADDRESS;
  public static final java.lang.String EXTRA_INCOMING_CALL_EXTRAS;
  public static final java.lang.String EXTRA_NOTIFICATION_COUNT;
  public static final java.lang.String EXTRA_NOTIFICATION_PHONE_NUMBER;
  public static final java.lang.String EXTRA_OUTGOING_CALL_EXTRAS;
  public static final java.lang.String EXTRA_PHONE_ACCOUNT_HANDLE;
  public static final java.lang.String EXTRA_START_CALL_WITH_SPEAKERPHONE;
  public static final java.lang.String EXTRA_START_CALL_WITH_VIDEO_STATE;
  public static final java.lang.String GATEWAY_ORIGINAL_ADDRESS;
  public static final java.lang.String GATEWAY_PROVIDER_PACKAGE;
  public static final java.lang.String METADATA_IN_CALL_SERVICE_RINGING;
  public static final java.lang.String METADATA_IN_CALL_SERVICE_UI;
}
public class android.telecom.VideoProfile
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static boolean isAudioOnly(int);
  public static boolean isBidirectional(int);
  public static boolean isPaused(int);
  public static boolean isReceptionEnabled(int);
  public static boolean isTransmissionEnabled(int);
  public static boolean isVideo(int);
  public static java.lang.String videoStateToString(int);
  public void <init>(int);
  public void <init>(int, int);
  public int describeContents();
  public int getQuality();
  public int getVideoState();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int QUALITY_DEFAULT;
  public static final int QUALITY_HIGH;
  public static final int QUALITY_LOW;
  public static final int QUALITY_MEDIUM;
  public static final int STATE_AUDIO_ONLY;
  public static final int STATE_BIDIRECTIONAL;
  public static final int STATE_PAUSED;
  public static final int STATE_RX_ENABLED;
  public static final int STATE_TX_ENABLED;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telecom.VideoProfile$CameraCapabilities
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int, int);
  public int describeContents();
  public int getHeight();
  public int getWidth();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telephony.CarrierConfigManager
  extends java.lang.Object
{
  public void notifyConfigChangedForSubId(int);
  public android.os.PersistableBundle getConfig();
  public android.os.PersistableBundle getConfigForSubId(int);
  public static final java.lang.String ACTION_CARRIER_CONFIG_CHANGED;
  public static final java.lang.String KEY_ADDITIONAL_CALL_SETTING_BOOL;
  public static final java.lang.String KEY_ALLOW_ADDING_APNS_BOOL;
  public static final java.lang.String KEY_ALLOW_EMERGENCY_NUMBERS_IN_CALL_LOG_BOOL;
  public static final java.lang.String KEY_ALLOW_EMERGENCY_VIDEO_CALLS_BOOL;
  public static final java.lang.String KEY_ALLOW_LOCAL_DTMF_TONES_BOOL;
  public static final java.lang.String KEY_ALLOW_NON_EMERGENCY_CALLS_IN_ECM_BOOL;
  public static final java.lang.String KEY_ALWAYS_SHOW_EMERGENCY_ALERT_ONOFF_BOOL;
  public static final java.lang.String KEY_APN_EXPAND_BOOL;
  public static final java.lang.String KEY_AUTO_RETRY_ENABLED_BOOL;
  public static final java.lang.String KEY_CARRIER_ALLOW_TURNOFF_IMS_BOOL;
  public static final java.lang.String KEY_CARRIER_FORCE_DISABLE_ETWS_CMAS_TEST_BOOL;
  public static final java.lang.String KEY_CARRIER_IMS_GBA_REQUIRED_BOOL;
  public static final java.lang.String KEY_CARRIER_INSTANT_LETTERING_AVAILABLE_BOOL;
  public static final java.lang.String KEY_CARRIER_INSTANT_LETTERING_ENCODING_STRING;
  public static final java.lang.String KEY_CARRIER_INSTANT_LETTERING_ESCAPED_CHARS_STRING;
  public static final java.lang.String KEY_CARRIER_INSTANT_LETTERING_INVALID_CHARS_STRING;
  public static final java.lang.String KEY_CARRIER_INSTANT_LETTERING_LENGTH_LIMIT_INT;
  public static final java.lang.String KEY_CARRIER_SETTINGS_ENABLE_BOOL;
  public static final java.lang.String KEY_CARRIER_USE_IMS_FIRST_FOR_EMERGENCY_BOOL;
  public static final java.lang.String KEY_CARRIER_VOLTE_AVAILABLE_BOOL;
  public static final java.lang.String KEY_CARRIER_VOLTE_PROVISIONING_REQUIRED_BOOL;
  public static final java.lang.String KEY_CARRIER_VOLTE_TTY_SUPPORTED_BOOL;
  public static final java.lang.String KEY_CARRIER_VT_AVAILABLE_BOOL;
  public static final java.lang.String KEY_CARRIER_VVM_PACKAGE_NAME_STRING;
  public static final java.lang.String KEY_CARRIER_WFC_IMS_AVAILABLE_BOOL;
  public static final java.lang.String KEY_CARRIER_WFC_SUPPORTS_WIFI_ONLY_BOOL;
  public static final java.lang.String KEY_CDMA_DTMF_TONE_DELAY_INT;
  public static final java.lang.String KEY_CDMA_NONROAMING_NETWORKS_STRING_ARRAY;
  public static final java.lang.String KEY_CDMA_ROAMING_NETWORKS_STRING_ARRAY;
  public static final java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_BOOL;
  public static final java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_STRING;
  public static final java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_EXTRA_VAL_STRING;
  public static final java.lang.String KEY_CI_ACTION_ON_SYS_UPDATE_INTENT_STRING;
  public static final java.lang.String KEY_CSP_ENABLED_BOOL;
  public static final java.lang.String KEY_DEFAULT_SIM_CALL_MANAGER_STRING;
  public static final java.lang.String KEY_DISABLE_CDMA_ACTIVATION_CODE_BOOL;
  public static final java.lang.String KEY_DTMF_TYPE_ENABLED_BOOL;
  public static final java.lang.String KEY_DURATION_BLOCKING_DISABLED_AFTER_EMERGENCY_INT;
  public static final java.lang.String KEY_EDITABLE_ENHANCED_4G_LTE_BOOL;
  public static final java.lang.String KEY_ENABLE_DIALER_KEY_VIBRATION_BOOL;
  public static final java.lang.String KEY_FORCE_HOME_NETWORK_BOOL;
  public static final java.lang.String KEY_GSM_DTMF_TONE_DELAY_INT;
  public static final java.lang.String KEY_GSM_NONROAMING_NETWORKS_STRING_ARRAY;
  public static final java.lang.String KEY_GSM_ROAMING_NETWORKS_STRING_ARRAY;
  public static final java.lang.String KEY_HAS_IN_CALL_NOISE_SUPPRESSION_BOOL;
  public static final java.lang.String KEY_HIDE_CARRIER_NETWORK_SETTINGS_BOOL;
  public static final java.lang.String KEY_HIDE_IMS_APN_BOOL;
  public static final java.lang.String KEY_HIDE_PREFERRED_NETWORK_TYPE_BOOL;
  public static final java.lang.String KEY_HIDE_SIM_LOCK_SETTINGS_BOOL;
  public static final java.lang.String KEY_IGNORE_SIM_NETWORK_LOCKED_EVENTS_BOOL;
  public static final java.lang.String KEY_IMS_DTMF_TONE_DELAY_INT;
  public static final java.lang.String KEY_MMS_ALIAS_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_ALIAS_MAX_CHARS_INT;
  public static final java.lang.String KEY_MMS_ALIAS_MIN_CHARS_INT;
  public static final java.lang.String KEY_MMS_ALLOW_ATTACH_AUDIO_BOOL;
  public static final java.lang.String KEY_MMS_APPEND_TRANSACTION_ID_BOOL;
  public static final java.lang.String KEY_MMS_EMAIL_GATEWAY_NUMBER_STRING;
  public static final java.lang.String KEY_MMS_GROUP_MMS_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_HTTP_PARAMS_STRING;
  public static final java.lang.String KEY_MMS_HTTP_SOCKET_TIMEOUT_INT;
  public static final java.lang.String KEY_MMS_MAX_IMAGE_HEIGHT_INT;
  public static final java.lang.String KEY_MMS_MAX_IMAGE_WIDTH_INT;
  public static final java.lang.String KEY_MMS_MAX_MESSAGE_SIZE_INT;
  public static final java.lang.String KEY_MMS_MESSAGE_TEXT_MAX_SIZE_INT;
  public static final java.lang.String KEY_MMS_MMS_DELIVERY_REPORT_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_MMS_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_MMS_READ_REPORT_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_MULTIPART_SMS_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_NAI_SUFFIX_STRING;
  public static final java.lang.String KEY_MMS_NOTIFY_WAP_MMSC_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_RECIPIENT_LIMIT_INT;
  public static final java.lang.String KEY_MMS_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES_BOOL;
  public static final java.lang.String KEY_MMS_SHOW_CELL_BROADCAST_APP_LINKS_BOOL;
  public static final java.lang.String KEY_MMS_SMS_DELIVERY_REPORT_ENABLED_BOOL;
  public static final java.lang.String KEY_MMS_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD_INT;
  public static final java.lang.String KEY_MMS_SMS_TO_MMS_TEXT_THRESHOLD_INT;
  public static final java.lang.String KEY_MMS_SUBJECT_MAX_LENGTH_INT;
  public static final java.lang.String KEY_MMS_SUPPORT_HTTP_CHARSET_HEADER_BOOL;
  public static final java.lang.String KEY_MMS_SUPPORT_MMS_CONTENT_DISPOSITION_BOOL;
  public static final java.lang.String KEY_MMS_UA_PROF_TAG_NAME_STRING;
  public static final java.lang.String KEY_MMS_UA_PROF_URL_STRING;
  public static final java.lang.String KEY_MMS_USER_AGENT_STRING;
  public static final java.lang.String KEY_OPERATOR_SELECTION_EXPAND_BOOL;
  public static final java.lang.String KEY_PREFER_2G_BOOL;
  public static final java.lang.String KEY_REQUIRE_ENTITLEMENT_CHECKS_BOOL;
  public static final java.lang.String KEY_SHOW_APN_SETTING_CDMA_BOOL;
  public static final java.lang.String KEY_SHOW_CDMA_CHOICES_BOOL;
  public static final java.lang.String KEY_SHOW_ICCID_IN_SIM_STATUS_BOOL;
  public static final java.lang.String KEY_SHOW_ONSCREEN_DIAL_BUTTON_BOOL;
  public static final java.lang.String KEY_SIM_NETWORK_UNLOCK_ALLOW_DISMISS_BOOL;
  public static final java.lang.String KEY_SUPPORT_CONFERENCE_CALL_BOOL;
  public static final java.lang.String KEY_SUPPORT_PAUSE_IMS_VIDEO_CALLS_BOOL;
  public static final java.lang.String KEY_SUPPORT_SWAP_AFTER_MERGE_BOOL;
  public static final java.lang.String KEY_USE_HFA_FOR_PROVISIONING_BOOL;
  public static final java.lang.String KEY_USE_OTASP_FOR_PROVISIONING_BOOL;
  public static final java.lang.String KEY_USE_RCS_PRESENCE_BOOL;
  public static final java.lang.String KEY_VOICEMAIL_NOTIFICATION_PERSISTENT_BOOL;
  public static final java.lang.String KEY_VOICE_PRIVACY_DISABLE_UI_BOOL;
  public static final java.lang.String KEY_VOLTE_REPLACEMENT_RAT_INT;
  public static final java.lang.String KEY_VVM_CELLULAR_DATA_REQUIRED_BOOL;
  public static final java.lang.String KEY_VVM_DESTINATION_NUMBER_STRING;
  public static final java.lang.String KEY_VVM_PORT_NUMBER_INT;
  public static final java.lang.String KEY_VVM_PREFETCH_BOOL;
  public static final java.lang.String KEY_VVM_TYPE_STRING;
  public static final java.lang.String KEY_WORLD_PHONE_BOOL;
}
public final class android.telephony.CellIdentityCdma
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getBasestationId();
  public int getLatitude();
  public int getLongitude();
  public int getNetworkId();
  public int getSystemId();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellIdentityGsm
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getArfcn();
  public int getBsic();
  public int getCid();
  public int getLac();
  public int getMcc();
  public int getMnc();
  public int getPsc();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellIdentityLte
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getCi();
  public int getEarfcn();
  public int getMcc();
  public int getMnc();
  public int getPci();
  public int getTac();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellIdentityWcdma
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getCid();
  public int getLac();
  public int getMcc();
  public int getMnc();
  public int getPsc();
  public int getUarfcn();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.telephony.CellInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public abstract void writeToParcel(android.os.Parcel, int);
  public boolean equals(java.lang.Object);
  public boolean isRegistered();
  public int describeContents();
  public int hashCode();
  public long getTimeStamp();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellInfoCdma
  extends android.telephony.CellInfo
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.telephony.CellIdentityCdma getCellIdentity();
  public android.telephony.CellSignalStrengthCdma getCellSignalStrength();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellInfoGsm
  extends android.telephony.CellInfo
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.telephony.CellIdentityGsm getCellIdentity();
  public android.telephony.CellSignalStrengthGsm getCellSignalStrength();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellInfoLte
  extends android.telephony.CellInfo
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.telephony.CellIdentityLte getCellIdentity();
  public android.telephony.CellSignalStrengthLte getCellSignalStrength();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellInfoWcdma
  extends android.telephony.CellInfo
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.telephony.CellIdentityWcdma getCellIdentity();
  public android.telephony.CellSignalStrengthWcdma getCellSignalStrength();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.telephony.CellLocation
  extends java.lang.Object
{
  public static void requestLocationUpdate();
  public static android.telephony.CellLocation getEmpty();
  public void <init>();
}
public abstract class android.telephony.CellSignalStrength
  extends java.lang.Object
{
  public abstract boolean equals(java.lang.Object);
  public abstract int getAsuLevel();
  public abstract int getDbm();
  public abstract int getLevel();
  public abstract int hashCode();
  public static final int SIGNAL_STRENGTH_GOOD;
  public static final int SIGNAL_STRENGTH_GREAT;
  public static final int SIGNAL_STRENGTH_MODERATE;
  public static final int SIGNAL_STRENGTH_NONE_OR_UNKNOWN;
  public static final int SIGNAL_STRENGTH_POOR;
}
public final class android.telephony.CellSignalStrengthCdma
  extends android.telephony.CellSignalStrength
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getAsuLevel();
  public int getCdmaDbm();
  public int getCdmaEcio();
  public int getCdmaLevel();
  public int getDbm();
  public int getEvdoDbm();
  public int getEvdoEcio();
  public int getEvdoLevel();
  public int getEvdoSnr();
  public int getLevel();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellSignalStrengthGsm
  extends android.telephony.CellSignalStrength
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getAsuLevel();
  public int getDbm();
  public int getLevel();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellSignalStrengthLte
  extends android.telephony.CellSignalStrength
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getAsuLevel();
  public int getDbm();
  public int getLevel();
  public int getTimingAdvance();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.telephony.CellSignalStrengthWcdma
  extends android.telephony.CellSignalStrength
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getAsuLevel();
  public int getDbm();
  public int getLevel();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telephony.IccOpenLogicalChannelResponse
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getChannel();
  public int getStatus();
  public void writeToParcel(android.os.Parcel, int);
  public byte[] getSelectResponse();
  public java.lang.String toString();
  public static final int INVALID_CHANNEL;
  public static final int STATUS_MISSING_RESOURCE;
  public static final int STATUS_NO_ERROR;
  public static final int STATUS_NO_SUCH_ELEMENT;
  public static final int STATUS_UNKNOWN_ERROR;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telephony.NeighboringCellInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(int, int);
  public void <init>(int, java.lang.String, int);
  public int describeContents();
  public int getCid();
  public int getLac();
  public int getNetworkType();
  public int getPsc();
  public int getRssi();
  public void setCid(int);
  public void setRssi(int);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int UNKNOWN_CID;
  public static final int UNKNOWN_RSSI;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telephony.PhoneNumberFormattingTextWatcher
  extends java.lang.Object
  implements android.text.TextWatcher
{
  public void <init>();
  public void <init>(java.lang.String);
  public void afterTextChanged(android.text.Editable);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
}
public class android.telephony.PhoneNumberUtils
  extends java.lang.Object
{
  public static final boolean is12Key(char);
  public static final boolean isDialable(char);
  public static final boolean isNonSeparator(char);
  public static final boolean isReallyDialable(char);
  public static final boolean isStartsPostDial(char);
  public static boolean compare(android.content.Context, java.lang.String, java.lang.String);
  public static boolean compare(java.lang.String, java.lang.String);
  public static boolean isEmergencyNumber(java.lang.String);
  public static boolean isGlobalPhoneNumber(java.lang.String);
  public static boolean isISODigit(char);
  public static boolean isLocalEmergencyNumber(android.content.Context, java.lang.String);
  public static boolean isVoiceMailNumber(java.lang.String);
  public static boolean isWellFormedSmsAddress(java.lang.String);
  public static int getFormatTypeForLocale(java.util.Locale);
  public static int toaFromString(java.lang.String);
  public static void addTtsSpan(android.text.Spannable, int, int);
  public static void formatJapaneseNumber(android.text.Editable);
  public static void formatNanpNumber(android.text.Editable);
  public static void formatNumber(android.text.Editable, int);
  public static android.text.style.TtsSpan createTtsSpan(java.lang.String);
  public static byte[] networkPortionToCalledPartyBCD(java.lang.String);
  public static byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String);
  public static byte[] numberToCalledPartyBCD(java.lang.String);
  public static java.lang.CharSequence createTtsSpannable(java.lang.CharSequence);
  public static java.lang.String calledPartyBCDFragmentToString(byte[], int, int);
  public static java.lang.String calledPartyBCDToString(byte[], int, int);
  public static java.lang.String convertKeypadLettersToDigits(java.lang.String);
  public static java.lang.String extractNetworkPortion(java.lang.String);
  public static java.lang.String extractPostDialPortion(java.lang.String);
  public static java.lang.String formatNumber(java.lang.String);
  public static java.lang.String formatNumber(java.lang.String, java.lang.String);
  public static java.lang.String formatNumber(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String formatNumberToE164(java.lang.String, java.lang.String);
  public static java.lang.String formatNumberToRFC3966(java.lang.String, java.lang.String);
  public static java.lang.String getNumberFromIntent(android.content.Intent, android.content.Context);
  public static java.lang.String getStrippedReversed(java.lang.String);
  public static java.lang.String normalizeNumber(java.lang.String);
  public static java.lang.String replaceUnicodeDigits(java.lang.String);
  public static java.lang.String stringFromStringAndTOA(java.lang.String, int);
  public static java.lang.String stripSeparators(java.lang.String);
  public static java.lang.String toCallerIDMinMatch(java.lang.String);
  public void <init>();
  public static final char PAUSE;
  public static final char WAIT;
  public static final char WILD;
  public static final int FORMAT_JAPAN;
  public static final int FORMAT_NANP;
  public static final int FORMAT_UNKNOWN;
  public static final int TOA_International;
  public static final int TOA_Unknown;
}
public class android.telephony.PhoneStateListener
  extends java.lang.Object
{
  public void <init>();
  public void onCallForwardingIndicatorChanged(boolean);
  public void onCallStateChanged(int, java.lang.String);
  public void onCellInfoChanged(java.util.List);
  public void onCellLocationChanged(android.telephony.CellLocation);
  public void onDataActivity(int);
  public void onDataConnectionStateChanged(int);
  public void onDataConnectionStateChanged(int, int);
  public void onMessageWaitingIndicatorChanged(boolean);
  public void onServiceStateChanged(android.telephony.ServiceState);
  public void onSignalStrengthChanged(int);
  public void onSignalStrengthsChanged(android.telephony.SignalStrength);
  public static final int LISTEN_CALL_FORWARDING_INDICATOR;
  public static final int LISTEN_CALL_STATE;
  public static final int LISTEN_CELL_INFO;
  public static final int LISTEN_CELL_LOCATION;
  public static final int LISTEN_DATA_ACTIVITY;
  public static final int LISTEN_DATA_CONNECTION_STATE;
  public static final int LISTEN_MESSAGE_WAITING_INDICATOR;
  public static final int LISTEN_NONE;
  public static final int LISTEN_SERVICE_STATE;
  public static final int LISTEN_SIGNAL_STRENGTH;
  public static final int LISTEN_SIGNAL_STRENGTHS;
}
public class android.telephony.ServiceState
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(android.telephony.ServiceState);
  public boolean equals(java.lang.Object);
  public boolean getIsManualSelection();
  public boolean getRoaming();
  public int describeContents();
  public int getState();
  public int hashCode();
  public void setIsManualSelection(boolean);
  public void setOperatorName(java.lang.String, java.lang.String, java.lang.String);
  public void setRoaming(boolean);
  public void setState(int);
  public void setStateOff();
  public void setStateOutOfService();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getOperatorAlphaLong();
  public java.lang.String getOperatorAlphaShort();
  public java.lang.String getOperatorNumeric();
  public java.lang.String toString();
  protected void copyFrom(android.telephony.ServiceState);
  public static final int STATE_EMERGENCY_ONLY;
  public static final int STATE_IN_SERVICE;
  public static final int STATE_OUT_OF_SERVICE;
  public static final int STATE_POWER_OFF;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telephony.SignalStrength
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean isGsm();
  public int describeContents();
  public int getCdmaDbm();
  public int getCdmaEcio();
  public int getEvdoDbm();
  public int getEvdoEcio();
  public int getEvdoSnr();
  public int getGsmBitErrorRate();
  public int getGsmSignalStrength();
  public int getLevel();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
}
public final class android.telephony.SmsManager
  extends java.lang.Object
{
  public static int getDefaultSmsSubscriptionId();
  public static android.telephony.SmsManager getDefault();
  public static android.telephony.SmsManager getSmsManagerForSubscriptionId(int);
  public int getSubscriptionId();
  public void downloadMultimediaMessage(android.content.Context, java.lang.String, android.net.Uri, android.os.Bundle, android.app.PendingIntent);
  public void injectSmsPdu(byte[], java.lang.String, android.app.PendingIntent);
  public void sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent);
  public void sendMultimediaMessage(android.content.Context, android.net.Uri, java.lang.String, android.os.Bundle, android.app.PendingIntent);
  public void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList);
  public void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent);
  public android.os.Bundle getCarrierConfigValues();
  public java.util.ArrayList divideMessage(java.lang.String);
  public static final int MMS_ERROR_CONFIGURATION_ERROR;
  public static final int MMS_ERROR_HTTP_FAILURE;
  public static final int MMS_ERROR_INVALID_APN;
  public static final int MMS_ERROR_IO_ERROR;
  public static final int MMS_ERROR_NO_DATA_NETWORK;
  public static final int MMS_ERROR_RETRY;
  public static final int MMS_ERROR_UNABLE_CONNECT_MMS;
  public static final int MMS_ERROR_UNSPECIFIED;
  public static final int RESULT_ERROR_GENERIC_FAILURE;
  public static final int RESULT_ERROR_NO_SERVICE;
  public static final int RESULT_ERROR_NULL_PDU;
  public static final int RESULT_ERROR_RADIO_OFF;
  public static final int STATUS_ON_ICC_FREE;
  public static final int STATUS_ON_ICC_READ;
  public static final int STATUS_ON_ICC_SENT;
  public static final int STATUS_ON_ICC_UNREAD;
  public static final int STATUS_ON_ICC_UNSENT;
  public static final java.lang.String EXTRA_MMS_DATA;
  public static final java.lang.String EXTRA_MMS_HTTP_STATUS;
  public static final java.lang.String MMS_CONFIG_ALIAS_ENABLED;
  public static final java.lang.String MMS_CONFIG_ALIAS_MAX_CHARS;
  public static final java.lang.String MMS_CONFIG_ALIAS_MIN_CHARS;
  public static final java.lang.String MMS_CONFIG_ALLOW_ATTACH_AUDIO;
  public static final java.lang.String MMS_CONFIG_APPEND_TRANSACTION_ID;
  public static final java.lang.String MMS_CONFIG_EMAIL_GATEWAY_NUMBER;
  public static final java.lang.String MMS_CONFIG_GROUP_MMS_ENABLED;
  public static final java.lang.String MMS_CONFIG_HTTP_PARAMS;
  public static final java.lang.String MMS_CONFIG_HTTP_SOCKET_TIMEOUT;
  public static final java.lang.String MMS_CONFIG_MAX_IMAGE_HEIGHT;
  public static final java.lang.String MMS_CONFIG_MAX_IMAGE_WIDTH;
  public static final java.lang.String MMS_CONFIG_MAX_MESSAGE_SIZE;
  public static final java.lang.String MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE;
  public static final java.lang.String MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED;
  public static final java.lang.String MMS_CONFIG_MMS_ENABLED;
  public static final java.lang.String MMS_CONFIG_MMS_READ_REPORT_ENABLED;
  public static final java.lang.String MMS_CONFIG_MULTIPART_SMS_ENABLED;
  public static final java.lang.String MMS_CONFIG_NAI_SUFFIX;
  public static final java.lang.String MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED;
  public static final java.lang.String MMS_CONFIG_RECIPIENT_LIMIT;
  public static final java.lang.String MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES;
  public static final java.lang.String MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS;
  public static final java.lang.String MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED;
  public static final java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD;
  public static final java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD;
  public static final java.lang.String MMS_CONFIG_SUBJECT_MAX_LENGTH;
  public static final java.lang.String MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER;
  public static final java.lang.String MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION;
  public static final java.lang.String MMS_CONFIG_UA_PROF_TAG_NAME;
  public static final java.lang.String MMS_CONFIG_UA_PROF_URL;
  public static final java.lang.String MMS_CONFIG_USER_AGENT;
}
public class android.telephony.SmsMessage
  extends java.lang.Object
{
  public static int getTPLayerLengthForPDU(java.lang.String);
  public static android.telephony.SmsMessage createFromPdu(byte[]);
  public static android.telephony.SmsMessage createFromPdu(byte[], java.lang.String);
  public static android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean);
  public static android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, short, byte[], boolean);
  public static int[] calculateLength(java.lang.CharSequence, boolean);
  public static int[] calculateLength(java.lang.String, boolean);
  public boolean isCphsMwiMessage();
  public boolean isEmail();
  public boolean isMWIClearMessage();
  public boolean isMWISetMessage();
  public boolean isMwiDontStore();
  public boolean isReplace();
  public boolean isReplyPathPresent();
  public boolean isStatusReportMessage();
  public int getIndexOnIcc();
  public int getIndexOnSim();
  public int getProtocolIdentifier();
  public int getStatus();
  public int getStatusOnIcc();
  public int getStatusOnSim();
  public long getTimestampMillis();
  public android.telephony.SmsMessage$MessageClass getMessageClass();
  public byte[] getPdu();
  public byte[] getUserData();
  public java.lang.String getDisplayMessageBody();
  public java.lang.String getDisplayOriginatingAddress();
  public java.lang.String getEmailBody();
  public java.lang.String getEmailFrom();
  public java.lang.String getMessageBody();
  public java.lang.String getOriginatingAddress();
  public java.lang.String getPseudoSubject();
  public java.lang.String getServiceCenterAddress();
  public static final int ENCODING_16BIT;
  public static final int ENCODING_7BIT;
  public static final int ENCODING_8BIT;
  public static final int ENCODING_UNKNOWN;
  public static final int MAX_USER_DATA_BYTES;
  public static final int MAX_USER_DATA_BYTES_WITH_HEADER;
  public static final int MAX_USER_DATA_SEPTETS;
  public static final int MAX_USER_DATA_SEPTETS_WITH_HEADER;
}
public final class android.telephony.SmsMessage$MessageClass
  extends java.lang.Enum
{
  public static android.telephony.SmsMessage$MessageClass valueOf(java.lang.String);
  public static android.telephony.SmsMessage$MessageClass[] values();
  public static final android.telephony.SmsMessage$MessageClass CLASS_0;
  public static final android.telephony.SmsMessage$MessageClass CLASS_1;
  public static final android.telephony.SmsMessage$MessageClass CLASS_2;
  public static final android.telephony.SmsMessage$MessageClass CLASS_3;
  public static final android.telephony.SmsMessage$MessageClass UNKNOWN;
}
public class android.telephony.SmsMessage$SubmitPdu
  extends java.lang.Object
{
  public java.lang.String toString();
  public byte[] encodedMessage;
  public byte[] encodedScAddress;
}
public class android.telephony.SubscriptionInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getDataRoaming();
  public int getIconTint();
  public int getMcc();
  public int getMnc();
  public int getSimSlotIndex();
  public int getSubscriptionId();
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Bitmap createIconBitmap(android.content.Context);
  public java.lang.CharSequence getCarrierName();
  public java.lang.CharSequence getDisplayName();
  public java.lang.String getCountryIso();
  public java.lang.String getIccId();
  public java.lang.String getNumber();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.telephony.SubscriptionManager
  extends java.lang.Object
{
  public static int getDefaultDataSubscriptionId();
  public static int getDefaultSmsSubscriptionId();
  public static int getDefaultSubscriptionId();
  public static int getDefaultVoiceSubscriptionId();
  public static android.telephony.SubscriptionManager from(android.content.Context);
  public boolean isNetworkRoaming(int);
  public int getActiveSubscriptionInfoCount();
  public int getActiveSubscriptionInfoCountMax();
  public void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener);
  public void removeOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener);
  public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int);
  public android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int);
  public java.util.List getActiveSubscriptionInfoList();
  public static final int DATA_ROAMING_DISABLE;
  public static final int DATA_ROAMING_ENABLE;
  public static final int INVALID_SUBSCRIPTION_ID;
}
public class android.telephony.SubscriptionManager$OnSubscriptionsChangedListener
  extends java.lang.Object
{
  public void <init>();
  public void onSubscriptionsChanged();
}
public class android.telephony.TelephonyManager
  extends java.lang.Object
{
  public boolean canChangeDtmfToneLength();
  public boolean hasCarrierPrivileges();
  public boolean hasIccCard();
  public boolean iccCloseLogicalChannel(int);
  public boolean isHearingAidCompatibilitySupported();
  public boolean isNetworkRoaming();
  public boolean isSmsCapable();
  public boolean isTtyModeSupported();
  public boolean isVoiceCapable();
  public boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle);
  public boolean isWorldPhone();
  public boolean setLine1NumberForDisplay(java.lang.String, java.lang.String);
  public boolean setOperatorBrandOverride(java.lang.String);
  public boolean setPreferredNetworkTypeToGlobal();
  public boolean setVoiceMailNumber(java.lang.String, java.lang.String);
  public int getCallState();
  public int getDataActivity();
  public int getDataNetworkType();
  public int getDataState();
  public int getNetworkType();
  public int getPhoneCount();
  public int getPhoneType();
  public int getSimState();
  public int getVoiceNetworkType();
  public void listen(android.telephony.PhoneStateListener, int);
  public android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle);
  public android.telephony.CellLocation getCellLocation();
  public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String);
  public android.telephony.TelephonyManager createForSubscriptionId(int);
  public byte[] iccExchangeSimIO(int, int, int, int, int, java.lang.String);
  public java.lang.String getDeviceId();
  public java.lang.String getDeviceId(int);
  public java.lang.String getDeviceSoftwareVersion();
  public java.lang.String getGroupIdLevel1();
  public java.lang.String getIccAuthentication(int, int, java.lang.String);
  public java.lang.String getLine1Number();
  public java.lang.String getMmsUAProfUrl();
  public java.lang.String getMmsUserAgent();
  public java.lang.String getNetworkCountryIso();
  public java.lang.String getNetworkOperator();
  public java.lang.String getNetworkOperatorName();
  public java.lang.String getSimCountryIso();
  public java.lang.String getSimOperator();
  public java.lang.String getSimOperatorName();
  public java.lang.String getSimSerialNumber();
  public java.lang.String getSubscriberId();
  public java.lang.String getVoiceMailAlphaTag();
  public java.lang.String getVoiceMailNumber();
  public java.lang.String iccTransmitApduBasicChannel(int, int, int, int, int, java.lang.String);
  public java.lang.String iccTransmitApduLogicalChannel(int, int, int, int, int, int, java.lang.String);
  public java.lang.String sendEnvelopeWithStatus(java.lang.String);
  public java.util.List getAllCellInfo();
  public java.util.List getNeighboringCellInfo();
  public static final int APPTYPE_CSIM;
  public static final int APPTYPE_ISIM;
  public static final int APPTYPE_RUIM;
  public static final int APPTYPE_SIM;
  public static final int APPTYPE_USIM;
  public static final int AUTHTYPE_EAP_AKA;
  public static final int AUTHTYPE_EAP_SIM;
  public static final int CALL_STATE_IDLE;
  public static final int CALL_STATE_OFFHOOK;
  public static final int CALL_STATE_RINGING;
  public static final int DATA_ACTIVITY_DORMANT;
  public static final int DATA_ACTIVITY_IN;
  public static final int DATA_ACTIVITY_INOUT;
  public static final int DATA_ACTIVITY_NONE;
  public static final int DATA_ACTIVITY_OUT;
  public static final int DATA_CONNECTED;
  public static final int DATA_CONNECTING;
  public static final int DATA_DISCONNECTED;
  public static final int DATA_SUSPENDED;
  public static final int NETWORK_TYPE_1xRTT;
  public static final int NETWORK_TYPE_CDMA;
  public static final int NETWORK_TYPE_EDGE;
  public static final int NETWORK_TYPE_EHRPD;
  public static final int NETWORK_TYPE_EVDO_0;
  public static final int NETWORK_TYPE_EVDO_A;
  public static final int NETWORK_TYPE_EVDO_B;
  public static final int NETWORK_TYPE_GPRS;
  public static final int NETWORK_TYPE_HSDPA;
  public static final int NETWORK_TYPE_HSPA;
  public static final int NETWORK_TYPE_HSPAP;
  public static final int NETWORK_TYPE_HSUPA;
  public static final int NETWORK_TYPE_IDEN;
  public static final int NETWORK_TYPE_LTE;
  public static final int NETWORK_TYPE_UMTS;
  public static final int NETWORK_TYPE_UNKNOWN;
  public static final int PHONE_TYPE_CDMA;
  public static final int PHONE_TYPE_GSM;
  public static final int PHONE_TYPE_NONE;
  public static final int PHONE_TYPE_SIP;
  public static final int SIM_STATE_ABSENT;
  public static final int SIM_STATE_NETWORK_LOCKED;
  public static final int SIM_STATE_PIN_REQUIRED;
  public static final int SIM_STATE_PUK_REQUIRED;
  public static final int SIM_STATE_READY;
  public static final int SIM_STATE_UNKNOWN;
  public static final java.lang.String ACTION_CONFIGURE_VOICEMAIL;
  public static final java.lang.String ACTION_PHONE_STATE_CHANGED;
  public static final java.lang.String ACTION_RESPOND_VIA_MESSAGE;
  public static final java.lang.String EXTRA_INCOMING_NUMBER;
  public static final java.lang.String EXTRA_STATE;
  public static final java.lang.String EXTRA_STATE_IDLE;
  public static final java.lang.String EXTRA_STATE_OFFHOOK;
  public static final java.lang.String EXTRA_STATE_RINGING;
  public static final java.lang.String VVM_TYPE_CVVM;
  public static final java.lang.String VVM_TYPE_OMTP;
}
public class android.telephony.cdma.CdmaCellLocation
  extends android.telephony.CellLocation
{
  public static double convertQuartSecToDecDegrees(int);
  public void <init>();
  public void <init>(android.os.Bundle);
  public boolean equals(java.lang.Object);
  public int getBaseStationId();
  public int getBaseStationLatitude();
  public int getBaseStationLongitude();
  public int getNetworkId();
  public int getSystemId();
  public int hashCode();
  public void fillInNotifierBundle(android.os.Bundle);
  public void setCellLocationData(int, int, int);
  public void setCellLocationData(int, int, int, int, int);
  public void setStateInvalid();
  public java.lang.String toString();
}
public class android.telephony.gsm.GsmCellLocation
  extends android.telephony.CellLocation
{
  public void <init>();
  public void <init>(android.os.Bundle);
  public boolean equals(java.lang.Object);
  public int getCid();
  public int getLac();
  public int getPsc();
  public int hashCode();
  public void fillInNotifierBundle(android.os.Bundle);
  public void setLacAndCid(int, int);
  public void setStateInvalid();
  public java.lang.String toString();
}
public final class android.telephony.gsm.SmsManager
  extends java.lang.Object
{
  public static final android.telephony.gsm.SmsManager getDefault();
  public final void sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent);
  public final void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList);
  public final void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent);
  public final java.util.ArrayList divideMessage(java.lang.String);
  public static final int RESULT_ERROR_GENERIC_FAILURE;
  public static final int RESULT_ERROR_NO_SERVICE;
  public static final int RESULT_ERROR_NULL_PDU;
  public static final int RESULT_ERROR_RADIO_OFF;
  public static final int STATUS_ON_SIM_FREE;
  public static final int STATUS_ON_SIM_READ;
  public static final int STATUS_ON_SIM_SENT;
  public static final int STATUS_ON_SIM_UNREAD;
  public static final int STATUS_ON_SIM_UNSENT;
}
public class android.telephony.gsm.SmsMessage
  extends java.lang.Object
{
  public static int getTPLayerLengthForPDU(java.lang.String);
  public static android.telephony.gsm.SmsMessage createFromPdu(byte[]);
  public static android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean);
  public static android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, short, byte[], boolean);
  public static int[] calculateLength(java.lang.CharSequence, boolean);
  public static int[] calculateLength(java.lang.String, boolean);
  public void <init>();
  public boolean isCphsMwiMessage();
  public boolean isEmail();
  public boolean isMWIClearMessage();
  public boolean isMWISetMessage();
  public boolean isMwiDontStore();
  public boolean isReplace();
  public boolean isReplyPathPresent();
  public boolean isStatusReportMessage();
  public int getIndexOnSim();
  public int getProtocolIdentifier();
  public int getStatus();
  public int getStatusOnSim();
  public long getTimestampMillis();
  public android.telephony.gsm.SmsMessage$MessageClass getMessageClass();
  public byte[] getPdu();
  public byte[] getUserData();
  public java.lang.String getDisplayMessageBody();
  public java.lang.String getDisplayOriginatingAddress();
  public java.lang.String getEmailBody();
  public java.lang.String getEmailFrom();
  public java.lang.String getMessageBody();
  public java.lang.String getOriginatingAddress();
  public java.lang.String getPseudoSubject();
  public java.lang.String getServiceCenterAddress();
  public static final int ENCODING_16BIT;
  public static final int ENCODING_7BIT;
  public static final int ENCODING_8BIT;
  public static final int ENCODING_UNKNOWN;
  public static final int MAX_USER_DATA_BYTES;
  public static final int MAX_USER_DATA_SEPTETS;
  public static final int MAX_USER_DATA_SEPTETS_WITH_HEADER;
}
public final class android.telephony.gsm.SmsMessage$MessageClass
  extends java.lang.Enum
{
  public static android.telephony.gsm.SmsMessage$MessageClass valueOf(java.lang.String);
  public static android.telephony.gsm.SmsMessage$MessageClass[] values();
  public static final android.telephony.gsm.SmsMessage$MessageClass CLASS_0;
  public static final android.telephony.gsm.SmsMessage$MessageClass CLASS_1;
  public static final android.telephony.gsm.SmsMessage$MessageClass CLASS_2;
  public static final android.telephony.gsm.SmsMessage$MessageClass CLASS_3;
  public static final android.telephony.gsm.SmsMessage$MessageClass UNKNOWN;
}
public class android.telephony.gsm.SmsMessage$SubmitPdu
  extends java.lang.Object
{
  public void <init>();
  public java.lang.String toString();
  public byte[] encodedMessage;
  public byte[] encodedScAddress;
}
public abstract class android.test.ActivityInstrumentationTestCase
  extends android.test.ActivityTestCase
{
  public void <init>(java.lang.String, java.lang.Class);
  public void <init>(java.lang.String, java.lang.Class, boolean);
  public void testActivityTestCaseSetUpProperly()  throws java.lang.Exception;
  public android.app.Activity getActivity();
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
}
public abstract class android.test.ActivityInstrumentationTestCase2
  extends android.test.ActivityTestCase
{
  public void <init>(java.lang.Class);
  public void <init>(java.lang.String, java.lang.Class);
  public void setActivityInitialTouchMode(boolean);
  public void setActivityIntent(android.content.Intent);
  public android.app.Activity getActivity();
  protected void runTest()  throws java.lang.Throwable;
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
}
public abstract class android.test.ActivityTestCase
  extends android.test.InstrumentationTestCase
{
  public void <init>();
  protected void scrubClass(java.lang.Class)  throws java.lang.IllegalAccessException;
  protected void setActivity(android.app.Activity);
  protected android.app.Activity getActivity();
}
public abstract class android.test.ActivityUnitTestCase
  extends android.test.ActivityTestCase
{
  public void <init>(java.lang.Class);
  public boolean isFinishCalled();
  public int getFinishedActivityRequest();
  public int getRequestedOrientation();
  public int getStartedActivityRequest();
  public void setActivityContext(android.content.Context);
  public void setApplication(android.app.Application);
  public android.app.Activity getActivity();
  public android.content.Intent getStartedActivityIntent();
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
  protected android.app.Activity startActivity(android.content.Intent, android.os.Bundle, java.lang.Object);
}
public class android.test.AndroidTestCase
  extends junit.framework.TestCase
{
  public void <init>();
  public void assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String);
  public void assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String);
  public void assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String);
  public void setContext(android.content.Context);
  public void testAndroidTestCaseSetupProperly();
  public android.content.Context getContext();
  protected void scrubClass(java.lang.Class)  throws java.lang.IllegalAccessException;
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
  protected android.content.Context mContext;
}
public class android.test.AndroidTestRunner
  extends junit.runner.BaseTestRunner
{
  public void <init>();
  public void addTestListener(junit.framework.TestListener);
  public void clearTestListeners();
  public void runTest();
  public void runTest(junit.framework.TestResult);
  public void setContext(android.content.Context);
  public void setInstrumentaiton(android.app.Instrumentation);
  public void setInstrumentation(android.app.Instrumentation);
  public void setTest(junit.framework.Test);
  public void setTestClassName(java.lang.String, java.lang.String);
  public void testEnded(java.lang.String);
  public void testFailed(int, junit.framework.Test, java.lang.Throwable);
  public void testStarted(java.lang.String);
  public java.lang.String getTestClassName();
  public java.util.List getTestCases();
  public junit.framework.TestResult getTestResult();
  protected void runFailed(java.lang.String);
  protected java.lang.Class loadSuiteClass(java.lang.String)  throws java.lang.ClassNotFoundException;
  protected junit.framework.TestResult createTestResult();
}
public abstract class android.test.ApplicationTestCase
  extends android.test.AndroidTestCase
{
  public void <init>(java.lang.Class);
  public final void testApplicationTestCaseSetUpProperly()  throws java.lang.Exception;
  public android.app.Application getApplication();
  public android.content.Context getSystemContext();
  protected final void createApplication();
  protected final void terminateApplication();
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
}
public class android.test.AssertionFailedError
  extends java.lang.Error
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.test.ComparisonFailure
  extends android.test.AssertionFailedError
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getMessage();
}
public interface android.test.FlakyTest
  extends java.lang.annotation.Annotation
{
  public abstract int tolerance();
}
public class android.test.InstrumentationTestCase
  extends junit.framework.TestCase
{
  public void <init>();
  public final android.app.Activity launchActivity(java.lang.String, java.lang.Class, android.os.Bundle);
  public final android.app.Activity launchActivityWithIntent(java.lang.String, java.lang.Class, android.content.Intent);
  public void injectInsrumentation(android.app.Instrumentation);
  public void injectInstrumentation(android.app.Instrumentation);
  public void runTestOnUiThread(java.lang.Runnable)  throws java.lang.Throwable;
  public void sendKeys(int[]);
  public void sendKeys(java.lang.String);
  public void sendRepeatedKeys(int[]);
  public android.app.Instrumentation getInstrumentation();
  protected void runTest()  throws java.lang.Throwable;
  protected void tearDown()  throws java.lang.Exception;
}
public class android.test.InstrumentationTestRunner
  extends android.app.Instrumentation
  implements android.test.TestSuiteProvider
{
  public void <init>();
  public void onCreate(android.os.Bundle);
  public void onStart();
  public android.os.Bundle getArguments();
  public java.lang.ClassLoader getLoader();
  public junit.framework.TestSuite getAllTests();
  public junit.framework.TestSuite getTestSuite();
  protected android.test.AndroidTestRunner getAndroidTestRunner();
  public static final int REPORT_VALUE_RESULT_ERROR;
  public static final int REPORT_VALUE_RESULT_FAILURE;
  public static final int REPORT_VALUE_RESULT_OK;
  public static final int REPORT_VALUE_RESULT_START;
  public static final java.lang.String REPORT_KEY_NAME_CLASS;
  public static final java.lang.String REPORT_KEY_NAME_TEST;
  public static final java.lang.String REPORT_KEY_NUM_CURRENT;
  public static final java.lang.String REPORT_KEY_NUM_TOTAL;
  public static final java.lang.String REPORT_KEY_STACK;
  public static final java.lang.String REPORT_VALUE_ID;
}
public class android.test.InstrumentationTestSuite
  extends junit.framework.TestSuite
{
  public void <init>(android.app.Instrumentation);
  public void <init>(java.lang.Class, android.app.Instrumentation);
  public void <init>(java.lang.String, android.app.Instrumentation);
  public void addTestSuite(java.lang.Class);
  public void runTest(junit.framework.Test, junit.framework.TestResult);
}
public class android.test.IsolatedContext
  extends android.content.ContextWrapper
{
  public void <init>(android.content.ContentResolver, android.content.Context);
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public int checkUriPermission(android.net.Uri, int, int, int);
  public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public void sendBroadcast(android.content.Intent);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public void unregisterReceiver(android.content.BroadcastReceiver);
  public android.content.ContentResolver getContentResolver();
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public java.io.File getFilesDir();
  public java.lang.Object getSystemService(java.lang.String);
  public java.util.List getAndClearBroadcastIntents();
}
public class android.test.LoaderTestCase
  extends android.test.AndroidTestCase
{
  public void <init>();
  public java.lang.Object getLoaderResultSynchronously(android.content.Loader);
}
public final class android.test.MoreAsserts
  extends java.lang.Object
{
  public static void assertAssignableFrom(java.lang.Class, java.lang.Class);
  public static void assertAssignableFrom(java.lang.Class, java.lang.Object);
  public static void assertContentsInAnyOrder(java.lang.Iterable, java.lang.Object[]);
  public static void assertContentsInAnyOrder(java.lang.String, java.lang.Iterable, java.lang.Object[]);
  public static void assertContentsInOrder(java.lang.Iterable, java.lang.Object[]);
  public static void assertContentsInOrder(java.lang.String, java.lang.Iterable, java.lang.Object[]);
  public static void assertEmpty(java.lang.Iterable);
  public static void assertEmpty(java.lang.String, java.lang.Iterable);
  public static void assertEmpty(java.lang.String, java.util.Map);
  public static void assertEmpty(java.util.Map);
  public static void assertEquals(byte[], byte[]);
  public static void assertEquals(double[], double[]);
  public static void assertEquals(int[], int[]);
  public static void assertEquals(java.lang.Object[], java.lang.Object[]);
  public static void assertEquals(java.lang.String, byte[], byte[]);
  public static void assertEquals(java.lang.String, double[], double[]);
  public static void assertEquals(java.lang.String, int[], int[]);
  public static void assertEquals(java.lang.String, java.lang.Object[], java.lang.Object[]);
  public static void assertEquals(java.lang.String, java.util.Set, java.util.Set);
  public static void assertEquals(java.util.Set, java.util.Set);
  public static void assertNotContainsRegex(java.lang.String, java.lang.String);
  public static void assertNotContainsRegex(java.lang.String, java.lang.String, java.lang.String);
  public static void assertNotEmpty(java.lang.Iterable);
  public static void assertNotEmpty(java.lang.String, java.lang.Iterable);
  public static void assertNotEmpty(java.lang.String, java.util.Map);
  public static void assertNotEmpty(java.util.Map);
  public static void assertNotEqual(java.lang.Object, java.lang.Object);
  public static void assertNotEqual(java.lang.String, java.lang.Object, java.lang.Object);
  public static void assertNotMatchesRegex(java.lang.String, java.lang.String);
  public static void assertNotMatchesRegex(java.lang.String, java.lang.String, java.lang.String);
  public static void checkEqualsAndHashCodeMethods(java.lang.Object, java.lang.Object, boolean);
  public static void checkEqualsAndHashCodeMethods(java.lang.String, java.lang.Object, java.lang.Object, boolean);
  public static java.util.regex.MatchResult assertContainsRegex(java.lang.String, java.lang.String);
  public static java.util.regex.MatchResult assertContainsRegex(java.lang.String, java.lang.String, java.lang.String);
  public static java.util.regex.MatchResult assertMatchesRegex(java.lang.String, java.lang.String);
  public static java.util.regex.MatchResult assertMatchesRegex(java.lang.String, java.lang.String, java.lang.String);
}
public interface android.test.PerformanceTestCase
{
  public abstract boolean isPerformanceOnly();
  public abstract int startPerformance(android.test.PerformanceTestCase$Intermediates);
}
public interface android.test.PerformanceTestCase$Intermediates
{
  public abstract void addIntermediate(java.lang.String);
  public abstract void addIntermediate(java.lang.String, long);
  public abstract void finishTiming(boolean);
  public abstract void setInternalIterations(int);
  public abstract void startTiming(boolean);
}
public abstract class android.test.ProviderTestCase
  extends android.test.InstrumentationTestCase
{
  public static android.content.ContentResolver newResolverWithContentProviderFromSql(android.content.Context, java.lang.Class, java.lang.String, java.lang.String, int, java.lang.String)  throws java.lang.IllegalAccessException, java.lang.InstantiationException;
  public void <init>(java.lang.Class, java.lang.String);
  public android.content.ContentProvider getProvider();
  public android.test.IsolatedContext getMockContext();
  public android.test.mock.MockContentResolver getMockContentResolver();
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
}
public abstract class android.test.ProviderTestCase2
  extends android.test.AndroidTestCase
{
  public static android.content.ContentResolver newResolverWithContentProviderFromSql(android.content.Context, java.lang.String, java.lang.Class, java.lang.String, java.lang.String, int, java.lang.String)  throws java.lang.IllegalAccessException, java.lang.InstantiationException;
  public void <init>(java.lang.Class, java.lang.String);
  public android.content.ContentProvider getProvider();
  public android.test.IsolatedContext getMockContext();
  public android.test.mock.MockContentResolver getMockContentResolver();
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
}
public class android.test.RenamingDelegatingContext
  extends android.content.ContextWrapper
{
  public static android.content.ContentProvider providerWithRenamedContext(java.lang.Class, android.content.Context, java.lang.String)  throws java.lang.IllegalAccessException, java.lang.InstantiationException;
  public static android.content.ContentProvider providerWithRenamedContext(java.lang.Class, android.content.Context, java.lang.String, boolean)  throws java.lang.IllegalAccessException, java.lang.InstantiationException;
  public void <init>(android.content.Context, android.content.Context, java.lang.String);
  public void <init>(android.content.Context, java.lang.String);
  public boolean deleteDatabase(java.lang.String);
  public boolean deleteFile(java.lang.String);
  public void makeExistingFilesAndDbsAccessible();
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public java.io.File getCacheDir();
  public java.io.File getDatabasePath(java.lang.String);
  public java.io.File getFileStreamPath(java.lang.String);
  public java.io.FileInputStream openFileInput(java.lang.String)  throws java.io.FileNotFoundException;
  public java.io.FileOutputStream openFileOutput(java.lang.String, int)  throws java.io.FileNotFoundException;
  public java.lang.String getDatabasePrefix();
  public java.lang.String[] databaseList();
  public java.lang.String[] fileList();
}
public abstract class android.test.ServiceTestCase
  extends android.test.AndroidTestCase
{
  public void <init>(java.lang.Class);
  public void setApplication(android.app.Application);
  public void testServiceTestCaseSetUpProperly()  throws java.lang.Exception;
  public android.app.Application getApplication();
  public android.app.Service getService();
  public android.content.Context getSystemContext();
  protected void setUp()  throws java.lang.Exception;
  protected void setupService();
  protected void shutdownService();
  protected void startService(android.content.Intent);
  protected void tearDown()  throws java.lang.Exception;
  protected android.os.IBinder bindService(android.content.Intent);
}
public abstract class android.test.SingleLaunchActivityTestCase
  extends android.test.InstrumentationTestCase
{
  public void <init>(java.lang.String, java.lang.Class);
  public void testActivityTestCaseSetUpProperly()  throws java.lang.Exception;
  public android.app.Activity getActivity();
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
}
public class android.test.SyncBaseInstrumentation
  extends android.test.InstrumentationTestCase
{
  public void <init>();
  protected void cancelSyncsandDisableAutoSync();
  protected void setUp()  throws java.lang.Exception;
  protected void syncProvider(android.net.Uri, java.lang.String, java.lang.String)  throws java.lang.Exception;
}
public interface android.test.TestSuiteProvider
{
  public abstract junit.framework.TestSuite getTestSuite();
}
public class android.test.TouchUtils
  extends java.lang.Object
{
  public static int dragViewBy(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int);
  public static int dragViewBy(android.test.InstrumentationTestCase, android.view.View, int, int, int);
  public static int dragViewTo(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int);
  public static int dragViewTo(android.test.InstrumentationTestCase, android.view.View, int, int, int);
  public static int dragViewToX(android.test.ActivityInstrumentationTestCase, android.view.View, int, int);
  public static int dragViewToX(android.test.InstrumentationTestCase, android.view.View, int, int);
  public static int dragViewToY(android.test.ActivityInstrumentationTestCase, android.view.View, int, int);
  public static int dragViewToY(android.test.InstrumentationTestCase, android.view.View, int, int);
  public static void clickView(android.test.InstrumentationTestCase, android.view.View);
  public static void drag(android.test.ActivityInstrumentationTestCase, float, float, float, float, int);
  public static void drag(android.test.InstrumentationTestCase, float, float, float, float, int);
  public static void dragQuarterScreenDown(android.test.ActivityInstrumentationTestCase);
  public static void dragQuarterScreenDown(android.test.InstrumentationTestCase, android.app.Activity);
  public static void dragQuarterScreenUp(android.test.ActivityInstrumentationTestCase);
  public static void dragQuarterScreenUp(android.test.InstrumentationTestCase, android.app.Activity);
  public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View);
  public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View, int);
  public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View);
  public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View, int);
  public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View);
  public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View, int);
  public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View);
  public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View, int);
  public static void longClickView(android.test.ActivityInstrumentationTestCase, android.view.View);
  public static void longClickView(android.test.InstrumentationTestCase, android.view.View);
  public static void scrollToBottom(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup);
  public static void scrollToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup);
  public static void scrollToTop(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup);
  public static void scrollToTop(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup);
  public static void tapView(android.test.InstrumentationTestCase, android.view.View);
  public static void touchAndCancelView(android.test.InstrumentationTestCase, android.view.View);
  public void <init>();
}
public interface android.test.UiThreadTest
  extends java.lang.annotation.Annotation
{
}
public class android.test.ViewAsserts
  extends java.lang.Object
{
  public static void assertBaselineAligned(android.view.View, android.view.View);
  public static void assertBottomAligned(android.view.View, android.view.View);
  public static void assertBottomAligned(android.view.View, android.view.View, int);
  public static void assertGroupContains(android.view.ViewGroup, android.view.View);
  public static void assertGroupIntegrity(android.view.ViewGroup);
  public static void assertGroupNotContains(android.view.ViewGroup, android.view.View);
  public static void assertHasScreenCoordinates(android.view.View, android.view.View, int, int);
  public static void assertHorizontalCenterAligned(android.view.View, android.view.View);
  public static void assertLeftAligned(android.view.View, android.view.View);
  public static void assertLeftAligned(android.view.View, android.view.View, int);
  public static void assertOffScreenAbove(android.view.View, android.view.View);
  public static void assertOffScreenBelow(android.view.View, android.view.View);
  public static void assertOnScreen(android.view.View, android.view.View);
  public static void assertRightAligned(android.view.View, android.view.View);
  public static void assertRightAligned(android.view.View, android.view.View, int);
  public static void assertTopAligned(android.view.View, android.view.View);
  public static void assertTopAligned(android.view.View, android.view.View, int);
  public static void assertVerticalCenterAligned(android.view.View, android.view.View);
}
public class android.test.mock.MockApplication
  extends android.app.Application
{
  public void <init>();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onCreate();
  public void onTerminate();
}
public class android.test.mock.MockContentProvider
  extends android.content.ContentProvider
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, java.lang.String, java.lang.String, android.content.pm.PathPermission[]);
  public boolean onCreate();
  public int bulkInsert(android.net.Uri, android.content.ContentValues[]);
  public int delete(android.net.Uri, java.lang.String, java.lang.String[]);
  public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]);
  public void attachInfo(android.content.Context, android.content.pm.ProviderInfo);
  public android.content.ContentProviderResult[] applyBatch(java.util.ArrayList);
  public android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle);
  public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String);
  public android.net.Uri insert(android.net.Uri, android.content.ContentValues);
  public java.lang.String getType(android.net.Uri);
  public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String);
  protected void <init>();
}
public class android.test.mock.MockContentResolver
  extends android.content.ContentResolver
{
  public void <init>();
  public void <init>(android.content.Context);
  public void addProvider(java.lang.String, android.content.ContentProvider);
  public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean);
}
public class android.test.mock.MockContext
  extends android.content.Context
{
  public void <init>();
  public boolean bindService(android.content.Intent, android.content.ServiceConnection, int);
  public boolean deleteDatabase(java.lang.String);
  public boolean deleteFile(java.lang.String);
  public boolean deleteSharedPreferences(java.lang.String);
  public boolean isDeviceProtectedStorage();
  public boolean isRestricted();
  public boolean moveDatabaseFrom(android.content.Context, java.lang.String);
  public boolean moveSharedPreferencesFrom(android.content.Context, java.lang.String);
  public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle);
  public boolean stopService(android.content.Intent);
  public int checkCallingOrSelfPermission(java.lang.String);
  public int checkCallingOrSelfUriPermission(android.net.Uri, int);
  public int checkCallingPermission(java.lang.String);
  public int checkCallingUriPermission(android.net.Uri, int);
  public int checkPermission(java.lang.String, int, int);
  public int checkSelfPermission(java.lang.String);
  public int checkUriPermission(android.net.Uri, int, int, int);
  public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int);
  public int getWallpaperDesiredMinimumHeight();
  public int getWallpaperDesiredMinimumWidth();
  public void clearWallpaper();
  public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String);
  public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String);
  public void enforceCallingPermission(java.lang.String, java.lang.String);
  public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String);
  public void enforcePermission(java.lang.String, int, int, java.lang.String);
  public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String);
  public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String);
  public void grantUriPermission(java.lang.String, android.net.Uri, int);
  public void removeStickyBroadcast(android.content.Intent);
  public void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public void revokeUriPermission(android.net.Uri, int);
  public void sendBroadcast(android.content.Intent);
  public void sendBroadcast(android.content.Intent, java.lang.String);
  public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String);
  public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendStickyBroadcast(android.content.Intent);
  public void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle);
  public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle);
  public void setTheme(int);
  public void setWallpaper(android.graphics.Bitmap)  throws java.io.IOException;
  public void setWallpaper(java.io.InputStream)  throws java.io.IOException;
  public void startActivities(android.content.Intent[]);
  public void startActivities(android.content.Intent[], android.os.Bundle);
  public void startActivity(android.content.Intent);
  public void startActivity(android.content.Intent, android.os.Bundle);
  public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int)  throws android.content.IntentSender$SendIntentException;
  public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle)  throws android.content.IntentSender$SendIntentException;
  public void unbindService(android.content.ServiceConnection);
  public void unregisterReceiver(android.content.BroadcastReceiver);
  public android.content.ComponentName startService(android.content.Intent);
  public android.content.ContentResolver getContentResolver();
  public android.content.Context createConfigurationContext(android.content.res.Configuration);
  public android.content.Context createDeviceProtectedStorageContext();
  public android.content.Context createDisplayContext(android.view.Display);
  public android.content.Context createPackageContext(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.Context getApplicationContext();
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter);
  public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler);
  public android.content.SharedPreferences getSharedPreferences(java.lang.String, int);
  public android.content.pm.ApplicationInfo getApplicationInfo();
  public android.content.pm.PackageManager getPackageManager();
  public android.content.res.AssetManager getAssets();
  public android.content.res.Resources getResources();
  public android.content.res.Resources$Theme getTheme();
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory);
  public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler);
  public android.graphics.drawable.Drawable getWallpaper();
  public android.graphics.drawable.Drawable peekWallpaper();
  public android.os.Looper getMainLooper();
  public java.io.File getCacheDir();
  public java.io.File getCodeCacheDir();
  public java.io.File getDataDir();
  public java.io.File getDatabasePath(java.lang.String);
  public java.io.File getDir(java.lang.String, int);
  public java.io.File getExternalCacheDir();
  public java.io.File getExternalFilesDir(java.lang.String);
  public java.io.File getFileStreamPath(java.lang.String);
  public java.io.File getFilesDir();
  public java.io.File getNoBackupFilesDir();
  public java.io.File getObbDir();
  public java.io.FileInputStream openFileInput(java.lang.String)  throws java.io.FileNotFoundException;
  public java.io.FileOutputStream openFileOutput(java.lang.String, int)  throws java.io.FileNotFoundException;
  public java.io.File[] getExternalCacheDirs();
  public java.io.File[] getExternalFilesDirs(java.lang.String);
  public java.io.File[] getExternalMediaDirs();
  public java.io.File[] getObbDirs();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.Object getSystemService(java.lang.String);
  public java.lang.String getPackageCodePath();
  public java.lang.String getPackageName();
  public java.lang.String getPackageResourcePath();
  public java.lang.String getSystemServiceName(java.lang.Class);
  public java.lang.String[] databaseList();
  public java.lang.String[] fileList();
}
public class android.test.mock.MockCursor
  extends java.lang.Object
  implements android.database.Cursor
{
  public void <init>();
  public boolean getWantsAllOnMoveCalls();
  public boolean isAfterLast();
  public boolean isBeforeFirst();
  public boolean isClosed();
  public boolean isFirst();
  public boolean isLast();
  public boolean isNull(int);
  public boolean move(int);
  public boolean moveToFirst();
  public boolean moveToLast();
  public boolean moveToNext();
  public boolean moveToPosition(int);
  public boolean moveToPrevious();
  public boolean requery();
  public double getDouble(int);
  public float getFloat(int);
  public int getColumnCount();
  public int getColumnIndex(java.lang.String);
  public int getColumnIndexOrThrow(java.lang.String);
  public int getCount();
  public int getInt(int);
  public int getPosition();
  public int getType(int);
  public long getLong(int);
  public short getShort(int);
  public void close();
  public void copyStringToBuffer(int, android.database.CharArrayBuffer);
  public void deactivate();
  public void registerContentObserver(android.database.ContentObserver);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void setExtras(android.os.Bundle);
  public void setNotificationUri(android.content.ContentResolver, android.net.Uri);
  public void unregisterContentObserver(android.database.ContentObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public android.net.Uri getNotificationUri();
  public android.os.Bundle getExtras();
  public android.os.Bundle respond(android.os.Bundle);
  public byte[] getBlob(int);
  public java.lang.String getColumnName(int);
  public java.lang.String getString(int);
  public java.lang.String[] getColumnNames();
}
public class android.test.mock.MockDialogInterface
  extends java.lang.Object
  implements android.content.DialogInterface
{
  public void <init>();
  public void cancel();
  public void dismiss();
}
public class android.test.mock.MockPackageManager
  extends android.content.pm.PackageManager
{
  public void <init>();
  public boolean addPermission(android.content.pm.PermissionInfo);
  public boolean addPermissionAsync(android.content.pm.PermissionInfo);
  public boolean hasSystemFeature(java.lang.String);
  public boolean hasSystemFeature(java.lang.String, int);
  public boolean isPermissionRevokedByPolicy(java.lang.String, java.lang.String);
  public boolean isSafeMode();
  public int checkPermission(java.lang.String, java.lang.String);
  public int checkSignatures(int, int);
  public int checkSignatures(java.lang.String, java.lang.String);
  public int getApplicationEnabledSetting(java.lang.String);
  public int getComponentEnabledSetting(android.content.ComponentName);
  public int getPackageUid(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public int getPreferredActivities(java.util.List, java.util.List, java.lang.String);
  public void addPackageToPreferred(java.lang.String);
  public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName);
  public void clearPackagePreferredActivities(java.lang.String);
  public void extendVerificationTimeout(int, int, long);
  public void removePackageFromPreferred(java.lang.String);
  public void removePermission(java.lang.String);
  public void setApplicationEnabledSetting(java.lang.String, int, int);
  public void setComponentEnabledSetting(android.content.ComponentName, int, int);
  public void setInstallerPackageName(java.lang.String, java.lang.String);
  public void verifyPendingInstall(int, int);
  public android.content.Intent getLaunchIntentForPackage(java.lang.String);
  public android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String);
  public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.FeatureInfo[] getSystemAvailableFeatures();
  public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String, int);
  public android.content.pm.PackageInfo getPackageInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.PackageInstaller getPackageInstaller();
  public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int);
  public android.content.pm.ResolveInfo resolveActivity(android.content.Intent, int);
  public android.content.pm.ResolveInfo resolveService(android.content.Intent, int);
  public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.res.Resources getResourcesForActivity(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo);
  public android.content.res.Resources getResourcesForApplication(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.content.res.XmlResourceParser getXml(java.lang.String, int, android.content.pm.ApplicationInfo);
  public android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo);
  public android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo);
  public android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo);
  public android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public android.graphics.drawable.Drawable getDefaultActivityIcon();
  public android.graphics.drawable.Drawable getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo);
  public android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable, android.os.UserHandle, android.graphics.Rect, int);
  public android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable, android.os.UserHandle);
  public int[] getPackageGids(java.lang.String)  throws android.content.pm.PackageManager$NameNotFoundException;
  public int[] getPackageGids(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
  public java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo);
  public java.lang.CharSequence getText(java.lang.String, int, android.content.pm.ApplicationInfo);
  public java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence, android.os.UserHandle);
  public java.lang.String getInstallerPackageName(java.lang.String);
  public java.lang.String getNameForUid(int);
  public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[]);
  public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[]);
  public java.lang.String[] getPackagesForUid(int);
  public java.lang.String[] getSystemSharedLibraryNames();
  public java.util.List getAllIntentFilters(java.lang.String);
  public java.util.List getAllPermissionGroups(int);
  public java.util.List getInstalledApplications(int);
  public java.util.List getInstalledPackages(int);
  public java.util.List getPackagesHoldingPermissions(java.lang.String[], int);
  public java.util.List getPreferredPackages(int);
  public java.util.List queryBroadcastReceivers(android.content.Intent, int);
  public java.util.List queryContentProviders(java.lang.String, int, int);
  public java.util.List queryInstrumentation(java.lang.String, int);
  public java.util.List queryIntentActivities(android.content.Intent, int);
  public java.util.List queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int);
  public java.util.List queryIntentContentProviders(android.content.Intent, int);
  public java.util.List queryIntentServices(android.content.Intent, int);
  public java.util.List queryPermissionsByGroup(java.lang.String, int)  throws android.content.pm.PackageManager$NameNotFoundException;
}
public class android.test.mock.MockResources
  extends android.content.res.Resources
{
  public void <init>();
  public float getDimension(int)  throws android.content.res.Resources$NotFoundException;
  public int getColor(int)  throws android.content.res.Resources$NotFoundException;
  public int getDimensionPixelOffset(int)  throws android.content.res.Resources$NotFoundException;
  public int getDimensionPixelSize(int)  throws android.content.res.Resources$NotFoundException;
  public int getIdentifier(java.lang.String, java.lang.String, java.lang.String);
  public int getInteger(int)  throws android.content.res.Resources$NotFoundException;
  public void getValue(int, android.util.TypedValue, boolean)  throws android.content.res.Resources$NotFoundException;
  public void getValue(java.lang.String, android.util.TypedValue, boolean)  throws android.content.res.Resources$NotFoundException;
  public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics);
  public android.content.res.AssetFileDescriptor openRawResourceFd(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.ColorStateList getColorStateList(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.Configuration getConfiguration();
  public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet, int[]);
  public android.content.res.TypedArray obtainTypedArray(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.XmlResourceParser getAnimation(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.XmlResourceParser getLayout(int)  throws android.content.res.Resources$NotFoundException;
  public android.content.res.XmlResourceParser getXml(int)  throws android.content.res.Resources$NotFoundException;
  public android.graphics.Movie getMovie(int)  throws android.content.res.Resources$NotFoundException;
  public android.graphics.drawable.Drawable getDrawable(int)  throws android.content.res.Resources$NotFoundException;
  public android.util.DisplayMetrics getDisplayMetrics();
  public int[] getIntArray(int)  throws android.content.res.Resources$NotFoundException;
  public java.io.InputStream openRawResource(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence getQuantityText(int, int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence getText(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.CharSequence getText(int, java.lang.CharSequence);
  public java.lang.CharSequence[] getTextArray(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getQuantityString(int, int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getQuantityString(int, int, java.lang.Object[])  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourceEntryName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourceName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourcePackageName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getResourceTypeName(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getString(int)  throws android.content.res.Resources$NotFoundException;
  public java.lang.String getString(int, java.lang.Object[])  throws android.content.res.Resources$NotFoundException;
  public java.lang.String[] getStringArray(int)  throws android.content.res.Resources$NotFoundException;
}
public class android.test.suitebuilder.TestMethod
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.Class);
  public void <init>(java.lang.reflect.Method, java.lang.Class);
  public void <init>(junit.framework.TestCase);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Class getEnclosingClass();
  public java.lang.String getEnclosingClassname();
  public java.lang.String getName();
  public java.lang.String toString();
  public java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public junit.framework.TestCase createTest()  throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException;
}
public class android.test.suitebuilder.TestSuiteBuilder
  extends java.lang.Object
{
  public void <init>(java.lang.Class);
  public void <init>(java.lang.String, java.lang.ClassLoader);
  public final android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[]);
  public final android.test.suitebuilder.TestSuiteBuilder includeAllPackagesUnderHere();
  public final junit.framework.TestSuite build();
  public android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List);
  public android.test.suitebuilder.TestSuiteBuilder excludePackages(java.lang.String[]);
  public android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[]);
  public android.test.suitebuilder.TestSuiteBuilder named(java.lang.String);
  protected java.lang.String getSuiteName();
}
public class android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests
  extends junit.framework.TestCase
{
  public void <init>(java.lang.Exception);
  public void testSuiteConstructionFailed();
}
public interface android.test.suitebuilder.annotation.LargeTest
  extends java.lang.annotation.Annotation
{
}
public interface android.test.suitebuilder.annotation.MediumTest
  extends java.lang.annotation.Annotation
{
}
public interface android.test.suitebuilder.annotation.SmallTest
  extends java.lang.annotation.Annotation
{
}
public interface android.test.suitebuilder.annotation.Smoke
  extends java.lang.annotation.Annotation
{
}
public interface android.test.suitebuilder.annotation.Suppress
  extends java.lang.annotation.Annotation
{
}
public class android.text.AlteredCharSequence
  extends java.lang.Object
  implements java.lang.CharSequence, android.text.GetChars
{
  public static android.text.AlteredCharSequence make(java.lang.CharSequence, char[], int, int);
  public char charAt(int);
  public int length();
  public void getChars(int, int, char[], int);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String toString();
}
public class android.text.AndroidCharacter
  extends java.lang.Object
{
  public static native boolean mirror(char[], int, int);
  public static native char getMirror(char);
  public static native int getEastAsianWidth(char);
  public static native void getDirectionalities(char[], byte[], int);
  public static native void getEastAsianWidths(char[], int, int, byte[]);
  public void <init>();
  public static final int EAST_ASIAN_WIDTH_AMBIGUOUS;
  public static final int EAST_ASIAN_WIDTH_FULL_WIDTH;
  public static final int EAST_ASIAN_WIDTH_HALF_WIDTH;
  public static final int EAST_ASIAN_WIDTH_NARROW;
  public static final int EAST_ASIAN_WIDTH_NEUTRAL;
  public static final int EAST_ASIAN_WIDTH_WIDE;
}
public class android.text.Annotation
  extends java.lang.Object
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, java.lang.String);
  public int describeContents();
  public int getSpanTypeId();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getKey();
  public java.lang.String getValue();
}
public class android.text.AutoText
  extends java.lang.Object
{
  public static int getSize(android.view.View);
  public static java.lang.String get(java.lang.CharSequence, int, int, android.view.View);
}
public final class android.text.BidiFormatter
  extends java.lang.Object
{
  public static android.text.BidiFormatter getInstance();
  public static android.text.BidiFormatter getInstance(boolean);
  public static android.text.BidiFormatter getInstance(java.util.Locale);
  public boolean getStereoReset();
  public boolean isRtl(java.lang.String);
  public boolean isRtlContext();
  public java.lang.String unicodeWrap(java.lang.String);
  public java.lang.String unicodeWrap(java.lang.String, android.text.TextDirectionHeuristic);
  public java.lang.String unicodeWrap(java.lang.String, android.text.TextDirectionHeuristic, boolean);
  public java.lang.String unicodeWrap(java.lang.String, boolean);
}
public final class android.text.BidiFormatter$Builder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(boolean);
  public void <init>(java.util.Locale);
  public android.text.BidiFormatter build();
  public android.text.BidiFormatter$Builder setTextDirectionHeuristic(android.text.TextDirectionHeuristic);
  public android.text.BidiFormatter$Builder stereoReset(boolean);
}
public class android.text.BoringLayout
  extends android.text.Layout
  implements android.text.TextUtils$EllipsizeCallback
{
  public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean);
  public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int);
  public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint);
  public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.BoringLayout$Metrics);
  public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean);
  public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int);
  public final android.text.Layout$Directions getLineDirections(int);
  public boolean getLineContainsTab(int);
  public float getLineMax(int);
  public float getLineWidth(int);
  public int getBottomPadding();
  public int getEllipsisCount(int);
  public int getEllipsisStart(int);
  public int getEllipsizedWidth();
  public int getHeight();
  public int getLineCount();
  public int getLineDescent(int);
  public int getLineStart(int);
  public int getLineTop(int);
  public int getParagraphDirection(int);
  public int getTopPadding();
  public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int);
  public void ellipsized(int, int);
  public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean);
  public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int);
}
public class android.text.BoringLayout$Metrics
  extends android.graphics.Paint$FontMetricsInt
{
  public void <init>();
  public java.lang.String toString();
  public int width;
}
public abstract class android.text.ClipboardManager
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean hasText();
  public abstract void setText(java.lang.CharSequence);
  public abstract java.lang.CharSequence getText();
}
public class android.text.DynamicLayout
  extends android.text.Layout
{
  public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public void <init>(java.lang.CharSequence, java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public void <init>(java.lang.CharSequence, java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean, android.text.TextUtils$TruncateAt, int);
  public final android.text.Layout$Directions getLineDirections(int);
  public boolean getLineContainsTab(int);
  public int getBottomPadding();
  public int getEllipsisCount(int);
  public int getEllipsisStart(int);
  public int getEllipsizedWidth();
  public int getLineCount();
  public int getLineDescent(int);
  public int getLineStart(int);
  public int getLineTop(int);
  public int getParagraphDirection(int);
  public int getTopPadding();
}
public interface android.text.Editable
  extends java.lang.CharSequence, android.text.GetChars, android.text.Spannable, java.lang.Appendable
{
  public abstract void clear();
  public abstract void clearSpans();
  public abstract void setFilters(android.text.InputFilter[]);
  public abstract android.text.Editable append(char);
  public abstract android.text.Editable append(java.lang.CharSequence);
  public abstract android.text.Editable append(java.lang.CharSequence, int, int);
  public abstract android.text.Editable delete(int, int);
  public abstract android.text.Editable insert(int, java.lang.CharSequence);
  public abstract android.text.Editable insert(int, java.lang.CharSequence, int, int);
  public abstract android.text.Editable replace(int, int, java.lang.CharSequence);
  public abstract android.text.Editable replace(int, int, java.lang.CharSequence, int, int);
  public abstract android.text.InputFilter[] getFilters();
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
}
public class android.text.Editable$Factory
  extends java.lang.Object
{
  public static android.text.Editable$Factory getInstance();
  public void <init>();
  public android.text.Editable newEditable(java.lang.CharSequence);
}
public interface android.text.GetChars
  extends java.lang.CharSequence
{
  public abstract void getChars(int, int, char[], int);
}
public class android.text.Html
  extends java.lang.Object
{
  public static android.text.Spanned fromHtml(java.lang.String);
  public static android.text.Spanned fromHtml(java.lang.String, android.text.Html$ImageGetter, android.text.Html$TagHandler);
  public static android.text.Spanned fromHtml(java.lang.String, int);
  public static android.text.Spanned fromHtml(java.lang.String, int, android.text.Html$ImageGetter, android.text.Html$TagHandler);
  public static java.lang.String escapeHtml(java.lang.CharSequence);
  public static java.lang.String toHtml(android.text.Spanned);
  public static java.lang.String toHtml(android.text.Spanned, int);
  public static final int FROM_HTML_MODE_COMPACT;
  public static final int FROM_HTML_MODE_LEGACY;
  public static final int FROM_HTML_OPTION_USE_CSS_COLORS;
  public static final int FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE;
  public static final int FROM_HTML_SEPARATOR_LINE_BREAK_DIV;
  public static final int FROM_HTML_SEPARATOR_LINE_BREAK_HEADING;
  public static final int FROM_HTML_SEPARATOR_LINE_BREAK_LIST;
  public static final int FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM;
  public static final int FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH;
  public static final int TO_HTML_PARAGRAPH_LINES_CONSECUTIVE;
  public static final int TO_HTML_PARAGRAPH_LINES_INDIVIDUAL;
}
public interface android.text.Html$ImageGetter
{
  public abstract android.graphics.drawable.Drawable getDrawable(java.lang.String);
}
public interface android.text.Html$TagHandler
{
  public abstract void handleTag(boolean, java.lang.String, android.text.Editable, org.xml.sax.XMLReader);
}
public interface android.text.InputFilter
{
  public abstract java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
}
public class android.text.InputFilter$AllCaps
  extends java.lang.Object
  implements android.text.InputFilter
{
  public void <init>();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
}
public class android.text.InputFilter$LengthFilter
  extends java.lang.Object
  implements android.text.InputFilter
{
  public void <init>(int);
  public int getMax();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
}
public interface android.text.InputType
{
  public static final int TYPE_CLASS_DATETIME;
  public static final int TYPE_CLASS_NUMBER;
  public static final int TYPE_CLASS_PHONE;
  public static final int TYPE_CLASS_TEXT;
  public static final int TYPE_DATETIME_VARIATION_DATE;
  public static final int TYPE_DATETIME_VARIATION_NORMAL;
  public static final int TYPE_DATETIME_VARIATION_TIME;
  public static final int TYPE_MASK_CLASS;
  public static final int TYPE_MASK_FLAGS;
  public static final int TYPE_MASK_VARIATION;
  public static final int TYPE_NULL;
  public static final int TYPE_NUMBER_FLAG_DECIMAL;
  public static final int TYPE_NUMBER_FLAG_SIGNED;
  public static final int TYPE_NUMBER_VARIATION_NORMAL;
  public static final int TYPE_NUMBER_VARIATION_PASSWORD;
  public static final int TYPE_TEXT_FLAG_AUTO_COMPLETE;
  public static final int TYPE_TEXT_FLAG_AUTO_CORRECT;
  public static final int TYPE_TEXT_FLAG_CAP_CHARACTERS;
  public static final int TYPE_TEXT_FLAG_CAP_SENTENCES;
  public static final int TYPE_TEXT_FLAG_CAP_WORDS;
  public static final int TYPE_TEXT_FLAG_IME_MULTI_LINE;
  public static final int TYPE_TEXT_FLAG_MULTI_LINE;
  public static final int TYPE_TEXT_FLAG_NO_SUGGESTIONS;
  public static final int TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
  public static final int TYPE_TEXT_VARIATION_EMAIL_SUBJECT;
  public static final int TYPE_TEXT_VARIATION_FILTER;
  public static final int TYPE_TEXT_VARIATION_LONG_MESSAGE;
  public static final int TYPE_TEXT_VARIATION_NORMAL;
  public static final int TYPE_TEXT_VARIATION_PASSWORD;
  public static final int TYPE_TEXT_VARIATION_PERSON_NAME;
  public static final int TYPE_TEXT_VARIATION_PHONETIC;
  public static final int TYPE_TEXT_VARIATION_POSTAL_ADDRESS;
  public static final int TYPE_TEXT_VARIATION_SHORT_MESSAGE;
  public static final int TYPE_TEXT_VARIATION_URI;
  public static final int TYPE_TEXT_VARIATION_VISIBLE_PASSWORD;
  public static final int TYPE_TEXT_VARIATION_WEB_EDIT_TEXT;
  public static final int TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS;
  public static final int TYPE_TEXT_VARIATION_WEB_PASSWORD;
}
public abstract class android.text.Layout
  extends java.lang.Object
{
  public static float getDesiredWidth(java.lang.CharSequence, android.text.TextPaint);
  public static float getDesiredWidth(java.lang.CharSequence, int, int, android.text.TextPaint);
  public final float getSpacingAdd();
  public final float getSpacingMultiplier();
  public final int getLineAscent(int);
  public final int getLineBaseline(int);
  public final int getLineBottom(int);
  public final int getLineEnd(int);
  public final int getParagraphLeft(int);
  public final int getParagraphRight(int);
  public final int getWidth();
  public final void increaseWidthTo(int);
  public final android.text.Layout$Alignment getAlignment();
  public final android.text.Layout$Alignment getParagraphAlignment(int);
  public final android.text.TextPaint getPaint();
  public final java.lang.CharSequence getText();
  public abstract boolean getLineContainsTab(int);
  public abstract int getBottomPadding();
  public abstract int getEllipsisCount(int);
  public abstract int getEllipsisStart(int);
  public abstract int getLineCount();
  public abstract int getLineDescent(int);
  public abstract int getLineStart(int);
  public abstract int getLineTop(int);
  public abstract int getParagraphDirection(int);
  public abstract int getTopPadding();
  public abstract android.text.Layout$Directions getLineDirections(int);
  public boolean isRtlCharAt(int);
  public float getLineLeft(int);
  public float getLineMax(int);
  public float getLineRight(int);
  public float getLineWidth(int);
  public float getPrimaryHorizontal(int);
  public float getSecondaryHorizontal(int);
  public int getEllipsizedWidth();
  public int getHeight();
  public int getLineBounds(int, android.graphics.Rect);
  public int getLineForOffset(int);
  public int getLineForVertical(int);
  public int getLineVisibleEnd(int);
  public int getOffsetForHorizontal(int, float);
  public int getOffsetToLeftOf(int);
  public int getOffsetToRightOf(int);
  public void draw(android.graphics.Canvas);
  public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int);
  public void getCursorPath(int, android.graphics.Path, java.lang.CharSequence);
  public void getSelectionPath(int, int, android.graphics.Path);
  protected void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float);
  protected final boolean isSpanned();
  public static final int BREAK_STRATEGY_BALANCED;
  public static final int BREAK_STRATEGY_HIGH_QUALITY;
  public static final int BREAK_STRATEGY_SIMPLE;
  public static final int DIR_LEFT_TO_RIGHT;
  public static final int DIR_RIGHT_TO_LEFT;
  public static final int HYPHENATION_FREQUENCY_FULL;
  public static final int HYPHENATION_FREQUENCY_NONE;
  public static final int HYPHENATION_FREQUENCY_NORMAL;
}
public final class android.text.Layout$Alignment
  extends java.lang.Enum
{
  public static android.text.Layout$Alignment valueOf(java.lang.String);
  public static android.text.Layout$Alignment[] values();
  public static final android.text.Layout$Alignment ALIGN_CENTER;
  public static final android.text.Layout$Alignment ALIGN_NORMAL;
  public static final android.text.Layout$Alignment ALIGN_OPPOSITE;
}
public class android.text.Layout$Directions
  extends java.lang.Object
{
}
public abstract class android.text.LoginFilter
  extends java.lang.Object
  implements android.text.InputFilter
{
  public abstract boolean isAllowed(char);
  public void onInvalidCharacter(char);
  public void onStart();
  public void onStop();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
}
public class android.text.LoginFilter$PasswordFilterGMail
  extends android.text.LoginFilter
{
  public void <init>();
  public void <init>(boolean);
  public boolean isAllowed(char);
}
public class android.text.LoginFilter$UsernameFilterGMail
  extends android.text.LoginFilter
{
  public void <init>();
  public void <init>(boolean);
  public boolean isAllowed(char);
}
public class android.text.LoginFilter$UsernameFilterGeneric
  extends android.text.LoginFilter
{
  public void <init>();
  public void <init>(boolean);
  public boolean isAllowed(char);
}
public interface android.text.NoCopySpan
{
}
public class android.text.NoCopySpan$Concrete
  extends java.lang.Object
  implements android.text.NoCopySpan
{
  public void <init>();
}
public interface android.text.ParcelableSpan
  extends android.os.Parcelable
{
  public abstract int getSpanTypeId();
}
public class android.text.Selection
  extends java.lang.Object
{
  public static final int getSelectionEnd(java.lang.CharSequence);
  public static final int getSelectionStart(java.lang.CharSequence);
  public static final void extendSelection(android.text.Spannable, int);
  public static final void removeSelection(android.text.Spannable);
  public static final void selectAll(android.text.Spannable);
  public static final void setSelection(android.text.Spannable, int);
  public static boolean extendDown(android.text.Spannable, android.text.Layout);
  public static boolean extendLeft(android.text.Spannable, android.text.Layout);
  public static boolean extendRight(android.text.Spannable, android.text.Layout);
  public static boolean extendToLeftEdge(android.text.Spannable, android.text.Layout);
  public static boolean extendToRightEdge(android.text.Spannable, android.text.Layout);
  public static boolean extendUp(android.text.Spannable, android.text.Layout);
  public static boolean moveDown(android.text.Spannable, android.text.Layout);
  public static boolean moveLeft(android.text.Spannable, android.text.Layout);
  public static boolean moveRight(android.text.Spannable, android.text.Layout);
  public static boolean moveToLeftEdge(android.text.Spannable, android.text.Layout);
  public static boolean moveToRightEdge(android.text.Spannable, android.text.Layout);
  public static boolean moveUp(android.text.Spannable, android.text.Layout);
  public static void setSelection(android.text.Spannable, int, int);
  public static final java.lang.Object SELECTION_END;
  public static final java.lang.Object SELECTION_START;
}
public interface android.text.SpanWatcher
  extends android.text.NoCopySpan
{
  public abstract void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public abstract void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
  public abstract void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
}
public interface android.text.Spannable
  extends android.text.Spanned
{
  public abstract void removeSpan(java.lang.Object);
  public abstract void setSpan(java.lang.Object, int, int, int);
}
public class android.text.Spannable$Factory
  extends java.lang.Object
{
  public static android.text.Spannable$Factory getInstance();
  public void <init>();
  public android.text.Spannable newSpannable(java.lang.CharSequence);
}
public class android.text.SpannableString
  extends android.text.SpannableStringInternal
  implements java.lang.CharSequence, android.text.GetChars, android.text.Spannable
{
  public static android.text.SpannableString valueOf(java.lang.CharSequence);
  public void <init>(java.lang.CharSequence);
  public final java.lang.CharSequence subSequence(int, int);
  public boolean equals(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public int getSpanStart(java.lang.Object);
  public int hashCode();
  public int nextSpanTransition(int, int, java.lang.Class);
  public void removeSpan(java.lang.Object);
  public void setSpan(java.lang.Object, int, int, int);
  public java.lang.Object[] getSpans(int, int, java.lang.Class);
}
public class android.text.SpannableStringBuilder
  extends java.lang.Object
  implements java.lang.CharSequence, android.text.GetChars, android.text.Spannable, android.text.Editable, java.lang.Appendable
{
  public static android.text.SpannableStringBuilder valueOf(java.lang.CharSequence);
  public void <init>();
  public void <init>(java.lang.CharSequence);
  public void <init>(java.lang.CharSequence, int, int);
  public boolean equals(java.lang.Object);
  public char charAt(int);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public int getSpanStart(java.lang.Object);
  public int getTextRunCursor(int, int, int, int, int, android.graphics.Paint);
  public int getTextWatcherDepth();
  public int hashCode();
  public int length();
  public int nextSpanTransition(int, int, java.lang.Class);
  public void clear();
  public void clearSpans();
  public void getChars(int, int, char[], int);
  public void removeSpan(java.lang.Object);
  public void setFilters(android.text.InputFilter[]);
  public void setSpan(java.lang.Object, int, int, int);
  public android.text.Editable append(char);
  public android.text.Editable append(java.lang.CharSequence);
  public android.text.Editable append(java.lang.CharSequence, int, int);
  public android.text.Editable delete(int, int);
  public android.text.Editable insert(int, java.lang.CharSequence);
  public android.text.Editable insert(int, java.lang.CharSequence, int, int);
  public android.text.Editable replace(int, int, java.lang.CharSequence);
  public android.text.Editable replace(int, int, java.lang.CharSequence, int, int);
  public android.text.InputFilter[] getFilters();
  public android.text.SpannableStringBuilder append(char);
  public android.text.SpannableStringBuilder append(java.lang.CharSequence);
  public android.text.SpannableStringBuilder append(java.lang.CharSequence, int, int);
  public android.text.SpannableStringBuilder append(java.lang.CharSequence, java.lang.Object, int);
  public android.text.SpannableStringBuilder delete(int, int);
  public android.text.SpannableStringBuilder insert(int, java.lang.CharSequence);
  public android.text.SpannableStringBuilder insert(int, java.lang.CharSequence, int, int);
  public android.text.SpannableStringBuilder replace(int, int, java.lang.CharSequence);
  public android.text.SpannableStringBuilder replace(int, int, java.lang.CharSequence, int, int);
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.Object[] getSpans(int, int, java.lang.Class);
  public java.lang.String toString();
}
public interface android.text.Spanned
  extends java.lang.CharSequence
{
  public abstract int getSpanEnd(java.lang.Object);
  public abstract int getSpanFlags(java.lang.Object);
  public abstract int getSpanStart(java.lang.Object);
  public abstract int nextSpanTransition(int, int, java.lang.Class);
  public abstract java.lang.Object[] getSpans(int, int, java.lang.Class);
  public static final int SPAN_COMPOSING;
  public static final int SPAN_EXCLUSIVE_EXCLUSIVE;
  public static final int SPAN_EXCLUSIVE_INCLUSIVE;
  public static final int SPAN_INCLUSIVE_EXCLUSIVE;
  public static final int SPAN_INCLUSIVE_INCLUSIVE;
  public static final int SPAN_INTERMEDIATE;
  public static final int SPAN_MARK_MARK;
  public static final int SPAN_MARK_POINT;
  public static final int SPAN_PARAGRAPH;
  public static final int SPAN_POINT_MARK;
  public static final int SPAN_POINT_MARK_MASK;
  public static final int SPAN_POINT_POINT;
  public static final int SPAN_PRIORITY;
  public static final int SPAN_PRIORITY_SHIFT;
  public static final int SPAN_USER;
  public static final int SPAN_USER_SHIFT;
}
public final class android.text.SpannedString
  extends android.text.SpannableStringInternal
  implements java.lang.CharSequence, android.text.GetChars, android.text.Spanned
{
  public static android.text.SpannedString valueOf(java.lang.CharSequence);
  public void <init>(java.lang.CharSequence);
  public boolean equals(java.lang.Object);
  public int getSpanEnd(java.lang.Object);
  public int getSpanFlags(java.lang.Object);
  public int getSpanStart(java.lang.Object);
  public int hashCode();
  public int nextSpanTransition(int, int, java.lang.Class);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.Object[] getSpans(int, int, java.lang.Class);
}
public class android.text.StaticLayout
  extends android.text.Layout
{
  public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public void <init>(java.lang.CharSequence, int, int, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean);
  public void <init>(java.lang.CharSequence, int, int, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean, android.text.TextUtils$TruncateAt, int);
  public final android.text.Layout$Directions getLineDirections(int);
  public boolean getLineContainsTab(int);
  public int getBottomPadding();
  public int getEllipsisCount(int);
  public int getEllipsisStart(int);
  public int getEllipsizedWidth();
  public int getLineCount();
  public int getLineDescent(int);
  public int getLineForVertical(int);
  public int getLineStart(int);
  public int getLineTop(int);
  public int getParagraphDirection(int);
  public int getTopPadding();
}
public final class android.text.StaticLayout$Builder
  extends java.lang.Object
{
  public static android.text.StaticLayout$Builder obtain(java.lang.CharSequence, int, int, android.text.TextPaint, int);
  public android.text.StaticLayout build();
  public android.text.StaticLayout$Builder setAlignment(android.text.Layout$Alignment);
  public android.text.StaticLayout$Builder setBreakStrategy(int);
  public android.text.StaticLayout$Builder setEllipsize(android.text.TextUtils$TruncateAt);
  public android.text.StaticLayout$Builder setEllipsizedWidth(int);
  public android.text.StaticLayout$Builder setHyphenationFrequency(int);
  public android.text.StaticLayout$Builder setIncludePad(boolean);
  public android.text.StaticLayout$Builder setIndents(int[], int[]);
  public android.text.StaticLayout$Builder setLineSpacing(float, float);
  public android.text.StaticLayout$Builder setMaxLines(int);
  public android.text.StaticLayout$Builder setText(java.lang.CharSequence);
  public android.text.StaticLayout$Builder setTextDirection(android.text.TextDirectionHeuristic);
  protected void finalize()  throws java.lang.Throwable;
}
public interface android.text.TextDirectionHeuristic
{
  public abstract boolean isRtl(char[], int, int);
  public abstract boolean isRtl(java.lang.CharSequence, int, int);
}
public class android.text.TextDirectionHeuristics
  extends java.lang.Object
{
  public void <init>();
  public static final android.text.TextDirectionHeuristic ANYRTL_LTR;
  public static final android.text.TextDirectionHeuristic FIRSTSTRONG_LTR;
  public static final android.text.TextDirectionHeuristic FIRSTSTRONG_RTL;
  public static final android.text.TextDirectionHeuristic LOCALE;
  public static final android.text.TextDirectionHeuristic LTR;
  public static final android.text.TextDirectionHeuristic RTL;
}
public class android.text.TextPaint
  extends android.graphics.Paint
{
  public void <init>();
  public void <init>(android.graphics.Paint);
  public void <init>(int);
  public void set(android.text.TextPaint);
  public float density;
  public int baselineShift;
  public int bgColor;
  public int linkColor;
  public int[] drawableState;
}
public class android.text.TextUtils
  extends java.lang.Object
{
  public static boolean equals(java.lang.CharSequence, java.lang.CharSequence);
  public static boolean isDigitsOnly(java.lang.CharSequence);
  public static boolean isEmpty(java.lang.CharSequence);
  public static boolean isGraphic(char);
  public static boolean isGraphic(java.lang.CharSequence);
  public static boolean regionMatches(java.lang.CharSequence, int, java.lang.CharSequence, int, int);
  public static int getCapsMode(java.lang.CharSequence, int, int);
  public static int getLayoutDirectionFromLocale(java.util.Locale);
  public static int getOffsetAfter(java.lang.CharSequence, int);
  public static int getOffsetBefore(java.lang.CharSequence, int);
  public static int getTrimmedLength(java.lang.CharSequence);
  public static int indexOf(java.lang.CharSequence, char);
  public static int indexOf(java.lang.CharSequence, char, int);
  public static int indexOf(java.lang.CharSequence, char, int, int);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int);
  public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int);
  public static int lastIndexOf(java.lang.CharSequence, char);
  public static int lastIndexOf(java.lang.CharSequence, char, int);
  public static int lastIndexOf(java.lang.CharSequence, char, int, int);
  public static void copySpansFrom(android.text.Spanned, int, int, java.lang.Class, android.text.Spannable, int);
  public static void dumpSpans(java.lang.CharSequence, android.util.Printer, java.lang.String);
  public static void getChars(java.lang.CharSequence, int, int, char[], int);
  public static void writeToParcel(java.lang.CharSequence, android.os.Parcel, int);
  public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String);
  public static java.lang.CharSequence concat(java.lang.CharSequence[]);
  public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt);
  public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback);
  public static java.lang.CharSequence expandTemplate(java.lang.CharSequence, java.lang.CharSequence[]);
  public static java.lang.CharSequence getReverse(java.lang.CharSequence, int, int);
  public static java.lang.CharSequence replace(java.lang.CharSequence, java.lang.String[], java.lang.CharSequence[]);
  public static java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence);
  public static java.lang.String htmlEncode(java.lang.String);
  public static java.lang.String join(java.lang.CharSequence, java.lang.Iterable);
  public static java.lang.String join(java.lang.CharSequence, java.lang.Object[]);
  public static java.lang.String substring(java.lang.CharSequence, int, int);
  public static java.lang.String[] split(java.lang.String, java.lang.String);
  public static java.lang.String[] split(java.lang.String, java.util.regex.Pattern);
  public static final int CAP_MODE_CHARACTERS;
  public static final int CAP_MODE_SENTENCES;
  public static final int CAP_MODE_WORDS;
  public static final android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR;
}
public interface android.text.TextUtils$EllipsizeCallback
{
  public abstract void ellipsized(int, int);
}
public class android.text.TextUtils$SimpleStringSplitter
  extends java.lang.Object
  implements android.text.TextUtils$StringSplitter, java.util.Iterator
{
  public void <init>(char);
  public boolean hasNext();
  public void remove();
  public void setString(java.lang.String);
  public java.lang.Object next();
  public java.lang.String next();
  public java.util.Iterator iterator();
}
public interface android.text.TextUtils$StringSplitter
  extends java.lang.Iterable
{
  public abstract void setString(java.lang.String);
}
public final class android.text.TextUtils$TruncateAt
  extends java.lang.Enum
{
  public static android.text.TextUtils$TruncateAt valueOf(java.lang.String);
  public static android.text.TextUtils$TruncateAt[] values();
  public static final android.text.TextUtils$TruncateAt END;
  public static final android.text.TextUtils$TruncateAt MARQUEE;
  public static final android.text.TextUtils$TruncateAt MIDDLE;
  public static final android.text.TextUtils$TruncateAt START;
}
public interface android.text.TextWatcher
  extends android.text.NoCopySpan
{
  public abstract void afterTextChanged(android.text.Editable);
  public abstract void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public abstract void onTextChanged(java.lang.CharSequence, int, int, int);
}
public class android.text.format.DateFormat
  extends java.lang.Object
{
  public static boolean is24HourFormat(android.content.Context);
  public static char[] getDateFormatOrder(android.content.Context);
  public static java.lang.CharSequence format(java.lang.CharSequence, java.util.Calendar);
  public static java.lang.CharSequence format(java.lang.CharSequence, java.util.Date);
  public static java.lang.CharSequence format(java.lang.CharSequence, long);
  public static java.lang.String getBestDateTimePattern(java.util.Locale, java.lang.String);
  public static java.text.DateFormat getDateFormat(android.content.Context);
  public static java.text.DateFormat getLongDateFormat(android.content.Context);
  public static java.text.DateFormat getMediumDateFormat(android.content.Context);
  public static java.text.DateFormat getTimeFormat(android.content.Context);
  public void <init>();
}
public class android.text.format.DateUtils
  extends java.lang.Object
{
  public static final java.lang.CharSequence formatSameDayTime(long, long, int, int);
  public static boolean isToday(long);
  public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context, long, long, long, int);
  public static java.lang.CharSequence getRelativeTimeSpanString(android.content.Context, long);
  public static java.lang.CharSequence getRelativeTimeSpanString(android.content.Context, long, boolean);
  public static java.lang.CharSequence getRelativeTimeSpanString(long);
  public static java.lang.CharSequence getRelativeTimeSpanString(long, long, long);
  public static java.lang.CharSequence getRelativeTimeSpanString(long, long, long, int);
  public static java.lang.String formatDateRange(android.content.Context, long, long, int);
  public static java.lang.String formatDateTime(android.content.Context, long, int);
  public static java.lang.String formatElapsedTime(java.lang.StringBuilder, long);
  public static java.lang.String formatElapsedTime(long);
  public static java.lang.String getAMPMString(int);
  public static java.lang.String getDayOfWeekString(int, int);
  public static java.lang.String getMonthString(int, int);
  public static java.util.Formatter formatDateRange(android.content.Context, java.util.Formatter, long, long, int);
  public static java.util.Formatter formatDateRange(android.content.Context, java.util.Formatter, long, long, int, java.lang.String);
  public void <init>();
  public static final int FORMAT_12HOUR;
  public static final int FORMAT_24HOUR;
  public static final int FORMAT_ABBREV_ALL;
  public static final int FORMAT_ABBREV_MONTH;
  public static final int FORMAT_ABBREV_RELATIVE;
  public static final int FORMAT_ABBREV_TIME;
  public static final int FORMAT_ABBREV_WEEKDAY;
  public static final int FORMAT_CAP_AMPM;
  public static final int FORMAT_CAP_MIDNIGHT;
  public static final int FORMAT_CAP_NOON;
  public static final int FORMAT_CAP_NOON_MIDNIGHT;
  public static final int FORMAT_NO_MIDNIGHT;
  public static final int FORMAT_NO_MONTH_DAY;
  public static final int FORMAT_NO_NOON;
  public static final int FORMAT_NO_NOON_MIDNIGHT;
  public static final int FORMAT_NO_YEAR;
  public static final int FORMAT_NUMERIC_DATE;
  public static final int FORMAT_SHOW_DATE;
  public static final int FORMAT_SHOW_TIME;
  public static final int FORMAT_SHOW_WEEKDAY;
  public static final int FORMAT_SHOW_YEAR;
  public static final int FORMAT_UTC;
  public static final int LENGTH_LONG;
  public static final int LENGTH_MEDIUM;
  public static final int LENGTH_SHORT;
  public static final int LENGTH_SHORTER;
  public static final int LENGTH_SHORTEST;
  public static final long DAY_IN_MILLIS;
  public static final long HOUR_IN_MILLIS;
  public static final long MINUTE_IN_MILLIS;
  public static final long SECOND_IN_MILLIS;
  public static final long WEEK_IN_MILLIS;
  public static final long YEAR_IN_MILLIS;
  public static final int[] sameMonthTable;
  public static final int[] sameYearTable;
  public static final java.lang.String ABBREV_MONTH_FORMAT;
  public static final java.lang.String ABBREV_WEEKDAY_FORMAT;
  public static final java.lang.String HOUR_MINUTE_24;
  public static final java.lang.String MONTH_DAY_FORMAT;
  public static final java.lang.String MONTH_FORMAT;
  public static final java.lang.String NUMERIC_MONTH_FORMAT;
  public static final java.lang.String WEEKDAY_FORMAT;
  public static final java.lang.String YEAR_FORMAT;
  public static final java.lang.String YEAR_FORMAT_TWO_DIGITS;
}
public final class android.text.format.Formatter
  extends java.lang.Object
{
  public static java.lang.String formatFileSize(android.content.Context, long);
  public static java.lang.String formatIpAddress(int);
  public static java.lang.String formatShortFileSize(android.content.Context, long);
  public void <init>();
}
public class android.text.format.Time
  extends java.lang.Object
{
  public static boolean isEpoch(android.text.format.Time);
  public static int compare(android.text.format.Time, android.text.format.Time);
  public static int getJulianDay(long, long);
  public static int getJulianMondayFromWeeksSinceEpoch(int);
  public static int getWeeksSinceEpochFromJulianDay(int, int);
  public static java.lang.String getCurrentTimezone();
  public void <init>();
  public void <init>(android.text.format.Time);
  public void <init>(java.lang.String);
  public boolean after(android.text.format.Time);
  public boolean before(android.text.format.Time);
  public boolean parse(java.lang.String);
  public boolean parse3339(java.lang.String);
  public int getActualMaximum(int);
  public int getWeekNumber();
  public long normalize(boolean);
  public long setJulianDay(int);
  public long toMillis(boolean);
  public void clear(java.lang.String);
  public void set(android.text.format.Time);
  public void set(int, int, int);
  public void set(int, int, int, int, int, int);
  public void set(long);
  public void setToNow();
  public void switchTimezone(java.lang.String);
  public java.lang.String format(java.lang.String);
  public java.lang.String format2445();
  public java.lang.String format3339(boolean);
  public java.lang.String toString();
  public static final int EPOCH_JULIAN_DAY;
  public static final int FRIDAY;
  public static final int HOUR;
  public static final int MINUTE;
  public static final int MONDAY;
  public static final int MONDAY_BEFORE_JULIAN_EPOCH;
  public static final int MONTH;
  public static final int MONTH_DAY;
  public static final int SATURDAY;
  public static final int SECOND;
  public static final int SUNDAY;
  public static final int THURSDAY;
  public static final int TUESDAY;
  public static final int WEDNESDAY;
  public static final int WEEK_DAY;
  public static final int WEEK_NUM;
  public static final int YEAR;
  public static final int YEAR_DAY;
  public static final java.lang.String TIMEZONE_UTC;
  public boolean allDay;
  public int hour;
  public int isDst;
  public int minute;
  public int month;
  public int monthDay;
  public int second;
  public int weekDay;
  public int year;
  public int yearDay;
  public long gmtoff;
  public java.lang.String timezone;
}
public class android.text.method.ArrowKeyMovementMethod
  extends android.text.method.BaseMovementMethod
  implements android.text.method.MovementMethod
{
  public static android.text.method.MovementMethod getInstance();
  public void <init>();
  public boolean canSelectArbitrarily();
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public void initialize(android.widget.TextView, android.text.Spannable);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  protected boolean bottom(android.widget.TextView, android.text.Spannable);
  protected boolean down(android.widget.TextView, android.text.Spannable);
  protected boolean end(android.widget.TextView, android.text.Spannable);
  protected boolean handleMovementKey(android.widget.TextView, android.text.Spannable, int, int, android.view.KeyEvent);
  protected boolean home(android.widget.TextView, android.text.Spannable);
  protected boolean left(android.widget.TextView, android.text.Spannable);
  protected boolean lineEnd(android.widget.TextView, android.text.Spannable);
  protected boolean lineStart(android.widget.TextView, android.text.Spannable);
  protected boolean pageDown(android.widget.TextView, android.text.Spannable);
  protected boolean pageUp(android.widget.TextView, android.text.Spannable);
  protected boolean right(android.widget.TextView, android.text.Spannable);
  protected boolean top(android.widget.TextView, android.text.Spannable);
  protected boolean up(android.widget.TextView, android.text.Spannable);
}
public abstract class android.text.method.BaseKeyListener
  extends android.text.method.MetaKeyKeyListener
  implements android.text.method.KeyListener
{
  public void <init>();
  public boolean backspace(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean forwardDelete(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent);
}
public class android.text.method.BaseMovementMethod
  extends java.lang.Object
  implements android.text.method.MovementMethod
{
  public void <init>();
  public boolean canSelectArbitrarily();
  public boolean onGenericMotionEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public boolean onKeyDown(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public boolean onKeyOther(android.widget.TextView, android.text.Spannable, android.view.KeyEvent);
  public boolean onKeyUp(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public boolean onTrackballEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public void initialize(android.widget.TextView, android.text.Spannable);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  protected boolean bottom(android.widget.TextView, android.text.Spannable);
  protected boolean down(android.widget.TextView, android.text.Spannable);
  protected boolean end(android.widget.TextView, android.text.Spannable);
  protected boolean handleMovementKey(android.widget.TextView, android.text.Spannable, int, int, android.view.KeyEvent);
  protected boolean home(android.widget.TextView, android.text.Spannable);
  protected boolean left(android.widget.TextView, android.text.Spannable);
  protected boolean lineEnd(android.widget.TextView, android.text.Spannable);
  protected boolean lineStart(android.widget.TextView, android.text.Spannable);
  protected boolean pageDown(android.widget.TextView, android.text.Spannable);
  protected boolean pageUp(android.widget.TextView, android.text.Spannable);
  protected boolean right(android.widget.TextView, android.text.Spannable);
  protected boolean top(android.widget.TextView, android.text.Spannable);
  protected boolean up(android.widget.TextView, android.text.Spannable);
  protected int getMovementMetaState(android.text.Spannable, android.view.KeyEvent);
}
public class android.text.method.CharacterPickerDialog
  extends android.app.Dialog
  implements android.widget.AdapterView$OnItemClickListener, android.view.View$OnClickListener
{
  public void <init>(android.content.Context, android.view.View, android.text.Editable, java.lang.String, boolean);
  public void onClick(android.view.View);
  public void onItemClick(android.widget.AdapterView, android.view.View, int, long);
  protected void onCreate(android.os.Bundle);
}
public class android.text.method.DateKeyListener
  extends android.text.method.NumberKeyListener
{
  public static android.text.method.DateKeyListener getInstance();
  public void <init>();
  public int getInputType();
  protected char[] getAcceptedChars();
  public static final char[] CHARACTERS;
}
public class android.text.method.DateTimeKeyListener
  extends android.text.method.NumberKeyListener
{
  public static android.text.method.DateTimeKeyListener getInstance();
  public void <init>();
  public int getInputType();
  protected char[] getAcceptedChars();
  public static final char[] CHARACTERS;
}
public class android.text.method.DialerKeyListener
  extends android.text.method.NumberKeyListener
{
  public static android.text.method.DialerKeyListener getInstance();
  public void <init>();
  public int getInputType();
  protected int lookup(android.view.KeyEvent, android.text.Spannable);
  protected char[] getAcceptedChars();
  public static final char[] CHARACTERS;
}
public class android.text.method.DigitsKeyListener
  extends android.text.method.NumberKeyListener
{
  public static android.text.method.DigitsKeyListener getInstance();
  public static android.text.method.DigitsKeyListener getInstance(boolean, boolean);
  public static android.text.method.DigitsKeyListener getInstance(java.lang.String);
  public void <init>();
  public void <init>(boolean, boolean);
  public int getInputType();
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
  protected char[] getAcceptedChars();
}
public class android.text.method.HideReturnsTransformationMethod
  extends android.text.method.ReplacementTransformationMethod
{
  public static android.text.method.HideReturnsTransformationMethod getInstance();
  public void <init>();
  protected char[] getOriginal();
  protected char[] getReplacement();
}
public interface android.text.method.KeyListener
{
  public abstract boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public abstract boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent);
  public abstract boolean onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public abstract int getInputType();
  public abstract void clearMetaKeyState(android.view.View, android.text.Editable, int);
}
public class android.text.method.LinkMovementMethod
  extends android.text.method.ScrollingMovementMethod
{
  public static android.text.method.MovementMethod getInstance();
  public void <init>();
  public boolean canSelectArbitrarily();
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public void initialize(android.widget.TextView, android.text.Spannable);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  protected boolean down(android.widget.TextView, android.text.Spannable);
  protected boolean handleMovementKey(android.widget.TextView, android.text.Spannable, int, int, android.view.KeyEvent);
  protected boolean left(android.widget.TextView, android.text.Spannable);
  protected boolean right(android.widget.TextView, android.text.Spannable);
  protected boolean up(android.widget.TextView, android.text.Spannable);
}
public abstract class android.text.method.MetaKeyKeyListener
  extends java.lang.Object
{
  public static final int getMetaState(java.lang.CharSequence);
  public static final int getMetaState(java.lang.CharSequence, android.view.KeyEvent);
  public static final int getMetaState(java.lang.CharSequence, int);
  public static final int getMetaState(java.lang.CharSequence, int, android.view.KeyEvent);
  public static final int getMetaState(long);
  public static final int getMetaState(long, int);
  public static boolean isMetaTracker(java.lang.CharSequence, java.lang.Object);
  public static boolean isSelectingMetaTracker(java.lang.CharSequence, java.lang.Object);
  public static long adjustMetaAfterKeypress(long);
  public static long handleKeyDown(long, int, android.view.KeyEvent);
  public static long handleKeyUp(long, int, android.view.KeyEvent);
  public static long resetLockedMeta(long);
  public static void adjustMetaAfterKeypress(android.text.Spannable);
  public static void clearMetaKeyState(android.text.Editable, int);
  public static void resetMetaState(android.text.Spannable);
  public void <init>();
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public long clearMetaKeyState(long, int);
  public void clearMetaKeyState(android.view.View, android.text.Editable, int);
  protected static void resetLockedMeta(android.text.Spannable);
  public static final int META_ALT_LOCKED;
  public static final int META_ALT_ON;
  public static final int META_CAP_LOCKED;
  public static final int META_SHIFT_ON;
  public static final int META_SYM_LOCKED;
  public static final int META_SYM_ON;
}
public interface android.text.method.MovementMethod
{
  public abstract boolean canSelectArbitrarily();
  public abstract boolean onGenericMotionEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public abstract boolean onKeyDown(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public abstract boolean onKeyOther(android.widget.TextView, android.text.Spannable, android.view.KeyEvent);
  public abstract boolean onKeyUp(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent);
  public abstract boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public abstract boolean onTrackballEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public abstract void initialize(android.widget.TextView, android.text.Spannable);
  public abstract void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
}
public class android.text.method.MultiTapKeyListener
  extends android.text.method.BaseKeyListener
  implements android.text.SpanWatcher
{
  public static android.text.method.MultiTapKeyListener getInstance(boolean, android.text.method.TextKeyListener$Capitalize);
  public void <init>(android.text.method.TextKeyListener$Capitalize, boolean);
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public int getInputType();
  public void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
  public void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
}
public abstract class android.text.method.NumberKeyListener
  extends android.text.method.BaseKeyListener
  implements android.text.InputFilter
{
  public void <init>();
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public java.lang.CharSequence filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int);
  protected static boolean ok(char[], char);
  protected abstract char[] getAcceptedChars();
  protected int lookup(android.view.KeyEvent, android.text.Spannable);
}
public class android.text.method.PasswordTransformationMethod
  extends java.lang.Object
  implements android.text.method.TransformationMethod, android.text.TextWatcher
{
  public static android.text.method.PasswordTransformationMethod getInstance();
  public void <init>();
  public void afterTextChanged(android.text.Editable);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void onFocusChanged(android.view.View, java.lang.CharSequence, boolean, int, android.graphics.Rect);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public java.lang.CharSequence getTransformation(java.lang.CharSequence, android.view.View);
}
public class android.text.method.QwertyKeyListener
  extends android.text.method.BaseKeyListener
{
  public static void markAsReplaced(android.text.Spannable, int, int, java.lang.String);
  public static android.text.method.QwertyKeyListener getInstance(boolean, android.text.method.TextKeyListener$Capitalize);
  public static android.text.method.QwertyKeyListener getInstanceForFullKeyboard();
  public void <init>(android.text.method.TextKeyListener$Capitalize, boolean);
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public int getInputType();
}
public abstract class android.text.method.ReplacementTransformationMethod
  extends java.lang.Object
  implements android.text.method.TransformationMethod
{
  public void <init>();
  public void onFocusChanged(android.view.View, java.lang.CharSequence, boolean, int, android.graphics.Rect);
  public java.lang.CharSequence getTransformation(java.lang.CharSequence, android.view.View);
  protected abstract char[] getOriginal();
  protected abstract char[] getReplacement();
}
public class android.text.method.ScrollingMovementMethod
  extends android.text.method.BaseMovementMethod
  implements android.text.method.MovementMethod
{
  public static android.text.method.MovementMethod getInstance();
  public void <init>();
  public boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public void onTakeFocus(android.widget.TextView, android.text.Spannable, int);
  protected boolean bottom(android.widget.TextView, android.text.Spannable);
  protected boolean down(android.widget.TextView, android.text.Spannable);
  protected boolean end(android.widget.TextView, android.text.Spannable);
  protected boolean home(android.widget.TextView, android.text.Spannable);
  protected boolean left(android.widget.TextView, android.text.Spannable);
  protected boolean lineEnd(android.widget.TextView, android.text.Spannable);
  protected boolean lineStart(android.widget.TextView, android.text.Spannable);
  protected boolean pageDown(android.widget.TextView, android.text.Spannable);
  protected boolean pageUp(android.widget.TextView, android.text.Spannable);
  protected boolean right(android.widget.TextView, android.text.Spannable);
  protected boolean top(android.widget.TextView, android.text.Spannable);
  protected boolean up(android.widget.TextView, android.text.Spannable);
}
public class android.text.method.SingleLineTransformationMethod
  extends android.text.method.ReplacementTransformationMethod
{
  public static android.text.method.SingleLineTransformationMethod getInstance();
  public void <init>();
  protected char[] getOriginal();
  protected char[] getReplacement();
}
public class android.text.method.TextKeyListener
  extends android.text.method.BaseKeyListener
  implements android.text.SpanWatcher
{
  public static boolean shouldCap(android.text.method.TextKeyListener$Capitalize, java.lang.CharSequence, int);
  public static void clear(android.text.Editable);
  public static android.text.method.TextKeyListener getInstance();
  public static android.text.method.TextKeyListener getInstance(boolean, android.text.method.TextKeyListener$Capitalize);
  public void <init>(android.text.method.TextKeyListener$Capitalize, boolean);
  public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent);
  public boolean onKeyUp(android.view.View, android.text.Editable, int, android.view.KeyEvent);
  public int getInputType();
  public void onSpanAdded(android.text.Spannable, java.lang.Object, int, int);
  public void onSpanChanged(android.text.Spannable, java.lang.Object, int, int, int, int);
  public void onSpanRemoved(android.text.Spannable, java.lang.Object, int, int);
  public void release();
}
public final class android.text.method.TextKeyListener$Capitalize
  extends java.lang.Enum
{
  public static android.text.method.TextKeyListener$Capitalize valueOf(java.lang.String);
  public static android.text.method.TextKeyListener$Capitalize[] values();
  public static final android.text.method.TextKeyListener$Capitalize CHARACTERS;
  public static final android.text.method.TextKeyListener$Capitalize NONE;
  public static final android.text.method.TextKeyListener$Capitalize SENTENCES;
  public static final android.text.method.TextKeyListener$Capitalize WORDS;
}
public class android.text.method.TimeKeyListener
  extends android.text.method.NumberKeyListener
{
  public static android.text.method.TimeKeyListener getInstance();
  public void <init>();
  public int getInputType();
  protected char[] getAcceptedChars();
  public static final char[] CHARACTERS;
}
public class android.text.method.Touch
  extends java.lang.Object
{
  public static boolean onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent);
  public static int getInitialScrollX(android.widget.TextView, android.text.Spannable);
  public static int getInitialScrollY(android.widget.TextView, android.text.Spannable);
  public static void scrollTo(android.widget.TextView, android.text.Layout, int, int);
}
public interface android.text.method.TransformationMethod
{
  public abstract void onFocusChanged(android.view.View, java.lang.CharSequence, boolean, int, android.graphics.Rect);
  public abstract java.lang.CharSequence getTransformation(java.lang.CharSequence, android.view.View);
}
public class android.text.style.AbsoluteSizeSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public void <init>(int, boolean);
  public boolean getDip();
  public int describeContents();
  public int getSize();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public interface android.text.style.AlignmentSpan
  extends android.text.style.ParagraphStyle
{
  public abstract android.text.Layout$Alignment getAlignment();
}
public class android.text.style.AlignmentSpan$Standard
  extends java.lang.Object
  implements android.text.style.AlignmentSpan, android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(android.text.Layout$Alignment);
  public int describeContents();
  public int getSpanTypeId();
  public void writeToParcel(android.os.Parcel, int);
  public android.text.Layout$Alignment getAlignment();
}
public class android.text.style.BackgroundColorSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateAppearance, android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public int describeContents();
  public int getBackgroundColor();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public class android.text.style.BulletSpan
  extends java.lang.Object
  implements android.text.style.LeadingMarginSpan, android.text.ParcelableSpan
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public void <init>(int, int);
  public int describeContents();
  public int getLeadingMargin(boolean);
  public int getSpanTypeId();
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
  public void writeToParcel(android.os.Parcel, int);
  public static final int STANDARD_GAP_WIDTH;
}
public abstract class android.text.style.CharacterStyle
  extends java.lang.Object
{
  public static android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle);
  public void <init>();
  public abstract void updateDrawState(android.text.TextPaint);
  public android.text.style.CharacterStyle getUnderlying();
}
public abstract class android.text.style.ClickableSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateAppearance
{
  public void <init>();
  public abstract void onClick(android.view.View);
  public void updateDrawState(android.text.TextPaint);
}
public class android.text.style.DrawableMarginSpan
  extends java.lang.Object
  implements android.text.style.LeadingMarginSpan, android.text.style.LineHeightSpan
{
  public void <init>(android.graphics.drawable.Drawable);
  public void <init>(android.graphics.drawable.Drawable, int);
  public int getLeadingMargin(boolean);
  public void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt);
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
}
public abstract class android.text.style.DynamicDrawableSpan
  extends android.text.style.ReplacementSpan
{
  public void <init>();
  public abstract android.graphics.drawable.Drawable getDrawable();
  public int getSize(android.graphics.Paint, java.lang.CharSequence, int, int, android.graphics.Paint$FontMetricsInt);
  public int getVerticalAlignment();
  public void draw(android.graphics.Canvas, java.lang.CharSequence, int, int, float, int, int, int, android.graphics.Paint);
  protected void <init>(int);
  public static final int ALIGN_BASELINE;
  public static final int ALIGN_BOTTOM;
  protected final int mVerticalAlignment;
}
public class android.text.style.EasyEditSpan
  extends java.lang.Object
  implements android.text.ParcelableSpan
{
  public void <init>();
  public void <init>(android.app.PendingIntent);
  public void <init>(android.os.Parcel);
  public int describeContents();
  public int getSpanTypeId();
  public void writeToParcel(android.os.Parcel, int);
  public static final int TEXT_DELETED;
  public static final int TEXT_MODIFIED;
  public static final java.lang.String EXTRA_TEXT_CHANGED_TYPE;
}
public class android.text.style.ForegroundColorSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateAppearance, android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public int describeContents();
  public int getForegroundColor();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public class android.text.style.IconMarginSpan
  extends java.lang.Object
  implements android.text.style.LeadingMarginSpan, android.text.style.LineHeightSpan
{
  public void <init>(android.graphics.Bitmap);
  public void <init>(android.graphics.Bitmap, int);
  public int getLeadingMargin(boolean);
  public void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt);
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
}
public class android.text.style.ImageSpan
  extends android.text.style.DynamicDrawableSpan
{
  public void <init>(android.content.Context, android.graphics.Bitmap);
  public void <init>(android.content.Context, android.graphics.Bitmap, int);
  public void <init>(android.content.Context, android.net.Uri);
  public void <init>(android.content.Context, android.net.Uri, int);
  public void <init>(android.content.Context, int);
  public void <init>(android.content.Context, int, int);
  public void <init>(android.graphics.Bitmap);
  public void <init>(android.graphics.Bitmap, int);
  public void <init>(android.graphics.drawable.Drawable);
  public void <init>(android.graphics.drawable.Drawable, int);
  public void <init>(android.graphics.drawable.Drawable, java.lang.String);
  public void <init>(android.graphics.drawable.Drawable, java.lang.String, int);
  public android.graphics.drawable.Drawable getDrawable();
  public java.lang.String getSource();
}
public interface android.text.style.LeadingMarginSpan
  extends android.text.style.ParagraphStyle
{
  public abstract int getLeadingMargin(boolean);
  public abstract void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
}
public interface android.text.style.LeadingMarginSpan$LeadingMarginSpan2
  extends android.text.style.LeadingMarginSpan, android.text.style.WrapTogetherSpan
{
  public abstract int getLeadingMarginLineCount();
}
public class android.text.style.LeadingMarginSpan$Standard
  extends java.lang.Object
  implements android.text.style.LeadingMarginSpan, android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public void <init>(int, int);
  public int describeContents();
  public int getLeadingMargin(boolean);
  public int getSpanTypeId();
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
  public void writeToParcel(android.os.Parcel, int);
}
public interface android.text.style.LineBackgroundSpan
  extends android.text.style.ParagraphStyle
{
  public abstract void drawBackground(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, int);
}
public interface android.text.style.LineHeightSpan
  extends android.text.style.ParagraphStyle, android.text.style.WrapTogetherSpan
{
  public abstract void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt);
}
public interface android.text.style.LineHeightSpan$WithDensity
  extends android.text.style.LineHeightSpan
{
  public abstract void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt, android.text.TextPaint);
}
public class android.text.style.LocaleSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.LocaleList);
  public void <init>(android.os.Parcel);
  public void <init>(java.util.Locale);
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.LocaleList getLocales();
  public java.util.Locale getLocale();
}
public class android.text.style.MaskFilterSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateAppearance
{
  public void <init>(android.graphics.MaskFilter);
  public void updateDrawState(android.text.TextPaint);
  public android.graphics.MaskFilter getMaskFilter();
}
public abstract class android.text.style.MetricAffectingSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateLayout
{
  public void <init>();
  public abstract void updateMeasureState(android.text.TextPaint);
  public android.text.style.CharacterStyle getUnderlying();
  public android.text.style.MetricAffectingSpan getUnderlying();
}
public interface android.text.style.ParagraphStyle
{
}
public class android.text.style.QuoteSpan
  extends java.lang.Object
  implements android.text.style.LeadingMarginSpan, android.text.ParcelableSpan
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public int describeContents();
  public int getColor();
  public int getLeadingMargin(boolean);
  public int getSpanTypeId();
  public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout);
  public void writeToParcel(android.os.Parcel, int);
}
public class android.text.style.RasterizerSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateAppearance
{
  public void <init>(android.graphics.Rasterizer);
  public void updateDrawState(android.text.TextPaint);
  public android.graphics.Rasterizer getRasterizer();
}
public class android.text.style.RelativeSizeSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(float);
  public float getSizeChange();
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public abstract class android.text.style.ReplacementSpan
  extends android.text.style.MetricAffectingSpan
{
  public void <init>();
  public abstract int getSize(android.graphics.Paint, java.lang.CharSequence, int, int, android.graphics.Paint$FontMetricsInt);
  public abstract void draw(android.graphics.Canvas, java.lang.CharSequence, int, int, float, int, int, int, android.graphics.Paint);
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
}
public class android.text.style.ScaleXSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(float);
  public float getScaleX();
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public class android.text.style.StrikethroughSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateAppearance, android.text.ParcelableSpan
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public class android.text.style.StyleSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public int describeContents();
  public int getSpanTypeId();
  public int getStyle();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public class android.text.style.SubscriptSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public class android.text.style.SuggestionSpan
  extends android.text.style.CharacterStyle
  implements android.text.ParcelableSpan
{
  public void <init>(android.content.Context, java.lang.String[], int);
  public void <init>(android.content.Context, java.util.Locale, java.lang.String[], int, java.lang.Class);
  public void <init>(android.os.Parcel);
  public void <init>(java.util.Locale, java.lang.String[], int);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getFlags();
  public int getSpanTypeId();
  public int hashCode();
  public void setFlags(int);
  public void updateDrawState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getLocale();
  public java.lang.String[] getSuggestions();
  public java.util.Locale getLocaleObject();
  public static final int FLAG_AUTO_CORRECTION;
  public static final int FLAG_EASY_CORRECT;
  public static final int FLAG_MISSPELLED;
  public static final int SUGGESTIONS_MAX_SIZE;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String ACTION_SUGGESTION_PICKED;
  public static final java.lang.String SUGGESTION_SPAN_PICKED_AFTER;
  public static final java.lang.String SUGGESTION_SPAN_PICKED_BEFORE;
  public static final java.lang.String SUGGESTION_SPAN_PICKED_HASHCODE;
}
public class android.text.style.SuperscriptSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public interface android.text.style.TabStopSpan
  extends android.text.style.ParagraphStyle
{
  public abstract int getTabStop();
}
public class android.text.style.TabStopSpan$Standard
  extends java.lang.Object
  implements android.text.style.TabStopSpan
{
  public void <init>(int);
  public int getTabStop();
}
public class android.text.style.TextAppearanceSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.content.Context, int);
  public void <init>(android.content.Context, int, int);
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, int, int, android.content.res.ColorStateList, android.content.res.ColorStateList);
  public int describeContents();
  public int getSpanTypeId();
  public int getTextSize();
  public int getTextStyle();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.res.ColorStateList getLinkTextColor();
  public android.content.res.ColorStateList getTextColor();
  public java.lang.String getFamily();
}
public class android.text.style.TtsSpan
  extends java.lang.Object
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String, android.os.PersistableBundle);
  public int describeContents();
  public int getSpanTypeId();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.PersistableBundle getArgs();
  public java.lang.String getType();
  public static final int MONTH_APRIL;
  public static final int MONTH_AUGUST;
  public static final int MONTH_DECEMBER;
  public static final int MONTH_FEBRUARY;
  public static final int MONTH_JANUARY;
  public static final int MONTH_JULY;
  public static final int MONTH_JUNE;
  public static final int MONTH_MARCH;
  public static final int MONTH_MAY;
  public static final int MONTH_NOVEMBER;
  public static final int MONTH_OCTOBER;
  public static final int MONTH_SEPTEMBER;
  public static final int WEEKDAY_FRIDAY;
  public static final int WEEKDAY_MONDAY;
  public static final int WEEKDAY_SATURDAY;
  public static final int WEEKDAY_SUNDAY;
  public static final int WEEKDAY_THURSDAY;
  public static final int WEEKDAY_TUESDAY;
  public static final int WEEKDAY_WEDNESDAY;
  public static final java.lang.String ANIMACY_ANIMATE;
  public static final java.lang.String ANIMACY_INANIMATE;
  public static final java.lang.String ARG_ANIMACY;
  public static final java.lang.String ARG_CASE;
  public static final java.lang.String ARG_COUNTRY_CODE;
  public static final java.lang.String ARG_CURRENCY;
  public static final java.lang.String ARG_DAY;
  public static final java.lang.String ARG_DENOMINATOR;
  public static final java.lang.String ARG_DIGITS;
  public static final java.lang.String ARG_DOMAIN;
  public static final java.lang.String ARG_EXTENSION;
  public static final java.lang.String ARG_FRACTIONAL_PART;
  public static final java.lang.String ARG_FRAGMENT_ID;
  public static final java.lang.String ARG_GENDER;
  public static final java.lang.String ARG_HOURS;
  public static final java.lang.String ARG_INTEGER_PART;
  public static final java.lang.String ARG_MINUTES;
  public static final java.lang.String ARG_MONTH;
  public static final java.lang.String ARG_MULTIPLICITY;
  public static final java.lang.String ARG_NUMBER;
  public static final java.lang.String ARG_NUMBER_PARTS;
  public static final java.lang.String ARG_NUMERATOR;
  public static final java.lang.String ARG_PASSWORD;
  public static final java.lang.String ARG_PATH;
  public static final java.lang.String ARG_PORT;
  public static final java.lang.String ARG_PROTOCOL;
  public static final java.lang.String ARG_QUANTITY;
  public static final java.lang.String ARG_QUERY_STRING;
  public static final java.lang.String ARG_TEXT;
  public static final java.lang.String ARG_UNIT;
  public static final java.lang.String ARG_USERNAME;
  public static final java.lang.String ARG_VERBATIM;
  public static final java.lang.String ARG_WEEKDAY;
  public static final java.lang.String ARG_YEAR;
  public static final java.lang.String CASE_ABLATIVE;
  public static final java.lang.String CASE_ACCUSATIVE;
  public static final java.lang.String CASE_DATIVE;
  public static final java.lang.String CASE_GENITIVE;
  public static final java.lang.String CASE_INSTRUMENTAL;
  public static final java.lang.String CASE_LOCATIVE;
  public static final java.lang.String CASE_NOMINATIVE;
  public static final java.lang.String CASE_VOCATIVE;
  public static final java.lang.String GENDER_FEMALE;
  public static final java.lang.String GENDER_MALE;
  public static final java.lang.String GENDER_NEUTRAL;
  public static final java.lang.String MULTIPLICITY_DUAL;
  public static final java.lang.String MULTIPLICITY_PLURAL;
  public static final java.lang.String MULTIPLICITY_SINGLE;
  public static final java.lang.String TYPE_CARDINAL;
  public static final java.lang.String TYPE_DATE;
  public static final java.lang.String TYPE_DECIMAL;
  public static final java.lang.String TYPE_DIGITS;
  public static final java.lang.String TYPE_ELECTRONIC;
  public static final java.lang.String TYPE_FRACTION;
  public static final java.lang.String TYPE_MEASURE;
  public static final java.lang.String TYPE_MONEY;
  public static final java.lang.String TYPE_ORDINAL;
  public static final java.lang.String TYPE_TELEPHONE;
  public static final java.lang.String TYPE_TEXT;
  public static final java.lang.String TYPE_TIME;
  public static final java.lang.String TYPE_VERBATIM;
}
public class android.text.style.TtsSpan$Builder
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public android.text.style.TtsSpan build();
  public android.text.style.TtsSpan$Builder setIntArgument(java.lang.String, int);
  public android.text.style.TtsSpan$Builder setLongArgument(java.lang.String, long);
  public android.text.style.TtsSpan$Builder setStringArgument(java.lang.String, java.lang.String);
}
public class android.text.style.TtsSpan$CardinalBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(long);
  public android.text.style.TtsSpan$CardinalBuilder setNumber(java.lang.String);
  public android.text.style.TtsSpan$CardinalBuilder setNumber(long);
}
public class android.text.style.TtsSpan$DateBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer);
  public android.text.style.TtsSpan$DateBuilder setDay(int);
  public android.text.style.TtsSpan$DateBuilder setMonth(int);
  public android.text.style.TtsSpan$DateBuilder setWeekday(int);
  public android.text.style.TtsSpan$DateBuilder setYear(int);
}
public class android.text.style.TtsSpan$DecimalBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(double, int, int);
  public void <init>(java.lang.String, java.lang.String);
  public android.text.style.TtsSpan$DecimalBuilder setArgumentsFromDouble(double, int, int);
  public android.text.style.TtsSpan$DecimalBuilder setFractionalPart(java.lang.String);
  public android.text.style.TtsSpan$DecimalBuilder setIntegerPart(java.lang.String);
  public android.text.style.TtsSpan$DecimalBuilder setIntegerPart(long);
}
public class android.text.style.TtsSpan$DigitsBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(java.lang.String);
  public android.text.style.TtsSpan$DigitsBuilder setDigits(java.lang.String);
}
public class android.text.style.TtsSpan$ElectronicBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public android.text.style.TtsSpan$ElectronicBuilder setDomain(java.lang.String);
  public android.text.style.TtsSpan$ElectronicBuilder setEmailArguments(java.lang.String, java.lang.String);
  public android.text.style.TtsSpan$ElectronicBuilder setFragmentId(java.lang.String);
  public android.text.style.TtsSpan$ElectronicBuilder setPassword(java.lang.String);
  public android.text.style.TtsSpan$ElectronicBuilder setPath(java.lang.String);
  public android.text.style.TtsSpan$ElectronicBuilder setPort(int);
  public android.text.style.TtsSpan$ElectronicBuilder setProtocol(java.lang.String);
  public android.text.style.TtsSpan$ElectronicBuilder setQueryString(java.lang.String);
  public android.text.style.TtsSpan$ElectronicBuilder setUsername(java.lang.String);
}
public class android.text.style.TtsSpan$FractionBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(long, long, long);
  public android.text.style.TtsSpan$FractionBuilder setDenominator(java.lang.String);
  public android.text.style.TtsSpan$FractionBuilder setDenominator(long);
  public android.text.style.TtsSpan$FractionBuilder setIntegerPart(java.lang.String);
  public android.text.style.TtsSpan$FractionBuilder setIntegerPart(long);
  public android.text.style.TtsSpan$FractionBuilder setNumerator(java.lang.String);
  public android.text.style.TtsSpan$FractionBuilder setNumerator(long);
}
public class android.text.style.TtsSpan$MeasureBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public android.text.style.TtsSpan$MeasureBuilder setDenominator(java.lang.String);
  public android.text.style.TtsSpan$MeasureBuilder setDenominator(long);
  public android.text.style.TtsSpan$MeasureBuilder setFractionalPart(java.lang.String);
  public android.text.style.TtsSpan$MeasureBuilder setIntegerPart(java.lang.String);
  public android.text.style.TtsSpan$MeasureBuilder setIntegerPart(long);
  public android.text.style.TtsSpan$MeasureBuilder setNumber(java.lang.String);
  public android.text.style.TtsSpan$MeasureBuilder setNumber(long);
  public android.text.style.TtsSpan$MeasureBuilder setNumerator(java.lang.String);
  public android.text.style.TtsSpan$MeasureBuilder setNumerator(long);
  public android.text.style.TtsSpan$MeasureBuilder setUnit(java.lang.String);
}
public class android.text.style.TtsSpan$MoneyBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public android.text.style.TtsSpan$MoneyBuilder setCurrency(java.lang.String);
  public android.text.style.TtsSpan$MoneyBuilder setFractionalPart(java.lang.String);
  public android.text.style.TtsSpan$MoneyBuilder setIntegerPart(java.lang.String);
  public android.text.style.TtsSpan$MoneyBuilder setIntegerPart(long);
  public android.text.style.TtsSpan$MoneyBuilder setQuantity(java.lang.String);
}
public class android.text.style.TtsSpan$OrdinalBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(long);
  public android.text.style.TtsSpan$OrdinalBuilder setNumber(java.lang.String);
  public android.text.style.TtsSpan$OrdinalBuilder setNumber(long);
}
public class android.text.style.TtsSpan$SemioticClassBuilder
  extends android.text.style.TtsSpan$Builder
{
  public void <init>(java.lang.String);
  public android.text.style.TtsSpan$SemioticClassBuilder setAnimacy(java.lang.String);
  public android.text.style.TtsSpan$SemioticClassBuilder setCase(java.lang.String);
  public android.text.style.TtsSpan$SemioticClassBuilder setGender(java.lang.String);
  public android.text.style.TtsSpan$SemioticClassBuilder setMultiplicity(java.lang.String);
}
public class android.text.style.TtsSpan$TelephoneBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(java.lang.String);
  public android.text.style.TtsSpan$TelephoneBuilder setCountryCode(java.lang.String);
  public android.text.style.TtsSpan$TelephoneBuilder setExtension(java.lang.String);
  public android.text.style.TtsSpan$TelephoneBuilder setNumberParts(java.lang.String);
}
public class android.text.style.TtsSpan$TextBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(java.lang.String);
  public android.text.style.TtsSpan$TextBuilder setText(java.lang.String);
}
public class android.text.style.TtsSpan$TimeBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(int, int);
  public android.text.style.TtsSpan$TimeBuilder setHours(int);
  public android.text.style.TtsSpan$TimeBuilder setMinutes(int);
}
public class android.text.style.TtsSpan$VerbatimBuilder
  extends android.text.style.TtsSpan$SemioticClassBuilder
{
  public void <init>();
  public void <init>(java.lang.String);
  public android.text.style.TtsSpan$VerbatimBuilder setVerbatim(java.lang.String);
}
public class android.text.style.TypefaceSpan
  extends android.text.style.MetricAffectingSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String);
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void updateMeasureState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getFamily();
}
public class android.text.style.URLSpan
  extends android.text.style.ClickableSpan
  implements android.text.ParcelableSpan
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.String);
  public int describeContents();
  public int getSpanTypeId();
  public void onClick(android.view.View);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getURL();
}
public class android.text.style.UnderlineSpan
  extends android.text.style.CharacterStyle
  implements android.text.style.UpdateAppearance, android.text.ParcelableSpan
{
  public void <init>();
  public void <init>(android.os.Parcel);
  public int describeContents();
  public int getSpanTypeId();
  public void updateDrawState(android.text.TextPaint);
  public void writeToParcel(android.os.Parcel, int);
}
public interface android.text.style.UpdateAppearance
{
}
public interface android.text.style.UpdateLayout
  extends android.text.style.UpdateAppearance
{
}
public interface android.text.style.WrapTogetherSpan
  extends android.text.style.ParagraphStyle
{
}
public class android.text.util.Linkify
  extends java.lang.Object
{
  public static final boolean addLinks(android.text.Spannable, int);
  public static final boolean addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String);
  public static final boolean addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String, android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter);
  public static final boolean addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter);
  public static final boolean addLinks(android.widget.TextView, int);
  public static final void addLinks(android.widget.TextView, java.util.regex.Pattern, java.lang.String);
  public static final void addLinks(android.widget.TextView, java.util.regex.Pattern, java.lang.String, android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter);
  public static final void addLinks(android.widget.TextView, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter);
  public void <init>();
  public static final int ALL;
  public static final int EMAIL_ADDRESSES;
  public static final int MAP_ADDRESSES;
  public static final int PHONE_NUMBERS;
  public static final int WEB_URLS;
  public static final android.text.util.Linkify$MatchFilter sPhoneNumberMatchFilter;
  public static final android.text.util.Linkify$MatchFilter sUrlMatchFilter;
  public static final android.text.util.Linkify$TransformFilter sPhoneNumberTransformFilter;
}
public interface android.text.util.Linkify$MatchFilter
{
  public abstract boolean acceptMatch(java.lang.CharSequence, int, int);
}
public interface android.text.util.Linkify$TransformFilter
{
  public abstract java.lang.String transformUrl(java.util.regex.Matcher, java.lang.String);
}
public class android.text.util.Rfc822Token
  extends java.lang.Object
{
  public static java.lang.String quoteComment(java.lang.String);
  public static java.lang.String quoteName(java.lang.String);
  public static java.lang.String quoteNameIfNecessary(java.lang.String);
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void setAddress(java.lang.String);
  public void setComment(java.lang.String);
  public void setName(java.lang.String);
  public java.lang.String getAddress();
  public java.lang.String getComment();
  public java.lang.String getName();
  public java.lang.String toString();
}
public class android.text.util.Rfc822Tokenizer
  extends java.lang.Object
  implements android.widget.MultiAutoCompleteTextView$Tokenizer
{
  public static void tokenize(java.lang.CharSequence, java.util.Collection);
  public static android.text.util.Rfc822Token[] tokenize(java.lang.CharSequence);
  public void <init>();
  public int findTokenEnd(java.lang.CharSequence, int);
  public int findTokenStart(java.lang.CharSequence, int);
  public java.lang.CharSequence terminateToken(java.lang.CharSequence);
}
public class android.transition.ArcMotion
  extends android.transition.PathMotion
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public float getMaximumAngle();
  public float getMinimumHorizontalAngle();
  public float getMinimumVerticalAngle();
  public void setMaximumAngle(float);
  public void setMinimumHorizontalAngle(float);
  public void setMinimumVerticalAngle(float);
  public android.graphics.Path getPath(float, float, float, float);
}
public class android.transition.AutoTransition
  extends android.transition.TransitionSet
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
}
public class android.transition.ChangeBounds
  extends android.transition.Transition
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean getResizeClip();
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public void setReparent(boolean);
  public void setResizeClip(boolean);
  public android.animation.Animator createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues);
  public java.lang.String[] getTransitionProperties();
}
public class android.transition.ChangeClipBounds
  extends android.transition.Transition
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public android.animation.Animator createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues);
  public java.lang.String[] getTransitionProperties();
}
public class android.transition.ChangeImageTransform
  extends android.transition.Transition
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public android.animation.Animator createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues);
  public java.lang.String[] getTransitionProperties();
}
public class android.transition.ChangeScroll
  extends android.transition.Transition
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public android.animation.Animator createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues);
}
public class android.transition.ChangeTransform
  extends android.transition.Transition
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean getReparent();
  public boolean getReparentWithOverlay();
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public void setReparent(boolean);
  public void setReparentWithOverlay(boolean);
  public android.animation.Animator createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues);
  public java.lang.String[] getTransitionProperties();
}
public class android.transition.CircularPropagation
  extends android.transition.VisibilityPropagation
{
  public void <init>();
  public long getStartDelay(android.view.ViewGroup, android.transition.Transition, android.transition.TransitionValues, android.transition.TransitionValues);
  public void setPropagationSpeed(float);
}
public class android.transition.Explode
  extends android.transition.Visibility
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public android.animation.Animator onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
  public android.animation.Animator onDisappear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
}
public class android.transition.Fade
  extends android.transition.Visibility
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(int);
  public void captureStartValues(android.transition.TransitionValues);
  public android.animation.Animator onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
  public android.animation.Animator onDisappear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
  public static final int IN;
  public static final int OUT;
}
public abstract class android.transition.PathMotion
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public abstract android.graphics.Path getPath(float, float, float, float);
}
public class android.transition.PatternPathMotion
  extends android.transition.PathMotion
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.graphics.Path);
  public void setPatternPath(android.graphics.Path);
  public android.graphics.Path getPath(float, float, float, float);
  public android.graphics.Path getPatternPath();
}
public final class android.transition.Scene
  extends java.lang.Object
{
  public static android.transition.Scene getSceneForLayout(android.view.ViewGroup, int, android.content.Context);
  public void <init>(android.view.ViewGroup);
  public void <init>(android.view.ViewGroup, android.view.View);
  public void <init>(android.view.ViewGroup, android.view.ViewGroup);
  public void enter();
  public void exit();
  public void setEnterAction(java.lang.Runnable);
  public void setExitAction(java.lang.Runnable);
  public android.view.ViewGroup getSceneRoot();
}
public class android.transition.SidePropagation
  extends android.transition.VisibilityPropagation
{
  public void <init>();
  public long getStartDelay(android.view.ViewGroup, android.transition.Transition, android.transition.TransitionValues, android.transition.TransitionValues);
  public void setPropagationSpeed(float);
  public void setSide(int);
}
public class android.transition.Slide
  extends android.transition.Visibility
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(int);
  public int getSlideEdge();
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public void setSlideEdge(int);
  public android.animation.Animator onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
  public android.animation.Animator onDisappear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
}
public abstract class android.transition.Transition
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public abstract void captureEndValues(android.transition.TransitionValues);
  public abstract void captureStartValues(android.transition.TransitionValues);
  public boolean canRemoveViews();
  public boolean isTransitionRequired(android.transition.TransitionValues, android.transition.TransitionValues);
  public long getDuration();
  public long getStartDelay();
  public void setEpicenterCallback(android.transition.Transition$EpicenterCallback);
  public void setMatchOrder(int[]);
  public void setPathMotion(android.transition.PathMotion);
  public void setPropagation(android.transition.TransitionPropagation);
  public android.animation.Animator createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues);
  public android.animation.TimeInterpolator getInterpolator();
  public android.graphics.Rect getEpicenter();
  public android.transition.PathMotion getPathMotion();
  public android.transition.Transition addListener(android.transition.Transition$TransitionListener);
  public android.transition.Transition addTarget(android.view.View);
  public android.transition.Transition addTarget(int);
  public android.transition.Transition addTarget(java.lang.Class);
  public android.transition.Transition addTarget(java.lang.String);
  public android.transition.Transition clone();
  public android.transition.Transition excludeChildren(android.view.View, boolean);
  public android.transition.Transition excludeChildren(int, boolean);
  public android.transition.Transition excludeChildren(java.lang.Class, boolean);
  public android.transition.Transition excludeTarget(android.view.View, boolean);
  public android.transition.Transition excludeTarget(int, boolean);
  public android.transition.Transition excludeTarget(java.lang.Class, boolean);
  public android.transition.Transition excludeTarget(java.lang.String, boolean);
  public android.transition.Transition removeListener(android.transition.Transition$TransitionListener);
  public android.transition.Transition removeTarget(android.view.View);
  public android.transition.Transition removeTarget(int);
  public android.transition.Transition removeTarget(java.lang.Class);
  public android.transition.Transition removeTarget(java.lang.String);
  public android.transition.Transition setDuration(long);
  public android.transition.Transition setInterpolator(android.animation.TimeInterpolator);
  public android.transition.Transition setStartDelay(long);
  public android.transition.Transition$EpicenterCallback getEpicenterCallback();
  public android.transition.TransitionPropagation getPropagation();
  public android.transition.TransitionValues getTransitionValues(android.view.View, boolean);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String getName();
  public java.lang.String toString();
  public java.lang.String[] getTransitionProperties();
  public java.util.List getTargetIds();
  public java.util.List getTargetNames();
  public java.util.List getTargetTypes();
  public java.util.List getTargets();
  public static final int MATCH_ID;
  public static final int MATCH_INSTANCE;
  public static final int MATCH_ITEM_ID;
  public static final int MATCH_NAME;
}
public abstract class android.transition.Transition$EpicenterCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract android.graphics.Rect onGetEpicenter(android.transition.Transition);
}
public interface android.transition.Transition$TransitionListener
{
  public abstract void onTransitionCancel(android.transition.Transition);
  public abstract void onTransitionEnd(android.transition.Transition);
  public abstract void onTransitionPause(android.transition.Transition);
  public abstract void onTransitionResume(android.transition.Transition);
  public abstract void onTransitionStart(android.transition.Transition);
}
public class android.transition.TransitionInflater
  extends java.lang.Object
{
  public static android.transition.TransitionInflater from(android.content.Context);
  public android.transition.Transition inflateTransition(int);
  public android.transition.TransitionManager inflateTransitionManager(int, android.view.ViewGroup);
}
public class android.transition.TransitionManager
  extends java.lang.Object
{
  public static void beginDelayedTransition(android.view.ViewGroup);
  public static void beginDelayedTransition(android.view.ViewGroup, android.transition.Transition);
  public static void endTransitions(android.view.ViewGroup);
  public static void go(android.transition.Scene);
  public static void go(android.transition.Scene, android.transition.Transition);
  public void <init>();
  public void setTransition(android.transition.Scene, android.transition.Scene, android.transition.Transition);
  public void setTransition(android.transition.Scene, android.transition.Transition);
  public void transitionTo(android.transition.Scene);
}
public abstract class android.transition.TransitionPropagation
  extends java.lang.Object
{
  public void <init>();
  public abstract long getStartDelay(android.view.ViewGroup, android.transition.Transition, android.transition.TransitionValues, android.transition.TransitionValues);
  public abstract void captureValues(android.transition.TransitionValues);
  public abstract java.lang.String[] getPropagationProperties();
}
public class android.transition.TransitionSet
  extends android.transition.Transition
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public int getOrdering();
  public int getTransitionCount();
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public void setEpicenterCallback(android.transition.Transition$EpicenterCallback);
  public void setPathMotion(android.transition.PathMotion);
  public void setPropagation(android.transition.TransitionPropagation);
  public android.transition.Transition addListener(android.transition.Transition$TransitionListener);
  public android.transition.Transition addTarget(android.view.View);
  public android.transition.Transition addTarget(int);
  public android.transition.Transition addTarget(java.lang.Class);
  public android.transition.Transition addTarget(java.lang.String);
  public android.transition.Transition clone();
  public android.transition.Transition excludeTarget(android.view.View, boolean);
  public android.transition.Transition excludeTarget(int, boolean);
  public android.transition.Transition excludeTarget(java.lang.Class, boolean);
  public android.transition.Transition excludeTarget(java.lang.String, boolean);
  public android.transition.Transition getTransitionAt(int);
  public android.transition.Transition removeListener(android.transition.Transition$TransitionListener);
  public android.transition.Transition removeTarget(android.view.View);
  public android.transition.Transition removeTarget(int);
  public android.transition.Transition removeTarget(java.lang.Class);
  public android.transition.Transition removeTarget(java.lang.String);
  public android.transition.Transition setDuration(long);
  public android.transition.Transition setInterpolator(android.animation.TimeInterpolator);
  public android.transition.Transition setStartDelay(long);
  public android.transition.TransitionSet addListener(android.transition.Transition$TransitionListener);
  public android.transition.TransitionSet addTarget(android.view.View);
  public android.transition.TransitionSet addTarget(int);
  public android.transition.TransitionSet addTarget(java.lang.Class);
  public android.transition.TransitionSet addTarget(java.lang.String);
  public android.transition.TransitionSet addTransition(android.transition.Transition);
  public android.transition.TransitionSet clone();
  public android.transition.TransitionSet removeListener(android.transition.Transition$TransitionListener);
  public android.transition.TransitionSet removeTarget(android.view.View);
  public android.transition.TransitionSet removeTarget(int);
  public android.transition.TransitionSet removeTarget(java.lang.Class);
  public android.transition.TransitionSet removeTarget(java.lang.String);
  public android.transition.TransitionSet removeTransition(android.transition.Transition);
  public android.transition.TransitionSet setDuration(long);
  public android.transition.TransitionSet setInterpolator(android.animation.TimeInterpolator);
  public android.transition.TransitionSet setOrdering(int);
  public android.transition.TransitionSet setStartDelay(long);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public static final int ORDERING_SEQUENTIAL;
  public static final int ORDERING_TOGETHER;
}
public class android.transition.TransitionValues
  extends java.lang.Object
{
  public void <init>();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public final java.util.Map values;
  public android.view.View view;
}
public abstract class android.transition.Visibility
  extends android.transition.Transition
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean isTransitionRequired(android.transition.TransitionValues, android.transition.TransitionValues);
  public boolean isVisible(android.transition.TransitionValues);
  public int getMode();
  public void captureEndValues(android.transition.TransitionValues);
  public void captureStartValues(android.transition.TransitionValues);
  public void setMode(int);
  public android.animation.Animator createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues);
  public android.animation.Animator onAppear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int);
  public android.animation.Animator onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
  public android.animation.Animator onDisappear(android.view.ViewGroup, android.transition.TransitionValues, int, android.transition.TransitionValues, int);
  public android.animation.Animator onDisappear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues);
  public java.lang.String[] getTransitionProperties();
  public static final int MODE_IN;
  public static final int MODE_OUT;
}
public abstract class android.transition.VisibilityPropagation
  extends android.transition.TransitionPropagation
{
  public void <init>();
  public int getViewVisibility(android.transition.TransitionValues);
  public int getViewX(android.transition.TransitionValues);
  public int getViewY(android.transition.TransitionValues);
  public void captureValues(android.transition.TransitionValues);
  public java.lang.String[] getPropagationProperties();
}
public class android.util.AndroidException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public class android.util.AndroidRuntimeException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public final class android.util.ArrayMap
  extends java.lang.Object
  implements java.util.Map
{
  public void <init>();
  public void <init>(android.util.ArrayMap);
  public void <init>(int);
  public boolean containsAll(java.util.Collection);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean removeAll(java.util.Collection);
  public boolean retainAll(java.util.Collection);
  public int hashCode();
  public int indexOfKey(java.lang.Object);
  public int size();
  public void clear();
  public void ensureCapacity(int);
  public void putAll(android.util.ArrayMap);
  public void putAll(java.util.Map);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object keyAt(int);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object removeAt(int);
  public java.lang.Object setValueAt(int, java.lang.Object);
  public java.lang.Object valueAt(int);
  public java.lang.String toString();
  public java.util.Collection values();
  public java.util.Set entrySet();
  public java.util.Set keySet();
}
public final class android.util.ArraySet
  extends java.lang.Object
  implements java.util.Collection, java.util.Set
{
  public void <init>();
  public void <init>(android.util.ArraySet);
  public void <init>(int);
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(android.util.ArraySet);
  public boolean removeAll(java.util.Collection);
  public boolean retainAll(java.util.Collection);
  public int hashCode();
  public int indexOf(java.lang.Object);
  public int size();
  public void addAll(android.util.ArraySet);
  public void clear();
  public void ensureCapacity(int);
  public java.lang.Object removeAt(int);
  public java.lang.Object valueAt(int);
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator iterator();
}
public class android.util.AtomicFile
  extends java.lang.Object
{
  public void <init>(java.io.File);
  public void delete();
  public void failWrite(java.io.FileOutputStream);
  public void finishWrite(java.io.FileOutputStream);
  public byte[] readFully()  throws java.io.IOException;
  public java.io.File getBaseFile();
  public java.io.FileInputStream openRead()  throws java.io.FileNotFoundException;
  public java.io.FileOutputStream startWrite()  throws java.io.IOException;
}
public interface android.util.AttributeSet
{
  public abstract boolean getAttributeBooleanValue(int, boolean);
  public abstract boolean getAttributeBooleanValue(java.lang.String, java.lang.String, boolean);
  public abstract float getAttributeFloatValue(int, float);
  public abstract float getAttributeFloatValue(java.lang.String, java.lang.String, float);
  public abstract int getAttributeCount();
  public abstract int getAttributeIntValue(int, int);
  public abstract int getAttributeIntValue(java.lang.String, java.lang.String, int);
  public abstract int getAttributeListValue(int, java.lang.String[], int);
  public abstract int getAttributeListValue(java.lang.String, java.lang.String, java.lang.String[], int);
  public abstract int getAttributeNameResource(int);
  public abstract int getAttributeResourceValue(int, int);
  public abstract int getAttributeResourceValue(java.lang.String, java.lang.String, int);
  public abstract int getAttributeUnsignedIntValue(int, int);
  public abstract int getAttributeUnsignedIntValue(java.lang.String, java.lang.String, int);
  public abstract int getIdAttributeResourceValue(int);
  public abstract int getStyleAttribute();
  public abstract java.lang.String getAttributeName(int);
  public abstract java.lang.String getAttributeValue(int);
  public abstract java.lang.String getAttributeValue(java.lang.String, java.lang.String);
  public abstract java.lang.String getClassAttribute();
  public abstract java.lang.String getIdAttribute();
  public abstract java.lang.String getPositionDescription();
}
public class android.util.Base64
  extends java.lang.Object
{
  public static byte[] decode(byte[], int);
  public static byte[] decode(byte[], int, int, int);
  public static byte[] decode(java.lang.String, int);
  public static byte[] encode(byte[], int);
  public static byte[] encode(byte[], int, int, int);
  public static java.lang.String encodeToString(byte[], int);
  public static java.lang.String encodeToString(byte[], int, int, int);
  public static final int CRLF;
  public static final int DEFAULT;
  public static final int NO_CLOSE;
  public static final int NO_PADDING;
  public static final int NO_WRAP;
  public static final int URL_SAFE;
}
public class android.util.Base64DataException
  extends java.io.IOException
{
  public void <init>(java.lang.String);
}
public class android.util.Base64InputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream, int);
  public boolean markSupported();
  public int available();
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset();
}
public class android.util.Base64OutputStream
  extends java.io.FilterOutputStream
{
  public void <init>(java.io.OutputStream, int);
  public void close()  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
}
public final class android.util.Config
  extends java.lang.Object
{
  public static final boolean DEBUG;
  public static final boolean LOGD;
  public static final boolean LOGV;
  public static final boolean PROFILE;
  public static final boolean RELEASE;
}
public class android.util.DebugUtils
  extends java.lang.Object
{
  public static boolean isObjectSelected(java.lang.Object);
}
public class android.util.DisplayMetrics
  extends java.lang.Object
{
  public void <init>();
  public boolean equals(android.util.DisplayMetrics);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void setTo(android.util.DisplayMetrics);
  public void setToDefaults();
  public java.lang.String toString();
  public static final int DENSITY_280;
  public static final int DENSITY_360;
  public static final int DENSITY_400;
  public static final int DENSITY_420;
  public static final int DENSITY_560;
  public static final int DENSITY_DEFAULT;
  public static final int DENSITY_DEVICE_STABLE;
  public static final int DENSITY_HIGH;
  public static final int DENSITY_LOW;
  public static final int DENSITY_MEDIUM;
  public static final int DENSITY_TV;
  public static final int DENSITY_XHIGH;
  public static final int DENSITY_XXHIGH;
  public static final int DENSITY_XXXHIGH;
  public float density;
  public float scaledDensity;
  public float xdpi;
  public float ydpi;
  public int densityDpi;
  public int heightPixels;
  public int widthPixels;
}
public class android.util.EventLog
  extends java.lang.Object
{
  public static int getTagCode(java.lang.String);
  public static native int writeEvent(int, float);
  public static native int writeEvent(int, int);
  public static native int writeEvent(int, java.lang.Object[]);
  public static native int writeEvent(int, java.lang.String);
  public static native int writeEvent(int, long);
  public static native void readEvents(int[], java.util.Collection)  throws java.io.IOException;
  public static java.lang.String getTagName(int);
}
public final class android.util.EventLog$Event
  extends java.lang.Object
{
  public int getProcessId();
  public int getTag();
  public int getThreadId();
  public long getTimeNanos();
  public java.lang.Object getData();
}
public class android.util.EventLogTags
  extends java.lang.Object
{
  public void <init>()  throws java.io.IOException;
  public void <init>(java.io.BufferedReader)  throws java.io.IOException;
  public android.util.EventLogTags$Description get(int);
  public android.util.EventLogTags$Description get(java.lang.String);
}
public class android.util.EventLogTags$Description
  extends java.lang.Object
{
  public final int mTag;
  public final java.lang.String mName;
}
public class android.util.FloatMath
  extends java.lang.Object
{
}
public abstract class android.util.FloatProperty
  extends android.util.Property
{
  public void <init>(java.lang.String);
  public final void set(java.lang.Object, java.lang.Float);
  public abstract void setValue(java.lang.Object, float);
  public void set(java.lang.Object, java.lang.Object);
}
public abstract class android.util.IntProperty
  extends android.util.Property
{
  public void <init>(java.lang.String);
  public final void set(java.lang.Object, java.lang.Integer);
  public abstract void setValue(java.lang.Object, int);
  public void set(java.lang.Object, java.lang.Object);
}
public final class android.util.JsonReader
  extends java.lang.Object
  implements java.io.Closeable
{
  public void <init>(java.io.Reader);
  public boolean hasNext()  throws java.io.IOException;
  public boolean isLenient();
  public boolean nextBoolean()  throws java.io.IOException;
  public double nextDouble()  throws java.io.IOException;
  public int nextInt()  throws java.io.IOException;
  public long nextLong()  throws java.io.IOException;
  public void beginArray()  throws java.io.IOException;
  public void beginObject()  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void endArray()  throws java.io.IOException;
  public void endObject()  throws java.io.IOException;
  public void nextNull()  throws java.io.IOException;
  public void setLenient(boolean);
  public void skipValue()  throws java.io.IOException;
  public android.util.JsonToken peek()  throws java.io.IOException;
  public java.lang.String nextName()  throws java.io.IOException;
  public java.lang.String nextString()  throws java.io.IOException;
  public java.lang.String toString();
}
public final class android.util.JsonToken
  extends java.lang.Enum
{
  public static android.util.JsonToken valueOf(java.lang.String);
  public static android.util.JsonToken[] values();
  public static final android.util.JsonToken BEGIN_ARRAY;
  public static final android.util.JsonToken BEGIN_OBJECT;
  public static final android.util.JsonToken BOOLEAN;
  public static final android.util.JsonToken END_ARRAY;
  public static final android.util.JsonToken END_DOCUMENT;
  public static final android.util.JsonToken END_OBJECT;
  public static final android.util.JsonToken NAME;
  public static final android.util.JsonToken NULL;
  public static final android.util.JsonToken NUMBER;
  public static final android.util.JsonToken STRING;
}
public final class android.util.JsonWriter
  extends java.lang.Object
  implements java.io.Closeable
{
  public void <init>(java.io.Writer);
  public boolean isLenient();
  public void close()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void setIndent(java.lang.String);
  public void setLenient(boolean);
  public android.util.JsonWriter beginArray()  throws java.io.IOException;
  public android.util.JsonWriter beginObject()  throws java.io.IOException;
  public android.util.JsonWriter endArray()  throws java.io.IOException;
  public android.util.JsonWriter endObject()  throws java.io.IOException;
  public android.util.JsonWriter name(java.lang.String)  throws java.io.IOException;
  public android.util.JsonWriter nullValue()  throws java.io.IOException;
  public android.util.JsonWriter value(boolean)  throws java.io.IOException;
  public android.util.JsonWriter value(double)  throws java.io.IOException;
  public android.util.JsonWriter value(java.lang.Number)  throws java.io.IOException;
  public android.util.JsonWriter value(java.lang.String)  throws java.io.IOException;
  public android.util.JsonWriter value(long)  throws java.io.IOException;
}
public final class android.util.LayoutDirection
  extends java.lang.Object
{
  public static final int INHERIT;
  public static final int LOCALE;
  public static final int LTR;
  public static final int RTL;
}
public final class android.util.Log
  extends java.lang.Object
{
  public static int d(java.lang.String, java.lang.String);
  public static int d(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int e(java.lang.String, java.lang.String);
  public static int e(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int i(java.lang.String, java.lang.String);
  public static int i(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int println(int, java.lang.String, java.lang.String);
  public static int v(java.lang.String, java.lang.String);
  public static int v(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int w(java.lang.String, java.lang.String);
  public static int w(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int w(java.lang.String, java.lang.Throwable);
  public static int wtf(java.lang.String, java.lang.String);
  public static int wtf(java.lang.String, java.lang.String, java.lang.Throwable);
  public static int wtf(java.lang.String, java.lang.Throwable);
  public static native boolean isLoggable(java.lang.String, int);
  public static java.lang.String getStackTraceString(java.lang.Throwable);
  public static final int ASSERT;
  public static final int DEBUG;
  public static final int ERROR;
  public static final int INFO;
  public static final int VERBOSE;
  public static final int WARN;
}
public class android.util.LogPrinter
  extends java.lang.Object
  implements android.util.Printer
{
  public void <init>(int, java.lang.String);
  public void println(java.lang.String);
}
public class android.util.LongSparseArray
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(int);
  public int indexOfKey(long);
  public int indexOfValue(java.lang.Object);
  public int size();
  public long keyAt(int);
  public void append(long, java.lang.Object);
  public void clear();
  public void delete(long);
  public void put(long, java.lang.Object);
  public void remove(long);
  public void removeAt(int);
  public void setValueAt(int, java.lang.Object);
  public android.util.LongSparseArray clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object get(long);
  public java.lang.Object get(long, java.lang.Object);
  public java.lang.Object valueAt(int);
  public java.lang.String toString();
}
public class android.util.LruCache
  extends java.lang.Object
{
  public void <init>(int);
  public final int createCount();
  public final int evictionCount();
  public final int hitCount();
  public final int maxSize();
  public final int missCount();
  public final int putCount();
  public final int size();
  public final void evictAll();
  public final java.lang.Object get(java.lang.Object);
  public final java.lang.Object put(java.lang.Object, java.lang.Object);
  public final java.lang.Object remove(java.lang.Object);
  public final java.lang.String toString();
  public final java.util.Map snapshot();
  public void resize(int);
  public void trimToSize(int);
  protected int sizeOf(java.lang.Object, java.lang.Object);
  protected void entryRemoved(boolean, java.lang.Object, java.lang.Object, java.lang.Object);
  protected java.lang.Object create(java.lang.Object);
}
public final class android.util.MalformedJsonException
  extends java.io.IOException
{
  public void <init>(java.lang.String);
}
public class android.util.MonthDisplayHelper
  extends java.lang.Object
{
  public void <init>(int, int);
  public void <init>(int, int, int);
  public boolean isWithinCurrentMonth(int, int);
  public int getColumnOf(int);
  public int getDayAt(int, int);
  public int getFirstDayOfMonth();
  public int getMonth();
  public int getNumberOfDaysInMonth();
  public int getOffset();
  public int getRowOf(int);
  public int getWeekStartDay();
  public int getYear();
  public void nextMonth();
  public void previousMonth();
  public int[] getDigitsForRow(int);
}
public final class android.util.MutableBoolean
  extends java.lang.Object
{
  public void <init>(boolean);
  public boolean value;
}
public final class android.util.MutableByte
  extends java.lang.Object
{
  public void <init>(byte);
  public byte value;
}
public final class android.util.MutableChar
  extends java.lang.Object
{
  public void <init>(char);
  public char value;
}
public final class android.util.MutableDouble
  extends java.lang.Object
{
  public void <init>(double);
  public double value;
}
public final class android.util.MutableFloat
  extends java.lang.Object
{
  public void <init>(float);
  public float value;
}
public final class android.util.MutableInt
  extends java.lang.Object
{
  public void <init>(int);
  public int value;
}
public final class android.util.MutableLong
  extends java.lang.Object
{
  public void <init>(long);
  public long value;
}
public final class android.util.MutableShort
  extends java.lang.Object
{
  public void <init>(short);
  public short value;
}
public class android.util.NoSuchPropertyException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.String);
}
public class android.util.Pair
  extends java.lang.Object
{
  public static android.util.Pair create(java.lang.Object, java.lang.Object);
  public void <init>(java.lang.Object, java.lang.Object);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public final java.lang.Object first;
  public final java.lang.Object second;
}
public class android.util.Patterns
  extends java.lang.Object
{
  public static final java.lang.String concatGroups(java.util.regex.Matcher);
  public static final java.lang.String digitsAndPlusOnly(java.util.regex.Matcher);
  public static final java.lang.String GOOD_IRI_CHAR;
  public static final java.lang.String TOP_LEVEL_DOMAIN_STR;
  public static final java.lang.String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL;
  public static final java.util.regex.Pattern DOMAIN_NAME;
  public static final java.util.regex.Pattern EMAIL_ADDRESS;
  public static final java.util.regex.Pattern IP_ADDRESS;
  public static final java.util.regex.Pattern PHONE;
  public static final java.util.regex.Pattern TOP_LEVEL_DOMAIN;
  public static final java.util.regex.Pattern WEB_URL;
}
public class android.util.PrintStreamPrinter
  extends java.lang.Object
  implements android.util.Printer
{
  public void <init>(java.io.PrintStream);
  public void println(java.lang.String);
}
public class android.util.PrintWriterPrinter
  extends java.lang.Object
  implements android.util.Printer
{
  public void <init>(java.io.PrintWriter);
  public void println(java.lang.String);
}
public interface android.util.Printer
{
  public abstract void println(java.lang.String);
}
public abstract class android.util.Property
  extends java.lang.Object
{
  public static android.util.Property of(java.lang.Class, java.lang.Class, java.lang.String);
  public void <init>(java.lang.Class, java.lang.String);
  public abstract java.lang.Object get(java.lang.Object);
  public boolean isReadOnly();
  public void set(java.lang.Object, java.lang.Object);
  public java.lang.Class getType();
  public java.lang.String getName();
}
public final class android.util.Range
  extends java.lang.Object
{
  public static android.util.Range create(java.lang.Comparable, java.lang.Comparable);
  public void <init>(java.lang.Comparable, java.lang.Comparable);
  public boolean contains(android.util.Range);
  public boolean contains(java.lang.Comparable);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public android.util.Range extend(android.util.Range);
  public android.util.Range extend(java.lang.Comparable);
  public android.util.Range extend(java.lang.Comparable, java.lang.Comparable);
  public android.util.Range intersect(android.util.Range);
  public android.util.Range intersect(java.lang.Comparable, java.lang.Comparable);
  public java.lang.Comparable clamp(java.lang.Comparable);
  public java.lang.Comparable getLower();
  public java.lang.Comparable getUpper();
  public java.lang.String toString();
}
public final class android.util.Rational
  extends java.lang.Number
  implements java.lang.Comparable
{
  public static android.util.Rational parseRational(java.lang.String)  throws java.lang.NumberFormatException;
  public void <init>(int, int);
  public boolean equals(java.lang.Object);
  public boolean isFinite();
  public boolean isInfinite();
  public boolean isNaN();
  public boolean isZero();
  public double doubleValue();
  public float floatValue();
  public int compareTo(android.util.Rational);
  public int compareTo(java.lang.Object);
  public int getDenominator();
  public int getNumerator();
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static final android.util.Rational NEGATIVE_INFINITY;
  public static final android.util.Rational NaN;
  public static final android.util.Rational POSITIVE_INFINITY;
  public static final android.util.Rational ZERO;
}
public final class android.util.Size
  extends java.lang.Object
{
  public static android.util.Size parseSize(java.lang.String)  throws java.lang.NumberFormatException;
  public void <init>(int, int);
  public boolean equals(java.lang.Object);
  public int getHeight();
  public int getWidth();
  public int hashCode();
  public java.lang.String toString();
}
public final class android.util.SizeF
  extends java.lang.Object
{
  public static android.util.SizeF parseSizeF(java.lang.String)  throws java.lang.NumberFormatException;
  public void <init>(float, float);
  public boolean equals(java.lang.Object);
  public float getHeight();
  public float getWidth();
  public int hashCode();
  public java.lang.String toString();
}
public class android.util.SparseArray
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(int);
  public int indexOfKey(int);
  public int indexOfValue(java.lang.Object);
  public int keyAt(int);
  public int size();
  public void append(int, java.lang.Object);
  public void clear();
  public void delete(int);
  public void put(int, java.lang.Object);
  public void remove(int);
  public void removeAt(int);
  public void removeAtRange(int, int);
  public void setValueAt(int, java.lang.Object);
  public android.util.SparseArray clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object get(int);
  public java.lang.Object get(int, java.lang.Object);
  public java.lang.Object valueAt(int);
  public java.lang.String toString();
}
public class android.util.SparseBooleanArray
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(int);
  public boolean equals(java.lang.Object);
  public boolean get(int);
  public boolean get(int, boolean);
  public boolean valueAt(int);
  public int hashCode();
  public int indexOfKey(int);
  public int indexOfValue(boolean);
  public int keyAt(int);
  public int size();
  public void append(int, boolean);
  public void clear();
  public void delete(int);
  public void put(int, boolean);
  public android.util.SparseBooleanArray clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
}
public class android.util.SparseIntArray
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(int);
  public int get(int);
  public int get(int, int);
  public int indexOfKey(int);
  public int indexOfValue(int);
  public int keyAt(int);
  public int size();
  public int valueAt(int);
  public void append(int, int);
  public void clear();
  public void delete(int);
  public void put(int, int);
  public void removeAt(int);
  public android.util.SparseIntArray clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
}
public class android.util.SparseLongArray
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(int);
  public int indexOfKey(int);
  public int indexOfValue(long);
  public int keyAt(int);
  public int size();
  public long get(int);
  public long get(int, long);
  public long valueAt(int);
  public void append(int, long);
  public void clear();
  public void delete(int);
  public void put(int, long);
  public void removeAt(int);
  public android.util.SparseLongArray clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
}
public class android.util.StateSet
  extends java.lang.Object
{
  public static boolean isWildCard(int[]);
  public static boolean stateSetMatches(int[], int);
  public static boolean stateSetMatches(int[], int[]);
  public static int[] trimStateSet(int[], int);
  public static java.lang.String dump(int[]);
  public static final int[] NOTHING;
  public static final int[] WILD_CARD;
}
public class android.util.StringBuilderPrinter
  extends java.lang.Object
  implements android.util.Printer
{
  public void <init>(java.lang.StringBuilder);
  public void println(java.lang.String);
}
public class android.util.TimeFormatException
  extends java.lang.RuntimeException
{
}
public class android.util.TimeUtils
  extends java.lang.Object
{
  public static java.lang.String getTimeZoneDatabaseVersion();
  public static java.util.TimeZone getTimeZone(int, boolean, long, java.lang.String);
}
public class android.util.TimingLogger
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String);
  public void addSplit(java.lang.String);
  public void dumpToLog();
  public void reset();
  public void reset(java.lang.String, java.lang.String);
}
public class android.util.TypedValue
  extends java.lang.Object
{
  public static final java.lang.String coerceToString(int, int);
  public static float applyDimension(int, float, android.util.DisplayMetrics);
  public static float complexToDimension(int, android.util.DisplayMetrics);
  public static float complexToFloat(int);
  public static float complexToFraction(int, float, float);
  public static int complexToDimensionPixelOffset(int, android.util.DisplayMetrics);
  public static int complexToDimensionPixelSize(int, android.util.DisplayMetrics);
  public void <init>();
  public final float getFloat();
  public final java.lang.CharSequence coerceToString();
  public float getDimension(android.util.DisplayMetrics);
  public float getFraction(float, float);
  public int getComplexUnit();
  public void setTo(android.util.TypedValue);
  public java.lang.String toString();
  public static final int COMPLEX_MANTISSA_MASK;
  public static final int COMPLEX_MANTISSA_SHIFT;
  public static final int COMPLEX_RADIX_0p23;
  public static final int COMPLEX_RADIX_16p7;
  public static final int COMPLEX_RADIX_23p0;
  public static final int COMPLEX_RADIX_8p15;
  public static final int COMPLEX_RADIX_MASK;
  public static final int COMPLEX_RADIX_SHIFT;
  public static final int COMPLEX_UNIT_DIP;
  public static final int COMPLEX_UNIT_FRACTION;
  public static final int COMPLEX_UNIT_FRACTION_PARENT;
  public static final int COMPLEX_UNIT_IN;
  public static final int COMPLEX_UNIT_MASK;
  public static final int COMPLEX_UNIT_MM;
  public static final int COMPLEX_UNIT_PT;
  public static final int COMPLEX_UNIT_PX;
  public static final int COMPLEX_UNIT_SHIFT;
  public static final int COMPLEX_UNIT_SP;
  public static final int DATA_NULL_EMPTY;
  public static final int DATA_NULL_UNDEFINED;
  public static final int DENSITY_DEFAULT;
  public static final int DENSITY_NONE;
  public static final int TYPE_ATTRIBUTE;
  public static final int TYPE_DIMENSION;
  public static final int TYPE_FIRST_COLOR_INT;
  public static final int TYPE_FIRST_INT;
  public static final int TYPE_FLOAT;
  public static final int TYPE_FRACTION;
  public static final int TYPE_INT_BOOLEAN;
  public static final int TYPE_INT_COLOR_ARGB4;
  public static final int TYPE_INT_COLOR_ARGB8;
  public static final int TYPE_INT_COLOR_RGB4;
  public static final int TYPE_INT_COLOR_RGB8;
  public static final int TYPE_INT_DEC;
  public static final int TYPE_INT_HEX;
  public static final int TYPE_LAST_COLOR_INT;
  public static final int TYPE_LAST_INT;
  public static final int TYPE_NULL;
  public static final int TYPE_REFERENCE;
  public static final int TYPE_STRING;
  public int assetCookie;
  public int changingConfigurations;
  public int data;
  public int density;
  public int resourceId;
  public int type;
  public java.lang.CharSequence string;
}
public class android.util.Xml
  extends java.lang.Object
{
  public static void parse(java.io.InputStream, android.util.Xml$Encoding, org.xml.sax.ContentHandler)  throws java.io.IOException, org.xml.sax.SAXException;
  public static void parse(java.io.Reader, org.xml.sax.ContentHandler)  throws java.io.IOException, org.xml.sax.SAXException;
  public static void parse(java.lang.String, org.xml.sax.ContentHandler)  throws org.xml.sax.SAXException;
  public static android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser);
  public static android.util.Xml$Encoding findEncodingByName(java.lang.String)  throws java.io.UnsupportedEncodingException;
  public static org.xmlpull.v1.XmlPullParser newPullParser();
  public static org.xmlpull.v1.XmlSerializer newSerializer();
  public static java.lang.String FEATURE_RELAXED;
}
public final class android.util.Xml$Encoding
  extends java.lang.Enum
{
  public static android.util.Xml$Encoding valueOf(java.lang.String);
  public static android.util.Xml$Encoding[] values();
  public static final android.util.Xml$Encoding ISO_8859_1;
  public static final android.util.Xml$Encoding US_ASCII;
  public static final android.util.Xml$Encoding UTF_16;
  public static final android.util.Xml$Encoding UTF_8;
}
public abstract class android.view.AbsSavedState
  extends java.lang.Object
  implements android.os.Parcelable
{
  public final android.os.Parcelable getSuperState();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  protected void <init>(android.os.Parcel);
  protected void <init>(android.os.Parcel, java.lang.ClassLoader);
  protected void <init>(android.os.Parcelable);
  public static final android.os.Parcelable$Creator CREATOR;
  public static final android.view.AbsSavedState EMPTY_STATE;
}
public abstract class android.view.ActionMode
  extends java.lang.Object
{
  public void <init>();
  public abstract void finish();
  public abstract void invalidate();
  public abstract void setCustomView(android.view.View);
  public abstract void setSubtitle(int);
  public abstract void setSubtitle(java.lang.CharSequence);
  public abstract void setTitle(int);
  public abstract void setTitle(java.lang.CharSequence);
  public abstract android.view.Menu getMenu();
  public abstract android.view.MenuInflater getMenuInflater();
  public abstract android.view.View getCustomView();
  public abstract java.lang.CharSequence getSubtitle();
  public abstract java.lang.CharSequence getTitle();
  public boolean getTitleOptionalHint();
  public boolean isTitleOptional();
  public int getType();
  public void hide(long);
  public void invalidateContentRect();
  public void onWindowFocusChanged(boolean);
  public void setTag(java.lang.Object);
  public void setTitleOptionalHint(boolean);
  public void setType(int);
  public java.lang.Object getTag();
  public static final int DEFAULT_HIDE_DURATION;
  public static final int TYPE_FLOATING;
  public static final int TYPE_PRIMARY;
}
public interface android.view.ActionMode$Callback
{
  public abstract boolean onActionItemClicked(android.view.ActionMode, android.view.MenuItem);
  public abstract boolean onCreateActionMode(android.view.ActionMode, android.view.Menu);
  public abstract boolean onPrepareActionMode(android.view.ActionMode, android.view.Menu);
  public abstract void onDestroyActionMode(android.view.ActionMode);
}
public abstract class android.view.ActionMode$Callback2
  extends java.lang.Object
  implements android.view.ActionMode$Callback
{
  public void <init>();
  public void onGetContentRect(android.view.ActionMode, android.view.View, android.graphics.Rect);
}
public abstract class android.view.ActionProvider
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public abstract android.view.View onCreateActionView();
  public boolean hasSubMenu();
  public boolean isVisible();
  public boolean onPerformDefaultAction();
  public boolean overridesItemVisibility();
  public void onPrepareSubMenu(android.view.SubMenu);
  public void refreshVisibility();
  public void setVisibilityListener(android.view.ActionProvider$VisibilityListener);
  public android.view.View onCreateActionView(android.view.MenuItem);
}
public interface android.view.ActionProvider$VisibilityListener
{
  public abstract void onActionProviderVisibilityChanged(boolean);
}
public final class android.view.Choreographer
  extends java.lang.Object
{
  public static android.view.Choreographer getInstance();
  public void postFrameCallback(android.view.Choreographer$FrameCallback);
  public void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback, long);
  public void removeFrameCallback(android.view.Choreographer$FrameCallback);
}
public interface android.view.Choreographer$FrameCallback
{
  public abstract void doFrame(long);
}
public interface android.view.CollapsibleActionView
{
  public abstract void onActionViewCollapsed();
  public abstract void onActionViewExpanded();
}
public interface android.view.ContextMenu
  extends android.view.Menu
{
  public abstract void clearHeader();
  public abstract android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable);
  public abstract android.view.ContextMenu setHeaderIcon(int);
  public abstract android.view.ContextMenu setHeaderTitle(int);
  public abstract android.view.ContextMenu setHeaderTitle(java.lang.CharSequence);
  public abstract android.view.ContextMenu setHeaderView(android.view.View);
}
public interface android.view.ContextMenu$ContextMenuInfo
{
}
public class android.view.ContextThemeWrapper
  extends android.content.ContextWrapper
{
  public void <init>();
  public void <init>(android.content.Context, android.content.res.Resources$Theme);
  public void <init>(android.content.Context, int);
  public void applyOverrideConfiguration(android.content.res.Configuration);
  public void setTheme(int);
  public android.content.res.AssetManager getAssets();
  public android.content.res.Resources getResources();
  public android.content.res.Resources$Theme getTheme();
  public java.lang.Object getSystemService(java.lang.String);
  protected void attachBaseContext(android.content.Context);
  protected void onApplyThemeResource(android.content.res.Resources$Theme, int, boolean);
}
public final class android.view.Display
  extends java.lang.Object
{
  public boolean isValid();
  public float getRefreshRate();
  public int getDisplayId();
  public int getFlags();
  public int getHeight();
  public int getOrientation();
  public int getPixelFormat();
  public int getRotation();
  public int getState();
  public int getWidth();
  public long getAppVsyncOffsetNanos();
  public long getPresentationDeadlineNanos();
  public void getCurrentSizeRange(android.graphics.Point, android.graphics.Point);
  public void getMetrics(android.util.DisplayMetrics);
  public void getRealMetrics(android.util.DisplayMetrics);
  public void getRealSize(android.graphics.Point);
  public void getRectSize(android.graphics.Rect);
  public void getSize(android.graphics.Point);
  public android.view.Display$HdrCapabilities getHdrCapabilities();
  public android.view.Display$Mode getMode();
  public android.view.Display$Mode[] getSupportedModes();
  public float[] getSupportedRefreshRates();
  public java.lang.String getName();
  public java.lang.String toString();
  public static final int DEFAULT_DISPLAY;
  public static final int FLAG_PRESENTATION;
  public static final int FLAG_PRIVATE;
  public static final int FLAG_ROUND;
  public static final int FLAG_SECURE;
  public static final int FLAG_SUPPORTS_PROTECTED_BUFFERS;
  public static final int INVALID_DISPLAY;
  public static final int STATE_DOZE;
  public static final int STATE_DOZE_SUSPEND;
  public static final int STATE_OFF;
  public static final int STATE_ON;
  public static final int STATE_UNKNOWN;
}
public final class android.view.Display$HdrCapabilities
  extends java.lang.Object
  implements android.os.Parcelable
{
  public float getDesiredMaxAverageLuminance();
  public float getDesiredMaxLuminance();
  public float getDesiredMinLuminance();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public int[] getSupportedHdrTypes();
  public static final float INVALID_LUMINANCE;
  public static final int HDR_TYPE_DOLBY_VISION;
  public static final int HDR_TYPE_HDR10;
  public static final int HDR_TYPE_HLG;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.Display$Mode
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public float getRefreshRate();
  public int describeContents();
  public int getModeId();
  public int getPhysicalHeight();
  public int getPhysicalWidth();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.DragAndDropPermissions
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public void release();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.DragEvent
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean getResult();
  public float getX();
  public float getY();
  public int describeContents();
  public int getAction();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ClipData getClipData();
  public android.content.ClipDescription getClipDescription();
  public java.lang.Object getLocalState();
  public java.lang.String toString();
  public static final int ACTION_DRAG_ENDED;
  public static final int ACTION_DRAG_ENTERED;
  public static final int ACTION_DRAG_EXITED;
  public static final int ACTION_DRAG_LOCATION;
  public static final int ACTION_DRAG_STARTED;
  public static final int ACTION_DROP;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.FocusFinder
  extends java.lang.Object
{
  public static android.view.FocusFinder getInstance();
  public final android.view.View findNextFocus(android.view.ViewGroup, android.view.View, int);
  public android.view.View findNearestTouchable(android.view.ViewGroup, int, int, int, int[]);
  public android.view.View findNextFocusFromRect(android.view.ViewGroup, android.graphics.Rect, int);
}
public final class android.view.FrameMetrics
  extends java.lang.Object
{
  public void <init>(android.view.FrameMetrics);
  public long getMetric(int);
  public static final int ANIMATION_DURATION;
  public static final int COMMAND_ISSUE_DURATION;
  public static final int DRAW_DURATION;
  public static final int FIRST_DRAW_FRAME;
  public static final int INPUT_HANDLING_DURATION;
  public static final int LAYOUT_MEASURE_DURATION;
  public static final int SWAP_BUFFERS_DURATION;
  public static final int SYNC_DURATION;
  public static final int TOTAL_DURATION;
  public static final int UNKNOWN_DELAY_DURATION;
}
public abstract class android.view.FrameStats
  extends java.lang.Object
{
  public void <init>();
  public final int getFrameCount();
  public final long getEndTimeNano();
  public final long getFramePresentedTimeNano(int);
  public final long getRefreshPeriodNano();
  public final long getStartTimeNano();
  public static final long UNDEFINED_TIME_NANO;
}
public class android.view.GestureDetector
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.view.GestureDetector$OnGestureListener);
  public void <init>(android.content.Context, android.view.GestureDetector$OnGestureListener, android.os.Handler);
  public void <init>(android.content.Context, android.view.GestureDetector$OnGestureListener, android.os.Handler, boolean);
  public void <init>(android.view.GestureDetector$OnGestureListener);
  public void <init>(android.view.GestureDetector$OnGestureListener, android.os.Handler);
  public boolean isLongpressEnabled();
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void setContextClickListener(android.view.GestureDetector$OnContextClickListener);
  public void setIsLongpressEnabled(boolean);
  public void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener);
}
public interface android.view.GestureDetector$OnContextClickListener
{
  public abstract boolean onContextClick(android.view.MotionEvent);
}
public interface android.view.GestureDetector$OnDoubleTapListener
{
  public abstract boolean onDoubleTap(android.view.MotionEvent);
  public abstract boolean onDoubleTapEvent(android.view.MotionEvent);
  public abstract boolean onSingleTapConfirmed(android.view.MotionEvent);
}
public interface android.view.GestureDetector$OnGestureListener
{
  public abstract boolean onDown(android.view.MotionEvent);
  public abstract boolean onFling(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public abstract boolean onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public abstract boolean onSingleTapUp(android.view.MotionEvent);
  public abstract void onLongPress(android.view.MotionEvent);
  public abstract void onShowPress(android.view.MotionEvent);
}
public class android.view.GestureDetector$SimpleOnGestureListener
  extends java.lang.Object
  implements android.view.GestureDetector$OnGestureListener, android.view.GestureDetector$OnDoubleTapListener, android.view.GestureDetector$OnContextClickListener
{
  public void <init>();
  public boolean onContextClick(android.view.MotionEvent);
  public boolean onDoubleTap(android.view.MotionEvent);
  public boolean onDoubleTapEvent(android.view.MotionEvent);
  public boolean onDown(android.view.MotionEvent);
  public boolean onFling(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public boolean onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public boolean onSingleTapConfirmed(android.view.MotionEvent);
  public boolean onSingleTapUp(android.view.MotionEvent);
  public void onLongPress(android.view.MotionEvent);
  public void onShowPress(android.view.MotionEvent);
}
public class android.view.Gravity
  extends java.lang.Object
{
  public static boolean isHorizontal(int);
  public static boolean isVertical(int);
  public static int getAbsoluteGravity(int, int);
  public static void apply(int, int, int, android.graphics.Rect, android.graphics.Rect);
  public static void apply(int, int, int, android.graphics.Rect, android.graphics.Rect, int);
  public static void apply(int, int, int, android.graphics.Rect, int, int, android.graphics.Rect);
  public static void apply(int, int, int, android.graphics.Rect, int, int, android.graphics.Rect, int);
  public static void applyDisplay(int, android.graphics.Rect, android.graphics.Rect);
  public static void applyDisplay(int, android.graphics.Rect, android.graphics.Rect, int);
  public void <init>();
  public static final int AXIS_CLIP;
  public static final int AXIS_PULL_AFTER;
  public static final int AXIS_PULL_BEFORE;
  public static final int AXIS_SPECIFIED;
  public static final int AXIS_X_SHIFT;
  public static final int AXIS_Y_SHIFT;
  public static final int BOTTOM;
  public static final int CENTER;
  public static final int CENTER_HORIZONTAL;
  public static final int CENTER_VERTICAL;
  public static final int CLIP_HORIZONTAL;
  public static final int CLIP_VERTICAL;
  public static final int DISPLAY_CLIP_HORIZONTAL;
  public static final int DISPLAY_CLIP_VERTICAL;
  public static final int END;
  public static final int FILL;
  public static final int FILL_HORIZONTAL;
  public static final int FILL_VERTICAL;
  public static final int HORIZONTAL_GRAVITY_MASK;
  public static final int LEFT;
  public static final int NO_GRAVITY;
  public static final int RELATIVE_HORIZONTAL_GRAVITY_MASK;
  public static final int RELATIVE_LAYOUT_DIRECTION;
  public static final int RIGHT;
  public static final int START;
  public static final int TOP;
  public static final int VERTICAL_GRAVITY_MASK;
}
public class android.view.HapticFeedbackConstants
  extends java.lang.Object
{
  public static final int CLOCK_TICK;
  public static final int CONTEXT_CLICK;
  public static final int FLAG_IGNORE_GLOBAL_SETTING;
  public static final int FLAG_IGNORE_VIEW_SETTING;
  public static final int KEYBOARD_TAP;
  public static final int LONG_PRESS;
  public static final int VIRTUAL_KEY;
}
public class android.view.InflateException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public final class android.view.InputDevice
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.view.InputDevice getDevice(int);
  public static int[] getDeviceIds();
  public boolean hasMicrophone();
  public boolean isVirtual();
  public boolean supportsSource(int);
  public int describeContents();
  public int getControllerNumber();
  public int getId();
  public int getKeyboardType();
  public int getProductId();
  public int getSources();
  public int getVendorId();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Vibrator getVibrator();
  public android.view.InputDevice$MotionRange getMotionRange(int);
  public android.view.InputDevice$MotionRange getMotionRange(int, int);
  public android.view.KeyCharacterMap getKeyCharacterMap();
  public boolean[] hasKeys(int[]);
  public java.lang.String getDescriptor();
  public java.lang.String getName();
  public java.lang.String toString();
  public java.util.List getMotionRanges();
  public static final int KEYBOARD_TYPE_ALPHABETIC;
  public static final int KEYBOARD_TYPE_NONE;
  public static final int KEYBOARD_TYPE_NON_ALPHABETIC;
  public static final int MOTION_RANGE_ORIENTATION;
  public static final int MOTION_RANGE_PRESSURE;
  public static final int MOTION_RANGE_SIZE;
  public static final int MOTION_RANGE_TOOL_MAJOR;
  public static final int MOTION_RANGE_TOOL_MINOR;
  public static final int MOTION_RANGE_TOUCH_MAJOR;
  public static final int MOTION_RANGE_TOUCH_MINOR;
  public static final int MOTION_RANGE_X;
  public static final int MOTION_RANGE_Y;
  public static final int SOURCE_ANY;
  public static final int SOURCE_BLUETOOTH_STYLUS;
  public static final int SOURCE_CLASS_BUTTON;
  public static final int SOURCE_CLASS_JOYSTICK;
  public static final int SOURCE_CLASS_MASK;
  public static final int SOURCE_CLASS_NONE;
  public static final int SOURCE_CLASS_POINTER;
  public static final int SOURCE_CLASS_POSITION;
  public static final int SOURCE_CLASS_TRACKBALL;
  public static final int SOURCE_DPAD;
  public static final int SOURCE_GAMEPAD;
  public static final int SOURCE_HDMI;
  public static final int SOURCE_JOYSTICK;
  public static final int SOURCE_KEYBOARD;
  public static final int SOURCE_MOUSE;
  public static final int SOURCE_STYLUS;
  public static final int SOURCE_TOUCHPAD;
  public static final int SOURCE_TOUCHSCREEN;
  public static final int SOURCE_TOUCH_NAVIGATION;
  public static final int SOURCE_TRACKBALL;
  public static final int SOURCE_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.InputDevice$MotionRange
  extends java.lang.Object
{
  public boolean isFromSource(int);
  public float getFlat();
  public float getFuzz();
  public float getMax();
  public float getMin();
  public float getRange();
  public float getResolution();
  public int getAxis();
  public int getSource();
}
public abstract class android.view.InputEvent
  extends java.lang.Object
  implements android.os.Parcelable
{
  public final android.view.InputDevice getDevice();
  public abstract int getDeviceId();
  public abstract int getSource();
  public abstract long getEventTime();
  public boolean isFromSource(int);
  public int describeContents();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.InputQueue
  extends java.lang.Object
{
  protected void finalize()  throws java.lang.Throwable;
}
public interface android.view.InputQueue$Callback
{
  public abstract void onInputQueueCreated(android.view.InputQueue);
  public abstract void onInputQueueDestroyed(android.view.InputQueue);
}
public class android.view.KeyCharacterMap
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static boolean deviceHasKey(int);
  public static int getDeadChar(int, int);
  public static android.view.KeyCharacterMap load(int);
  public static boolean[] deviceHasKeys(int[]);
  public boolean getKeyData(int, android.view.KeyCharacterMap$KeyData);
  public boolean isPrintingKey(int);
  public char getDisplayLabel(int);
  public char getMatch(int, char[]);
  public char getMatch(int, char[], int);
  public char getNumber(int);
  public int describeContents();
  public int get(int, int);
  public int getKeyboardType();
  public int getModifierBehavior();
  public void writeToParcel(android.os.Parcel, int);
  public android.view.KeyEvent[] getEvents(char[]);
  protected void finalize()  throws java.lang.Throwable;
  public static final char HEX_INPUT;
  public static final char PICKER_DIALOG_INPUT;
  public static final int ALPHA;
  public static final int BUILT_IN_KEYBOARD;
  public static final int COMBINING_ACCENT;
  public static final int COMBINING_ACCENT_MASK;
  public static final int FULL;
  public static final int MODIFIER_BEHAVIOR_CHORDED;
  public static final int MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED;
  public static final int NUMERIC;
  public static final int PREDICTIVE;
  public static final int SPECIAL_FUNCTION;
  public static final int VIRTUAL_KEYBOARD;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.KeyCharacterMap$KeyData
  extends java.lang.Object
{
  public void <init>();
  public static final int META_LENGTH;
  public char displayLabel;
  public char number;
  public char[] meta;
}
public class android.view.KeyCharacterMap$UnavailableException
  extends android.util.AndroidRuntimeException
{
  public void <init>(java.lang.String);
}
public class android.view.KeyEvent
  extends android.view.InputEvent
  implements android.os.Parcelable
{
  public static final boolean isGamepadButton(int);
  public static boolean isModifierKey(int);
  public static boolean metaStateHasModifiers(int, int);
  public static boolean metaStateHasNoModifiers(int);
  public static int getDeadChar(int, int);
  public static int getMaxKeyCode();
  public static int getModifierMetaStateMask();
  public static int keyCodeFromString(java.lang.String);
  public static int normalizeMetaState(int);
  public static android.view.KeyEvent changeAction(android.view.KeyEvent, int);
  public static android.view.KeyEvent changeFlags(android.view.KeyEvent, int);
  public static android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int);
  public static android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int, int);
  public static java.lang.String keyCodeToString(int);
  public void <init>(android.view.KeyEvent);
  public void <init>(android.view.KeyEvent, long, int);
  public void <init>(int, int);
  public void <init>(long, java.lang.String, int, int);
  public void <init>(long, long, int, int, int);
  public void <init>(long, long, int, int, int, int);
  public void <init>(long, long, int, int, int, int, int, int);
  public void <init>(long, long, int, int, int, int, int, int, int);
  public void <init>(long, long, int, int, int, int, int, int, int, int);
  public final boolean dispatch(android.view.KeyEvent$Callback);
  public final boolean dispatch(android.view.KeyEvent$Callback, android.view.KeyEvent$DispatcherState, java.lang.Object);
  public final boolean hasModifiers(int);
  public final boolean hasNoModifiers();
  public final boolean isAltPressed();
  public final boolean isCanceled();
  public final boolean isCapsLockOn();
  public final boolean isCtrlPressed();
  public final boolean isFunctionPressed();
  public final boolean isLongPress();
  public final boolean isMetaPressed();
  public final boolean isNumLockOn();
  public final boolean isScrollLockOn();
  public final boolean isShiftPressed();
  public final boolean isSymPressed();
  public final boolean isSystem();
  public final boolean isTracking();
  public final int getAction();
  public final int getDeviceId();
  public final int getFlags();
  public final int getKeyCode();
  public final int getMetaState();
  public final int getModifiers();
  public final int getRepeatCount();
  public final int getScanCode();
  public final int getSource();
  public final long getDownTime();
  public final long getEventTime();
  public final void setSource(int);
  public final void startTracking();
  public final android.view.KeyCharacterMap getKeyCharacterMap();
  public final java.lang.String getCharacters();
  public boolean getKeyData(android.view.KeyCharacterMap$KeyData);
  public boolean isPrintingKey();
  public char getDisplayLabel();
  public char getMatch(char[]);
  public char getMatch(char[], int);
  public char getNumber();
  public int getUnicodeChar();
  public int getUnicodeChar(int);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final int ACTION_DOWN;
  public static final int ACTION_MULTIPLE;
  public static final int ACTION_UP;
  public static final int FLAG_CANCELED;
  public static final int FLAG_CANCELED_LONG_PRESS;
  public static final int FLAG_EDITOR_ACTION;
  public static final int FLAG_FALLBACK;
  public static final int FLAG_FROM_SYSTEM;
  public static final int FLAG_KEEP_TOUCH_MODE;
  public static final int FLAG_LONG_PRESS;
  public static final int FLAG_SOFT_KEYBOARD;
  public static final int FLAG_TRACKING;
  public static final int FLAG_VIRTUAL_HARD_KEY;
  public static final int FLAG_WOKE_HERE;
  public static final int KEYCODE_0;
  public static final int KEYCODE_11;
  public static final int KEYCODE_12;
  public static final int KEYCODE_1;
  public static final int KEYCODE_2;
  public static final int KEYCODE_3;
  public static final int KEYCODE_3D_MODE;
  public static final int KEYCODE_4;
  public static final int KEYCODE_5;
  public static final int KEYCODE_6;
  public static final int KEYCODE_7;
  public static final int KEYCODE_8;
  public static final int KEYCODE_9;
  public static final int KEYCODE_A;
  public static final int KEYCODE_ALT_LEFT;
  public static final int KEYCODE_ALT_RIGHT;
  public static final int KEYCODE_APOSTROPHE;
  public static final int KEYCODE_APP_SWITCH;
  public static final int KEYCODE_ASSIST;
  public static final int KEYCODE_AT;
  public static final int KEYCODE_AVR_INPUT;
  public static final int KEYCODE_AVR_POWER;
  public static final int KEYCODE_B;
  public static final int KEYCODE_BACK;
  public static final int KEYCODE_BACKSLASH;
  public static final int KEYCODE_BOOKMARK;
  public static final int KEYCODE_BREAK;
  public static final int KEYCODE_BRIGHTNESS_DOWN;
  public static final int KEYCODE_BRIGHTNESS_UP;
  public static final int KEYCODE_BUTTON_10;
  public static final int KEYCODE_BUTTON_11;
  public static final int KEYCODE_BUTTON_12;
  public static final int KEYCODE_BUTTON_13;
  public static final int KEYCODE_BUTTON_14;
  public static final int KEYCODE_BUTTON_15;
  public static final int KEYCODE_BUTTON_16;
  public static final int KEYCODE_BUTTON_1;
  public static final int KEYCODE_BUTTON_2;
  public static final int KEYCODE_BUTTON_3;
  public static final int KEYCODE_BUTTON_4;
  public static final int KEYCODE_BUTTON_5;
  public static final int KEYCODE_BUTTON_6;
  public static final int KEYCODE_BUTTON_7;
  public static final int KEYCODE_BUTTON_8;
  public static final int KEYCODE_BUTTON_9;
  public static final int KEYCODE_BUTTON_A;
  public static final int KEYCODE_BUTTON_B;
  public static final int KEYCODE_BUTTON_C;
  public static final int KEYCODE_BUTTON_L1;
  public static final int KEYCODE_BUTTON_L2;
  public static final int KEYCODE_BUTTON_MODE;
  public static final int KEYCODE_BUTTON_R1;
  public static final int KEYCODE_BUTTON_R2;
  public static final int KEYCODE_BUTTON_SELECT;
  public static final int KEYCODE_BUTTON_START;
  public static final int KEYCODE_BUTTON_THUMBL;
  public static final int KEYCODE_BUTTON_THUMBR;
  public static final int KEYCODE_BUTTON_X;
  public static final int KEYCODE_BUTTON_Y;
  public static final int KEYCODE_BUTTON_Z;
  public static final int KEYCODE_C;
  public static final int KEYCODE_CALCULATOR;
  public static final int KEYCODE_CALENDAR;
  public static final int KEYCODE_CALL;
  public static final int KEYCODE_CAMERA;
  public static final int KEYCODE_CAPS_LOCK;
  public static final int KEYCODE_CAPTIONS;
  public static final int KEYCODE_CHANNEL_DOWN;
  public static final int KEYCODE_CHANNEL_UP;
  public static final int KEYCODE_CLEAR;
  public static final int KEYCODE_COMMA;
  public static final int KEYCODE_CONTACTS;
  public static final int KEYCODE_COPY;
  public static final int KEYCODE_CTRL_LEFT;
  public static final int KEYCODE_CTRL_RIGHT;
  public static final int KEYCODE_CUT;
  public static final int KEYCODE_D;
  public static final int KEYCODE_DEL;
  public static final int KEYCODE_DPAD_CENTER;
  public static final int KEYCODE_DPAD_DOWN;
  public static final int KEYCODE_DPAD_DOWN_LEFT;
  public static final int KEYCODE_DPAD_DOWN_RIGHT;
  public static final int KEYCODE_DPAD_LEFT;
  public static final int KEYCODE_DPAD_RIGHT;
  public static final int KEYCODE_DPAD_UP;
  public static final int KEYCODE_DPAD_UP_LEFT;
  public static final int KEYCODE_DPAD_UP_RIGHT;
  public static final int KEYCODE_DVR;
  public static final int KEYCODE_E;
  public static final int KEYCODE_EISU;
  public static final int KEYCODE_ENDCALL;
  public static final int KEYCODE_ENTER;
  public static final int KEYCODE_ENVELOPE;
  public static final int KEYCODE_EQUALS;
  public static final int KEYCODE_ESCAPE;
  public static final int KEYCODE_EXPLORER;
  public static final int KEYCODE_F10;
  public static final int KEYCODE_F11;
  public static final int KEYCODE_F12;
  public static final int KEYCODE_F1;
  public static final int KEYCODE_F2;
  public static final int KEYCODE_F3;
  public static final int KEYCODE_F4;
  public static final int KEYCODE_F5;
  public static final int KEYCODE_F6;
  public static final int KEYCODE_F7;
  public static final int KEYCODE_F8;
  public static final int KEYCODE_F9;
  public static final int KEYCODE_F;
  public static final int KEYCODE_FOCUS;
  public static final int KEYCODE_FORWARD;
  public static final int KEYCODE_FORWARD_DEL;
  public static final int KEYCODE_FUNCTION;
  public static final int KEYCODE_G;
  public static final int KEYCODE_GRAVE;
  public static final int KEYCODE_GUIDE;
  public static final int KEYCODE_H;
  public static final int KEYCODE_HEADSETHOOK;
  public static final int KEYCODE_HELP;
  public static final int KEYCODE_HENKAN;
  public static final int KEYCODE_HOME;
  public static final int KEYCODE_I;
  public static final int KEYCODE_INFO;
  public static final int KEYCODE_INSERT;
  public static final int KEYCODE_J;
  public static final int KEYCODE_K;
  public static final int KEYCODE_KANA;
  public static final int KEYCODE_KATAKANA_HIRAGANA;
  public static final int KEYCODE_L;
  public static final int KEYCODE_LANGUAGE_SWITCH;
  public static final int KEYCODE_LAST_CHANNEL;
  public static final int KEYCODE_LEFT_BRACKET;
  public static final int KEYCODE_M;
  public static final int KEYCODE_MANNER_MODE;
  public static final int KEYCODE_MEDIA_AUDIO_TRACK;
  public static final int KEYCODE_MEDIA_CLOSE;
  public static final int KEYCODE_MEDIA_EJECT;
  public static final int KEYCODE_MEDIA_FAST_FORWARD;
  public static final int KEYCODE_MEDIA_NEXT;
  public static final int KEYCODE_MEDIA_PAUSE;
  public static final int KEYCODE_MEDIA_PLAY;
  public static final int KEYCODE_MEDIA_PLAY_PAUSE;
  public static final int KEYCODE_MEDIA_PREVIOUS;
  public static final int KEYCODE_MEDIA_RECORD;
  public static final int KEYCODE_MEDIA_REWIND;
  public static final int KEYCODE_MEDIA_SKIP_BACKWARD;
  public static final int KEYCODE_MEDIA_SKIP_FORWARD;
  public static final int KEYCODE_MEDIA_STEP_BACKWARD;
  public static final int KEYCODE_MEDIA_STEP_FORWARD;
  public static final int KEYCODE_MEDIA_STOP;
  public static final int KEYCODE_MEDIA_TOP_MENU;
  public static final int KEYCODE_MENU;
  public static final int KEYCODE_META_LEFT;
  public static final int KEYCODE_META_RIGHT;
  public static final int KEYCODE_MINUS;
  public static final int KEYCODE_MOVE_END;
  public static final int KEYCODE_MOVE_HOME;
  public static final int KEYCODE_MUHENKAN;
  public static final int KEYCODE_MUSIC;
  public static final int KEYCODE_MUTE;
  public static final int KEYCODE_N;
  public static final int KEYCODE_NAVIGATE_IN;
  public static final int KEYCODE_NAVIGATE_NEXT;
  public static final int KEYCODE_NAVIGATE_OUT;
  public static final int KEYCODE_NAVIGATE_PREVIOUS;
  public static final int KEYCODE_NOTIFICATION;
  public static final int KEYCODE_NUM;
  public static final int KEYCODE_NUMPAD_0;
  public static final int KEYCODE_NUMPAD_1;
  public static final int KEYCODE_NUMPAD_2;
  public static final int KEYCODE_NUMPAD_3;
  public static final int KEYCODE_NUMPAD_4;
  public static final int KEYCODE_NUMPAD_5;
  public static final int KEYCODE_NUMPAD_6;
  public static final int KEYCODE_NUMPAD_7;
  public static final int KEYCODE_NUMPAD_8;
  public static final int KEYCODE_NUMPAD_9;
  public static final int KEYCODE_NUMPAD_ADD;
  public static final int KEYCODE_NUMPAD_COMMA;
  public static final int KEYCODE_NUMPAD_DIVIDE;
  public static final int KEYCODE_NUMPAD_DOT;
  public static final int KEYCODE_NUMPAD_ENTER;
  public static final int KEYCODE_NUMPAD_EQUALS;
  public static final int KEYCODE_NUMPAD_LEFT_PAREN;
  public static final int KEYCODE_NUMPAD_MULTIPLY;
  public static final int KEYCODE_NUMPAD_RIGHT_PAREN;
  public static final int KEYCODE_NUMPAD_SUBTRACT;
  public static final int KEYCODE_NUM_LOCK;
  public static final int KEYCODE_O;
  public static final int KEYCODE_P;
  public static final int KEYCODE_PAGE_DOWN;
  public static final int KEYCODE_PAGE_UP;
  public static final int KEYCODE_PAIRING;
  public static final int KEYCODE_PASTE;
  public static final int KEYCODE_PERIOD;
  public static final int KEYCODE_PICTSYMBOLS;
  public static final int KEYCODE_PLUS;
  public static final int KEYCODE_POUND;
  public static final int KEYCODE_POWER;
  public static final int KEYCODE_PROG_BLUE;
  public static final int KEYCODE_PROG_GREEN;
  public static final int KEYCODE_PROG_RED;
  public static final int KEYCODE_PROG_YELLOW;
  public static final int KEYCODE_Q;
  public static final int KEYCODE_R;
  public static final int KEYCODE_RIGHT_BRACKET;
  public static final int KEYCODE_RO;
  public static final int KEYCODE_S;
  public static final int KEYCODE_SCROLL_LOCK;
  public static final int KEYCODE_SEARCH;
  public static final int KEYCODE_SEMICOLON;
  public static final int KEYCODE_SETTINGS;
  public static final int KEYCODE_SHIFT_LEFT;
  public static final int KEYCODE_SHIFT_RIGHT;
  public static final int KEYCODE_SLASH;
  public static final int KEYCODE_SLEEP;
  public static final int KEYCODE_SOFT_LEFT;
  public static final int KEYCODE_SOFT_RIGHT;
  public static final int KEYCODE_SOFT_SLEEP;
  public static final int KEYCODE_SPACE;
  public static final int KEYCODE_STAR;
  public static final int KEYCODE_STB_INPUT;
  public static final int KEYCODE_STB_POWER;
  public static final int KEYCODE_STEM_1;
  public static final int KEYCODE_STEM_2;
  public static final int KEYCODE_STEM_3;
  public static final int KEYCODE_STEM_PRIMARY;
  public static final int KEYCODE_SWITCH_CHARSET;
  public static final int KEYCODE_SYM;
  public static final int KEYCODE_SYSRQ;
  public static final int KEYCODE_T;
  public static final int KEYCODE_TAB;
  public static final int KEYCODE_TV;
  public static final int KEYCODE_TV_ANTENNA_CABLE;
  public static final int KEYCODE_TV_AUDIO_DESCRIPTION;
  public static final int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN;
  public static final int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP;
  public static final int KEYCODE_TV_CONTENTS_MENU;
  public static final int KEYCODE_TV_DATA_SERVICE;
  public static final int KEYCODE_TV_INPUT;
  public static final int KEYCODE_TV_INPUT_COMPONENT_1;
  public static final int KEYCODE_TV_INPUT_COMPONENT_2;
  public static final int KEYCODE_TV_INPUT_COMPOSITE_1;
  public static final int KEYCODE_TV_INPUT_COMPOSITE_2;
  public static final int KEYCODE_TV_INPUT_HDMI_1;
  public static final int KEYCODE_TV_INPUT_HDMI_2;
  public static final int KEYCODE_TV_INPUT_HDMI_3;
  public static final int KEYCODE_TV_INPUT_HDMI_4;
  public static final int KEYCODE_TV_INPUT_VGA_1;
  public static final int KEYCODE_TV_MEDIA_CONTEXT_MENU;
  public static final int KEYCODE_TV_NETWORK;
  public static final int KEYCODE_TV_NUMBER_ENTRY;
  public static final int KEYCODE_TV_POWER;
  public static final int KEYCODE_TV_RADIO_SERVICE;
  public static final int KEYCODE_TV_SATELLITE;
  public static final int KEYCODE_TV_SATELLITE_BS;
  public static final int KEYCODE_TV_SATELLITE_CS;
  public static final int KEYCODE_TV_SATELLITE_SERVICE;
  public static final int KEYCODE_TV_TELETEXT;
  public static final int KEYCODE_TV_TERRESTRIAL_ANALOG;
  public static final int KEYCODE_TV_TERRESTRIAL_DIGITAL;
  public static final int KEYCODE_TV_TIMER_PROGRAMMING;
  public static final int KEYCODE_TV_ZOOM_MODE;
  public static final int KEYCODE_U;
  public static final int KEYCODE_UNKNOWN;
  public static final int KEYCODE_V;
  public static final int KEYCODE_VOICE_ASSIST;
  public static final int KEYCODE_VOLUME_DOWN;
  public static final int KEYCODE_VOLUME_MUTE;
  public static final int KEYCODE_VOLUME_UP;
  public static final int KEYCODE_W;
  public static final int KEYCODE_WAKEUP;
  public static final int KEYCODE_WINDOW;
  public static final int KEYCODE_X;
  public static final int KEYCODE_Y;
  public static final int KEYCODE_YEN;
  public static final int KEYCODE_Z;
  public static final int KEYCODE_ZENKAKU_HANKAKU;
  public static final int KEYCODE_ZOOM_IN;
  public static final int KEYCODE_ZOOM_OUT;
  public static final int MAX_KEYCODE;
  public static final int META_ALT_LEFT_ON;
  public static final int META_ALT_MASK;
  public static final int META_ALT_ON;
  public static final int META_ALT_RIGHT_ON;
  public static final int META_CAPS_LOCK_ON;
  public static final int META_CTRL_LEFT_ON;
  public static final int META_CTRL_MASK;
  public static final int META_CTRL_ON;
  public static final int META_CTRL_RIGHT_ON;
  public static final int META_FUNCTION_ON;
  public static final int META_META_LEFT_ON;
  public static final int META_META_MASK;
  public static final int META_META_ON;
  public static final int META_META_RIGHT_ON;
  public static final int META_NUM_LOCK_ON;
  public static final int META_SCROLL_LOCK_ON;
  public static final int META_SHIFT_LEFT_ON;
  public static final int META_SHIFT_MASK;
  public static final int META_SHIFT_ON;
  public static final int META_SHIFT_RIGHT_ON;
  public static final int META_SYM_ON;
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.view.KeyEvent$Callback
{
  public abstract boolean onKeyDown(int, android.view.KeyEvent);
  public abstract boolean onKeyLongPress(int, android.view.KeyEvent);
  public abstract boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public abstract boolean onKeyUp(int, android.view.KeyEvent);
}
public class android.view.KeyEvent$DispatcherState
  extends java.lang.Object
{
  public void <init>();
  public boolean isTracking(android.view.KeyEvent);
  public void handleUpEvent(android.view.KeyEvent);
  public void performedLongPress(android.view.KeyEvent);
  public void reset();
  public void reset(java.lang.Object);
  public void startTracking(android.view.KeyEvent, java.lang.Object);
}
public final class android.view.KeyboardShortcutGroup
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.CharSequence);
  public void <init>(java.lang.CharSequence, java.util.List);
  public int describeContents();
  public void addItem(android.view.KeyboardShortcutInfo);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getLabel();
  public java.util.List getItems();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.KeyboardShortcutInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(java.lang.CharSequence, char, int);
  public void <init>(java.lang.CharSequence, int, int);
  public char getBaseCharacter();
  public int describeContents();
  public int getKeycode();
  public int getModifiers();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getLabel();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.view.LayoutInflater
  extends java.lang.Object
{
  public static android.view.LayoutInflater from(android.content.Context);
  public final android.view.LayoutInflater$Factory getFactory();
  public final android.view.LayoutInflater$Factory2 getFactory2();
  public final android.view.View createView(java.lang.String, java.lang.String, android.util.AttributeSet)  throws android.view.InflateException, java.lang.ClassNotFoundException;
  public abstract android.view.LayoutInflater cloneInContext(android.content.Context);
  public void setFactory(android.view.LayoutInflater$Factory);
  public void setFactory2(android.view.LayoutInflater$Factory2);
  public void setFilter(android.view.LayoutInflater$Filter);
  public android.content.Context getContext();
  public android.view.LayoutInflater$Filter getFilter();
  public android.view.View inflate(int, android.view.ViewGroup);
  public android.view.View inflate(int, android.view.ViewGroup, boolean);
  public android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup);
  public android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup, boolean);
  protected void <init>(android.content.Context);
  protected void <init>(android.view.LayoutInflater, android.content.Context);
  protected android.view.View onCreateView(android.view.View, java.lang.String, android.util.AttributeSet)  throws java.lang.ClassNotFoundException;
  protected android.view.View onCreateView(java.lang.String, android.util.AttributeSet)  throws java.lang.ClassNotFoundException;
}
public interface android.view.LayoutInflater$Factory
{
  public abstract android.view.View onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet);
}
public interface android.view.LayoutInflater$Factory2
  extends android.view.LayoutInflater$Factory
{
  public abstract android.view.View onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet);
}
public interface android.view.LayoutInflater$Filter
{
  public abstract boolean onLoadClass(java.lang.Class);
}
public interface android.view.Menu
{
  public abstract boolean hasVisibleItems();
  public abstract boolean isShortcutKey(int, android.view.KeyEvent);
  public abstract boolean performIdentifierAction(int, int);
  public abstract boolean performShortcut(int, android.view.KeyEvent, int);
  public abstract int addIntentOptions(int, int, int, android.content.ComponentName, android.content.Intent[], android.content.Intent, int, android.view.MenuItem[]);
  public abstract int size();
  public abstract void clear();
  public abstract void close();
  public abstract void removeGroup(int);
  public abstract void removeItem(int);
  public abstract void setGroupCheckable(int, boolean, boolean);
  public abstract void setGroupEnabled(int, boolean);
  public abstract void setGroupVisible(int, boolean);
  public abstract void setQwertyMode(boolean);
  public abstract android.view.MenuItem add(int);
  public abstract android.view.MenuItem add(int, int, int, int);
  public abstract android.view.MenuItem add(int, int, int, java.lang.CharSequence);
  public abstract android.view.MenuItem add(java.lang.CharSequence);
  public abstract android.view.MenuItem findItem(int);
  public abstract android.view.MenuItem getItem(int);
  public abstract android.view.SubMenu addSubMenu(int);
  public abstract android.view.SubMenu addSubMenu(int, int, int, int);
  public abstract android.view.SubMenu addSubMenu(int, int, int, java.lang.CharSequence);
  public abstract android.view.SubMenu addSubMenu(java.lang.CharSequence);
  public static final int CATEGORY_ALTERNATIVE;
  public static final int CATEGORY_CONTAINER;
  public static final int CATEGORY_SECONDARY;
  public static final int CATEGORY_SYSTEM;
  public static final int FIRST;
  public static final int FLAG_ALWAYS_PERFORM_CLOSE;
  public static final int FLAG_APPEND_TO_GROUP;
  public static final int FLAG_PERFORM_NO_CLOSE;
  public static final int NONE;
}
public class android.view.MenuInflater
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public void inflate(int, android.view.Menu);
}
public interface android.view.MenuItem
{
  public abstract boolean collapseActionView();
  public abstract boolean expandActionView();
  public abstract boolean hasSubMenu();
  public abstract boolean isActionViewExpanded();
  public abstract boolean isCheckable();
  public abstract boolean isChecked();
  public abstract boolean isEnabled();
  public abstract boolean isVisible();
  public abstract char getAlphabeticShortcut();
  public abstract char getNumericShortcut();
  public abstract int getGroupId();
  public abstract int getItemId();
  public abstract int getOrder();
  public abstract void setShowAsAction(int);
  public abstract android.content.Intent getIntent();
  public abstract android.graphics.drawable.Drawable getIcon();
  public abstract android.view.ActionProvider getActionProvider();
  public abstract android.view.ContextMenu$ContextMenuInfo getMenuInfo();
  public abstract android.view.MenuItem setActionProvider(android.view.ActionProvider);
  public abstract android.view.MenuItem setActionView(android.view.View);
  public abstract android.view.MenuItem setActionView(int);
  public abstract android.view.MenuItem setAlphabeticShortcut(char);
  public abstract android.view.MenuItem setCheckable(boolean);
  public abstract android.view.MenuItem setChecked(boolean);
  public abstract android.view.MenuItem setEnabled(boolean);
  public abstract android.view.MenuItem setIcon(android.graphics.drawable.Drawable);
  public abstract android.view.MenuItem setIcon(int);
  public abstract android.view.MenuItem setIntent(android.content.Intent);
  public abstract android.view.MenuItem setNumericShortcut(char);
  public abstract android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener);
  public abstract android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener);
  public abstract android.view.MenuItem setShortcut(char, char);
  public abstract android.view.MenuItem setShowAsActionFlags(int);
  public abstract android.view.MenuItem setTitle(int);
  public abstract android.view.MenuItem setTitle(java.lang.CharSequence);
  public abstract android.view.MenuItem setTitleCondensed(java.lang.CharSequence);
  public abstract android.view.MenuItem setVisible(boolean);
  public abstract android.view.SubMenu getSubMenu();
  public abstract android.view.View getActionView();
  public abstract java.lang.CharSequence getTitle();
  public abstract java.lang.CharSequence getTitleCondensed();
  public static final int SHOW_AS_ACTION_ALWAYS;
  public static final int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;
  public static final int SHOW_AS_ACTION_IF_ROOM;
  public static final int SHOW_AS_ACTION_NEVER;
  public static final int SHOW_AS_ACTION_WITH_TEXT;
}
public interface android.view.MenuItem$OnActionExpandListener
{
  public abstract boolean onMenuItemActionCollapse(android.view.MenuItem);
  public abstract boolean onMenuItemActionExpand(android.view.MenuItem);
}
public interface android.view.MenuItem$OnMenuItemClickListener
{
  public abstract boolean onMenuItemClick(android.view.MenuItem);
}
public final class android.view.MotionEvent
  extends android.view.InputEvent
  implements android.os.Parcelable
{
  public static int axisFromString(java.lang.String);
  public static android.view.MotionEvent obtain(android.view.MotionEvent);
  public static android.view.MotionEvent obtain(long, long, int, float, float, float, float, int, float, float, int, int);
  public static android.view.MotionEvent obtain(long, long, int, float, float, int);
  public static android.view.MotionEvent obtain(long, long, int, int, android.view.MotionEvent$PointerProperties[], android.view.MotionEvent$PointerCoords[], int, int, float, float, int, int, int, int);
  public static android.view.MotionEvent obtain(long, long, int, int, float, float, float, float, int, float, float, int, int);
  public static android.view.MotionEvent obtain(long, long, int, int, int[], android.view.MotionEvent$PointerCoords[], int, float, float, int, int, int, int);
  public static android.view.MotionEvent obtainNoHistory(android.view.MotionEvent);
  public static java.lang.String actionToString(int);
  public static java.lang.String axisToString(int);
  public final boolean isButtonPressed(int);
  public final float getAxisValue(int);
  public final float getAxisValue(int, int);
  public final float getHistoricalAxisValue(int, int);
  public final float getHistoricalAxisValue(int, int, int);
  public final float getHistoricalOrientation(int);
  public final float getHistoricalOrientation(int, int);
  public final float getHistoricalPressure(int);
  public final float getHistoricalPressure(int, int);
  public final float getHistoricalSize(int);
  public final float getHistoricalSize(int, int);
  public final float getHistoricalToolMajor(int);
  public final float getHistoricalToolMajor(int, int);
  public final float getHistoricalToolMinor(int);
  public final float getHistoricalToolMinor(int, int);
  public final float getHistoricalTouchMajor(int);
  public final float getHistoricalTouchMajor(int, int);
  public final float getHistoricalTouchMinor(int);
  public final float getHistoricalTouchMinor(int, int);
  public final float getHistoricalX(int);
  public final float getHistoricalX(int, int);
  public final float getHistoricalY(int);
  public final float getHistoricalY(int, int);
  public final float getOrientation();
  public final float getOrientation(int);
  public final float getPressure();
  public final float getPressure(int);
  public final float getRawX();
  public final float getRawY();
  public final float getSize();
  public final float getSize(int);
  public final float getToolMajor();
  public final float getToolMajor(int);
  public final float getToolMinor();
  public final float getToolMinor(int);
  public final float getTouchMajor();
  public final float getTouchMajor(int);
  public final float getTouchMinor();
  public final float getTouchMinor(int);
  public final float getX();
  public final float getX(int);
  public final float getXPrecision();
  public final float getY();
  public final float getY(int);
  public final float getYPrecision();
  public final int findPointerIndex(int);
  public final int getAction();
  public final int getActionButton();
  public final int getActionIndex();
  public final int getActionMasked();
  public final int getButtonState();
  public final int getDeviceId();
  public final int getEdgeFlags();
  public final int getFlags();
  public final int getHistorySize();
  public final int getMetaState();
  public final int getPointerCount();
  public final int getPointerId(int);
  public final int getSource();
  public final int getToolType(int);
  public final long getDownTime();
  public final long getEventTime();
  public final long getHistoricalEventTime(int);
  public final void addBatch(long, android.view.MotionEvent$PointerCoords[], int);
  public final void addBatch(long, float, float, float, float, int);
  public final void getHistoricalPointerCoords(int, int, android.view.MotionEvent$PointerCoords);
  public final void getPointerCoords(int, android.view.MotionEvent$PointerCoords);
  public final void getPointerProperties(int, android.view.MotionEvent$PointerProperties);
  public final void offsetLocation(float, float);
  public final void recycle();
  public final void setAction(int);
  public final void setEdgeFlags(int);
  public final void setLocation(float, float);
  public final void setSource(int);
  public final void transform(android.graphics.Matrix);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
  public static final int ACTION_BUTTON_PRESS;
  public static final int ACTION_BUTTON_RELEASE;
  public static final int ACTION_CANCEL;
  public static final int ACTION_DOWN;
  public static final int ACTION_HOVER_ENTER;
  public static final int ACTION_HOVER_EXIT;
  public static final int ACTION_HOVER_MOVE;
  public static final int ACTION_MASK;
  public static final int ACTION_MOVE;
  public static final int ACTION_OUTSIDE;
  public static final int ACTION_POINTER_1_DOWN;
  public static final int ACTION_POINTER_1_UP;
  public static final int ACTION_POINTER_2_DOWN;
  public static final int ACTION_POINTER_2_UP;
  public static final int ACTION_POINTER_3_DOWN;
  public static final int ACTION_POINTER_3_UP;
  public static final int ACTION_POINTER_DOWN;
  public static final int ACTION_POINTER_ID_MASK;
  public static final int ACTION_POINTER_ID_SHIFT;
  public static final int ACTION_POINTER_INDEX_MASK;
  public static final int ACTION_POINTER_INDEX_SHIFT;
  public static final int ACTION_POINTER_UP;
  public static final int ACTION_SCROLL;
  public static final int ACTION_UP;
  public static final int AXIS_BRAKE;
  public static final int AXIS_DISTANCE;
  public static final int AXIS_GAS;
  public static final int AXIS_GENERIC_10;
  public static final int AXIS_GENERIC_11;
  public static final int AXIS_GENERIC_12;
  public static final int AXIS_GENERIC_13;
  public static final int AXIS_GENERIC_14;
  public static final int AXIS_GENERIC_15;
  public static final int AXIS_GENERIC_16;
  public static final int AXIS_GENERIC_1;
  public static final int AXIS_GENERIC_2;
  public static final int AXIS_GENERIC_3;
  public static final int AXIS_GENERIC_4;
  public static final int AXIS_GENERIC_5;
  public static final int AXIS_GENERIC_6;
  public static final int AXIS_GENERIC_7;
  public static final int AXIS_GENERIC_8;
  public static final int AXIS_GENERIC_9;
  public static final int AXIS_HAT_X;
  public static final int AXIS_HAT_Y;
  public static final int AXIS_HSCROLL;
  public static final int AXIS_LTRIGGER;
  public static final int AXIS_ORIENTATION;
  public static final int AXIS_PRESSURE;
  public static final int AXIS_RELATIVE_X;
  public static final int AXIS_RELATIVE_Y;
  public static final int AXIS_RTRIGGER;
  public static final int AXIS_RUDDER;
  public static final int AXIS_RX;
  public static final int AXIS_RY;
  public static final int AXIS_RZ;
  public static final int AXIS_SIZE;
  public static final int AXIS_THROTTLE;
  public static final int AXIS_TILT;
  public static final int AXIS_TOOL_MAJOR;
  public static final int AXIS_TOOL_MINOR;
  public static final int AXIS_TOUCH_MAJOR;
  public static final int AXIS_TOUCH_MINOR;
  public static final int AXIS_VSCROLL;
  public static final int AXIS_WHEEL;
  public static final int AXIS_X;
  public static final int AXIS_Y;
  public static final int AXIS_Z;
  public static final int BUTTON_BACK;
  public static final int BUTTON_FORWARD;
  public static final int BUTTON_PRIMARY;
  public static final int BUTTON_SECONDARY;
  public static final int BUTTON_STYLUS_PRIMARY;
  public static final int BUTTON_STYLUS_SECONDARY;
  public static final int BUTTON_TERTIARY;
  public static final int EDGE_BOTTOM;
  public static final int EDGE_LEFT;
  public static final int EDGE_RIGHT;
  public static final int EDGE_TOP;
  public static final int FLAG_WINDOW_IS_OBSCURED;
  public static final int INVALID_POINTER_ID;
  public static final int TOOL_TYPE_ERASER;
  public static final int TOOL_TYPE_FINGER;
  public static final int TOOL_TYPE_MOUSE;
  public static final int TOOL_TYPE_STYLUS;
  public static final int TOOL_TYPE_UNKNOWN;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.MotionEvent$PointerCoords
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.view.MotionEvent$PointerCoords);
  public float getAxisValue(int);
  public void clear();
  public void copyFrom(android.view.MotionEvent$PointerCoords);
  public void setAxisValue(int, float);
  public float orientation;
  public float pressure;
  public float size;
  public float toolMajor;
  public float toolMinor;
  public float touchMajor;
  public float touchMinor;
  public float x;
  public float y;
}
public final class android.view.MotionEvent$PointerProperties
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.view.MotionEvent$PointerProperties);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void clear();
  public void copyFrom(android.view.MotionEvent$PointerProperties);
  public int id;
  public int toolType;
}
public abstract class android.view.OrientationEventListener
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, int);
  public abstract void onOrientationChanged(int);
  public boolean canDetectOrientation();
  public void disable();
  public void enable();
  public static final int ORIENTATION_UNKNOWN;
}
public abstract class android.view.OrientationListener
  extends java.lang.Object
  implements android.hardware.SensorListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, int);
  public abstract void onOrientationChanged(int);
  public void disable();
  public void enable();
  public void onAccuracyChanged(int, int);
  public void onSensorChanged(int, float[]);
  public static final int ORIENTATION_UNKNOWN;
}
public final class android.view.PixelCopy
  extends java.lang.Object
{
  public static void request(android.view.Surface, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler);
  public static void request(android.view.SurfaceView, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler);
  public static final int ERROR_DESTINATION_INVALID;
  public static final int ERROR_SOURCE_INVALID;
  public static final int ERROR_SOURCE_NO_DATA;
  public static final int ERROR_TIMEOUT;
  public static final int ERROR_UNKNOWN;
  public static final int SUCCESS;
}
public interface android.view.PixelCopy$OnPixelCopyFinishedListener
{
  public abstract void onPixelCopyFinished(int);
}
public final class android.view.PointerIcon
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.view.PointerIcon create(android.graphics.Bitmap, float, float);
  public static android.view.PointerIcon getSystemIcon(android.content.Context, int);
  public static android.view.PointerIcon load(android.content.res.Resources, int);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final int TYPE_ALIAS;
  public static final int TYPE_ALL_SCROLL;
  public static final int TYPE_ARROW;
  public static final int TYPE_CELL;
  public static final int TYPE_CONTEXT_MENU;
  public static final int TYPE_COPY;
  public static final int TYPE_CROSSHAIR;
  public static final int TYPE_DEFAULT;
  public static final int TYPE_GRAB;
  public static final int TYPE_GRABBING;
  public static final int TYPE_HAND;
  public static final int TYPE_HELP;
  public static final int TYPE_HORIZONTAL_DOUBLE_ARROW;
  public static final int TYPE_NO_DROP;
  public static final int TYPE_NULL;
  public static final int TYPE_TEXT;
  public static final int TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW;
  public static final int TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW;
  public static final int TYPE_VERTICAL_DOUBLE_ARROW;
  public static final int TYPE_VERTICAL_TEXT;
  public static final int TYPE_WAIT;
  public static final int TYPE_ZOOM_IN;
  public static final int TYPE_ZOOM_OUT;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.ScaleGestureDetector
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.view.ScaleGestureDetector$OnScaleGestureListener);
  public void <init>(android.content.Context, android.view.ScaleGestureDetector$OnScaleGestureListener, android.os.Handler);
  public boolean isInProgress();
  public boolean isQuickScaleEnabled();
  public boolean isStylusScaleEnabled();
  public boolean onTouchEvent(android.view.MotionEvent);
  public float getCurrentSpan();
  public float getCurrentSpanX();
  public float getCurrentSpanY();
  public float getFocusX();
  public float getFocusY();
  public float getPreviousSpan();
  public float getPreviousSpanX();
  public float getPreviousSpanY();
  public float getScaleFactor();
  public long getEventTime();
  public long getTimeDelta();
  public void setQuickScaleEnabled(boolean);
  public void setStylusScaleEnabled(boolean);
}
public interface android.view.ScaleGestureDetector$OnScaleGestureListener
{
  public abstract boolean onScale(android.view.ScaleGestureDetector);
  public abstract boolean onScaleBegin(android.view.ScaleGestureDetector);
  public abstract void onScaleEnd(android.view.ScaleGestureDetector);
}
public class android.view.ScaleGestureDetector$SimpleOnScaleGestureListener
  extends java.lang.Object
  implements android.view.ScaleGestureDetector$OnScaleGestureListener
{
  public void <init>();
  public boolean onScale(android.view.ScaleGestureDetector);
  public boolean onScaleBegin(android.view.ScaleGestureDetector);
  public void onScaleEnd(android.view.ScaleGestureDetector);
}
public class android.view.SearchEvent
  extends java.lang.Object
{
  public void <init>(android.view.InputDevice);
  public android.view.InputDevice getInputDevice();
}
public class android.view.SoundEffectConstants
  extends java.lang.Object
{
  public static int getContantForFocusDirection(int);
  public static final int CLICK;
  public static final int NAVIGATION_DOWN;
  public static final int NAVIGATION_LEFT;
  public static final int NAVIGATION_RIGHT;
  public static final int NAVIGATION_UP;
}
public interface android.view.SubMenu
  extends android.view.Menu
{
  public abstract void clearHeader();
  public abstract android.view.MenuItem getItem();
  public abstract android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable);
  public abstract android.view.SubMenu setHeaderIcon(int);
  public abstract android.view.SubMenu setHeaderTitle(int);
  public abstract android.view.SubMenu setHeaderTitle(java.lang.CharSequence);
  public abstract android.view.SubMenu setHeaderView(android.view.View);
  public abstract android.view.SubMenu setIcon(android.graphics.drawable.Drawable);
  public abstract android.view.SubMenu setIcon(int);
}
public class android.view.Surface
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.graphics.SurfaceTexture);
  public boolean isValid();
  public int describeContents();
  public void readFromParcel(android.os.Parcel);
  public void release();
  public void unlockCanvas(android.graphics.Canvas);
  public void unlockCanvasAndPost(android.graphics.Canvas);
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Canvas lockCanvas(android.graphics.Rect)  throws android.view.Surface$OutOfResourcesException, java.lang.IllegalArgumentException;
  public android.graphics.Canvas lockHardwareCanvas();
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
  public static final int ROTATION_0;
  public static final int ROTATION_180;
  public static final int ROTATION_270;
  public static final int ROTATION_90;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.Surface$OutOfResourcesException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface android.view.SurfaceHolder
{
  public abstract boolean isCreating();
  public abstract void addCallback(android.view.SurfaceHolder$Callback);
  public abstract void removeCallback(android.view.SurfaceHolder$Callback);
  public abstract void setFixedSize(int, int);
  public abstract void setFormat(int);
  public abstract void setKeepScreenOn(boolean);
  public abstract void setSizeFromLayout();
  public abstract void setType(int);
  public abstract void unlockCanvasAndPost(android.graphics.Canvas);
  public abstract android.graphics.Canvas lockCanvas();
  public abstract android.graphics.Canvas lockCanvas(android.graphics.Rect);
  public abstract android.graphics.Rect getSurfaceFrame();
  public abstract android.view.Surface getSurface();
  public static final int SURFACE_TYPE_GPU;
  public static final int SURFACE_TYPE_HARDWARE;
  public static final int SURFACE_TYPE_NORMAL;
  public static final int SURFACE_TYPE_PUSH_BUFFERS;
}
public class android.view.SurfaceHolder$BadSurfaceTypeException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface android.view.SurfaceHolder$Callback
{
  public abstract void surfaceChanged(android.view.SurfaceHolder, int, int, int);
  public abstract void surfaceCreated(android.view.SurfaceHolder);
  public abstract void surfaceDestroyed(android.view.SurfaceHolder);
}
public interface android.view.SurfaceHolder$Callback2
  extends android.view.SurfaceHolder$Callback
{
  public abstract void surfaceRedrawNeeded(android.view.SurfaceHolder);
}
public class android.view.SurfaceView
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public void draw(android.graphics.Canvas);
  public void setSecure(boolean);
  public void setVisibility(int);
  public void setZOrderMediaOverlay(boolean);
  public void setZOrderOnTop(boolean);
  public android.view.SurfaceHolder getHolder();
  protected void dispatchDraw(android.graphics.Canvas);
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onMeasure(int, int);
  protected void onWindowVisibilityChanged(int);
}
public class android.view.TextureView
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final void draw(android.graphics.Canvas);
  public boolean isAvailable();
  public boolean isOpaque();
  public int getLayerType();
  public void buildLayer();
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setForeground(android.graphics.drawable.Drawable);
  public void setLayerPaint(android.graphics.Paint);
  public void setLayerType(int, android.graphics.Paint);
  public void setOpaque(boolean);
  public void setSurfaceTexture(android.graphics.SurfaceTexture);
  public void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener);
  public void setTransform(android.graphics.Matrix);
  public void unlockCanvasAndPost(android.graphics.Canvas);
  public android.graphics.Bitmap getBitmap();
  public android.graphics.Bitmap getBitmap(android.graphics.Bitmap);
  public android.graphics.Bitmap getBitmap(int, int);
  public android.graphics.Canvas lockCanvas();
  public android.graphics.Canvas lockCanvas(android.graphics.Rect);
  public android.graphics.Matrix getTransform(android.graphics.Matrix);
  public android.graphics.SurfaceTexture getSurfaceTexture();
  public android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener();
  protected final void onDraw(android.graphics.Canvas);
  protected void onAttachedToWindow();
  protected void onSizeChanged(int, int, int, int);
  protected void onVisibilityChanged(android.view.View, int);
}
public interface android.view.TextureView$SurfaceTextureListener
{
  public abstract boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture);
  public abstract void onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int);
  public abstract void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture, int, int);
  public abstract void onSurfaceTextureUpdated(android.graphics.SurfaceTexture);
}
public class android.view.TouchDelegate
  extends java.lang.Object
{
  public void <init>(android.graphics.Rect, android.view.View);
  public boolean onTouchEvent(android.view.MotionEvent);
  public static final int ABOVE;
  public static final int BELOW;
  public static final int TO_LEFT;
  public static final int TO_RIGHT;
}
public final class android.view.VelocityTracker
  extends java.lang.Object
{
  public static android.view.VelocityTracker obtain();
  public float getXVelocity();
  public float getXVelocity(int);
  public float getYVelocity();
  public float getYVelocity(int);
  public void addMovement(android.view.MotionEvent);
  public void clear();
  public void computeCurrentVelocity(int);
  public void computeCurrentVelocity(int, float);
  public void recycle();
  protected void finalize()  throws java.lang.Throwable;
}
public class android.view.View
  extends java.lang.Object
  implements android.graphics.drawable.Drawable$Callback, android.view.KeyEvent$Callback, android.view.accessibility.AccessibilityEventSource
{
  public static int combineMeasuredStates(int, int);
  public static int generateViewId();
  public static int getDefaultSize(int, int);
  public static int resolveSize(int, int);
  public static int resolveSizeAndState(int, int, int);
  public static android.view.View inflate(android.content.Context, int, android.view.ViewGroup);
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final boolean getClipToOutline();
  public final boolean getGlobalVisibleRect(android.graphics.Rect);
  public final boolean getHasOverlappingRendering();
  public final boolean getLocalVisibleRect(android.graphics.Rect);
  public final boolean isFocusable();
  public final boolean isFocusableInTouchMode();
  public final boolean isTemporarilyDetached();
  public final boolean requestFocus();
  public final boolean requestFocus(int);
  public final boolean requestFocusFromTouch();
  public final boolean startDrag(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int);
  public final boolean startDragAndDrop(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int);
  public final int getBottom();
  public final int getHeight();
  public final int getLeft();
  public final int getMeasuredHeight();
  public final int getMeasuredHeightAndState();
  public final int getMeasuredState();
  public final int getMeasuredWidth();
  public final int getMeasuredWidthAndState();
  public final int getRight();
  public final int getScrollX();
  public final int getScrollY();
  public final int getTop();
  public final int getWidth();
  public final void cancelDragAndDrop();
  public final void cancelPendingInputEvents();
  public final void measure(int, int);
  public final void requestUnbufferedDispatch(android.view.MotionEvent);
  public final void setBottom(int);
  public final void setLeft(int);
  public final void setRight(int);
  public final void setTop(int);
  public final void setTransitionName(java.lang.String);
  public final void updateDragShadow(android.view.View$DragShadowBuilder);
  public final android.content.Context getContext();
  public final android.view.View findViewById(int);
  public final android.view.View findViewWithTag(java.lang.Object);
  public final android.view.ViewParent getParent();
  public final int[] getDrawableState();
  public boolean callOnClick();
  public boolean canResolveLayoutDirection();
  public boolean canResolveTextAlignment();
  public boolean canResolveTextDirection();
  public boolean canScrollHorizontally(int);
  public boolean canScrollVertically(int);
  public boolean checkInputConnectionProxy(android.view.View);
  public boolean dispatchDragEvent(android.view.DragEvent);
  public boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyEventPreIme(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchNestedFling(float, float, boolean);
  public boolean dispatchNestedPreFling(float, float);
  public boolean dispatchNestedPrePerformAccessibilityAction(int, android.os.Bundle);
  public boolean dispatchNestedPreScroll(int, int, int[], int[]);
  public boolean dispatchNestedScroll(int, int, int, int, int[]);
  public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean dispatchUnhandledMove(android.view.View, int);
  public boolean getClipBounds(android.graphics.Rect);
  public boolean getFilterTouchesWhenObscured();
  public boolean getFitsSystemWindows();
  public boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point);
  public boolean getKeepScreenOn();
  public boolean hasFocus();
  public boolean hasFocusable();
  public boolean hasNestedScrollingParent();
  public boolean hasOnClickListeners();
  public boolean hasOverlappingRendering();
  public boolean hasTransientState();
  public boolean hasWindowFocus();
  public boolean isAccessibilityFocused();
  public boolean isActivated();
  public boolean isAttachedToWindow();
  public boolean isClickable();
  public boolean isContextClickable();
  public boolean isDirty();
  public boolean isDrawingCacheEnabled();
  public boolean isDuplicateParentStateEnabled();
  public boolean isEnabled();
  public boolean isFocused();
  public boolean isHapticFeedbackEnabled();
  public boolean isHardwareAccelerated();
  public boolean isHorizontalFadingEdgeEnabled();
  public boolean isHorizontalScrollBarEnabled();
  public boolean isHovered();
  public boolean isImportantForAccessibility();
  public boolean isInEditMode();
  public boolean isInLayout();
  public boolean isInTouchMode();
  public boolean isLaidOut();
  public boolean isLayoutDirectionResolved();
  public boolean isLayoutRequested();
  public boolean isLongClickable();
  public boolean isNestedScrollingEnabled();
  public boolean isOpaque();
  public boolean isPaddingRelative();
  public boolean isPressed();
  public boolean isSaveEnabled();
  public boolean isSaveFromParentEnabled();
  public boolean isScrollContainer();
  public boolean isScrollbarFadingEnabled();
  public boolean isSelected();
  public boolean isShown();
  public boolean isSoundEffectsEnabled();
  public boolean isTextAlignmentResolved();
  public boolean isTextDirectionResolved();
  public boolean isVerticalFadingEdgeEnabled();
  public boolean isVerticalScrollBarEnabled();
  public boolean onCheckIsTextEditor();
  public boolean onDragEvent(android.view.DragEvent);
  public boolean onFilterTouchEventForSecurity(android.view.MotionEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onHoverEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyLongPress(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean performAccessibilityAction(int, android.os.Bundle);
  public boolean performClick();
  public boolean performContextClick();
  public boolean performContextClick(float, float);
  public boolean performHapticFeedback(int);
  public boolean performHapticFeedback(int, int);
  public boolean performLongClick();
  public boolean performLongClick(float, float);
  public boolean post(java.lang.Runnable);
  public boolean postDelayed(java.lang.Runnable, long);
  public boolean removeCallbacks(java.lang.Runnable);
  public boolean requestFocus(int, android.graphics.Rect);
  public boolean requestRectangleOnScreen(android.graphics.Rect);
  public boolean requestRectangleOnScreen(android.graphics.Rect, boolean);
  public boolean showContextMenu();
  public boolean showContextMenu(float, float);
  public boolean startNestedScroll(int);
  public boolean willNotCacheDrawing();
  public boolean willNotDraw();
  public float getAlpha();
  public float getCameraDistance();
  public float getElevation();
  public float getPivotX();
  public float getPivotY();
  public float getRotation();
  public float getRotationX();
  public float getRotationY();
  public float getScaleX();
  public float getScaleY();
  public float getTranslationX();
  public float getTranslationY();
  public float getTranslationZ();
  public float getX();
  public float getY();
  public float getZ();
  public int getAccessibilityLiveRegion();
  public int getAccessibilityTraversalAfter();
  public int getAccessibilityTraversalBefore();
  public int getBaseline();
  public int getDrawingCacheBackgroundColor();
  public int getDrawingCacheQuality();
  public int getForegroundGravity();
  public int getHorizontalFadingEdgeLength();
  public int getId();
  public int getImportantForAccessibility();
  public int getLabelFor();
  public int getLayerType();
  public int getLayoutDirection();
  public int getMinimumHeight();
  public int getMinimumWidth();
  public int getNextFocusDownId();
  public int getNextFocusForwardId();
  public int getNextFocusLeftId();
  public int getNextFocusRightId();
  public int getNextFocusUpId();
  public int getOverScrollMode();
  public int getPaddingBottom();
  public int getPaddingEnd();
  public int getPaddingLeft();
  public int getPaddingRight();
  public int getPaddingStart();
  public int getPaddingTop();
  public int getScrollBarDefaultDelayBeforeFade();
  public int getScrollBarFadeDuration();
  public int getScrollBarSize();
  public int getScrollBarStyle();
  public int getScrollIndicators();
  public int getSolidColor();
  public int getSystemUiVisibility();
  public int getTextAlignment();
  public int getTextDirection();
  public int getVerticalFadingEdgeLength();
  public int getVerticalScrollbarPosition();
  public int getVerticalScrollbarWidth();
  public int getVisibility();
  public int getWindowSystemUiVisibility();
  public int getWindowVisibility();
  public long getDrawingTime();
  public void addChildrenForAccessibility(java.util.ArrayList);
  public void addFocusables(java.util.ArrayList, int);
  public void addFocusables(java.util.ArrayList, int, int);
  public void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener);
  public void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener);
  public void addTouchables(java.util.ArrayList);
  public void announceForAccessibility(java.lang.CharSequence);
  public void bringToFront();
  public void buildDrawingCache();
  public void buildDrawingCache(boolean);
  public void buildLayer();
  public void cancelLongPress();
  public void clearAnimation();
  public void clearFocus();
  public void computeScroll();
  public void createContextMenu(android.view.ContextMenu);
  public void destroyDrawingCache();
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  public void dispatchDisplayHint(int);
  public void dispatchDrawableHotspotChanged(float, float);
  public void dispatchFinishTemporaryDetach();
  public void dispatchProvideStructure(android.view.ViewStructure);
  public void dispatchStartTemporaryDetach();
  public void dispatchSystemUiVisibilityChanged(int);
  public void dispatchWindowFocusChanged(boolean);
  public void dispatchWindowSystemUiVisiblityChanged(int);
  public void dispatchWindowVisibilityChanged(int);
  public void draw(android.graphics.Canvas);
  public void drawableHotspotChanged(float, float);
  public void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int);
  public void forceHasOverlappingRendering(boolean);
  public void forceLayout();
  public void getDrawingRect(android.graphics.Rect);
  public void getFocusedRect(android.graphics.Rect);
  public void getHitRect(android.graphics.Rect);
  public void getLocationInWindow(int[]);
  public void getLocationOnScreen(int[]);
  public void getWindowVisibleDisplayFrame(android.graphics.Rect);
  public void invalidate();
  public void invalidate(android.graphics.Rect);
  public void invalidate(int, int, int, int);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void invalidateOutline();
  public void jumpDrawablesToCurrentState();
  public void layout(int, int, int, int);
  public void offsetLeftAndRight(int);
  public void offsetTopAndBottom(int);
  public void onCancelPendingInputEvents();
  public void onDrawForeground(android.graphics.Canvas);
  public void onFinishTemporaryDetach();
  public void onHoverChanged(boolean);
  public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
  public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public void onProvideStructure(android.view.ViewStructure);
  public void onProvideVirtualStructure(android.view.ViewStructure);
  public void onRtlPropertiesChanged(int);
  public void onScreenStateChanged(int);
  public void onStartTemporaryDetach();
  public void onVisibilityAggregated(boolean);
  public void onWindowFocusChanged(boolean);
  public void onWindowSystemUiVisibilityChanged(int);
  public void playSoundEffect(int);
  public void postInvalidate();
  public void postInvalidate(int, int, int, int);
  public void postInvalidateDelayed(long);
  public void postInvalidateDelayed(long, int, int, int, int);
  public void postInvalidateOnAnimation();
  public void postInvalidateOnAnimation(int, int, int, int);
  public void postOnAnimation(java.lang.Runnable);
  public void postOnAnimationDelayed(java.lang.Runnable, long);
  public void refreshDrawableState();
  public void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener);
  public void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener);
  public void requestApplyInsets();
  public void requestFitSystemWindows();
  public void requestLayout();
  public void restoreHierarchyState(android.util.SparseArray);
  public void saveHierarchyState(android.util.SparseArray);
  public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long);
  public void scrollBy(int, int);
  public void scrollTo(int, int);
  public void sendAccessibilityEvent(int);
  public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent);
  public void setAccessibilityDelegate(android.view.View$AccessibilityDelegate);
  public void setAccessibilityLiveRegion(int);
  public void setAccessibilityTraversalAfter(int);
  public void setAccessibilityTraversalBefore(int);
  public void setActivated(boolean);
  public void setAlpha(float);
  public void setAnimation(android.view.animation.Animation);
  public void setBackground(android.graphics.drawable.Drawable);
  public void setBackgroundColor(int);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setBackgroundResource(int);
  public void setBackgroundTintList(android.content.res.ColorStateList);
  public void setBackgroundTintMode(android.graphics.PorterDuff$Mode);
  public void setCameraDistance(float);
  public void setClickable(boolean);
  public void setClipBounds(android.graphics.Rect);
  public void setClipToOutline(boolean);
  public void setContentDescription(java.lang.CharSequence);
  public void setContextClickable(boolean);
  public void setDrawingCacheBackgroundColor(int);
  public void setDrawingCacheEnabled(boolean);
  public void setDrawingCacheQuality(int);
  public void setDuplicateParentStateEnabled(boolean);
  public void setElevation(float);
  public void setEnabled(boolean);
  public void setFadingEdgeLength(int);
  public void setFilterTouchesWhenObscured(boolean);
  public void setFitsSystemWindows(boolean);
  public void setFocusable(boolean);
  public void setFocusableInTouchMode(boolean);
  public void setForeground(android.graphics.drawable.Drawable);
  public void setForegroundGravity(int);
  public void setForegroundTintList(android.content.res.ColorStateList);
  public void setForegroundTintMode(android.graphics.PorterDuff$Mode);
  public void setHapticFeedbackEnabled(boolean);
  public void setHasTransientState(boolean);
  public void setHorizontalFadingEdgeEnabled(boolean);
  public void setHorizontalScrollBarEnabled(boolean);
  public void setHovered(boolean);
  public void setId(int);
  public void setImportantForAccessibility(int);
  public void setKeepScreenOn(boolean);
  public void setLabelFor(int);
  public void setLayerPaint(android.graphics.Paint);
  public void setLayerType(int, android.graphics.Paint);
  public void setLayoutDirection(int);
  public void setLayoutParams(android.view.ViewGroup$LayoutParams);
  public void setLongClickable(boolean);
  public void setMinimumHeight(int);
  public void setMinimumWidth(int);
  public void setNestedScrollingEnabled(boolean);
  public void setNextFocusDownId(int);
  public void setNextFocusForwardId(int);
  public void setNextFocusLeftId(int);
  public void setNextFocusRightId(int);
  public void setNextFocusUpId(int);
  public void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener);
  public void setOnClickListener(android.view.View$OnClickListener);
  public void setOnContextClickListener(android.view.View$OnContextClickListener);
  public void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener);
  public void setOnDragListener(android.view.View$OnDragListener);
  public void setOnFocusChangeListener(android.view.View$OnFocusChangeListener);
  public void setOnGenericMotionListener(android.view.View$OnGenericMotionListener);
  public void setOnHoverListener(android.view.View$OnHoverListener);
  public void setOnKeyListener(android.view.View$OnKeyListener);
  public void setOnLongClickListener(android.view.View$OnLongClickListener);
  public void setOnScrollChangeListener(android.view.View$OnScrollChangeListener);
  public void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener);
  public void setOnTouchListener(android.view.View$OnTouchListener);
  public void setOutlineProvider(android.view.ViewOutlineProvider);
  public void setOverScrollMode(int);
  public void setPadding(int, int, int, int);
  public void setPaddingRelative(int, int, int, int);
  public void setPivotX(float);
  public void setPivotY(float);
  public void setPointerIcon(android.view.PointerIcon);
  public void setPressed(boolean);
  public void setRotation(float);
  public void setRotationX(float);
  public void setRotationY(float);
  public void setSaveEnabled(boolean);
  public void setSaveFromParentEnabled(boolean);
  public void setScaleX(float);
  public void setScaleY(float);
  public void setScrollBarDefaultDelayBeforeFade(int);
  public void setScrollBarFadeDuration(int);
  public void setScrollBarSize(int);
  public void setScrollBarStyle(int);
  public void setScrollContainer(boolean);
  public void setScrollIndicators(int);
  public void setScrollIndicators(int, int);
  public void setScrollX(int);
  public void setScrollY(int);
  public void setScrollbarFadingEnabled(boolean);
  public void setSelected(boolean);
  public void setSoundEffectsEnabled(boolean);
  public void setStateListAnimator(android.animation.StateListAnimator);
  public void setSystemUiVisibility(int);
  public void setTag(int, java.lang.Object);
  public void setTag(java.lang.Object);
  public void setTextAlignment(int);
  public void setTextDirection(int);
  public void setTouchDelegate(android.view.TouchDelegate);
  public void setTranslationX(float);
  public void setTranslationY(float);
  public void setTranslationZ(float);
  public void setVerticalFadingEdgeEnabled(boolean);
  public void setVerticalScrollBarEnabled(boolean);
  public void setVerticalScrollbarPosition(int);
  public void setVisibility(int);
  public void setWillNotCacheDrawing(boolean);
  public void setWillNotDraw(boolean);
  public void setX(float);
  public void setY(float);
  public void setZ(float);
  public void startAnimation(android.view.animation.Animation);
  public void stopNestedScroll();
  public void unscheduleDrawable(android.graphics.drawable.Drawable);
  public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable);
  public android.animation.StateListAnimator getStateListAnimator();
  public android.content.res.ColorStateList getBackgroundTintList();
  public android.content.res.ColorStateList getForegroundTintList();
  public android.content.res.Resources getResources();
  public android.graphics.Bitmap getDrawingCache();
  public android.graphics.Bitmap getDrawingCache(boolean);
  public android.graphics.Matrix getMatrix();
  public android.graphics.PorterDuff$Mode getBackgroundTintMode();
  public android.graphics.PorterDuff$Mode getForegroundTintMode();
  public android.graphics.Rect getClipBounds();
  public android.graphics.drawable.Drawable getBackground();
  public android.graphics.drawable.Drawable getForeground();
  public android.os.Handler getHandler();
  public android.os.IBinder getApplicationWindowToken();
  public android.os.IBinder getWindowToken();
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback);
  public android.view.ActionMode startActionMode(android.view.ActionMode$Callback, int);
  public android.view.Display getDisplay();
  public android.view.KeyEvent$DispatcherState getKeyDispatcherState();
  public android.view.PointerIcon getPointerIcon();
  public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int);
  public android.view.TouchDelegate getTouchDelegate();
  public android.view.View findFocus();
  public android.view.View focusSearch(int);
  public android.view.View getRootView();
  public android.view.View$OnFocusChangeListener getOnFocusChangeListener();
  public android.view.ViewGroup$LayoutParams getLayoutParams();
  public android.view.ViewOutlineProvider getOutlineProvider();
  public android.view.ViewOverlay getOverlay();
  public android.view.ViewParent getParentForAccessibility();
  public android.view.ViewPropertyAnimator animate();
  public android.view.ViewTreeObserver getViewTreeObserver();
  public android.view.WindowId getWindowId();
  public android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets, android.graphics.Rect);
  public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets);
  public android.view.WindowInsets getRootWindowInsets();
  public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets);
  public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo();
  public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
  public android.view.animation.Animation getAnimation();
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getContentDescription();
  public java.lang.Object getTag();
  public java.lang.Object getTag(int);
  public java.lang.String getTransitionName();
  public java.lang.String toString();
  public java.util.ArrayList getFocusables(int);
  public java.util.ArrayList getTouchables();
  protected static int[] mergeDrawableStates(int[], int[]);
  protected final void onDrawScrollBars(android.graphics.Canvas);
  protected final void setMeasuredDimension(int, int);
  protected boolean awakenScrollBars();
  protected boolean awakenScrollBars(int);
  protected boolean awakenScrollBars(int, boolean);
  protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent);
  protected boolean dispatchGenericPointerEvent(android.view.MotionEvent);
  protected boolean dispatchHoverEvent(android.view.MotionEvent);
  protected boolean fitSystemWindows(android.graphics.Rect);
  protected boolean isPaddingOffsetRequired();
  protected boolean onSetAlpha(int);
  protected boolean overScrollBy(int, int, int, int, int, int, int, int, boolean);
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected float getBottomFadingEdgeStrength();
  protected float getLeftFadingEdgeStrength();
  protected float getRightFadingEdgeStrength();
  protected float getTopFadingEdgeStrength();
  protected int computeHorizontalScrollExtent();
  protected int computeHorizontalScrollOffset();
  protected int computeHorizontalScrollRange();
  protected int computeVerticalScrollExtent();
  protected int computeVerticalScrollOffset();
  protected int computeVerticalScrollRange();
  protected int getBottomPaddingOffset();
  protected int getHorizontalScrollbarHeight();
  protected int getLeftPaddingOffset();
  protected int getRightPaddingOffset();
  protected int getSuggestedMinimumHeight();
  protected int getSuggestedMinimumWidth();
  protected int getTopPaddingOffset();
  protected int getWindowAttachCount();
  protected void dispatchDraw(android.graphics.Canvas);
  protected void dispatchRestoreInstanceState(android.util.SparseArray);
  protected void dispatchSaveInstanceState(android.util.SparseArray);
  protected void dispatchSetActivated(boolean);
  protected void dispatchSetPressed(boolean);
  protected void dispatchSetSelected(boolean);
  protected void dispatchVisibilityChanged(android.view.View, int);
  protected void drawableStateChanged();
  protected void onAnimationEnd();
  protected void onAnimationStart();
  protected void onAttachedToWindow();
  protected void onConfigurationChanged(android.content.res.Configuration);
  protected void onCreateContextMenu(android.view.ContextMenu);
  protected void onDetachedFromWindow();
  protected void onDisplayHint(int);
  protected void onDraw(android.graphics.Canvas);
  protected void onFinishInflate();
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onOverScrolled(int, int, boolean, boolean);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void onScrollChanged(int, int, int, int);
  protected void onSizeChanged(int, int, int, int);
  protected void onVisibilityChanged(android.view.View, int);
  protected void onWindowVisibilityChanged(int);
  protected android.os.Parcelable onSaveInstanceState();
  protected android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
  protected int[] onCreateDrawableState(int);
  public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE;
  public static final int ACCESSIBILITY_LIVE_REGION_NONE;
  public static final int ACCESSIBILITY_LIVE_REGION_POLITE;
  public static final int DRAG_FLAG_GLOBAL;
  public static final int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION;
  public static final int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION;
  public static final int DRAG_FLAG_GLOBAL_URI_READ;
  public static final int DRAG_FLAG_GLOBAL_URI_WRITE;
  public static final int DRAG_FLAG_OPAQUE;
  public static final int DRAWING_CACHE_QUALITY_AUTO;
  public static final int DRAWING_CACHE_QUALITY_HIGH;
  public static final int DRAWING_CACHE_QUALITY_LOW;
  public static final int FIND_VIEWS_WITH_CONTENT_DESCRIPTION;
  public static final int FIND_VIEWS_WITH_TEXT;
  public static final int FOCUSABLES_ALL;
  public static final int FOCUSABLES_TOUCH_MODE;
  public static final int FOCUS_BACKWARD;
  public static final int FOCUS_DOWN;
  public static final int FOCUS_FORWARD;
  public static final int FOCUS_LEFT;
  public static final int FOCUS_RIGHT;
  public static final int FOCUS_UP;
  public static final int GONE;
  public static final int HAPTIC_FEEDBACK_ENABLED;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_NO;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS;
  public static final int IMPORTANT_FOR_ACCESSIBILITY_YES;
  public static final int INVISIBLE;
  public static final int KEEP_SCREEN_ON;
  public static final int LAYER_TYPE_HARDWARE;
  public static final int LAYER_TYPE_NONE;
  public static final int LAYER_TYPE_SOFTWARE;
  public static final int LAYOUT_DIRECTION_INHERIT;
  public static final int LAYOUT_DIRECTION_LOCALE;
  public static final int LAYOUT_DIRECTION_LTR;
  public static final int LAYOUT_DIRECTION_RTL;
  public static final int MEASURED_HEIGHT_STATE_SHIFT;
  public static final int MEASURED_SIZE_MASK;
  public static final int MEASURED_STATE_MASK;
  public static final int MEASURED_STATE_TOO_SMALL;
  public static final int NO_ID;
  public static final int OVER_SCROLL_ALWAYS;
  public static final int OVER_SCROLL_IF_CONTENT_SCROLLS;
  public static final int OVER_SCROLL_NEVER;
  public static final int SCREEN_STATE_OFF;
  public static final int SCREEN_STATE_ON;
  public static final int SCROLLBARS_INSIDE_INSET;
  public static final int SCROLLBARS_INSIDE_OVERLAY;
  public static final int SCROLLBARS_OUTSIDE_INSET;
  public static final int SCROLLBARS_OUTSIDE_OVERLAY;
  public static final int SCROLLBAR_POSITION_DEFAULT;
  public static final int SCROLLBAR_POSITION_LEFT;
  public static final int SCROLLBAR_POSITION_RIGHT;
  public static final int SCROLL_AXIS_HORIZONTAL;
  public static final int SCROLL_AXIS_NONE;
  public static final int SCROLL_AXIS_VERTICAL;
  public static final int SCROLL_INDICATOR_BOTTOM;
  public static final int SCROLL_INDICATOR_END;
  public static final int SCROLL_INDICATOR_LEFT;
  public static final int SCROLL_INDICATOR_RIGHT;
  public static final int SCROLL_INDICATOR_START;
  public static final int SCROLL_INDICATOR_TOP;
  public static final int SOUND_EFFECTS_ENABLED;
  public static final int STATUS_BAR_HIDDEN;
  public static final int STATUS_BAR_VISIBLE;
  public static final int SYSTEM_UI_FLAG_FULLSCREEN;
  public static final int SYSTEM_UI_FLAG_HIDE_NAVIGATION;
  public static final int SYSTEM_UI_FLAG_IMMERSIVE;
  public static final int SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
  public static final int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
  public static final int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
  public static final int SYSTEM_UI_FLAG_LAYOUT_STABLE;
  public static final int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
  public static final int SYSTEM_UI_FLAG_LOW_PROFILE;
  public static final int SYSTEM_UI_FLAG_VISIBLE;
  public static final int SYSTEM_UI_LAYOUT_FLAGS;
  public static final int TEXT_ALIGNMENT_CENTER;
  public static final int TEXT_ALIGNMENT_GRAVITY;
  public static final int TEXT_ALIGNMENT_INHERIT;
  public static final int TEXT_ALIGNMENT_TEXT_END;
  public static final int TEXT_ALIGNMENT_TEXT_START;
  public static final int TEXT_ALIGNMENT_VIEW_END;
  public static final int TEXT_ALIGNMENT_VIEW_START;
  public static final int TEXT_DIRECTION_ANY_RTL;
  public static final int TEXT_DIRECTION_FIRST_STRONG;
  public static final int TEXT_DIRECTION_FIRST_STRONG_LTR;
  public static final int TEXT_DIRECTION_FIRST_STRONG_RTL;
  public static final int TEXT_DIRECTION_INHERIT;
  public static final int TEXT_DIRECTION_LOCALE;
  public static final int TEXT_DIRECTION_LTR;
  public static final int TEXT_DIRECTION_RTL;
  public static final int VISIBLE;
  public static final android.util.Property ALPHA;
  public static final android.util.Property ROTATION;
  public static final android.util.Property ROTATION_X;
  public static final android.util.Property ROTATION_Y;
  public static final android.util.Property SCALE_X;
  public static final android.util.Property SCALE_Y;
  public static final android.util.Property TRANSLATION_X;
  public static final android.util.Property TRANSLATION_Y;
  public static final android.util.Property TRANSLATION_Z;
  public static final android.util.Property X;
  public static final android.util.Property Y;
  public static final android.util.Property Z;
  protected static final int[] EMPTY_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_SELECTED_STATE_SET;
  protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] ENABLED_STATE_SET;
  protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] FOCUSED_SELECTED_STATE_SET;
  protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] FOCUSED_STATE_SET;
  protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_STATE_SET;
  protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_SELECTED_STATE_SET;
  protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] PRESSED_STATE_SET;
  protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] SELECTED_STATE_SET;
  protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET;
  protected static final int[] WINDOW_FOCUSED_STATE_SET;
  protected static final java.lang.String VIEW_LOG_TAG;
}
public class android.view.View$AccessibilityDelegate
  extends java.lang.Object
{
  public void <init>();
  public boolean dispatchPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean performAccessibilityAction(android.view.View, int, android.os.Bundle);
  public void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo);
  public void onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public void sendAccessibilityEvent(android.view.View, int);
  public void sendAccessibilityEventUnchecked(android.view.View, android.view.accessibility.AccessibilityEvent);
  public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View);
}
public class android.view.View$BaseSavedState
  extends android.view.AbsSavedState
{
  public void <init>(android.os.Parcel);
  public void <init>(android.os.Parcel, java.lang.ClassLoader);
  public void <init>(android.os.Parcelable);
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.View$DragShadowBuilder
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.view.View);
  public final android.view.View getView();
  public void onDrawShadow(android.graphics.Canvas);
  public void onProvideShadowMetrics(android.graphics.Point, android.graphics.Point);
}
public class android.view.View$MeasureSpec
  extends java.lang.Object
{
  public static int getMode(int);
  public static int getSize(int);
  public static int makeMeasureSpec(int, int);
  public static java.lang.String toString(int);
  public void <init>();
  public static final int AT_MOST;
  public static final int EXACTLY;
  public static final int UNSPECIFIED;
}
public interface android.view.View$OnApplyWindowInsetsListener
{
  public abstract android.view.WindowInsets onApplyWindowInsets(android.view.View, android.view.WindowInsets);
}
public interface android.view.View$OnAttachStateChangeListener
{
  public abstract void onViewAttachedToWindow(android.view.View);
  public abstract void onViewDetachedFromWindow(android.view.View);
}
public interface android.view.View$OnClickListener
{
  public abstract void onClick(android.view.View);
}
public interface android.view.View$OnContextClickListener
{
  public abstract boolean onContextClick(android.view.View);
}
public interface android.view.View$OnCreateContextMenuListener
{
  public abstract void onCreateContextMenu(android.view.ContextMenu, android.view.View, android.view.ContextMenu$ContextMenuInfo);
}
public interface android.view.View$OnDragListener
{
  public abstract boolean onDrag(android.view.View, android.view.DragEvent);
}
public interface android.view.View$OnFocusChangeListener
{
  public abstract void onFocusChange(android.view.View, boolean);
}
public interface android.view.View$OnGenericMotionListener
{
  public abstract boolean onGenericMotion(android.view.View, android.view.MotionEvent);
}
public interface android.view.View$OnHoverListener
{
  public abstract boolean onHover(android.view.View, android.view.MotionEvent);
}
public interface android.view.View$OnKeyListener
{
  public abstract boolean onKey(android.view.View, int, android.view.KeyEvent);
}
public interface android.view.View$OnLayoutChangeListener
{
  public abstract void onLayoutChange(android.view.View, int, int, int, int, int, int, int, int);
}
public interface android.view.View$OnLongClickListener
{
  public abstract boolean onLongClick(android.view.View);
}
public interface android.view.View$OnScrollChangeListener
{
  public abstract void onScrollChange(android.view.View, int, int, int, int);
}
public interface android.view.View$OnSystemUiVisibilityChangeListener
{
  public abstract void onSystemUiVisibilityChange(int);
}
public interface android.view.View$OnTouchListener
{
  public abstract boolean onTouch(android.view.View, android.view.MotionEvent);
}
public final class android.view.ViewAnimationUtils
  extends java.lang.Object
{
  public static android.animation.Animator createCircularReveal(android.view.View, int, int, float, float);
}
public class android.view.ViewConfiguration
  extends java.lang.Object
{
  public static float getScrollFriction();
  public static int getDoubleTapTimeout();
  public static int getEdgeSlop();
  public static int getFadingEdgeLength();
  public static int getJumpTapTimeout();
  public static int getKeyRepeatDelay();
  public static int getKeyRepeatTimeout();
  public static int getLongPressTimeout();
  public static int getMaximumDrawingCacheSize();
  public static int getMaximumFlingVelocity();
  public static int getMinimumFlingVelocity();
  public static int getPressedStateDuration();
  public static int getScrollBarFadeDuration();
  public static int getScrollBarSize();
  public static int getScrollDefaultDelay();
  public static int getTapTimeout();
  public static int getTouchSlop();
  public static int getWindowTouchSlop();
  public static long getDefaultActionModeHideDuration();
  public static long getGlobalActionKeyTimeout();
  public static long getZoomControlsTimeout();
  public static android.view.ViewConfiguration get(android.content.Context);
  public void <init>();
  public boolean hasPermanentMenuKey();
  public int getScaledDoubleTapSlop();
  public int getScaledEdgeSlop();
  public int getScaledFadingEdgeLength();
  public int getScaledMaximumDrawingCacheSize();
  public int getScaledMaximumFlingVelocity();
  public int getScaledMinimumFlingVelocity();
  public int getScaledOverflingDistance();
  public int getScaledOverscrollDistance();
  public int getScaledPagingTouchSlop();
  public int getScaledScrollBarSize();
  public int getScaledTouchSlop();
  public int getScaledWindowTouchSlop();
}
public class android.view.ViewDebug
  extends java.lang.Object
{
  public static void dumpCapturedView(java.lang.String, java.lang.Object);
  public static void startHierarchyTracing(java.lang.String, android.view.View);
  public static void startRecyclerTracing(java.lang.String, android.view.View);
  public static void stopHierarchyTracing();
  public static void stopRecyclerTracing();
  public static void trace(android.view.View, android.view.ViewDebug$HierarchyTraceType);
  public static void trace(android.view.View, android.view.ViewDebug$RecyclerTraceType, int[]);
  public void <init>();
  public static final boolean TRACE_HIERARCHY;
  public static final boolean TRACE_RECYCLER;
}
public interface android.view.ViewDebug$CapturedViewProperty
  extends java.lang.annotation.Annotation
{
  public abstract boolean retrieveReturn();
}
public interface android.view.ViewDebug$ExportedProperty
  extends java.lang.annotation.Annotation
{
  public abstract boolean deepExport();
  public abstract boolean formatToHexString();
  public abstract boolean hasAdjacentMapping();
  public abstract boolean resolveId();
  public abstract android.view.ViewDebug$FlagToString[] flagMapping();
  public abstract android.view.ViewDebug$IntToString[] indexMapping();
  public abstract android.view.ViewDebug$IntToString[] mapping();
  public abstract java.lang.String category();
  public abstract java.lang.String prefix();
}
public interface android.view.ViewDebug$FlagToString
  extends java.lang.annotation.Annotation
{
  public abstract boolean outputIf();
  public abstract int equals();
  public abstract int mask();
  public abstract java.lang.String name();
}
public final class android.view.ViewDebug$HierarchyTraceType
  extends java.lang.Enum
{
  public static android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String);
  public static android.view.ViewDebug$HierarchyTraceType[] values();
  public static final android.view.ViewDebug$HierarchyTraceType BUILD_CACHE;
  public static final android.view.ViewDebug$HierarchyTraceType DRAW;
  public static final android.view.ViewDebug$HierarchyTraceType INVALIDATE;
  public static final android.view.ViewDebug$HierarchyTraceType INVALIDATE_CHILD;
  public static final android.view.ViewDebug$HierarchyTraceType INVALIDATE_CHILD_IN_PARENT;
  public static final android.view.ViewDebug$HierarchyTraceType ON_LAYOUT;
  public static final android.view.ViewDebug$HierarchyTraceType ON_MEASURE;
  public static final android.view.ViewDebug$HierarchyTraceType REQUEST_LAYOUT;
}
public interface android.view.ViewDebug$IntToString
  extends java.lang.annotation.Annotation
{
  public abstract int from();
  public abstract java.lang.String to();
}
public final class android.view.ViewDebug$RecyclerTraceType
  extends java.lang.Enum
{
  public static android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String);
  public static android.view.ViewDebug$RecyclerTraceType[] values();
  public static final android.view.ViewDebug$RecyclerTraceType BIND_VIEW;
  public static final android.view.ViewDebug$RecyclerTraceType MOVE_FROM_ACTIVE_TO_SCRAP_HEAP;
  public static final android.view.ViewDebug$RecyclerTraceType MOVE_TO_SCRAP_HEAP;
  public static final android.view.ViewDebug$RecyclerTraceType NEW_VIEW;
  public static final android.view.ViewDebug$RecyclerTraceType RECYCLE_FROM_ACTIVE_HEAP;
  public static final android.view.ViewDebug$RecyclerTraceType RECYCLE_FROM_SCRAP_HEAP;
}
public abstract class android.view.ViewGroup
  extends android.view.View
  implements android.view.ViewParent, android.view.ViewManager
{
  public static int getChildMeasureSpec(int, int, int);
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final void invalidateChild(android.view.View, android.graphics.Rect);
  public final void layout(int, int, int, int);
  public final void offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect);
  public final void offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect);
  public boolean addStatesFromChildren();
  public boolean dispatchDragEvent(android.view.DragEvent);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchKeyEventPreIme(android.view.KeyEvent);
  public boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean dispatchUnhandledMove(android.view.View, int);
  public boolean gatherTransparentRegion(android.graphics.Region);
  public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point);
  public boolean getClipChildren();
  public boolean getClipToPadding();
  public boolean getTouchscreenBlocksFocus();
  public boolean hasFocus();
  public boolean hasFocusable();
  public boolean hasTransientState();
  public boolean isAlwaysDrawnWithCacheEnabled();
  public boolean isAnimationCacheEnabled();
  public boolean isMotionEventSplittingEnabled();
  public boolean isTransitionGroup();
  public boolean onInterceptHoverEvent(android.view.MotionEvent);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onNestedFling(android.view.View, float, float, boolean);
  public boolean onNestedPreFling(android.view.View, float, float);
  public boolean onNestedPrePerformAccessibilityAction(android.view.View, int, android.os.Bundle);
  public boolean onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean onStartNestedScroll(android.view.View, android.view.View, int);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public boolean requestFocus(int, android.graphics.Rect);
  public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public boolean shouldDelayChildPressedState();
  public boolean showContextMenuForChild(android.view.View);
  public boolean showContextMenuForChild(android.view.View, float, float);
  public int getChildCount();
  public int getDescendantFocusability();
  public int getLayoutMode();
  public int getNestedScrollAxes();
  public int getPersistentDrawingCache();
  public int indexOfChild(android.view.View);
  public void addChildrenForAccessibility(java.util.ArrayList);
  public void addFocusables(java.util.ArrayList, int, int);
  public void addTouchables(java.util.ArrayList);
  public void addView(android.view.View);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int, int);
  public void bringChildToFront(android.view.View);
  public void childDrawableStateChanged(android.view.View);
  public void childHasTransientStateChanged(android.view.View, boolean);
  public void clearChildFocus(android.view.View);
  public void clearDisappearingChildren();
  public void clearFocus();
  public void dispatchConfigurationChanged(android.content.res.Configuration);
  public void dispatchDisplayHint(int);
  public void dispatchDrawableHotspotChanged(float, float);
  public void dispatchProvideStructure(android.view.ViewStructure);
  public void dispatchSetActivated(boolean);
  public void dispatchSetSelected(boolean);
  public void dispatchSystemUiVisibilityChanged(int);
  public void dispatchWindowFocusChanged(boolean);
  public void dispatchWindowSystemUiVisiblityChanged(int);
  public void dispatchWindowVisibilityChanged(int);
  public void endViewTransition(android.view.View);
  public void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int);
  public void focusableViewAvailable(android.view.View);
  public void jumpDrawablesToCurrentState();
  public void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int);
  public void onNestedPreScroll(android.view.View, int, int, int[]);
  public void onNestedScroll(android.view.View, int, int, int, int);
  public void onNestedScrollAccepted(android.view.View, android.view.View, int);
  public void onStopNestedScroll(android.view.View);
  public void onViewAdded(android.view.View);
  public void onViewRemoved(android.view.View);
  public void recomputeViewAttributes(android.view.View);
  public void removeAllViews();
  public void removeAllViewsInLayout();
  public void removeView(android.view.View);
  public void removeViewAt(int);
  public void removeViewInLayout(android.view.View);
  public void removeViews(int, int);
  public void removeViewsInLayout(int, int);
  public void requestChildFocus(android.view.View, android.view.View);
  public void requestDisallowInterceptTouchEvent(boolean);
  public void requestTransparentRegion(android.view.View);
  public void scheduleLayoutAnimation();
  public void setAddStatesFromChildren(boolean);
  public void setAlwaysDrawnWithCacheEnabled(boolean);
  public void setAnimationCacheEnabled(boolean);
  public void setClipChildren(boolean);
  public void setClipToPadding(boolean);
  public void setDescendantFocusability(int);
  public void setLayoutAnimation(android.view.animation.LayoutAnimationController);
  public void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener);
  public void setLayoutMode(int);
  public void setLayoutTransition(android.animation.LayoutTransition);
  public void setMotionEventSplittingEnabled(boolean);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public void setPersistentDrawingCache(int);
  public void setTouchscreenBlocksFocus(boolean);
  public void setTransitionGroup(boolean);
  public void startLayoutAnimation();
  public void startViewTransition(android.view.View);
  public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams);
  public android.animation.LayoutTransition getLayoutTransition();
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback, int);
  public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int);
  public android.view.View findFocus();
  public android.view.View focusSearch(android.view.View, int);
  public android.view.View getChildAt(int);
  public android.view.View getFocusedChild();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.ViewGroupOverlay getOverlay();
  public android.view.ViewOverlay getOverlay();
  public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect);
  public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets);
  public android.view.animation.Animation$AnimationListener getLayoutAnimationListener();
  public android.view.animation.LayoutAnimationController getLayoutAnimation();
  public java.lang.CharSequence getAccessibilityClassName();
  protected abstract void onLayout(boolean, int, int, int, int);
  protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams);
  protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams, boolean);
  protected boolean canAnimate();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent);
  protected boolean dispatchGenericPointerEvent(android.view.MotionEvent);
  protected boolean dispatchHoverEvent(android.view.MotionEvent);
  protected boolean drawChild(android.graphics.Canvas, android.view.View, long);
  protected boolean getChildStaticTransformation(android.view.View, android.view.animation.Transformation);
  protected boolean isChildrenDrawingOrderEnabled();
  protected boolean isChildrenDrawnWithCacheEnabled();
  protected boolean onRequestFocusInDescendants(int, android.graphics.Rect);
  protected int getChildDrawingOrder(int, int);
  protected void attachLayoutAnimationParameters(android.view.View, android.view.ViewGroup$LayoutParams, int, int);
  protected void attachViewToParent(android.view.View, int, android.view.ViewGroup$LayoutParams);
  protected void cleanupLayoutState(android.view.View);
  protected void debug(int);
  protected void detachAllViewsFromParent();
  protected void detachViewFromParent(android.view.View);
  protected void detachViewFromParent(int);
  protected void detachViewsFromParent(int, int);
  protected void dispatchDraw(android.graphics.Canvas);
  protected void dispatchFreezeSelfOnly(android.util.SparseArray);
  protected void dispatchRestoreInstanceState(android.util.SparseArray);
  protected void dispatchSaveInstanceState(android.util.SparseArray);
  protected void dispatchSetPressed(boolean);
  protected void dispatchThawSelfOnly(android.util.SparseArray);
  protected void dispatchVisibilityChanged(android.view.View, int);
  protected void drawableStateChanged();
  protected void measureChild(android.view.View, int, int);
  protected void measureChildWithMargins(android.view.View, int, int, int, int);
  protected void measureChildren(int, int);
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void removeDetachedView(android.view.View, boolean);
  protected void setChildrenDrawingCacheEnabled(boolean);
  protected void setChildrenDrawingOrderEnabled(boolean);
  protected void setChildrenDrawnWithCacheEnabled(boolean);
  protected void setStaticTransformationsEnabled(boolean);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected int[] onCreateDrawableState(int);
  public static final int FOCUS_AFTER_DESCENDANTS;
  public static final int FOCUS_BEFORE_DESCENDANTS;
  public static final int FOCUS_BLOCK_DESCENDANTS;
  public static final int LAYOUT_MODE_CLIP_BOUNDS;
  public static final int LAYOUT_MODE_OPTICAL_BOUNDS;
  public static final int PERSISTENT_ALL_CACHES;
  public static final int PERSISTENT_ANIMATION_CACHE;
  public static final int PERSISTENT_NO_CACHE;
  public static final int PERSISTENT_SCROLLING_CACHE;
  protected static final int CLIP_TO_PADDING_MASK;
}
public class android.view.ViewGroup$LayoutParams
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(int, int);
  public void resolveLayoutDirection(int);
  protected void setBaseAttributes(android.content.res.TypedArray, int, int);
  public static final int FILL_PARENT;
  public static final int MATCH_PARENT;
  public static final int WRAP_CONTENT;
  public int height;
  public int width;
  public android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters;
}
public class android.view.ViewGroup$MarginLayoutParams
  extends android.view.ViewGroup$LayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(int, int);
  public boolean isMarginRelative();
  public int getLayoutDirection();
  public int getMarginEnd();
  public int getMarginStart();
  public void resolveLayoutDirection(int);
  public void setLayoutDirection(int);
  public void setMarginEnd(int);
  public void setMarginStart(int);
  public void setMargins(int, int, int, int);
  public int bottomMargin;
  public int leftMargin;
  public int rightMargin;
  public int topMargin;
}
public interface android.view.ViewGroup$OnHierarchyChangeListener
{
  public abstract void onChildViewAdded(android.view.View, android.view.View);
  public abstract void onChildViewRemoved(android.view.View, android.view.View);
}
public class android.view.ViewGroupOverlay
  extends android.view.ViewOverlay
{
  public void add(android.view.View);
  public void remove(android.view.View);
}
public interface android.view.ViewManager
{
  public abstract void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public abstract void removeView(android.view.View);
  public abstract void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams);
}
public abstract class android.view.ViewOutlineProvider
  extends java.lang.Object
{
  public void <init>();
  public abstract void getOutline(android.view.View, android.graphics.Outline);
  public static final android.view.ViewOutlineProvider BACKGROUND;
  public static final android.view.ViewOutlineProvider BOUNDS;
  public static final android.view.ViewOutlineProvider PADDED_BOUNDS;
}
public class android.view.ViewOverlay
  extends java.lang.Object
{
  public void add(android.graphics.drawable.Drawable);
  public void clear();
  public void remove(android.graphics.drawable.Drawable);
}
public interface android.view.ViewParent
{
  public abstract boolean canResolveLayoutDirection();
  public abstract boolean canResolveTextAlignment();
  public abstract boolean canResolveTextDirection();
  public abstract boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point);
  public abstract boolean isLayoutDirectionResolved();
  public abstract boolean isLayoutRequested();
  public abstract boolean isTextAlignmentResolved();
  public abstract boolean isTextDirectionResolved();
  public abstract boolean onNestedFling(android.view.View, float, float, boolean);
  public abstract boolean onNestedPreFling(android.view.View, float, float);
  public abstract boolean onNestedPrePerformAccessibilityAction(android.view.View, int, android.os.Bundle);
  public abstract boolean onStartNestedScroll(android.view.View, android.view.View, int);
  public abstract boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public abstract boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
  public abstract boolean showContextMenuForChild(android.view.View);
  public abstract boolean showContextMenuForChild(android.view.View, float, float);
  public abstract int getLayoutDirection();
  public abstract int getTextAlignment();
  public abstract int getTextDirection();
  public abstract void bringChildToFront(android.view.View);
  public abstract void childDrawableStateChanged(android.view.View);
  public abstract void childHasTransientStateChanged(android.view.View, boolean);
  public abstract void clearChildFocus(android.view.View);
  public abstract void createContextMenu(android.view.ContextMenu);
  public abstract void focusableViewAvailable(android.view.View);
  public abstract void invalidateChild(android.view.View, android.graphics.Rect);
  public abstract void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int);
  public abstract void onNestedPreScroll(android.view.View, int, int, int[]);
  public abstract void onNestedScroll(android.view.View, int, int, int, int);
  public abstract void onNestedScrollAccepted(android.view.View, android.view.View, int);
  public abstract void onStopNestedScroll(android.view.View);
  public abstract void recomputeViewAttributes(android.view.View);
  public abstract void requestChildFocus(android.view.View, android.view.View);
  public abstract void requestDisallowInterceptTouchEvent(boolean);
  public abstract void requestFitSystemWindows();
  public abstract void requestLayout();
  public abstract void requestTransparentRegion(android.view.View);
  public abstract android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback);
  public abstract android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback, int);
  public abstract android.view.View focusSearch(android.view.View, int);
  public abstract android.view.ViewParent getParent();
  public abstract android.view.ViewParent getParentForAccessibility();
  public abstract android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect);
}
public class android.view.ViewPropertyAnimator
  extends java.lang.Object
{
  public long getDuration();
  public long getStartDelay();
  public void cancel();
  public void start();
  public android.animation.TimeInterpolator getInterpolator();
  public android.view.ViewPropertyAnimator alpha(float);
  public android.view.ViewPropertyAnimator alphaBy(float);
  public android.view.ViewPropertyAnimator rotation(float);
  public android.view.ViewPropertyAnimator rotationBy(float);
  public android.view.ViewPropertyAnimator rotationX(float);
  public android.view.ViewPropertyAnimator rotationXBy(float);
  public android.view.ViewPropertyAnimator rotationY(float);
  public android.view.ViewPropertyAnimator rotationYBy(float);
  public android.view.ViewPropertyAnimator scaleX(float);
  public android.view.ViewPropertyAnimator scaleXBy(float);
  public android.view.ViewPropertyAnimator scaleY(float);
  public android.view.ViewPropertyAnimator scaleYBy(float);
  public android.view.ViewPropertyAnimator setDuration(long);
  public android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator);
  public android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener);
  public android.view.ViewPropertyAnimator setStartDelay(long);
  public android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener);
  public android.view.ViewPropertyAnimator translationX(float);
  public android.view.ViewPropertyAnimator translationXBy(float);
  public android.view.ViewPropertyAnimator translationY(float);
  public android.view.ViewPropertyAnimator translationYBy(float);
  public android.view.ViewPropertyAnimator translationZ(float);
  public android.view.ViewPropertyAnimator translationZBy(float);
  public android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable);
  public android.view.ViewPropertyAnimator withLayer();
  public android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable);
  public android.view.ViewPropertyAnimator x(float);
  public android.view.ViewPropertyAnimator xBy(float);
  public android.view.ViewPropertyAnimator y(float);
  public android.view.ViewPropertyAnimator yBy(float);
  public android.view.ViewPropertyAnimator z(float);
  public android.view.ViewPropertyAnimator zBy(float);
}
public abstract class android.view.ViewStructure
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean hasExtras();
  public abstract int addChildCount(int);
  public abstract int getChildCount();
  public abstract int getTextSelectionEnd();
  public abstract int getTextSelectionStart();
  public abstract void asyncCommit();
  public abstract void setAccessibilityFocused(boolean);
  public abstract void setActivated(boolean);
  public abstract void setAlpha(float);
  public abstract void setCheckable(boolean);
  public abstract void setChecked(boolean);
  public abstract void setChildCount(int);
  public abstract void setClassName(java.lang.String);
  public abstract void setClickable(boolean);
  public abstract void setContentDescription(java.lang.CharSequence);
  public abstract void setContextClickable(boolean);
  public abstract void setDimens(int, int, int, int, int, int);
  public abstract void setElevation(float);
  public abstract void setEnabled(boolean);
  public abstract void setFocusable(boolean);
  public abstract void setFocused(boolean);
  public abstract void setHint(java.lang.CharSequence);
  public abstract void setId(int, java.lang.String, java.lang.String, java.lang.String);
  public abstract void setLongClickable(boolean);
  public abstract void setSelected(boolean);
  public abstract void setText(java.lang.CharSequence);
  public abstract void setText(java.lang.CharSequence, int, int);
  public abstract void setTextLines(int[], int[]);
  public abstract void setTextStyle(float, int, int, int);
  public abstract void setTransformation(android.graphics.Matrix);
  public abstract void setVisibility(int);
  public abstract android.os.Bundle getExtras();
  public abstract android.view.ViewStructure asyncNewChild(int);
  public abstract android.view.ViewStructure newChild(int);
  public abstract java.lang.CharSequence getHint();
  public abstract java.lang.CharSequence getText();
}
public final class android.view.ViewStub
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void <init>(android.content.Context, int);
  public int getInflatedId();
  public int getLayoutResource();
  public void draw(android.graphics.Canvas);
  public void setInflatedId(int);
  public void setLayoutInflater(android.view.LayoutInflater);
  public void setLayoutResource(int);
  public void setOnInflateListener(android.view.ViewStub$OnInflateListener);
  public void setVisibility(int);
  public android.view.LayoutInflater getLayoutInflater();
  public android.view.View inflate();
  protected void dispatchDraw(android.graphics.Canvas);
  protected void onMeasure(int, int);
}
public interface android.view.ViewStub$OnInflateListener
{
  public abstract void onInflate(android.view.ViewStub, android.view.View);
}
public final class android.view.ViewTreeObserver
  extends java.lang.Object
{
  public final boolean dispatchOnPreDraw();
  public final void dispatchOnDraw();
  public final void dispatchOnGlobalLayout();
  public boolean isAlive();
  public void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener);
  public void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener);
  public void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener);
  public void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener);
  public void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener);
  public void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener);
  public void addOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener);
  public void addOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener);
  public void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener);
  public void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener);
  public void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener);
  public void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener);
  public void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener);
  public void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener);
  public void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener);
  public void removeOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener);
  public void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener);
}
public interface android.view.ViewTreeObserver$OnDrawListener
{
  public abstract void onDraw();
}
public interface android.view.ViewTreeObserver$OnGlobalFocusChangeListener
{
  public abstract void onGlobalFocusChanged(android.view.View, android.view.View);
}
public interface android.view.ViewTreeObserver$OnGlobalLayoutListener
{
  public abstract void onGlobalLayout();
}
public interface android.view.ViewTreeObserver$OnPreDrawListener
{
  public abstract boolean onPreDraw();
}
public interface android.view.ViewTreeObserver$OnScrollChangedListener
{
  public abstract void onScrollChanged();
}
public interface android.view.ViewTreeObserver$OnTouchModeChangeListener
{
  public abstract void onTouchModeChanged(boolean);
}
public interface android.view.ViewTreeObserver$OnWindowAttachListener
{
  public abstract void onWindowAttached();
  public abstract void onWindowDetached();
}
public interface android.view.ViewTreeObserver$OnWindowFocusChangeListener
{
  public abstract void onWindowFocusChanged(boolean);
}
public abstract class android.view.Window
  extends java.lang.Object
{
  public static int getDefaultFeatures(android.content.Context);
  public void <init>(android.content.Context);
  public final boolean hasChildren();
  public final boolean isActive();
  public final void addOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener, android.os.Handler);
  public final void makeActive();
  public final void removeOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener);
  public final void setRestrictedCaptionAreaListener(android.view.Window$OnRestrictedCaptionAreaChangedListener);
  public final android.content.Context getContext();
  public final android.content.res.TypedArray getWindowStyle();
  public final android.view.Window getContainer();
  public final android.view.Window$Callback getCallback();
  public final android.view.WindowManager$LayoutParams getAttributes();
  public abstract boolean isFloating();
  public abstract boolean isShortcutKey(int, android.view.KeyEvent);
  public abstract boolean performContextMenuIdentifierAction(int, int);
  public abstract boolean performPanelIdentifierAction(int, int, int);
  public abstract boolean performPanelShortcut(int, int, android.view.KeyEvent, int);
  public abstract boolean superDispatchGenericMotionEvent(android.view.MotionEvent);
  public abstract boolean superDispatchKeyEvent(android.view.KeyEvent);
  public abstract boolean superDispatchKeyShortcutEvent(android.view.KeyEvent);
  public abstract boolean superDispatchTouchEvent(android.view.MotionEvent);
  public abstract boolean superDispatchTrackballEvent(android.view.MotionEvent);
  public abstract int getNavigationBarColor();
  public abstract int getStatusBarColor();
  public abstract int getVolumeControlStream();
  public abstract void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public abstract void closeAllPanels();
  public abstract void closePanel(int);
  public abstract void invalidatePanelMenu(int);
  public abstract void onConfigurationChanged(android.content.res.Configuration);
  public abstract void openPanel(int, android.view.KeyEvent);
  public abstract void restoreHierarchyState(android.os.Bundle);
  public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public abstract void setChildDrawable(int, android.graphics.drawable.Drawable);
  public abstract void setChildInt(int, int);
  public abstract void setContentView(android.view.View);
  public abstract void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);
  public abstract void setContentView(int);
  public abstract void setDecorCaptionShade(int);
  public abstract void setFeatureDrawable(int, android.graphics.drawable.Drawable);
  public abstract void setFeatureDrawableAlpha(int, int);
  public abstract void setFeatureDrawableResource(int, int);
  public abstract void setFeatureDrawableUri(int, android.net.Uri);
  public abstract void setFeatureInt(int, int);
  public abstract void setNavigationBarColor(int);
  public abstract void setResizingCaptionDrawable(android.graphics.drawable.Drawable);
  public abstract void setStatusBarColor(int);
  public abstract void setTitle(java.lang.CharSequence);
  public abstract void setTitleColor(int);
  public abstract void setVolumeControlStream(int);
  public abstract void takeInputQueue(android.view.InputQueue$Callback);
  public abstract void takeKeyEvents(boolean);
  public abstract void takeSurface(android.view.SurfaceHolder$Callback2);
  public abstract void togglePanel(int, android.view.KeyEvent);
  public abstract android.os.Bundle saveHierarchyState();
  public abstract android.view.LayoutInflater getLayoutInflater();
  public abstract android.view.View getCurrentFocus();
  public abstract android.view.View getDecorView();
  public abstract android.view.View peekDecorView();
  public boolean getAllowEnterTransitionOverlap();
  public boolean getAllowReturnTransitionOverlap();
  public boolean getSharedElementsUseOverlay();
  public boolean hasFeature(int);
  public boolean requestFeature(int);
  public long getTransitionBackgroundFadeDuration();
  public void addFlags(int);
  public void clearFlags(int);
  public void injectInputEvent(android.view.InputEvent);
  public void setAllowEnterTransitionOverlap(boolean);
  public void setAllowReturnTransitionOverlap(boolean);
  public void setAttributes(android.view.WindowManager$LayoutParams);
  public void setBackgroundDrawableResource(int);
  public void setCallback(android.view.Window$Callback);
  public void setClipToOutline(boolean);
  public void setContainer(android.view.Window);
  public void setDimAmount(float);
  public void setElevation(float);
  public void setEnterTransition(android.transition.Transition);
  public void setExitTransition(android.transition.Transition);
  public void setFlags(int, int);
  public void setFormat(int);
  public void setGravity(int);
  public void setIcon(int);
  public void setLayout(int, int);
  public void setLocalFocus(boolean, boolean);
  public void setLogo(int);
  public void setMediaController(android.media.session.MediaController);
  public void setReenterTransition(android.transition.Transition);
  public void setReturnTransition(android.transition.Transition);
  public void setSharedElementEnterTransition(android.transition.Transition);
  public void setSharedElementExitTransition(android.transition.Transition);
  public void setSharedElementReenterTransition(android.transition.Transition);
  public void setSharedElementReturnTransition(android.transition.Transition);
  public void setSharedElementsUseOverlay(boolean);
  public void setSoftInputMode(int);
  public void setSustainedPerformanceMode(boolean);
  public void setTransitionBackgroundFadeDuration(long);
  public void setTransitionManager(android.transition.TransitionManager);
  public void setType(int);
  public void setUiOptions(int);
  public void setUiOptions(int, int);
  public void setWindowAnimations(int);
  public void setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String);
  public void setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String, boolean);
  public android.media.session.MediaController getMediaController();
  public android.transition.Scene getContentScene();
  public android.transition.Transition getEnterTransition();
  public android.transition.Transition getExitTransition();
  public android.transition.Transition getReenterTransition();
  public android.transition.Transition getReturnTransition();
  public android.transition.Transition getSharedElementEnterTransition();
  public android.transition.Transition getSharedElementExitTransition();
  public android.transition.Transition getSharedElementReenterTransition();
  public android.transition.Transition getSharedElementReturnTransition();
  public android.transition.TransitionManager getTransitionManager();
  public android.view.View findViewById(int);
  public android.view.WindowManager getWindowManager();
  protected final boolean hasSoftInputMode();
  protected final int getFeatures();
  protected final int getForcedWindowFlags();
  protected final int getLocalFeatures();
  protected abstract void onActive();
  protected void setDefaultWindowFormat(int);
  public static final int DECOR_CAPTION_SHADE_AUTO;
  public static final int DECOR_CAPTION_SHADE_DARK;
  public static final int DECOR_CAPTION_SHADE_LIGHT;
  public static final int FEATURE_ACTION_BAR;
  public static final int FEATURE_ACTION_BAR_OVERLAY;
  public static final int FEATURE_ACTION_MODE_OVERLAY;
  public static final int FEATURE_ACTIVITY_TRANSITIONS;
  public static final int FEATURE_CONTENT_TRANSITIONS;
  public static final int FEATURE_CONTEXT_MENU;
  public static final int FEATURE_CUSTOM_TITLE;
  public static final int FEATURE_INDETERMINATE_PROGRESS;
  public static final int FEATURE_LEFT_ICON;
  public static final int FEATURE_NO_TITLE;
  public static final int FEATURE_OPTIONS_PANEL;
  public static final int FEATURE_PROGRESS;
  public static final int FEATURE_RIGHT_ICON;
  public static final int FEATURE_SWIPE_TO_DISMISS;
  public static final int ID_ANDROID_CONTENT;
  public static final int PROGRESS_END;
  public static final int PROGRESS_INDETERMINATE_OFF;
  public static final int PROGRESS_INDETERMINATE_ON;
  public static final int PROGRESS_SECONDARY_END;
  public static final int PROGRESS_SECONDARY_START;
  public static final int PROGRESS_START;
  public static final int PROGRESS_VISIBILITY_OFF;
  public static final int PROGRESS_VISIBILITY_ON;
  public static final java.lang.String NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME;
  public static final java.lang.String STATUS_BAR_BACKGROUND_TRANSITION_NAME;
  protected static final int DEFAULT_FEATURES;
}
public interface android.view.Window$Callback
{
  public abstract boolean dispatchGenericMotionEvent(android.view.MotionEvent);
  public abstract boolean dispatchKeyEvent(android.view.KeyEvent);
  public abstract boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
  public abstract boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public abstract boolean dispatchTouchEvent(android.view.MotionEvent);
  public abstract boolean dispatchTrackballEvent(android.view.MotionEvent);
  public abstract boolean onCreatePanelMenu(int, android.view.Menu);
  public abstract boolean onMenuItemSelected(int, android.view.MenuItem);
  public abstract boolean onMenuOpened(int, android.view.Menu);
  public abstract boolean onPreparePanel(int, android.view.View, android.view.Menu);
  public abstract boolean onSearchRequested();
  public abstract boolean onSearchRequested(android.view.SearchEvent);
  public abstract void onActionModeFinished(android.view.ActionMode);
  public abstract void onActionModeStarted(android.view.ActionMode);
  public abstract void onAttachedToWindow();
  public abstract void onContentChanged();
  public abstract void onDetachedFromWindow();
  public abstract void onPanelClosed(int, android.view.Menu);
  public abstract void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
  public abstract void onWindowFocusChanged(boolean);
  public abstract android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
  public abstract android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback, int);
  public abstract android.view.View onCreatePanelView(int);
  public void onProvideKeyboardShortcuts(java.util.List, android.view.Menu, int);
}
public interface android.view.Window$OnFrameMetricsAvailableListener
{
  public abstract void onFrameMetricsAvailable(android.view.Window, android.view.FrameMetrics, int);
}
public interface android.view.Window$OnRestrictedCaptionAreaChangedListener
{
  public abstract void onRestrictedCaptionAreaChanged(android.graphics.Rect);
}
public final class android.view.WindowAnimationFrameStats
  extends android.view.FrameStats
  implements android.os.Parcelable
{
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.WindowContentFrameStats
  extends android.view.FrameStats
  implements android.os.Parcelable
{
  public int describeContents();
  public long getFramePostedTimeNano(int);
  public long getFrameReadyTimeNano(int);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.WindowId
  extends java.lang.Object
  implements android.os.Parcelable
{
  public boolean equals(java.lang.Object);
  public boolean isFocused();
  public int describeContents();
  public int hashCode();
  public void registerFocusObserver(android.view.WindowId$FocusObserver);
  public void unregisterFocusObserver(android.view.WindowId$FocusObserver);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public abstract class android.view.WindowId$FocusObserver
  extends java.lang.Object
{
  public void <init>();
  public abstract void onFocusGained(android.view.WindowId);
  public abstract void onFocusLost(android.view.WindowId);
}
public final class android.view.WindowInsets
  extends java.lang.Object
{
  public void <init>(android.view.WindowInsets);
  public boolean hasInsets();
  public boolean hasStableInsets();
  public boolean hasSystemWindowInsets();
  public boolean isConsumed();
  public boolean isRound();
  public int getStableInsetBottom();
  public int getStableInsetLeft();
  public int getStableInsetRight();
  public int getStableInsetTop();
  public int getSystemWindowInsetBottom();
  public int getSystemWindowInsetLeft();
  public int getSystemWindowInsetRight();
  public int getSystemWindowInsetTop();
  public android.view.WindowInsets consumeStableInsets();
  public android.view.WindowInsets consumeSystemWindowInsets();
  public android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect);
  public android.view.WindowInsets replaceSystemWindowInsets(int, int, int, int);
  public java.lang.String toString();
}
public interface android.view.WindowManager
  extends android.view.ViewManager
{
  public abstract void removeViewImmediate(android.view.View);
  public abstract android.view.Display getDefaultDisplay();
}
public class android.view.WindowManager$BadTokenException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.view.WindowManager$InvalidDisplayException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class android.view.WindowManager$LayoutParams
  extends android.view.ViewGroup$LayoutParams
  implements android.os.Parcelable
{
  public static boolean mayUseInputMethod(int);
  public void <init>();
  public void <init>(android.os.Parcel);
  public void <init>(int);
  public void <init>(int, int);
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int);
  public void <init>(int, int, int, int, int, int, int);
  public final int copyFrom(android.view.WindowManager$LayoutParams);
  public final void setTitle(java.lang.CharSequence);
  public final java.lang.CharSequence getTitle();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String debug(java.lang.String);
  public java.lang.String toString();
  public static final float BRIGHTNESS_OVERRIDE_FULL;
  public static final float BRIGHTNESS_OVERRIDE_NONE;
  public static final float BRIGHTNESS_OVERRIDE_OFF;
  public static final int ALPHA_CHANGED;
  public static final int ANIMATION_CHANGED;
  public static final int DIM_AMOUNT_CHANGED;
  public static final int FIRST_APPLICATION_WINDOW;
  public static final int FIRST_SUB_WINDOW;
  public static final int FIRST_SYSTEM_WINDOW;
  public static final int FLAGS_CHANGED;
  public static final int FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
  public static final int FLAG_ALT_FOCUSABLE_IM;
  public static final int FLAG_BLUR_BEHIND;
  public static final int FLAG_DIM_BEHIND;
  public static final int FLAG_DISMISS_KEYGUARD;
  public static final int FLAG_DITHER;
  public static final int FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS;
  public static final int FLAG_FORCE_NOT_FULLSCREEN;
  public static final int FLAG_FULLSCREEN;
  public static final int FLAG_HARDWARE_ACCELERATED;
  public static final int FLAG_IGNORE_CHEEK_PRESSES;
  public static final int FLAG_KEEP_SCREEN_ON;
  public static final int FLAG_LAYOUT_ATTACHED_IN_DECOR;
  public static final int FLAG_LAYOUT_INSET_DECOR;
  public static final int FLAG_LAYOUT_IN_OVERSCAN;
  public static final int FLAG_LAYOUT_IN_SCREEN;
  public static final int FLAG_LAYOUT_NO_LIMITS;
  public static final int FLAG_LOCAL_FOCUS_MODE;
  public static final int FLAG_NOT_FOCUSABLE;
  public static final int FLAG_NOT_TOUCHABLE;
  public static final int FLAG_NOT_TOUCH_MODAL;
  public static final int FLAG_SCALED;
  public static final int FLAG_SECURE;
  public static final int FLAG_SHOW_WALLPAPER;
  public static final int FLAG_SHOW_WHEN_LOCKED;
  public static final int FLAG_SPLIT_TOUCH;
  public static final int FLAG_TOUCHABLE_WHEN_WAKING;
  public static final int FLAG_TRANSLUCENT_NAVIGATION;
  public static final int FLAG_TRANSLUCENT_STATUS;
  public static final int FLAG_TURN_SCREEN_ON;
  public static final int FLAG_WATCH_OUTSIDE_TOUCH;
  public static final int FORMAT_CHANGED;
  public static final int LAST_APPLICATION_WINDOW;
  public static final int LAST_SUB_WINDOW;
  public static final int LAST_SYSTEM_WINDOW;
  public static final int LAYOUT_CHANGED;
  public static final int MEMORY_TYPE_CHANGED;
  public static final int MEMORY_TYPE_GPU;
  public static final int MEMORY_TYPE_HARDWARE;
  public static final int MEMORY_TYPE_NORMAL;
  public static final int MEMORY_TYPE_PUSH_BUFFERS;
  public static final int ROTATION_ANIMATION_CHANGED;
  public static final int ROTATION_ANIMATION_CROSSFADE;
  public static final int ROTATION_ANIMATION_JUMPCUT;
  public static final int ROTATION_ANIMATION_ROTATE;
  public static final int SCREEN_BRIGHTNESS_CHANGED;
  public static final int SCREEN_ORIENTATION_CHANGED;
  public static final int SOFT_INPUT_ADJUST_NOTHING;
  public static final int SOFT_INPUT_ADJUST_PAN;
  public static final int SOFT_INPUT_ADJUST_RESIZE;
  public static final int SOFT_INPUT_ADJUST_UNSPECIFIED;
  public static final int SOFT_INPUT_IS_FORWARD_NAVIGATION;
  public static final int SOFT_INPUT_MASK_ADJUST;
  public static final int SOFT_INPUT_MASK_STATE;
  public static final int SOFT_INPUT_MODE_CHANGED;
  public static final int SOFT_INPUT_STATE_ALWAYS_HIDDEN;
  public static final int SOFT_INPUT_STATE_ALWAYS_VISIBLE;
  public static final int SOFT_INPUT_STATE_HIDDEN;
  public static final int SOFT_INPUT_STATE_UNCHANGED;
  public static final int SOFT_INPUT_STATE_UNSPECIFIED;
  public static final int SOFT_INPUT_STATE_VISIBLE;
  public static final int TITLE_CHANGED;
  public static final int TYPE_ACCESSIBILITY_OVERLAY;
  public static final int TYPE_APPLICATION;
  public static final int TYPE_APPLICATION_ATTACHED_DIALOG;
  public static final int TYPE_APPLICATION_MEDIA;
  public static final int TYPE_APPLICATION_PANEL;
  public static final int TYPE_APPLICATION_STARTING;
  public static final int TYPE_APPLICATION_SUB_PANEL;
  public static final int TYPE_BASE_APPLICATION;
  public static final int TYPE_CHANGED;
  public static final int TYPE_INPUT_METHOD;
  public static final int TYPE_INPUT_METHOD_DIALOG;
  public static final int TYPE_KEYGUARD_DIALOG;
  public static final int TYPE_PHONE;
  public static final int TYPE_PRIORITY_PHONE;
  public static final int TYPE_PRIVATE_PRESENTATION;
  public static final int TYPE_SEARCH_BAR;
  public static final int TYPE_STATUS_BAR;
  public static final int TYPE_STATUS_BAR_PANEL;
  public static final int TYPE_SYSTEM_ALERT;
  public static final int TYPE_SYSTEM_DIALOG;
  public static final int TYPE_SYSTEM_ERROR;
  public static final int TYPE_SYSTEM_OVERLAY;
  public static final int TYPE_TOAST;
  public static final int TYPE_WALLPAPER;
  public static final android.os.Parcelable$Creator CREATOR;
  public float alpha;
  public float buttonBrightness;
  public float dimAmount;
  public float horizontalMargin;
  public float horizontalWeight;
  public float preferredRefreshRate;
  public float screenBrightness;
  public float verticalMargin;
  public float verticalWeight;
  public int flags;
  public int format;
  public int gravity;
  public int memoryType;
  public int preferredDisplayModeId;
  public int rotationAnimation;
  public int screenOrientation;
  public int softInputMode;
  public int systemUiVisibility;
  public int type;
  public int windowAnimations;
  public int x;
  public int y;
  public android.os.IBinder token;
  public java.lang.String packageName;
}
public final class android.view.accessibility.AccessibilityEvent
  extends android.view.accessibility.AccessibilityRecord
  implements android.os.Parcelable
{
  public static android.view.accessibility.AccessibilityEvent obtain();
  public static android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent);
  public static android.view.accessibility.AccessibilityEvent obtain(int);
  public static java.lang.String eventTypeToString(int);
  public int describeContents();
  public int getAction();
  public int getContentChangeTypes();
  public int getEventType();
  public int getMovementGranularity();
  public int getRecordCount();
  public long getEventTime();
  public void appendRecord(android.view.accessibility.AccessibilityRecord);
  public void initFromParcel(android.os.Parcel);
  public void recycle();
  public void setAction(int);
  public void setContentChangeTypes(int);
  public void setEventTime(long);
  public void setEventType(int);
  public void setMovementGranularity(int);
  public void setPackageName(java.lang.CharSequence);
  public void writeToParcel(android.os.Parcel, int);
  public android.view.accessibility.AccessibilityRecord getRecord(int);
  public java.lang.CharSequence getPackageName();
  public java.lang.String toString();
  public static final int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION;
  public static final int CONTENT_CHANGE_TYPE_SUBTREE;
  public static final int CONTENT_CHANGE_TYPE_TEXT;
  public static final int CONTENT_CHANGE_TYPE_UNDEFINED;
  public static final int INVALID_POSITION;
  public static final int MAX_TEXT_LENGTH;
  public static final int TYPES_ALL_MASK;
  public static final int TYPE_ANNOUNCEMENT;
  public static final int TYPE_ASSIST_READING_CONTEXT;
  public static final int TYPE_GESTURE_DETECTION_END;
  public static final int TYPE_GESTURE_DETECTION_START;
  public static final int TYPE_NOTIFICATION_STATE_CHANGED;
  public static final int TYPE_TOUCH_EXPLORATION_GESTURE_END;
  public static final int TYPE_TOUCH_EXPLORATION_GESTURE_START;
  public static final int TYPE_TOUCH_INTERACTION_END;
  public static final int TYPE_TOUCH_INTERACTION_START;
  public static final int TYPE_VIEW_ACCESSIBILITY_FOCUSED;
  public static final int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED;
  public static final int TYPE_VIEW_CLICKED;
  public static final int TYPE_VIEW_CONTEXT_CLICKED;
  public static final int TYPE_VIEW_FOCUSED;
  public static final int TYPE_VIEW_HOVER_ENTER;
  public static final int TYPE_VIEW_HOVER_EXIT;
  public static final int TYPE_VIEW_LONG_CLICKED;
  public static final int TYPE_VIEW_SCROLLED;
  public static final int TYPE_VIEW_SELECTED;
  public static final int TYPE_VIEW_TEXT_CHANGED;
  public static final int TYPE_VIEW_TEXT_SELECTION_CHANGED;
  public static final int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY;
  public static final int TYPE_WINDOWS_CHANGED;
  public static final int TYPE_WINDOW_CONTENT_CHANGED;
  public static final int TYPE_WINDOW_STATE_CHANGED;
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.view.accessibility.AccessibilityEventSource
{
  public abstract void sendAccessibilityEvent(int);
  public abstract void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent);
}
public final class android.view.accessibility.AccessibilityManager
  extends java.lang.Object
{
  public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener);
  public boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener);
  public boolean isEnabled();
  public boolean isTouchExplorationEnabled();
  public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener);
  public boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener);
  public void interrupt();
  public void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
  public java.util.List getAccessibilityServiceList();
  public java.util.List getEnabledAccessibilityServiceList(int);
  public java.util.List getInstalledAccessibilityServiceList();
}
public interface android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener
{
  public abstract void onAccessibilityStateChanged(boolean);
}
public interface android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener
{
  public abstract void onTouchExplorationStateChanged(boolean);
}
public class android.view.accessibility.AccessibilityNodeInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.view.accessibility.AccessibilityNodeInfo obtain();
  public static android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View);
  public static android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View, int);
  public static android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo);
  public boolean canOpenPopup();
  public boolean equals(java.lang.Object);
  public boolean isAccessibilityFocused();
  public boolean isCheckable();
  public boolean isChecked();
  public boolean isClickable();
  public boolean isContentInvalid();
  public boolean isContextClickable();
  public boolean isDismissable();
  public boolean isEditable();
  public boolean isEnabled();
  public boolean isFocusable();
  public boolean isFocused();
  public boolean isImportantForAccessibility();
  public boolean isLongClickable();
  public boolean isMultiLine();
  public boolean isPassword();
  public boolean isScrollable();
  public boolean isSelected();
  public boolean isVisibleToUser();
  public boolean performAction(int);
  public boolean performAction(int, android.os.Bundle);
  public boolean refresh();
  public boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction);
  public boolean removeChild(android.view.View);
  public boolean removeChild(android.view.View, int);
  public int describeContents();
  public int getActions();
  public int getChildCount();
  public int getDrawingOrder();
  public int getInputType();
  public int getLiveRegion();
  public int getMaxTextLength();
  public int getMovementGranularities();
  public int getTextSelectionEnd();
  public int getTextSelectionStart();
  public int getWindowId();
  public int hashCode();
  public void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction);
  public void addAction(int);
  public void addChild(android.view.View);
  public void addChild(android.view.View, int);
  public void getBoundsInParent(android.graphics.Rect);
  public void getBoundsInScreen(android.graphics.Rect);
  public void recycle();
  public void removeAction(int);
  public void setAccessibilityFocused(boolean);
  public void setBoundsInParent(android.graphics.Rect);
  public void setBoundsInScreen(android.graphics.Rect);
  public void setCanOpenPopup(boolean);
  public void setCheckable(boolean);
  public void setChecked(boolean);
  public void setClassName(java.lang.CharSequence);
  public void setClickable(boolean);
  public void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo);
  public void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo);
  public void setContentDescription(java.lang.CharSequence);
  public void setContentInvalid(boolean);
  public void setContextClickable(boolean);
  public void setDismissable(boolean);
  public void setDrawingOrder(int);
  public void setEditable(boolean);
  public void setEnabled(boolean);
  public void setError(java.lang.CharSequence);
  public void setFocusable(boolean);
  public void setFocused(boolean);
  public void setImportantForAccessibility(boolean);
  public void setInputType(int);
  public void setLabelFor(android.view.View);
  public void setLabelFor(android.view.View, int);
  public void setLabeledBy(android.view.View);
  public void setLabeledBy(android.view.View, int);
  public void setLiveRegion(int);
  public void setLongClickable(boolean);
  public void setMaxTextLength(int);
  public void setMovementGranularities(int);
  public void setMultiLine(boolean);
  public void setPackageName(java.lang.CharSequence);
  public void setParent(android.view.View);
  public void setParent(android.view.View, int);
  public void setPassword(boolean);
  public void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo);
  public void setScrollable(boolean);
  public void setSelected(boolean);
  public void setSource(android.view.View);
  public void setSource(android.view.View, int);
  public void setText(java.lang.CharSequence);
  public void setTextSelection(int, int);
  public void setTraversalAfter(android.view.View);
  public void setTraversalAfter(android.view.View, int);
  public void setTraversalBefore(android.view.View);
  public void setTraversalBefore(android.view.View, int);
  public void setViewIdResourceName(java.lang.String);
  public void setVisibleToUser(boolean);
  public void writeToParcel(android.os.Parcel, int);
  public android.os.Bundle getExtras();
  public android.view.accessibility.AccessibilityNodeInfo findFocus(int);
  public android.view.accessibility.AccessibilityNodeInfo focusSearch(int);
  public android.view.accessibility.AccessibilityNodeInfo getChild(int);
  public android.view.accessibility.AccessibilityNodeInfo getLabelFor();
  public android.view.accessibility.AccessibilityNodeInfo getLabeledBy();
  public android.view.accessibility.AccessibilityNodeInfo getParent();
  public android.view.accessibility.AccessibilityNodeInfo getTraversalAfter();
  public android.view.accessibility.AccessibilityNodeInfo getTraversalBefore();
  public android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo();
  public android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo();
  public android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo();
  public android.view.accessibility.AccessibilityWindowInfo getWindow();
  public java.lang.CharSequence getClassName();
  public java.lang.CharSequence getContentDescription();
  public java.lang.CharSequence getError();
  public java.lang.CharSequence getPackageName();
  public java.lang.CharSequence getText();
  public java.lang.String getViewIdResourceName();
  public java.lang.String toString();
  public java.util.List findAccessibilityNodeInfosByText(java.lang.String);
  public java.util.List findAccessibilityNodeInfosByViewId(java.lang.String);
  public java.util.List getActionList();
  public static final int ACTION_ACCESSIBILITY_FOCUS;
  public static final int ACTION_CLEAR_ACCESSIBILITY_FOCUS;
  public static final int ACTION_CLEAR_FOCUS;
  public static final int ACTION_CLEAR_SELECTION;
  public static final int ACTION_CLICK;
  public static final int ACTION_COLLAPSE;
  public static final int ACTION_COPY;
  public static final int ACTION_CUT;
  public static final int ACTION_DISMISS;
  public static final int ACTION_EXPAND;
  public static final int ACTION_FOCUS;
  public static final int ACTION_LONG_CLICK;
  public static final int ACTION_NEXT_AT_MOVEMENT_GRANULARITY;
  public static final int ACTION_NEXT_HTML_ELEMENT;
  public static final int ACTION_PASTE;
  public static final int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY;
  public static final int ACTION_PREVIOUS_HTML_ELEMENT;
  public static final int ACTION_SCROLL_BACKWARD;
  public static final int ACTION_SCROLL_FORWARD;
  public static final int ACTION_SELECT;
  public static final int ACTION_SET_SELECTION;
  public static final int ACTION_SET_TEXT;
  public static final int FOCUS_ACCESSIBILITY;
  public static final int FOCUS_INPUT;
  public static final int MOVEMENT_GRANULARITY_CHARACTER;
  public static final int MOVEMENT_GRANULARITY_LINE;
  public static final int MOVEMENT_GRANULARITY_PAGE;
  public static final int MOVEMENT_GRANULARITY_PARAGRAPH;
  public static final int MOVEMENT_GRANULARITY_WORD;
  public static final android.os.Parcelable$Creator CREATOR;
  public static final java.lang.String ACTION_ARGUMENT_COLUMN_INT;
  public static final java.lang.String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN;
  public static final java.lang.String ACTION_ARGUMENT_HTML_ELEMENT_STRING;
  public static final java.lang.String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT;
  public static final java.lang.String ACTION_ARGUMENT_PROGRESS_VALUE;
  public static final java.lang.String ACTION_ARGUMENT_ROW_INT;
  public static final java.lang.String ACTION_ARGUMENT_SELECTION_END_INT;
  public static final java.lang.String ACTION_ARGUMENT_SELECTION_START_INT;
  public static final java.lang.String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE;
}
public final class android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction
  extends java.lang.Object
{
  public void <init>(int, java.lang.CharSequence);
  public boolean equals(java.lang.Object);
  public int getId();
  public int hashCode();
  public java.lang.CharSequence getLabel();
  public java.lang.String toString();
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_ACCESSIBILITY_FOCUS;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_ACCESSIBILITY_FOCUS;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_FOCUS;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_SELECTION;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLICK;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_COLLAPSE;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CONTEXT_CLICK;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_COPY;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CUT;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_DISMISS;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_EXPAND;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_FOCUS;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_LONG_CLICK;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_NEXT_AT_MOVEMENT_GRANULARITY;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_NEXT_HTML_ELEMENT;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PASTE;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_PREVIOUS_HTML_ELEMENT;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_BACKWARD;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_DOWN;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_FORWARD;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_LEFT;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_RIGHT;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_TO_POSITION;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_UP;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SELECT;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SET_PROGRESS;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SET_SELECTION;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SET_TEXT;
  public static final android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SHOW_ON_SCREEN;
}
public final class android.view.accessibility.AccessibilityNodeInfo$CollectionInfo
  extends java.lang.Object
{
  public static android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int, int, boolean);
  public static android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int, int, boolean, int);
  public boolean isHierarchical();
  public int getColumnCount();
  public int getRowCount();
  public int getSelectionMode();
  public static final int SELECTION_MODE_MULTIPLE;
  public static final int SELECTION_MODE_NONE;
  public static final int SELECTION_MODE_SINGLE;
}
public final class android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo
  extends java.lang.Object
{
  public static android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int, int, int, int, boolean);
  public static android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int, int, int, int, boolean, boolean);
  public boolean isHeading();
  public boolean isSelected();
  public int getColumnIndex();
  public int getColumnSpan();
  public int getRowIndex();
  public int getRowSpan();
}
public final class android.view.accessibility.AccessibilityNodeInfo$RangeInfo
  extends java.lang.Object
{
  public static android.view.accessibility.AccessibilityNodeInfo$RangeInfo obtain(int, float, float, float);
  public float getCurrent();
  public float getMax();
  public float getMin();
  public int getType();
  public static final int RANGE_TYPE_FLOAT;
  public static final int RANGE_TYPE_INT;
  public static final int RANGE_TYPE_PERCENT;
}
public abstract class android.view.accessibility.AccessibilityNodeProvider
  extends java.lang.Object
{
  public void <init>();
  public boolean performAction(int, int, android.os.Bundle);
  public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int);
  public android.view.accessibility.AccessibilityNodeInfo findFocus(int);
  public java.util.List findAccessibilityNodeInfosByText(java.lang.String, int);
  public static final int HOST_VIEW_ID;
}
public class android.view.accessibility.AccessibilityRecord
  extends java.lang.Object
{
  public static android.view.accessibility.AccessibilityRecord obtain();
  public static android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord);
  public boolean isChecked();
  public boolean isEnabled();
  public boolean isFullScreen();
  public boolean isPassword();
  public boolean isScrollable();
  public int getAddedCount();
  public int getCurrentItemIndex();
  public int getFromIndex();
  public int getItemCount();
  public int getMaxScrollX();
  public int getMaxScrollY();
  public int getRemovedCount();
  public int getScrollX();
  public int getScrollY();
  public int getToIndex();
  public int getWindowId();
  public void recycle();
  public void setAddedCount(int);
  public void setBeforeText(java.lang.CharSequence);
  public void setChecked(boolean);
  public void setClassName(java.lang.CharSequence);
  public void setContentDescription(java.lang.CharSequence);
  public void setCurrentItemIndex(int);
  public void setEnabled(boolean);
  public void setFromIndex(int);
  public void setFullScreen(boolean);
  public void setItemCount(int);
  public void setMaxScrollX(int);
  public void setMaxScrollY(int);
  public void setParcelableData(android.os.Parcelable);
  public void setPassword(boolean);
  public void setRemovedCount(int);
  public void setScrollX(int);
  public void setScrollY(int);
  public void setScrollable(boolean);
  public void setSource(android.view.View);
  public void setSource(android.view.View, int);
  public void setToIndex(int);
  public android.os.Parcelable getParcelableData();
  public android.view.accessibility.AccessibilityNodeInfo getSource();
  public java.lang.CharSequence getBeforeText();
  public java.lang.CharSequence getClassName();
  public java.lang.CharSequence getContentDescription();
  public java.lang.String toString();
  public java.util.List getText();
}
public final class android.view.accessibility.AccessibilityWindowInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public static android.view.accessibility.AccessibilityWindowInfo obtain();
  public static android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo);
  public boolean equals(java.lang.Object);
  public boolean isAccessibilityFocused();
  public boolean isActive();
  public boolean isFocused();
  public int describeContents();
  public int getChildCount();
  public int getId();
  public int getLayer();
  public int getType();
  public int hashCode();
  public void getBoundsInScreen(android.graphics.Rect);
  public void recycle();
  public void writeToParcel(android.os.Parcel, int);
  public android.view.accessibility.AccessibilityNodeInfo getAnchor();
  public android.view.accessibility.AccessibilityNodeInfo getRoot();
  public android.view.accessibility.AccessibilityWindowInfo getChild(int);
  public android.view.accessibility.AccessibilityWindowInfo getParent();
  public java.lang.CharSequence getTitle();
  public java.lang.String toString();
  public static final int TYPE_ACCESSIBILITY_OVERLAY;
  public static final int TYPE_APPLICATION;
  public static final int TYPE_INPUT_METHOD;
  public static final int TYPE_SPLIT_SCREEN_DIVIDER;
  public static final int TYPE_SYSTEM;
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.accessibility.CaptioningManager
  extends java.lang.Object
{
  public final boolean isEnabled();
  public final float getFontScale();
  public final java.util.Locale getLocale();
  public void addCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener);
  public void removeCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener);
  public android.view.accessibility.CaptioningManager$CaptionStyle getUserStyle();
}
public final class android.view.accessibility.CaptioningManager$CaptionStyle
  extends java.lang.Object
{
  public boolean hasBackgroundColor();
  public boolean hasEdgeColor();
  public boolean hasEdgeType();
  public boolean hasForegroundColor();
  public boolean hasWindowColor();
  public android.graphics.Typeface getTypeface();
  public static final int EDGE_TYPE_DEPRESSED;
  public static final int EDGE_TYPE_DROP_SHADOW;
  public static final int EDGE_TYPE_NONE;
  public static final int EDGE_TYPE_OUTLINE;
  public static final int EDGE_TYPE_RAISED;
  public static final int EDGE_TYPE_UNSPECIFIED;
  public final int backgroundColor;
  public final int edgeColor;
  public final int edgeType;
  public final int foregroundColor;
  public final int windowColor;
}
public abstract class android.view.accessibility.CaptioningManager$CaptioningChangeListener
  extends java.lang.Object
{
  public void <init>();
  public void onEnabledChanged(boolean);
  public void onFontScaleChanged(float);
  public void onLocaleChanged(java.util.Locale);
  public void onUserStyleChanged(android.view.accessibility.CaptioningManager$CaptionStyle);
}
public class android.view.animation.AccelerateDecelerateInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
}
public class android.view.animation.AccelerateInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float);
  public float getInterpolation(float);
}
public class android.view.animation.AlphaAnimation
  extends android.view.animation.Animation
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float, float);
  public boolean willChangeBounds();
  public boolean willChangeTransformationMatrix();
  protected void applyTransformation(float, android.view.animation.Transformation);
}
public abstract class android.view.animation.Animation
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean getDetachWallpaper();
  public boolean getFillAfter();
  public boolean getFillBefore();
  public boolean getTransformation(long, android.view.animation.Transformation);
  public boolean getTransformation(long, android.view.animation.Transformation, float);
  public boolean hasEnded();
  public boolean hasStarted();
  public boolean isFillEnabled();
  public boolean isInitialized();
  public boolean willChangeBounds();
  public boolean willChangeTransformationMatrix();
  public int getBackgroundColor();
  public int getRepeatCount();
  public int getRepeatMode();
  public int getZAdjustment();
  public long computeDurationHint();
  public long getDuration();
  public long getStartOffset();
  public long getStartTime();
  public void cancel();
  public void initialize(int, int, int, int);
  public void reset();
  public void restrictDuration(long);
  public void scaleCurrentDuration(float);
  public void setAnimationListener(android.view.animation.Animation$AnimationListener);
  public void setBackgroundColor(int);
  public void setDetachWallpaper(boolean);
  public void setDuration(long);
  public void setFillAfter(boolean);
  public void setFillBefore(boolean);
  public void setFillEnabled(boolean);
  public void setInterpolator(android.content.Context, int);
  public void setInterpolator(android.view.animation.Interpolator);
  public void setRepeatCount(int);
  public void setRepeatMode(int);
  public void setStartOffset(long);
  public void setStartTime(long);
  public void setZAdjustment(int);
  public void start();
  public void startNow();
  public android.view.animation.Interpolator getInterpolator();
  protected float getScaleFactor();
  protected float resolveSize(int, float, int, int);
  protected void applyTransformation(float, android.view.animation.Transformation);
  protected void ensureInterpolator();
  protected void finalize()  throws java.lang.Throwable;
  protected android.view.animation.Animation clone()  throws java.lang.CloneNotSupportedException;
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public static final int ABSOLUTE;
  public static final int INFINITE;
  public static final int RELATIVE_TO_PARENT;
  public static final int RELATIVE_TO_SELF;
  public static final int RESTART;
  public static final int REVERSE;
  public static final int START_ON_FIRST_FRAME;
  public static final int ZORDER_BOTTOM;
  public static final int ZORDER_NORMAL;
  public static final int ZORDER_TOP;
}
public interface android.view.animation.Animation$AnimationListener
{
  public abstract void onAnimationEnd(android.view.animation.Animation);
  public abstract void onAnimationRepeat(android.view.animation.Animation);
  public abstract void onAnimationStart(android.view.animation.Animation);
}
public class android.view.animation.Animation$Description
  extends java.lang.Object
{
  protected void <init>();
  public float value;
  public int type;
}
public class android.view.animation.AnimationSet
  extends android.view.animation.Animation
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(boolean);
  public boolean getTransformation(long, android.view.animation.Transformation);
  public boolean willChangeBounds();
  public boolean willChangeTransformationMatrix();
  public long computeDurationHint();
  public long getDuration();
  public long getStartTime();
  public void addAnimation(android.view.animation.Animation);
  public void initialize(int, int, int, int);
  public void reset();
  public void restrictDuration(long);
  public void scaleCurrentDuration(float);
  public void setDuration(long);
  public void setFillAfter(boolean);
  public void setFillBefore(boolean);
  public void setRepeatMode(int);
  public void setStartOffset(long);
  public void setStartTime(long);
  public java.util.List getAnimations();
  protected android.view.animation.Animation clone()  throws java.lang.CloneNotSupportedException;
  protected android.view.animation.AnimationSet clone()  throws java.lang.CloneNotSupportedException;
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class android.view.animation.AnimationUtils
  extends java.lang.Object
{
  public static long currentAnimationTimeMillis();
  public static android.view.animation.Animation loadAnimation(android.content.Context, int)  throws android.content.res.Resources$NotFoundException;
  public static android.view.animation.Animation makeInAnimation(android.content.Context, boolean);
  public static android.view.animation.Animation makeInChildBottomAnimation(android.content.Context);
  public static android.view.animation.Animation makeOutAnimation(android.content.Context, boolean);
  public static android.view.animation.Interpolator loadInterpolator(android.content.Context, int)  throws android.content.res.Resources$NotFoundException;
  public static android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context, int)  throws android.content.res.Resources$NotFoundException;
  public void <init>();
}
public class android.view.animation.AnticipateInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float);
  public float getInterpolation(float);
}
public class android.view.animation.AnticipateOvershootInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float);
  public void <init>(float, float);
  public float getInterpolation(float);
}
public abstract class android.view.animation.BaseInterpolator
  extends java.lang.Object
  implements android.view.animation.Interpolator
{
  public void <init>();
}
public class android.view.animation.BounceInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
}
public class android.view.animation.CycleInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float);
  public float getInterpolation(float);
}
public class android.view.animation.DecelerateInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float);
  public float getInterpolation(float);
}
public class android.view.animation.GridLayoutAnimationController
  extends android.view.animation.LayoutAnimationController
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.animation.Animation);
  public void <init>(android.view.animation.Animation, float, float);
  public boolean willOverlap();
  public float getColumnDelay();
  public float getRowDelay();
  public int getDirection();
  public int getDirectionPriority();
  public void setColumnDelay(float);
  public void setDirection(int);
  public void setDirectionPriority(int);
  public void setRowDelay(float);
  protected long getDelayForView(android.view.View);
  public static final int DIRECTION_BOTTOM_TO_TOP;
  public static final int DIRECTION_HORIZONTAL_MASK;
  public static final int DIRECTION_LEFT_TO_RIGHT;
  public static final int DIRECTION_RIGHT_TO_LEFT;
  public static final int DIRECTION_TOP_TO_BOTTOM;
  public static final int DIRECTION_VERTICAL_MASK;
  public static final int PRIORITY_COLUMN;
  public static final int PRIORITY_NONE;
  public static final int PRIORITY_ROW;
}
public class android.view.animation.GridLayoutAnimationController$AnimationParameters
  extends android.view.animation.LayoutAnimationController$AnimationParameters
{
  public void <init>();
  public int column;
  public int columnsCount;
  public int row;
  public int rowsCount;
}
public interface android.view.animation.Interpolator
  extends android.animation.TimeInterpolator
{
}
public class android.view.animation.LayoutAnimationController
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.animation.Animation);
  public void <init>(android.view.animation.Animation, float);
  public final android.view.animation.Animation getAnimationForView(android.view.View);
  public boolean isDone();
  public boolean willOverlap();
  public float getDelay();
  public int getOrder();
  public void setAnimation(android.content.Context, int);
  public void setAnimation(android.view.animation.Animation);
  public void setDelay(float);
  public void setInterpolator(android.content.Context, int);
  public void setInterpolator(android.view.animation.Interpolator);
  public void setOrder(int);
  public void start();
  public android.view.animation.Animation getAnimation();
  public android.view.animation.Interpolator getInterpolator();
  protected int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters);
  protected long getDelayForView(android.view.View);
  public static final int ORDER_NORMAL;
  public static final int ORDER_RANDOM;
  public static final int ORDER_REVERSE;
  protected android.view.animation.Animation mAnimation;
  protected android.view.animation.Interpolator mInterpolator;
  protected java.util.Random mRandomizer;
}
public class android.view.animation.LayoutAnimationController$AnimationParameters
  extends java.lang.Object
{
  public void <init>();
  public int count;
  public int index;
}
public class android.view.animation.LinearInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public float getInterpolation(float);
}
public class android.view.animation.OvershootInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float);
  public float getInterpolation(float);
}
public class android.view.animation.PathInterpolator
  extends android.view.animation.BaseInterpolator
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.graphics.Path);
  public void <init>(float, float);
  public void <init>(float, float, float, float);
  public float getInterpolation(float);
}
public class android.view.animation.RotateAnimation
  extends android.view.animation.Animation
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float, float);
  public void <init>(float, float, float, float);
  public void <init>(float, float, int, float, int, float);
  public void initialize(int, int, int, int);
  protected void applyTransformation(float, android.view.animation.Transformation);
}
public class android.view.animation.ScaleAnimation
  extends android.view.animation.Animation
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float, float, float, float);
  public void <init>(float, float, float, float, float, float);
  public void <init>(float, float, float, float, int, float, int, float);
  public void initialize(int, int, int, int);
  protected void applyTransformation(float, android.view.animation.Transformation);
}
public class android.view.animation.Transformation
  extends java.lang.Object
{
  public void <init>();
  public float getAlpha();
  public int getTransformationType();
  public void clear();
  public void compose(android.view.animation.Transformation);
  public void set(android.view.animation.Transformation);
  public void setAlpha(float);
  public void setTransformationType(int);
  public android.graphics.Matrix getMatrix();
  public java.lang.String toShortString();
  public java.lang.String toString();
  public static final int TYPE_ALPHA;
  public static final int TYPE_BOTH;
  public static final int TYPE_IDENTITY;
  public static final int TYPE_MATRIX;
  protected float mAlpha;
  protected int mTransformationType;
  protected android.graphics.Matrix mMatrix;
}
public class android.view.animation.TranslateAnimation
  extends android.view.animation.Animation
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(float, float, float, float);
  public void <init>(int, float, int, float, int, float, int, float);
  public void initialize(int, int, int, int);
  protected void applyTransformation(float, android.view.animation.Transformation);
}
public class android.view.inputmethod.BaseInputConnection
  extends java.lang.Object
  implements android.view.inputmethod.InputConnection
{
  public static final void removeComposingSpans(android.text.Spannable);
  public static int getComposingSpanEnd(android.text.Spannable);
  public static int getComposingSpanStart(android.text.Spannable);
  public static void setComposingSpans(android.text.Spannable);
  public void <init>(android.view.View, boolean);
  public boolean beginBatchEdit();
  public boolean clearMetaKeyStates(int);
  public boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public boolean commitText(java.lang.CharSequence, int);
  public boolean deleteSurroundingText(int, int);
  public boolean deleteSurroundingTextInCodePoints(int, int);
  public boolean endBatchEdit();
  public boolean finishComposingText();
  public boolean performContextMenuAction(int);
  public boolean performEditorAction(int);
  public boolean performPrivateCommand(java.lang.String, android.os.Bundle);
  public boolean reportFullscreenMode(boolean);
  public boolean requestCursorUpdates(int);
  public boolean sendKeyEvent(android.view.KeyEvent);
  public boolean setComposingRegion(int, int);
  public boolean setComposingText(java.lang.CharSequence, int);
  public boolean setSelection(int, int);
  public int getCursorCapsMode(int);
  public void closeConnection();
  public android.os.Handler getHandler();
  public android.text.Editable getEditable();
  public android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public java.lang.CharSequence getSelectedText(int);
  public java.lang.CharSequence getTextAfterCursor(int, int);
  public java.lang.CharSequence getTextBeforeCursor(int, int);
}
public final class android.view.inputmethod.CompletionInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(long, int, java.lang.CharSequence);
  public void <init>(long, int, java.lang.CharSequence, java.lang.CharSequence);
  public int describeContents();
  public int getPosition();
  public long getId();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getLabel();
  public java.lang.CharSequence getText();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.inputmethod.CorrectionInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int, java.lang.CharSequence, java.lang.CharSequence);
  public int describeContents();
  public int getOffset();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getNewText();
  public java.lang.CharSequence getOldText();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.inputmethod.CursorAnchorInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public boolean equals(java.lang.Object);
  public float getInsertionMarkerBaseline();
  public float getInsertionMarkerBottom();
  public float getInsertionMarkerHorizontal();
  public float getInsertionMarkerTop();
  public int describeContents();
  public int getCharacterBoundsFlags(int);
  public int getComposingTextStart();
  public int getInsertionMarkerFlags();
  public int getSelectionEnd();
  public int getSelectionStart();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public android.graphics.Matrix getMatrix();
  public android.graphics.RectF getCharacterBounds(int);
  public java.lang.CharSequence getComposingText();
  public java.lang.String toString();
  public static final int FLAG_HAS_INVISIBLE_REGION;
  public static final int FLAG_HAS_VISIBLE_REGION;
  public static final int FLAG_IS_RTL;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.inputmethod.CursorAnchorInfo$Builder
  extends java.lang.Object
{
  public void <init>();
  public void reset();
  public android.view.inputmethod.CursorAnchorInfo build();
  public android.view.inputmethod.CursorAnchorInfo$Builder addCharacterBounds(int, float, float, float, float, int);
  public android.view.inputmethod.CursorAnchorInfo$Builder setComposingText(int, java.lang.CharSequence);
  public android.view.inputmethod.CursorAnchorInfo$Builder setInsertionMarkerLocation(float, float, float, float, int);
  public android.view.inputmethod.CursorAnchorInfo$Builder setMatrix(android.graphics.Matrix);
  public android.view.inputmethod.CursorAnchorInfo$Builder setSelectionRange(int, int);
}
public class android.view.inputmethod.EditorInfo
  extends java.lang.Object
  implements android.text.InputType, android.os.Parcelable
{
  public void <init>();
  public final void makeCompatible(int);
  public int describeContents();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public static final int IME_ACTION_DONE;
  public static final int IME_ACTION_GO;
  public static final int IME_ACTION_NEXT;
  public static final int IME_ACTION_NONE;
  public static final int IME_ACTION_PREVIOUS;
  public static final int IME_ACTION_SEARCH;
  public static final int IME_ACTION_SEND;
  public static final int IME_ACTION_UNSPECIFIED;
  public static final int IME_FLAG_FORCE_ASCII;
  public static final int IME_FLAG_NAVIGATE_NEXT;
  public static final int IME_FLAG_NAVIGATE_PREVIOUS;
  public static final int IME_FLAG_NO_ACCESSORY_ACTION;
  public static final int IME_FLAG_NO_ENTER_ACTION;
  public static final int IME_FLAG_NO_EXTRACT_UI;
  public static final int IME_FLAG_NO_FULLSCREEN;
  public static final int IME_MASK_ACTION;
  public static final int IME_NULL;
  public static final android.os.Parcelable$Creator CREATOR;
  public int actionId;
  public int fieldId;
  public int imeOptions;
  public int initialCapsMode;
  public int initialSelEnd;
  public int initialSelStart;
  public int inputType;
  public android.os.Bundle extras;
  public android.os.LocaleList hintLocales;
  public java.lang.CharSequence actionLabel;
  public java.lang.CharSequence hintText;
  public java.lang.CharSequence label;
  public java.lang.String fieldName;
  public java.lang.String packageName;
  public java.lang.String privateImeOptions;
}
public class android.view.inputmethod.ExtractedText
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final int FLAG_SELECTING;
  public static final int FLAG_SINGLE_LINE;
  public static final android.os.Parcelable$Creator CREATOR;
  public int flags;
  public int partialEndOffset;
  public int partialStartOffset;
  public int selectionEnd;
  public int selectionStart;
  public int startOffset;
  public java.lang.CharSequence text;
}
public class android.view.inputmethod.ExtractedTextRequest
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>();
  public int describeContents();
  public void writeToParcel(android.os.Parcel, int);
  public static final android.os.Parcelable$Creator CREATOR;
  public int flags;
  public int hintMaxChars;
  public int hintMaxLines;
  public int token;
}
public final class android.view.inputmethod.InputBinding
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.view.inputmethod.InputConnection, android.os.IBinder, int, int);
  public void <init>(android.view.inputmethod.InputConnection, android.view.inputmethod.InputBinding);
  public int describeContents();
  public int getPid();
  public int getUid();
  public void writeToParcel(android.os.Parcel, int);
  public android.os.IBinder getConnectionToken();
  public android.view.inputmethod.InputConnection getConnection();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.view.inputmethod.InputConnection
{
  public abstract boolean beginBatchEdit();
  public abstract boolean clearMetaKeyStates(int);
  public abstract boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public abstract boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public abstract boolean commitText(java.lang.CharSequence, int);
  public abstract boolean deleteSurroundingText(int, int);
  public abstract boolean deleteSurroundingTextInCodePoints(int, int);
  public abstract boolean endBatchEdit();
  public abstract boolean finishComposingText();
  public abstract boolean performContextMenuAction(int);
  public abstract boolean performEditorAction(int);
  public abstract boolean performPrivateCommand(java.lang.String, android.os.Bundle);
  public abstract boolean reportFullscreenMode(boolean);
  public abstract boolean requestCursorUpdates(int);
  public abstract boolean sendKeyEvent(android.view.KeyEvent);
  public abstract boolean setComposingRegion(int, int);
  public abstract boolean setComposingText(java.lang.CharSequence, int);
  public abstract boolean setSelection(int, int);
  public abstract int getCursorCapsMode(int);
  public abstract void closeConnection();
  public abstract android.os.Handler getHandler();
  public abstract android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public abstract java.lang.CharSequence getSelectedText(int);
  public abstract java.lang.CharSequence getTextAfterCursor(int, int);
  public abstract java.lang.CharSequence getTextBeforeCursor(int, int);
  public static final int CURSOR_UPDATE_IMMEDIATE;
  public static final int CURSOR_UPDATE_MONITOR;
  public static final int GET_EXTRACTED_TEXT_MONITOR;
  public static final int GET_TEXT_WITH_STYLES;
}
public class android.view.inputmethod.InputConnectionWrapper
  extends java.lang.Object
  implements android.view.inputmethod.InputConnection
{
  public void <init>(android.view.inputmethod.InputConnection, boolean);
  public boolean beginBatchEdit();
  public boolean clearMetaKeyStates(int);
  public boolean commitCompletion(android.view.inputmethod.CompletionInfo);
  public boolean commitCorrection(android.view.inputmethod.CorrectionInfo);
  public boolean commitText(java.lang.CharSequence, int);
  public boolean deleteSurroundingText(int, int);
  public boolean deleteSurroundingTextInCodePoints(int, int);
  public boolean endBatchEdit();
  public boolean finishComposingText();
  public boolean performContextMenuAction(int);
  public boolean performEditorAction(int);
  public boolean performPrivateCommand(java.lang.String, android.os.Bundle);
  public boolean reportFullscreenMode(boolean);
  public boolean requestCursorUpdates(int);
  public boolean sendKeyEvent(android.view.KeyEvent);
  public boolean setComposingRegion(int, int);
  public boolean setComposingText(java.lang.CharSequence, int);
  public boolean setSelection(int, int);
  public int getCursorCapsMode(int);
  public void closeConnection();
  public void setTarget(android.view.inputmethod.InputConnection);
  public android.os.Handler getHandler();
  public android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest, int);
  public java.lang.CharSequence getSelectedText(int);
  public java.lang.CharSequence getTextAfterCursor(int, int);
  public java.lang.CharSequence getTextBeforeCursor(int, int);
}
public interface android.view.inputmethod.InputMethod
{
  public abstract void attachToken(android.os.IBinder);
  public abstract void bindInput(android.view.inputmethod.InputBinding);
  public abstract void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);
  public abstract void createSession(android.view.inputmethod.InputMethod$SessionCallback);
  public abstract void hideSoftInput(int, android.os.ResultReceiver);
  public abstract void restartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public abstract void revokeSession(android.view.inputmethod.InputMethodSession);
  public abstract void setSessionEnabled(android.view.inputmethod.InputMethodSession, boolean);
  public abstract void showSoftInput(int, android.os.ResultReceiver);
  public abstract void startInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);
  public abstract void unbindInput();
  public static final int SHOW_EXPLICIT;
  public static final int SHOW_FORCED;
  public static final java.lang.String SERVICE_INTERFACE;
  public static final java.lang.String SERVICE_META_DATA;
}
public interface android.view.inputmethod.InputMethod$SessionCallback
{
  public abstract void sessionCreated(android.view.inputmethod.InputMethodSession);
}
public final class android.view.inputmethod.InputMethodInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.content.Context, android.content.pm.ResolveInfo)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void <init>(java.lang.String, java.lang.String, java.lang.CharSequence, java.lang.String);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getIsDefaultResourceId();
  public int getSubtypeCount();
  public int hashCode();
  public void dump(android.util.Printer, java.lang.String);
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getComponent();
  public android.content.pm.ServiceInfo getServiceInfo();
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public android.view.inputmethod.InputMethodSubtype getSubtypeAt(int);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public java.lang.String getId();
  public java.lang.String getPackageName();
  public java.lang.String getServiceName();
  public java.lang.String getSettingsActivity();
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.inputmethod.InputMethodManager
  extends java.lang.Object
{
  public boolean hideSoftInputFromWindow(android.os.IBinder, int);
  public boolean hideSoftInputFromWindow(android.os.IBinder, int, android.os.ResultReceiver);
  public boolean isAcceptingText();
  public boolean isActive();
  public boolean isActive(android.view.View);
  public boolean isFullscreenMode();
  public boolean isWatchingCursor(android.view.View);
  public boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);
  public boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder);
  public boolean showSoftInput(android.view.View, int);
  public boolean showSoftInput(android.view.View, int, android.os.ResultReceiver);
  public boolean switchToLastInputMethod(android.os.IBinder);
  public boolean switchToNextInputMethod(android.os.IBinder, boolean);
  public void dispatchKeyEventFromInputMethod(android.view.View, android.view.KeyEvent);
  public void displayCompletions(android.view.View, android.view.inputmethod.CompletionInfo[]);
  public void hideSoftInputFromInputMethod(android.os.IBinder, int);
  public void hideStatusIcon(android.os.IBinder);
  public void restartInput(android.view.View);
  public void sendAppPrivateCommand(android.view.View, java.lang.String, android.os.Bundle);
  public void setAdditionalInputMethodSubtypes(java.lang.String, android.view.inputmethod.InputMethodSubtype[]);
  public void setInputMethod(android.os.IBinder, java.lang.String);
  public void setInputMethodAndSubtype(android.os.IBinder, java.lang.String, android.view.inputmethod.InputMethodSubtype);
  public void showInputMethodAndSubtypeEnabler(java.lang.String);
  public void showInputMethodPicker();
  public void showSoftInputFromInputMethod(android.os.IBinder, int);
  public void showStatusIcon(android.os.IBinder, java.lang.String, int);
  public void toggleSoftInput(int, int);
  public void toggleSoftInputFromWindow(android.os.IBinder, int, int);
  public void updateCursor(android.view.View, int, int, int, int);
  public void updateCursorAnchorInfo(android.view.View, android.view.inputmethod.CursorAnchorInfo);
  public void updateExtractedText(android.view.View, int, android.view.inputmethod.ExtractedText);
  public void updateSelection(android.view.View, int, int, int, int);
  public void viewClicked(android.view.View);
  public android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype();
  public android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype();
  public java.util.List getEnabledInputMethodList();
  public java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo, boolean);
  public java.util.List getInputMethodList();
  public java.util.Map getShortcutInputMethodsAndSubtypes();
  public static final int HIDE_IMPLICIT_ONLY;
  public static final int HIDE_NOT_ALWAYS;
  public static final int RESULT_HIDDEN;
  public static final int RESULT_SHOWN;
  public static final int RESULT_UNCHANGED_HIDDEN;
  public static final int RESULT_UNCHANGED_SHOWN;
  public static final int SHOW_FORCED;
  public static final int SHOW_IMPLICIT;
}
public interface android.view.inputmethod.InputMethodSession
{
  public abstract void appPrivateCommand(java.lang.String, android.os.Bundle);
  public abstract void dispatchGenericMotionEvent(int, android.view.MotionEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public abstract void dispatchKeyEvent(int, android.view.KeyEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public abstract void dispatchTrackballEvent(int, android.view.MotionEvent, android.view.inputmethod.InputMethodSession$EventCallback);
  public abstract void displayCompletions(android.view.inputmethod.CompletionInfo[]);
  public abstract void finishInput();
  public abstract void toggleSoftInput(int, int);
  public abstract void updateCursor(android.graphics.Rect);
  public abstract void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo);
  public abstract void updateExtractedText(int, android.view.inputmethod.ExtractedText);
  public abstract void updateSelection(int, int, int, int, int, int);
  public abstract void viewClicked(boolean);
}
public interface android.view.inputmethod.InputMethodSession$EventCallback
{
  public abstract void finishedEvent(int, boolean);
}
public final class android.view.inputmethod.InputMethodSubtype
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int, int, java.lang.String, java.lang.String, java.lang.String, boolean, boolean);
  public void <init>(int, int, java.lang.String, java.lang.String, java.lang.String, boolean, boolean, int);
  public boolean containsExtraValueKey(java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean isAsciiCapable();
  public boolean isAuxiliary();
  public boolean overridesImplicitlyEnabledSubtype();
  public int describeContents();
  public int getIconResId();
  public int getNameResId();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getDisplayName(android.content.Context, java.lang.String, android.content.pm.ApplicationInfo);
  public java.lang.String getExtraValue();
  public java.lang.String getExtraValueOf(java.lang.String);
  public java.lang.String getLanguageTag();
  public java.lang.String getLocale();
  public java.lang.String getMode();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder
  extends java.lang.Object
{
  public void <init>();
  public android.view.inputmethod.InputMethodSubtype build();
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAsciiCapable(boolean);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAuxiliary(boolean);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setLanguageTag(java.lang.String);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeIconResId(int);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeId(int);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeMode(java.lang.String);
  public android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeNameResId(int);
}
public final class android.view.textservice.SentenceSuggestionsInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public void <init>(android.view.textservice.SuggestionsInfo[], int[], int[]);
  public int describeContents();
  public int getLengthAt(int);
  public int getOffsetAt(int);
  public int getSuggestionsCount();
  public void writeToParcel(android.os.Parcel, int);
  public android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int);
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.textservice.SpellCheckerInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public int describeContents();
  public int getSubtypeCount();
  public void writeToParcel(android.os.Parcel, int);
  public android.content.ComponentName getComponent();
  public android.content.pm.ServiceInfo getServiceInfo();
  public android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager);
  public android.view.textservice.SpellCheckerSubtype getSubtypeAt(int);
  public java.lang.CharSequence loadLabel(android.content.pm.PackageManager);
  public java.lang.String getId();
  public java.lang.String getPackageName();
  public java.lang.String getSettingsActivity();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.view.textservice.SpellCheckerSession
  extends java.lang.Object
{
  public boolean isSessionDisconnected();
  public void cancel();
  public void close();
  public void getSentenceSuggestions(android.view.textservice.TextInfo[], int);
  public void getSuggestions(android.view.textservice.TextInfo, int);
  public void getSuggestions(android.view.textservice.TextInfo[], int, boolean);
  public android.view.textservice.SpellCheckerInfo getSpellChecker();
  protected void finalize()  throws java.lang.Throwable;
  public static final java.lang.String SERVICE_META_DATA;
}
public interface android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener
{
  public abstract void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[]);
  public abstract void onGetSuggestions(android.view.textservice.SuggestionsInfo[]);
}
public final class android.view.textservice.SpellCheckerSubtype
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(int, java.lang.String, java.lang.String);
  public boolean containsExtraValueKey(java.lang.String);
  public boolean equals(java.lang.Object);
  public int describeContents();
  public int getNameResId();
  public int hashCode();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getDisplayName(android.content.Context, java.lang.String, android.content.pm.ApplicationInfo);
  public java.lang.String getExtraValue();
  public java.lang.String getExtraValueOf(java.lang.String);
  public java.lang.String getLanguageTag();
  public java.lang.String getLocale();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.textservice.SuggestionsInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public void <init>(int, java.lang.String[]);
  public void <init>(int, java.lang.String[], int, int);
  public int describeContents();
  public int getCookie();
  public int getSequence();
  public int getSuggestionsAttributes();
  public int getSuggestionsCount();
  public void setCookieAndSequence(int, int);
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String getSuggestionAt(int);
  public static final int RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS;
  public static final int RESULT_ATTR_IN_THE_DICTIONARY;
  public static final int RESULT_ATTR_LOOKS_LIKE_TYPO;
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.textservice.TextInfo
  extends java.lang.Object
  implements android.os.Parcelable
{
  public void <init>(android.os.Parcel);
  public void <init>(java.lang.CharSequence, int, int, int, int);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int, int);
  public int describeContents();
  public int getCookie();
  public int getSequence();
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.CharSequence getCharSequence();
  public java.lang.String getText();
  public static final android.os.Parcelable$Creator CREATOR;
}
public final class android.view.textservice.TextServicesManager
  extends java.lang.Object
{
  public android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle, java.util.Locale, android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener, boolean);
}
public abstract class android.webkit.ClientCertRequest
  extends java.lang.Object
{
  public void <init>();
  public abstract int getPort();
  public abstract void cancel();
  public abstract void ignore();
  public abstract void proceed(java.security.PrivateKey, java.security.cert.X509Certificate[]);
  public abstract java.lang.String getHost();
  public abstract java.lang.String[] getKeyTypes();
  public abstract java.security.Principal[] getPrincipals();
}
public class android.webkit.ConsoleMessage
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String, int, android.webkit.ConsoleMessage$MessageLevel);
  public int lineNumber();
  public android.webkit.ConsoleMessage$MessageLevel messageLevel();
  public java.lang.String message();
  public java.lang.String sourceId();
}
public final class android.webkit.ConsoleMessage$MessageLevel
  extends java.lang.Enum
{
  public static android.webkit.ConsoleMessage$MessageLevel valueOf(java.lang.String);
  public static android.webkit.ConsoleMessage$MessageLevel[] values();
  public static final android.webkit.ConsoleMessage$MessageLevel DEBUG;
  public static final android.webkit.ConsoleMessage$MessageLevel ERROR;
  public static final android.webkit.ConsoleMessage$MessageLevel LOG;
  public static final android.webkit.ConsoleMessage$MessageLevel TIP;
  public static final android.webkit.ConsoleMessage$MessageLevel WARNING;
}
public abstract class android.webkit.CookieManager
  extends java.lang.Object
{
  public static boolean allowFileSchemeCookies();
  public static void setAcceptFileSchemeCookies(boolean);
  public static android.webkit.CookieManager getInstance();
  public void <init>();
  public abstract boolean acceptCookie();
  public abstract boolean acceptThirdPartyCookies(android.webkit.WebView);
  public abstract boolean hasCookies();
  public abstract void flush();
  public abstract void removeAllCookie();
  public abstract void removeAllCookies(android.webkit.ValueCallback);
  public abstract void removeExpiredCookie();
  public abstract void removeSessionCookie();
  public abstract void removeSessionCookies(android.webkit.ValueCallback);
  public abstract void setAcceptCookie(boolean);
  public abstract void setAcceptThirdPartyCookies(android.webkit.WebView, boolean);
  public abstract void setCookie(java.lang.String, java.lang.String);
  public abstract void setCookie(java.lang.String, java.lang.String, android.webkit.ValueCallback);
  public abstract java.lang.String getCookie(java.lang.String);
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public final class android.webkit.CookieSyncManager
  extends android.webkit.WebSyncManager
{
  public static android.webkit.CookieSyncManager createInstance(android.content.Context);
  public static android.webkit.CookieSyncManager getInstance();
  public void resetSync();
  public void run();
  public void startSync();
  public void stopSync();
  public void sync();
  protected void syncFromRamToFlash();
  protected static final java.lang.String LOGTAG;
  protected android.os.Handler mHandler;
  protected android.webkit.WebViewDatabase mDataBase;
}
public class android.webkit.DateSorter
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public int getIndex(long);
  public long getBoundary(int);
  public java.lang.String getLabel(int);
  public static final int DAY_COUNT;
}
public interface android.webkit.DownloadListener
{
  public abstract void onDownloadStart(java.lang.String, java.lang.String, java.lang.String, java.lang.String, long);
}
public class android.webkit.GeolocationPermissions
  extends java.lang.Object
{
  public static android.webkit.GeolocationPermissions getInstance();
  public void allow(java.lang.String);
  public void clear(java.lang.String);
  public void clearAll();
  public void getAllowed(java.lang.String, android.webkit.ValueCallback);
  public void getOrigins(android.webkit.ValueCallback);
}
public interface android.webkit.GeolocationPermissions$Callback
{
  public abstract void invoke(java.lang.String, boolean, boolean);
}
public class android.webkit.HttpAuthHandler
  extends android.os.Handler
{
  public boolean useHttpAuthUsernamePassword();
  public void cancel();
  public void proceed(java.lang.String, java.lang.String);
}
public interface android.webkit.JavascriptInterface
  extends java.lang.annotation.Annotation
{
}
public class android.webkit.JsPromptResult
  extends android.webkit.JsResult
{
  public void confirm(java.lang.String);
}
public class android.webkit.JsResult
  extends java.lang.Object
{
  public final void cancel();
  public final void confirm();
}
public class android.webkit.MimeTypeMap
  extends java.lang.Object
{
  public static android.webkit.MimeTypeMap getSingleton();
  public static java.lang.String getFileExtensionFromUrl(java.lang.String);
  public boolean hasExtension(java.lang.String);
  public boolean hasMimeType(java.lang.String);
  public java.lang.String getExtensionFromMimeType(java.lang.String);
  public java.lang.String getMimeTypeFromExtension(java.lang.String);
}
public abstract class android.webkit.PermissionRequest
  extends java.lang.Object
{
  public void <init>();
  public abstract void deny();
  public abstract void grant(java.lang.String[]);
  public abstract android.net.Uri getOrigin();
  public abstract java.lang.String[] getResources();
  public static final java.lang.String RESOURCE_AUDIO_CAPTURE;
  public static final java.lang.String RESOURCE_MIDI_SYSEX;
  public static final java.lang.String RESOURCE_PROTECTED_MEDIA_ID;
  public static final java.lang.String RESOURCE_VIDEO_CAPTURE;
}
public interface android.webkit.PluginStub
{
  public abstract android.view.View getEmbeddedView(int, android.content.Context);
  public abstract android.view.View getFullScreenView(int, android.content.Context);
}
public class android.webkit.ServiceWorkerClient
  extends java.lang.Object
{
  public void <init>();
  public android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest);
}
public abstract class android.webkit.ServiceWorkerController
  extends java.lang.Object
{
  public static android.webkit.ServiceWorkerController getInstance();
  public void <init>();
  public abstract void setServiceWorkerClient(android.webkit.ServiceWorkerClient);
  public abstract android.webkit.ServiceWorkerWebSettings getServiceWorkerWebSettings();
}
public abstract class android.webkit.ServiceWorkerWebSettings
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean getAllowContentAccess();
  public abstract boolean getAllowFileAccess();
  public abstract boolean getBlockNetworkLoads();
  public abstract int getCacheMode();
  public abstract void setAllowContentAccess(boolean);
  public abstract void setAllowFileAccess(boolean);
  public abstract void setBlockNetworkLoads(boolean);
  public abstract void setCacheMode(int);
}
public class android.webkit.SslErrorHandler
  extends android.os.Handler
{
  public void cancel();
  public void proceed();
}
public final class android.webkit.URLUtil
  extends java.lang.Object
{
  public static final java.lang.String guessFileName(java.lang.String, java.lang.String, java.lang.String);
  public static boolean isAboutUrl(java.lang.String);
  public static boolean isAssetUrl(java.lang.String);
  public static boolean isContentUrl(java.lang.String);
  public static boolean isCookielessProxyUrl(java.lang.String);
  public static boolean isDataUrl(java.lang.String);
  public static boolean isFileUrl(java.lang.String);
  public static boolean isHttpUrl(java.lang.String);
  public static boolean isHttpsUrl(java.lang.String);
  public static boolean isJavaScriptUrl(java.lang.String);
  public static boolean isNetworkUrl(java.lang.String);
  public static boolean isValidUrl(java.lang.String);
  public static byte[] decode(byte[])  throws java.lang.IllegalArgumentException;
  public static java.lang.String composeSearchUrl(java.lang.String, java.lang.String, java.lang.String);
  public static java.lang.String guessUrl(java.lang.String);
  public static java.lang.String stripAnchor(java.lang.String);
  public void <init>();
}
public interface android.webkit.ValueCallback
{
  public abstract void onReceiveValue(java.lang.Object);
}
public abstract class android.webkit.WebBackForwardList
  extends java.lang.Object
  implements java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public abstract int getCurrentIndex();
  public abstract int getSize();
  public abstract android.webkit.WebHistoryItem getCurrentItem();
  public abstract android.webkit.WebHistoryItem getItemAtIndex(int);
  protected abstract android.webkit.WebBackForwardList clone();
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class android.webkit.WebChromeClient
  extends java.lang.Object
{
  public void <init>();
  public boolean onConsoleMessage(android.webkit.ConsoleMessage);
  public boolean onCreateWindow(android.webkit.WebView, boolean, boolean, android.os.Message);
  public boolean onJsAlert(android.webkit.WebView, java.lang.String, java.lang.String, android.webkit.JsResult);
  public boolean onJsBeforeUnload(android.webkit.WebView, java.lang.String, java.lang.String, android.webkit.JsResult);
  public boolean onJsConfirm(android.webkit.WebView, java.lang.String, java.lang.String, android.webkit.JsResult);
  public boolean onJsPrompt(android.webkit.WebView, java.lang.String, java.lang.String, java.lang.String, android.webkit.JsPromptResult);
  public boolean onJsTimeout();
  public boolean onShowFileChooser(android.webkit.WebView, android.webkit.ValueCallback, android.webkit.WebChromeClient$FileChooserParams);
  public void getVisitedHistory(android.webkit.ValueCallback);
  public void onCloseWindow(android.webkit.WebView);
  public void onConsoleMessage(java.lang.String, int, java.lang.String);
  public void onExceededDatabaseQuota(java.lang.String, java.lang.String, long, long, long, android.webkit.WebStorage$QuotaUpdater);
  public void onGeolocationPermissionsHidePrompt();
  public void onGeolocationPermissionsShowPrompt(java.lang.String, android.webkit.GeolocationPermissions$Callback);
  public void onHideCustomView();
  public void onPermissionRequest(android.webkit.PermissionRequest);
  public void onPermissionRequestCanceled(android.webkit.PermissionRequest);
  public void onProgressChanged(android.webkit.WebView, int);
  public void onReachedMaxAppCacheSize(long, long, android.webkit.WebStorage$QuotaUpdater);
  public void onReceivedIcon(android.webkit.WebView, android.graphics.Bitmap);
  public void onReceivedTitle(android.webkit.WebView, java.lang.String);
  public void onReceivedTouchIconUrl(android.webkit.WebView, java.lang.String, boolean);
  public void onRequestFocus(android.webkit.WebView);
  public void onShowCustomView(android.view.View, android.webkit.WebChromeClient$CustomViewCallback);
  public void onShowCustomView(android.view.View, int, android.webkit.WebChromeClient$CustomViewCallback);
  public android.graphics.Bitmap getDefaultVideoPoster();
  public android.view.View getVideoLoadingProgressView();
}
public interface android.webkit.WebChromeClient$CustomViewCallback
{
  public abstract void onCustomViewHidden();
}
public abstract class android.webkit.WebChromeClient$FileChooserParams
  extends java.lang.Object
{
  public static android.net.Uri[] parseResult(int, android.content.Intent);
  public void <init>();
  public abstract boolean isCaptureEnabled();
  public abstract int getMode();
  public abstract android.content.Intent createIntent();
  public abstract java.lang.CharSequence getTitle();
  public abstract java.lang.String getFilenameHint();
  public abstract java.lang.String[] getAcceptTypes();
  public static final int MODE_OPEN;
  public static final int MODE_OPEN_MULTIPLE;
  public static final int MODE_SAVE;
}
public abstract class android.webkit.WebHistoryItem
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public abstract android.graphics.Bitmap getFavicon();
  public abstract java.lang.String getOriginalUrl();
  public abstract java.lang.String getTitle();
  public abstract java.lang.String getUrl();
  protected abstract android.webkit.WebHistoryItem clone();
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public abstract class android.webkit.WebIconDatabase
  extends java.lang.Object
{
  public static android.webkit.WebIconDatabase getInstance();
  public void <init>();
  public abstract void close();
  public abstract void open(java.lang.String);
  public abstract void releaseIconForPageUrl(java.lang.String);
  public abstract void removeAllIcons();
  public abstract void requestIconForPageUrl(java.lang.String, android.webkit.WebIconDatabase$IconListener);
  public abstract void retainIconForPageUrl(java.lang.String);
}
public interface android.webkit.WebIconDatabase$IconListener
{
  public abstract void onReceivedIcon(java.lang.String, android.graphics.Bitmap);
}
public class android.webkit.WebMessage
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, android.webkit.WebMessagePort[]);
  public android.webkit.WebMessagePort[] getPorts();
  public java.lang.String getData();
}
public abstract class android.webkit.WebMessagePort
  extends java.lang.Object
{
  public abstract void close();
  public abstract void postMessage(android.webkit.WebMessage);
  public abstract void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback);
  public abstract void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback, android.os.Handler);
}
public abstract class android.webkit.WebMessagePort$WebMessageCallback
  extends java.lang.Object
{
  public void <init>();
  public void onMessage(android.webkit.WebMessagePort, android.webkit.WebMessage);
}
public abstract class android.webkit.WebResourceError
  extends java.lang.Object
{
  public abstract int getErrorCode();
  public abstract java.lang.CharSequence getDescription();
}
public interface android.webkit.WebResourceRequest
{
  public abstract boolean hasGesture();
  public abstract boolean isForMainFrame();
  public abstract boolean isRedirect();
  public abstract android.net.Uri getUrl();
  public abstract java.lang.String getMethod();
  public abstract java.util.Map getRequestHeaders();
}
public class android.webkit.WebResourceResponse
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String, int, java.lang.String, java.util.Map, java.io.InputStream);
  public void <init>(java.lang.String, java.lang.String, java.io.InputStream);
  public int getStatusCode();
  public void setData(java.io.InputStream);
  public void setEncoding(java.lang.String);
  public void setMimeType(java.lang.String);
  public void setResponseHeaders(java.util.Map);
  public void setStatusCodeAndReasonPhrase(int, java.lang.String);
  public java.io.InputStream getData();
  public java.lang.String getEncoding();
  public java.lang.String getMimeType();
  public java.lang.String getReasonPhrase();
  public java.util.Map getResponseHeaders();
}
public abstract class android.webkit.WebSettings
  extends java.lang.Object
{
  public static java.lang.String getDefaultUserAgent(android.content.Context);
  public void <init>();
  public abstract boolean enableSmoothTransition();
  public abstract boolean getAllowContentAccess();
  public abstract boolean getAllowFileAccess();
  public abstract boolean getAllowFileAccessFromFileURLs();
  public abstract boolean getAllowUniversalAccessFromFileURLs();
  public abstract boolean getBlockNetworkImage();
  public abstract boolean getBlockNetworkLoads();
  public abstract boolean getBuiltInZoomControls();
  public abstract boolean getDatabaseEnabled();
  public abstract boolean getDisplayZoomControls();
  public abstract boolean getDomStorageEnabled();
  public abstract boolean getJavaScriptCanOpenWindowsAutomatically();
  public abstract boolean getJavaScriptEnabled();
  public abstract boolean getLightTouchEnabled();
  public abstract boolean getLoadWithOverviewMode();
  public abstract boolean getLoadsImagesAutomatically();
  public abstract boolean getMediaPlaybackRequiresUserGesture();
  public abstract boolean getOffscreenPreRaster();
  public abstract boolean getSaveFormData();
  public abstract boolean getSavePassword();
  public abstract boolean getUseWideViewPort();
  public abstract boolean supportMultipleWindows();
  public abstract boolean supportZoom();
  public abstract int getCacheMode();
  public abstract int getDefaultFixedFontSize();
  public abstract int getDefaultFontSize();
  public abstract int getDisabledActionModeMenuItems();
  public abstract int getMinimumFontSize();
  public abstract int getMinimumLogicalFontSize();
  public abstract int getMixedContentMode();
  public abstract int getTextZoom();
  public abstract void setAllowContentAccess(boolean);
  public abstract void setAllowFileAccess(boolean);
  public abstract void setAllowFileAccessFromFileURLs(boolean);
  public abstract void setAllowUniversalAccessFromFileURLs(boolean);
  public abstract void setAppCacheEnabled(boolean);
  public abstract void setAppCacheMaxSize(long);
  public abstract void setAppCachePath(java.lang.String);
  public abstract void setBlockNetworkImage(boolean);
  public abstract void setBlockNetworkLoads(boolean);
  public abstract void setBuiltInZoomControls(boolean);
  public abstract void setCacheMode(int);
  public abstract void setCursiveFontFamily(java.lang.String);
  public abstract void setDatabaseEnabled(boolean);
  public abstract void setDatabasePath(java.lang.String);
  public abstract void setDefaultFixedFontSize(int);
  public abstract void setDefaultFontSize(int);
  public abstract void setDefaultTextEncodingName(java.lang.String);
  public abstract void setDefaultZoom(android.webkit.WebSettings$ZoomDensity);
  public abstract void setDisabledActionModeMenuItems(int);
  public abstract void setDisplayZoomControls(boolean);
  public abstract void setDomStorageEnabled(boolean);
  public abstract void setEnableSmoothTransition(boolean);
  public abstract void setFantasyFontFamily(java.lang.String);
  public abstract void setFixedFontFamily(java.lang.String);
  public abstract void setGeolocationDatabasePath(java.lang.String);
  public abstract void setGeolocationEnabled(boolean);
  public abstract void setJavaScriptCanOpenWindowsAutomatically(boolean);
  public abstract void setJavaScriptEnabled(boolean);
  public abstract void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm);
  public abstract void setLightTouchEnabled(boolean);
  public abstract void setLoadWithOverviewMode(boolean);
  public abstract void setLoadsImagesAutomatically(boolean);
  public abstract void setMediaPlaybackRequiresUserGesture(boolean);
  public abstract void setMinimumFontSize(int);
  public abstract void setMinimumLogicalFontSize(int);
  public abstract void setMixedContentMode(int);
  public abstract void setNeedInitialFocus(boolean);
  public abstract void setOffscreenPreRaster(boolean);
  public abstract void setPluginState(android.webkit.WebSettings$PluginState);
  public abstract void setRenderPriority(android.webkit.WebSettings$RenderPriority);
  public abstract void setSansSerifFontFamily(java.lang.String);
  public abstract void setSaveFormData(boolean);
  public abstract void setSavePassword(boolean);
  public abstract void setSerifFontFamily(java.lang.String);
  public abstract void setStandardFontFamily(java.lang.String);
  public abstract void setSupportMultipleWindows(boolean);
  public abstract void setSupportZoom(boolean);
  public abstract void setTextZoom(int);
  public abstract void setUseWideViewPort(boolean);
  public abstract void setUserAgentString(java.lang.String);
  public abstract android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm();
  public abstract android.webkit.WebSettings$PluginState getPluginState();
  public abstract android.webkit.WebSettings$ZoomDensity getDefaultZoom();
  public abstract java.lang.String getCursiveFontFamily();
  public abstract java.lang.String getDatabasePath();
  public abstract java.lang.String getDefaultTextEncodingName();
  public abstract java.lang.String getFantasyFontFamily();
  public abstract java.lang.String getFixedFontFamily();
  public abstract java.lang.String getSansSerifFontFamily();
  public abstract java.lang.String getSerifFontFamily();
  public abstract java.lang.String getStandardFontFamily();
  public abstract java.lang.String getUserAgentString();
  public void setTextSize(android.webkit.WebSettings$TextSize);
  public android.webkit.WebSettings$TextSize getTextSize();
  public static final int LOAD_CACHE_ELSE_NETWORK;
  public static final int LOAD_CACHE_ONLY;
  public static final int LOAD_DEFAULT;
  public static final int LOAD_NORMAL;
  public static final int LOAD_NO_CACHE;
  public static final int MENU_ITEM_NONE;
  public static final int MENU_ITEM_PROCESS_TEXT;
  public static final int MENU_ITEM_SHARE;
  public static final int MENU_ITEM_WEB_SEARCH;
  public static final int MIXED_CONTENT_ALWAYS_ALLOW;
  public static final int MIXED_CONTENT_COMPATIBILITY_MODE;
  public static final int MIXED_CONTENT_NEVER_ALLOW;
}
public final class android.webkit.WebSettings$LayoutAlgorithm
  extends java.lang.Enum
{
  public static android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String);
  public static android.webkit.WebSettings$LayoutAlgorithm[] values();
  public static final android.webkit.WebSettings$LayoutAlgorithm NARROW_COLUMNS;
  public static final android.webkit.WebSettings$LayoutAlgorithm NORMAL;
  public static final android.webkit.WebSettings$LayoutAlgorithm SINGLE_COLUMN;
  public static final android.webkit.WebSettings$LayoutAlgorithm TEXT_AUTOSIZING;
}
public final class android.webkit.WebSettings$PluginState
  extends java.lang.Enum
{
  public static android.webkit.WebSettings$PluginState valueOf(java.lang.String);
  public static android.webkit.WebSettings$PluginState[] values();
  public static final android.webkit.WebSettings$PluginState OFF;
  public static final android.webkit.WebSettings$PluginState ON;
  public static final android.webkit.WebSettings$PluginState ON_DEMAND;
}
public final class android.webkit.WebSettings$RenderPriority
  extends java.lang.Enum
{
  public static android.webkit.WebSettings$RenderPriority valueOf(java.lang.String);
  public static android.webkit.WebSettings$RenderPriority[] values();
  public static final android.webkit.WebSettings$RenderPriority HIGH;
  public static final android.webkit.WebSettings$RenderPriority LOW;
  public static final android.webkit.WebSettings$RenderPriority NORMAL;
}
public final class android.webkit.WebSettings$TextSize
  extends java.lang.Enum
{
  public static android.webkit.WebSettings$TextSize valueOf(java.lang.String);
  public static android.webkit.WebSettings$TextSize[] values();
  public static final android.webkit.WebSettings$TextSize LARGER;
  public static final android.webkit.WebSettings$TextSize LARGEST;
  public static final android.webkit.WebSettings$TextSize NORMAL;
  public static final android.webkit.WebSettings$TextSize SMALLER;
  public static final android.webkit.WebSettings$TextSize SMALLEST;
}
public final class android.webkit.WebSettings$ZoomDensity
  extends java.lang.Enum
{
  public static android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String);
  public static android.webkit.WebSettings$ZoomDensity[] values();
  public static final android.webkit.WebSettings$ZoomDensity CLOSE;
  public static final android.webkit.WebSettings$ZoomDensity FAR;
  public static final android.webkit.WebSettings$ZoomDensity MEDIUM;
}
public class android.webkit.WebStorage
  extends java.lang.Object
{
  public static android.webkit.WebStorage getInstance();
  public void deleteAllData();
  public void deleteOrigin(java.lang.String);
  public void getOrigins(android.webkit.ValueCallback);
  public void getQuotaForOrigin(java.lang.String, android.webkit.ValueCallback);
  public void getUsageForOrigin(java.lang.String, android.webkit.ValueCallback);
  public void setQuotaForOrigin(java.lang.String, long);
}
public class android.webkit.WebStorage$Origin
  extends java.lang.Object
{
  public long getQuota();
  public long getUsage();
  public java.lang.String getOrigin();
}
public interface android.webkit.WebStorage$QuotaUpdater
{
  public abstract void updateQuota(long);
}
public class android.webkit.WebView
  extends android.widget.AbsoluteLayout
  implements android.view.ViewTreeObserver$OnGlobalFocusChangeListener, android.view.ViewGroup$OnHierarchyChangeListener
{
  public static void clearClientCertPreferences(java.lang.Runnable);
  public static void enableSlowWholeDocumentDraw();
  public static void setWebContentsDebuggingEnabled(boolean);
  public static java.lang.String findAddress(java.lang.String);
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, boolean);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean canGoBack();
  public boolean canGoBackOrForward(int);
  public boolean canGoForward();
  public boolean canZoomIn();
  public boolean canZoomOut();
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean isPrivateBrowsingEnabled();
  public boolean onDragEvent(android.view.DragEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onHoverEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean overlayHorizontalScrollbar();
  public boolean overlayVerticalScrollbar();
  public boolean pageDown(boolean);
  public boolean pageUp(boolean);
  public boolean performLongClick();
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public boolean requestFocus(int, android.graphics.Rect);
  public boolean shouldDelayChildPressedState();
  public boolean showFindDialog(java.lang.String, boolean);
  public boolean zoomIn();
  public boolean zoomOut();
  public float getScale();
  public int findAll(java.lang.String);
  public int getContentHeight();
  public int getProgress();
  public void addJavascriptInterface(java.lang.Object, java.lang.String);
  public void clearCache(boolean);
  public void clearFormData();
  public void clearHistory();
  public void clearMatches();
  public void clearSslPreferences();
  public void clearView();
  public void computeScroll();
  public void destroy();
  public void documentHasImages(android.os.Message);
  public void evaluateJavascript(java.lang.String, android.webkit.ValueCallback);
  public void findAllAsync(java.lang.String);
  public void findNext(boolean);
  public void flingScroll(int, int);
  public void freeMemory();
  public void goBack();
  public void goBackOrForward(int);
  public void goForward();
  public void invokeZoomPicker();
  public void loadData(java.lang.String, java.lang.String, java.lang.String);
  public void loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void loadUrl(java.lang.String);
  public void loadUrl(java.lang.String, java.util.Map);
  public void onChildViewAdded(android.view.View, android.view.View);
  public void onChildViewRemoved(android.view.View, android.view.View);
  public void onFinishTemporaryDetach();
  public void onGlobalFocusChanged(android.view.View, android.view.View);
  public void onPause();
  public void onProvideVirtualStructure(android.view.ViewStructure);
  public void onResume();
  public void onStartTemporaryDetach();
  public void onWindowFocusChanged(boolean);
  public void pauseTimers();
  public void postUrl(java.lang.String, byte[]);
  public void postVisualStateCallback(long, android.webkit.WebView$VisualStateCallback);
  public void postWebMessage(android.webkit.WebMessage, android.net.Uri);
  public void reload();
  public void removeJavascriptInterface(java.lang.String);
  public void requestFocusNodeHref(android.os.Message);
  public void requestImageRef(android.os.Message);
  public void resumeTimers();
  public void savePassword(java.lang.String, java.lang.String, java.lang.String);
  public void saveWebArchive(java.lang.String);
  public void saveWebArchive(java.lang.String, boolean, android.webkit.ValueCallback);
  public void setBackgroundColor(int);
  public void setCertificate(android.net.http.SslCertificate);
  public void setDownloadListener(android.webkit.DownloadListener);
  public void setFindListener(android.webkit.WebView$FindListener);
  public void setHorizontalScrollbarOverlay(boolean);
  public void setHttpAuthUsernamePassword(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void setInitialScale(int);
  public void setLayerType(int, android.graphics.Paint);
  public void setLayoutParams(android.view.ViewGroup$LayoutParams);
  public void setMapTrackballToArrowKeys(boolean);
  public void setNetworkAvailable(boolean);
  public void setOverScrollMode(int);
  public void setPictureListener(android.webkit.WebView$PictureListener);
  public void setScrollBarStyle(int);
  public void setVerticalScrollbarOverlay(boolean);
  public void setWebChromeClient(android.webkit.WebChromeClient);
  public void setWebViewClient(android.webkit.WebViewClient);
  public void stopLoading();
  public void zoomBy(float);
  public android.graphics.Bitmap getFavicon();
  public android.graphics.Picture capturePicture();
  public android.net.http.SslCertificate getCertificate();
  public android.os.Handler getHandler();
  public android.print.PrintDocumentAdapter createPrintDocumentAdapter();
  public android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String);
  public android.view.View findFocus();
  public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public android.webkit.WebBackForwardList copyBackForwardList();
  public android.webkit.WebBackForwardList restoreState(android.os.Bundle);
  public android.webkit.WebBackForwardList saveState(android.os.Bundle);
  public android.webkit.WebMessagePort[] createWebMessageChannel();
  public android.webkit.WebSettings getSettings();
  public android.webkit.WebView$HitTestResult getHitTestResult();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.String getOriginalUrl();
  public java.lang.String getTitle();
  public java.lang.String getUrl();
  public java.lang.String[] getHttpAuthUsernamePassword(java.lang.String, java.lang.String);
  protected int computeHorizontalScrollOffset();
  protected int computeHorizontalScrollRange();
  protected int computeVerticalScrollExtent();
  protected int computeVerticalScrollOffset();
  protected int computeVerticalScrollRange();
  protected void dispatchDraw(android.graphics.Canvas);
  protected void onAttachedToWindow();
  protected void onConfigurationChanged(android.content.res.Configuration);
  protected void onDraw(android.graphics.Canvas);
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onMeasure(int, int);
  protected void onOverScrolled(int, int, boolean, boolean);
  protected void onScrollChanged(int, int, int, int);
  protected void onSizeChanged(int, int, int, int);
  protected void onVisibilityChanged(android.view.View, int);
  protected void onWindowVisibilityChanged(int);
  public static final java.lang.String SCHEME_GEO;
  public static final java.lang.String SCHEME_MAILTO;
  public static final java.lang.String SCHEME_TEL;
}
public interface android.webkit.WebView$FindListener
{
  public abstract void onFindResultReceived(int, int, boolean);
}
public class android.webkit.WebView$HitTestResult
  extends java.lang.Object
{
  public int getType();
  public java.lang.String getExtra();
  public static final int ANCHOR_TYPE;
  public static final int EDIT_TEXT_TYPE;
  public static final int EMAIL_TYPE;
  public static final int GEO_TYPE;
  public static final int IMAGE_ANCHOR_TYPE;
  public static final int IMAGE_TYPE;
  public static final int PHONE_TYPE;
  public static final int SRC_ANCHOR_TYPE;
  public static final int SRC_IMAGE_ANCHOR_TYPE;
  public static final int UNKNOWN_TYPE;
}
public interface android.webkit.WebView$PictureListener
{
  public abstract void onNewPicture(android.webkit.WebView, android.graphics.Picture);
}
public abstract class android.webkit.WebView$VisualStateCallback
  extends java.lang.Object
{
  public void <init>();
  public abstract void onComplete(long);
}
public class android.webkit.WebView$WebViewTransport
  extends java.lang.Object
{
  public void <init>(android.webkit.WebView);
  public void setWebView(android.webkit.WebView);
  public android.webkit.WebView getWebView();
}
public class android.webkit.WebViewClient
  extends java.lang.Object
{
  public void <init>();
  public boolean shouldOverrideKeyEvent(android.webkit.WebView, android.view.KeyEvent);
  public boolean shouldOverrideUrlLoading(android.webkit.WebView, android.webkit.WebResourceRequest);
  public boolean shouldOverrideUrlLoading(android.webkit.WebView, java.lang.String);
  public void doUpdateVisitedHistory(android.webkit.WebView, java.lang.String, boolean);
  public void onFormResubmission(android.webkit.WebView, android.os.Message, android.os.Message);
  public void onLoadResource(android.webkit.WebView, java.lang.String);
  public void onPageCommitVisible(android.webkit.WebView, java.lang.String);
  public void onPageFinished(android.webkit.WebView, java.lang.String);
  public void onPageStarted(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);
  public void onReceivedClientCertRequest(android.webkit.WebView, android.webkit.ClientCertRequest);
  public void onReceivedError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceError);
  public void onReceivedError(android.webkit.WebView, int, java.lang.String, java.lang.String);
  public void onReceivedHttpAuthRequest(android.webkit.WebView, android.webkit.HttpAuthHandler, java.lang.String, java.lang.String);
  public void onReceivedHttpError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceResponse);
  public void onReceivedLoginRequest(android.webkit.WebView, java.lang.String, java.lang.String, java.lang.String);
  public void onReceivedSslError(android.webkit.WebView, android.webkit.SslErrorHandler, android.net.http.SslError);
  public void onScaleChanged(android.webkit.WebView, float, float);
  public void onTooManyRedirects(android.webkit.WebView, android.os.Message, android.os.Message);
  public void onUnhandledKeyEvent(android.webkit.WebView, android.view.KeyEvent);
  public android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView, android.webkit.WebResourceRequest);
  public android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView, java.lang.String);
  public static final int ERROR_AUTHENTICATION;
  public static final int ERROR_BAD_URL;
  public static final int ERROR_CONNECT;
  public static final int ERROR_FAILED_SSL_HANDSHAKE;
  public static final int ERROR_FILE;
  public static final int ERROR_FILE_NOT_FOUND;
  public static final int ERROR_HOST_LOOKUP;
  public static final int ERROR_IO;
  public static final int ERROR_PROXY_AUTHENTICATION;
  public static final int ERROR_REDIRECT_LOOP;
  public static final int ERROR_TIMEOUT;
  public static final int ERROR_TOO_MANY_REQUESTS;
  public static final int ERROR_UNKNOWN;
  public static final int ERROR_UNSUPPORTED_AUTH_SCHEME;
  public static final int ERROR_UNSUPPORTED_SCHEME;
}
public abstract class android.webkit.WebViewDatabase
  extends java.lang.Object
{
  public static android.webkit.WebViewDatabase getInstance(android.content.Context);
  public void <init>();
  public abstract boolean hasFormData();
  public abstract boolean hasHttpAuthUsernamePassword();
  public abstract boolean hasUsernamePassword();
  public abstract void clearFormData();
  public abstract void clearHttpAuthUsernamePassword();
  public abstract void clearUsernamePassword();
}
public class android.webkit.WebViewFragment
  extends android.app.Fragment
{
  public void <init>();
  public void onDestroy();
  public void onDestroyView();
  public void onPause();
  public void onResume();
  public android.view.View onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle);
  public android.webkit.WebView getWebView();
}
public abstract class android.widget.AbsListView
  extends android.widget.AdapterView
  implements android.text.TextWatcher, android.view.ViewTreeObserver$OnGlobalLayoutListener, android.widget.Filter$FilterListener, android.view.ViewTreeObserver$OnTouchModeChangeListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean canScrollList(int);
  public boolean checkInputConnectionProxy(android.view.View);
  public boolean hasTextFilter();
  public boolean isFastScrollAlwaysVisible();
  public boolean isFastScrollEnabled();
  public boolean isItemChecked(int);
  public boolean isScrollingCacheEnabled();
  public boolean isSmoothScrollbarEnabled();
  public boolean isStackFromBottom();
  public boolean isTextFilterEnabled();
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onInterceptHoverEvent(android.view.MotionEvent);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onNestedFling(android.view.View, float, float, boolean);
  public boolean onRemoteAdapterConnected();
  public boolean onStartNestedScroll(android.view.View, android.view.View, int);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean performItemClick(android.view.View, int, long);
  public boolean showContextMenu();
  public boolean showContextMenu(float, float);
  public boolean showContextMenuForChild(android.view.View);
  public boolean showContextMenuForChild(android.view.View, float, float);
  public boolean verifyDrawable(android.graphics.drawable.Drawable);
  public int getCacheColorHint();
  public int getCheckedItemCount();
  public int getCheckedItemPosition();
  public int getChoiceMode();
  public int getListPaddingBottom();
  public int getListPaddingLeft();
  public int getListPaddingRight();
  public int getListPaddingTop();
  public int getSolidColor();
  public int getTranscriptMode();
  public int getVerticalScrollbarWidth();
  public int pointToPosition(int, int);
  public long pointToRowId(int, int);
  public void addTouchables(java.util.ArrayList);
  public void afterTextChanged(android.text.Editable);
  public void beforeTextChanged(java.lang.CharSequence, int, int, int);
  public void clearChoices();
  public void clearTextFilter();
  public void deferNotifyDataSetChanged();
  public void dispatchDrawableHotspotChanged(float, float);
  public void draw(android.graphics.Canvas);
  public void fling(int);
  public void getFocusedRect(android.graphics.Rect);
  public void invalidateViews();
  public void jumpDrawablesToCurrentState();
  public void onCancelPendingInputEvents();
  public void onFilterComplete(int);
  public void onGlobalLayout();
  public void onInitializeAccessibilityNodeInfoForItem(android.view.View, int, android.view.accessibility.AccessibilityNodeInfo);
  public void onNestedScroll(android.view.View, int, int, int, int);
  public void onNestedScrollAccepted(android.view.View, android.view.View, int);
  public void onRemoteAdapterDisconnected();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void onRtlPropertiesChanged(int);
  public void onTextChanged(java.lang.CharSequence, int, int, int);
  public void onTouchModeChanged(boolean);
  public void onWindowFocusChanged(boolean);
  public void reclaimViews(java.util.List);
  public void requestDisallowInterceptTouchEvent(boolean);
  public void requestLayout();
  public void scrollListBy(int);
  public void setAdapter(android.widget.Adapter);
  public void setAdapter(android.widget.ListAdapter);
  public void setCacheColorHint(int);
  public void setChoiceMode(int);
  public void setDrawSelectorOnTop(boolean);
  public void setFastScrollAlwaysVisible(boolean);
  public void setFastScrollEnabled(boolean);
  public void setFastScrollStyle(int);
  public void setFilterText(java.lang.String);
  public void setFriction(float);
  public void setItemChecked(int, boolean);
  public void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener);
  public void setOnScrollListener(android.widget.AbsListView$OnScrollListener);
  public void setOverScrollMode(int);
  public void setRecyclerListener(android.widget.AbsListView$RecyclerListener);
  public void setRemoteViewsAdapter(android.content.Intent);
  public void setScrollBarStyle(int);
  public void setScrollIndicators(android.view.View, android.view.View);
  public void setScrollingCacheEnabled(boolean);
  public void setSelectionFromTop(int, int);
  public void setSelector(android.graphics.drawable.Drawable);
  public void setSelector(int);
  public void setSmoothScrollbarEnabled(boolean);
  public void setStackFromBottom(boolean);
  public void setTextFilterEnabled(boolean);
  public void setTranscriptMode(int);
  public void setVelocityScale(float);
  public void setVerticalScrollbarPosition(int);
  public void smoothScrollBy(int, int);
  public void smoothScrollToPosition(int);
  public void smoothScrollToPosition(int, int);
  public void smoothScrollToPositionFromTop(int, int);
  public void smoothScrollToPositionFromTop(int, int, int);
  public android.graphics.drawable.Drawable getSelector();
  public android.os.Parcelable onSaveInstanceState();
  public android.util.SparseBooleanArray getCheckedItemPositions();
  public android.view.View getSelectedView();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getTextFilter();
  public long[] getCheckedItemIds();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected boolean isInFilterMode();
  protected boolean isPaddingOffsetRequired();
  protected float getBottomFadingEdgeStrength();
  protected float getTopFadingEdgeStrength();
  protected int computeVerticalScrollExtent();
  protected int computeVerticalScrollOffset();
  protected int computeVerticalScrollRange();
  protected int getBottomPaddingOffset();
  protected int getLeftPaddingOffset();
  protected int getRightPaddingOffset();
  protected int getTopPaddingOffset();
  protected void dispatchDraw(android.graphics.Canvas);
  protected void dispatchSetPressed(boolean);
  protected void drawableStateChanged();
  protected void handleDataChanged();
  protected void layoutChildren();
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onDisplayHint(int);
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onOverScrolled(int, int, boolean, boolean);
  protected void onSizeChanged(int, int, int, int);
  protected android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  public static final int CHOICE_MODE_MULTIPLE;
  public static final int CHOICE_MODE_MULTIPLE_MODAL;
  public static final int CHOICE_MODE_NONE;
  public static final int CHOICE_MODE_SINGLE;
  public static final int TRANSCRIPT_MODE_ALWAYS_SCROLL;
  public static final int TRANSCRIPT_MODE_DISABLED;
  public static final int TRANSCRIPT_MODE_NORMAL;
}
public class android.widget.AbsListView$LayoutParams
  extends android.view.ViewGroup$LayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(int, int);
  public void <init>(int, int, int);
}
public interface android.widget.AbsListView$MultiChoiceModeListener
  extends android.view.ActionMode$Callback
{
  public abstract void onItemCheckedStateChanged(android.view.ActionMode, int, long, boolean);
}
public interface android.widget.AbsListView$OnScrollListener
{
  public abstract void onScroll(android.widget.AbsListView, int, int, int);
  public abstract void onScrollStateChanged(android.widget.AbsListView, int);
  public static final int SCROLL_STATE_FLING;
  public static final int SCROLL_STATE_IDLE;
  public static final int SCROLL_STATE_TOUCH_SCROLL;
}
public interface android.widget.AbsListView$RecyclerListener
{
  public abstract void onMovedToScrapHeap(android.view.View);
}
public interface android.widget.AbsListView$SelectionBoundsAdjuster
{
  public abstract void adjustListItemSelectionBounds(android.graphics.Rect);
}
public abstract class android.widget.AbsSeekBar
  extends android.widget.ProgressBar
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getSplitTrack();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public int getKeyProgressIncrement();
  public int getThumbOffset();
  public void drawableHotspotChanged(float, float);
  public void jumpDrawablesToCurrentState();
  public void onRtlPropertiesChanged(int);
  public void setKeyProgressIncrement(int);
  public void setMax(int);
  public void setSplitTrack(boolean);
  public void setThumb(android.graphics.drawable.Drawable);
  public void setThumbOffset(int);
  public void setThumbTintList(android.content.res.ColorStateList);
  public void setThumbTintMode(android.graphics.PorterDuff$Mode);
  public void setTickMark(android.graphics.drawable.Drawable);
  public void setTickMarkTintList(android.content.res.ColorStateList);
  public void setTickMarkTintMode(android.graphics.PorterDuff$Mode);
  public android.content.res.ColorStateList getThumbTintList();
  public android.content.res.ColorStateList getTickMarkTintList();
  public android.graphics.PorterDuff$Mode getThumbTintMode();
  public android.graphics.PorterDuff$Mode getTickMarkTintMode();
  public android.graphics.drawable.Drawable getThumb();
  public android.graphics.drawable.Drawable getTickMark();
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  protected void onDraw(android.graphics.Canvas);
  protected void onMeasure(int, int);
  protected void onSizeChanged(int, int, int, int);
}
public abstract class android.widget.AbsSpinner
  extends android.widget.AdapterView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public int getCount();
  public int pointToPosition(int, int);
  public void onRestoreInstanceState(android.os.Parcelable);
  public void requestLayout();
  public void setAdapter(android.widget.Adapter);
  public void setAdapter(android.widget.SpinnerAdapter);
  public void setSelection(int);
  public void setSelection(int, boolean);
  public android.os.Parcelable onSaveInstanceState();
  public android.view.View getSelectedView();
  public android.widget.Adapter getAdapter();
  public android.widget.SpinnerAdapter getAdapter();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void dispatchRestoreInstanceState(android.util.SparseArray);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
}
public class android.widget.AbsoluteLayout
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean shouldDelayChildPressedState();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
}
public class android.widget.AbsoluteLayout$LayoutParams
  extends android.view.ViewGroup$LayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(int, int, int, int);
  public java.lang.String debug(java.lang.String);
  public int x;
  public int y;
}
public class android.widget.ActionMenuView
  extends android.widget.LinearLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean hideOverflowMenu();
  public boolean isOverflowMenuShowing();
  public boolean showOverflowMenu();
  public int getPopupTheme();
  public void dismissPopupMenus();
  public void onConfigurationChanged(android.content.res.Configuration);
  public void onDetachedFromWindow();
  public void setOnMenuItemClickListener(android.widget.ActionMenuView$OnMenuItemClickListener);
  public void setOverflowIcon(android.graphics.drawable.Drawable);
  public void setPopupTheme(int);
  public android.graphics.drawable.Drawable getOverflowIcon();
  public android.view.Menu getMenu();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.ActionMenuView$LayoutParams generateDefaultLayoutParams();
  protected android.widget.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams();
  protected android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
}
public class android.widget.ActionMenuView$LayoutParams
  extends android.widget.LinearLayout$LayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.widget.ActionMenuView$LayoutParams);
  public void <init>(int, int);
}
public interface android.widget.ActionMenuView$OnMenuItemClickListener
{
  public abstract boolean onMenuItemClick(android.view.MenuItem);
}
public interface android.widget.Adapter
{
  public abstract boolean hasStableIds();
  public abstract boolean isEmpty();
  public abstract int getCount();
  public abstract int getItemViewType(int);
  public abstract int getViewTypeCount();
  public abstract long getItemId(int);
  public abstract void registerDataSetObserver(android.database.DataSetObserver);
  public abstract void unregisterDataSetObserver(android.database.DataSetObserver);
  public abstract android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public abstract java.lang.Object getItem(int);
  public static final int IGNORE_ITEM_VIEW_TYPE;
  public static final int NO_SELECTION;
}
public abstract class android.widget.AdapterView
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final android.widget.AdapterView$OnItemClickListener getOnItemClickListener();
  public final android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener();
  public final android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener();
  public abstract void setAdapter(android.widget.Adapter);
  public abstract void setSelection(int);
  public abstract android.view.View getSelectedView();
  public abstract android.widget.Adapter getAdapter();
  public boolean performItemClick(android.view.View, int, long);
  public int getCount();
  public int getFirstVisiblePosition();
  public int getLastVisiblePosition();
  public int getPositionForView(android.view.View);
  public int getSelectedItemPosition();
  public long getItemIdAtPosition(int);
  public long getSelectedItemId();
  public void addView(android.view.View);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void removeAllViews();
  public void removeView(android.view.View);
  public void removeViewAt(int);
  public void setEmptyView(android.view.View);
  public void setFocusable(boolean);
  public void setFocusableInTouchMode(boolean);
  public void setOnClickListener(android.view.View$OnClickListener);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener);
  public void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public android.view.View getEmptyView();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.Object getItemAtPosition(int);
  public java.lang.Object getSelectedItem();
  protected boolean canAnimate();
  protected void dispatchRestoreInstanceState(android.util.SparseArray);
  protected void dispatchSaveInstanceState(android.util.SparseArray);
  protected void onDetachedFromWindow();
  protected void onLayout(boolean, int, int, int, int);
  public static final int INVALID_POSITION;
  public static final int ITEM_VIEW_TYPE_HEADER_OR_FOOTER;
  public static final int ITEM_VIEW_TYPE_IGNORE;
  public static final long INVALID_ROW_ID;
}
public class android.widget.AdapterView$AdapterContextMenuInfo
  extends java.lang.Object
  implements android.view.ContextMenu$ContextMenuInfo
{
  public void <init>(android.view.View, int, long);
  public int position;
  public long id;
  public android.view.View targetView;
}
public interface android.widget.AdapterView$OnItemClickListener
{
  public abstract void onItemClick(android.widget.AdapterView, android.view.View, int, long);
}
public interface android.widget.AdapterView$OnItemLongClickListener
{
  public abstract boolean onItemLongClick(android.widget.AdapterView, android.view.View, int, long);
}
public interface android.widget.AdapterView$OnItemSelectedListener
{
  public abstract void onItemSelected(android.widget.AdapterView, android.view.View, int, long);
  public abstract void onNothingSelected(android.widget.AdapterView);
}
public abstract class android.widget.AdapterViewAnimator
  extends android.widget.AdapterView
  implements android.widget.Advanceable
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean onRemoteAdapterConnected();
  public boolean onTouchEvent(android.view.MotionEvent);
  public int getBaseline();
  public int getDisplayedChild();
  public void advance();
  public void deferNotifyDataSetChanged();
  public void fyiWillBeAdvancedByHostKThx();
  public void onRemoteAdapterDisconnected();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void setAdapter(android.widget.Adapter);
  public void setAnimateFirstView(boolean);
  public void setDisplayedChild(int);
  public void setInAnimation(android.animation.ObjectAnimator);
  public void setInAnimation(android.content.Context, int);
  public void setOutAnimation(android.animation.ObjectAnimator);
  public void setOutAnimation(android.content.Context, int);
  public void setRemoteViewsAdapter(android.content.Intent);
  public void setSelection(int);
  public void showNext();
  public void showPrevious();
  public android.animation.ObjectAnimator getInAnimation();
  public android.animation.ObjectAnimator getOutAnimation();
  public android.os.Parcelable onSaveInstanceState();
  public android.view.View getCurrentView();
  public android.view.View getSelectedView();
  public android.widget.Adapter getAdapter();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
}
public class android.widget.AdapterViewFlipper
  extends android.widget.AdapterViewAnimator
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isAutoStart();
  public boolean isFlipping();
  public int getFlipInterval();
  public void fyiWillBeAdvancedByHostKThx();
  public void setAdapter(android.widget.Adapter);
  public void setAutoStart(boolean);
  public void setFlipInterval(int);
  public void showNext();
  public void showPrevious();
  public void startFlipping();
  public void stopFlipping();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onWindowVisibilityChanged(int);
}
public interface android.widget.Advanceable
{
  public abstract void advance();
  public abstract void fyiWillBeAdvancedByHostKThx();
}
public class android.widget.AlphabetIndexer
  extends android.database.DataSetObserver
  implements android.widget.SectionIndexer
{
  public void <init>(android.database.Cursor, int, java.lang.CharSequence);
  public int getPositionForSection(int);
  public int getSectionForPosition(int);
  public void onChanged();
  public void onInvalidated();
  public void setCursor(android.database.Cursor);
  public java.lang.Object[] getSections();
  protected int compare(java.lang.String, java.lang.String);
  protected int mColumnIndex;
  protected android.database.Cursor mDataCursor;
  protected java.lang.CharSequence mAlphabet;
}
public class android.widget.AnalogClock
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onDraw(android.graphics.Canvas);
  protected void onMeasure(int, int);
  protected void onSizeChanged(int, int, int, int);
}
public class android.widget.ArrayAdapter
  extends android.widget.BaseAdapter
  implements android.widget.Filterable, android.widget.ThemedSpinnerAdapter
{
  public static android.widget.ArrayAdapter createFromResource(android.content.Context, int, int);
  public void <init>(android.content.Context, int);
  public void <init>(android.content.Context, int, int);
  public void <init>(android.content.Context, int, int, java.lang.Object[]);
  public void <init>(android.content.Context, int, int, java.util.List);
  public void <init>(android.content.Context, int, java.lang.Object[]);
  public void <init>(android.content.Context, int, java.util.List);
  public int getCount();
  public int getPosition(java.lang.Object);
  public long getItemId(int);
  public void add(java.lang.Object);
  public void addAll(java.lang.Object[]);
  public void addAll(java.util.Collection);
  public void clear();
  public void insert(java.lang.Object, int);
  public void notifyDataSetChanged();
  public void remove(java.lang.Object);
  public void setDropDownViewResource(int);
  public void setDropDownViewTheme(android.content.res.Resources$Theme);
  public void setNotifyOnChange(boolean);
  public void sort(java.util.Comparator);
  public android.content.Context getContext();
  public android.content.res.Resources$Theme getDropDownViewTheme();
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public android.widget.Filter getFilter();
  public java.lang.Object getItem(int);
}
public class android.widget.AutoCompleteTextView
  extends android.widget.EditText
  implements android.widget.Filter$FilterListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int, android.content.res.Resources$Theme);
  public boolean enoughToFilter();
  public boolean isPerformingCompletion();
  public boolean isPopupShowing();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public int getDropDownAnchor();
  public int getDropDownHeight();
  public int getDropDownHorizontalOffset();
  public int getDropDownVerticalOffset();
  public int getDropDownWidth();
  public int getListSelection();
  public int getThreshold();
  public void clearListSelection();
  public void dismissDropDown();
  public void onCommitCompletion(android.view.inputmethod.CompletionInfo);
  public void onFilterComplete(int);
  public void onWindowFocusChanged(boolean);
  public void performCompletion();
  public void performValidation();
  public void setAdapter(android.widget.ListAdapter);
  public void setCompletionHint(java.lang.CharSequence);
  public void setDropDownAnchor(int);
  public void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setDropDownBackgroundResource(int);
  public void setDropDownHeight(int);
  public void setDropDownHorizontalOffset(int);
  public void setDropDownVerticalOffset(int);
  public void setDropDownWidth(int);
  public void setListSelection(int);
  public void setOnClickListener(android.view.View$OnClickListener);
  public void setOnDismissListener(android.widget.AutoCompleteTextView$OnDismissListener);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public void setText(java.lang.CharSequence, boolean);
  public void setThreshold(int);
  public void setValidator(android.widget.AutoCompleteTextView$Validator);
  public void showDropDown();
  public android.graphics.drawable.Drawable getDropDownBackground();
  public android.widget.AdapterView$OnItemClickListener getItemClickListener();
  public android.widget.AdapterView$OnItemClickListener getOnItemClickListener();
  public android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener();
  public android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener();
  public android.widget.AutoCompleteTextView$Validator getValidator();
  public android.widget.ListAdapter getAdapter();
  public java.lang.CharSequence getCompletionHint();
  protected boolean setFrame(int, int, int, int);
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onDisplayHint(int);
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void performFiltering(java.lang.CharSequence, int);
  protected void replaceText(java.lang.CharSequence);
  protected android.widget.Filter getFilter();
  protected java.lang.CharSequence convertSelectionToString(java.lang.Object);
}
public interface android.widget.AutoCompleteTextView$OnDismissListener
{
  public abstract void onDismiss();
}
public interface android.widget.AutoCompleteTextView$Validator
{
  public abstract boolean isValid(java.lang.CharSequence);
  public abstract java.lang.CharSequence fixText(java.lang.CharSequence);
}
public abstract class android.widget.BaseAdapter
  extends java.lang.Object
  implements android.widget.ListAdapter, android.widget.SpinnerAdapter
{
  public void <init>();
  public boolean areAllItemsEnabled();
  public boolean hasStableIds();
  public boolean isEmpty();
  public boolean isEnabled(int);
  public int getItemViewType(int);
  public int getViewTypeCount();
  public void notifyDataSetChanged();
  public void notifyDataSetInvalidated();
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
}
public abstract class android.widget.BaseExpandableListAdapter
  extends java.lang.Object
  implements android.widget.ExpandableListAdapter, android.widget.HeterogeneousExpandableList
{
  public void <init>();
  public boolean areAllItemsEnabled();
  public boolean isEmpty();
  public int getChildType(int, int);
  public int getChildTypeCount();
  public int getGroupType(int);
  public int getGroupTypeCount();
  public long getCombinedChildId(long, long);
  public long getCombinedGroupId(long);
  public void notifyDataSetChanged();
  public void notifyDataSetInvalidated();
  public void onGroupCollapsed(int);
  public void onGroupExpanded(int);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
}
public class android.widget.Button
  extends android.widget.TextView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public java.lang.CharSequence getAccessibilityClassName();
}
public class android.widget.CalendarView
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getShowWeekNumber();
  public int getDateTextAppearance();
  public int getFirstDayOfWeek();
  public int getFocusedMonthDateColor();
  public int getSelectedWeekBackgroundColor();
  public int getShownWeekCount();
  public int getUnfocusedMonthDateColor();
  public int getWeekDayTextAppearance();
  public int getWeekNumberColor();
  public int getWeekSeparatorLineColor();
  public long getDate();
  public long getMaxDate();
  public long getMinDate();
  public void setDate(long);
  public void setDate(long, boolean, boolean);
  public void setDateTextAppearance(int);
  public void setFirstDayOfWeek(int);
  public void setFocusedMonthDateColor(int);
  public void setMaxDate(long);
  public void setMinDate(long);
  public void setOnDateChangeListener(android.widget.CalendarView$OnDateChangeListener);
  public void setSelectedDateVerticalBar(android.graphics.drawable.Drawable);
  public void setSelectedDateVerticalBar(int);
  public void setSelectedWeekBackgroundColor(int);
  public void setShowWeekNumber(boolean);
  public void setShownWeekCount(int);
  public void setUnfocusedMonthDateColor(int);
  public void setWeekDayTextAppearance(int);
  public void setWeekNumberColor(int);
  public void setWeekSeparatorLineColor(int);
  public android.graphics.drawable.Drawable getSelectedDateVerticalBar();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onConfigurationChanged(android.content.res.Configuration);
}
public interface android.widget.CalendarView$OnDateChangeListener
{
  public abstract void onSelectedDayChange(android.widget.CalendarView, int, int, int);
}
public class android.widget.CheckBox
  extends android.widget.CompoundButton
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public java.lang.CharSequence getAccessibilityClassName();
}
public interface android.widget.Checkable
{
  public abstract boolean isChecked();
  public abstract void setChecked(boolean);
  public abstract void toggle();
}
public class android.widget.CheckedTextView
  extends android.widget.TextView
  implements android.widget.Checkable
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isChecked();
  public void drawableHotspotChanged(float, float);
  public void jumpDrawablesToCurrentState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void onRtlPropertiesChanged(int);
  public void setCheckMarkDrawable(android.graphics.drawable.Drawable);
  public void setCheckMarkDrawable(int);
  public void setCheckMarkTintList(android.content.res.ColorStateList);
  public void setCheckMarkTintMode(android.graphics.PorterDuff$Mode);
  public void setChecked(boolean);
  public void setVisibility(int);
  public void toggle();
  public android.content.res.ColorStateList getCheckMarkTintList();
  public android.graphics.PorterDuff$Mode getCheckMarkTintMode();
  public android.graphics.drawable.Drawable getCheckMarkDrawable();
  public android.os.Parcelable onSaveInstanceState();
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  protected void onDraw(android.graphics.Canvas);
  protected int[] onCreateDrawableState(int);
}
public class android.widget.Chronometer
  extends android.widget.TextView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isCountDown();
  public long getBase();
  public void setBase(long);
  public void setCountDown(boolean);
  public void setFormat(java.lang.String);
  public void setOnChronometerTickListener(android.widget.Chronometer$OnChronometerTickListener);
  public void start();
  public void stop();
  public android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getContentDescription();
  public java.lang.String getFormat();
  protected void onDetachedFromWindow();
  protected void onWindowVisibilityChanged(int);
}
public interface android.widget.Chronometer$OnChronometerTickListener
{
  public abstract void onChronometerTick(android.widget.Chronometer);
}
public abstract class android.widget.CompoundButton
  extends android.widget.Button
  implements android.widget.Checkable
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isChecked();
  public boolean performClick();
  public int getCompoundPaddingLeft();
  public int getCompoundPaddingRight();
  public void drawableHotspotChanged(float, float);
  public void jumpDrawablesToCurrentState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void setButtonDrawable(android.graphics.drawable.Drawable);
  public void setButtonDrawable(int);
  public void setButtonTintList(android.content.res.ColorStateList);
  public void setButtonTintMode(android.graphics.PorterDuff$Mode);
  public void setChecked(boolean);
  public void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener);
  public void toggle();
  public android.content.res.ColorStateList getButtonTintList();
  public android.graphics.PorterDuff$Mode getButtonTintMode();
  public android.graphics.drawable.Drawable getButtonDrawable();
  public android.os.Parcelable onSaveInstanceState();
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  protected void onDraw(android.graphics.Canvas);
  protected int[] onCreateDrawableState(int);
}
public interface android.widget.CompoundButton$OnCheckedChangeListener
{
  public abstract void onCheckedChanged(android.widget.CompoundButton, boolean);
}
public abstract class android.widget.CursorAdapter
  extends android.widget.BaseAdapter
  implements android.widget.Filterable, android.widget.ThemedSpinnerAdapter
{
  public void <init>(android.content.Context, android.database.Cursor);
  public void <init>(android.content.Context, android.database.Cursor, boolean);
  public void <init>(android.content.Context, android.database.Cursor, int);
  public abstract void bindView(android.view.View, android.content.Context, android.database.Cursor);
  public abstract android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public boolean hasStableIds();
  public int getCount();
  public long getItemId(int);
  public void changeCursor(android.database.Cursor);
  public void setDropDownViewTheme(android.content.res.Resources$Theme);
  public void setFilterQueryProvider(android.widget.FilterQueryProvider);
  public android.content.res.Resources$Theme getDropDownViewTheme();
  public android.database.Cursor getCursor();
  public android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence);
  public android.database.Cursor swapCursor(android.database.Cursor);
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public android.view.View newDropDownView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public android.widget.Filter getFilter();
  public android.widget.FilterQueryProvider getFilterQueryProvider();
  public java.lang.CharSequence convertToString(android.database.Cursor);
  public java.lang.Object getItem(int);
  protected void init(android.content.Context, android.database.Cursor, boolean);
  protected void onContentChanged();
  public static final int FLAG_AUTO_REQUERY;
  public static final int FLAG_REGISTER_CONTENT_OBSERVER;
}
public abstract class android.widget.CursorTreeAdapter
  extends android.widget.BaseExpandableListAdapter
  implements android.widget.Filterable
{
  public void <init>(android.database.Cursor, android.content.Context);
  public void <init>(android.database.Cursor, android.content.Context, boolean);
  public boolean hasStableIds();
  public boolean isChildSelectable(int, int);
  public int getChildrenCount(int);
  public int getGroupCount();
  public long getChildId(int, int);
  public long getGroupId(int);
  public void changeCursor(android.database.Cursor);
  public void notifyDataSetChanged();
  public void notifyDataSetChanged(boolean);
  public void notifyDataSetInvalidated();
  public void onGroupCollapsed(int);
  public void setChildrenCursor(int, android.database.Cursor);
  public void setFilterQueryProvider(android.widget.FilterQueryProvider);
  public void setGroupCursor(android.database.Cursor);
  public android.database.Cursor getChild(int, int);
  public android.database.Cursor getCursor();
  public android.database.Cursor getGroup(int);
  public android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence);
  public android.view.View getChildView(int, int, boolean, android.view.View, android.view.ViewGroup);
  public android.view.View getGroupView(int, boolean, android.view.View, android.view.ViewGroup);
  public android.widget.Filter getFilter();
  public android.widget.FilterQueryProvider getFilterQueryProvider();
  public java.lang.Object getChild(int, int);
  public java.lang.Object getGroup(int);
  public java.lang.String convertToString(android.database.Cursor);
  protected abstract void bindChildView(android.view.View, android.content.Context, android.database.Cursor, boolean);
  protected abstract void bindGroupView(android.view.View, android.content.Context, android.database.Cursor, boolean);
  protected abstract android.database.Cursor getChildrenCursor(android.database.Cursor);
  protected abstract android.view.View newChildView(android.content.Context, android.database.Cursor, boolean, android.view.ViewGroup);
  protected abstract android.view.View newGroupView(android.content.Context, android.database.Cursor, boolean, android.view.ViewGroup);
}
public class android.widget.DatePicker
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getCalendarViewShown();
  public boolean getSpinnersShown();
  public boolean isEnabled();
  public int getDayOfMonth();
  public int getFirstDayOfWeek();
  public int getMonth();
  public int getYear();
  public long getMaxDate();
  public long getMinDate();
  public void init(int, int, int, android.widget.DatePicker$OnDateChangedListener);
  public void setCalendarViewShown(boolean);
  public void setEnabled(boolean);
  public void setFirstDayOfWeek(int);
  public void setMaxDate(long);
  public void setMinDate(long);
  public void setSpinnersShown(boolean);
  public void updateDate(int, int, int);
  public android.widget.CalendarView getCalendarView();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void dispatchRestoreInstanceState(android.util.SparseArray);
  protected void onConfigurationChanged(android.content.res.Configuration);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected android.os.Parcelable onSaveInstanceState();
}
public interface android.widget.DatePicker$OnDateChangedListener
{
  public abstract void onDateChanged(android.widget.DatePicker, int, int, int);
}
public class android.widget.DialerFilter
  extends android.widget.RelativeLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean isQwertyKeyboard();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public int getMode();
  public void append(java.lang.String);
  public void clearText();
  public void removeFilterWatcher(android.text.TextWatcher);
  public void setDigitsWatcher(android.text.TextWatcher);
  public void setFilterWatcher(android.text.TextWatcher);
  public void setLettersWatcher(android.text.TextWatcher);
  public void setMode(int);
  public java.lang.CharSequence getDigits();
  public java.lang.CharSequence getFilterText();
  public java.lang.CharSequence getLetters();
  protected void onFinishInflate();
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onModeChange(int, int);
  public static final int DIGITS_AND_LETTERS;
  public static final int DIGITS_AND_LETTERS_NO_DIGITS;
  public static final int DIGITS_AND_LETTERS_NO_LETTERS;
  public static final int DIGITS_ONLY;
  public static final int LETTERS_ONLY;
}
public class android.widget.DigitalClock
  extends android.widget.TextView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
}
public class android.widget.EdgeEffect
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public boolean draw(android.graphics.Canvas);
  public boolean isFinished();
  public int getColor();
  public int getMaxHeight();
  public void finish();
  public void onAbsorb(int);
  public void onPull(float);
  public void onPull(float, float);
  public void onRelease();
  public void setColor(int);
  public void setSize(int, int);
}
public class android.widget.EditText
  extends android.widget.TextView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getFreezesText();
  public void extendSelection(int);
  public void selectAll();
  public void setEllipsize(android.text.TextUtils$TruncateAt);
  public void setSelection(int);
  public void setSelection(int, int);
  public void setText(java.lang.CharSequence, android.widget.TextView$BufferType);
  public android.text.Editable getText();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getText();
  protected boolean getDefaultEditable();
  protected android.text.method.MovementMethod getDefaultMovementMethod();
}
public interface android.widget.ExpandableListAdapter
{
  public abstract boolean areAllItemsEnabled();
  public abstract boolean hasStableIds();
  public abstract boolean isChildSelectable(int, int);
  public abstract boolean isEmpty();
  public abstract int getChildrenCount(int);
  public abstract int getGroupCount();
  public abstract long getChildId(int, int);
  public abstract long getCombinedChildId(long, long);
  public abstract long getCombinedGroupId(long);
  public abstract long getGroupId(int);
  public abstract void onGroupCollapsed(int);
  public abstract void onGroupExpanded(int);
  public abstract void registerDataSetObserver(android.database.DataSetObserver);
  public abstract void unregisterDataSetObserver(android.database.DataSetObserver);
  public abstract android.view.View getChildView(int, int, boolean, android.view.View, android.view.ViewGroup);
  public abstract android.view.View getGroupView(int, boolean, android.view.View, android.view.ViewGroup);
  public abstract java.lang.Object getChild(int, int);
  public abstract java.lang.Object getGroup(int);
}
public class android.widget.ExpandableListView
  extends android.widget.ListView
{
  public static int getPackedPositionChild(long);
  public static int getPackedPositionGroup(long);
  public static int getPackedPositionType(long);
  public static long getPackedPositionForChild(int, int);
  public static long getPackedPositionForGroup(int);
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean collapseGroup(int);
  public boolean expandGroup(int);
  public boolean expandGroup(int, boolean);
  public boolean isGroupExpanded(int);
  public boolean performItemClick(android.view.View, int, long);
  public boolean setSelectedChild(int, int, boolean);
  public int getFlatListPosition(long);
  public long getExpandableListPosition(int);
  public long getSelectedId();
  public long getSelectedPosition();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void onRtlPropertiesChanged(int);
  public void setAdapter(android.widget.Adapter);
  public void setAdapter(android.widget.ExpandableListAdapter);
  public void setAdapter(android.widget.ListAdapter);
  public void setChildDivider(android.graphics.drawable.Drawable);
  public void setChildIndicator(android.graphics.drawable.Drawable);
  public void setChildIndicatorBounds(int, int);
  public void setChildIndicatorBoundsRelative(int, int);
  public void setGroupIndicator(android.graphics.drawable.Drawable);
  public void setIndicatorBounds(int, int);
  public void setIndicatorBoundsRelative(int, int);
  public void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener);
  public void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener);
  public void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener);
  public void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setSelectedGroup(int);
  public android.os.Parcelable onSaveInstanceState();
  public android.widget.Adapter getAdapter();
  public android.widget.ExpandableListAdapter getExpandableListAdapter();
  public android.widget.ListAdapter getAdapter();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void dispatchDraw(android.graphics.Canvas);
  public static final int CHILD_INDICATOR_INHERIT;
  public static final int PACKED_POSITION_TYPE_CHILD;
  public static final int PACKED_POSITION_TYPE_GROUP;
  public static final int PACKED_POSITION_TYPE_NULL;
  public static final long PACKED_POSITION_VALUE_NULL;
}
public class android.widget.ExpandableListView$ExpandableListContextMenuInfo
  extends java.lang.Object
  implements android.view.ContextMenu$ContextMenuInfo
{
  public void <init>(android.view.View, long, long);
  public long id;
  public long packedPosition;
  public android.view.View targetView;
}
public interface android.widget.ExpandableListView$OnChildClickListener
{
  public abstract boolean onChildClick(android.widget.ExpandableListView, android.view.View, int, int, long);
}
public interface android.widget.ExpandableListView$OnGroupClickListener
{
  public abstract boolean onGroupClick(android.widget.ExpandableListView, android.view.View, int, long);
}
public interface android.widget.ExpandableListView$OnGroupCollapseListener
{
  public abstract void onGroupCollapse(int);
}
public interface android.widget.ExpandableListView$OnGroupExpandListener
{
  public abstract void onGroupExpand(int);
}
public abstract class android.widget.Filter
  extends java.lang.Object
{
  public void <init>();
  public final void filter(java.lang.CharSequence);
  public final void filter(java.lang.CharSequence, android.widget.Filter$FilterListener);
  public java.lang.CharSequence convertResultToString(java.lang.Object);
  protected abstract void publishResults(java.lang.CharSequence, android.widget.Filter$FilterResults);
  protected abstract android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence);
}
public interface android.widget.Filter$FilterListener
{
  public abstract void onFilterComplete(int);
}
public class android.widget.Filter$FilterResults
  extends java.lang.Object
{
  public void <init>();
  public int count;
  public java.lang.Object values;
}
public interface android.widget.FilterQueryProvider
{
  public abstract android.database.Cursor runQuery(java.lang.CharSequence);
}
public interface android.widget.Filterable
{
  public abstract android.widget.Filter getFilter();
}
public class android.widget.FrameLayout
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getConsiderGoneChildrenWhenMeasuring();
  public boolean getMeasureAllChildren();
  public boolean shouldDelayChildPressedState();
  public void setForegroundGravity(int);
  public void setMeasureAllChildren(boolean);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams();
}
public class android.widget.FrameLayout$LayoutParams
  extends android.view.ViewGroup$MarginLayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(android.widget.FrameLayout$LayoutParams);
  public void <init>(int, int);
  public void <init>(int, int, int);
  public static final int UNSPECIFIED_GRAVITY;
  public int gravity;
}
public class android.widget.Gallery
  extends android.widget.AbsSpinner
  implements android.view.GestureDetector$OnGestureListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean onDown(android.view.MotionEvent);
  public boolean onFling(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float);
  public boolean onSingleTapUp(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean showContextMenu();
  public boolean showContextMenu(float, float);
  public boolean showContextMenuForChild(android.view.View);
  public boolean showContextMenuForChild(android.view.View, float, float);
  public void dispatchSetSelected(boolean);
  public void onLongPress(android.view.MotionEvent);
  public void onShowPress(android.view.MotionEvent);
  public void setAnimationDuration(int);
  public void setCallbackDuringFling(boolean);
  public void setGravity(int);
  public void setSpacing(int);
  public void setUnselectedAlpha(float);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected boolean getChildStaticTransformation(android.view.View, android.view.animation.Transformation);
  protected int computeHorizontalScrollExtent();
  protected int computeHorizontalScrollOffset();
  protected int computeHorizontalScrollRange();
  protected int getChildDrawingOrder(int, int);
  protected void dispatchSetPressed(boolean);
  protected void onAttachedToWindow();
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onLayout(boolean, int, int, int, int);
  protected android.view.ContextMenu$ContextMenuInfo getContextMenuInfo();
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
}
public class android.widget.Gallery$LayoutParams
  extends android.view.ViewGroup$LayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(int, int);
}
public class android.widget.GridLayout
  extends android.view.ViewGroup
{
  public static android.widget.GridLayout$Spec spec(int);
  public static android.widget.GridLayout$Spec spec(int, android.widget.GridLayout$Alignment);
  public static android.widget.GridLayout$Spec spec(int, android.widget.GridLayout$Alignment, float);
  public static android.widget.GridLayout$Spec spec(int, float);
  public static android.widget.GridLayout$Spec spec(int, int);
  public static android.widget.GridLayout$Spec spec(int, int, android.widget.GridLayout$Alignment);
  public static android.widget.GridLayout$Spec spec(int, int, android.widget.GridLayout$Alignment, float);
  public static android.widget.GridLayout$Spec spec(int, int, float);
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getUseDefaultMargins();
  public boolean isColumnOrderPreserved();
  public boolean isRowOrderPreserved();
  public int getAlignmentMode();
  public int getColumnCount();
  public int getOrientation();
  public int getRowCount();
  public void onViewAdded(android.view.View);
  public void onViewRemoved(android.view.View);
  public void requestLayout();
  public void setAlignmentMode(int);
  public void setColumnCount(int);
  public void setColumnOrderPreserved(boolean);
  public void setOrientation(int);
  public void setRowCount(int);
  public void setRowOrderPreserved(boolean);
  public void setUseDefaultMargins(boolean);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.GridLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.GridLayout$LayoutParams generateDefaultLayoutParams();
  protected android.widget.GridLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  public static final int ALIGN_BOUNDS;
  public static final int ALIGN_MARGINS;
  public static final int HORIZONTAL;
  public static final int UNDEFINED;
  public static final int VERTICAL;
  public static final android.widget.GridLayout$Alignment BASELINE;
  public static final android.widget.GridLayout$Alignment BOTTOM;
  public static final android.widget.GridLayout$Alignment CENTER;
  public static final android.widget.GridLayout$Alignment END;
  public static final android.widget.GridLayout$Alignment FILL;
  public static final android.widget.GridLayout$Alignment LEFT;
  public static final android.widget.GridLayout$Alignment RIGHT;
  public static final android.widget.GridLayout$Alignment START;
  public static final android.widget.GridLayout$Alignment TOP;
}
public abstract class android.widget.GridLayout$Alignment
  extends java.lang.Object
{
}
public class android.widget.GridLayout$LayoutParams
  extends android.view.ViewGroup$MarginLayoutParams
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(android.widget.GridLayout$LayoutParams);
  public void <init>(android.widget.GridLayout$Spec, android.widget.GridLayout$Spec);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void setGravity(int);
  protected void setBaseAttributes(android.content.res.TypedArray, int, int);
  public android.widget.GridLayout$Spec columnSpec;
  public android.widget.GridLayout$Spec rowSpec;
}
public class android.widget.GridLayout$Spec
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public int hashCode();
}
public class android.widget.GridView
  extends android.widget.AbsListView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public int getColumnWidth();
  public int getGravity();
  public int getHorizontalSpacing();
  public int getNumColumns();
  public int getRequestedColumnWidth();
  public int getRequestedHorizontalSpacing();
  public int getStretchMode();
  public int getVerticalSpacing();
  public void onInitializeAccessibilityNodeInfoForItem(android.view.View, int, android.view.accessibility.AccessibilityNodeInfo);
  public void setAdapter(android.widget.Adapter);
  public void setAdapter(android.widget.ListAdapter);
  public void setColumnWidth(int);
  public void setGravity(int);
  public void setHorizontalSpacing(int);
  public void setNumColumns(int);
  public void setRemoteViewsAdapter(android.content.Intent);
  public void setSelection(int);
  public void setStretchMode(int);
  public void setVerticalSpacing(int);
  public void smoothScrollByOffset(int);
  public void smoothScrollToPosition(int);
  public android.widget.Adapter getAdapter();
  public android.widget.ListAdapter getAdapter();
  public java.lang.CharSequence getAccessibilityClassName();
  protected int computeVerticalScrollExtent();
  protected int computeVerticalScrollOffset();
  protected int computeVerticalScrollRange();
  protected void attachLayoutAnimationParameters(android.view.View, android.view.ViewGroup$LayoutParams, int, int);
  protected void layoutChildren();
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onMeasure(int, int);
  public static final int AUTO_FIT;
  public static final int NO_STRETCH;
  public static final int STRETCH_COLUMN_WIDTH;
  public static final int STRETCH_SPACING;
  public static final int STRETCH_SPACING_UNIFORM;
}
public class android.widget.HeaderViewListAdapter
  extends java.lang.Object
  implements android.widget.WrapperListAdapter, android.widget.Filterable
{
  public void <init>(java.util.ArrayList, java.util.ArrayList, android.widget.ListAdapter);
  public boolean areAllItemsEnabled();
  public boolean hasStableIds();
  public boolean isEmpty();
  public boolean isEnabled(int);
  public boolean removeFooter(android.view.View);
  public boolean removeHeader(android.view.View);
  public int getCount();
  public int getFootersCount();
  public int getHeadersCount();
  public int getItemViewType(int);
  public int getViewTypeCount();
  public long getItemId(int);
  public void registerDataSetObserver(android.database.DataSetObserver);
  public void unregisterDataSetObserver(android.database.DataSetObserver);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public android.widget.Filter getFilter();
  public android.widget.ListAdapter getWrappedAdapter();
  public java.lang.Object getItem(int);
}
public interface android.widget.HeterogeneousExpandableList
{
  public abstract int getChildType(int, int);
  public abstract int getChildTypeCount();
  public abstract int getGroupType(int);
  public abstract int getGroupTypeCount();
}
public class android.widget.HorizontalScrollView
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final void smoothScrollBy(int, int);
  public final void smoothScrollTo(int, int);
  public boolean arrowScroll(int);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean executeKeyEvent(android.view.KeyEvent);
  public boolean fullScroll(int);
  public boolean isFillViewport();
  public boolean isSmoothScrollingEnabled();
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean pageScroll(int);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public boolean shouldDelayChildPressedState();
  public int getMaxScrollAmount();
  public void addView(android.view.View);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void computeScroll();
  public void draw(android.graphics.Canvas);
  public void fling(int);
  public void requestChildFocus(android.view.View, android.view.View);
  public void requestDisallowInterceptTouchEvent(boolean);
  public void requestLayout();
  public void scrollTo(int, int);
  public void setFillViewport(boolean);
  public void setOverScrollMode(int);
  public void setSmoothScrollingEnabled(boolean);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean onRequestFocusInDescendants(int, android.graphics.Rect);
  protected float getLeftFadingEdgeStrength();
  protected float getRightFadingEdgeStrength();
  protected int computeHorizontalScrollOffset();
  protected int computeHorizontalScrollRange();
  protected int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect);
  protected void measureChild(android.view.View, int, int);
  protected void measureChildWithMargins(android.view.View, int, int, int, int);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onOverScrolled(int, int, boolean, boolean);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void onSizeChanged(int, int, int, int);
  protected android.os.Parcelable onSaveInstanceState();
}
public class android.widget.ImageButton
  extends android.widget.ImageView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean onSetAlpha(int);
}
public class android.widget.ImageSwitcher
  extends android.widget.ViewSwitcher
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void setImageDrawable(android.graphics.drawable.Drawable);
  public void setImageResource(int);
  public void setImageURI(android.net.Uri);
  public java.lang.CharSequence getAccessibilityClassName();
}
public class android.widget.ImageView
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final void clearColorFilter();
  public final void setColorFilter(int);
  public final void setColorFilter(int, android.graphics.PorterDuff$Mode);
  public boolean getAdjustViewBounds();
  public boolean getBaselineAlignBottom();
  public boolean getCropToPadding();
  public boolean hasOverlappingRendering();
  public boolean isOpaque();
  public int getBaseline();
  public int getImageAlpha();
  public int getMaxHeight();
  public int getMaxWidth();
  public void drawableHotspotChanged(float, float);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void jumpDrawablesToCurrentState();
  public void onRtlPropertiesChanged(int);
  public void onVisibilityAggregated(boolean);
  public void setAdjustViewBounds(boolean);
  public void setAlpha(int);
  public void setBaseline(int);
  public void setBaselineAlignBottom(boolean);
  public void setColorFilter(android.graphics.ColorFilter);
  public void setCropToPadding(boolean);
  public void setImageAlpha(int);
  public void setImageBitmap(android.graphics.Bitmap);
  public void setImageDrawable(android.graphics.drawable.Drawable);
  public void setImageIcon(android.graphics.drawable.Icon);
  public void setImageLevel(int);
  public void setImageMatrix(android.graphics.Matrix);
  public void setImageResource(int);
  public void setImageState(int[], boolean);
  public void setImageTintList(android.content.res.ColorStateList);
  public void setImageTintMode(android.graphics.PorterDuff$Mode);
  public void setImageURI(android.net.Uri);
  public void setMaxHeight(int);
  public void setMaxWidth(int);
  public void setScaleType(android.widget.ImageView$ScaleType);
  public void setSelected(boolean);
  public android.content.res.ColorStateList getImageTintList();
  public android.graphics.ColorFilter getColorFilter();
  public android.graphics.Matrix getImageMatrix();
  public android.graphics.PorterDuff$Mode getImageTintMode();
  public android.graphics.drawable.Drawable getDrawable();
  public android.widget.ImageView$ScaleType getScaleType();
  public int[] onCreateDrawableState(int);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean setFrame(int, int, int, int);
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  protected void onDraw(android.graphics.Canvas);
  protected void onMeasure(int, int);
}
public final class android.widget.ImageView$ScaleType
  extends java.lang.Enum
{
  public static android.widget.ImageView$ScaleType valueOf(java.lang.String);
  public static android.widget.ImageView$ScaleType[] values();
  public static final android.widget.ImageView$ScaleType CENTER;
  public static final android.widget.ImageView$ScaleType CENTER_CROP;
  public static final android.widget.ImageView$ScaleType CENTER_INSIDE;
  public static final android.widget.ImageView$ScaleType FIT_CENTER;
  public static final android.widget.ImageView$ScaleType FIT_END;
  public static final android.widget.ImageView$ScaleType FIT_START;
  public static final android.widget.ImageView$ScaleType FIT_XY;
  public static final android.widget.ImageView$ScaleType MATRIX;
}
public class android.widget.LinearLayout
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isBaselineAligned();
  public boolean isMeasureWithLargestChildEnabled();
  public boolean shouldDelayChildPressedState();
  public float getWeightSum();
  public int getBaseline();
  public int getBaselineAlignedChildIndex();
  public int getDividerPadding();
  public int getGravity();
  public int getOrientation();
  public int getShowDividers();
  public void onRtlPropertiesChanged(int);
  public void setBaselineAligned(boolean);
  public void setBaselineAlignedChildIndex(int);
  public void setDividerDrawable(android.graphics.drawable.Drawable);
  public void setDividerPadding(int);
  public void setGravity(int);
  public void setHorizontalGravity(int);
  public void setMeasureWithLargestChildEnabled(boolean);
  public void setOrientation(int);
  public void setShowDividers(int);
  public void setVerticalGravity(int);
  public void setWeightSum(float);
  public android.graphics.drawable.Drawable getDividerDrawable();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onDraw(android.graphics.Canvas);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams();
  protected android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  public static final int HORIZONTAL;
  public static final int SHOW_DIVIDER_BEGINNING;
  public static final int SHOW_DIVIDER_END;
  public static final int SHOW_DIVIDER_MIDDLE;
  public static final int SHOW_DIVIDER_NONE;
  public static final int VERTICAL;
}
public class android.widget.LinearLayout$LayoutParams
  extends android.view.ViewGroup$MarginLayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(android.widget.LinearLayout$LayoutParams);
  public void <init>(int, int);
  public void <init>(int, int, float);
  public java.lang.String debug(java.lang.String);
  public float weight;
  public int gravity;
}
public interface android.widget.ListAdapter
  extends android.widget.Adapter
{
  public abstract boolean areAllItemsEnabled();
  public abstract boolean isEnabled(int);
}
public class android.widget.ListPopupWindow
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isInputMethodNotNeeded();
  public boolean isModal();
  public boolean isShowing();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean performItemClick(int);
  public int getAnimationStyle();
  public int getHeight();
  public int getHorizontalOffset();
  public int getInputMethodMode();
  public int getPromptPosition();
  public int getSelectedItemPosition();
  public int getSoftInputMode();
  public int getVerticalOffset();
  public int getWidth();
  public long getSelectedItemId();
  public void clearListSelection();
  public void dismiss();
  public void postShow();
  public void setAdapter(android.widget.ListAdapter);
  public void setAnchorView(android.view.View);
  public void setAnimationStyle(int);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setContentWidth(int);
  public void setDropDownGravity(int);
  public void setHeight(int);
  public void setHorizontalOffset(int);
  public void setInputMethodMode(int);
  public void setListSelector(android.graphics.drawable.Drawable);
  public void setModal(boolean);
  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
  public void setPromptPosition(int);
  public void setPromptView(android.view.View);
  public void setSelection(int);
  public void setSoftInputMode(int);
  public void setVerticalOffset(int);
  public void setWidth(int);
  public void setWindowLayoutType(int);
  public void show();
  public android.graphics.drawable.Drawable getBackground();
  public android.view.View getAnchorView();
  public android.view.View getSelectedView();
  public android.view.View$OnTouchListener createDragToOpenListener(android.view.View);
  public android.widget.ListView getListView();
  public java.lang.Object getSelectedItem();
  public static final int INPUT_METHOD_FROM_FOCUSABLE;
  public static final int INPUT_METHOD_NEEDED;
  public static final int INPUT_METHOD_NOT_NEEDED;
  public static final int MATCH_PARENT;
  public static final int POSITION_PROMPT_ABOVE;
  public static final int POSITION_PROMPT_BELOW;
  public static final int WRAP_CONTENT;
}
public class android.widget.ListView
  extends android.widget.AbsListView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean areFooterDividersEnabled();
  public boolean areHeaderDividersEnabled();
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean getItemsCanFocus();
  public boolean isOpaque();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean removeFooterView(android.view.View);
  public boolean removeHeaderView(android.view.View);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public int getDividerHeight();
  public int getFooterViewsCount();
  public int getHeaderViewsCount();
  public int getMaxScrollAmount();
  public void addFooterView(android.view.View);
  public void addFooterView(android.view.View, java.lang.Object, boolean);
  public void addHeaderView(android.view.View);
  public void addHeaderView(android.view.View, java.lang.Object, boolean);
  public void onInitializeAccessibilityNodeInfoForItem(android.view.View, int, android.view.accessibility.AccessibilityNodeInfo);
  public void setAdapter(android.widget.Adapter);
  public void setAdapter(android.widget.ListAdapter);
  public void setCacheColorHint(int);
  public void setDivider(android.graphics.drawable.Drawable);
  public void setDividerHeight(int);
  public void setFooterDividersEnabled(boolean);
  public void setHeaderDividersEnabled(boolean);
  public void setItemsCanFocus(boolean);
  public void setOverscrollFooter(android.graphics.drawable.Drawable);
  public void setOverscrollHeader(android.graphics.drawable.Drawable);
  public void setRemoteViewsAdapter(android.content.Intent);
  public void setSelection(int);
  public void setSelectionAfterHeaderView();
  public void smoothScrollByOffset(int);
  public void smoothScrollToPosition(int);
  public android.graphics.drawable.Drawable getDivider();
  public android.graphics.drawable.Drawable getOverscrollFooter();
  public android.graphics.drawable.Drawable getOverscrollHeader();
  public android.widget.Adapter getAdapter();
  public android.widget.ListAdapter getAdapter();
  public java.lang.CharSequence getAccessibilityClassName();
  public long[] getCheckItemIds();
  protected boolean canAnimate();
  protected boolean drawChild(android.graphics.Canvas, android.view.View, long);
  protected void dispatchDraw(android.graphics.Canvas);
  protected void layoutChildren();
  protected void onDetachedFromWindow();
  protected void onFinishInflate();
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onMeasure(int, int);
  protected void onSizeChanged(int, int, int, int);
  protected android.view.View findViewTraversal(int);
  protected android.view.View findViewWithTagTraversal(java.lang.Object);
}
public class android.widget.ListView$FixedViewInfo
  extends java.lang.Object
{
  public void <init>(android.widget.ListView);
  public boolean isSelectable;
  public android.view.View view;
  public java.lang.Object data;
}
public class android.widget.MediaController
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, boolean);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean isShowing();
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public void hide();
  public void onFinishInflate();
  public void setAnchorView(android.view.View);
  public void setEnabled(boolean);
  public void setMediaPlayer(android.widget.MediaController$MediaPlayerControl);
  public void setPrevNextListeners(android.view.View$OnClickListener, android.view.View$OnClickListener);
  public void show();
  public void show(int);
  public java.lang.CharSequence getAccessibilityClassName();
}
public interface android.widget.MediaController$MediaPlayerControl
{
  public abstract boolean canPause();
  public abstract boolean canSeekBackward();
  public abstract boolean canSeekForward();
  public abstract boolean isPlaying();
  public abstract int getAudioSessionId();
  public abstract int getBufferPercentage();
  public abstract int getCurrentPosition();
  public abstract int getDuration();
  public abstract void pause();
  public abstract void seekTo(int);
  public abstract void start();
}
public class android.widget.MultiAutoCompleteTextView
  extends android.widget.AutoCompleteTextView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean enoughToFilter();
  public void performValidation();
  public void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer);
  public java.lang.CharSequence getAccessibilityClassName();
  protected void performFiltering(java.lang.CharSequence, int);
  protected void performFiltering(java.lang.CharSequence, int, int, int);
  protected void replaceText(java.lang.CharSequence);
}
public class android.widget.MultiAutoCompleteTextView$CommaTokenizer
  extends java.lang.Object
  implements android.widget.MultiAutoCompleteTextView$Tokenizer
{
  public void <init>();
  public int findTokenEnd(java.lang.CharSequence, int);
  public int findTokenStart(java.lang.CharSequence, int);
  public java.lang.CharSequence terminateToken(java.lang.CharSequence);
}
public interface android.widget.MultiAutoCompleteTextView$Tokenizer
{
  public abstract int findTokenEnd(java.lang.CharSequence, int);
  public abstract int findTokenStart(java.lang.CharSequence, int);
  public abstract java.lang.CharSequence terminateToken(java.lang.CharSequence);
}
public class android.widget.NumberPicker
  extends android.widget.LinearLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean dispatchTouchEvent(android.view.MotionEvent);
  public boolean dispatchTrackballEvent(android.view.MotionEvent);
  public boolean getWrapSelectorWheel();
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean performClick();
  public boolean performLongClick();
  public int getMaxValue();
  public int getMinValue();
  public int getSolidColor();
  public int getValue();
  public void computeScroll();
  public void jumpDrawablesToCurrentState();
  public void scrollBy(int, int);
  public void setDisplayedValues(java.lang.String[]);
  public void setEnabled(boolean);
  public void setFormatter(android.widget.NumberPicker$Formatter);
  public void setMaxValue(int);
  public void setMinValue(int);
  public void setOnLongPressUpdateInterval(long);
  public void setOnScrollListener(android.widget.NumberPicker$OnScrollListener);
  public void setOnValueChangedListener(android.widget.NumberPicker$OnValueChangeListener);
  public void setValue(int);
  public void setWrapSelectorWheel(boolean);
  public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
  public java.lang.String[] getDisplayedValues();
  protected boolean dispatchHoverEvent(android.view.MotionEvent);
  protected float getBottomFadingEdgeStrength();
  protected float getTopFadingEdgeStrength();
  protected int computeVerticalScrollExtent();
  protected int computeVerticalScrollOffset();
  protected int computeVerticalScrollRange();
  protected void drawableStateChanged();
  protected void onDetachedFromWindow();
  protected void onDraw(android.graphics.Canvas);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
}
public interface android.widget.NumberPicker$Formatter
{
  public abstract java.lang.String format(int);
}
public interface android.widget.NumberPicker$OnScrollListener
{
  public abstract void onScrollStateChange(android.widget.NumberPicker, int);
  public static final int SCROLL_STATE_FLING;
  public static final int SCROLL_STATE_IDLE;
  public static final int SCROLL_STATE_TOUCH_SCROLL;
}
public interface android.widget.NumberPicker$OnValueChangeListener
{
  public abstract void onValueChange(android.widget.NumberPicker, int, int);
}
public class android.widget.OverScroller
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.view.animation.Interpolator);
  public void <init>(android.content.Context, android.view.animation.Interpolator, float, float);
  public void <init>(android.content.Context, android.view.animation.Interpolator, float, float, boolean);
  public final boolean isFinished();
  public final int getCurrX();
  public final int getCurrY();
  public final int getFinalX();
  public final int getFinalY();
  public final int getStartX();
  public final int getStartY();
  public final void forceFinished(boolean);
  public final void setFriction(float);
  public boolean computeScrollOffset();
  public boolean isOverScrolled();
  public boolean springBack(int, int, int, int, int, int);
  public float getCurrVelocity();
  public void abortAnimation();
  public void fling(int, int, int, int, int, int, int, int);
  public void fling(int, int, int, int, int, int, int, int, int, int);
  public void notifyHorizontalEdgeReached(int, int, int);
  public void notifyVerticalEdgeReached(int, int, int);
  public void startScroll(int, int, int, int);
  public void startScroll(int, int, int, int, int);
}
public class android.widget.PopupMenu
  extends java.lang.Object
{
  public void <init>(android.content.Context, android.view.View);
  public void <init>(android.content.Context, android.view.View, int);
  public void <init>(android.content.Context, android.view.View, int, int, int);
  public int getGravity();
  public void dismiss();
  public void inflate(int);
  public void setGravity(int);
  public void setOnDismissListener(android.widget.PopupMenu$OnDismissListener);
  public void setOnMenuItemClickListener(android.widget.PopupMenu$OnMenuItemClickListener);
  public void show();
  public android.view.Menu getMenu();
  public android.view.MenuInflater getMenuInflater();
  public android.view.View$OnTouchListener getDragToOpenListener();
}
public interface android.widget.PopupMenu$OnDismissListener
{
  public abstract void onDismiss(android.widget.PopupMenu);
}
public interface android.widget.PopupMenu$OnMenuItemClickListener
{
  public abstract boolean onMenuItemClick(android.view.MenuItem);
}
public class android.widget.PopupWindow
  extends java.lang.Object
{
  public void <init>();
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void <init>(android.view.View);
  public void <init>(android.view.View, int, int);
  public void <init>(android.view.View, int, int, boolean);
  public void <init>(int, int);
  public boolean getOverlapAnchor();
  public boolean isAboveAnchor();
  public boolean isAttachedInDecor();
  public boolean isClippingEnabled();
  public boolean isFocusable();
  public boolean isOutsideTouchable();
  public boolean isShowing();
  public boolean isSplitTouchEnabled();
  public boolean isTouchable();
  public float getElevation();
  public int getAnimationStyle();
  public int getHeight();
  public int getInputMethodMode();
  public int getMaxAvailableHeight(android.view.View);
  public int getMaxAvailableHeight(android.view.View, int);
  public int getMaxAvailableHeight(android.view.View, int, boolean);
  public int getSoftInputMode();
  public int getWidth();
  public int getWindowLayoutType();
  public void dismiss();
  public void setAnimationStyle(int);
  public void setAttachedInDecor(boolean);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setClippingEnabled(boolean);
  public void setContentView(android.view.View);
  public void setElevation(float);
  public void setEnterTransition(android.transition.Transition);
  public void setExitTransition(android.transition.Transition);
  public void setFocusable(boolean);
  public void setHeight(int);
  public void setIgnoreCheekPress();
  public void setInputMethodMode(int);
  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
  public void setOutsideTouchable(boolean);
  public void setOverlapAnchor(boolean);
  public void setSoftInputMode(int);
  public void setSplitTouchEnabled(boolean);
  public void setTouchInterceptor(android.view.View$OnTouchListener);
  public void setTouchable(boolean);
  public void setWidth(int);
  public void setWindowLayoutMode(int, int);
  public void setWindowLayoutType(int);
  public void showAsDropDown(android.view.View);
  public void showAsDropDown(android.view.View, int, int);
  public void showAsDropDown(android.view.View, int, int, int);
  public void showAtLocation(android.view.View, int, int, int);
  public void update();
  public void update(android.view.View, int, int);
  public void update(android.view.View, int, int, int, int);
  public void update(int, int);
  public void update(int, int, int, int);
  public void update(int, int, int, int, boolean);
  public android.graphics.drawable.Drawable getBackground();
  public android.transition.Transition getEnterTransition();
  public android.transition.Transition getExitTransition();
  public android.view.View getContentView();
  public static final int INPUT_METHOD_FROM_FOCUSABLE;
  public static final int INPUT_METHOD_NEEDED;
  public static final int INPUT_METHOD_NOT_NEEDED;
}
public interface android.widget.PopupWindow$OnDismissListener
{
  public abstract void onDismiss();
}
public class android.widget.ProgressBar
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final void incrementProgressBy(int);
  public final void incrementSecondaryProgressBy(int);
  public boolean isIndeterminate();
  public int getMax();
  public int getProgress();
  public int getSecondaryProgress();
  public void drawableHotspotChanged(float, float);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void jumpDrawablesToCurrentState();
  public void onRestoreInstanceState(android.os.Parcelable);
  public void onVisibilityAggregated(boolean);
  public void postInvalidate();
  public void setIndeterminate(boolean);
  public void setIndeterminateDrawable(android.graphics.drawable.Drawable);
  public void setIndeterminateDrawableTiled(android.graphics.drawable.Drawable);
  public void setIndeterminateTintList(android.content.res.ColorStateList);
  public void setIndeterminateTintMode(android.graphics.PorterDuff$Mode);
  public void setInterpolator(android.content.Context, int);
  public void setInterpolator(android.view.animation.Interpolator);
  public void setMax(int);
  public void setProgress(int);
  public void setProgress(int, boolean);
  public void setProgressBackgroundTintList(android.content.res.ColorStateList);
  public void setProgressBackgroundTintMode(android.graphics.PorterDuff$Mode);
  public void setProgressDrawable(android.graphics.drawable.Drawable);
  public void setProgressDrawableTiled(android.graphics.drawable.Drawable);
  public void setProgressTintList(android.content.res.ColorStateList);
  public void setProgressTintMode(android.graphics.PorterDuff$Mode);
  public void setSecondaryProgress(int);
  public void setSecondaryProgressTintList(android.content.res.ColorStateList);
  public void setSecondaryProgressTintMode(android.graphics.PorterDuff$Mode);
  public android.content.res.ColorStateList getIndeterminateTintList();
  public android.content.res.ColorStateList getProgressBackgroundTintList();
  public android.content.res.ColorStateList getProgressTintList();
  public android.content.res.ColorStateList getSecondaryProgressTintList();
  public android.graphics.PorterDuff$Mode getIndeterminateTintMode();
  public android.graphics.PorterDuff$Mode getProgressBackgroundTintMode();
  public android.graphics.PorterDuff$Mode getProgressTintMode();
  public android.graphics.PorterDuff$Mode getSecondaryProgressTintMode();
  public android.graphics.drawable.Drawable getIndeterminateDrawable();
  public android.graphics.drawable.Drawable getProgressDrawable();
  public android.os.Parcelable onSaveInstanceState();
  public android.view.animation.Interpolator getInterpolator();
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onDraw(android.graphics.Canvas);
  protected void onMeasure(int, int);
  protected void onSizeChanged(int, int, int, int);
}
public class android.widget.QuickContactBadge
  extends android.widget.ImageView
  implements android.view.View$OnClickListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void assignContactFromEmail(java.lang.String, boolean);
  public void assignContactFromEmail(java.lang.String, boolean, android.os.Bundle);
  public void assignContactFromPhone(java.lang.String, boolean);
  public void assignContactFromPhone(java.lang.String, boolean, android.os.Bundle);
  public void assignContactUri(android.net.Uri);
  public void drawableHotspotChanged(float, float);
  public void onClick(android.view.View);
  public void setExcludeMimes(java.lang.String[]);
  public void setImageToDefault();
  public void setMode(int);
  public void setOverlay(android.graphics.drawable.Drawable);
  public void setPrioritizedMimeType(java.lang.String);
  public java.lang.CharSequence getAccessibilityClassName();
  protected void drawableStateChanged();
  protected void onAttachedToWindow();
  protected void onDraw(android.graphics.Canvas);
  protected java.lang.String[] mExcludeMimes;
}
public class android.widget.RadioButton
  extends android.widget.CompoundButton
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void toggle();
  public java.lang.CharSequence getAccessibilityClassName();
}
public class android.widget.RadioGroup
  extends android.widget.LinearLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public int getCheckedRadioButtonId();
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void check(int);
  public void clearCheck();
  public void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.RadioGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onFinishInflate();
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams();
}
public class android.widget.RadioGroup$LayoutParams
  extends android.widget.LinearLayout$LayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(int, int);
  public void <init>(int, int, float);
  protected void setBaseAttributes(android.content.res.TypedArray, int, int);
}
public interface android.widget.RadioGroup$OnCheckedChangeListener
{
  public abstract void onCheckedChanged(android.widget.RadioGroup, int);
}
public class android.widget.RatingBar
  extends android.widget.AbsSeekBar
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isIndicator();
  public float getRating();
  public float getStepSize();
  public int getNumStars();
  public void setIsIndicator(boolean);
  public void setMax(int);
  public void setNumStars(int);
  public void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener);
  public void setRating(float);
  public void setStepSize(float);
  public android.widget.RatingBar$OnRatingBarChangeListener getOnRatingBarChangeListener();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onMeasure(int, int);
}
public interface android.widget.RatingBar$OnRatingBarChangeListener
{
  public abstract void onRatingChanged(android.widget.RatingBar, float, boolean);
}
public class android.widget.RelativeLayout
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean shouldDelayChildPressedState();
  public int getBaseline();
  public int getGravity();
  public void requestLayout();
  public void setGravity(int);
  public void setHorizontalGravity(int);
  public void setIgnoreGravity(int);
  public void setVerticalGravity(int);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.RelativeLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  public static final int ABOVE;
  public static final int ALIGN_BASELINE;
  public static final int ALIGN_BOTTOM;
  public static final int ALIGN_END;
  public static final int ALIGN_LEFT;
  public static final int ALIGN_PARENT_BOTTOM;
  public static final int ALIGN_PARENT_END;
  public static final int ALIGN_PARENT_LEFT;
  public static final int ALIGN_PARENT_RIGHT;
  public static final int ALIGN_PARENT_START;
  public static final int ALIGN_PARENT_TOP;
  public static final int ALIGN_RIGHT;
  public static final int ALIGN_START;
  public static final int ALIGN_TOP;
  public static final int BELOW;
  public static final int CENTER_HORIZONTAL;
  public static final int CENTER_IN_PARENT;
  public static final int CENTER_VERTICAL;
  public static final int END_OF;
  public static final int LEFT_OF;
  public static final int RIGHT_OF;
  public static final int START_OF;
  public static final int TRUE;
}
public class android.widget.RelativeLayout$LayoutParams
  extends android.view.ViewGroup$MarginLayoutParams
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(android.widget.RelativeLayout$LayoutParams);
  public void <init>(int, int);
  public int getRule(int);
  public void addRule(int);
  public void addRule(int, int);
  public void removeRule(int);
  public void resolveLayoutDirection(int);
  public int[] getRules();
  public java.lang.String debug(java.lang.String);
  public boolean alignWithParent;
}
public class android.widget.RemoteViews
  extends java.lang.Object
  implements android.os.Parcelable, android.view.LayoutInflater$Filter
{
  public void <init>(android.os.Parcel);
  public void <init>(android.widget.RemoteViews, android.widget.RemoteViews);
  public void <init>(java.lang.String, int);
  public boolean onLoadClass(java.lang.Class);
  public int describeContents();
  public int getLayoutId();
  public void addView(int, android.widget.RemoteViews);
  public void reapply(android.content.Context, android.view.View);
  public void removeAllViews(int);
  public void setAccessibilityTraversalAfter(int, int);
  public void setAccessibilityTraversalBefore(int, int);
  public void setBitmap(int, java.lang.String, android.graphics.Bitmap);
  public void setBoolean(int, java.lang.String, boolean);
  public void setBundle(int, java.lang.String, android.os.Bundle);
  public void setByte(int, java.lang.String, byte);
  public void setChar(int, java.lang.String, char);
  public void setCharSequence(int, java.lang.String, java.lang.CharSequence);
  public void setChronometer(int, long, java.lang.String, boolean);
  public void setChronometerCountDown(int, boolean);
  public void setContentDescription(int, java.lang.CharSequence);
  public void setDisplayedChild(int, int);
  public void setDouble(int, java.lang.String, double);
  public void setEmptyView(int, int);
  public void setFloat(int, java.lang.String, float);
  public void setIcon(int, java.lang.String, android.graphics.drawable.Icon);
  public void setImageViewBitmap(int, android.graphics.Bitmap);
  public void setImageViewIcon(int, android.graphics.drawable.Icon);
  public void setImageViewResource(int, int);
  public void setImageViewUri(int, android.net.Uri);
  public void setInt(int, java.lang.String, int);
  public void setIntent(int, java.lang.String, android.content.Intent);
  public void setLabelFor(int, int);
  public void setLong(int, java.lang.String, long);
  public void setOnClickFillInIntent(int, android.content.Intent);
  public void setOnClickPendingIntent(int, android.app.PendingIntent);
  public void setPendingIntentTemplate(int, android.app.PendingIntent);
  public void setProgressBar(int, int, int, boolean);
  public void setRelativeScrollPosition(int, int);
  public void setRemoteAdapter(int, android.content.Intent);
  public void setRemoteAdapter(int, int, android.content.Intent);
  public void setScrollPosition(int, int);
  public void setShort(int, java.lang.String, short);
  public void setString(int, java.lang.String, java.lang.String);
  public void setTextColor(int, int);
  public void setTextViewCompoundDrawables(int, int, int, int, int);
  public void setTextViewCompoundDrawablesRelative(int, int, int, int, int);
  public void setTextViewText(int, java.lang.CharSequence);
  public void setTextViewTextSize(int, int, float);
  public void setUri(int, java.lang.String, android.net.Uri);
  public void setViewPadding(int, int, int, int, int);
  public void setViewVisibility(int, int);
  public void showNext(int);
  public void showPrevious(int);
  public void writeToParcel(android.os.Parcel, int);
  public android.view.View apply(android.content.Context, android.view.ViewGroup);
  public android.widget.RemoteViews clone();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String getPackage();
  public static final android.os.Parcelable$Creator CREATOR;
}
public class android.widget.RemoteViews$ActionException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.String);
}
public interface android.widget.RemoteViews$RemoteView
  extends java.lang.annotation.Annotation
{
}
public abstract class android.widget.RemoteViewsService
  extends android.app.Service
{
  public void <init>();
  public abstract android.widget.RemoteViewsService$RemoteViewsFactory onGetViewFactory(android.content.Intent);
  public android.os.IBinder onBind(android.content.Intent);
}
public interface android.widget.RemoteViewsService$RemoteViewsFactory
{
  public abstract boolean hasStableIds();
  public abstract int getCount();
  public abstract int getViewTypeCount();
  public abstract long getItemId(int);
  public abstract void onCreate();
  public abstract void onDataSetChanged();
  public abstract void onDestroy();
  public abstract android.widget.RemoteViews getLoadingView();
  public abstract android.widget.RemoteViews getViewAt(int);
}
public abstract class android.widget.ResourceCursorAdapter
  extends android.widget.CursorAdapter
{
  public void <init>(android.content.Context, int, android.database.Cursor);
  public void <init>(android.content.Context, int, android.database.Cursor, boolean);
  public void <init>(android.content.Context, int, android.database.Cursor, int);
  public void setDropDownViewResource(int);
  public void setDropDownViewTheme(android.content.res.Resources$Theme);
  public void setViewResource(int);
  public android.view.View newDropDownView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
  public android.view.View newView(android.content.Context, android.database.Cursor, android.view.ViewGroup);
}
public abstract class android.widget.ResourceCursorTreeAdapter
  extends android.widget.CursorTreeAdapter
{
  public void <init>(android.content.Context, android.database.Cursor, int, int);
  public void <init>(android.content.Context, android.database.Cursor, int, int, int);
  public void <init>(android.content.Context, android.database.Cursor, int, int, int, int);
  public android.view.View newChildView(android.content.Context, android.database.Cursor, boolean, android.view.ViewGroup);
  public android.view.View newGroupView(android.content.Context, android.database.Cursor, boolean, android.view.ViewGroup);
}
public class android.widget.ScrollView
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final void smoothScrollBy(int, int);
  public final void smoothScrollTo(int, int);
  public boolean arrowScroll(int);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public boolean executeKeyEvent(android.view.KeyEvent);
  public boolean fullScroll(int);
  public boolean isFillViewport();
  public boolean isSmoothScrollingEnabled();
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onNestedFling(android.view.View, float, float, boolean);
  public boolean onStartNestedScroll(android.view.View, android.view.View, int);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean pageScroll(int);
  public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean);
  public boolean shouldDelayChildPressedState();
  public int getMaxScrollAmount();
  public void addView(android.view.View);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void computeScroll();
  public void draw(android.graphics.Canvas);
  public void fling(int);
  public void onNestedScroll(android.view.View, int, int, int, int);
  public void onNestedScrollAccepted(android.view.View, android.view.View, int);
  public void onStopNestedScroll(android.view.View);
  public void requestChildFocus(android.view.View, android.view.View);
  public void requestDisallowInterceptTouchEvent(boolean);
  public void requestLayout();
  public void scrollTo(int, int);
  public void setFillViewport(boolean);
  public void setOverScrollMode(int);
  public void setSmoothScrollingEnabled(boolean);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean onRequestFocusInDescendants(int, android.graphics.Rect);
  protected float getBottomFadingEdgeStrength();
  protected float getTopFadingEdgeStrength();
  protected int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect);
  protected int computeVerticalScrollOffset();
  protected int computeVerticalScrollRange();
  protected void measureChild(android.view.View, int, int);
  protected void measureChildWithMargins(android.view.View, int, int, int, int);
  protected void onDetachedFromWindow();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onOverScrolled(int, int, boolean, boolean);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected void onSizeChanged(int, int, int, int);
  protected android.os.Parcelable onSaveInstanceState();
}
public class android.widget.Scroller
  extends java.lang.Object
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.view.animation.Interpolator);
  public void <init>(android.content.Context, android.view.animation.Interpolator, boolean);
  public final boolean isFinished();
  public final int getCurrX();
  public final int getCurrY();
  public final int getDuration();
  public final int getFinalX();
  public final int getFinalY();
  public final int getStartX();
  public final int getStartY();
  public final void forceFinished(boolean);
  public final void setFriction(float);
  public boolean computeScrollOffset();
  public float getCurrVelocity();
  public int timePassed();
  public void abortAnimation();
  public void extendDuration(int);
  public void fling(int, int, int, int, int, int, int, int);
  public void setFinalX(int);
  public void setFinalY(int);
  public void startScroll(int, int, int, int);
  public void startScroll(int, int, int, int, int);
}
public class android.widget.SearchView
  extends android.widget.LinearLayout
  implements android.view.CollapsibleActionView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isIconfiedByDefault();
  public boolean isIconified();
  public boolean isQueryRefinementEnabled();
  public boolean isSubmitButtonEnabled();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public int getImeOptions();
  public int getInputType();
  public int getMaxWidth();
  public void onActionViewCollapsed();
  public void onActionViewExpanded();
  public void onWindowFocusChanged(boolean);
  public void setIconified(boolean);
  public void setIconifiedByDefault(boolean);
  public void setImeOptions(int);
  public void setInputType(int);
  public void setMaxWidth(int);
  public void setOnCloseListener(android.widget.SearchView$OnCloseListener);
  public void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener);
  public void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener);
  public void setOnSearchClickListener(android.view.View$OnClickListener);
  public void setOnSuggestionListener(android.widget.SearchView$OnSuggestionListener);
  public void setQuery(java.lang.CharSequence, boolean);
  public void setQueryHint(java.lang.CharSequence);
  public void setQueryRefinementEnabled(boolean);
  public void setSearchableInfo(android.app.SearchableInfo);
  public void setSubmitButtonEnabled(boolean);
  public void setSuggestionsAdapter(android.widget.CursorAdapter);
  public android.widget.CursorAdapter getSuggestionsAdapter();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getQuery();
  public java.lang.CharSequence getQueryHint();
  protected void onDetachedFromWindow();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected android.os.Parcelable onSaveInstanceState();
}
public interface android.widget.SearchView$OnCloseListener
{
  public abstract boolean onClose();
}
public interface android.widget.SearchView$OnQueryTextListener
{
  public abstract boolean onQueryTextChange(java.lang.String);
  public abstract boolean onQueryTextSubmit(java.lang.String);
}
public interface android.widget.SearchView$OnSuggestionListener
{
  public abstract boolean onSuggestionClick(int);
  public abstract boolean onSuggestionSelect(int);
}
public interface android.widget.SectionIndexer
{
  public abstract int getPositionForSection(int);
  public abstract int getSectionForPosition(int);
  public abstract java.lang.Object[] getSections();
}
public class android.widget.SeekBar
  extends android.widget.AbsSeekBar
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener);
  public java.lang.CharSequence getAccessibilityClassName();
}
public interface android.widget.SeekBar$OnSeekBarChangeListener
{
  public abstract void onProgressChanged(android.widget.SeekBar, int, boolean);
  public abstract void onStartTrackingTouch(android.widget.SeekBar);
  public abstract void onStopTrackingTouch(android.widget.SeekBar);
}
public class android.widget.ShareActionProvider
  extends android.view.ActionProvider
{
  public void <init>(android.content.Context);
  public boolean hasSubMenu();
  public void onPrepareSubMenu(android.view.SubMenu);
  public void setOnShareTargetSelectedListener(android.widget.ShareActionProvider$OnShareTargetSelectedListener);
  public void setShareHistoryFileName(java.lang.String);
  public void setShareIntent(android.content.Intent);
  public android.view.View onCreateActionView();
  public static final java.lang.String DEFAULT_SHARE_HISTORY_FILE_NAME;
}
public interface android.widget.ShareActionProvider$OnShareTargetSelectedListener
{
  public abstract boolean onShareTargetSelected(android.widget.ShareActionProvider, android.content.Intent);
}
public class android.widget.SimpleAdapter
  extends android.widget.BaseAdapter
  implements android.widget.Filterable, android.widget.ThemedSpinnerAdapter
{
  public void <init>(android.content.Context, java.util.List, int, java.lang.String[], int[]);
  public int getCount();
  public long getItemId(int);
  public void setDropDownViewResource(int);
  public void setDropDownViewTheme(android.content.res.Resources$Theme);
  public void setViewBinder(android.widget.SimpleAdapter$ViewBinder);
  public void setViewImage(android.widget.ImageView, int);
  public void setViewImage(android.widget.ImageView, java.lang.String);
  public void setViewText(android.widget.TextView, java.lang.String);
  public android.content.res.Resources$Theme getDropDownViewTheme();
  public android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
  public android.widget.Filter getFilter();
  public android.widget.SimpleAdapter$ViewBinder getViewBinder();
  public java.lang.Object getItem(int);
}
public interface android.widget.SimpleAdapter$ViewBinder
{
  public abstract boolean setViewValue(android.view.View, java.lang.Object, java.lang.String);
}
public class android.widget.SimpleCursorAdapter
  extends android.widget.ResourceCursorAdapter
{
  public void <init>(android.content.Context, int, android.database.Cursor, java.lang.String[], int[]);
  public void <init>(android.content.Context, int, android.database.Cursor, java.lang.String[], int[], int);
  public int getStringConversionColumn();
  public void bindView(android.view.View, android.content.Context, android.database.Cursor);
  public void changeCursorAndColumns(android.database.Cursor, java.lang.String[], int[]);
  public void setCursorToStringConverter(android.widget.SimpleCursorAdapter$CursorToStringConverter);
  public void setStringConversionColumn(int);
  public void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder);
  public void setViewImage(android.widget.ImageView, java.lang.String);
  public void setViewText(android.widget.TextView, java.lang.String);
  public android.database.Cursor swapCursor(android.database.Cursor);
  public android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter();
  public android.widget.SimpleCursorAdapter$ViewBinder getViewBinder();
  public java.lang.CharSequence convertToString(android.database.Cursor);
}
public interface android.widget.SimpleCursorAdapter$CursorToStringConverter
{
  public abstract java.lang.CharSequence convertToString(android.database.Cursor);
}
public interface android.widget.SimpleCursorAdapter$ViewBinder
{
  public abstract boolean setViewValue(android.view.View, android.database.Cursor, int);
}
public abstract class android.widget.SimpleCursorTreeAdapter
  extends android.widget.ResourceCursorTreeAdapter
{
  public void <init>(android.content.Context, android.database.Cursor, int, int, java.lang.String[], int[], int, int, java.lang.String[], int[]);
  public void <init>(android.content.Context, android.database.Cursor, int, int, java.lang.String[], int[], int, java.lang.String[], int[]);
  public void <init>(android.content.Context, android.database.Cursor, int, java.lang.String[], int[], int, java.lang.String[], int[]);
  public void setViewBinder(android.widget.SimpleCursorTreeAdapter$ViewBinder);
  public void setViewText(android.widget.TextView, java.lang.String);
  public android.widget.SimpleCursorTreeAdapter$ViewBinder getViewBinder();
  protected void bindChildView(android.view.View, android.content.Context, android.database.Cursor, boolean);
  protected void bindGroupView(android.view.View, android.content.Context, android.database.Cursor, boolean);
  protected void setViewImage(android.widget.ImageView, java.lang.String);
}
public interface android.widget.SimpleCursorTreeAdapter$ViewBinder
{
  public abstract boolean setViewValue(android.view.View, android.database.Cursor, int);
}
public class android.widget.SimpleExpandableListAdapter
  extends android.widget.BaseExpandableListAdapter
{
  public void <init>(android.content.Context, java.util.List, int, int, java.lang.String[], int[], java.util.List, int, int, java.lang.String[], int[]);
  public void <init>(android.content.Context, java.util.List, int, int, java.lang.String[], int[], java.util.List, int, java.lang.String[], int[]);
  public void <init>(android.content.Context, java.util.List, int, java.lang.String[], int[], java.util.List, int, java.lang.String[], int[]);
  public boolean hasStableIds();
  public boolean isChildSelectable(int, int);
  public int getChildrenCount(int);
  public int getGroupCount();
  public long getChildId(int, int);
  public long getGroupId(int);
  public android.view.View getChildView(int, int, boolean, android.view.View, android.view.ViewGroup);
  public android.view.View getGroupView(int, boolean, android.view.View, android.view.ViewGroup);
  public android.view.View newChildView(boolean, android.view.ViewGroup);
  public android.view.View newGroupView(boolean, android.view.ViewGroup);
  public java.lang.Object getChild(int, int);
  public java.lang.Object getGroup(int);
}
public class android.widget.SlidingDrawer
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isMoving();
  public boolean isOpened();
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void animateClose();
  public void animateOpen();
  public void animateToggle();
  public void close();
  public void lock();
  public void open();
  public void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener);
  public void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener);
  public void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener);
  public void toggle();
  public void unlock();
  public android.view.View getContent();
  public android.view.View getHandle();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void dispatchDraw(android.graphics.Canvas);
  protected void onFinishInflate();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  public static final int ORIENTATION_HORIZONTAL;
  public static final int ORIENTATION_VERTICAL;
}
public interface android.widget.SlidingDrawer$OnDrawerCloseListener
{
  public abstract void onDrawerClosed();
}
public interface android.widget.SlidingDrawer$OnDrawerOpenListener
{
  public abstract void onDrawerOpened();
}
public interface android.widget.SlidingDrawer$OnDrawerScrollListener
{
  public abstract void onScrollEnded();
  public abstract void onScrollStarted();
}
public final class android.widget.Space
  extends android.view.View
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void draw(android.graphics.Canvas);
  protected void onMeasure(int, int);
}
public class android.widget.Spinner
  extends android.widget.AbsSpinner
  implements android.content.DialogInterface$OnClickListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int, int, android.content.res.Resources$Theme);
  public void <init>(android.content.Context, int);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean performClick();
  public int getBaseline();
  public int getDropDownHorizontalOffset();
  public int getDropDownVerticalOffset();
  public int getDropDownWidth();
  public int getGravity();
  public void onClick(android.content.DialogInterface, int);
  public void onRestoreInstanceState(android.os.Parcelable);
  public void setAdapter(android.widget.Adapter);
  public void setAdapter(android.widget.SpinnerAdapter);
  public void setDropDownHorizontalOffset(int);
  public void setDropDownVerticalOffset(int);
  public void setDropDownWidth(int);
  public void setEnabled(boolean);
  public void setGravity(int);
  public void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
  public void setPopupBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setPopupBackgroundResource(int);
  public void setPrompt(java.lang.CharSequence);
  public void setPromptId(int);
  public android.content.Context getPopupContext();
  public android.graphics.drawable.Drawable getPopupBackground();
  public android.os.Parcelable onSaveInstanceState();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getPrompt();
  protected void onDetachedFromWindow();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  public static final int MODE_DIALOG;
  public static final int MODE_DROPDOWN;
}
public interface android.widget.SpinnerAdapter
  extends android.widget.Adapter
{
  public abstract android.view.View getDropDownView(int, android.view.View, android.view.ViewGroup);
}
public class android.widget.StackView
  extends android.widget.AdapterViewAnimator
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onInterceptTouchEvent(android.view.MotionEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void advance();
  public void showNext();
  public void showPrevious();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void dispatchDraw(android.graphics.Canvas);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
}
public class android.widget.Switch
  extends android.widget.CompoundButton
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean getShowText();
  public boolean getSplitTrack();
  public boolean onTouchEvent(android.view.MotionEvent);
  public int getCompoundPaddingLeft();
  public int getCompoundPaddingRight();
  public int getSwitchMinWidth();
  public int getSwitchPadding();
  public int getThumbTextPadding();
  public void draw(android.graphics.Canvas);
  public void drawableHotspotChanged(float, float);
  public void jumpDrawablesToCurrentState();
  public void onMeasure(int, int);
  public void onProvideStructure(android.view.ViewStructure);
  public void setChecked(boolean);
  public void setShowText(boolean);
  public void setSplitTrack(boolean);
  public void setSwitchMinWidth(int);
  public void setSwitchPadding(int);
  public void setSwitchTextAppearance(android.content.Context, int);
  public void setSwitchTypeface(android.graphics.Typeface);
  public void setSwitchTypeface(android.graphics.Typeface, int);
  public void setTextOff(java.lang.CharSequence);
  public void setTextOn(java.lang.CharSequence);
  public void setThumbDrawable(android.graphics.drawable.Drawable);
  public void setThumbResource(int);
  public void setThumbTextPadding(int);
  public void setThumbTintList(android.content.res.ColorStateList);
  public void setThumbTintMode(android.graphics.PorterDuff$Mode);
  public void setTrackDrawable(android.graphics.drawable.Drawable);
  public void setTrackResource(int);
  public void setTrackTintList(android.content.res.ColorStateList);
  public void setTrackTintMode(android.graphics.PorterDuff$Mode);
  public void toggle();
  public android.content.res.ColorStateList getThumbTintList();
  public android.content.res.ColorStateList getTrackTintList();
  public android.graphics.PorterDuff$Mode getThumbTintMode();
  public android.graphics.PorterDuff$Mode getTrackTintMode();
  public android.graphics.drawable.Drawable getThumbDrawable();
  public android.graphics.drawable.Drawable getTrackDrawable();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getTextOff();
  public java.lang.CharSequence getTextOn();
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected void drawableStateChanged();
  protected void onDraw(android.graphics.Canvas);
  protected void onLayout(boolean, int, int, int, int);
  protected int[] onCreateDrawableState(int);
}
public class android.widget.TabHost
  extends android.widget.FrameLayout
  implements android.view.ViewTreeObserver$OnTouchModeChangeListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean dispatchKeyEvent(android.view.KeyEvent);
  public int getCurrentTab();
  public void addTab(android.widget.TabHost$TabSpec);
  public void clearAllTabs();
  public void dispatchWindowFocusChanged(boolean);
  public void onTouchModeChanged(boolean);
  public void setCurrentTab(int);
  public void setCurrentTabByTag(java.lang.String);
  public void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener);
  public void setup();
  public void setup(android.app.LocalActivityManager);
  public android.view.View getCurrentTabView();
  public android.view.View getCurrentView();
  public android.widget.FrameLayout getTabContentView();
  public android.widget.TabHost$TabSpec newTabSpec(java.lang.String);
  public android.widget.TabWidget getTabWidget();
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.String getCurrentTabTag();
}
public interface android.widget.TabHost$OnTabChangeListener
{
  public abstract void onTabChanged(java.lang.String);
}
public interface android.widget.TabHost$TabContentFactory
{
  public abstract android.view.View createTabContent(java.lang.String);
}
public class android.widget.TabHost$TabSpec
  extends java.lang.Object
{
  public android.widget.TabHost$TabSpec setContent(android.content.Intent);
  public android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory);
  public android.widget.TabHost$TabSpec setContent(int);
  public android.widget.TabHost$TabSpec setIndicator(android.view.View);
  public android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence);
  public android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence, android.graphics.drawable.Drawable);
  public java.lang.String getTag();
}
public class android.widget.TabWidget
  extends android.widget.LinearLayout
  implements android.view.View$OnFocusChangeListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean isStripEnabled();
  public int getTabCount();
  public void addView(android.view.View);
  public void childDrawableStateChanged(android.view.View);
  public void dispatchDraw(android.graphics.Canvas);
  public void focusCurrentTab(int);
  public void onFocusChange(android.view.View, boolean);
  public void removeAllViews();
  public void setCurrentTab(int);
  public void setDividerDrawable(android.graphics.drawable.Drawable);
  public void setDividerDrawable(int);
  public void setEnabled(boolean);
  public void setLeftStripDrawable(android.graphics.drawable.Drawable);
  public void setLeftStripDrawable(int);
  public void setRightStripDrawable(android.graphics.drawable.Drawable);
  public void setRightStripDrawable(int);
  public void setStripEnabled(boolean);
  public android.graphics.drawable.Drawable getLeftStripDrawable();
  public android.graphics.drawable.Drawable getRightStripDrawable();
  public android.view.View getChildTabViewAt(int);
  public java.lang.CharSequence getAccessibilityClassName();
  protected int getChildDrawingOrder(int, int);
  protected void onSizeChanged(int, int, int, int);
}
public class android.widget.TableLayout
  extends android.widget.LinearLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean isColumnCollapsed(int);
  public boolean isColumnShrinkable(int);
  public boolean isColumnStretchable(int);
  public boolean isShrinkAllColumns();
  public boolean isStretchAllColumns();
  public void addView(android.view.View);
  public void addView(android.view.View, android.view.ViewGroup$LayoutParams);
  public void addView(android.view.View, int);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void requestLayout();
  public void setColumnCollapsed(int, boolean);
  public void setColumnShrinkable(int, boolean);
  public void setColumnStretchable(int, boolean);
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public void setShrinkAllColumns(boolean);
  public void setStretchAllColumns(boolean);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.TableLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams();
  protected android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
}
public class android.widget.TableLayout$LayoutParams
  extends android.widget.LinearLayout$LayoutParams
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(int, int);
  public void <init>(int, int, float);
  protected void setBaseAttributes(android.content.res.TypedArray, int, int);
}
public class android.widget.TableRow
  extends android.widget.LinearLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public int getVirtualChildCount();
  public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener);
  public android.view.View getVirtualChildAt(int);
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.TableRow$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getAccessibilityClassName();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams();
  protected android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
}
public class android.widget.TableRow$LayoutParams
  extends android.widget.LinearLayout$LayoutParams
{
  public void <init>();
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(int);
  public void <init>(int, int);
  public void <init>(int, int, float);
  protected void setBaseAttributes(android.content.res.TypedArray, int, int);
  public int column;
  public int span;
}
public class android.widget.TextClock
  extends android.widget.TextView
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean is24HourModeEnabled();
  public void setFormat12Hour(java.lang.CharSequence);
  public void setFormat24Hour(java.lang.CharSequence);
  public void setTimeZone(java.lang.String);
  public java.lang.CharSequence getFormat12Hour();
  public java.lang.CharSequence getFormat24Hour();
  public java.lang.String getTimeZone();
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  public static final java.lang.CharSequence DEFAULT_FORMAT_12_HOUR;
  public static final java.lang.CharSequence DEFAULT_FORMAT_24_HOUR;
}
public class android.widget.TextSwitcher
  extends android.widget.ViewSwitcher
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void setCurrentText(java.lang.CharSequence);
  public void setText(java.lang.CharSequence);
  public java.lang.CharSequence getAccessibilityClassName();
}
public class android.widget.TextView
  extends android.view.View
  implements android.view.ViewTreeObserver$OnPreDrawListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public final boolean getLinksClickable();
  public final boolean getShowSoftInputOnFocus();
  public final int getAutoLinkMask();
  public final int getCurrentHintTextColor();
  public final int getCurrentTextColor();
  public final void append(java.lang.CharSequence);
  public final void setAutoLinkMask(int);
  public final void setEditableFactory(android.text.Editable$Factory);
  public final void setHint(int);
  public final void setHint(java.lang.CharSequence);
  public final void setHintTextColor(android.content.res.ColorStateList);
  public final void setHintTextColor(int);
  public final void setLinkTextColor(android.content.res.ColorStateList);
  public final void setLinkTextColor(int);
  public final void setLinksClickable(boolean);
  public final void setMovementMethod(android.text.method.MovementMethod);
  public final void setShowSoftInputOnFocus(boolean);
  public final void setSpannableFactory(android.text.Spannable$Factory);
  public final void setText(char[], int, int);
  public final void setText(int);
  public final void setText(int, android.widget.TextView$BufferType);
  public final void setText(java.lang.CharSequence);
  public final void setTextKeepState(java.lang.CharSequence);
  public final void setTextKeepState(java.lang.CharSequence, android.widget.TextView$BufferType);
  public final void setTransformationMethod(android.text.method.TransformationMethod);
  public final android.content.res.ColorStateList getHintTextColors();
  public final android.content.res.ColorStateList getLinkTextColors();
  public final android.content.res.ColorStateList getTextColors();
  public final android.text.Layout getLayout();
  public final android.text.method.KeyListener getKeyListener();
  public final android.text.method.MovementMethod getMovementMethod();
  public final android.text.method.TransformationMethod getTransformationMethod();
  public boolean bringPointIntoView(int);
  public boolean didTouchFocusSelect();
  public boolean extractText(android.view.inputmethod.ExtractedTextRequest, android.view.inputmethod.ExtractedText);
  public boolean getFreezesText();
  public boolean getIncludeFontPadding();
  public boolean hasOverlappingRendering();
  public boolean hasSelection();
  public boolean isCursorVisible();
  public boolean isInputMethodTarget();
  public boolean isSuggestionsEnabled();
  public boolean isTextSelectable();
  public boolean moveCursorToVisibleOffset();
  public boolean onCheckIsTextEditor();
  public boolean onDragEvent(android.view.DragEvent);
  public boolean onGenericMotionEvent(android.view.MotionEvent);
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onKeyMultiple(int, int, android.view.KeyEvent);
  public boolean onKeyPreIme(int, android.view.KeyEvent);
  public boolean onKeyShortcut(int, android.view.KeyEvent);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onPreDraw();
  public boolean onPrivateIMECommand(java.lang.String, android.os.Bundle);
  public boolean onTextContextMenuItem(int);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public boolean performLongClick();
  public boolean showContextMenu();
  public boolean showContextMenu(float, float);
  public float getLetterSpacing();
  public float getLineSpacingExtra();
  public float getLineSpacingMultiplier();
  public float getShadowDx();
  public float getShadowDy();
  public float getShadowRadius();
  public float getTextScaleX();
  public float getTextSize();
  public int getBaseline();
  public int getBreakStrategy();
  public int getCompoundDrawablePadding();
  public int getCompoundPaddingBottom();
  public int getCompoundPaddingEnd();
  public int getCompoundPaddingLeft();
  public int getCompoundPaddingRight();
  public int getCompoundPaddingStart();
  public int getCompoundPaddingTop();
  public int getExtendedPaddingBottom();
  public int getExtendedPaddingTop();
  public int getGravity();
  public int getHighlightColor();
  public int getHyphenationFrequency();
  public int getImeActionId();
  public int getImeOptions();
  public int getInputType();
  public int getLineBounds(int, android.graphics.Rect);
  public int getLineCount();
  public int getLineHeight();
  public int getMarqueeRepeatLimit();
  public int getMaxEms();
  public int getMaxHeight();
  public int getMaxLines();
  public int getMaxWidth();
  public int getMinEms();
  public int getMinHeight();
  public int getMinLines();
  public int getMinWidth();
  public int getOffsetForPosition(float, float);
  public int getPaintFlags();
  public int getSelectionEnd();
  public int getSelectionStart();
  public int getShadowColor();
  public int getTotalPaddingBottom();
  public int getTotalPaddingEnd();
  public int getTotalPaddingLeft();
  public int getTotalPaddingRight();
  public int getTotalPaddingStart();
  public int getTotalPaddingTop();
  public int length();
  public void addTextChangedListener(android.text.TextWatcher);
  public void append(java.lang.CharSequence, int, int);
  public void beginBatchEdit();
  public void cancelLongPress();
  public void clearComposingText();
  public void computeScroll();
  public void debug(int);
  public void drawableHotspotChanged(float, float);
  public void endBatchEdit();
  public void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int);
  public void getFocusedRect(android.graphics.Rect);
  public void invalidateDrawable(android.graphics.drawable.Drawable);
  public void jumpDrawablesToCurrentState();
  public void onBeginBatchEdit();
  public void onCommitCompletion(android.view.inputmethod.CompletionInfo);
  public void onCommitCorrection(android.view.inputmethod.CorrectionInfo);
  public void onEditorAction(int);
  public void onEndBatchEdit();
  public void onProvideStructure(android.view.ViewStructure);
  public void onRestoreInstanceState(android.os.Parcelable);
  public void onRtlPropertiesChanged(int);
  public void onScreenStateChanged(int);
  public void onWindowFocusChanged(boolean);
  public void removeTextChangedListener(android.text.TextWatcher);
  public void setAllCaps(boolean);
  public void setBreakStrategy(int);
  public void setCompoundDrawablePadding(int);
  public void setCompoundDrawableTintList(android.content.res.ColorStateList);
  public void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode);
  public void setCompoundDrawables(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public void setCompoundDrawablesRelative(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public void setCompoundDrawablesRelativeWithIntrinsicBounds(int, int, int, int);
  public void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable);
  public void setCompoundDrawablesWithIntrinsicBounds(int, int, int, int);
  public void setCursorVisible(boolean);
  public void setCustomInsertionActionModeCallback(android.view.ActionMode$Callback);
  public void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback);
  public void setElegantTextHeight(boolean);
  public void setEllipsize(android.text.TextUtils$TruncateAt);
  public void setEms(int);
  public void setEnabled(boolean);
  public void setError(java.lang.CharSequence);
  public void setError(java.lang.CharSequence, android.graphics.drawable.Drawable);
  public void setExtractedText(android.view.inputmethod.ExtractedText);
  public void setFilters(android.text.InputFilter[]);
  public void setFontFeatureSettings(java.lang.String);
  public void setFreezesText(boolean);
  public void setGravity(int);
  public void setHeight(int);
  public void setHighlightColor(int);
  public void setHorizontallyScrolling(boolean);
  public void setHyphenationFrequency(int);
  public void setImeActionLabel(java.lang.CharSequence, int);
  public void setImeHintLocales(android.os.LocaleList);
  public void setImeOptions(int);
  public void setIncludeFontPadding(boolean);
  public void setInputExtras(int)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public void setInputType(int);
  public void setKeyListener(android.text.method.KeyListener);
  public void setLetterSpacing(float);
  public void setLineSpacing(float, float);
  public void setLines(int);
  public void setMarqueeRepeatLimit(int);
  public void setMaxEms(int);
  public void setMaxHeight(int);
  public void setMaxLines(int);
  public void setMaxWidth(int);
  public void setMinEms(int);
  public void setMinHeight(int);
  public void setMinLines(int);
  public void setMinWidth(int);
  public void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener);
  public void setPadding(int, int, int, int);
  public void setPaddingRelative(int, int, int, int);
  public void setPaintFlags(int);
  public void setPrivateImeOptions(java.lang.String);
  public void setRawInputType(int);
  public void setScroller(android.widget.Scroller);
  public void setSelectAllOnFocus(boolean);
  public void setSelected(boolean);
  public void setShadowLayer(float, float, float, int);
  public void setSingleLine();
  public void setSingleLine(boolean);
  public void setText(java.lang.CharSequence, android.widget.TextView$BufferType);
  public void setTextAppearance(android.content.Context, int);
  public void setTextAppearance(int);
  public void setTextColor(android.content.res.ColorStateList);
  public void setTextColor(int);
  public void setTextIsSelectable(boolean);
  public void setTextLocale(java.util.Locale);
  public void setTextLocales(android.os.LocaleList);
  public void setTextScaleX(float);
  public void setTextSize(float);
  public void setTextSize(int, float);
  public void setTypeface(android.graphics.Typeface);
  public void setTypeface(android.graphics.Typeface, int);
  public void setWidth(int);
  public android.content.res.ColorStateList getCompoundDrawableTintList();
  public android.graphics.PorterDuff$Mode getCompoundDrawableTintMode();
  public android.graphics.Typeface getTypeface();
  public android.graphics.drawable.Drawable[] getCompoundDrawables();
  public android.graphics.drawable.Drawable[] getCompoundDrawablesRelative();
  public android.os.Bundle getInputExtras(boolean);
  public android.os.LocaleList getImeHintLocales();
  public android.os.LocaleList getTextLocales();
  public android.os.Parcelable onSaveInstanceState();
  public android.text.Editable getEditableText();
  public android.text.InputFilter[] getFilters();
  public android.text.TextPaint getPaint();
  public android.text.TextUtils$TruncateAt getEllipsize();
  public android.text.style.URLSpan[] getUrls();
  public android.view.ActionMode$Callback getCustomInsertionActionModeCallback();
  public android.view.ActionMode$Callback getCustomSelectionActionModeCallback();
  public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int);
  public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getError();
  public java.lang.CharSequence getHint();
  public java.lang.CharSequence getImeActionLabel();
  public java.lang.CharSequence getText();
  public java.lang.String getFontFeatureSettings();
  public java.lang.String getPrivateImeOptions();
  public java.util.Locale getTextLocale();
  protected boolean getDefaultEditable();
  protected boolean isPaddingOffsetRequired();
  protected boolean setFrame(int, int, int, int);
  protected boolean verifyDrawable(android.graphics.drawable.Drawable);
  protected float getLeftFadingEdgeStrength();
  protected float getRightFadingEdgeStrength();
  protected int computeHorizontalScrollRange();
  protected int computeVerticalScrollExtent();
  protected int computeVerticalScrollRange();
  protected int getBottomPaddingOffset();
  protected int getLeftPaddingOffset();
  protected int getRightPaddingOffset();
  protected int getTopPaddingOffset();
  protected void drawableStateChanged();
  protected void onAttachedToWindow();
  protected void onConfigurationChanged(android.content.res.Configuration);
  protected void onCreateContextMenu(android.view.ContextMenu);
  protected void onDraw(android.graphics.Canvas);
  protected void onFocusChanged(boolean, int, android.graphics.Rect);
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onScrollChanged(int, int, int, int);
  protected void onSelectionChanged(int, int);
  protected void onTextChanged(java.lang.CharSequence, int, int, int);
  protected void onVisibilityChanged(android.view.View, int);
  protected android.text.method.MovementMethod getDefaultMovementMethod();
  protected int[] onCreateDrawableState(int);
}
public final class android.widget.TextView$BufferType
  extends java.lang.Enum
{
  public static android.widget.TextView$BufferType valueOf(java.lang.String);
  public static android.widget.TextView$BufferType[] values();
  public static final android.widget.TextView$BufferType EDITABLE;
  public static final android.widget.TextView$BufferType NORMAL;
  public static final android.widget.TextView$BufferType SPANNABLE;
}
public interface android.widget.TextView$OnEditorActionListener
{
  public abstract boolean onEditorAction(android.widget.TextView, int, android.view.KeyEvent);
}
public class android.widget.TextView$SavedState
  extends android.view.View$BaseSavedState
{
  public void writeToParcel(android.os.Parcel, int);
  public java.lang.String toString();
  public static final android.os.Parcelable$Creator CREATOR;
}
public interface android.widget.ThemedSpinnerAdapter
  extends android.widget.SpinnerAdapter
{
  public abstract void setDropDownViewTheme(android.content.res.Resources$Theme);
  public abstract android.content.res.Resources$Theme getDropDownViewTheme();
}
public class android.widget.TimePicker
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean is24HourView();
  public boolean isEnabled();
  public int getBaseline();
  public int getHour();
  public int getMinute();
  public void setCurrentHour(java.lang.Integer);
  public void setCurrentMinute(java.lang.Integer);
  public void setEnabled(boolean);
  public void setHour(int);
  public void setIs24HourView(java.lang.Boolean);
  public void setMinute(int);
  public void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener);
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.Integer getCurrentHour();
  public java.lang.Integer getCurrentMinute();
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected android.os.Parcelable onSaveInstanceState();
}
public interface android.widget.TimePicker$OnTimeChangedListener
{
  public abstract void onTimeChanged(android.widget.TimePicker, int, int);
}
public class android.widget.Toast
  extends java.lang.Object
{
  public static android.widget.Toast makeText(android.content.Context, int, int)  throws android.content.res.Resources$NotFoundException;
  public static android.widget.Toast makeText(android.content.Context, java.lang.CharSequence, int);
  public void <init>(android.content.Context);
  public float getHorizontalMargin();
  public float getVerticalMargin();
  public int getDuration();
  public int getGravity();
  public int getXOffset();
  public int getYOffset();
  public void cancel();
  public void setDuration(int);
  public void setGravity(int, int, int);
  public void setMargin(float, float);
  public void setText(int);
  public void setText(java.lang.CharSequence);
  public void setView(android.view.View);
  public void show();
  public android.view.View getView();
  public static final int LENGTH_LONG;
  public static final int LENGTH_SHORT;
}
public class android.widget.ToggleButton
  extends android.widget.CompoundButton
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public void setBackgroundDrawable(android.graphics.drawable.Drawable);
  public void setChecked(boolean);
  public void setTextOff(java.lang.CharSequence);
  public void setTextOn(java.lang.CharSequence);
  public java.lang.CharSequence getAccessibilityClassName();
  public java.lang.CharSequence getTextOff();
  public java.lang.CharSequence getTextOn();
  protected void drawableStateChanged();
  protected void onFinishInflate();
}
public class android.widget.Toolbar
  extends android.view.ViewGroup
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean hasExpandedActionView();
  public boolean hideOverflowMenu();
  public boolean isOverflowMenuShowing();
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean showOverflowMenu();
  public int getContentInsetEnd();
  public int getContentInsetEndWithActions();
  public int getContentInsetLeft();
  public int getContentInsetRight();
  public int getContentInsetStart();
  public int getContentInsetStartWithNavigation();
  public int getCurrentContentInsetEnd();
  public int getCurrentContentInsetLeft();
  public int getCurrentContentInsetRight();
  public int getCurrentContentInsetStart();
  public int getPopupTheme();
  public int getTitleMarginBottom();
  public int getTitleMarginEnd();
  public int getTitleMarginStart();
  public int getTitleMarginTop();
  public void collapseActionView();
  public void dismissPopupMenus();
  public void inflateMenu(int);
  public void onRtlPropertiesChanged(int);
  public void setContentInsetEndWithActions(int);
  public void setContentInsetStartWithNavigation(int);
  public void setContentInsetsAbsolute(int, int);
  public void setContentInsetsRelative(int, int);
  public void setLogo(android.graphics.drawable.Drawable);
  public void setLogo(int);
  public void setLogoDescription(int);
  public void setLogoDescription(java.lang.CharSequence);
  public void setNavigationContentDescription(int);
  public void setNavigationContentDescription(java.lang.CharSequence);
  public void setNavigationIcon(android.graphics.drawable.Drawable);
  public void setNavigationIcon(int);
  public void setNavigationOnClickListener(android.view.View$OnClickListener);
  public void setOnMenuItemClickListener(android.widget.Toolbar$OnMenuItemClickListener);
  public void setOverflowIcon(android.graphics.drawable.Drawable);
  public void setPopupTheme(int);
  public void setSubtitle(int);
  public void setSubtitle(java.lang.CharSequence);
  public void setSubtitleTextAppearance(android.content.Context, int);
  public void setSubtitleTextColor(int);
  public void setTitle(int);
  public void setTitle(java.lang.CharSequence);
  public void setTitleMargin(int, int, int, int);
  public void setTitleMarginBottom(int);
  public void setTitleMarginEnd(int);
  public void setTitleMarginStart(int);
  public void setTitleMarginTop(int);
  public void setTitleTextAppearance(android.content.Context, int);
  public void setTitleTextColor(int);
  public android.graphics.drawable.Drawable getLogo();
  public android.graphics.drawable.Drawable getNavigationIcon();
  public android.graphics.drawable.Drawable getOverflowIcon();
  public android.view.Menu getMenu();
  public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public android.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet);
  public java.lang.CharSequence getLogoDescription();
  public java.lang.CharSequence getNavigationContentDescription();
  public java.lang.CharSequence getSubtitle();
  public java.lang.CharSequence getTitle();
  protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
  protected void onDetachedFromWindow();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
  protected void onRestoreInstanceState(android.os.Parcelable);
  protected android.os.Parcelable onSaveInstanceState();
  protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
  protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
  protected android.widget.Toolbar$LayoutParams generateDefaultLayoutParams();
  protected android.widget.Toolbar$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
}
public class android.widget.Toolbar$LayoutParams
  extends android.app.ActionBar$LayoutParams
{
  public void <init>(android.app.ActionBar$LayoutParams);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.view.ViewGroup$LayoutParams);
  public void <init>(android.view.ViewGroup$MarginLayoutParams);
  public void <init>(android.widget.Toolbar$LayoutParams);
  public void <init>(int);
  public void <init>(int, int);
  public void <init>(int, int, int);
}
public interface android.widget.Toolbar$OnMenuItemClickListener
{
  public abstract boolean onMenuItemClick(android.view.MenuItem);
}
public class android.widget.TwoLineListItem
  extends android.widget.RelativeLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public android.widget.TextView getText1();
  public android.widget.TextView getText2();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onFinishInflate();
}
public class android.widget.VideoView
  extends android.view.SurfaceView
  implements android.widget.MediaController$MediaPlayerControl
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean canPause();
  public boolean canSeekBackward();
  public boolean canSeekForward();
  public boolean isPlaying();
  public boolean onKeyDown(int, android.view.KeyEvent);
  public boolean onTouchEvent(android.view.MotionEvent);
  public boolean onTrackballEvent(android.view.MotionEvent);
  public int getAudioSessionId();
  public int getBufferPercentage();
  public int getCurrentPosition();
  public int getDuration();
  public int resolveAdjustedSize(int, int);
  public void addSubtitleSource(java.io.InputStream, android.media.MediaFormat);
  public void draw(android.graphics.Canvas);
  public void pause();
  public void resume();
  public void seekTo(int);
  public void setMediaController(android.widget.MediaController);
  public void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener);
  public void setOnErrorListener(android.media.MediaPlayer$OnErrorListener);
  public void setOnInfoListener(android.media.MediaPlayer$OnInfoListener);
  public void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener);
  public void setVideoPath(java.lang.String);
  public void setVideoURI(android.net.Uri);
  public void setVideoURI(android.net.Uri, java.util.Map);
  public void start();
  public void stopPlayback();
  public void suspend();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onLayout(boolean, int, int, int, int);
  protected void onMeasure(int, int);
}
public class android.widget.ViewAnimator
  extends android.widget.FrameLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean getAnimateFirstView();
  public int getBaseline();
  public int getDisplayedChild();
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void removeAllViews();
  public void removeView(android.view.View);
  public void removeViewAt(int);
  public void removeViewInLayout(android.view.View);
  public void removeViews(int, int);
  public void removeViewsInLayout(int, int);
  public void setAnimateFirstView(boolean);
  public void setDisplayedChild(int);
  public void setInAnimation(android.content.Context, int);
  public void setInAnimation(android.view.animation.Animation);
  public void setOutAnimation(android.content.Context, int);
  public void setOutAnimation(android.view.animation.Animation);
  public void showNext();
  public void showPrevious();
  public android.view.View getCurrentView();
  public android.view.animation.Animation getInAnimation();
  public android.view.animation.Animation getOutAnimation();
  public java.lang.CharSequence getAccessibilityClassName();
}
public class android.widget.ViewFlipper
  extends android.widget.ViewAnimator
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean isAutoStart();
  public boolean isFlipping();
  public void setAutoStart(boolean);
  public void setFlipInterval(int);
  public void startFlipping();
  public void stopFlipping();
  public java.lang.CharSequence getAccessibilityClassName();
  protected void onAttachedToWindow();
  protected void onDetachedFromWindow();
  protected void onWindowVisibilityChanged(int);
}
public class android.widget.ViewSwitcher
  extends android.widget.ViewAnimator
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams);
  public void reset();
  public void setFactory(android.widget.ViewSwitcher$ViewFactory);
  public android.view.View getNextView();
  public java.lang.CharSequence getAccessibilityClassName();
}
public interface android.widget.ViewSwitcher$ViewFactory
{
  public abstract android.view.View makeView();
}
public interface android.widget.WrapperListAdapter
  extends android.widget.ListAdapter
{
  public abstract android.widget.ListAdapter getWrappedAdapter();
}
public class android.widget.ZoomButton
  extends android.widget.ImageButton
  implements android.view.View$OnLongClickListener
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public void <init>(android.content.Context, android.util.AttributeSet, int);
  public void <init>(android.content.Context, android.util.AttributeSet, int, int);
  public boolean dispatchUnhandledMove(android.view.View, int);
  public boolean onKeyUp(int, android.view.KeyEvent);
  public boolean onLongClick(android.view.View);
  public boolean onTouchEvent(android.view.MotionEvent);
  public void setEnabled(boolean);
  public void setZoomSpeed(long);
  public java.lang.CharSequence getAccessibilityClassName();
}
public class android.widget.ZoomButtonsController
  extends java.lang.Object
  implements android.view.View$OnTouchListener
{
  public void <init>(android.view.View);
  public boolean isAutoDismissed();
  public boolean isVisible();
  public boolean onTouch(android.view.View, android.view.MotionEvent);
  public void setAutoDismissed(boolean);
  public void setFocusable(boolean);
  public void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener);
  public void setVisible(boolean);
  public void setZoomInEnabled(boolean);
  public void setZoomOutEnabled(boolean);
  public void setZoomSpeed(long);
  public android.view.View getZoomControls();
  public android.view.ViewGroup getContainer();
}
public interface android.widget.ZoomButtonsController$OnZoomListener
{
  public abstract void onVisibilityChanged(boolean);
  public abstract void onZoom(boolean);
}
public class android.widget.ZoomControls
  extends android.widget.LinearLayout
{
  public void <init>(android.content.Context);
  public void <init>(android.content.Context, android.util.AttributeSet);
  public boolean hasFocus();
  public boolean onTouchEvent(android.view.MotionEvent);
  public void hide();
  public void setIsZoomInEnabled(boolean);
  public void setIsZoomOutEnabled(boolean);
  public void setOnZoomInClickListener(android.view.View$OnClickListener);
  public void setOnZoomOutClickListener(android.view.View$OnClickListener);
  public void setZoomSpeed(long);
  public void show();
  public java.lang.CharSequence getAccessibilityClassName();
}
public interface com.android.internal.util.Predicate
{
  public abstract boolean apply(java.lang.Object);
}
public interface dalvik.annotation.TestTarget
  extends java.lang.annotation.Annotation
{
  public abstract java.lang.Class[] methodArgs();
  public abstract java.lang.String conceptName();
  public abstract java.lang.String methodName();
}
public interface dalvik.annotation.TestTargetClass
  extends java.lang.annotation.Annotation
{
  public abstract java.lang.Class value();
}
public final class dalvik.bytecode.OpcodeInfo
  extends java.lang.Object
{
  public static final int MAXIMUM_PACKED_VALUE;
  public static final int MAXIMUM_VALUE;
}
public interface dalvik.bytecode.Opcodes
{
  public static final int OP_ADD_DOUBLE;
  public static final int OP_ADD_DOUBLE_2ADDR;
  public static final int OP_ADD_FLOAT;
  public static final int OP_ADD_FLOAT_2ADDR;
  public static final int OP_ADD_INT;
  public static final int OP_ADD_INT_2ADDR;
  public static final int OP_ADD_INT_LIT16;
  public static final int OP_ADD_INT_LIT8;
  public static final int OP_ADD_LONG;
  public static final int OP_ADD_LONG_2ADDR;
  public static final int OP_AGET;
  public static final int OP_AGET_BOOLEAN;
  public static final int OP_AGET_BYTE;
  public static final int OP_AGET_CHAR;
  public static final int OP_AGET_OBJECT;
  public static final int OP_AGET_SHORT;
  public static final int OP_AGET_WIDE;
  public static final int OP_AND_INT;
  public static final int OP_AND_INT_2ADDR;
  public static final int OP_AND_INT_LIT16;
  public static final int OP_AND_INT_LIT8;
  public static final int OP_AND_LONG;
  public static final int OP_AND_LONG_2ADDR;
  public static final int OP_APUT;
  public static final int OP_APUT_BOOLEAN;
  public static final int OP_APUT_BYTE;
  public static final int OP_APUT_CHAR;
  public static final int OP_APUT_OBJECT;
  public static final int OP_APUT_SHORT;
  public static final int OP_APUT_WIDE;
  public static final int OP_ARRAY_LENGTH;
  public static final int OP_BREAKPOINT;
  public static final int OP_CHECK_CAST;
  public static final int OP_CHECK_CAST_JUMBO;
  public static final int OP_CMPG_DOUBLE;
  public static final int OP_CMPG_FLOAT;
  public static final int OP_CMPL_DOUBLE;
  public static final int OP_CMPL_FLOAT;
  public static final int OP_CMP_LONG;
  public static final int OP_CONST;
  public static final int OP_CONST_16;
  public static final int OP_CONST_4;
  public static final int OP_CONST_CLASS;
  public static final int OP_CONST_CLASS_JUMBO;
  public static final int OP_CONST_HIGH16;
  public static final int OP_CONST_STRING;
  public static final int OP_CONST_STRING_JUMBO;
  public static final int OP_CONST_WIDE;
  public static final int OP_CONST_WIDE_16;
  public static final int OP_CONST_WIDE_32;
  public static final int OP_CONST_WIDE_HIGH16;
  public static final int OP_DIV_DOUBLE;
  public static final int OP_DIV_DOUBLE_2ADDR;
  public static final int OP_DIV_FLOAT;
  public static final int OP_DIV_FLOAT_2ADDR;
  public static final int OP_DIV_INT;
  public static final int OP_DIV_INT_2ADDR;
  public static final int OP_DIV_INT_LIT16;
  public static final int OP_DIV_INT_LIT8;
  public static final int OP_DIV_LONG;
  public static final int OP_DIV_LONG_2ADDR;
  public static final int OP_DOUBLE_TO_FLOAT;
  public static final int OP_DOUBLE_TO_INT;
  public static final int OP_DOUBLE_TO_LONG;
  public static final int OP_EXECUTE_INLINE;
  public static final int OP_EXECUTE_INLINE_RANGE;
  public static final int OP_FILLED_NEW_ARRAY;
  public static final int OP_FILLED_NEW_ARRAY_JUMBO;
  public static final int OP_FILLED_NEW_ARRAY_RANGE;
  public static final int OP_FILL_ARRAY_DATA;
  public static final int OP_FLOAT_TO_DOUBLE;
  public static final int OP_FLOAT_TO_INT;
  public static final int OP_FLOAT_TO_LONG;
  public static final int OP_GOTO;
  public static final int OP_GOTO_16;
  public static final int OP_GOTO_32;
  public static final int OP_IF_EQ;
  public static final int OP_IF_EQZ;
  public static final int OP_IF_GE;
  public static final int OP_IF_GEZ;
  public static final int OP_IF_GT;
  public static final int OP_IF_GTZ;
  public static final int OP_IF_LE;
  public static final int OP_IF_LEZ;
  public static final int OP_IF_LT;
  public static final int OP_IF_LTZ;
  public static final int OP_IF_NE;
  public static final int OP_IF_NEZ;
  public static final int OP_IGET;
  public static final int OP_IGET_BOOLEAN;
  public static final int OP_IGET_BOOLEAN_JUMBO;
  public static final int OP_IGET_BYTE;
  public static final int OP_IGET_BYTE_JUMBO;
  public static final int OP_IGET_CHAR;
  public static final int OP_IGET_CHAR_JUMBO;
  public static final int OP_IGET_JUMBO;
  public static final int OP_IGET_OBJECT;
  public static final int OP_IGET_OBJECT_JUMBO;
  public static final int OP_IGET_OBJECT_QUICK;
  public static final int OP_IGET_QUICK;
  public static final int OP_IGET_SHORT;
  public static final int OP_IGET_SHORT_JUMBO;
  public static final int OP_IGET_WIDE;
  public static final int OP_IGET_WIDE_JUMBO;
  public static final int OP_IGET_WIDE_QUICK;
  public static final int OP_IGET_WIDE_VOLATILE;
  public static final int OP_INSTANCE_OF;
  public static final int OP_INSTANCE_OF_JUMBO;
  public static final int OP_INT_TO_BYTE;
  public static final int OP_INT_TO_CHAR;
  public static final int OP_INT_TO_DOUBLE;
  public static final int OP_INT_TO_FLOAT;
  public static final int OP_INT_TO_LONG;
  public static final int OP_INT_TO_SHORT;
  public static final int OP_INVOKE_DIRECT;
  public static final int OP_INVOKE_DIRECT_EMPTY;
  public static final int OP_INVOKE_DIRECT_JUMBO;
  public static final int OP_INVOKE_DIRECT_RANGE;
  public static final int OP_INVOKE_INTERFACE;
  public static final int OP_INVOKE_INTERFACE_JUMBO;
  public static final int OP_INVOKE_INTERFACE_RANGE;
  public static final int OP_INVOKE_STATIC;
  public static final int OP_INVOKE_STATIC_JUMBO;
  public static final int OP_INVOKE_STATIC_RANGE;
  public static final int OP_INVOKE_SUPER;
  public static final int OP_INVOKE_SUPER_JUMBO;
  public static final int OP_INVOKE_SUPER_QUICK;
  public static final int OP_INVOKE_SUPER_QUICK_RANGE;
  public static final int OP_INVOKE_SUPER_RANGE;
  public static final int OP_INVOKE_VIRTUAL;
  public static final int OP_INVOKE_VIRTUAL_JUMBO;
  public static final int OP_INVOKE_VIRTUAL_QUICK;
  public static final int OP_INVOKE_VIRTUAL_QUICK_RANGE;
  public static final int OP_INVOKE_VIRTUAL_RANGE;
  public static final int OP_IPUT;
  public static final int OP_IPUT_BOOLEAN;
  public static final int OP_IPUT_BOOLEAN_JUMBO;
  public static final int OP_IPUT_BYTE;
  public static final int OP_IPUT_BYTE_JUMBO;
  public static final int OP_IPUT_CHAR;
  public static final int OP_IPUT_CHAR_JUMBO;
  public static final int OP_IPUT_JUMBO;
  public static final int OP_IPUT_OBJECT;
  public static final int OP_IPUT_OBJECT_JUMBO;
  public static final int OP_IPUT_OBJECT_QUICK;
  public static final int OP_IPUT_QUICK;
  public static final int OP_IPUT_SHORT;
  public static final int OP_IPUT_SHORT_JUMBO;
  public static final int OP_IPUT_WIDE;
  public static final int OP_IPUT_WIDE_JUMBO;
  public static final int OP_IPUT_WIDE_QUICK;
  public static final int OP_IPUT_WIDE_VOLATILE;
  public static final int OP_LONG_TO_DOUBLE;
  public static final int OP_LONG_TO_FLOAT;
  public static final int OP_LONG_TO_INT;
  public static final int OP_MONITOR_ENTER;
  public static final int OP_MONITOR_EXIT;
  public static final int OP_MOVE;
  public static final int OP_MOVE_16;
  public static final int OP_MOVE_EXCEPTION;
  public static final int OP_MOVE_FROM16;
  public static final int OP_MOVE_OBJECT;
  public static final int OP_MOVE_OBJECT_16;
  public static final int OP_MOVE_OBJECT_FROM16;
  public static final int OP_MOVE_RESULT;
  public static final int OP_MOVE_RESULT_OBJECT;
  public static final int OP_MOVE_RESULT_WIDE;
  public static final int OP_MOVE_WIDE;
  public static final int OP_MOVE_WIDE_16;
  public static final int OP_MOVE_WIDE_FROM16;
  public static final int OP_MUL_DOUBLE;
  public static final int OP_MUL_DOUBLE_2ADDR;
  public static final int OP_MUL_FLOAT;
  public static final int OP_MUL_FLOAT_2ADDR;
  public static final int OP_MUL_INT;
  public static final int OP_MUL_INT_2ADDR;
  public static final int OP_MUL_INT_LIT16;
  public static final int OP_MUL_INT_LIT8;
  public static final int OP_MUL_LONG;
  public static final int OP_MUL_LONG_2ADDR;
  public static final int OP_NEG_DOUBLE;
  public static final int OP_NEG_FLOAT;
  public static final int OP_NEG_INT;
  public static final int OP_NEG_LONG;
  public static final int OP_NEW_ARRAY;
  public static final int OP_NEW_ARRAY_JUMBO;
  public static final int OP_NEW_INSTANCE;
  public static final int OP_NEW_INSTANCE_JUMBO;
  public static final int OP_NOP;
  public static final int OP_NOT_INT;
  public static final int OP_NOT_LONG;
  public static final int OP_OR_INT;
  public static final int OP_OR_INT_2ADDR;
  public static final int OP_OR_INT_LIT16;
  public static final int OP_OR_INT_LIT8;
  public static final int OP_OR_LONG;
  public static final int OP_OR_LONG_2ADDR;
  public static final int OP_PACKED_SWITCH;
  public static final int OP_REM_DOUBLE;
  public static final int OP_REM_DOUBLE_2ADDR;
  public static final int OP_REM_FLOAT;
  public static final int OP_REM_FLOAT_2ADDR;
  public static final int OP_REM_INT;
  public static final int OP_REM_INT_2ADDR;
  public static final int OP_REM_INT_LIT16;
  public static final int OP_REM_INT_LIT8;
  public static final int OP_REM_LONG;
  public static final int OP_REM_LONG_2ADDR;
  public static final int OP_RETURN;
  public static final int OP_RETURN_OBJECT;
  public static final int OP_RETURN_VOID;
  public static final int OP_RETURN_WIDE;
  public static final int OP_RSUB_INT;
  public static final int OP_RSUB_INT_LIT8;
  public static final int OP_SGET;
  public static final int OP_SGET_BOOLEAN;
  public static final int OP_SGET_BOOLEAN_JUMBO;
  public static final int OP_SGET_BYTE;
  public static final int OP_SGET_BYTE_JUMBO;
  public static final int OP_SGET_CHAR;
  public static final int OP_SGET_CHAR_JUMBO;
  public static final int OP_SGET_JUMBO;
  public static final int OP_SGET_OBJECT;
  public static final int OP_SGET_OBJECT_JUMBO;
  public static final int OP_SGET_SHORT;
  public static final int OP_SGET_SHORT_JUMBO;
  public static final int OP_SGET_WIDE;
  public static final int OP_SGET_WIDE_JUMBO;
  public static final int OP_SGET_WIDE_VOLATILE;
  public static final int OP_SHL_INT;
  public static final int OP_SHL_INT_2ADDR;
  public static final int OP_SHL_INT_LIT8;
  public static final int OP_SHL_LONG;
  public static final int OP_SHL_LONG_2ADDR;
  public static final int OP_SHR_INT;
  public static final int OP_SHR_INT_2ADDR;
  public static final int OP_SHR_INT_LIT8;
  public static final int OP_SHR_LONG;
  public static final int OP_SHR_LONG_2ADDR;
  public static final int OP_SPARSE_SWITCH;
  public static final int OP_SPUT;
  public static final int OP_SPUT_BOOLEAN;
  public static final int OP_SPUT_BOOLEAN_JUMBO;
  public static final int OP_SPUT_BYTE;
  public static final int OP_SPUT_BYTE_JUMBO;
  public static final int OP_SPUT_CHAR;
  public static final int OP_SPUT_CHAR_JUMBO;
  public static final int OP_SPUT_JUMBO;
  public static final int OP_SPUT_OBJECT;
  public static final int OP_SPUT_OBJECT_JUMBO;
  public static final int OP_SPUT_SHORT;
  public static final int OP_SPUT_SHORT_JUMBO;
  public static final int OP_SPUT_WIDE;
  public static final int OP_SPUT_WIDE_JUMBO;
  public static final int OP_SPUT_WIDE_VOLATILE;
  public static final int OP_SUB_DOUBLE;
  public static final int OP_SUB_DOUBLE_2ADDR;
  public static final int OP_SUB_FLOAT;
  public static final int OP_SUB_FLOAT_2ADDR;
  public static final int OP_SUB_INT;
  public static final int OP_SUB_INT_2ADDR;
  public static final int OP_SUB_LONG;
  public static final int OP_SUB_LONG_2ADDR;
  public static final int OP_THROW;
  public static final int OP_THROW_VERIFICATION_ERROR;
  public static final int OP_USHR_INT;
  public static final int OP_USHR_INT_2ADDR;
  public static final int OP_USHR_INT_LIT8;
  public static final int OP_USHR_LONG;
  public static final int OP_USHR_LONG_2ADDR;
  public static final int OP_XOR_INT;
  public static final int OP_XOR_INT_2ADDR;
  public static final int OP_XOR_INT_LIT16;
  public static final int OP_XOR_INT_LIT8;
  public static final int OP_XOR_LONG;
  public static final int OP_XOR_LONG_2ADDR;
}
public class dalvik.system.BaseDexClassLoader
  extends java.lang.ClassLoader
{
  public void <init>(java.lang.String, java.io.File, java.lang.String, java.lang.ClassLoader);
  public java.lang.String findLibrary(java.lang.String);
  public java.lang.String toString();
  protected java.lang.Class findClass(java.lang.String)  throws java.lang.ClassNotFoundException;
  protected java.lang.Package getPackage(java.lang.String);
  protected java.net.URL findResource(java.lang.String);
  protected java.util.Enumeration findResources(java.lang.String);
}
public class dalvik.system.DexClassLoader
  extends dalvik.system.BaseDexClassLoader
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.ClassLoader);
}
public final class dalvik.system.DexFile
  extends java.lang.Object
{
  public static native boolean isDexOptNeeded(java.lang.String)  throws java.io.FileNotFoundException, java.io.IOException;
  public static dalvik.system.DexFile loadDex(java.lang.String, java.lang.String, int)  throws java.io.IOException;
  public void <init>(java.io.File)  throws java.io.IOException;
  public void <init>(java.lang.String)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public java.lang.Class loadClass(java.lang.String, java.lang.ClassLoader);
  public java.lang.String getName();
  public java.lang.String toString();
  public java.util.Enumeration entries();
  protected void finalize()  throws java.lang.Throwable;
}
public class dalvik.system.PathClassLoader
  extends dalvik.system.BaseDexClassLoader
{
  public void <init>(java.lang.String, java.lang.ClassLoader);
  public void <init>(java.lang.String, java.lang.String, java.lang.ClassLoader);
}
public final class java.awt.font.NumericShaper
  extends java.lang.Object
  implements java.io.Serializable
{
  public static java.awt.font.NumericShaper getContextualShaper(int);
  public static java.awt.font.NumericShaper getContextualShaper(int, int);
  public static java.awt.font.NumericShaper getContextualShaper(java.util.Set);
  public static java.awt.font.NumericShaper getContextualShaper(java.util.Set, java.awt.font.NumericShaper$Range);
  public static java.awt.font.NumericShaper getShaper(int);
  public static java.awt.font.NumericShaper getShaper(java.awt.font.NumericShaper$Range);
  public boolean equals(java.lang.Object);
  public boolean isContextual();
  public int getRanges();
  public int hashCode();
  public void shape(char[], int, int);
  public void shape(char[], int, int, int);
  public void shape(char[], int, int, java.awt.font.NumericShaper$Range);
  public java.lang.String toString();
  public java.util.Set getRangeSet();
  public static final int ALL_RANGES;
  public static final int ARABIC;
  public static final int BENGALI;
  public static final int DEVANAGARI;
  public static final int EASTERN_ARABIC;
  public static final int ETHIOPIC;
  public static final int EUROPEAN;
  public static final int GUJARATI;
  public static final int GURMUKHI;
  public static final int KANNADA;
  public static final int KHMER;
  public static final int LAO;
  public static final int MALAYALAM;
  public static final int MONGOLIAN;
  public static final int MYANMAR;
  public static final int ORIYA;
  public static final int TAMIL;
  public static final int TELUGU;
  public static final int THAI;
  public static final int TIBETAN;
}
public final class java.awt.font.NumericShaper$Range
  extends java.lang.Enum
{
  public static java.awt.font.NumericShaper$Range valueOf(java.lang.String);
  public static java.awt.font.NumericShaper$Range[] values();
  public static final java.awt.font.NumericShaper$Range ARABIC;
  public static final java.awt.font.NumericShaper$Range BALINESE;
  public static final java.awt.font.NumericShaper$Range BENGALI;
  public static final java.awt.font.NumericShaper$Range CHAM;
  public static final java.awt.font.NumericShaper$Range DEVANAGARI;
  public static final java.awt.font.NumericShaper$Range EASTERN_ARABIC;
  public static final java.awt.font.NumericShaper$Range ETHIOPIC;
  public static final java.awt.font.NumericShaper$Range EUROPEAN;
  public static final java.awt.font.NumericShaper$Range GUJARATI;
  public static final java.awt.font.NumericShaper$Range GURMUKHI;
  public static final java.awt.font.NumericShaper$Range JAVANESE;
  public static final java.awt.font.NumericShaper$Range KANNADA;
  public static final java.awt.font.NumericShaper$Range KAYAH_LI;
  public static final java.awt.font.NumericShaper$Range KHMER;
  public static final java.awt.font.NumericShaper$Range LAO;
  public static final java.awt.font.NumericShaper$Range LEPCHA;
  public static final java.awt.font.NumericShaper$Range LIMBU;
  public static final java.awt.font.NumericShaper$Range MALAYALAM;
  public static final java.awt.font.NumericShaper$Range MEETEI_MAYEK;
  public static final java.awt.font.NumericShaper$Range MONGOLIAN;
  public static final java.awt.font.NumericShaper$Range MYANMAR;
  public static final java.awt.font.NumericShaper$Range MYANMAR_SHAN;
  public static final java.awt.font.NumericShaper$Range NEW_TAI_LUE;
  public static final java.awt.font.NumericShaper$Range NKO;
  public static final java.awt.font.NumericShaper$Range OL_CHIKI;
  public static final java.awt.font.NumericShaper$Range ORIYA;
  public static final java.awt.font.NumericShaper$Range SAURASHTRA;
  public static final java.awt.font.NumericShaper$Range SUNDANESE;
  public static final java.awt.font.NumericShaper$Range TAI_THAM_HORA;
  public static final java.awt.font.NumericShaper$Range TAI_THAM_THAM;
  public static final java.awt.font.NumericShaper$Range TAMIL;
  public static final java.awt.font.NumericShaper$Range TELUGU;
  public static final java.awt.font.NumericShaper$Range THAI;
  public static final java.awt.font.NumericShaper$Range TIBETAN;
  public static final java.awt.font.NumericShaper$Range VAI;
}
public final class java.awt.font.TextAttribute
  extends java.text.AttributedCharacterIterator$Attribute
{
  protected void <init>(java.lang.String);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  public static final java.awt.font.TextAttribute BACKGROUND;
  public static final java.awt.font.TextAttribute BIDI_EMBEDDING;
  public static final java.awt.font.TextAttribute CHAR_REPLACEMENT;
  public static final java.awt.font.TextAttribute FAMILY;
  public static final java.awt.font.TextAttribute FONT;
  public static final java.awt.font.TextAttribute FOREGROUND;
  public static final java.awt.font.TextAttribute INPUT_METHOD_HIGHLIGHT;
  public static final java.awt.font.TextAttribute INPUT_METHOD_UNDERLINE;
  public static final java.awt.font.TextAttribute JUSTIFICATION;
  public static final java.awt.font.TextAttribute KERNING;
  public static final java.awt.font.TextAttribute LIGATURES;
  public static final java.awt.font.TextAttribute NUMERIC_SHAPING;
  public static final java.awt.font.TextAttribute POSTURE;
  public static final java.awt.font.TextAttribute RUN_DIRECTION;
  public static final java.awt.font.TextAttribute SIZE;
  public static final java.awt.font.TextAttribute STRIKETHROUGH;
  public static final java.awt.font.TextAttribute SUPERSCRIPT;
  public static final java.awt.font.TextAttribute SWAP_COLORS;
  public static final java.awt.font.TextAttribute TRACKING;
  public static final java.awt.font.TextAttribute TRANSFORM;
  public static final java.awt.font.TextAttribute UNDERLINE;
  public static final java.awt.font.TextAttribute WEIGHT;
  public static final java.awt.font.TextAttribute WIDTH;
  public static final java.lang.Boolean RUN_DIRECTION_LTR;
  public static final java.lang.Boolean RUN_DIRECTION_RTL;
  public static final java.lang.Boolean STRIKETHROUGH_ON;
  public static final java.lang.Boolean SWAP_COLORS_ON;
  public static final java.lang.Float JUSTIFICATION_FULL;
  public static final java.lang.Float JUSTIFICATION_NONE;
  public static final java.lang.Float POSTURE_OBLIQUE;
  public static final java.lang.Float POSTURE_REGULAR;
  public static final java.lang.Float TRACKING_LOOSE;
  public static final java.lang.Float TRACKING_TIGHT;
  public static final java.lang.Float WEIGHT_BOLD;
  public static final java.lang.Float WEIGHT_DEMIBOLD;
  public static final java.lang.Float WEIGHT_DEMILIGHT;
  public static final java.lang.Float WEIGHT_EXTRABOLD;
  public static final java.lang.Float WEIGHT_EXTRA_LIGHT;
  public static final java.lang.Float WEIGHT_HEAVY;
  public static final java.lang.Float WEIGHT_LIGHT;
  public static final java.lang.Float WEIGHT_MEDIUM;
  public static final java.lang.Float WEIGHT_REGULAR;
  public static final java.lang.Float WEIGHT_SEMIBOLD;
  public static final java.lang.Float WEIGHT_ULTRABOLD;
  public static final java.lang.Float WIDTH_CONDENSED;
  public static final java.lang.Float WIDTH_EXTENDED;
  public static final java.lang.Float WIDTH_REGULAR;
  public static final java.lang.Float WIDTH_SEMI_CONDENSED;
  public static final java.lang.Float WIDTH_SEMI_EXTENDED;
  public static final java.lang.Integer KERNING_ON;
  public static final java.lang.Integer LIGATURES_ON;
  public static final java.lang.Integer SUPERSCRIPT_SUB;
  public static final java.lang.Integer SUPERSCRIPT_SUPER;
  public static final java.lang.Integer UNDERLINE_LOW_DASHED;
  public static final java.lang.Integer UNDERLINE_LOW_DOTTED;
  public static final java.lang.Integer UNDERLINE_LOW_GRAY;
  public static final java.lang.Integer UNDERLINE_LOW_ONE_PIXEL;
  public static final java.lang.Integer UNDERLINE_LOW_TWO_PIXEL;
  public static final java.lang.Integer UNDERLINE_ON;
}
public class java.beans.IndexedPropertyChangeEvent
  extends java.beans.PropertyChangeEvent
{
  public void <init>(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object, int);
  public int getIndex();
}
public class java.beans.PropertyChangeEvent
  extends java.util.EventObject
{
  public void <init>(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Object);
  public void setPropagationId(java.lang.Object);
  public java.lang.Object getNewValue();
  public java.lang.Object getOldValue();
  public java.lang.Object getPropagationId();
  public java.lang.String getPropertyName();
  public java.lang.String toString();
}
public interface java.beans.PropertyChangeListener
  extends java.util.EventListener
{
  public abstract void propertyChange(java.beans.PropertyChangeEvent);
}
public class java.beans.PropertyChangeListenerProxy
  extends java.util.EventListenerProxy
  implements java.beans.PropertyChangeListener
{
  public void <init>(java.lang.String, java.beans.PropertyChangeListener);
  public void propertyChange(java.beans.PropertyChangeEvent);
  public java.lang.String getPropertyName();
}
public class java.beans.PropertyChangeSupport
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.lang.Object);
  public boolean hasListeners(java.lang.String);
  public void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public void fireIndexedPropertyChange(java.lang.String, int, boolean, boolean);
  public void fireIndexedPropertyChange(java.lang.String, int, int, int);
  public void fireIndexedPropertyChange(java.lang.String, int, java.lang.Object, java.lang.Object);
  public void firePropertyChange(java.beans.PropertyChangeEvent);
  public void firePropertyChange(java.lang.String, boolean, boolean);
  public void firePropertyChange(java.lang.String, int, int);
  public void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object);
  public void removePropertyChangeListener(java.beans.PropertyChangeListener);
  public void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public java.beans.PropertyChangeListener[] getPropertyChangeListeners();
  public java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String);
}
public class java.io.BufferedInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, int);
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
  protected int count;
  protected int marklimit;
  protected int markpos;
  protected int pos;
  protected byte[] buf;
}
public class java.io.BufferedOutputStream
  extends java.io.FilterOutputStream
{
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, int);
  public void flush()  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  protected int count;
  protected byte[] buf;
}
public class java.io.BufferedReader
  extends java.io.Reader
{
  public void <init>(java.io.Reader);
  public void <init>(java.io.Reader, int);
  public boolean markSupported();
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int)  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
  public java.lang.String readLine()  throws java.io.IOException;
  public java.util.stream.Stream lines();
}
public class java.io.BufferedWriter
  extends java.io.Writer
{
  public void <init>(java.io.Writer);
  public void <init>(java.io.Writer, int);
  public void close()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void newLine()  throws java.io.IOException;
  public void write(char[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public void write(java.lang.String, int, int)  throws java.io.IOException;
}
public class java.io.ByteArrayInputStream
  extends java.io.InputStream
{
  public void <init>(byte[]);
  public void <init>(byte[], int, int);
  public boolean markSupported();
  public int available();
  public int read();
  public int read(byte[], int, int);
  public long skip(long);
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset();
  protected int count;
  protected int mark;
  protected int pos;
  protected byte[] buf;
}
public class java.io.ByteArrayOutputStream
  extends java.io.OutputStream
{
  public void <init>();
  public void <init>(int);
  public int size();
  public void close()  throws java.io.IOException;
  public void reset();
  public void write(byte[], int, int);
  public void write(int);
  public void writeTo(java.io.OutputStream)  throws java.io.IOException;
  public byte[] toByteArray();
  public java.lang.String toString();
  public java.lang.String toString(int);
  public java.lang.String toString(java.lang.String)  throws java.io.UnsupportedEncodingException;
  protected int count;
  protected byte[] buf;
}
public class java.io.CharArrayReader
  extends java.io.Reader
{
  public void <init>(char[]);
  public void <init>(char[], int, int);
  public boolean markSupported();
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close();
  public void mark(int)  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
  protected int count;
  protected int markedPos;
  protected int pos;
  protected char[] buf;
}
public class java.io.CharArrayWriter
  extends java.io.Writer
{
  public void <init>();
  public void <init>(int);
  public int size();
  public void close();
  public void flush();
  public void reset();
  public void write(char[], int, int);
  public void write(int);
  public void write(java.lang.String, int, int);
  public void writeTo(java.io.Writer)  throws java.io.IOException;
  public char[] toCharArray();
  public java.io.CharArrayWriter append(char);
  public java.io.CharArrayWriter append(java.lang.CharSequence);
  public java.io.CharArrayWriter append(java.lang.CharSequence, int, int);
  public java.io.Writer append(char)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.String toString();
  protected int count;
  protected char[] buf;
}
public class java.io.CharConversionException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.io.Closeable
  extends java.lang.AutoCloseable
{
  public abstract void close()  throws java.io.IOException;
}
public final class java.io.Console
  extends java.lang.Object
  implements java.io.Flushable
{
  public void flush();
  public char[] readPassword();
  public char[] readPassword(java.lang.String, java.lang.Object[]);
  public java.io.Console format(java.lang.String, java.lang.Object[]);
  public java.io.Console printf(java.lang.String, java.lang.Object[]);
  public java.io.PrintWriter writer();
  public java.io.Reader reader();
  public java.lang.String readLine();
  public java.lang.String readLine(java.lang.String, java.lang.Object[]);
}
public interface java.io.DataInput
{
  public abstract boolean readBoolean()  throws java.io.IOException;
  public abstract byte readByte()  throws java.io.IOException;
  public abstract char readChar()  throws java.io.IOException;
  public abstract double readDouble()  throws java.io.IOException;
  public abstract float readFloat()  throws java.io.IOException;
  public abstract int readInt()  throws java.io.IOException;
  public abstract int readUnsignedByte()  throws java.io.IOException;
  public abstract int readUnsignedShort()  throws java.io.IOException;
  public abstract int skipBytes(int)  throws java.io.IOException;
  public abstract long readLong()  throws java.io.IOException;
  public abstract short readShort()  throws java.io.IOException;
  public abstract void readFully(byte[])  throws java.io.IOException;
  public abstract void readFully(byte[], int, int)  throws java.io.IOException;
  public abstract java.lang.String readLine()  throws java.io.IOException;
  public abstract java.lang.String readUTF()  throws java.io.IOException;
}
public class java.io.DataInputStream
  extends java.io.FilterInputStream
  implements java.io.DataInput
{
  public static final java.lang.String readUTF(java.io.DataInput)  throws java.io.IOException;
  public void <init>(java.io.InputStream);
  public final boolean readBoolean()  throws java.io.IOException;
  public final byte readByte()  throws java.io.IOException;
  public final char readChar()  throws java.io.IOException;
  public final double readDouble()  throws java.io.IOException;
  public final float readFloat()  throws java.io.IOException;
  public final int read(byte[])  throws java.io.IOException;
  public final int read(byte[], int, int)  throws java.io.IOException;
  public final int readInt()  throws java.io.IOException;
  public final int readUnsignedByte()  throws java.io.IOException;
  public final int readUnsignedShort()  throws java.io.IOException;
  public final int skipBytes(int)  throws java.io.IOException;
  public final long readLong()  throws java.io.IOException;
  public final short readShort()  throws java.io.IOException;
  public final void readFully(byte[])  throws java.io.IOException;
  public final void readFully(byte[], int, int)  throws java.io.IOException;
  public final java.lang.String readLine()  throws java.io.IOException;
  public final java.lang.String readUTF()  throws java.io.IOException;
}
public interface java.io.DataOutput
{
  public abstract void write(byte[])  throws java.io.IOException;
  public abstract void write(byte[], int, int)  throws java.io.IOException;
  public abstract void write(int)  throws java.io.IOException;
  public abstract void writeBoolean(boolean)  throws java.io.IOException;
  public abstract void writeByte(int)  throws java.io.IOException;
  public abstract void writeBytes(java.lang.String)  throws java.io.IOException;
  public abstract void writeChar(int)  throws java.io.IOException;
  public abstract void writeChars(java.lang.String)  throws java.io.IOException;
  public abstract void writeDouble(double)  throws java.io.IOException;
  public abstract void writeFloat(float)  throws java.io.IOException;
  public abstract void writeInt(int)  throws java.io.IOException;
  public abstract void writeLong(long)  throws java.io.IOException;
  public abstract void writeShort(int)  throws java.io.IOException;
  public abstract void writeUTF(java.lang.String)  throws java.io.IOException;
}
public class java.io.DataOutputStream
  extends java.io.FilterOutputStream
  implements java.io.DataOutput
{
  public void <init>(java.io.OutputStream);
  public final int size();
  public final void writeBoolean(boolean)  throws java.io.IOException;
  public final void writeByte(int)  throws java.io.IOException;
  public final void writeBytes(java.lang.String)  throws java.io.IOException;
  public final void writeChar(int)  throws java.io.IOException;
  public final void writeChars(java.lang.String)  throws java.io.IOException;
  public final void writeDouble(double)  throws java.io.IOException;
  public final void writeFloat(float)  throws java.io.IOException;
  public final void writeInt(int)  throws java.io.IOException;
  public final void writeLong(long)  throws java.io.IOException;
  public final void writeShort(int)  throws java.io.IOException;
  public final void writeUTF(java.lang.String)  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  protected int written;
}
public class java.io.EOFException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.io.Externalizable
  extends java.io.Serializable
{
  public abstract void readExternal(java.io.ObjectInput)  throws java.io.IOException, java.lang.ClassNotFoundException;
  public abstract void writeExternal(java.io.ObjectOutput)  throws java.io.IOException;
}
public class java.io.File
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Comparable
{
  public static java.io.File createTempFile(java.lang.String, java.lang.String)  throws java.io.IOException;
  public static java.io.File createTempFile(java.lang.String, java.lang.String, java.io.File)  throws java.io.IOException;
  public static java.io.File[] listRoots();
  public void <init>(java.io.File, java.lang.String);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.net.URI);
  public boolean canExecute();
  public boolean canRead();
  public boolean canWrite();
  public boolean createNewFile()  throws java.io.IOException;
  public boolean delete();
  public boolean equals(java.lang.Object);
  public boolean exists();
  public boolean isAbsolute();
  public boolean isDirectory();
  public boolean isFile();
  public boolean isHidden();
  public boolean mkdir();
  public boolean mkdirs();
  public boolean renameTo(java.io.File);
  public boolean setExecutable(boolean);
  public boolean setExecutable(boolean, boolean);
  public boolean setLastModified(long);
  public boolean setReadOnly();
  public boolean setReadable(boolean);
  public boolean setReadable(boolean, boolean);
  public boolean setWritable(boolean);
  public boolean setWritable(boolean, boolean);
  public int compareTo(java.io.File);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public long getFreeSpace();
  public long getTotalSpace();
  public long getUsableSpace();
  public long lastModified();
  public long length();
  public void deleteOnExit();
  public java.io.File getAbsoluteFile();
  public java.io.File getCanonicalFile()  throws java.io.IOException;
  public java.io.File getParentFile();
  public java.io.File[] listFiles();
  public java.io.File[] listFiles(java.io.FileFilter);
  public java.io.File[] listFiles(java.io.FilenameFilter);
  public java.lang.String getAbsolutePath();
  public java.lang.String getCanonicalPath()  throws java.io.IOException;
  public java.lang.String getName();
  public java.lang.String getParent();
  public java.lang.String getPath();
  public java.lang.String toString();
  public java.lang.String[] list();
  public java.lang.String[] list(java.io.FilenameFilter);
  public java.net.URI toURI();
  public java.net.URL toURL()  throws java.net.MalformedURLException;
  public static final char pathSeparatorChar;
  public static final char separatorChar;
  public static final java.lang.String pathSeparator;
  public static final java.lang.String separator;
}
public final class java.io.FileDescriptor
  extends java.lang.Object
{
  public void <init>();
  public boolean valid();
  public native void sync()  throws java.io.SyncFailedException;
  public static final java.io.FileDescriptor err;
  public static final java.io.FileDescriptor in;
  public static final java.io.FileDescriptor out;
}
public interface java.io.FileFilter
{
  public abstract boolean accept(java.io.File);
}
public class java.io.FileInputStream
  extends java.io.InputStream
{
  public void <init>(java.io.File)  throws java.io.FileNotFoundException;
  public void <init>(java.io.FileDescriptor);
  public void <init>(java.lang.String)  throws java.io.FileNotFoundException;
  public final java.io.FileDescriptor getFD()  throws java.io.IOException;
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public java.nio.channels.FileChannel getChannel();
  protected void finalize()  throws java.io.IOException;
}
public class java.io.FileNotFoundException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.io.FileOutputStream
  extends java.io.OutputStream
{
  public void <init>(java.io.File)  throws java.io.FileNotFoundException;
  public void <init>(java.io.File, boolean)  throws java.io.FileNotFoundException;
  public void <init>(java.io.FileDescriptor);
  public void <init>(java.lang.String)  throws java.io.FileNotFoundException;
  public void <init>(java.lang.String, boolean)  throws java.io.FileNotFoundException;
  public final java.io.FileDescriptor getFD()  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void write(byte[])  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public java.nio.channels.FileChannel getChannel();
  protected void finalize()  throws java.io.IOException;
}
public final class java.io.FilePermission
  extends java.security.Permission
  implements java.io.Serializable
{
  public void <init>(java.lang.String, java.lang.String);
  public boolean implies(java.security.Permission);
  public java.lang.String getActions();
}
public class java.io.FileReader
  extends java.io.InputStreamReader
{
  public void <init>(java.io.File)  throws java.io.FileNotFoundException;
  public void <init>(java.io.FileDescriptor);
  public void <init>(java.lang.String)  throws java.io.FileNotFoundException;
}
public class java.io.FileWriter
  extends java.io.OutputStreamWriter
{
  public void <init>(java.io.File)  throws java.io.IOException;
  public void <init>(java.io.File, boolean)  throws java.io.IOException;
  public void <init>(java.io.FileDescriptor);
  public void <init>(java.lang.String)  throws java.io.IOException;
  public void <init>(java.lang.String, boolean)  throws java.io.IOException;
}
public interface java.io.FilenameFilter
{
  public abstract boolean accept(java.io.File, java.lang.String);
}
public class java.io.FilterInputStream
  extends java.io.InputStream
{
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
  protected void <init>(java.io.InputStream);
  protected java.io.InputStream in;
}
public class java.io.FilterOutputStream
  extends java.io.OutputStream
{
  public void <init>(java.io.OutputStream);
  public void close()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(byte[])  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  protected java.io.OutputStream out;
}
public abstract class java.io.FilterReader
  extends java.io.Reader
{
  public boolean markSupported();
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int)  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
  protected void <init>(java.io.Reader);
  protected java.io.Reader in;
}
public abstract class java.io.FilterWriter
  extends java.io.Writer
{
  public void close()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(char[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public void write(java.lang.String, int, int)  throws java.io.IOException;
  protected void <init>(java.io.Writer);
  protected java.io.Writer out;
}
public interface java.io.Flushable
{
  public abstract void flush()  throws java.io.IOException;
}
public class java.io.IOError
  extends java.lang.Error
{
  public void <init>(java.lang.Throwable);
}
public class java.io.IOException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public abstract class java.io.InputStream
  extends java.lang.Object
  implements java.io.Closeable
{
  public void <init>();
  public abstract int read()  throws java.io.IOException;
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
}
public class java.io.InputStreamReader
  extends java.io.Reader
{
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, java.lang.String)  throws java.io.UnsupportedEncodingException;
  public void <init>(java.io.InputStream, java.nio.charset.Charset);
  public void <init>(java.io.InputStream, java.nio.charset.CharsetDecoder);
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public java.lang.String getEncoding();
}
public class java.io.InterruptedIOException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
  public int bytesTransferred;
}
public class java.io.InvalidClassException
  extends java.io.ObjectStreamException
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public java.lang.String getMessage();
  public java.lang.String classname;
}
public class java.io.InvalidObjectException
  extends java.io.ObjectStreamException
{
  public void <init>(java.lang.String);
}
public class java.io.LineNumberInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream);
  public int available()  throws java.io.IOException;
  public int getLineNumber();
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
  public void setLineNumber(int);
}
public class java.io.LineNumberReader
  extends java.io.BufferedReader
{
  public void <init>(java.io.Reader);
  public void <init>(java.io.Reader, int);
  public int getLineNumber();
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void mark(int)  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
  public void setLineNumber(int);
  public java.lang.String readLine()  throws java.io.IOException;
}
public class java.io.NotActiveException
  extends java.io.ObjectStreamException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.io.NotSerializableException
  extends java.io.ObjectStreamException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.io.ObjectInput
  extends java.io.DataInput, java.lang.AutoCloseable
{
  public abstract int available()  throws java.io.IOException;
  public abstract int read()  throws java.io.IOException;
  public abstract int read(byte[])  throws java.io.IOException;
  public abstract int read(byte[], int, int)  throws java.io.IOException;
  public abstract long skip(long)  throws java.io.IOException;
  public abstract void close()  throws java.io.IOException;
  public abstract java.lang.Object readObject()  throws java.io.IOException, java.lang.ClassNotFoundException;
}
public class java.io.ObjectInputStream
  extends java.io.InputStream
  implements java.io.ObjectInput, java.io.ObjectStreamConstants
{
  public void <init>(java.io.InputStream)  throws java.io.IOException;
  public final java.lang.Object readObject()  throws java.io.IOException, java.lang.ClassNotFoundException;
  public boolean readBoolean()  throws java.io.IOException;
  public byte readByte()  throws java.io.IOException;
  public char readChar()  throws java.io.IOException;
  public double readDouble()  throws java.io.IOException;
  public float readFloat()  throws java.io.IOException;
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public int readInt()  throws java.io.IOException;
  public int readUnsignedByte()  throws java.io.IOException;
  public int readUnsignedShort()  throws java.io.IOException;
  public int skipBytes(int)  throws java.io.IOException;
  public long readLong()  throws java.io.IOException;
  public short readShort()  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void defaultReadObject()  throws java.io.IOException, java.lang.ClassNotFoundException;
  public void readFully(byte[])  throws java.io.IOException;
  public void readFully(byte[], int, int)  throws java.io.IOException;
  public void registerValidation(java.io.ObjectInputValidation, int)  throws java.io.InvalidObjectException, java.io.NotActiveException;
  public java.io.ObjectInputStream$GetField readFields()  throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.lang.Object readUnshared()  throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.lang.String readLine()  throws java.io.IOException;
  public java.lang.String readUTF()  throws java.io.IOException;
  protected void <init>()  throws java.io.IOException, java.lang.SecurityException;
  protected boolean enableResolveObject(boolean)  throws java.lang.SecurityException;
  protected void readStreamHeader()  throws java.io.IOException, java.io.StreamCorruptedException;
  protected java.io.ObjectStreamClass readClassDescriptor()  throws java.io.IOException, java.lang.ClassNotFoundException;
  protected java.lang.Class resolveClass(java.io.ObjectStreamClass)  throws java.io.IOException, java.lang.ClassNotFoundException;
  protected java.lang.Class resolveProxyClass(java.lang.String[])  throws java.io.IOException, java.lang.ClassNotFoundException;
  protected java.lang.Object readObjectOverride()  throws java.io.IOException, java.lang.ClassNotFoundException;
  protected java.lang.Object resolveObject(java.lang.Object)  throws java.io.IOException;
}
public abstract class java.io.ObjectInputStream$GetField
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean defaulted(java.lang.String)  throws java.io.IOException;
  public abstract boolean get(java.lang.String, boolean)  throws java.io.IOException;
  public abstract byte get(java.lang.String, byte)  throws java.io.IOException;
  public abstract char get(java.lang.String, char)  throws java.io.IOException;
  public abstract double get(java.lang.String, double)  throws java.io.IOException;
  public abstract float get(java.lang.String, float)  throws java.io.IOException;
  public abstract int get(java.lang.String, int)  throws java.io.IOException;
  public abstract long get(java.lang.String, long)  throws java.io.IOException;
  public abstract short get(java.lang.String, short)  throws java.io.IOException;
  public abstract java.io.ObjectStreamClass getObjectStreamClass();
  public abstract java.lang.Object get(java.lang.String, java.lang.Object)  throws java.io.IOException;
}
public interface java.io.ObjectInputValidation
{
  public abstract void validateObject()  throws java.io.InvalidObjectException;
}
public interface java.io.ObjectOutput
  extends java.io.DataOutput, java.lang.AutoCloseable
{
  public abstract void close()  throws java.io.IOException;
  public abstract void flush()  throws java.io.IOException;
  public abstract void write(byte[])  throws java.io.IOException;
  public abstract void write(byte[], int, int)  throws java.io.IOException;
  public abstract void write(int)  throws java.io.IOException;
  public abstract void writeObject(java.lang.Object)  throws java.io.IOException;
}
public class java.io.ObjectOutputStream
  extends java.io.OutputStream
  implements java.io.ObjectOutput, java.io.ObjectStreamConstants
{
  public void <init>(java.io.OutputStream)  throws java.io.IOException;
  public final void writeObject(java.lang.Object)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void defaultWriteObject()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
  public void useProtocolVersion(int)  throws java.io.IOException;
  public void write(byte[])  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public void writeBoolean(boolean)  throws java.io.IOException;
  public void writeByte(int)  throws java.io.IOException;
  public void writeBytes(java.lang.String)  throws java.io.IOException;
  public void writeChar(int)  throws java.io.IOException;
  public void writeChars(java.lang.String)  throws java.io.IOException;
  public void writeDouble(double)  throws java.io.IOException;
  public void writeFields()  throws java.io.IOException;
  public void writeFloat(float)  throws java.io.IOException;
  public void writeInt(int)  throws java.io.IOException;
  public void writeLong(long)  throws java.io.IOException;
  public void writeShort(int)  throws java.io.IOException;
  public void writeUTF(java.lang.String)  throws java.io.IOException;
  public void writeUnshared(java.lang.Object)  throws java.io.IOException;
  public java.io.ObjectOutputStream$PutField putFields()  throws java.io.IOException;
  protected void <init>()  throws java.io.IOException, java.lang.SecurityException;
  protected boolean enableReplaceObject(boolean)  throws java.lang.SecurityException;
  protected void annotateClass(java.lang.Class)  throws java.io.IOException;
  protected void annotateProxyClass(java.lang.Class)  throws java.io.IOException;
  protected void drain()  throws java.io.IOException;
  protected void writeClassDescriptor(java.io.ObjectStreamClass)  throws java.io.IOException;
  protected void writeObjectOverride(java.lang.Object)  throws java.io.IOException;
  protected void writeStreamHeader()  throws java.io.IOException;
  protected java.lang.Object replaceObject(java.lang.Object)  throws java.io.IOException;
}
public abstract class java.io.ObjectOutputStream$PutField
  extends java.lang.Object
{
  public void <init>();
  public abstract void put(java.lang.String, boolean);
  public abstract void put(java.lang.String, byte);
  public abstract void put(java.lang.String, char);
  public abstract void put(java.lang.String, double);
  public abstract void put(java.lang.String, float);
  public abstract void put(java.lang.String, int);
  public abstract void put(java.lang.String, java.lang.Object);
  public abstract void put(java.lang.String, long);
  public abstract void put(java.lang.String, short);
  public abstract void write(java.io.ObjectOutput)  throws java.io.IOException;
}
public class java.io.ObjectStreamClass
  extends java.lang.Object
  implements java.io.Serializable
{
  public static java.io.ObjectStreamClass lookup(java.lang.Class);
  public static java.io.ObjectStreamClass lookupAny(java.lang.Class);
  public long getSerialVersionUID();
  public java.io.ObjectStreamField getField(java.lang.String);
  public java.io.ObjectStreamField[] getFields();
  public java.lang.Class forClass();
  public java.lang.String getName();
  public java.lang.String toString();
  public static final java.io.ObjectStreamField[] NO_FIELDS;
}
public interface java.io.ObjectStreamConstants
{
  public static final byte SC_BLOCK_DATA;
  public static final byte SC_ENUM;
  public static final byte SC_EXTERNALIZABLE;
  public static final byte SC_SERIALIZABLE;
  public static final byte SC_WRITE_METHOD;
  public static final byte TC_ARRAY;
  public static final byte TC_BASE;
  public static final byte TC_BLOCKDATA;
  public static final byte TC_BLOCKDATALONG;
  public static final byte TC_CLASS;
  public static final byte TC_CLASSDESC;
  public static final byte TC_ENDBLOCKDATA;
  public static final byte TC_ENUM;
  public static final byte TC_EXCEPTION;
  public static final byte TC_LONGSTRING;
  public static final byte TC_MAX;
  public static final byte TC_NULL;
  public static final byte TC_OBJECT;
  public static final byte TC_PROXYCLASSDESC;
  public static final byte TC_REFERENCE;
  public static final byte TC_RESET;
  public static final byte TC_STRING;
  public static final int PROTOCOL_VERSION_1;
  public static final int PROTOCOL_VERSION_2;
  public static final int baseWireHandle;
  public static final short STREAM_MAGIC;
  public static final short STREAM_VERSION;
  public static final java.io.SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION;
  public static final java.io.SerializablePermission SUBSTITUTION_PERMISSION;
}
public abstract class java.io.ObjectStreamException
  extends java.io.IOException
{
  protected void <init>();
  protected void <init>(java.lang.String);
}
public class java.io.ObjectStreamField
  extends java.lang.Object
  implements java.lang.Comparable
{
  public void <init>(java.lang.String, java.lang.Class);
  public void <init>(java.lang.String, java.lang.Class, boolean);
  public boolean isPrimitive();
  public boolean isUnshared();
  public char getTypeCode();
  public int compareTo(java.lang.Object);
  public int getOffset();
  public java.lang.Class getType();
  public java.lang.String getName();
  public java.lang.String getTypeString();
  public java.lang.String toString();
  protected void setOffset(int);
}
public class java.io.OptionalDataException
  extends java.io.ObjectStreamException
{
  public boolean eof;
  public int length;
}
public abstract class java.io.OutputStream
  extends java.lang.Object
  implements java.io.Closeable, java.io.Flushable
{
  public void <init>();
  public abstract void write(int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(byte[])  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
}
public class java.io.OutputStreamWriter
  extends java.io.Writer
{
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, java.lang.String)  throws java.io.UnsupportedEncodingException;
  public void <init>(java.io.OutputStream, java.nio.charset.Charset);
  public void <init>(java.io.OutputStream, java.nio.charset.CharsetEncoder);
  public void close()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(char[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public void write(java.lang.String, int, int)  throws java.io.IOException;
  public java.lang.String getEncoding();
}
public class java.io.PipedInputStream
  extends java.io.InputStream
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.io.PipedOutputStream)  throws java.io.IOException;
  public void <init>(java.io.PipedOutputStream, int)  throws java.io.IOException;
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void connect(java.io.PipedOutputStream)  throws java.io.IOException;
  protected void receive(int)  throws java.io.IOException;
  protected static final int PIPE_SIZE;
  protected int in;
  protected int out;
  protected byte[] buffer;
}
public class java.io.PipedOutputStream
  extends java.io.OutputStream
{
  public void <init>();
  public void <init>(java.io.PipedInputStream)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void connect(java.io.PipedInputStream)  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
}
public class java.io.PipedReader
  extends java.io.Reader
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.io.PipedWriter)  throws java.io.IOException;
  public void <init>(java.io.PipedWriter, int)  throws java.io.IOException;
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void connect(java.io.PipedWriter)  throws java.io.IOException;
}
public class java.io.PipedWriter
  extends java.io.Writer
{
  public void <init>();
  public void <init>(java.io.PipedReader)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void connect(java.io.PipedReader)  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(char[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
}
public class java.io.PrintStream
  extends java.io.FilterOutputStream
  implements java.lang.Appendable, java.io.Closeable
{
  public void <init>(java.io.File)  throws java.io.FileNotFoundException;
  public void <init>(java.io.File, java.lang.String)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, boolean);
  public void <init>(java.io.OutputStream, boolean, java.lang.String)  throws java.io.UnsupportedEncodingException;
  public void <init>(java.lang.String)  throws java.io.FileNotFoundException;
  public void <init>(java.lang.String, java.lang.String)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public boolean checkError();
  public void close();
  public void flush();
  public void print(boolean);
  public void print(char);
  public void print(char[]);
  public void print(double);
  public void print(float);
  public void print(int);
  public void print(java.lang.Object);
  public void print(java.lang.String);
  public void print(long);
  public void println();
  public void println(boolean);
  public void println(char);
  public void println(char[]);
  public void println(double);
  public void println(float);
  public void println(int);
  public void println(java.lang.Object);
  public void println(java.lang.String);
  public void println(long);
  public void write(byte[], int, int);
  public void write(int);
  public java.io.PrintStream append(char);
  public java.io.PrintStream append(java.lang.CharSequence);
  public java.io.PrintStream append(java.lang.CharSequence, int, int);
  public java.io.PrintStream format(java.lang.String, java.lang.Object[]);
  public java.io.PrintStream format(java.util.Locale, java.lang.String, java.lang.Object[]);
  public java.io.PrintStream printf(java.lang.String, java.lang.Object[]);
  public java.io.PrintStream printf(java.util.Locale, java.lang.String, java.lang.Object[]);
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  protected void clearError();
  protected void setError();
}
public class java.io.PrintWriter
  extends java.io.Writer
{
  public void <init>(java.io.File)  throws java.io.FileNotFoundException;
  public void <init>(java.io.File, java.lang.String)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, boolean);
  public void <init>(java.io.Writer);
  public void <init>(java.io.Writer, boolean);
  public void <init>(java.lang.String)  throws java.io.FileNotFoundException;
  public void <init>(java.lang.String, java.lang.String)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public boolean checkError();
  public void close();
  public void flush();
  public void print(boolean);
  public void print(char);
  public void print(char[]);
  public void print(double);
  public void print(float);
  public void print(int);
  public void print(java.lang.Object);
  public void print(java.lang.String);
  public void print(long);
  public void println();
  public void println(boolean);
  public void println(char);
  public void println(char[]);
  public void println(double);
  public void println(float);
  public void println(int);
  public void println(java.lang.Object);
  public void println(java.lang.String);
  public void println(long);
  public void write(char[]);
  public void write(char[], int, int);
  public void write(int);
  public void write(java.lang.String);
  public void write(java.lang.String, int, int);
  public java.io.PrintWriter append(char);
  public java.io.PrintWriter append(java.lang.CharSequence);
  public java.io.PrintWriter append(java.lang.CharSequence, int, int);
  public java.io.PrintWriter format(java.lang.String, java.lang.Object[]);
  public java.io.PrintWriter format(java.util.Locale, java.lang.String, java.lang.Object[]);
  public java.io.PrintWriter printf(java.lang.String, java.lang.Object[]);
  public java.io.PrintWriter printf(java.util.Locale, java.lang.String, java.lang.Object[]);
  public java.io.Writer append(char)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  protected void clearError();
  protected void setError();
  protected java.io.Writer out;
}
public class java.io.PushbackInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, int);
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
  public void unread(byte[])  throws java.io.IOException;
  public void unread(byte[], int, int)  throws java.io.IOException;
  public void unread(int)  throws java.io.IOException;
  protected int pos;
  protected byte[] buf;
}
public class java.io.PushbackReader
  extends java.io.FilterReader
{
  public void <init>(java.io.Reader);
  public void <init>(java.io.Reader, int);
  public boolean markSupported();
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int)  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
  public void unread(char[])  throws java.io.IOException;
  public void unread(char[], int, int)  throws java.io.IOException;
  public void unread(int)  throws java.io.IOException;
}
public class java.io.RandomAccessFile
  extends java.lang.Object
  implements java.io.DataOutput, java.io.DataInput, java.io.Closeable
{
  public void <init>(java.io.File, java.lang.String)  throws java.io.FileNotFoundException;
  public void <init>(java.lang.String, java.lang.String)  throws java.io.FileNotFoundException;
  public final boolean readBoolean()  throws java.io.IOException;
  public final byte readByte()  throws java.io.IOException;
  public final char readChar()  throws java.io.IOException;
  public final double readDouble()  throws java.io.IOException;
  public final float readFloat()  throws java.io.IOException;
  public final int readInt()  throws java.io.IOException;
  public final int readUnsignedByte()  throws java.io.IOException;
  public final int readUnsignedShort()  throws java.io.IOException;
  public final long readLong()  throws java.io.IOException;
  public final short readShort()  throws java.io.IOException;
  public final void readFully(byte[])  throws java.io.IOException;
  public final void readFully(byte[], int, int)  throws java.io.IOException;
  public final void writeBoolean(boolean)  throws java.io.IOException;
  public final void writeByte(int)  throws java.io.IOException;
  public final void writeBytes(java.lang.String)  throws java.io.IOException;
  public final void writeChar(int)  throws java.io.IOException;
  public final void writeChars(java.lang.String)  throws java.io.IOException;
  public final void writeDouble(double)  throws java.io.IOException;
  public final void writeFloat(float)  throws java.io.IOException;
  public final void writeInt(int)  throws java.io.IOException;
  public final void writeLong(long)  throws java.io.IOException;
  public final void writeShort(int)  throws java.io.IOException;
  public final void writeUTF(java.lang.String)  throws java.io.IOException;
  public final java.io.FileDescriptor getFD()  throws java.io.IOException;
  public final java.lang.String readLine()  throws java.io.IOException;
  public final java.lang.String readUTF()  throws java.io.IOException;
  public final java.nio.channels.FileChannel getChannel();
  public int read()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public int skipBytes(int)  throws java.io.IOException;
  public long getFilePointer()  throws java.io.IOException;
  public long length()  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void seek(long)  throws java.io.IOException;
  public void setLength(long)  throws java.io.IOException;
  public void write(byte[])  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  protected void finalize()  throws java.lang.Throwable;
}
public abstract class java.io.Reader
  extends java.lang.Object
  implements java.lang.Readable, java.io.Closeable
{
  public abstract int read(char[], int, int)  throws java.io.IOException;
  public abstract void close()  throws java.io.IOException;
  public boolean markSupported();
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[])  throws java.io.IOException;
  public int read(java.nio.CharBuffer)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void mark(int)  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
  protected void <init>();
  protected void <init>(java.lang.Object);
  protected java.lang.Object lock;
}
public class java.io.SequenceInputStream
  extends java.io.InputStream
{
  public void <init>(java.io.InputStream, java.io.InputStream);
  public void <init>(java.util.Enumeration);
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
}
public interface java.io.Serializable
{
}
public final class java.io.SerializablePermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public class java.io.StreamCorruptedException
  extends java.io.ObjectStreamException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.io.StreamTokenizer
  extends java.lang.Object
{
  public void <init>(java.io.InputStream);
  public void <init>(java.io.Reader);
  public int lineno();
  public int nextToken()  throws java.io.IOException;
  public void commentChar(int);
  public void eolIsSignificant(boolean);
  public void lowerCaseMode(boolean);
  public void ordinaryChar(int);
  public void ordinaryChars(int, int);
  public void parseNumbers();
  public void pushBack();
  public void quoteChar(int);
  public void resetSyntax();
  public void slashSlashComments(boolean);
  public void slashStarComments(boolean);
  public void whitespaceChars(int, int);
  public void wordChars(int, int);
  public java.lang.String toString();
  public static final int TT_EOF;
  public static final int TT_EOL;
  public static final int TT_NUMBER;
  public static final int TT_WORD;
  public double nval;
  public int ttype;
  public java.lang.String sval;
}
public class java.io.StringBufferInputStream
  extends java.io.InputStream
{
  public void <init>(java.lang.String);
  public int available();
  public int read();
  public int read(byte[], int, int);
  public long skip(long);
  public void reset();
  protected int count;
  protected int pos;
  protected java.lang.String buffer;
}
public class java.io.StringReader
  extends java.io.Reader
{
  public void <init>(java.lang.String);
  public boolean markSupported();
  public boolean ready()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(char[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close();
  public void mark(int)  throws java.io.IOException;
  public void reset()  throws java.io.IOException;
}
public class java.io.StringWriter
  extends java.io.Writer
{
  public void <init>();
  public void <init>(int);
  public void close()  throws java.io.IOException;
  public void flush();
  public void write(char[], int, int);
  public void write(int);
  public void write(java.lang.String);
  public void write(java.lang.String, int, int);
  public java.io.StringWriter append(char);
  public java.io.StringWriter append(java.lang.CharSequence);
  public java.io.StringWriter append(java.lang.CharSequence, int, int);
  public java.io.Writer append(char)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.String toString();
  public java.lang.StringBuffer getBuffer();
}
public class java.io.SyncFailedException
  extends java.io.IOException
{
  public void <init>(java.lang.String);
}
public class java.io.UTFDataFormatException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.io.UncheckedIOException
  extends java.lang.RuntimeException
{
  public void <init>(java.io.IOException);
  public void <init>(java.lang.String, java.io.IOException);
  public java.io.IOException getCause();
  public java.lang.Throwable getCause();
}
public class java.io.UnsupportedEncodingException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.io.WriteAbortedException
  extends java.io.ObjectStreamException
{
  public void <init>(java.lang.String, java.lang.Exception);
  public java.lang.String getMessage();
  public java.lang.Throwable getCause();
  public java.lang.Exception detail;
}
public abstract class java.io.Writer
  extends java.lang.Object
  implements java.lang.Appendable, java.io.Closeable, java.io.Flushable
{
  public abstract void close()  throws java.io.IOException;
  public abstract void flush()  throws java.io.IOException;
  public abstract void write(char[], int, int)  throws java.io.IOException;
  public void write(char[])  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public void write(java.lang.String)  throws java.io.IOException;
  public void write(java.lang.String, int, int)  throws java.io.IOException;
  public java.io.Writer append(char)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence)  throws java.io.IOException;
  public java.io.Writer append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  protected void <init>();
  protected void <init>(java.lang.Object);
  protected java.lang.Object lock;
}
public class java.lang.AbstractMethodError
  extends java.lang.IncompatibleClassChangeError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.lang.Appendable
{
  public abstract java.lang.Appendable append(char)  throws java.io.IOException;
  public abstract java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public abstract java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
}
public class java.lang.ArithmeticException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.ArrayIndexOutOfBoundsException
  extends java.lang.IndexOutOfBoundsException
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.lang.String);
}
public class java.lang.ArrayStoreException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.AssertionError
  extends java.lang.Error
{
  public void <init>();
  public void <init>(boolean);
  public void <init>(char);
  public void <init>(double);
  public void <init>(float);
  public void <init>(int);
  public void <init>(java.lang.Object);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(long);
}
public interface java.lang.AutoCloseable
{
  public abstract void close()  throws java.lang.Exception;
}
public final class java.lang.Boolean
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Comparable
{
  public static boolean getBoolean(java.lang.String);
  public static boolean logicalAnd(boolean, boolean);
  public static boolean logicalOr(boolean, boolean);
  public static boolean logicalXor(boolean, boolean);
  public static boolean parseBoolean(java.lang.String);
  public static int compare(boolean, boolean);
  public static int hashCode(boolean);
  public static java.lang.Boolean valueOf(boolean);
  public static java.lang.Boolean valueOf(java.lang.String);
  public static java.lang.String toString(boolean);
  public void <init>(boolean);
  public void <init>(java.lang.String);
  public boolean booleanValue();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Boolean);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public static final java.lang.Boolean FALSE;
  public static final java.lang.Boolean TRUE;
  public static final java.lang.Class TYPE;
}
public final class java.lang.Byte
  extends java.lang.Number
  implements java.lang.Comparable
{
  public static byte parseByte(java.lang.String)  throws java.lang.NumberFormatException;
  public static byte parseByte(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static int compare(byte, byte);
  public static int hashCode(byte);
  public static java.lang.Byte decode(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Byte valueOf(byte);
  public static java.lang.Byte valueOf(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Byte valueOf(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static java.lang.String toString(byte);
  public void <init>(byte);
  public void <init>(java.lang.String)  throws java.lang.NumberFormatException;
  public boolean equals(java.lang.Object);
  public byte byteValue();
  public double doubleValue();
  public float floatValue();
  public int compareTo(java.lang.Byte);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static final byte MAX_VALUE;
  public static final byte MIN_VALUE;
  public static final int BYTES;
  public static final int SIZE;
  public static final java.lang.Class TYPE;
}
public interface java.lang.CharSequence
{
  public abstract char charAt(int);
  public abstract int length();
  public abstract java.lang.CharSequence subSequence(int, int);
  public abstract java.lang.String toString();
  public java.util.stream.IntStream chars();
  public java.util.stream.IntStream codePoints();
}
public final class java.lang.Character
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Comparable
{
  public static boolean isAlphabetic(int);
  public static boolean isBmpCodePoint(int);
  public static boolean isDefined(char);
  public static boolean isDefined(int);
  public static boolean isDigit(char);
  public static boolean isDigit(int);
  public static boolean isHighSurrogate(char);
  public static boolean isISOControl(char);
  public static boolean isISOControl(int);
  public static boolean isIdentifierIgnorable(char);
  public static boolean isIdentifierIgnorable(int);
  public static boolean isIdeographic(int);
  public static boolean isJavaIdentifierPart(char);
  public static boolean isJavaIdentifierPart(int);
  public static boolean isJavaIdentifierStart(char);
  public static boolean isJavaIdentifierStart(int);
  public static boolean isJavaLetter(char);
  public static boolean isJavaLetterOrDigit(char);
  public static boolean isLetter(char);
  public static boolean isLetter(int);
  public static boolean isLetterOrDigit(char);
  public static boolean isLetterOrDigit(int);
  public static boolean isLowSurrogate(char);
  public static boolean isLowerCase(char);
  public static boolean isLowerCase(int);
  public static boolean isMirrored(char);
  public static boolean isMirrored(int);
  public static boolean isSpace(char);
  public static boolean isSpaceChar(char);
  public static boolean isSpaceChar(int);
  public static boolean isSupplementaryCodePoint(int);
  public static boolean isSurrogate(char);
  public static boolean isSurrogatePair(char, char);
  public static boolean isTitleCase(char);
  public static boolean isTitleCase(int);
  public static boolean isUnicodeIdentifierPart(char);
  public static boolean isUnicodeIdentifierPart(int);
  public static boolean isUnicodeIdentifierStart(char);
  public static boolean isUnicodeIdentifierStart(int);
  public static boolean isUpperCase(char);
  public static boolean isUpperCase(int);
  public static boolean isValidCodePoint(int);
  public static boolean isWhitespace(char);
  public static boolean isWhitespace(int);
  public static byte getDirectionality(char);
  public static byte getDirectionality(int);
  public static char forDigit(int, int);
  public static char highSurrogate(int);
  public static char lowSurrogate(int);
  public static char reverseBytes(char);
  public static char toLowerCase(char);
  public static char toTitleCase(char);
  public static char toUpperCase(char);
  public static int charCount(int);
  public static int codePointAt(char[], int);
  public static int codePointAt(char[], int, int);
  public static int codePointAt(java.lang.CharSequence, int);
  public static int codePointBefore(char[], int);
  public static int codePointBefore(char[], int, int);
  public static int codePointBefore(java.lang.CharSequence, int);
  public static int codePointCount(char[], int, int);
  public static int codePointCount(java.lang.CharSequence, int, int);
  public static int compare(char, char);
  public static int digit(char, int);
  public static int digit(int, int);
  public static int getNumericValue(char);
  public static int getNumericValue(int);
  public static int getType(char);
  public static int getType(int);
  public static int hashCode(char);
  public static int offsetByCodePoints(char[], int, int, int, int);
  public static int offsetByCodePoints(java.lang.CharSequence, int, int);
  public static int toChars(int, char[], int);
  public static int toCodePoint(char, char);
  public static int toLowerCase(int);
  public static int toTitleCase(int);
  public static int toUpperCase(int);
  public static char[] toChars(int);
  public static java.lang.Character valueOf(char);
  public static java.lang.String getName(int);
  public static java.lang.String toString(char);
  public void <init>(char);
  public boolean equals(java.lang.Object);
  public char charValue();
  public int compareTo(java.lang.Character);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public static final byte COMBINING_SPACING_MARK;
  public static final byte CONNECTOR_PUNCTUATION;
  public static final byte CONTROL;
  public static final byte CURRENCY_SYMBOL;
  public static final byte DASH_PUNCTUATION;
  public static final byte DECIMAL_DIGIT_NUMBER;
  public static final byte DIRECTIONALITY_ARABIC_NUMBER;
  public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL;
  public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR;
  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER;
  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR;
  public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR;
  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT;
  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
  public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE;
  public static final byte DIRECTIONALITY_NONSPACING_MARK;
  public static final byte DIRECTIONALITY_OTHER_NEUTRALS;
  public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR;
  public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING;
  public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE;
  public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR;
  public static final byte DIRECTIONALITY_UNDEFINED;
  public static final byte DIRECTIONALITY_WHITESPACE;
  public static final byte ENCLOSING_MARK;
  public static final byte END_PUNCTUATION;
  public static final byte FINAL_QUOTE_PUNCTUATION;
  public static final byte FORMAT;
  public static final byte INITIAL_QUOTE_PUNCTUATION;
  public static final byte LETTER_NUMBER;
  public static final byte LINE_SEPARATOR;
  public static final byte LOWERCASE_LETTER;
  public static final byte MATH_SYMBOL;
  public static final byte MODIFIER_LETTER;
  public static final byte MODIFIER_SYMBOL;
  public static final byte NON_SPACING_MARK;
  public static final byte OTHER_LETTER;
  public static final byte OTHER_NUMBER;
  public static final byte OTHER_PUNCTUATION;
  public static final byte OTHER_SYMBOL;
  public static final byte PARAGRAPH_SEPARATOR;
  public static final byte PRIVATE_USE;
  public static final byte SPACE_SEPARATOR;
  public static final byte START_PUNCTUATION;
  public static final byte SURROGATE;
  public static final byte TITLECASE_LETTER;
  public static final byte UNASSIGNED;
  public static final byte UPPERCASE_LETTER;
  public static final char MAX_HIGH_SURROGATE;
  public static final char MAX_LOW_SURROGATE;
  public static final char MAX_SURROGATE;
  public static final char MAX_VALUE;
  public static final char MIN_HIGH_SURROGATE;
  public static final char MIN_LOW_SURROGATE;
  public static final char MIN_SURROGATE;
  public static final char MIN_VALUE;
  public static final int BYTES;
  public static final int MAX_CODE_POINT;
  public static final int MAX_RADIX;
  public static final int MIN_CODE_POINT;
  public static final int MIN_RADIX;
  public static final int MIN_SUPPLEMENTARY_CODE_POINT;
  public static final int SIZE;
  public static final java.lang.Class TYPE;
}
public class java.lang.Character$Subset
  extends java.lang.Object
{
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public final java.lang.String toString();
  protected void <init>(java.lang.String);
}
public final class java.lang.Character$UnicodeBlock
  extends java.lang.Character$Subset
{
  public static final java.lang.Character$UnicodeBlock forName(java.lang.String);
  public static java.lang.Character$UnicodeBlock of(char);
  public static java.lang.Character$UnicodeBlock of(int);
  public static final java.lang.Character$UnicodeBlock AEGEAN_NUMBERS;
  public static final java.lang.Character$UnicodeBlock ALCHEMICAL_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock ALPHABETIC_PRESENTATION_FORMS;
  public static final java.lang.Character$UnicodeBlock ANCIENT_GREEK_MUSICAL_NOTATION;
  public static final java.lang.Character$UnicodeBlock ANCIENT_GREEK_NUMBERS;
  public static final java.lang.Character$UnicodeBlock ANCIENT_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock ARABIC;
  public static final java.lang.Character$UnicodeBlock ARABIC_PRESENTATION_FORMS_A;
  public static final java.lang.Character$UnicodeBlock ARABIC_PRESENTATION_FORMS_B;
  public static final java.lang.Character$UnicodeBlock ARABIC_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock ARMENIAN;
  public static final java.lang.Character$UnicodeBlock ARROWS;
  public static final java.lang.Character$UnicodeBlock AVESTAN;
  public static final java.lang.Character$UnicodeBlock BALINESE;
  public static final java.lang.Character$UnicodeBlock BAMUM;
  public static final java.lang.Character$UnicodeBlock BAMUM_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock BASIC_LATIN;
  public static final java.lang.Character$UnicodeBlock BATAK;
  public static final java.lang.Character$UnicodeBlock BENGALI;
  public static final java.lang.Character$UnicodeBlock BLOCK_ELEMENTS;
  public static final java.lang.Character$UnicodeBlock BOPOMOFO;
  public static final java.lang.Character$UnicodeBlock BOPOMOFO_EXTENDED;
  public static final java.lang.Character$UnicodeBlock BOX_DRAWING;
  public static final java.lang.Character$UnicodeBlock BRAHMI;
  public static final java.lang.Character$UnicodeBlock BRAILLE_PATTERNS;
  public static final java.lang.Character$UnicodeBlock BUGINESE;
  public static final java.lang.Character$UnicodeBlock BUHID;
  public static final java.lang.Character$UnicodeBlock BYZANTINE_MUSICAL_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock CARIAN;
  public static final java.lang.Character$UnicodeBlock CHAM;
  public static final java.lang.Character$UnicodeBlock CHEROKEE;
  public static final java.lang.Character$UnicodeBlock CJK_COMPATIBILITY;
  public static final java.lang.Character$UnicodeBlock CJK_COMPATIBILITY_FORMS;
  public static final java.lang.Character$UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS;
  public static final java.lang.Character$UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock CJK_RADICALS_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock CJK_STROKES;
  public static final java.lang.Character$UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION;
  public static final java.lang.Character$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS;
  public static final java.lang.Character$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A;
  public static final java.lang.Character$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B;
  public static final java.lang.Character$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C;
  public static final java.lang.Character$UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D;
  public static final java.lang.Character$UnicodeBlock COMBINING_DIACRITICAL_MARKS;
  public static final java.lang.Character$UnicodeBlock COMBINING_DIACRITICAL_MARKS_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock COMBINING_HALF_MARKS;
  public static final java.lang.Character$UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock COMMON_INDIC_NUMBER_FORMS;
  public static final java.lang.Character$UnicodeBlock CONTROL_PICTURES;
  public static final java.lang.Character$UnicodeBlock COPTIC;
  public static final java.lang.Character$UnicodeBlock COUNTING_ROD_NUMERALS;
  public static final java.lang.Character$UnicodeBlock CUNEIFORM;
  public static final java.lang.Character$UnicodeBlock CUNEIFORM_NUMBERS_AND_PUNCTUATION;
  public static final java.lang.Character$UnicodeBlock CURRENCY_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock CYPRIOT_SYLLABARY;
  public static final java.lang.Character$UnicodeBlock CYRILLIC;
  public static final java.lang.Character$UnicodeBlock CYRILLIC_EXTENDED_A;
  public static final java.lang.Character$UnicodeBlock CYRILLIC_EXTENDED_B;
  public static final java.lang.Character$UnicodeBlock CYRILLIC_SUPPLEMENTARY;
  public static final java.lang.Character$UnicodeBlock DESERET;
  public static final java.lang.Character$UnicodeBlock DEVANAGARI;
  public static final java.lang.Character$UnicodeBlock DEVANAGARI_EXTENDED;
  public static final java.lang.Character$UnicodeBlock DINGBATS;
  public static final java.lang.Character$UnicodeBlock DOMINO_TILES;
  public static final java.lang.Character$UnicodeBlock EGYPTIAN_HIEROGLYPHS;
  public static final java.lang.Character$UnicodeBlock EMOTICONS;
  public static final java.lang.Character$UnicodeBlock ENCLOSED_ALPHANUMERICS;
  public static final java.lang.Character$UnicodeBlock ENCLOSED_ALPHANUMERIC_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS;
  public static final java.lang.Character$UnicodeBlock ENCLOSED_IDEOGRAPHIC_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock ETHIOPIC;
  public static final java.lang.Character$UnicodeBlock ETHIOPIC_EXTENDED;
  public static final java.lang.Character$UnicodeBlock ETHIOPIC_EXTENDED_A;
  public static final java.lang.Character$UnicodeBlock ETHIOPIC_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock GENERAL_PUNCTUATION;
  public static final java.lang.Character$UnicodeBlock GEOMETRIC_SHAPES;
  public static final java.lang.Character$UnicodeBlock GEORGIAN;
  public static final java.lang.Character$UnicodeBlock GEORGIAN_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock GLAGOLITIC;
  public static final java.lang.Character$UnicodeBlock GOTHIC;
  public static final java.lang.Character$UnicodeBlock GREEK;
  public static final java.lang.Character$UnicodeBlock GREEK_EXTENDED;
  public static final java.lang.Character$UnicodeBlock GUJARATI;
  public static final java.lang.Character$UnicodeBlock GURMUKHI;
  public static final java.lang.Character$UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS;
  public static final java.lang.Character$UnicodeBlock HANGUL_COMPATIBILITY_JAMO;
  public static final java.lang.Character$UnicodeBlock HANGUL_JAMO;
  public static final java.lang.Character$UnicodeBlock HANGUL_JAMO_EXTENDED_A;
  public static final java.lang.Character$UnicodeBlock HANGUL_JAMO_EXTENDED_B;
  public static final java.lang.Character$UnicodeBlock HANGUL_SYLLABLES;
  public static final java.lang.Character$UnicodeBlock HANUNOO;
  public static final java.lang.Character$UnicodeBlock HEBREW;
  public static final java.lang.Character$UnicodeBlock HIGH_PRIVATE_USE_SURROGATES;
  public static final java.lang.Character$UnicodeBlock HIGH_SURROGATES;
  public static final java.lang.Character$UnicodeBlock HIRAGANA;
  public static final java.lang.Character$UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS;
  public static final java.lang.Character$UnicodeBlock IMPERIAL_ARAMAIC;
  public static final java.lang.Character$UnicodeBlock INSCRIPTIONAL_PAHLAVI;
  public static final java.lang.Character$UnicodeBlock INSCRIPTIONAL_PARTHIAN;
  public static final java.lang.Character$UnicodeBlock IPA_EXTENSIONS;
  public static final java.lang.Character$UnicodeBlock JAVANESE;
  public static final java.lang.Character$UnicodeBlock KAITHI;
  public static final java.lang.Character$UnicodeBlock KANA_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock KANBUN;
  public static final java.lang.Character$UnicodeBlock KANGXI_RADICALS;
  public static final java.lang.Character$UnicodeBlock KANNADA;
  public static final java.lang.Character$UnicodeBlock KATAKANA;
  public static final java.lang.Character$UnicodeBlock KATAKANA_PHONETIC_EXTENSIONS;
  public static final java.lang.Character$UnicodeBlock KAYAH_LI;
  public static final java.lang.Character$UnicodeBlock KHAROSHTHI;
  public static final java.lang.Character$UnicodeBlock KHMER;
  public static final java.lang.Character$UnicodeBlock KHMER_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock LAO;
  public static final java.lang.Character$UnicodeBlock LATIN_1_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock LATIN_EXTENDED_A;
  public static final java.lang.Character$UnicodeBlock LATIN_EXTENDED_ADDITIONAL;
  public static final java.lang.Character$UnicodeBlock LATIN_EXTENDED_B;
  public static final java.lang.Character$UnicodeBlock LATIN_EXTENDED_C;
  public static final java.lang.Character$UnicodeBlock LATIN_EXTENDED_D;
  public static final java.lang.Character$UnicodeBlock LEPCHA;
  public static final java.lang.Character$UnicodeBlock LETTERLIKE_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock LIMBU;
  public static final java.lang.Character$UnicodeBlock LINEAR_B_IDEOGRAMS;
  public static final java.lang.Character$UnicodeBlock LINEAR_B_SYLLABARY;
  public static final java.lang.Character$UnicodeBlock LISU;
  public static final java.lang.Character$UnicodeBlock LOW_SURROGATES;
  public static final java.lang.Character$UnicodeBlock LYCIAN;
  public static final java.lang.Character$UnicodeBlock LYDIAN;
  public static final java.lang.Character$UnicodeBlock MAHJONG_TILES;
  public static final java.lang.Character$UnicodeBlock MALAYALAM;
  public static final java.lang.Character$UnicodeBlock MANDAIC;
  public static final java.lang.Character$UnicodeBlock MATHEMATICAL_ALPHANUMERIC_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock MATHEMATICAL_OPERATORS;
  public static final java.lang.Character$UnicodeBlock MEETEI_MAYEK;
  public static final java.lang.Character$UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A;
  public static final java.lang.Character$UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B;
  public static final java.lang.Character$UnicodeBlock MISCELLANEOUS_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_ARROWS;
  public static final java.lang.Character$UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS;
  public static final java.lang.Character$UnicodeBlock MISCELLANEOUS_TECHNICAL;
  public static final java.lang.Character$UnicodeBlock MODIFIER_TONE_LETTERS;
  public static final java.lang.Character$UnicodeBlock MONGOLIAN;
  public static final java.lang.Character$UnicodeBlock MUSICAL_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock MYANMAR;
  public static final java.lang.Character$UnicodeBlock MYANMAR_EXTENDED_A;
  public static final java.lang.Character$UnicodeBlock NEW_TAI_LUE;
  public static final java.lang.Character$UnicodeBlock NKO;
  public static final java.lang.Character$UnicodeBlock NUMBER_FORMS;
  public static final java.lang.Character$UnicodeBlock OGHAM;
  public static final java.lang.Character$UnicodeBlock OLD_ITALIC;
  public static final java.lang.Character$UnicodeBlock OLD_PERSIAN;
  public static final java.lang.Character$UnicodeBlock OLD_SOUTH_ARABIAN;
  public static final java.lang.Character$UnicodeBlock OLD_TURKIC;
  public static final java.lang.Character$UnicodeBlock OL_CHIKI;
  public static final java.lang.Character$UnicodeBlock OPTICAL_CHARACTER_RECOGNITION;
  public static final java.lang.Character$UnicodeBlock ORIYA;
  public static final java.lang.Character$UnicodeBlock OSMANYA;
  public static final java.lang.Character$UnicodeBlock PHAGS_PA;
  public static final java.lang.Character$UnicodeBlock PHAISTOS_DISC;
  public static final java.lang.Character$UnicodeBlock PHOENICIAN;
  public static final java.lang.Character$UnicodeBlock PHONETIC_EXTENSIONS;
  public static final java.lang.Character$UnicodeBlock PHONETIC_EXTENSIONS_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock PLAYING_CARDS;
  public static final java.lang.Character$UnicodeBlock PRIVATE_USE_AREA;
  public static final java.lang.Character$UnicodeBlock REJANG;
  public static final java.lang.Character$UnicodeBlock RUMI_NUMERAL_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock RUNIC;
  public static final java.lang.Character$UnicodeBlock SAMARITAN;
  public static final java.lang.Character$UnicodeBlock SAURASHTRA;
  public static final java.lang.Character$UnicodeBlock SHAVIAN;
  public static final java.lang.Character$UnicodeBlock SINHALA;
  public static final java.lang.Character$UnicodeBlock SMALL_FORM_VARIANTS;
  public static final java.lang.Character$UnicodeBlock SPACING_MODIFIER_LETTERS;
  public static final java.lang.Character$UnicodeBlock SPECIALS;
  public static final java.lang.Character$UnicodeBlock SUNDANESE;
  public static final java.lang.Character$UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS;
  public static final java.lang.Character$UnicodeBlock SUPPLEMENTAL_ARROWS_A;
  public static final java.lang.Character$UnicodeBlock SUPPLEMENTAL_ARROWS_B;
  public static final java.lang.Character$UnicodeBlock SUPPLEMENTAL_MATHEMATICAL_OPERATORS;
  public static final java.lang.Character$UnicodeBlock SUPPLEMENTAL_PUNCTUATION;
  public static final java.lang.Character$UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_A;
  public static final java.lang.Character$UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_B;
  public static final java.lang.Character$UnicodeBlock SURROGATES_AREA;
  public static final java.lang.Character$UnicodeBlock SYLOTI_NAGRI;
  public static final java.lang.Character$UnicodeBlock SYRIAC;
  public static final java.lang.Character$UnicodeBlock TAGALOG;
  public static final java.lang.Character$UnicodeBlock TAGBANWA;
  public static final java.lang.Character$UnicodeBlock TAGS;
  public static final java.lang.Character$UnicodeBlock TAI_LE;
  public static final java.lang.Character$UnicodeBlock TAI_THAM;
  public static final java.lang.Character$UnicodeBlock TAI_VIET;
  public static final java.lang.Character$UnicodeBlock TAI_XUAN_JING_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock TAMIL;
  public static final java.lang.Character$UnicodeBlock TELUGU;
  public static final java.lang.Character$UnicodeBlock THAANA;
  public static final java.lang.Character$UnicodeBlock THAI;
  public static final java.lang.Character$UnicodeBlock TIBETAN;
  public static final java.lang.Character$UnicodeBlock TIFINAGH;
  public static final java.lang.Character$UnicodeBlock TRANSPORT_AND_MAP_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock UGARITIC;
  public static final java.lang.Character$UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS;
  public static final java.lang.Character$UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED;
  public static final java.lang.Character$UnicodeBlock VAI;
  public static final java.lang.Character$UnicodeBlock VARIATION_SELECTORS;
  public static final java.lang.Character$UnicodeBlock VARIATION_SELECTORS_SUPPLEMENT;
  public static final java.lang.Character$UnicodeBlock VEDIC_EXTENSIONS;
  public static final java.lang.Character$UnicodeBlock VERTICAL_FORMS;
  public static final java.lang.Character$UnicodeBlock YIJING_HEXAGRAM_SYMBOLS;
  public static final java.lang.Character$UnicodeBlock YI_RADICALS;
  public static final java.lang.Character$UnicodeBlock YI_SYLLABLES;
}
public final class java.lang.Character$UnicodeScript
  extends java.lang.Enum
{
  public static final java.lang.Character$UnicodeScript forName(java.lang.String);
  public static java.lang.Character$UnicodeScript of(int);
  public static java.lang.Character$UnicodeScript valueOf(java.lang.String);
  public static java.lang.Character$UnicodeScript[] values();
  public static final java.lang.Character$UnicodeScript ARABIC;
  public static final java.lang.Character$UnicodeScript ARMENIAN;
  public static final java.lang.Character$UnicodeScript AVESTAN;
  public static final java.lang.Character$UnicodeScript BALINESE;
  public static final java.lang.Character$UnicodeScript BAMUM;
  public static final java.lang.Character$UnicodeScript BATAK;
  public static final java.lang.Character$UnicodeScript BENGALI;
  public static final java.lang.Character$UnicodeScript BOPOMOFO;
  public static final java.lang.Character$UnicodeScript BRAHMI;
  public static final java.lang.Character$UnicodeScript BRAILLE;
  public static final java.lang.Character$UnicodeScript BUGINESE;
  public static final java.lang.Character$UnicodeScript BUHID;
  public static final java.lang.Character$UnicodeScript CANADIAN_ABORIGINAL;
  public static final java.lang.Character$UnicodeScript CARIAN;
  public static final java.lang.Character$UnicodeScript CHAM;
  public static final java.lang.Character$UnicodeScript CHEROKEE;
  public static final java.lang.Character$UnicodeScript COMMON;
  public static final java.lang.Character$UnicodeScript COPTIC;
  public static final java.lang.Character$UnicodeScript CUNEIFORM;
  public static final java.lang.Character$UnicodeScript CYPRIOT;
  public static final java.lang.Character$UnicodeScript CYRILLIC;
  public static final java.lang.Character$UnicodeScript DESERET;
  public static final java.lang.Character$UnicodeScript DEVANAGARI;
  public static final java.lang.Character$UnicodeScript EGYPTIAN_HIEROGLYPHS;
  public static final java.lang.Character$UnicodeScript ETHIOPIC;
  public static final java.lang.Character$UnicodeScript GEORGIAN;
  public static final java.lang.Character$UnicodeScript GLAGOLITIC;
  public static final java.lang.Character$UnicodeScript GOTHIC;
  public static final java.lang.Character$UnicodeScript GREEK;
  public static final java.lang.Character$UnicodeScript GUJARATI;
  public static final java.lang.Character$UnicodeScript GURMUKHI;
  public static final java.lang.Character$UnicodeScript HAN;
  public static final java.lang.Character$UnicodeScript HANGUL;
  public static final java.lang.Character$UnicodeScript HANUNOO;
  public static final java.lang.Character$UnicodeScript HEBREW;
  public static final java.lang.Character$UnicodeScript HIRAGANA;
  public static final java.lang.Character$UnicodeScript IMPERIAL_ARAMAIC;
  public static final java.lang.Character$UnicodeScript INHERITED;
  public static final java.lang.Character$UnicodeScript INSCRIPTIONAL_PAHLAVI;
  public static final java.lang.Character$UnicodeScript INSCRIPTIONAL_PARTHIAN;
  public static final java.lang.Character$UnicodeScript JAVANESE;
  public static final java.lang.Character$UnicodeScript KAITHI;
  public static final java.lang.Character$UnicodeScript KANNADA;
  public static final java.lang.Character$UnicodeScript KATAKANA;
  public static final java.lang.Character$UnicodeScript KAYAH_LI;
  public static final java.lang.Character$UnicodeScript KHAROSHTHI;
  public static final java.lang.Character$UnicodeScript KHMER;
  public static final java.lang.Character$UnicodeScript LAO;
  public static final java.lang.Character$UnicodeScript LATIN;
  public static final java.lang.Character$UnicodeScript LEPCHA;
  public static final java.lang.Character$UnicodeScript LIMBU;
  public static final java.lang.Character$UnicodeScript LINEAR_B;
  public static final java.lang.Character$UnicodeScript LISU;
  public static final java.lang.Character$UnicodeScript LYCIAN;
  public static final java.lang.Character$UnicodeScript LYDIAN;
  public static final java.lang.Character$UnicodeScript MALAYALAM;
  public static final java.lang.Character$UnicodeScript MANDAIC;
  public static final java.lang.Character$UnicodeScript MEETEI_MAYEK;
  public static final java.lang.Character$UnicodeScript MONGOLIAN;
  public static final java.lang.Character$UnicodeScript MYANMAR;
  public static final java.lang.Character$UnicodeScript NEW_TAI_LUE;
  public static final java.lang.Character$UnicodeScript NKO;
  public static final java.lang.Character$UnicodeScript OGHAM;
  public static final java.lang.Character$UnicodeScript OLD_ITALIC;
  public static final java.lang.Character$UnicodeScript OLD_PERSIAN;
  public static final java.lang.Character$UnicodeScript OLD_SOUTH_ARABIAN;
  public static final java.lang.Character$UnicodeScript OLD_TURKIC;
  public static final java.lang.Character$UnicodeScript OL_CHIKI;
  public static final java.lang.Character$UnicodeScript ORIYA;
  public static final java.lang.Character$UnicodeScript OSMANYA;
  public static final java.lang.Character$UnicodeScript PHAGS_PA;
  public static final java.lang.Character$UnicodeScript PHOENICIAN;
  public static final java.lang.Character$UnicodeScript REJANG;
  public static final java.lang.Character$UnicodeScript RUNIC;
  public static final java.lang.Character$UnicodeScript SAMARITAN;
  public static final java.lang.Character$UnicodeScript SAURASHTRA;
  public static final java.lang.Character$UnicodeScript SHAVIAN;
  public static final java.lang.Character$UnicodeScript SINHALA;
  public static final java.lang.Character$UnicodeScript SUNDANESE;
  public static final java.lang.Character$UnicodeScript SYLOTI_NAGRI;
  public static final java.lang.Character$UnicodeScript SYRIAC;
  public static final java.lang.Character$UnicodeScript TAGALOG;
  public static final java.lang.Character$UnicodeScript TAGBANWA;
  public static final java.lang.Character$UnicodeScript TAI_LE;
  public static final java.lang.Character$UnicodeScript TAI_THAM;
  public static final java.lang.Character$UnicodeScript TAI_VIET;
  public static final java.lang.Character$UnicodeScript TAMIL;
  public static final java.lang.Character$UnicodeScript TELUGU;
  public static final java.lang.Character$UnicodeScript THAANA;
  public static final java.lang.Character$UnicodeScript THAI;
  public static final java.lang.Character$UnicodeScript TIBETAN;
  public static final java.lang.Character$UnicodeScript TIFINAGH;
  public static final java.lang.Character$UnicodeScript UGARITIC;
  public static final java.lang.Character$UnicodeScript UNKNOWN;
  public static final java.lang.Character$UnicodeScript VAI;
  public static final java.lang.Character$UnicodeScript YI;
}
public final class java.lang.Class
  extends java.lang.Object
  implements java.io.Serializable, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type, java.lang.reflect.AnnotatedElement
{
  public static java.lang.Class forName(java.lang.String)  throws java.lang.ClassNotFoundException;
  public static java.lang.Class forName(java.lang.String, boolean, java.lang.ClassLoader)  throws java.lang.ClassNotFoundException;
  public boolean desiredAssertionStatus();
  public boolean isAnnotation();
  public boolean isAnnotationPresent(java.lang.Class);
  public boolean isArray();
  public boolean isAssignableFrom(java.lang.Class);
  public boolean isEnum();
  public boolean isInstance(java.lang.Object);
  public boolean isInterface();
  public boolean isLocalClass();
  public boolean isMemberClass();
  public boolean isPrimitive();
  public boolean isSynthetic();
  public int getModifiers();
  public native boolean isAnonymousClass();
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public java.lang.Class asSubclass(java.lang.Class);
  public java.lang.Class getComponentType();
  public java.lang.Class getSuperclass();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.Class[] getClasses();
  public java.lang.Class[] getInterfaces();
  public java.lang.Object cast(java.lang.Object);
  public java.lang.Object[] getEnumConstants();
  public java.lang.Object[] getSigners();
  public java.lang.Package getPackage();
  public java.lang.String getCanonicalName();
  public java.lang.String getName();
  public java.lang.String getSimpleName();
  public java.lang.String toString();
  public java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public java.lang.annotation.Annotation[] getAnnotations();
  public java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class);
  public java.lang.reflect.Constructor getConstructor(java.lang.Class[])  throws java.lang.NoSuchMethodException, java.lang.SecurityException;
  public java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])  throws java.lang.NoSuchMethodException, java.lang.SecurityException;
  public java.lang.reflect.Constructor getEnclosingConstructor();
  public java.lang.reflect.Constructor[] getConstructors()  throws java.lang.SecurityException;
  public java.lang.reflect.Constructor[] getDeclaredConstructors()  throws java.lang.SecurityException;
  public java.lang.reflect.Field getField(java.lang.String)  throws java.lang.NoSuchFieldException;
  public java.lang.reflect.Field[] getFields()  throws java.lang.SecurityException;
  public java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[])  throws java.lang.NoSuchMethodException, java.lang.SecurityException;
  public java.lang.reflect.Method getEnclosingMethod();
  public java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])  throws java.lang.NoSuchMethodException, java.lang.SecurityException;
  public java.lang.reflect.Method[] getDeclaredMethods()  throws java.lang.SecurityException;
  public java.lang.reflect.Method[] getMethods()  throws java.lang.SecurityException;
  public java.lang.reflect.Type getGenericSuperclass();
  public java.lang.reflect.TypeVariable[] getTypeParameters();
  public java.lang.reflect.Type[] getGenericInterfaces();
  public java.net.URL getResource(java.lang.String);
  public java.security.ProtectionDomain getProtectionDomain();
  public native java.lang.Class getDeclaringClass();
  public native java.lang.Class getEnclosingClass();
  public native java.lang.Class[] getDeclaredClasses();
  public native java.lang.Object newInstance()  throws java.lang.IllegalAccessException, java.lang.InstantiationException;
  public native java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class);
  public native java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public native java.lang.reflect.Field getDeclaredField(java.lang.String)  throws java.lang.NoSuchFieldException;
  public native java.lang.reflect.Field[] getDeclaredFields();
}
public class java.lang.ClassCastException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.ClassCircularityError
  extends java.lang.LinkageError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.ClassFormatError
  extends java.lang.LinkageError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.lang.ClassLoader
  extends java.lang.Object
{
  public static java.io.InputStream getSystemResourceAsStream(java.lang.String);
  public static java.lang.ClassLoader getSystemClassLoader();
  public static java.net.URL getSystemResource(java.lang.String);
  public static java.util.Enumeration getSystemResources(java.lang.String)  throws java.io.IOException;
  public final java.lang.ClassLoader getParent();
  public void clearAssertionStatus();
  public void setClassAssertionStatus(java.lang.String, boolean);
  public void setDefaultAssertionStatus(boolean);
  public void setPackageAssertionStatus(java.lang.String, boolean);
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public java.lang.Class loadClass(java.lang.String)  throws java.lang.ClassNotFoundException;
  public java.net.URL getResource(java.lang.String);
  public java.util.Enumeration getResources(java.lang.String)  throws java.io.IOException;
  protected static boolean registerAsParallelCapable();
  protected void <init>();
  protected void <init>(java.lang.ClassLoader);
  protected final void resolveClass(java.lang.Class);
  protected final void setSigners(java.lang.Class, java.lang.Object[]);
  protected final java.lang.Class defineClass(byte[], int, int)  throws java.lang.ClassFormatError;
  protected final java.lang.Class defineClass(java.lang.String, byte[], int, int)  throws java.lang.ClassFormatError;
  protected final java.lang.Class defineClass(java.lang.String, byte[], int, int, java.security.ProtectionDomain)  throws java.lang.ClassFormatError;
  protected final java.lang.Class defineClass(java.lang.String, java.nio.ByteBuffer, java.security.ProtectionDomain)  throws java.lang.ClassFormatError;
  protected final java.lang.Class findLoadedClass(java.lang.String);
  protected final java.lang.Class findSystemClass(java.lang.String)  throws java.lang.ClassNotFoundException;
  protected java.lang.Class findClass(java.lang.String)  throws java.lang.ClassNotFoundException;
  protected java.lang.Class loadClass(java.lang.String, boolean)  throws java.lang.ClassNotFoundException;
  protected java.lang.Package definePackage(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.net.URL)  throws java.lang.IllegalArgumentException;
  protected java.lang.Package getPackage(java.lang.String);
  protected java.lang.Package[] getPackages();
  protected java.lang.String findLibrary(java.lang.String);
  protected java.net.URL findResource(java.lang.String);
  protected java.util.Enumeration findResources(java.lang.String)  throws java.io.IOException;
}
public class java.lang.ClassNotFoundException
  extends java.lang.ReflectiveOperationException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public java.lang.Throwable getCause();
  public java.lang.Throwable getException();
}
public class java.lang.CloneNotSupportedException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.lang.Cloneable
{
}
public interface java.lang.Comparable
{
  public abstract int compareTo(java.lang.Object);
}
public final class java.lang.Compiler
  extends java.lang.Object
{
  public static boolean compileClass(java.lang.Class);
  public static boolean compileClasses(java.lang.String);
  public static void disable();
  public static void enable();
  public static java.lang.Object command(java.lang.Object);
}
public interface java.lang.Deprecated
  extends java.lang.annotation.Annotation
{
}
public final class java.lang.Double
  extends java.lang.Number
  implements java.lang.Comparable
{
  public static boolean isFinite(double);
  public static boolean isInfinite(double);
  public static boolean isNaN(double);
  public static double max(double, double);
  public static double min(double, double);
  public static double parseDouble(java.lang.String)  throws java.lang.NumberFormatException;
  public static double sum(double, double);
  public static int compare(double, double);
  public static int hashCode(double);
  public static long doubleToLongBits(double);
  public static native double longBitsToDouble(long);
  public static native long doubleToRawLongBits(double);
  public static java.lang.Double valueOf(double);
  public static java.lang.Double valueOf(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.String toHexString(double);
  public static java.lang.String toString(double);
  public void <init>(double);
  public void <init>(java.lang.String)  throws java.lang.NumberFormatException;
  public boolean equals(java.lang.Object);
  public boolean isInfinite();
  public boolean isNaN();
  public byte byteValue();
  public double doubleValue();
  public float floatValue();
  public int compareTo(java.lang.Double);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static final double MAX_VALUE;
  public static final double MIN_NORMAL;
  public static final double MIN_VALUE;
  public static final double NEGATIVE_INFINITY;
  public static final double NaN;
  public static final double POSITIVE_INFINITY;
  public static final int BYTES;
  public static final int MAX_EXPONENT;
  public static final int MIN_EXPONENT;
  public static final int SIZE;
  public static final java.lang.Class TYPE;
}
public abstract class java.lang.Enum
  extends java.lang.Object
  implements java.lang.Comparable, java.io.Serializable
{
  public static java.lang.Enum valueOf(java.lang.Class, java.lang.String);
  public final boolean equals(java.lang.Object);
  public final int compareTo(java.lang.Enum);
  public final int hashCode();
  public final int ordinal();
  public final java.lang.Class getDeclaringClass();
  public final java.lang.String name();
  public int compareTo(java.lang.Object);
  public java.lang.String toString();
  protected void <init>(java.lang.String, int);
  protected final void finalize();
  protected final java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class java.lang.EnumConstantNotPresentException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.Class, java.lang.String);
  public java.lang.Class enumType();
  public java.lang.String constantName();
}
public class java.lang.Error
  extends java.lang.Throwable
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  protected void <init>(java.lang.String, java.lang.Throwable, boolean, boolean);
}
public class java.lang.Exception
  extends java.lang.Throwable
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  protected void <init>(java.lang.String, java.lang.Throwable, boolean, boolean);
}
public class java.lang.ExceptionInInitializerError
  extends java.lang.LinkageError
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.Throwable);
  public java.lang.Throwable getCause();
  public java.lang.Throwable getException();
}
public final class java.lang.Float
  extends java.lang.Number
  implements java.lang.Comparable
{
  public static boolean isFinite(float);
  public static boolean isInfinite(float);
  public static boolean isNaN(float);
  public static float max(float, float);
  public static float min(float, float);
  public static float parseFloat(java.lang.String)  throws java.lang.NumberFormatException;
  public static float sum(float, float);
  public static int compare(float, float);
  public static int floatToIntBits(float);
  public static int hashCode(float);
  public static native float intBitsToFloat(int);
  public static native int floatToRawIntBits(float);
  public static java.lang.Float valueOf(float);
  public static java.lang.Float valueOf(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.String toHexString(float);
  public static java.lang.String toString(float);
  public void <init>(double);
  public void <init>(float);
  public void <init>(java.lang.String)  throws java.lang.NumberFormatException;
  public boolean equals(java.lang.Object);
  public boolean isInfinite();
  public boolean isNaN();
  public byte byteValue();
  public double doubleValue();
  public float floatValue();
  public int compareTo(java.lang.Float);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static final float MAX_VALUE;
  public static final float MIN_NORMAL;
  public static final float MIN_VALUE;
  public static final float NEGATIVE_INFINITY;
  public static final float NaN;
  public static final float POSITIVE_INFINITY;
  public static final int BYTES;
  public static final int MAX_EXPONENT;
  public static final int MIN_EXPONENT;
  public static final int SIZE;
  public static final java.lang.Class TYPE;
}
public interface java.lang.FunctionalInterface
  extends java.lang.annotation.Annotation
{
}
public class java.lang.IllegalAccessError
  extends java.lang.IncompatibleClassChangeError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.IllegalAccessException
  extends java.lang.ReflectiveOperationException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.IllegalArgumentException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.lang.IllegalMonitorStateException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.IllegalStateException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.lang.IllegalThreadStateException
  extends java.lang.IllegalArgumentException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.IncompatibleClassChangeError
  extends java.lang.LinkageError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.IndexOutOfBoundsException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.InheritableThreadLocal
  extends java.lang.ThreadLocal
{
  public void <init>();
  protected java.lang.Object childValue(java.lang.Object);
}
public class java.lang.InstantiationError
  extends java.lang.IncompatibleClassChangeError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.InstantiationException
  extends java.lang.ReflectiveOperationException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class java.lang.Integer
  extends java.lang.Number
  implements java.lang.Comparable
{
  public static int bitCount(int);
  public static int compare(int, int);
  public static int hashCode(int);
  public static int highestOneBit(int);
  public static int lowestOneBit(int);
  public static int max(int, int);
  public static int min(int, int);
  public static int numberOfLeadingZeros(int);
  public static int numberOfTrailingZeros(int);
  public static int parseInt(java.lang.String)  throws java.lang.NumberFormatException;
  public static int parseInt(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static int reverse(int);
  public static int reverseBytes(int);
  public static int rotateLeft(int, int);
  public static int rotateRight(int, int);
  public static int signum(int);
  public static int sum(int, int);
  public static java.lang.Integer decode(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Integer getInteger(java.lang.String);
  public static java.lang.Integer getInteger(java.lang.String, int);
  public static java.lang.Integer getInteger(java.lang.String, java.lang.Integer);
  public static java.lang.Integer valueOf(int);
  public static java.lang.Integer valueOf(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Integer valueOf(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static java.lang.String toBinaryString(int);
  public static java.lang.String toHexString(int);
  public static java.lang.String toOctalString(int);
  public static java.lang.String toString(int);
  public static java.lang.String toString(int, int);
  public void <init>(int);
  public void <init>(java.lang.String)  throws java.lang.NumberFormatException;
  public boolean equals(java.lang.Object);
  public byte byteValue();
  public double doubleValue();
  public float floatValue();
  public int compareTo(java.lang.Integer);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static final int BYTES;
  public static final int MAX_VALUE;
  public static final int MIN_VALUE;
  public static final int SIZE;
  public static final java.lang.Class TYPE;
}
public class java.lang.InternalError
  extends java.lang.VirtualMachineError
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.lang.InterruptedException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.lang.Iterable
{
  public abstract java.util.Iterator iterator();
  public void forEach(java.util.function.Consumer);
  public java.util.Spliterator spliterator();
}
public class java.lang.LinkageError
  extends java.lang.Error
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public final class java.lang.Long
  extends java.lang.Number
  implements java.lang.Comparable
{
  public static int bitCount(long);
  public static int compare(long, long);
  public static int hashCode(long);
  public static int numberOfLeadingZeros(long);
  public static int numberOfTrailingZeros(long);
  public static int signum(long);
  public static long highestOneBit(long);
  public static long lowestOneBit(long);
  public static long max(long, long);
  public static long min(long, long);
  public static long parseLong(java.lang.String)  throws java.lang.NumberFormatException;
  public static long parseLong(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static long reverse(long);
  public static long reverseBytes(long);
  public static long rotateLeft(long, int);
  public static long rotateRight(long, int);
  public static long sum(long, long);
  public static java.lang.Long decode(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Long getLong(java.lang.String);
  public static java.lang.Long getLong(java.lang.String, java.lang.Long);
  public static java.lang.Long getLong(java.lang.String, long);
  public static java.lang.Long valueOf(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Long valueOf(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static java.lang.Long valueOf(long);
  public static java.lang.String toBinaryString(long);
  public static java.lang.String toHexString(long);
  public static java.lang.String toOctalString(long);
  public static java.lang.String toString(long);
  public static java.lang.String toString(long, int);
  public void <init>(java.lang.String)  throws java.lang.NumberFormatException;
  public void <init>(long);
  public boolean equals(java.lang.Object);
  public byte byteValue();
  public double doubleValue();
  public float floatValue();
  public int compareTo(java.lang.Long);
  public int compareTo(java.lang.Object);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static final int BYTES;
  public static final int SIZE;
  public static final long MAX_VALUE;
  public static final long MIN_VALUE;
  public static final java.lang.Class TYPE;
}
public final class java.lang.Math
  extends java.lang.Object
{
  public static double abs(double);
  public static double copySign(double, double);
  public static double max(double, double);
  public static double min(double, double);
  public static double nextAfter(double, double);
  public static double nextDown(double);
  public static double nextUp(double);
  public static double random();
  public static double scalb(double, int);
  public static double signum(double);
  public static double toDegrees(double);
  public static double toRadians(double);
  public static double ulp(double);
  public static float abs(float);
  public static float copySign(float, float);
  public static float max(float, float);
  public static float min(float, float);
  public static float nextAfter(float, double);
  public static float nextDown(float);
  public static float nextUp(float);
  public static float scalb(float, int);
  public static float signum(float);
  public static float ulp(float);
  public static int abs(int);
  public static int addExact(int, int);
  public static int decrementExact(int);
  public static int floorDiv(int, int);
  public static int floorMod(int, int);
  public static int getExponent(double);
  public static int getExponent(float);
  public static int incrementExact(int);
  public static int max(int, int);
  public static int min(int, int);
  public static int multiplyExact(int, int);
  public static int negateExact(int);
  public static int round(float);
  public static int subtractExact(int, int);
  public static int toIntExact(long);
  public static long abs(long);
  public static long addExact(long, long);
  public static long decrementExact(long);
  public static long floorDiv(long, long);
  public static long floorMod(long, long);
  public static long incrementExact(long);
  public static long max(long, long);
  public static long min(long, long);
  public static long multiplyExact(long, long);
  public static long negateExact(long);
  public static long round(double);
  public static long subtractExact(long, long);
  public static native double IEEEremainder(double, double);
  public static native double acos(double);
  public static native double asin(double);
  public static native double atan(double);
  public static native double atan2(double, double);
  public static native double cbrt(double);
  public static native double ceil(double);
  public static native double cos(double);
  public static native double cosh(double);
  public static native double exp(double);
  public static native double expm1(double);
  public static native double floor(double);
  public static native double hypot(double, double);
  public static native double log(double);
  public static native double log10(double);
  public static native double log1p(double);
  public static native double pow(double, double);
  public static native double rint(double);
  public static native double sin(double);
  public static native double sinh(double);
  public static native double sqrt(double);
  public static native double tan(double);
  public static native double tanh(double);
  public static final double E;
  public static final double PI;
}
public class java.lang.NegativeArraySizeException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.NoClassDefFoundError
  extends java.lang.LinkageError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.NoSuchFieldError
  extends java.lang.IncompatibleClassChangeError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.NoSuchFieldException
  extends java.lang.ReflectiveOperationException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.NoSuchMethodError
  extends java.lang.IncompatibleClassChangeError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.NoSuchMethodException
  extends java.lang.ReflectiveOperationException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.NullPointerException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.lang.Number
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  public abstract double doubleValue();
  public abstract float floatValue();
  public abstract int intValue();
  public abstract long longValue();
  public byte byteValue();
  public short shortValue();
}
public class java.lang.NumberFormatException
  extends java.lang.IllegalArgumentException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.Object
{
  public void <init>();
  public final native void notify();
  public final native void notifyAll();
  public final native void wait()  throws java.lang.InterruptedException;
  public final native void wait(long, int)  throws java.lang.InterruptedException;
  public final void wait(long)  throws java.lang.InterruptedException;
  public final java.lang.Class getClass();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  protected void finalize()  throws java.lang.Throwable;
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class java.lang.OutOfMemoryError
  extends java.lang.VirtualMachineError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.lang.Override
  extends java.lang.annotation.Annotation
{
}
public class java.lang.Package
  extends java.lang.Object
  implements java.lang.reflect.AnnotatedElement
{
  public static java.lang.Package getPackage(java.lang.String);
  public static java.lang.Package[] getPackages();
  public boolean isCompatibleWith(java.lang.String)  throws java.lang.NumberFormatException;
  public boolean isSealed();
  public boolean isSealed(java.net.URL);
  public int hashCode();
  public java.lang.String getImplementationTitle();
  public java.lang.String getImplementationVendor();
  public java.lang.String getImplementationVersion();
  public java.lang.String getName();
  public java.lang.String getSpecificationTitle();
  public java.lang.String getSpecificationVendor();
  public java.lang.String getSpecificationVersion();
  public java.lang.String toString();
  public java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class);
  public java.lang.annotation.Annotation[] getAnnotations();
  public java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class);
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public java.lang.annotation.Annotation[] getDeclaredAnnotationsByType(java.lang.Class);
}
public abstract class java.lang.Process
  extends java.lang.Object
{
  public void <init>();
  public abstract int exitValue();
  public abstract int waitFor()  throws java.lang.InterruptedException;
  public abstract void destroy();
  public abstract java.io.InputStream getErrorStream();
  public abstract java.io.InputStream getInputStream();
  public abstract java.io.OutputStream getOutputStream();
}
public final class java.lang.ProcessBuilder
  extends java.lang.Object
{
  public void <init>(java.lang.String[]);
  public void <init>(java.util.List);
  public boolean redirectErrorStream();
  public java.io.File directory();
  public java.lang.Process start()  throws java.io.IOException;
  public java.lang.ProcessBuilder command(java.lang.String[]);
  public java.lang.ProcessBuilder command(java.util.List);
  public java.lang.ProcessBuilder directory(java.io.File);
  public java.lang.ProcessBuilder redirectErrorStream(boolean);
  public java.util.List command();
  public java.util.Map environment();
}
public interface java.lang.Readable
{
  public abstract int read(java.nio.CharBuffer)  throws java.io.IOException;
}
public class java.lang.ReflectiveOperationException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.lang.Runnable
{
  public abstract void run();
}
public class java.lang.Runtime
  extends java.lang.Object
{
  public static void runFinalizersOnExit(boolean);
  public static java.lang.Runtime getRuntime();
  public boolean removeShutdownHook(java.lang.Thread);
  public int availableProcessors();
  public native long freeMemory();
  public native long maxMemory();
  public native long totalMemory();
  public native void gc();
  public void addShutdownHook(java.lang.Thread);
  public void exit(int);
  public void halt(int);
  public void load(java.lang.String);
  public void loadLibrary(java.lang.String);
  public void runFinalization();
  public void traceInstructions(boolean);
  public void traceMethodCalls(boolean);
  public java.io.InputStream getLocalizedInputStream(java.io.InputStream);
  public java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream);
  public java.lang.Process exec(java.lang.String)  throws java.io.IOException;
  public java.lang.Process exec(java.lang.String, java.lang.String[])  throws java.io.IOException;
  public java.lang.Process exec(java.lang.String, java.lang.String[], java.io.File)  throws java.io.IOException;
  public java.lang.Process exec(java.lang.String[])  throws java.io.IOException;
  public java.lang.Process exec(java.lang.String[], java.lang.String[])  throws java.io.IOException;
  public java.lang.Process exec(java.lang.String[], java.lang.String[], java.io.File)  throws java.io.IOException;
}
public class java.lang.RuntimeException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  protected void <init>(java.lang.String, java.lang.Throwable, boolean, boolean);
}
public final class java.lang.RuntimePermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public interface java.lang.SafeVarargs
  extends java.lang.annotation.Annotation
{
}
public class java.lang.SecurityException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.lang.SecurityManager
  extends java.lang.Object
{
  public void <init>();
  public boolean checkTopLevelWindow(java.lang.Object);
  public boolean getInCheck();
  public void checkAccept(java.lang.String, int);
  public void checkAccess(java.lang.Thread);
  public void checkAccess(java.lang.ThreadGroup);
  public void checkAwtEventQueueAccess();
  public void checkConnect(java.lang.String, int);
  public void checkConnect(java.lang.String, int, java.lang.Object);
  public void checkCreateClassLoader();
  public void checkDelete(java.lang.String);
  public void checkExec(java.lang.String);
  public void checkExit(int);
  public void checkLink(java.lang.String);
  public void checkListen(int);
  public void checkMemberAccess(java.lang.Class, int);
  public void checkMulticast(java.net.InetAddress);
  public void checkMulticast(java.net.InetAddress, byte);
  public void checkPackageAccess(java.lang.String);
  public void checkPackageDefinition(java.lang.String);
  public void checkPermission(java.security.Permission);
  public void checkPermission(java.security.Permission, java.lang.Object);
  public void checkPrintJobAccess();
  public void checkPropertiesAccess();
  public void checkPropertyAccess(java.lang.String);
  public void checkRead(java.io.FileDescriptor);
  public void checkRead(java.lang.String);
  public void checkRead(java.lang.String, java.lang.Object);
  public void checkSecurityAccess(java.lang.String);
  public void checkSetFactory();
  public void checkSystemClipboardAccess();
  public void checkWrite(java.io.FileDescriptor);
  public void checkWrite(java.lang.String);
  public java.lang.Object getSecurityContext();
  public java.lang.ThreadGroup getThreadGroup();
  protected boolean inClass(java.lang.String);
  protected boolean inClassLoader();
  protected int classDepth(java.lang.String);
  protected int classLoaderDepth();
  protected java.lang.Class currentLoadedClass();
  protected java.lang.ClassLoader currentClassLoader();
  protected java.lang.Class[] getClassContext();
  protected boolean inCheck;
}
public final class java.lang.Short
  extends java.lang.Number
  implements java.lang.Comparable
{
  public static int compare(short, short);
  public static int hashCode(short);
  public static short parseShort(java.lang.String)  throws java.lang.NumberFormatException;
  public static short parseShort(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static short reverseBytes(short);
  public static java.lang.Short decode(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Short valueOf(java.lang.String)  throws java.lang.NumberFormatException;
  public static java.lang.Short valueOf(java.lang.String, int)  throws java.lang.NumberFormatException;
  public static java.lang.Short valueOf(short);
  public static java.lang.String toString(short);
  public void <init>(java.lang.String)  throws java.lang.NumberFormatException;
  public void <init>(short);
  public boolean equals(java.lang.Object);
  public byte byteValue();
  public double doubleValue();
  public float floatValue();
  public int compareTo(java.lang.Object);
  public int compareTo(java.lang.Short);
  public int hashCode();
  public int intValue();
  public long longValue();
  public short shortValue();
  public java.lang.String toString();
  public static final int BYTES;
  public static final int SIZE;
  public static final short MAX_VALUE;
  public static final short MIN_VALUE;
  public static final java.lang.Class TYPE;
}
public class java.lang.StackOverflowError
  extends java.lang.VirtualMachineError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class java.lang.StackTraceElement
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String, int);
  public boolean equals(java.lang.Object);
  public boolean isNativeMethod();
  public int getLineNumber();
  public int hashCode();
  public java.lang.String getClassName();
  public java.lang.String getFileName();
  public java.lang.String getMethodName();
  public java.lang.String toString();
}
public final class java.lang.StrictMath
  extends java.lang.Object
{
  public static double abs(double);
  public static double ceil(double);
  public static double copySign(double, double);
  public static double floor(double);
  public static double max(double, double);
  public static double min(double, double);
  public static double nextAfter(double, double);
  public static double nextDown(double);
  public static double nextUp(double);
  public static double random();
  public static double rint(double);
  public static double scalb(double, int);
  public static double signum(double);
  public static double toDegrees(double);
  public static double toRadians(double);
  public static double ulp(double);
  public static float abs(float);
  public static float copySign(float, float);
  public static float max(float, float);
  public static float min(float, float);
  public static float nextAfter(float, double);
  public static float nextDown(float);
  public static float nextUp(float);
  public static float scalb(float, int);
  public static float signum(float);
  public static float ulp(float);
  public static int abs(int);
  public static int addExact(int, int);
  public static int floorDiv(int, int);
  public static int floorMod(int, int);
  public static int getExponent(double);
  public static int getExponent(float);
  public static int max(int, int);
  public static int min(int, int);
  public static int multiplyExact(int, int);
  public static int round(float);
  public static int subtractExact(int, int);
  public static int toIntExact(long);
  public static long abs(long);
  public static long addExact(long, long);
  public static long floorDiv(long, long);
  public static long floorMod(long, long);
  public static long max(long, long);
  public static long min(long, long);
  public static long multiplyExact(long, long);
  public static long round(double);
  public static long subtractExact(long, long);
  public static native double IEEEremainder(double, double);
  public static native double acos(double);
  public static native double asin(double);
  public static native double atan(double);
  public static native double atan2(double, double);
  public static native double cbrt(double);
  public static native double cos(double);
  public static native double cosh(double);
  public static native double exp(double);
  public static native double expm1(double);
  public static native double hypot(double, double);
  public static native double log(double);
  public static native double log10(double);
  public static native double log1p(double);
  public static native double pow(double, double);
  public static native double sin(double);
  public static native double sinh(double);
  public static native double sqrt(double);
  public static native double tan(double);
  public static native double tanh(double);
  public static final double E;
  public static final double PI;
}
public final class java.lang.String
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Comparable, java.lang.CharSequence
{
  public static java.lang.String copyValueOf(char[]);
  public static java.lang.String copyValueOf(char[], int, int);
  public static java.lang.String format(java.lang.String, java.lang.Object[]);
  public static java.lang.String format(java.util.Locale, java.lang.String, java.lang.Object[]);
  public static java.lang.String valueOf(boolean);
  public static java.lang.String valueOf(char);
  public static java.lang.String valueOf(char[]);
  public static java.lang.String valueOf(char[], int, int);
  public static java.lang.String valueOf(double);
  public static java.lang.String valueOf(float);
  public static java.lang.String valueOf(int);
  public static java.lang.String valueOf(java.lang.Object);
  public static java.lang.String valueOf(long);
  public void <init>();
  public void <init>(byte[]);
  public void <init>(byte[], int);
  public void <init>(byte[], int, int);
  public void <init>(byte[], int, int, int);
  public void <init>(byte[], int, int, java.lang.String)  throws java.io.UnsupportedEncodingException;
  public void <init>(byte[], int, int, java.nio.charset.Charset);
  public void <init>(byte[], java.lang.String)  throws java.io.UnsupportedEncodingException;
  public void <init>(byte[], java.nio.charset.Charset);
  public void <init>(char[]);
  public void <init>(char[], int, int);
  public void <init>(int[], int, int);
  public void <init>(java.lang.String);
  public void <init>(java.lang.StringBuffer);
  public void <init>(java.lang.StringBuilder);
  public boolean contains(java.lang.CharSequence);
  public boolean contentEquals(java.lang.CharSequence);
  public boolean contentEquals(java.lang.StringBuffer);
  public boolean endsWith(java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean equalsIgnoreCase(java.lang.String);
  public boolean isEmpty();
  public boolean matches(java.lang.String);
  public boolean regionMatches(boolean, int, java.lang.String, int, int);
  public boolean regionMatches(int, java.lang.String, int, int);
  public boolean startsWith(java.lang.String);
  public boolean startsWith(java.lang.String, int);
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public int compareTo(java.lang.Object);
  public int compareToIgnoreCase(java.lang.String);
  public int hashCode();
  public int indexOf(int);
  public int indexOf(int, int);
  public int indexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  public int lastIndexOf(int);
  public int lastIndexOf(int, int);
  public int lastIndexOf(java.lang.String);
  public int lastIndexOf(java.lang.String, int);
  public int length();
  public int offsetByCodePoints(int, int);
  public native char charAt(int);
  public native int compareTo(java.lang.String);
  public void getBytes(int, int, byte[], int);
  public void getChars(int, int, char[], int);
  public byte[] getBytes();
  public byte[] getBytes(java.lang.String)  throws java.io.UnsupportedEncodingException;
  public byte[] getBytes(java.nio.charset.Charset);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String replace(char, char);
  public java.lang.String replace(java.lang.CharSequence, java.lang.CharSequence);
  public java.lang.String replaceAll(java.lang.String, java.lang.String);
  public java.lang.String replaceFirst(java.lang.String, java.lang.String);
  public java.lang.String substring(int);
  public java.lang.String substring(int, int);
  public java.lang.String toLowerCase();
  public java.lang.String toLowerCase(java.util.Locale);
  public java.lang.String toString();
  public java.lang.String toUpperCase();
  public java.lang.String toUpperCase(java.util.Locale);
  public java.lang.String trim();
  public java.lang.String[] split(java.lang.String);
  public java.lang.String[] split(java.lang.String, int);
  public native char[] toCharArray();
  public native java.lang.String concat(java.lang.String);
  public native java.lang.String intern();
  public static final java.util.Comparator CASE_INSENSITIVE_ORDER;
}
public final class java.lang.StringBuffer
  extends java.lang.AbstractStringBuilder
  implements java.io.Serializable, java.lang.Appendable, java.lang.CharSequence
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.lang.CharSequence);
  public void <init>(java.lang.String);
  public char charAt(int);
  public int capacity();
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public int indexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  public int lastIndexOf(java.lang.String);
  public int lastIndexOf(java.lang.String, int);
  public int length();
  public int offsetByCodePoints(int, int);
  public void ensureCapacity(int);
  public void getChars(int, int, char[], int);
  public void setCharAt(int, char);
  public void setLength(int);
  public void trimToSize();
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String substring(int);
  public java.lang.String substring(int, int);
  public java.lang.String toString();
  public java.lang.StringBuffer append(boolean);
  public java.lang.StringBuffer append(char);
  public java.lang.StringBuffer append(char[]);
  public java.lang.StringBuffer append(char[], int, int);
  public java.lang.StringBuffer append(double);
  public java.lang.StringBuffer append(float);
  public java.lang.StringBuffer append(int);
  public java.lang.StringBuffer append(java.lang.CharSequence);
  public java.lang.StringBuffer append(java.lang.CharSequence, int, int);
  public java.lang.StringBuffer append(java.lang.Object);
  public java.lang.StringBuffer append(java.lang.String);
  public java.lang.StringBuffer append(java.lang.StringBuffer);
  public java.lang.StringBuffer append(long);
  public java.lang.StringBuffer appendCodePoint(int);
  public java.lang.StringBuffer delete(int, int);
  public java.lang.StringBuffer deleteCharAt(int);
  public java.lang.StringBuffer insert(int, boolean);
  public java.lang.StringBuffer insert(int, char);
  public java.lang.StringBuffer insert(int, char[]);
  public java.lang.StringBuffer insert(int, char[], int, int);
  public java.lang.StringBuffer insert(int, double);
  public java.lang.StringBuffer insert(int, float);
  public java.lang.StringBuffer insert(int, int);
  public java.lang.StringBuffer insert(int, java.lang.CharSequence);
  public java.lang.StringBuffer insert(int, java.lang.CharSequence, int, int);
  public java.lang.StringBuffer insert(int, java.lang.Object);
  public java.lang.StringBuffer insert(int, java.lang.String);
  public java.lang.StringBuffer insert(int, long);
  public java.lang.StringBuffer replace(int, int, java.lang.String);
  public java.lang.StringBuffer reverse();
}
public final class java.lang.StringBuilder
  extends java.lang.AbstractStringBuilder
  implements java.io.Serializable, java.lang.Appendable, java.lang.CharSequence
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.lang.CharSequence);
  public void <init>(java.lang.String);
  public char charAt(int);
  public int capacity();
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public int indexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  public int lastIndexOf(java.lang.String);
  public int lastIndexOf(java.lang.String, int);
  public int length();
  public int offsetByCodePoints(int, int);
  public void ensureCapacity(int);
  public void getChars(int, int, char[], int);
  public void setCharAt(int, char);
  public void setLength(int);
  public void trimToSize();
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String substring(int);
  public java.lang.String substring(int, int);
  public java.lang.String toString();
  public java.lang.StringBuilder append(boolean);
  public java.lang.StringBuilder append(char);
  public java.lang.StringBuilder append(char[]);
  public java.lang.StringBuilder append(char[], int, int);
  public java.lang.StringBuilder append(double);
  public java.lang.StringBuilder append(float);
  public java.lang.StringBuilder append(int);
  public java.lang.StringBuilder append(java.lang.CharSequence);
  public java.lang.StringBuilder append(java.lang.CharSequence, int, int);
  public java.lang.StringBuilder append(java.lang.Object);
  public java.lang.StringBuilder append(java.lang.String);
  public java.lang.StringBuilder append(java.lang.StringBuffer);
  public java.lang.StringBuilder append(long);
  public java.lang.StringBuilder appendCodePoint(int);
  public java.lang.StringBuilder delete(int, int);
  public java.lang.StringBuilder deleteCharAt(int);
  public java.lang.StringBuilder insert(int, boolean);
  public java.lang.StringBuilder insert(int, char);
  public java.lang.StringBuilder insert(int, char[]);
  public java.lang.StringBuilder insert(int, char[], int, int);
  public java.lang.StringBuilder insert(int, double);
  public java.lang.StringBuilder insert(int, float);
  public java.lang.StringBuilder insert(int, int);
  public java.lang.StringBuilder insert(int, java.lang.CharSequence);
  public java.lang.StringBuilder insert(int, java.lang.CharSequence, int, int);
  public java.lang.StringBuilder insert(int, java.lang.Object);
  public java.lang.StringBuilder insert(int, java.lang.String);
  public java.lang.StringBuilder insert(int, long);
  public java.lang.StringBuilder replace(int, int, java.lang.String);
  public java.lang.StringBuilder reverse();
}
public class java.lang.StringIndexOutOfBoundsException
  extends java.lang.IndexOutOfBoundsException
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.lang.String);
}
public interface java.lang.SuppressWarnings
  extends java.lang.annotation.Annotation
{
  public abstract java.lang.String[] value();
}
public final class java.lang.System
  extends java.lang.Object
{
  public static native int identityHashCode(java.lang.Object);
  public static native long currentTimeMillis();
  public static native long nanoTime();
  public static native void arraycopy(java.lang.Object, int, java.lang.Object, int, int);
  public static void exit(int);
  public static void gc();
  public static void load(java.lang.String);
  public static void loadLibrary(java.lang.String);
  public static void runFinalization();
  public static void runFinalizersOnExit(boolean);
  public static void setErr(java.io.PrintStream);
  public static void setIn(java.io.InputStream);
  public static void setOut(java.io.PrintStream);
  public static void setProperties(java.util.Properties);
  public static void setSecurityManager(java.lang.SecurityManager);
  public static java.io.Console console();
  public static java.lang.SecurityManager getSecurityManager();
  public static java.lang.String clearProperty(java.lang.String);
  public static java.lang.String getProperty(java.lang.String);
  public static java.lang.String getProperty(java.lang.String, java.lang.String);
  public static java.lang.String getenv(java.lang.String);
  public static java.lang.String lineSeparator();
  public static java.lang.String setProperty(java.lang.String, java.lang.String);
  public static java.nio.channels.Channel inheritedChannel()  throws java.io.IOException;
  public static java.util.Map getenv();
  public static java.util.Properties getProperties();
  public static native java.lang.String mapLibraryName(java.lang.String);
  public static final java.io.InputStream in;
  public static final java.io.PrintStream err;
  public static final java.io.PrintStream out;
}
public class java.lang.Thread
  extends java.lang.Object
  implements java.lang.Runnable
{
  public static boolean holdsLock(java.lang.Object);
  public static int activeCount();
  public static int enumerate(java.lang.Thread[]);
  public static native boolean interrupted();
  public static native void yield();
  public static void dumpStack();
  public static void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  public static void sleep(long)  throws java.lang.InterruptedException;
  public static void sleep(long, int)  throws java.lang.InterruptedException;
  public static java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
  public static java.util.Map getAllStackTraces();
  public static native java.lang.Thread currentThread();
  public void <init>();
  public void <init>(java.lang.Runnable);
  public void <init>(java.lang.Runnable, java.lang.String);
  public void <init>(java.lang.String);
  public void <init>(java.lang.ThreadGroup, java.lang.Runnable);
  public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String);
  public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long);
  public void <init>(java.lang.ThreadGroup, java.lang.String);
  public final boolean isAlive();
  public final boolean isDaemon();
  public final int getPriority();
  public final void checkAccess();
  public final void join()  throws java.lang.InterruptedException;
  public final void join(long)  throws java.lang.InterruptedException;
  public final void join(long, int)  throws java.lang.InterruptedException;
  public final void resume();
  public final void setDaemon(boolean);
  public final void setName(java.lang.String);
  public final void setPriority(int);
  public final void stop();
  public final void stop(java.lang.Throwable);
  public final void suspend();
  public final java.lang.String getName();
  public final java.lang.ThreadGroup getThreadGroup();
  public int countStackFrames();
  public long getId();
  public native boolean isInterrupted();
  public void destroy();
  public void interrupt();
  public void run();
  public void setContextClassLoader(java.lang.ClassLoader);
  public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  public void start();
  public java.lang.ClassLoader getContextClassLoader();
  public java.lang.StackTraceElement[] getStackTrace();
  public java.lang.String toString();
  public java.lang.Thread$State getState();
  public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public static final int MAX_PRIORITY;
  public static final int MIN_PRIORITY;
  public static final int NORM_PRIORITY;
}
public final class java.lang.Thread$State
  extends java.lang.Enum
{
  public static java.lang.Thread$State valueOf(java.lang.String);
  public static java.lang.Thread$State[] values();
  public static final java.lang.Thread$State BLOCKED;
  public static final java.lang.Thread$State NEW;
  public static final java.lang.Thread$State RUNNABLE;
  public static final java.lang.Thread$State TERMINATED;
  public static final java.lang.Thread$State TIMED_WAITING;
  public static final java.lang.Thread$State WAITING;
}
public interface java.lang.Thread$UncaughtExceptionHandler
{
  public abstract void uncaughtException(java.lang.Thread, java.lang.Throwable);
}
public class java.lang.ThreadDeath
  extends java.lang.Error
{
  public void <init>();
}
public class java.lang.ThreadGroup
  extends java.lang.Object
  implements java.lang.Thread$UncaughtExceptionHandler
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.ThreadGroup, java.lang.String);
  public final boolean isDaemon();
  public final boolean parentOf(java.lang.ThreadGroup);
  public final int getMaxPriority();
  public final void checkAccess();
  public final void destroy();
  public final void interrupt();
  public final void resume();
  public final void setDaemon(boolean);
  public final void setMaxPriority(int);
  public final void stop();
  public final void suspend();
  public final java.lang.String getName();
  public final java.lang.ThreadGroup getParent();
  public boolean allowThreadSuspension(boolean);
  public boolean isDestroyed();
  public int activeCount();
  public int activeGroupCount();
  public int enumerate(java.lang.ThreadGroup[]);
  public int enumerate(java.lang.ThreadGroup[], boolean);
  public int enumerate(java.lang.Thread[]);
  public int enumerate(java.lang.Thread[], boolean);
  public void list();
  public void uncaughtException(java.lang.Thread, java.lang.Throwable);
  public java.lang.String toString();
}
public class java.lang.ThreadLocal
  extends java.lang.Object
{
  public void <init>();
  public void remove();
  public void set(java.lang.Object);
  public java.lang.Object get();
  protected java.lang.Object initialValue();
}
public class java.lang.Throwable
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  public final void addSuppressed(java.lang.Throwable);
  public final java.lang.Throwable[] getSuppressed();
  public void printStackTrace();
  public void printStackTrace(java.io.PrintStream);
  public void printStackTrace(java.io.PrintWriter);
  public void setStackTrace(java.lang.StackTraceElement[]);
  public java.lang.StackTraceElement[] getStackTrace();
  public java.lang.String getLocalizedMessage();
  public java.lang.String getMessage();
  public java.lang.String toString();
  public java.lang.Throwable fillInStackTrace();
  public java.lang.Throwable getCause();
  public java.lang.Throwable initCause(java.lang.Throwable);
  protected void <init>(java.lang.String, java.lang.Throwable, boolean, boolean);
}
public class java.lang.TypeNotPresentException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.String, java.lang.Throwable);
  public java.lang.String typeName();
}
public class java.lang.UnknownError
  extends java.lang.VirtualMachineError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.UnsatisfiedLinkError
  extends java.lang.LinkageError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.UnsupportedClassVersionError
  extends java.lang.ClassFormatError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.lang.UnsupportedOperationException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.lang.VerifyError
  extends java.lang.LinkageError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.lang.VirtualMachineError
  extends java.lang.Error
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public final class java.lang.Void
  extends java.lang.Object
{
  public static final java.lang.Class TYPE;
}
public interface java.lang.annotation.Annotation
{
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.Class annotationType();
  public abstract java.lang.String toString();
}
public class java.lang.annotation.AnnotationFormatError
  extends java.lang.Error
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.lang.annotation.AnnotationTypeMismatchException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.reflect.Method, java.lang.String);
  public java.lang.String foundType();
  public java.lang.reflect.Method element();
}
public interface java.lang.annotation.Documented
  extends java.lang.annotation.Annotation
{
}
public final class java.lang.annotation.ElementType
  extends java.lang.Enum
{
  public static java.lang.annotation.ElementType valueOf(java.lang.String);
  public static java.lang.annotation.ElementType[] values();
  public static final java.lang.annotation.ElementType ANNOTATION_TYPE;
  public static final java.lang.annotation.ElementType CONSTRUCTOR;
  public static final java.lang.annotation.ElementType FIELD;
  public static final java.lang.annotation.ElementType LOCAL_VARIABLE;
  public static final java.lang.annotation.ElementType METHOD;
  public static final java.lang.annotation.ElementType PACKAGE;
  public static final java.lang.annotation.ElementType PARAMETER;
  public static final java.lang.annotation.ElementType TYPE;
}
public class java.lang.annotation.IncompleteAnnotationException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.Class, java.lang.String);
  public java.lang.Class annotationType();
  public java.lang.String elementName();
}
public interface java.lang.annotation.Inherited
  extends java.lang.annotation.Annotation
{
}
public interface java.lang.annotation.Repeatable
  extends java.lang.annotation.Annotation
{
  public abstract java.lang.Class value();
}
public interface java.lang.annotation.Retention
  extends java.lang.annotation.Annotation
{
  public abstract java.lang.annotation.RetentionPolicy value();
}
public final class java.lang.annotation.RetentionPolicy
  extends java.lang.Enum
{
  public static java.lang.annotation.RetentionPolicy valueOf(java.lang.String);
  public static java.lang.annotation.RetentionPolicy[] values();
  public static final java.lang.annotation.RetentionPolicy CLASS;
  public static final java.lang.annotation.RetentionPolicy RUNTIME;
  public static final java.lang.annotation.RetentionPolicy SOURCE;
}
public interface java.lang.annotation.Target
  extends java.lang.annotation.Annotation
{
  public abstract java.lang.annotation.ElementType[] value();
}
public class java.lang.ref.PhantomReference
  extends java.lang.ref.Reference
{
  public void <init>(java.lang.Object, java.lang.ref.ReferenceQueue);
  public java.lang.Object get();
}
public abstract class java.lang.ref.Reference
  extends java.lang.Object
{
  public boolean enqueue();
  public boolean isEnqueued();
  public void clear();
  public java.lang.Object get();
}
public class java.lang.ref.ReferenceQueue
  extends java.lang.Object
{
  public void <init>();
  public java.lang.ref.Reference poll();
  public java.lang.ref.Reference remove()  throws java.lang.InterruptedException;
  public java.lang.ref.Reference remove(long)  throws java.lang.IllegalArgumentException, java.lang.InterruptedException;
}
public class java.lang.ref.SoftReference
  extends java.lang.ref.Reference
{
  public void <init>(java.lang.Object);
  public void <init>(java.lang.Object, java.lang.ref.ReferenceQueue);
  public java.lang.Object get();
}
public class java.lang.ref.WeakReference
  extends java.lang.ref.Reference
{
  public void <init>(java.lang.Object);
  public void <init>(java.lang.Object, java.lang.ref.ReferenceQueue);
}
public class java.lang.reflect.AccessibleObject
  extends java.lang.Object
  implements java.lang.reflect.AnnotatedElement
{
  public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean)  throws java.lang.SecurityException;
  public boolean isAccessible();
  public void setAccessible(boolean)  throws java.lang.SecurityException;
  public java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public java.lang.annotation.Annotation[] getAnnotations();
  public java.lang.annotation.Annotation[] getDeclaredAnnotations();
  protected void <init>();
}
public interface java.lang.reflect.AnnotatedElement
{
  public abstract java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public abstract java.lang.annotation.Annotation[] getAnnotations();
  public abstract java.lang.annotation.Annotation[] getDeclaredAnnotations();
  public boolean isAnnotationPresent(java.lang.Class);
  public java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class);
  public java.lang.annotation.Annotation[] getAnnotationsByType(java.lang.Class);
  public java.lang.annotation.Annotation[] getDeclaredAnnotationsByType(java.lang.Class);
}
public final class java.lang.reflect.Array
  extends java.lang.Object
{
  public static boolean getBoolean(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static byte getByte(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static char getChar(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static double getDouble(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static float getFloat(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static int getInt(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static int getLength(java.lang.Object);
  public static long getLong(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static short getShort(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void set(java.lang.Object, int, java.lang.Object)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void setBoolean(java.lang.Object, int, boolean);
  public static void setByte(java.lang.Object, int, byte)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void setChar(java.lang.Object, int, char)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void setDouble(java.lang.Object, int, double)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void setFloat(java.lang.Object, int, float)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void setInt(java.lang.Object, int, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void setLong(java.lang.Object, int, long)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static void setShort(java.lang.Object, int, short)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static java.lang.Object get(java.lang.Object, int)  throws java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException;
  public static java.lang.Object newInstance(java.lang.Class, int)  throws java.lang.NegativeArraySizeException;
  public static java.lang.Object newInstance(java.lang.Class, int[])  throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException;
}
public final class java.lang.reflect.Constructor
  extends java.lang.reflect.AccessibleObject
  implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
{
  public boolean equals(java.lang.Object);
  public boolean isAnnotationPresent(java.lang.Class);
  public boolean isSynthetic();
  public boolean isVarArgs();
  public int getModifiers();
  public int hashCode();
  public java.lang.Class getDeclaringClass();
  public java.lang.Class[] getParameterTypes();
  public java.lang.Object newInstance(java.lang.Object[])  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException;
  public java.lang.String getName();
  public java.lang.String toGenericString();
  public java.lang.String toString();
  public java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public java.lang.annotation.Annotation[][] getParameterAnnotations();
  public java.lang.reflect.TypeVariable[] getTypeParameters();
  public java.lang.reflect.Type[] getGenericExceptionTypes();
  public java.lang.reflect.Type[] getGenericParameterTypes();
  public native java.lang.Class[] getExceptionTypes();
  public native java.lang.annotation.Annotation[] getDeclaredAnnotations();
}
public final class java.lang.reflect.Field
  extends java.lang.reflect.AccessibleObject
  implements java.lang.reflect.Member
{
  public boolean equals(java.lang.Object);
  public boolean isAnnotationPresent(java.lang.Class);
  public boolean isEnumConstant();
  public boolean isSynthetic();
  public int getModifiers();
  public int hashCode();
  public native boolean getBoolean(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native byte getByte(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native char getChar(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native double getDouble(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native float getFloat(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native int getInt(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native long getLong(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native short getShort(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void set(java.lang.Object, java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setBoolean(java.lang.Object, boolean)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setByte(java.lang.Object, byte)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setChar(java.lang.Object, char)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setDouble(java.lang.Object, double)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setFloat(java.lang.Object, float)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setInt(java.lang.Object, int)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setLong(java.lang.Object, long)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native void setShort(java.lang.Object, short)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public java.lang.Class getDeclaringClass();
  public java.lang.Class getType();
  public java.lang.String getName();
  public java.lang.String toGenericString();
  public java.lang.String toString();
  public java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public java.lang.reflect.Type getGenericType();
  public native java.lang.Object get(java.lang.Object)  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
  public native java.lang.annotation.Annotation[] getDeclaredAnnotations();
}
public interface java.lang.reflect.GenericArrayType
  extends java.lang.reflect.Type
{
  public abstract java.lang.reflect.Type getGenericComponentType();
}
public interface java.lang.reflect.GenericDeclaration
{
  public abstract java.lang.reflect.TypeVariable[] getTypeParameters();
}
public class java.lang.reflect.GenericSignatureFormatError
  extends java.lang.ClassFormatError
{
  public void <init>();
}
public interface java.lang.reflect.InvocationHandler
{
  public abstract java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])  throws java.lang.Throwable;
}
public class java.lang.reflect.InvocationTargetException
  extends java.lang.ReflectiveOperationException
{
  public void <init>(java.lang.Throwable);
  public void <init>(java.lang.Throwable, java.lang.String);
  public java.lang.Throwable getCause();
  public java.lang.Throwable getTargetException();
  protected void <init>();
}
public class java.lang.reflect.MalformedParameterizedTypeException
  extends java.lang.RuntimeException
{
  public void <init>();
}
public interface java.lang.reflect.Member
{
  public abstract boolean isSynthetic();
  public abstract int getModifiers();
  public abstract java.lang.Class getDeclaringClass();
  public abstract java.lang.String getName();
  public static final int DECLARED;
  public static final int PUBLIC;
}
public final class java.lang.reflect.Method
  extends java.lang.reflect.AccessibleObject
  implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
{
  public boolean equals(java.lang.Object);
  public boolean isBridge();
  public boolean isDefault();
  public boolean isSynthetic();
  public boolean isVarArgs();
  public int getModifiers();
  public int hashCode();
  public java.lang.Class getDeclaringClass();
  public java.lang.Class getReturnType();
  public java.lang.Class[] getParameterTypes();
  public java.lang.String getName();
  public java.lang.String toGenericString();
  public java.lang.String toString();
  public java.lang.annotation.Annotation getAnnotation(java.lang.Class);
  public java.lang.annotation.Annotation[][] getParameterAnnotations();
  public java.lang.reflect.Type getGenericReturnType();
  public java.lang.reflect.TypeVariable[] getTypeParameters();
  public java.lang.reflect.Type[] getGenericExceptionTypes();
  public java.lang.reflect.Type[] getGenericParameterTypes();
  public native java.lang.Class[] getExceptionTypes();
  public native java.lang.Object getDefaultValue();
  public native java.lang.Object invoke(java.lang.Object, java.lang.Object[])  throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException;
}
public class java.lang.reflect.Modifier
  extends java.lang.Object
{
  public static boolean isAbstract(int);
  public static boolean isFinal(int);
  public static boolean isInterface(int);
  public static boolean isNative(int);
  public static boolean isPrivate(int);
  public static boolean isProtected(int);
  public static boolean isPublic(int);
  public static boolean isStatic(int);
  public static boolean isStrict(int);
  public static boolean isSynchronized(int);
  public static boolean isTransient(int);
  public static boolean isVolatile(int);
  public static int classModifiers();
  public static int constructorModifiers();
  public static int fieldModifiers();
  public static int interfaceModifiers();
  public static int methodModifiers();
  public static java.lang.String toString(int);
  public void <init>();
  public static final int ABSTRACT;
  public static final int FINAL;
  public static final int INTERFACE;
  public static final int NATIVE;
  public static final int PRIVATE;
  public static final int PROTECTED;
  public static final int PUBLIC;
  public static final int STATIC;
  public static final int STRICT;
  public static final int SYNCHRONIZED;
  public static final int TRANSIENT;
  public static final int VOLATILE;
}
public interface java.lang.reflect.ParameterizedType
  extends java.lang.reflect.Type
{
  public abstract java.lang.reflect.Type getOwnerType();
  public abstract java.lang.reflect.Type getRawType();
  public abstract java.lang.reflect.Type[] getActualTypeArguments();
}
public class java.lang.reflect.Proxy
  extends java.lang.Object
  implements java.io.Serializable
{
  public static boolean isProxyClass(java.lang.Class);
  public static java.lang.Class getProxyClass(java.lang.ClassLoader, java.lang.Class[])  throws java.lang.IllegalArgumentException;
  public static java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class[], java.lang.reflect.InvocationHandler)  throws java.lang.IllegalArgumentException;
  public static java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)  throws java.lang.IllegalArgumentException;
  protected void <init>(java.lang.reflect.InvocationHandler);
  protected java.lang.reflect.InvocationHandler h;
}
public final class java.lang.reflect.ReflectPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public interface java.lang.reflect.Type
{
}
public interface java.lang.reflect.TypeVariable
  extends java.lang.reflect.Type
{
  public abstract java.lang.String getName();
  public abstract java.lang.reflect.GenericDeclaration getGenericDeclaration();
  public abstract java.lang.reflect.Type[] getBounds();
}
public class java.lang.reflect.UndeclaredThrowableException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.Throwable);
  public void <init>(java.lang.Throwable, java.lang.String);
  public java.lang.Throwable getCause();
  public java.lang.Throwable getUndeclaredThrowable();
}
public interface java.lang.reflect.WildcardType
  extends java.lang.reflect.Type
{
  public abstract java.lang.reflect.Type[] getLowerBounds();
  public abstract java.lang.reflect.Type[] getUpperBounds();
}
public class java.math.BigDecimal
  extends java.lang.Number
  implements java.lang.Comparable, java.io.Serializable
{
  public static java.math.BigDecimal valueOf(double);
  public static java.math.BigDecimal valueOf(long);
  public static java.math.BigDecimal valueOf(long, int);
  public void <init>(char[]);
  public void <init>(char[], int, int);
  public void <init>(char[], int, int, java.math.MathContext);
  public void <init>(char[], java.math.MathContext);
  public void <init>(double);
  public void <init>(double, java.math.MathContext);
  public void <init>(int);
  public void <init>(int, java.math.MathContext);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.math.MathContext);
  public void <init>(java.math.BigInteger);
  public void <init>(java.math.BigInteger, int);
  public void <init>(java.math.BigInteger, int, java.math.MathContext);
  public void <init>(java.math.BigInteger, java.math.MathContext);
  public void <init>(long);
  public void <init>(long, java.math.MathContext);
  public boolean equals(java.lang.Object);
  public byte byteValueExact();
  public double doubleValue();
  public float floatValue();
  public int compareTo(java.lang.Object);
  public int compareTo(java.math.BigDecimal);
  public int hashCode();
  public int intValue();
  public int intValueExact();
  public int precision();
  public int scale();
  public int signum();
  public long longValue();
  public long longValueExact();
  public short shortValueExact();
  public java.lang.String toEngineeringString();
  public java.lang.String toPlainString();
  public java.lang.String toString();
  public java.math.BigDecimal abs();
  public java.math.BigDecimal abs(java.math.MathContext);
  public java.math.BigDecimal add(java.math.BigDecimal);
  public java.math.BigDecimal add(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal divide(java.math.BigDecimal);
  public java.math.BigDecimal divide(java.math.BigDecimal, int);
  public java.math.BigDecimal divide(java.math.BigDecimal, int, int);
  public java.math.BigDecimal divide(java.math.BigDecimal, int, java.math.RoundingMode);
  public java.math.BigDecimal divide(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal divide(java.math.BigDecimal, java.math.RoundingMode);
  public java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal);
  public java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal max(java.math.BigDecimal);
  public java.math.BigDecimal min(java.math.BigDecimal);
  public java.math.BigDecimal movePointLeft(int);
  public java.math.BigDecimal movePointRight(int);
  public java.math.BigDecimal multiply(java.math.BigDecimal);
  public java.math.BigDecimal multiply(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal negate();
  public java.math.BigDecimal negate(java.math.MathContext);
  public java.math.BigDecimal plus();
  public java.math.BigDecimal plus(java.math.MathContext);
  public java.math.BigDecimal pow(int);
  public java.math.BigDecimal pow(int, java.math.MathContext);
  public java.math.BigDecimal remainder(java.math.BigDecimal);
  public java.math.BigDecimal remainder(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal round(java.math.MathContext);
  public java.math.BigDecimal scaleByPowerOfTen(int);
  public java.math.BigDecimal setScale(int);
  public java.math.BigDecimal setScale(int, int);
  public java.math.BigDecimal setScale(int, java.math.RoundingMode);
  public java.math.BigDecimal stripTrailingZeros();
  public java.math.BigDecimal subtract(java.math.BigDecimal);
  public java.math.BigDecimal subtract(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigDecimal ulp();
  public java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal);
  public java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal, java.math.MathContext);
  public java.math.BigInteger toBigInteger();
  public java.math.BigInteger toBigIntegerExact();
  public java.math.BigInteger unscaledValue();
  public static final int ROUND_CEILING;
  public static final int ROUND_DOWN;
  public static final int ROUND_FLOOR;
  public static final int ROUND_HALF_DOWN;
  public static final int ROUND_HALF_EVEN;
  public static final int ROUND_HALF_UP;
  public static final int ROUND_UNNECESSARY;
  public static final int ROUND_UP;
  public static final java.math.BigDecimal ONE;
  public static final java.math.BigDecimal TEN;
  public static final java.math.BigDecimal ZERO;
}
public class java.math.BigInteger
  extends java.lang.Number
  implements java.lang.Comparable, java.io.Serializable
{
  public static java.math.BigInteger probablePrime(int, java.util.Random);
  public static java.math.BigInteger valueOf(long);
  public void <init>(byte[]);
  public void <init>(int, byte[]);
  public void <init>(int, int, java.util.Random);
  public void <init>(int, java.util.Random);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int);
  public boolean equals(java.lang.Object);
  public boolean isProbablePrime(int);
  public boolean testBit(int);
  public double doubleValue();
  public float floatValue();
  public int bitCount();
  public int bitLength();
  public int compareTo(java.lang.Object);
  public int compareTo(java.math.BigInteger);
  public int getLowestSetBit();
  public int hashCode();
  public int intValue();
  public int signum();
  public long longValue();
  public byte[] toByteArray();
  public java.lang.String toString();
  public java.lang.String toString(int);
  public java.math.BigInteger abs();
  public java.math.BigInteger add(java.math.BigInteger);
  public java.math.BigInteger and(java.math.BigInteger);
  public java.math.BigInteger andNot(java.math.BigInteger);
  public java.math.BigInteger clearBit(int);
  public java.math.BigInteger divide(java.math.BigInteger);
  public java.math.BigInteger flipBit(int);
  public java.math.BigInteger gcd(java.math.BigInteger);
  public java.math.BigInteger max(java.math.BigInteger);
  public java.math.BigInteger min(java.math.BigInteger);
  public java.math.BigInteger mod(java.math.BigInteger);
  public java.math.BigInteger modInverse(java.math.BigInteger);
  public java.math.BigInteger modPow(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger multiply(java.math.BigInteger);
  public java.math.BigInteger negate();
  public java.math.BigInteger nextProbablePrime();
  public java.math.BigInteger not();
  public java.math.BigInteger or(java.math.BigInteger);
  public java.math.BigInteger pow(int);
  public java.math.BigInteger remainder(java.math.BigInteger);
  public java.math.BigInteger setBit(int);
  public java.math.BigInteger shiftLeft(int);
  public java.math.BigInteger shiftRight(int);
  public java.math.BigInteger subtract(java.math.BigInteger);
  public java.math.BigInteger xor(java.math.BigInteger);
  public java.math.BigInteger[] divideAndRemainder(java.math.BigInteger);
  public static final java.math.BigInteger ONE;
  public static final java.math.BigInteger TEN;
  public static final java.math.BigInteger ZERO;
}
public final class java.math.MathContext
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(int);
  public void <init>(int, java.math.RoundingMode);
  public void <init>(java.lang.String);
  public boolean equals(java.lang.Object);
  public int getPrecision();
  public int hashCode();
  public java.lang.String toString();
  public java.math.RoundingMode getRoundingMode();
  public static final java.math.MathContext DECIMAL128;
  public static final java.math.MathContext DECIMAL32;
  public static final java.math.MathContext DECIMAL64;
  public static final java.math.MathContext UNLIMITED;
}
public final class java.math.RoundingMode
  extends java.lang.Enum
{
  public static java.math.RoundingMode valueOf(int);
  public static java.math.RoundingMode valueOf(java.lang.String);
  public static java.math.RoundingMode[] values();
  public static final java.math.RoundingMode CEILING;
  public static final java.math.RoundingMode DOWN;
  public static final java.math.RoundingMode FLOOR;
  public static final java.math.RoundingMode HALF_DOWN;
  public static final java.math.RoundingMode HALF_EVEN;
  public static final java.math.RoundingMode HALF_UP;
  public static final java.math.RoundingMode UNNECESSARY;
  public static final java.math.RoundingMode UP;
}
public abstract class java.net.Authenticator
  extends java.lang.Object
{
  public static void setDefault(java.net.Authenticator);
  public static java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String);
  public static java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String, java.net.URL, java.net.Authenticator$RequestorType);
  public static java.net.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String);
  public void <init>();
  protected final int getRequestingPort();
  protected final java.lang.String getRequestingHost();
  protected final java.lang.String getRequestingPrompt();
  protected final java.lang.String getRequestingProtocol();
  protected final java.lang.String getRequestingScheme();
  protected final java.net.InetAddress getRequestingSite();
  protected java.net.Authenticator$RequestorType getRequestorType();
  protected java.net.PasswordAuthentication getPasswordAuthentication();
  protected java.net.URL getRequestingURL();
}
public final class java.net.Authenticator$RequestorType
  extends java.lang.Enum
{
  public static java.net.Authenticator$RequestorType valueOf(java.lang.String);
  public static java.net.Authenticator$RequestorType[] values();
  public static final java.net.Authenticator$RequestorType PROXY;
  public static final java.net.Authenticator$RequestorType SERVER;
}
public class java.net.BindException
  extends java.net.SocketException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.net.CacheRequest
  extends java.lang.Object
{
  public void <init>();
  public abstract void abort();
  public abstract java.io.OutputStream getBody()  throws java.io.IOException;
}
public abstract class java.net.CacheResponse
  extends java.lang.Object
{
  public void <init>();
  public abstract java.io.InputStream getBody()  throws java.io.IOException;
  public abstract java.util.Map getHeaders()  throws java.io.IOException;
}
public class java.net.ConnectException
  extends java.net.SocketException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.net.ContentHandler
  extends java.lang.Object
{
  public void <init>();
  public abstract java.lang.Object getContent(java.net.URLConnection)  throws java.io.IOException;
  public java.lang.Object getContent(java.net.URLConnection, java.lang.Class[])  throws java.io.IOException;
}
public interface java.net.ContentHandlerFactory
{
  public abstract java.net.ContentHandler createContentHandler(java.lang.String);
}
public abstract class java.net.CookieHandler
  extends java.lang.Object
{
  public static void setDefault(java.net.CookieHandler);
  public static java.net.CookieHandler getDefault();
  public void <init>();
  public abstract void put(java.net.URI, java.util.Map)  throws java.io.IOException;
  public abstract java.util.Map get(java.net.URI, java.util.Map)  throws java.io.IOException;
}
public class java.net.CookieManager
  extends java.net.CookieHandler
{
  public void <init>();
  public void <init>(java.net.CookieStore, java.net.CookiePolicy);
  public void put(java.net.URI, java.util.Map)  throws java.io.IOException;
  public void setCookiePolicy(java.net.CookiePolicy);
  public java.net.CookieStore getCookieStore();
  public java.util.Map get(java.net.URI, java.util.Map)  throws java.io.IOException;
}
public interface java.net.CookiePolicy
{
  public abstract boolean shouldAccept(java.net.URI, java.net.HttpCookie);
  public static final java.net.CookiePolicy ACCEPT_ALL;
  public static final java.net.CookiePolicy ACCEPT_NONE;
  public static final java.net.CookiePolicy ACCEPT_ORIGINAL_SERVER;
}
public interface java.net.CookieStore
{
  public abstract boolean remove(java.net.URI, java.net.HttpCookie);
  public abstract boolean removeAll();
  public abstract void add(java.net.URI, java.net.HttpCookie);
  public abstract java.util.List get(java.net.URI);
  public abstract java.util.List getCookies();
  public abstract java.util.List getURIs();
}
public final class java.net.DatagramPacket
  extends java.lang.Object
{
  public void <init>(byte[], int);
  public void <init>(byte[], int, int);
  public void <init>(byte[], int, int, java.net.InetAddress, int);
  public void <init>(byte[], int, int, java.net.SocketAddress)  throws java.net.SocketException;
  public void <init>(byte[], int, java.net.InetAddress, int);
  public void <init>(byte[], int, java.net.SocketAddress)  throws java.net.SocketException;
  public int getLength();
  public int getOffset();
  public int getPort();
  public void setAddress(java.net.InetAddress);
  public void setData(byte[]);
  public void setData(byte[], int, int);
  public void setLength(int);
  public void setPort(int);
  public void setSocketAddress(java.net.SocketAddress);
  public byte[] getData();
  public java.net.InetAddress getAddress();
  public java.net.SocketAddress getSocketAddress();
}
public class java.net.DatagramSocket
  extends java.lang.Object
  implements java.io.Closeable
{
  public static void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)  throws java.io.IOException;
  public void <init>()  throws java.net.SocketException;
  public void <init>(int)  throws java.net.SocketException;
  public void <init>(int, java.net.InetAddress)  throws java.net.SocketException;
  public void <init>(java.net.SocketAddress)  throws java.net.SocketException;
  public boolean getBroadcast()  throws java.net.SocketException;
  public boolean getReuseAddress()  throws java.net.SocketException;
  public boolean isBound();
  public boolean isClosed();
  public boolean isConnected();
  public int getLocalPort();
  public int getPort();
  public int getReceiveBufferSize()  throws java.net.SocketException;
  public int getSendBufferSize()  throws java.net.SocketException;
  public int getSoTimeout()  throws java.net.SocketException;
  public int getTrafficClass()  throws java.net.SocketException;
  public void bind(java.net.SocketAddress)  throws java.net.SocketException;
  public void close();
  public void connect(java.net.InetAddress, int);
  public void connect(java.net.SocketAddress)  throws java.net.SocketException;
  public void disconnect();
  public void receive(java.net.DatagramPacket)  throws java.io.IOException;
  public void send(java.net.DatagramPacket)  throws java.io.IOException;
  public void setBroadcast(boolean)  throws java.net.SocketException;
  public void setReceiveBufferSize(int)  throws java.net.SocketException;
  public void setReuseAddress(boolean)  throws java.net.SocketException;
  public void setSendBufferSize(int)  throws java.net.SocketException;
  public void setSoTimeout(int)  throws java.net.SocketException;
  public void setTrafficClass(int)  throws java.net.SocketException;
  public java.net.InetAddress getInetAddress();
  public java.net.InetAddress getLocalAddress();
  public java.net.SocketAddress getLocalSocketAddress();
  public java.net.SocketAddress getRemoteSocketAddress();
  public java.nio.channels.DatagramChannel getChannel();
  protected void <init>(java.net.DatagramSocketImpl);
}
public abstract class java.net.DatagramSocketImpl
  extends java.lang.Object
  implements java.net.SocketOptions
{
  public void <init>();
  protected abstract byte getTTL()  throws java.io.IOException;
  protected abstract int getTimeToLive()  throws java.io.IOException;
  protected abstract int peek(java.net.InetAddress)  throws java.io.IOException;
  protected abstract int peekData(java.net.DatagramPacket)  throws java.io.IOException;
  protected abstract void bind(int, java.net.InetAddress)  throws java.net.SocketException;
  protected abstract void close();
  protected abstract void create()  throws java.net.SocketException;
  protected abstract void join(java.net.InetAddress)  throws java.io.IOException;
  protected abstract void joinGroup(java.net.SocketAddress, java.net.NetworkInterface)  throws java.io.IOException;
  protected abstract void leave(java.net.InetAddress)  throws java.io.IOException;
  protected abstract void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)  throws java.io.IOException;
  protected abstract void receive(java.net.DatagramPacket)  throws java.io.IOException;
  protected abstract void send(java.net.DatagramPacket)  throws java.io.IOException;
  protected abstract void setTTL(byte)  throws java.io.IOException;
  protected abstract void setTimeToLive(int)  throws java.io.IOException;
  protected int getLocalPort();
  protected void connect(java.net.InetAddress, int)  throws java.net.SocketException;
  protected void disconnect();
  protected java.io.FileDescriptor getFileDescriptor();
  protected int localPort;
  protected java.io.FileDescriptor fd;
}
public interface java.net.DatagramSocketImplFactory
{
  public abstract java.net.DatagramSocketImpl createDatagramSocketImpl();
}
public interface java.net.FileNameMap
{
  public abstract java.lang.String getContentTypeFor(java.lang.String);
}
public final class java.net.HttpCookie
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static boolean domainMatches(java.lang.String, java.lang.String);
  public static java.util.List parse(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean getDiscard();
  public boolean getSecure();
  public boolean hasExpired();
  public boolean isHttpOnly();
  public int getVersion();
  public int hashCode();
  public long getMaxAge();
  public void setComment(java.lang.String);
  public void setCommentURL(java.lang.String);
  public void setDiscard(boolean);
  public void setDomain(java.lang.String);
  public void setHttpOnly(boolean);
  public void setMaxAge(long);
  public void setPath(java.lang.String);
  public void setPortlist(java.lang.String);
  public void setSecure(boolean);
  public void setValue(java.lang.String);
  public void setVersion(int);
  public java.lang.Object clone();
  public java.lang.String getComment();
  public java.lang.String getCommentURL();
  public java.lang.String getDomain();
  public java.lang.String getName();
  public java.lang.String getPath();
  public java.lang.String getPortlist();
  public java.lang.String getValue();
  public java.lang.String toString();
}
public class java.net.HttpRetryException
  extends java.io.IOException
{
  public void <init>(java.lang.String, int);
  public void <init>(java.lang.String, int, java.lang.String);
  public int responseCode();
  public java.lang.String getLocation();
  public java.lang.String getReason();
}
public abstract class java.net.HttpURLConnection
  extends java.net.URLConnection
{
  public static boolean getFollowRedirects();
  public static void setFollowRedirects(boolean);
  public abstract boolean usingProxy();
  public abstract void disconnect();
  public boolean getInstanceFollowRedirects();
  public int getResponseCode()  throws java.io.IOException;
  public long getHeaderFieldDate(java.lang.String, long);
  public void setChunkedStreamingMode(int);
  public void setFixedLengthStreamingMode(int);
  public void setFixedLengthStreamingMode(long);
  public void setInstanceFollowRedirects(boolean);
  public void setRequestMethod(java.lang.String)  throws java.net.ProtocolException;
  public java.io.InputStream getErrorStream();
  public java.lang.String getHeaderField(int);
  public java.lang.String getHeaderFieldKey(int);
  public java.lang.String getRequestMethod();
  public java.lang.String getResponseMessage()  throws java.io.IOException;
  public java.security.Permission getPermission()  throws java.io.IOException;
  protected void <init>(java.net.URL);
  public static final int HTTP_ACCEPTED;
  public static final int HTTP_BAD_GATEWAY;
  public static final int HTTP_BAD_METHOD;
  public static final int HTTP_BAD_REQUEST;
  public static final int HTTP_CLIENT_TIMEOUT;
  public static final int HTTP_CONFLICT;
  public static final int HTTP_CREATED;
  public static final int HTTP_ENTITY_TOO_LARGE;
  public static final int HTTP_FORBIDDEN;
  public static final int HTTP_GATEWAY_TIMEOUT;
  public static final int HTTP_GONE;
  public static final int HTTP_INTERNAL_ERROR;
  public static final int HTTP_LENGTH_REQUIRED;
  public static final int HTTP_MOVED_PERM;
  public static final int HTTP_MOVED_TEMP;
  public static final int HTTP_MULT_CHOICE;
  public static final int HTTP_NOT_ACCEPTABLE;
  public static final int HTTP_NOT_AUTHORITATIVE;
  public static final int HTTP_NOT_FOUND;
  public static final int HTTP_NOT_IMPLEMENTED;
  public static final int HTTP_NOT_MODIFIED;
  public static final int HTTP_NO_CONTENT;
  public static final int HTTP_OK;
  public static final int HTTP_PARTIAL;
  public static final int HTTP_PAYMENT_REQUIRED;
  public static final int HTTP_PRECON_FAILED;
  public static final int HTTP_PROXY_AUTH;
  public static final int HTTP_REQ_TOO_LONG;
  public static final int HTTP_RESET;
  public static final int HTTP_SEE_OTHER;
  public static final int HTTP_SERVER_ERROR;
  public static final int HTTP_UNAUTHORIZED;
  public static final int HTTP_UNAVAILABLE;
  public static final int HTTP_UNSUPPORTED_TYPE;
  public static final int HTTP_USE_PROXY;
  public static final int HTTP_VERSION;
  protected boolean instanceFollowRedirects;
  protected int chunkLength;
  protected int fixedContentLength;
  protected int responseCode;
  protected long fixedContentLengthLong;
  protected java.lang.String method;
  protected java.lang.String responseMessage;
}
public final class java.net.IDN
  extends java.lang.Object
{
  public static java.lang.String toASCII(java.lang.String);
  public static java.lang.String toASCII(java.lang.String, int);
  public static java.lang.String toUnicode(java.lang.String);
  public static java.lang.String toUnicode(java.lang.String, int);
  public static final int ALLOW_UNASSIGNED;
  public static final int USE_STD3_ASCII_RULES;
}
public final class java.net.Inet4Address
  extends java.net.InetAddress
{
  public boolean equals(java.lang.Object);
  public boolean isAnyLocalAddress();
  public boolean isLinkLocalAddress();
  public boolean isLoopbackAddress();
  public boolean isMCGlobal();
  public boolean isMCLinkLocal();
  public boolean isMCNodeLocal();
  public boolean isMCOrgLocal();
  public boolean isMCSiteLocal();
  public boolean isMulticastAddress();
  public boolean isSiteLocalAddress();
  public int hashCode();
  public byte[] getAddress();
  public java.lang.String getHostAddress();
}
public final class java.net.Inet6Address
  extends java.net.InetAddress
{
  public static java.net.Inet6Address getByAddress(java.lang.String, byte[], int)  throws java.net.UnknownHostException;
  public static java.net.Inet6Address getByAddress(java.lang.String, byte[], java.net.NetworkInterface)  throws java.net.UnknownHostException;
  public boolean equals(java.lang.Object);
  public boolean isAnyLocalAddress();
  public boolean isIPv4CompatibleAddress();
  public boolean isLinkLocalAddress();
  public boolean isLoopbackAddress();
  public boolean isMCGlobal();
  public boolean isMCLinkLocal();
  public boolean isMCNodeLocal();
  public boolean isMCOrgLocal();
  public boolean isMCSiteLocal();
  public boolean isMulticastAddress();
  public boolean isSiteLocalAddress();
  public int getScopeId();
  public int hashCode();
  public byte[] getAddress();
  public java.lang.String getHostAddress();
  public java.net.NetworkInterface getScopedInterface();
}
public class java.net.InetAddress
  extends java.lang.Object
  implements java.io.Serializable
{
  public static java.net.InetAddress getByAddress(byte[])  throws java.net.UnknownHostException;
  public static java.net.InetAddress getByAddress(java.lang.String, byte[])  throws java.net.UnknownHostException;
  public static java.net.InetAddress getByName(java.lang.String)  throws java.net.UnknownHostException;
  public static java.net.InetAddress getLocalHost()  throws java.net.UnknownHostException;
  public static java.net.InetAddress getLoopbackAddress();
  public static java.net.InetAddress[] getAllByName(java.lang.String)  throws java.net.UnknownHostException;
  public boolean equals(java.lang.Object);
  public boolean isAnyLocalAddress();
  public boolean isLinkLocalAddress();
  public boolean isLoopbackAddress();
  public boolean isMCGlobal();
  public boolean isMCLinkLocal();
  public boolean isMCNodeLocal();
  public boolean isMCOrgLocal();
  public boolean isMCSiteLocal();
  public boolean isMulticastAddress();
  public boolean isReachable(int)  throws java.io.IOException;
  public boolean isReachable(java.net.NetworkInterface, int, int)  throws java.io.IOException;
  public boolean isSiteLocalAddress();
  public int hashCode();
  public byte[] getAddress();
  public java.lang.String getCanonicalHostName();
  public java.lang.String getHostAddress();
  public java.lang.String getHostName();
  public java.lang.String toString();
}
public class java.net.InetSocketAddress
  extends java.net.SocketAddress
{
  public static java.net.InetSocketAddress createUnresolved(java.lang.String, int);
  public void <init>(int);
  public void <init>(java.lang.String, int);
  public void <init>(java.net.InetAddress, int);
  public final boolean equals(java.lang.Object);
  public final boolean isUnresolved();
  public final int getPort();
  public final int hashCode();
  public final java.lang.String getHostName();
  public final java.lang.String getHostString();
  public final java.net.InetAddress getAddress();
  public java.lang.String toString();
}
public class java.net.InterfaceAddress
  extends java.lang.Object
{
  public boolean equals(java.lang.Object);
  public int hashCode();
  public short getNetworkPrefixLength();
  public java.lang.String toString();
  public java.net.InetAddress getAddress();
  public java.net.InetAddress getBroadcast();
}
public abstract class java.net.JarURLConnection
  extends java.net.URLConnection
{
  public abstract java.util.jar.JarFile getJarFile()  throws java.io.IOException;
  public java.lang.String getEntryName();
  public java.net.URL getJarFileURL();
  public java.security.cert.Certificate[] getCertificates()  throws java.io.IOException;
  public java.util.jar.Attributes getAttributes()  throws java.io.IOException;
  public java.util.jar.Attributes getMainAttributes()  throws java.io.IOException;
  public java.util.jar.JarEntry getJarEntry()  throws java.io.IOException;
  public java.util.jar.Manifest getManifest()  throws java.io.IOException;
  protected void <init>(java.net.URL)  throws java.net.MalformedURLException;
  protected java.net.URLConnection jarFileURLConnection;
}
public class java.net.MalformedURLException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.net.MulticastSocket
  extends java.net.DatagramSocket
{
  public void <init>()  throws java.io.IOException;
  public void <init>(int)  throws java.io.IOException;
  public void <init>(java.net.SocketAddress)  throws java.io.IOException;
  public boolean getLoopbackMode()  throws java.net.SocketException;
  public byte getTTL()  throws java.io.IOException;
  public int getTimeToLive()  throws java.io.IOException;
  public void joinGroup(java.net.InetAddress)  throws java.io.IOException;
  public void joinGroup(java.net.SocketAddress, java.net.NetworkInterface)  throws java.io.IOException;
  public void leaveGroup(java.net.InetAddress)  throws java.io.IOException;
  public void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)  throws java.io.IOException;
  public void send(java.net.DatagramPacket, byte)  throws java.io.IOException;
  public void setInterface(java.net.InetAddress)  throws java.net.SocketException;
  public void setLoopbackMode(boolean)  throws java.net.SocketException;
  public void setNetworkInterface(java.net.NetworkInterface)  throws java.net.SocketException;
  public void setTTL(byte)  throws java.io.IOException;
  public void setTimeToLive(int)  throws java.io.IOException;
  public java.net.InetAddress getInterface()  throws java.net.SocketException;
  public java.net.NetworkInterface getNetworkInterface()  throws java.net.SocketException;
}
public final class java.net.NetPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public final class java.net.NetworkInterface
  extends java.lang.Object
{
  public static java.net.NetworkInterface getByIndex(int)  throws java.net.SocketException;
  public static java.net.NetworkInterface getByInetAddress(java.net.InetAddress)  throws java.net.SocketException;
  public static java.net.NetworkInterface getByName(java.lang.String)  throws java.net.SocketException;
  public static java.util.Enumeration getNetworkInterfaces()  throws java.net.SocketException;
  public boolean equals(java.lang.Object);
  public boolean isLoopback()  throws java.net.SocketException;
  public boolean isPointToPoint()  throws java.net.SocketException;
  public boolean isUp()  throws java.net.SocketException;
  public boolean isVirtual();
  public boolean supportsMulticast()  throws java.net.SocketException;
  public int getIndex();
  public int getMTU()  throws java.net.SocketException;
  public int hashCode();
  public byte[] getHardwareAddress()  throws java.net.SocketException;
  public java.lang.String getDisplayName();
  public java.lang.String getName();
  public java.lang.String toString();
  public java.net.NetworkInterface getParent();
  public java.util.Enumeration getInetAddresses();
  public java.util.Enumeration getSubInterfaces();
  public java.util.List getInterfaceAddresses();
}
public class java.net.NoRouteToHostException
  extends java.net.SocketException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class java.net.PasswordAuthentication
  extends java.lang.Object
{
  public void <init>(java.lang.String, char[]);
  public char[] getPassword();
  public java.lang.String getUserName();
}
public class java.net.PortUnreachableException
  extends java.net.SocketException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.net.ProtocolException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.net.ProtocolFamily
{
  public abstract java.lang.String name();
}
public class java.net.Proxy
  extends java.lang.Object
{
  public void <init>(java.net.Proxy$Type, java.net.SocketAddress);
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String toString();
  public java.net.Proxy$Type type();
  public java.net.SocketAddress address();
  public static final java.net.Proxy NO_PROXY;
}
public final class java.net.Proxy$Type
  extends java.lang.Enum
{
  public static java.net.Proxy$Type valueOf(java.lang.String);
  public static java.net.Proxy$Type[] values();
  public static final java.net.Proxy$Type DIRECT;
  public static final java.net.Proxy$Type HTTP;
  public static final java.net.Proxy$Type SOCKS;
}
public abstract class java.net.ProxySelector
  extends java.lang.Object
{
  public static void setDefault(java.net.ProxySelector);
  public static java.net.ProxySelector getDefault();
  public void <init>();
  public abstract void connectFailed(java.net.URI, java.net.SocketAddress, java.io.IOException);
  public abstract java.util.List select(java.net.URI);
}
public abstract class java.net.ResponseCache
  extends java.lang.Object
{
  public static void setDefault(java.net.ResponseCache);
  public static java.net.ResponseCache getDefault();
  public void <init>();
  public abstract java.net.CacheRequest put(java.net.URI, java.net.URLConnection)  throws java.io.IOException;
  public abstract java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map)  throws java.io.IOException;
}
public abstract class java.net.SecureCacheResponse
  extends java.net.CacheResponse
{
  public void <init>();
  public abstract java.lang.String getCipherSuite();
  public abstract java.security.Principal getLocalPrincipal();
  public abstract java.security.Principal getPeerPrincipal()  throws javax.net.ssl.SSLPeerUnverifiedException;
  public abstract java.util.List getLocalCertificateChain();
  public abstract java.util.List getServerCertificateChain()  throws javax.net.ssl.SSLPeerUnverifiedException;
}
public class java.net.ServerSocket
  extends java.lang.Object
  implements java.io.Closeable
{
  public static void setSocketFactory(java.net.SocketImplFactory)  throws java.io.IOException;
  public void <init>()  throws java.io.IOException;
  public void <init>(int)  throws java.io.IOException;
  public void <init>(int, int)  throws java.io.IOException;
  public void <init>(int, int, java.net.InetAddress)  throws java.io.IOException;
  public boolean getReuseAddress()  throws java.net.SocketException;
  public boolean isBound();
  public boolean isClosed();
  public int getLocalPort();
  public int getReceiveBufferSize()  throws java.net.SocketException;
  public int getSoTimeout()  throws java.io.IOException;
  public void bind(java.net.SocketAddress)  throws java.io.IOException;
  public void bind(java.net.SocketAddress, int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void setPerformancePreferences(int, int, int);
  public void setReceiveBufferSize(int)  throws java.net.SocketException;
  public void setReuseAddress(boolean)  throws java.net.SocketException;
  public void setSoTimeout(int)  throws java.net.SocketException;
  public java.lang.String toString();
  public java.net.InetAddress getInetAddress();
  public java.net.Socket accept()  throws java.io.IOException;
  public java.net.SocketAddress getLocalSocketAddress();
  public java.nio.channels.ServerSocketChannel getChannel();
  protected final void implAccept(java.net.Socket)  throws java.io.IOException;
}
public class java.net.Socket
  extends java.lang.Object
  implements java.io.Closeable
{
  public static void setSocketImplFactory(java.net.SocketImplFactory)  throws java.io.IOException;
  public void <init>();
  public void <init>(java.lang.String, int)  throws java.io.IOException, java.net.UnknownHostException;
  public void <init>(java.lang.String, int, boolean)  throws java.io.IOException;
  public void <init>(java.lang.String, int, java.net.InetAddress, int)  throws java.io.IOException;
  public void <init>(java.net.InetAddress, int)  throws java.io.IOException;
  public void <init>(java.net.InetAddress, int, boolean)  throws java.io.IOException;
  public void <init>(java.net.InetAddress, int, java.net.InetAddress, int)  throws java.io.IOException;
  public void <init>(java.net.Proxy);
  public boolean getKeepAlive()  throws java.net.SocketException;
  public boolean getOOBInline()  throws java.net.SocketException;
  public boolean getReuseAddress()  throws java.net.SocketException;
  public boolean getTcpNoDelay()  throws java.net.SocketException;
  public boolean isBound();
  public boolean isClosed();
  public boolean isConnected();
  public boolean isInputShutdown();
  public boolean isOutputShutdown();
  public int getLocalPort();
  public int getPort();
  public int getReceiveBufferSize()  throws java.net.SocketException;
  public int getSendBufferSize()  throws java.net.SocketException;
  public int getSoLinger()  throws java.net.SocketException;
  public int getSoTimeout()  throws java.net.SocketException;
  public int getTrafficClass()  throws java.net.SocketException;
  public void bind(java.net.SocketAddress)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void connect(java.net.SocketAddress)  throws java.io.IOException;
  public void connect(java.net.SocketAddress, int)  throws java.io.IOException;
  public void sendUrgentData(int)  throws java.io.IOException;
  public void setKeepAlive(boolean)  throws java.net.SocketException;
  public void setOOBInline(boolean)  throws java.net.SocketException;
  public void setPerformancePreferences(int, int, int);
  public void setReceiveBufferSize(int)  throws java.net.SocketException;
  public void setReuseAddress(boolean)  throws java.net.SocketException;
  public void setSendBufferSize(int)  throws java.net.SocketException;
  public void setSoLinger(boolean, int)  throws java.net.SocketException;
  public void setSoTimeout(int)  throws java.net.SocketException;
  public void setTcpNoDelay(boolean)  throws java.net.SocketException;
  public void setTrafficClass(int)  throws java.net.SocketException;
  public void shutdownInput()  throws java.io.IOException;
  public void shutdownOutput()  throws java.io.IOException;
  public java.io.InputStream getInputStream()  throws java.io.IOException;
  public java.io.OutputStream getOutputStream()  throws java.io.IOException;
  public java.lang.String toString();
  public java.net.InetAddress getInetAddress();
  public java.net.InetAddress getLocalAddress();
  public java.net.SocketAddress getLocalSocketAddress();
  public java.net.SocketAddress getRemoteSocketAddress();
  public java.nio.channels.SocketChannel getChannel();
  protected void <init>(java.net.SocketImpl)  throws java.net.SocketException;
}
public abstract class java.net.SocketAddress
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
}
public class java.net.SocketException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.net.SocketImpl
  extends java.lang.Object
  implements java.net.SocketOptions
{
  public void <init>();
  public java.lang.String toString();
  protected abstract int available()  throws java.io.IOException;
  protected abstract void accept(java.net.SocketImpl)  throws java.io.IOException;
  protected abstract void bind(java.net.InetAddress, int)  throws java.io.IOException;
  protected abstract void close()  throws java.io.IOException;
  protected abstract void connect(java.lang.String, int)  throws java.io.IOException;
  protected abstract void connect(java.net.InetAddress, int)  throws java.io.IOException;
  protected abstract void connect(java.net.SocketAddress, int)  throws java.io.IOException;
  protected abstract void create(boolean)  throws java.io.IOException;
  protected abstract void listen(int)  throws java.io.IOException;
  protected abstract void sendUrgentData(int)  throws java.io.IOException;
  protected abstract java.io.InputStream getInputStream()  throws java.io.IOException;
  protected abstract java.io.OutputStream getOutputStream()  throws java.io.IOException;
  protected boolean supportsUrgentData();
  protected int getLocalPort();
  protected int getPort();
  protected void setPerformancePreferences(int, int, int);
  protected void shutdownInput()  throws java.io.IOException;
  protected void shutdownOutput()  throws java.io.IOException;
  protected java.io.FileDescriptor getFileDescriptor();
  protected java.net.InetAddress getInetAddress();
  protected int localport;
  protected int port;
  protected java.io.FileDescriptor fd;
  protected java.net.InetAddress address;
}
public interface java.net.SocketImplFactory
{
  public abstract java.net.SocketImpl createSocketImpl();
}
public interface java.net.SocketOption
{
  public abstract java.lang.Class type();
  public abstract java.lang.String name();
}
public interface java.net.SocketOptions
{
  public abstract void setOption(int, java.lang.Object)  throws java.net.SocketException;
  public abstract java.lang.Object getOption(int)  throws java.net.SocketException;
  public static final int IP_MULTICAST_IF2;
  public static final int IP_MULTICAST_IF;
  public static final int IP_MULTICAST_LOOP;
  public static final int IP_TOS;
  public static final int SO_BINDADDR;
  public static final int SO_BROADCAST;
  public static final int SO_KEEPALIVE;
  public static final int SO_LINGER;
  public static final int SO_OOBINLINE;
  public static final int SO_RCVBUF;
  public static final int SO_REUSEADDR;
  public static final int SO_SNDBUF;
  public static final int SO_TIMEOUT;
  public static final int TCP_NODELAY;
}
public final class java.net.SocketPermission
  extends java.security.Permission
  implements java.io.Serializable
{
  public void <init>(java.lang.String, java.lang.String);
  public boolean implies(java.security.Permission);
  public java.lang.String getActions();
}
public class java.net.SocketTimeoutException
  extends java.io.InterruptedIOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class java.net.StandardProtocolFamily
  extends java.lang.Enum
  implements java.net.ProtocolFamily
{
  public static java.net.StandardProtocolFamily valueOf(java.lang.String);
  public static java.net.StandardProtocolFamily[] values();
  public static final java.net.StandardProtocolFamily INET6;
  public static final java.net.StandardProtocolFamily INET;
}
public final class java.net.StandardSocketOptions
  extends java.lang.Object
{
  public static final java.net.SocketOption IP_MULTICAST_IF;
  public static final java.net.SocketOption IP_MULTICAST_LOOP;
  public static final java.net.SocketOption IP_MULTICAST_TTL;
  public static final java.net.SocketOption IP_TOS;
  public static final java.net.SocketOption SO_BROADCAST;
  public static final java.net.SocketOption SO_KEEPALIVE;
  public static final java.net.SocketOption SO_LINGER;
  public static final java.net.SocketOption SO_RCVBUF;
  public static final java.net.SocketOption SO_REUSEADDR;
  public static final java.net.SocketOption SO_SNDBUF;
  public static final java.net.SocketOption TCP_NODELAY;
}
public final class java.net.URI
  extends java.lang.Object
  implements java.lang.Comparable, java.io.Serializable
{
  public static java.net.URI create(java.lang.String);
  public void <init>(java.lang.String)  throws java.net.URISyntaxException;
  public void <init>(java.lang.String, java.lang.String, java.lang.String)  throws java.net.URISyntaxException;
  public void <init>(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)  throws java.net.URISyntaxException;
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.net.URISyntaxException;
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.net.URISyntaxException;
  public boolean equals(java.lang.Object);
  public boolean isAbsolute();
  public boolean isOpaque();
  public int compareTo(java.lang.Object);
  public int compareTo(java.net.URI);
  public int getPort();
  public int hashCode();
  public java.lang.String getAuthority();
  public java.lang.String getFragment();
  public java.lang.String getHost();
  public java.lang.String getPath();
  public java.lang.String getQuery();
  public java.lang.String getRawAuthority();
  public java.lang.String getRawFragment();
  public java.lang.String getRawPath();
  public java.lang.String getRawQuery();
  public java.lang.String getRawSchemeSpecificPart();
  public java.lang.String getRawUserInfo();
  public java.lang.String getScheme();
  public java.lang.String getSchemeSpecificPart();
  public java.lang.String getUserInfo();
  public java.lang.String toASCIIString();
  public java.lang.String toString();
  public java.net.URI normalize();
  public java.net.URI parseServerAuthority()  throws java.net.URISyntaxException;
  public java.net.URI relativize(java.net.URI);
  public java.net.URI resolve(java.lang.String);
  public java.net.URI resolve(java.net.URI);
  public java.net.URL toURL()  throws java.net.MalformedURLException;
}
public class java.net.URISyntaxException
  extends java.lang.Exception
{
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public int getIndex();
  public java.lang.String getInput();
  public java.lang.String getMessage();
  public java.lang.String getReason();
}
public final class java.net.URL
  extends java.lang.Object
  implements java.io.Serializable
{
  public static void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory);
  public void <init>(java.lang.String)  throws java.net.MalformedURLException;
  public void <init>(java.lang.String, java.lang.String, int, java.lang.String)  throws java.net.MalformedURLException;
  public void <init>(java.lang.String, java.lang.String, int, java.lang.String, java.net.URLStreamHandler)  throws java.net.MalformedURLException;
  public void <init>(java.lang.String, java.lang.String, java.lang.String)  throws java.net.MalformedURLException;
  public void <init>(java.net.URL, java.lang.String)  throws java.net.MalformedURLException;
  public void <init>(java.net.URL, java.lang.String, java.net.URLStreamHandler)  throws java.net.MalformedURLException;
  public final java.io.InputStream openStream()  throws java.io.IOException;
  public final java.lang.Object getContent()  throws java.io.IOException;
  public final java.lang.Object getContent(java.lang.Class[])  throws java.io.IOException;
  public boolean equals(java.lang.Object);
  public boolean sameFile(java.net.URL);
  public int getDefaultPort();
  public int getPort();
  public int hashCode();
  public java.lang.String getAuthority();
  public java.lang.String getFile();
  public java.lang.String getHost();
  public java.lang.String getPath();
  public java.lang.String getProtocol();
  public java.lang.String getQuery();
  public java.lang.String getRef();
  public java.lang.String getUserInfo();
  public java.lang.String toExternalForm();
  public java.lang.String toString();
  public java.net.URI toURI()  throws java.net.URISyntaxException;
  public java.net.URLConnection openConnection()  throws java.io.IOException;
  public java.net.URLConnection openConnection(java.net.Proxy)  throws java.io.IOException;
  protected void set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String);
  protected void set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
}
public class java.net.URLClassLoader
  extends java.security.SecureClassLoader
  implements java.io.Closeable
{
  public static java.net.URLClassLoader newInstance(java.net.URL[]);
  public static java.net.URLClassLoader newInstance(java.net.URL[], java.lang.ClassLoader);
  public void <init>(java.net.URL[]);
  public void <init>(java.net.URL[], java.lang.ClassLoader);
  public void <init>(java.net.URL[], java.lang.ClassLoader, java.net.URLStreamHandlerFactory);
  public void close()  throws java.io.IOException;
  public java.io.InputStream getResourceAsStream(java.lang.String);
  public java.net.URL findResource(java.lang.String);
  public java.net.URL[] getURLs();
  public java.util.Enumeration findResources(java.lang.String)  throws java.io.IOException;
  protected void addURL(java.net.URL);
  protected java.lang.Class findClass(java.lang.String)  throws java.lang.ClassNotFoundException;
  protected java.lang.Package definePackage(java.lang.String, java.util.jar.Manifest, java.net.URL)  throws java.lang.IllegalArgumentException;
  protected java.security.PermissionCollection getPermissions(java.security.CodeSource);
}
public abstract class java.net.URLConnection
  extends java.lang.Object
{
  public static boolean getDefaultAllowUserInteraction();
  public static void setContentHandlerFactory(java.net.ContentHandlerFactory);
  public static void setDefaultAllowUserInteraction(boolean);
  public static void setDefaultRequestProperty(java.lang.String, java.lang.String);
  public static void setFileNameMap(java.net.FileNameMap);
  public static java.lang.String getDefaultRequestProperty(java.lang.String);
  public static java.lang.String guessContentTypeFromName(java.lang.String);
  public static java.lang.String guessContentTypeFromStream(java.io.InputStream)  throws java.io.IOException;
  public static java.net.FileNameMap getFileNameMap();
  public abstract void connect()  throws java.io.IOException;
  public boolean getAllowUserInteraction();
  public boolean getDefaultUseCaches();
  public boolean getDoInput();
  public boolean getDoOutput();
  public boolean getUseCaches();
  public int getConnectTimeout();
  public int getContentLength();
  public int getHeaderFieldInt(java.lang.String, int);
  public int getReadTimeout();
  public long getContentLengthLong();
  public long getDate();
  public long getExpiration();
  public long getHeaderFieldDate(java.lang.String, long);
  public long getHeaderFieldLong(java.lang.String, long);
  public long getIfModifiedSince();
  public long getLastModified();
  public void addRequestProperty(java.lang.String, java.lang.String);
  public void setAllowUserInteraction(boolean);
  public void setConnectTimeout(int);
  public void setDefaultUseCaches(boolean);
  public void setDoInput(boolean);
  public void setDoOutput(boolean);
  public void setIfModifiedSince(long);
  public void setReadTimeout(int);
  public void setRequestProperty(java.lang.String, java.lang.String);
  public void setUseCaches(boolean);
  public java.io.InputStream getInputStream()  throws java.io.IOException;
  public java.io.OutputStream getOutputStream()  throws java.io.IOException;
  public java.lang.Object getContent()  throws java.io.IOException;
  public java.lang.Object getContent(java.lang.Class[])  throws java.io.IOException;
  public java.lang.String getContentEncoding();
  public java.lang.String getContentType();
  public java.lang.String getHeaderField(int);
  public java.lang.String getHeaderField(java.lang.String);
  public java.lang.String getHeaderFieldKey(int);
  public java.lang.String getRequestProperty(java.lang.String);
  public java.lang.String toString();
  public java.net.URL getURL();
  public java.security.Permission getPermission()  throws java.io.IOException;
  public java.util.Map getHeaderFields();
  public java.util.Map getRequestProperties();
  protected void <init>(java.net.URL);
  protected boolean allowUserInteraction;
  protected boolean connected;
  protected boolean doInput;
  protected boolean doOutput;
  protected boolean useCaches;
  protected long ifModifiedSince;
  protected java.net.URL url;
}
public class java.net.URLDecoder
  extends java.lang.Object
{
  public static java.lang.String decode(java.lang.String);
  public static java.lang.String decode(java.lang.String, java.lang.String)  throws java.io.UnsupportedEncodingException;
  public void <init>();
}
public class java.net.URLEncoder
  extends java.lang.Object
{
  public static java.lang.String encode(java.lang.String);
  public static java.lang.String encode(java.lang.String, java.lang.String)  throws java.io.UnsupportedEncodingException;
}
public abstract class java.net.URLStreamHandler
  extends java.lang.Object
{
  public void <init>();
  protected abstract java.net.URLConnection openConnection(java.net.URL)  throws java.io.IOException;
  protected boolean equals(java.net.URL, java.net.URL);
  protected boolean hostsEqual(java.net.URL, java.net.URL);
  protected boolean sameFile(java.net.URL, java.net.URL);
  protected int getDefaultPort();
  protected int hashCode(java.net.URL);
  protected void parseURL(java.net.URL, java.lang.String, int, int);
  protected void setURL(java.net.URL, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String);
  protected void setURL(java.net.URL, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  protected java.lang.String toExternalForm(java.net.URL);
  protected java.net.InetAddress getHostAddress(java.net.URL);
  protected java.net.URLConnection openConnection(java.net.URL, java.net.Proxy)  throws java.io.IOException;
}
public interface java.net.URLStreamHandlerFactory
{
  public abstract java.net.URLStreamHandler createURLStreamHandler(java.lang.String);
}
public class java.net.UnknownHostException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.net.UnknownServiceException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.nio.Buffer
  extends java.lang.Object
{
  public final boolean hasRemaining();
  public final int capacity();
  public final int limit();
  public final int position();
  public final int remaining();
  public final java.nio.Buffer clear();
  public final java.nio.Buffer flip();
  public final java.nio.Buffer limit(int);
  public final java.nio.Buffer mark();
  public final java.nio.Buffer position(int);
  public final java.nio.Buffer reset();
  public final java.nio.Buffer rewind();
  public abstract boolean hasArray();
  public abstract boolean isDirect();
  public abstract boolean isReadOnly();
  public abstract int arrayOffset();
  public abstract java.lang.Object array();
}
public class java.nio.BufferOverflowException
  extends java.lang.RuntimeException
{
  public void <init>();
}
public class java.nio.BufferUnderflowException
  extends java.lang.RuntimeException
{
  public void <init>();
}
public abstract class java.nio.ByteBuffer
  extends java.nio.Buffer
  implements java.lang.Comparable
{
  public static java.nio.ByteBuffer allocate(int);
  public static java.nio.ByteBuffer allocateDirect(int);
  public static java.nio.ByteBuffer wrap(byte[]);
  public static java.nio.ByteBuffer wrap(byte[], int, int);
  public final boolean hasArray();
  public final int arrayOffset();
  public final byte[] array();
  public final java.nio.ByteBuffer order(java.nio.ByteOrder);
  public final java.nio.ByteBuffer put(byte[]);
  public final java.nio.ByteOrder order();
  public abstract boolean isDirect();
  public abstract byte get();
  public abstract byte get(int);
  public abstract char getChar();
  public abstract char getChar(int);
  public abstract double getDouble();
  public abstract double getDouble(int);
  public abstract float getFloat();
  public abstract float getFloat(int);
  public abstract int getInt();
  public abstract int getInt(int);
  public abstract long getLong();
  public abstract long getLong(int);
  public abstract short getShort();
  public abstract short getShort(int);
  public abstract java.nio.ByteBuffer asReadOnlyBuffer();
  public abstract java.nio.ByteBuffer compact();
  public abstract java.nio.ByteBuffer duplicate();
  public abstract java.nio.ByteBuffer put(byte);
  public abstract java.nio.ByteBuffer put(int, byte);
  public abstract java.nio.ByteBuffer putChar(char);
  public abstract java.nio.ByteBuffer putChar(int, char);
  public abstract java.nio.ByteBuffer putDouble(double);
  public abstract java.nio.ByteBuffer putDouble(int, double);
  public abstract java.nio.ByteBuffer putFloat(float);
  public abstract java.nio.ByteBuffer putFloat(int, float);
  public abstract java.nio.ByteBuffer putInt(int);
  public abstract java.nio.ByteBuffer putInt(int, int);
  public abstract java.nio.ByteBuffer putLong(int, long);
  public abstract java.nio.ByteBuffer putLong(long);
  public abstract java.nio.ByteBuffer putShort(int, short);
  public abstract java.nio.ByteBuffer putShort(short);
  public abstract java.nio.ByteBuffer slice();
  public abstract java.nio.CharBuffer asCharBuffer();
  public abstract java.nio.DoubleBuffer asDoubleBuffer();
  public abstract java.nio.FloatBuffer asFloatBuffer();
  public abstract java.nio.IntBuffer asIntBuffer();
  public abstract java.nio.LongBuffer asLongBuffer();
  public abstract java.nio.ShortBuffer asShortBuffer();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.nio.ByteBuffer);
  public int hashCode();
  public java.lang.Object array();
  public java.lang.String toString();
  public java.nio.ByteBuffer get(byte[]);
  public java.nio.ByteBuffer get(byte[], int, int);
  public java.nio.ByteBuffer put(byte[], int, int);
  public java.nio.ByteBuffer put(java.nio.ByteBuffer);
}
public final class java.nio.ByteOrder
  extends java.lang.Object
{
  public static java.nio.ByteOrder nativeOrder();
  public java.lang.String toString();
  public static final java.nio.ByteOrder BIG_ENDIAN;
  public static final java.nio.ByteOrder LITTLE_ENDIAN;
}
public abstract class java.nio.CharBuffer
  extends java.nio.Buffer
  implements java.lang.Comparable, java.lang.Appendable, java.lang.CharSequence, java.lang.Readable
{
  public static java.nio.CharBuffer allocate(int);
  public static java.nio.CharBuffer wrap(char[]);
  public static java.nio.CharBuffer wrap(char[], int, int);
  public static java.nio.CharBuffer wrap(java.lang.CharSequence);
  public static java.nio.CharBuffer wrap(java.lang.CharSequence, int, int);
  public final boolean hasArray();
  public final char charAt(int);
  public final int arrayOffset();
  public final int length();
  public final char[] array();
  public final java.nio.CharBuffer put(char[]);
  public final java.nio.CharBuffer put(java.lang.String);
  public abstract boolean isDirect();
  public abstract char get();
  public abstract char get(int);
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.CharBuffer asReadOnlyBuffer();
  public abstract java.nio.CharBuffer compact();
  public abstract java.nio.CharBuffer duplicate();
  public abstract java.nio.CharBuffer put(char);
  public abstract java.nio.CharBuffer put(int, char);
  public abstract java.nio.CharBuffer slice();
  public abstract java.nio.CharBuffer subSequence(int, int);
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.nio.CharBuffer);
  public int hashCode();
  public int read(java.nio.CharBuffer)  throws java.io.IOException;
  public java.lang.Appendable append(char)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence)  throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int)  throws java.io.IOException;
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.Object array();
  public java.lang.String toString();
  public java.nio.CharBuffer append(char);
  public java.nio.CharBuffer append(java.lang.CharSequence);
  public java.nio.CharBuffer append(java.lang.CharSequence, int, int);
  public java.nio.CharBuffer get(char[]);
  public java.nio.CharBuffer get(char[], int, int);
  public java.nio.CharBuffer put(char[], int, int);
  public java.nio.CharBuffer put(java.lang.String, int, int);
  public java.nio.CharBuffer put(java.nio.CharBuffer);
  public java.util.stream.IntStream chars();
}
public abstract class java.nio.DoubleBuffer
  extends java.nio.Buffer
  implements java.lang.Comparable
{
  public static java.nio.DoubleBuffer allocate(int);
  public static java.nio.DoubleBuffer wrap(double[]);
  public static java.nio.DoubleBuffer wrap(double[], int, int);
  public final boolean hasArray();
  public final int arrayOffset();
  public final double[] array();
  public final java.nio.DoubleBuffer put(double[]);
  public abstract boolean isDirect();
  public abstract double get();
  public abstract double get(int);
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.DoubleBuffer asReadOnlyBuffer();
  public abstract java.nio.DoubleBuffer compact();
  public abstract java.nio.DoubleBuffer duplicate();
  public abstract java.nio.DoubleBuffer put(double);
  public abstract java.nio.DoubleBuffer put(int, double);
  public abstract java.nio.DoubleBuffer slice();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.nio.DoubleBuffer);
  public int hashCode();
  public java.lang.Object array();
  public java.lang.String toString();
  public java.nio.DoubleBuffer get(double[]);
  public java.nio.DoubleBuffer get(double[], int, int);
  public java.nio.DoubleBuffer put(double[], int, int);
  public java.nio.DoubleBuffer put(java.nio.DoubleBuffer);
}
public abstract class java.nio.FloatBuffer
  extends java.nio.Buffer
  implements java.lang.Comparable
{
  public static java.nio.FloatBuffer allocate(int);
  public static java.nio.FloatBuffer wrap(float[]);
  public static java.nio.FloatBuffer wrap(float[], int, int);
  public final boolean hasArray();
  public final int arrayOffset();
  public final float[] array();
  public final java.nio.FloatBuffer put(float[]);
  public abstract boolean isDirect();
  public abstract float get();
  public abstract float get(int);
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.FloatBuffer asReadOnlyBuffer();
  public abstract java.nio.FloatBuffer compact();
  public abstract java.nio.FloatBuffer duplicate();
  public abstract java.nio.FloatBuffer put(float);
  public abstract java.nio.FloatBuffer put(int, float);
  public abstract java.nio.FloatBuffer slice();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.nio.FloatBuffer);
  public int hashCode();
  public java.lang.Object array();
  public java.lang.String toString();
  public java.nio.FloatBuffer get(float[]);
  public java.nio.FloatBuffer get(float[], int, int);
  public java.nio.FloatBuffer put(float[], int, int);
  public java.nio.FloatBuffer put(java.nio.FloatBuffer);
}
public abstract class java.nio.IntBuffer
  extends java.nio.Buffer
  implements java.lang.Comparable
{
  public static java.nio.IntBuffer allocate(int);
  public static java.nio.IntBuffer wrap(int[]);
  public static java.nio.IntBuffer wrap(int[], int, int);
  public final boolean hasArray();
  public final int arrayOffset();
  public final int[] array();
  public final java.nio.IntBuffer put(int[]);
  public abstract boolean isDirect();
  public abstract int get();
  public abstract int get(int);
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.IntBuffer asReadOnlyBuffer();
  public abstract java.nio.IntBuffer compact();
  public abstract java.nio.IntBuffer duplicate();
  public abstract java.nio.IntBuffer put(int);
  public abstract java.nio.IntBuffer put(int, int);
  public abstract java.nio.IntBuffer slice();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.nio.IntBuffer);
  public int hashCode();
  public java.lang.Object array();
  public java.lang.String toString();
  public java.nio.IntBuffer get(int[]);
  public java.nio.IntBuffer get(int[], int, int);
  public java.nio.IntBuffer put(int[], int, int);
  public java.nio.IntBuffer put(java.nio.IntBuffer);
}
public class java.nio.InvalidMarkException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public abstract class java.nio.LongBuffer
  extends java.nio.Buffer
  implements java.lang.Comparable
{
  public static java.nio.LongBuffer allocate(int);
  public static java.nio.LongBuffer wrap(long[]);
  public static java.nio.LongBuffer wrap(long[], int, int);
  public final boolean hasArray();
  public final int arrayOffset();
  public final java.nio.LongBuffer put(long[]);
  public final long[] array();
  public abstract boolean isDirect();
  public abstract long get();
  public abstract long get(int);
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.LongBuffer asReadOnlyBuffer();
  public abstract java.nio.LongBuffer compact();
  public abstract java.nio.LongBuffer duplicate();
  public abstract java.nio.LongBuffer put(int, long);
  public abstract java.nio.LongBuffer put(long);
  public abstract java.nio.LongBuffer slice();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.nio.LongBuffer);
  public int hashCode();
  public java.lang.Object array();
  public java.lang.String toString();
  public java.nio.LongBuffer get(long[]);
  public java.nio.LongBuffer get(long[], int, int);
  public java.nio.LongBuffer put(java.nio.LongBuffer);
  public java.nio.LongBuffer put(long[], int, int);
}
public abstract class java.nio.MappedByteBuffer
  extends java.nio.ByteBuffer
{
  public final boolean isLoaded();
  public final java.nio.MappedByteBuffer force();
  public final java.nio.MappedByteBuffer load();
}
public class java.nio.ReadOnlyBufferException
  extends java.lang.UnsupportedOperationException
{
  public void <init>();
}
public abstract class java.nio.ShortBuffer
  extends java.nio.Buffer
  implements java.lang.Comparable
{
  public static java.nio.ShortBuffer allocate(int);
  public static java.nio.ShortBuffer wrap(short[]);
  public static java.nio.ShortBuffer wrap(short[], int, int);
  public final boolean hasArray();
  public final int arrayOffset();
  public final java.nio.ShortBuffer put(short[]);
  public final short[] array();
  public abstract boolean isDirect();
  public abstract short get();
  public abstract short get(int);
  public abstract java.nio.ByteOrder order();
  public abstract java.nio.ShortBuffer asReadOnlyBuffer();
  public abstract java.nio.ShortBuffer compact();
  public abstract java.nio.ShortBuffer duplicate();
  public abstract java.nio.ShortBuffer put(int, short);
  public abstract java.nio.ShortBuffer put(short);
  public abstract java.nio.ShortBuffer slice();
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.nio.ShortBuffer);
  public int hashCode();
  public java.lang.Object array();
  public java.lang.String toString();
  public java.nio.ShortBuffer get(short[]);
  public java.nio.ShortBuffer get(short[], int, int);
  public java.nio.ShortBuffer put(java.nio.ShortBuffer);
  public java.nio.ShortBuffer put(short[], int, int);
}
public class java.nio.channels.AlreadyBoundException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.AlreadyConnectedException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.AsynchronousCloseException
  extends java.nio.channels.ClosedChannelException
{
  public void <init>();
}
public interface java.nio.channels.ByteChannel
  extends java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel
{
}
public class java.nio.channels.CancelledKeyException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public interface java.nio.channels.Channel
  extends java.io.Closeable
{
  public abstract boolean isOpen();
  public abstract void close()  throws java.io.IOException;
}
public final class java.nio.channels.Channels
  extends java.lang.Object
{
  public static java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel);
  public static java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel);
  public static java.io.Reader newReader(java.nio.channels.ReadableByteChannel, java.lang.String);
  public static java.io.Reader newReader(java.nio.channels.ReadableByteChannel, java.nio.charset.CharsetDecoder, int);
  public static java.io.Writer newWriter(java.nio.channels.WritableByteChannel, java.lang.String);
  public static java.io.Writer newWriter(java.nio.channels.WritableByteChannel, java.nio.charset.CharsetEncoder, int);
  public static java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream);
  public static java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream);
}
public class java.nio.channels.ClosedByInterruptException
  extends java.nio.channels.AsynchronousCloseException
{
  public void <init>();
}
public class java.nio.channels.ClosedChannelException
  extends java.io.IOException
{
  public void <init>();
}
public class java.nio.channels.ClosedSelectorException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.ConnectionPendingException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public abstract class java.nio.channels.DatagramChannel
  extends java.nio.channels.spi.AbstractSelectableChannel
  implements java.nio.channels.ByteChannel, java.nio.channels.ScatteringByteChannel, java.nio.channels.GatheringByteChannel, java.nio.channels.NetworkChannel
{
  public static java.nio.channels.DatagramChannel open()  throws java.io.IOException;
  public static java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)  throws java.io.IOException;
  public final int validOps();
  public final long read(java.nio.ByteBuffer[])  throws java.io.IOException;
  public final long write(java.nio.ByteBuffer[])  throws java.io.IOException;
  public abstract boolean isConnected();
  public abstract int read(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract int send(java.nio.ByteBuffer, java.net.SocketAddress)  throws java.io.IOException;
  public abstract int write(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract long read(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
  public abstract long write(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
  public abstract java.net.DatagramSocket socket();
  public abstract java.net.SocketAddress getRemoteAddress()  throws java.io.IOException;
  public abstract java.net.SocketAddress receive(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract java.nio.channels.DatagramChannel bind(java.net.SocketAddress)  throws java.io.IOException;
  public abstract java.nio.channels.DatagramChannel connect(java.net.SocketAddress)  throws java.io.IOException;
  public abstract java.nio.channels.DatagramChannel disconnect()  throws java.io.IOException;
  public abstract java.nio.channels.DatagramChannel setOption(java.net.SocketOption, java.lang.Object)  throws java.io.IOException;
  public java.nio.channels.NetworkChannel bind(java.net.SocketAddress)  throws java.io.IOException;
  public java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object)  throws java.io.IOException;
  protected void <init>(java.nio.channels.spi.SelectorProvider);
}
public abstract class java.nio.channels.FileChannel
  extends java.nio.channels.spi.AbstractInterruptibleChannel
  implements java.nio.channels.SeekableByteChannel, java.nio.channels.GatheringByteChannel, java.nio.channels.ScatteringByteChannel
{
  public final long read(java.nio.ByteBuffer[])  throws java.io.IOException;
  public final long write(java.nio.ByteBuffer[])  throws java.io.IOException;
  public final java.nio.channels.FileLock lock()  throws java.io.IOException;
  public final java.nio.channels.FileLock tryLock()  throws java.io.IOException;
  public abstract int read(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract int read(java.nio.ByteBuffer, long)  throws java.io.IOException;
  public abstract int write(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract int write(java.nio.ByteBuffer, long)  throws java.io.IOException;
  public abstract long position()  throws java.io.IOException;
  public abstract long read(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
  public abstract long size()  throws java.io.IOException;
  public abstract long transferFrom(java.nio.channels.ReadableByteChannel, long, long)  throws java.io.IOException;
  public abstract long transferTo(long, long, java.nio.channels.WritableByteChannel)  throws java.io.IOException;
  public abstract long write(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
  public abstract void force(boolean)  throws java.io.IOException;
  public abstract java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode, long, long)  throws java.io.IOException;
  public abstract java.nio.channels.FileChannel position(long)  throws java.io.IOException;
  public abstract java.nio.channels.FileChannel truncate(long)  throws java.io.IOException;
  public abstract java.nio.channels.FileLock lock(long, long, boolean)  throws java.io.IOException;
  public abstract java.nio.channels.FileLock tryLock(long, long, boolean)  throws java.io.IOException;
  public java.nio.channels.SeekableByteChannel position(long)  throws java.io.IOException;
  public java.nio.channels.SeekableByteChannel truncate(long)  throws java.io.IOException;
  protected void <init>();
}
public class java.nio.channels.FileChannel$MapMode
  extends java.lang.Object
{
  public java.lang.String toString();
  public static final java.nio.channels.FileChannel$MapMode PRIVATE;
  public static final java.nio.channels.FileChannel$MapMode READ_ONLY;
  public static final java.nio.channels.FileChannel$MapMode READ_WRITE;
}
public abstract class java.nio.channels.FileLock
  extends java.lang.Object
  implements java.lang.AutoCloseable
{
  public final boolean isShared();
  public final boolean overlaps(long, long);
  public final long position();
  public final long size();
  public final void close()  throws java.io.IOException;
  public final java.lang.String toString();
  public final java.nio.channels.FileChannel channel();
  public abstract boolean isValid();
  public abstract void release()  throws java.io.IOException;
  public java.nio.channels.Channel acquiredBy();
  protected void <init>(java.nio.channels.FileChannel, long, long, boolean);
}
public class java.nio.channels.FileLockInterruptionException
  extends java.io.IOException
{
  public void <init>();
}
public interface java.nio.channels.GatheringByteChannel
  extends java.nio.channels.WritableByteChannel
{
  public abstract long write(java.nio.ByteBuffer[])  throws java.io.IOException;
  public abstract long write(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
}
public class java.nio.channels.IllegalBlockingModeException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.IllegalSelectorException
  extends java.lang.IllegalArgumentException
{
  public void <init>();
}
public interface java.nio.channels.InterruptibleChannel
  extends java.nio.channels.Channel
{
  public abstract void close()  throws java.io.IOException;
}
public interface java.nio.channels.NetworkChannel
  extends java.nio.channels.Channel
{
  public abstract java.lang.Object getOption(java.net.SocketOption)  throws java.io.IOException;
  public abstract java.net.SocketAddress getLocalAddress()  throws java.io.IOException;
  public abstract java.nio.channels.NetworkChannel bind(java.net.SocketAddress)  throws java.io.IOException;
  public abstract java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object)  throws java.io.IOException;
  public abstract java.util.Set supportedOptions();
}
public class java.nio.channels.NoConnectionPendingException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.NonReadableChannelException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.NonWritableChannelException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.NotYetBoundException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.NotYetConnectedException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.nio.channels.OverlappingFileLockException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public abstract class java.nio.channels.Pipe
  extends java.lang.Object
{
  public static java.nio.channels.Pipe open()  throws java.io.IOException;
  public abstract java.nio.channels.Pipe$SinkChannel sink();
  public abstract java.nio.channels.Pipe$SourceChannel source();
  protected void <init>();
}
public abstract class java.nio.channels.Pipe$SinkChannel
  extends java.nio.channels.spi.AbstractSelectableChannel
  implements java.nio.channels.WritableByteChannel, java.nio.channels.GatheringByteChannel
{
  public final int validOps();
  protected void <init>(java.nio.channels.spi.SelectorProvider);
}
public abstract class java.nio.channels.Pipe$SourceChannel
  extends java.nio.channels.spi.AbstractSelectableChannel
  implements java.nio.channels.ReadableByteChannel, java.nio.channels.ScatteringByteChannel
{
  public final int validOps();
  protected void <init>(java.nio.channels.spi.SelectorProvider);
}
public interface java.nio.channels.ReadableByteChannel
  extends java.nio.channels.Channel
{
  public abstract int read(java.nio.ByteBuffer)  throws java.io.IOException;
}
public interface java.nio.channels.ScatteringByteChannel
  extends java.nio.channels.ReadableByteChannel
{
  public abstract long read(java.nio.ByteBuffer[])  throws java.io.IOException;
  public abstract long read(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
}
public interface java.nio.channels.SeekableByteChannel
  extends java.nio.channels.ByteChannel
{
  public abstract int read(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract int write(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract long position()  throws java.io.IOException;
  public abstract long size()  throws java.io.IOException;
  public abstract java.nio.channels.SeekableByteChannel position(long)  throws java.io.IOException;
  public abstract java.nio.channels.SeekableByteChannel truncate(long)  throws java.io.IOException;
}
public abstract class java.nio.channels.SelectableChannel
  extends java.nio.channels.spi.AbstractInterruptibleChannel
  implements java.nio.channels.Channel
{
  public final java.nio.channels.SelectionKey register(java.nio.channels.Selector, int)  throws java.nio.channels.ClosedChannelException;
  public abstract boolean isBlocking();
  public abstract boolean isRegistered();
  public abstract int validOps();
  public abstract java.lang.Object blockingLock();
  public abstract java.nio.channels.SelectableChannel configureBlocking(boolean)  throws java.io.IOException;
  public abstract java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector);
  public abstract java.nio.channels.SelectionKey register(java.nio.channels.Selector, int, java.lang.Object)  throws java.nio.channels.ClosedChannelException;
  public abstract java.nio.channels.spi.SelectorProvider provider();
  protected void <init>();
}
public abstract class java.nio.channels.SelectionKey
  extends java.lang.Object
{
  public final boolean isAcceptable();
  public final boolean isConnectable();
  public final boolean isReadable();
  public final boolean isWritable();
  public final java.lang.Object attach(java.lang.Object);
  public final java.lang.Object attachment();
  public abstract boolean isValid();
  public abstract int interestOps();
  public abstract int readyOps();
  public abstract void cancel();
  public abstract java.nio.channels.SelectableChannel channel();
  public abstract java.nio.channels.SelectionKey interestOps(int);
  public abstract java.nio.channels.Selector selector();
  protected void <init>();
  public static final int OP_ACCEPT;
  public static final int OP_CONNECT;
  public static final int OP_READ;
  public static final int OP_WRITE;
}
public abstract class java.nio.channels.Selector
  extends java.lang.Object
  implements java.io.Closeable
{
  public static java.nio.channels.Selector open()  throws java.io.IOException;
  public abstract boolean isOpen();
  public abstract int select()  throws java.io.IOException;
  public abstract int select(long)  throws java.io.IOException;
  public abstract int selectNow()  throws java.io.IOException;
  public abstract void close()  throws java.io.IOException;
  public abstract java.nio.channels.Selector wakeup();
  public abstract java.nio.channels.spi.SelectorProvider provider();
  public abstract java.util.Set keys();
  public abstract java.util.Set selectedKeys();
  protected void <init>();
}
public abstract class java.nio.channels.ServerSocketChannel
  extends java.nio.channels.spi.AbstractSelectableChannel
  implements java.nio.channels.NetworkChannel
{
  public static java.nio.channels.ServerSocketChannel open()  throws java.io.IOException;
  public final int validOps();
  public final java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress)  throws java.io.IOException;
  public abstract java.net.ServerSocket socket();
  public abstract java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress, int)  throws java.io.IOException;
  public abstract java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption, java.lang.Object)  throws java.io.IOException;
  public abstract java.nio.channels.SocketChannel accept()  throws java.io.IOException;
  public java.nio.channels.NetworkChannel bind(java.net.SocketAddress)  throws java.io.IOException;
  public java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object)  throws java.io.IOException;
  protected void <init>(java.nio.channels.spi.SelectorProvider);
}
public abstract class java.nio.channels.SocketChannel
  extends java.nio.channels.spi.AbstractSelectableChannel
  implements java.nio.channels.ByteChannel, java.nio.channels.ScatteringByteChannel, java.nio.channels.GatheringByteChannel, java.nio.channels.NetworkChannel
{
  public static java.nio.channels.SocketChannel open()  throws java.io.IOException;
  public static java.nio.channels.SocketChannel open(java.net.SocketAddress)  throws java.io.IOException;
  public final int validOps();
  public final long read(java.nio.ByteBuffer[])  throws java.io.IOException;
  public final long write(java.nio.ByteBuffer[])  throws java.io.IOException;
  public abstract boolean connect(java.net.SocketAddress)  throws java.io.IOException;
  public abstract boolean finishConnect()  throws java.io.IOException;
  public abstract boolean isConnected();
  public abstract boolean isConnectionPending();
  public abstract int read(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract int write(java.nio.ByteBuffer)  throws java.io.IOException;
  public abstract long read(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
  public abstract long write(java.nio.ByteBuffer[], int, int)  throws java.io.IOException;
  public abstract java.net.Socket socket();
  public abstract java.net.SocketAddress getRemoteAddress()  throws java.io.IOException;
  public abstract java.nio.channels.SocketChannel bind(java.net.SocketAddress)  throws java.io.IOException;
  public abstract java.nio.channels.SocketChannel setOption(java.net.SocketOption, java.lang.Object)  throws java.io.IOException;
  public abstract java.nio.channels.SocketChannel shutdownInput()  throws java.io.IOException;
  public abstract java.nio.channels.SocketChannel shutdownOutput()  throws java.io.IOException;
  public java.nio.channels.NetworkChannel bind(java.net.SocketAddress)  throws java.io.IOException;
  public java.nio.channels.NetworkChannel setOption(java.net.SocketOption, java.lang.Object)  throws java.io.IOException;
  protected void <init>(java.nio.channels.spi.SelectorProvider);
}
public class java.nio.channels.UnresolvedAddressException
  extends java.lang.IllegalArgumentException
{
  public void <init>();
}
public class java.nio.channels.UnsupportedAddressTypeException
  extends java.lang.IllegalArgumentException
{
  public void <init>();
}
public interface java.nio.channels.WritableByteChannel
  extends java.nio.channels.Channel
{
  public abstract int write(java.nio.ByteBuffer)  throws java.io.IOException;
}
public abstract class java.nio.channels.spi.AbstractInterruptibleChannel
  extends java.lang.Object
  implements java.nio.channels.Channel, java.nio.channels.InterruptibleChannel
{
  public final boolean isOpen();
  public final void close()  throws java.io.IOException;
  protected void <init>();
  protected final void begin();
  protected final void end(boolean)  throws java.nio.channels.AsynchronousCloseException;
  protected abstract void implCloseChannel()  throws java.io.IOException;
}
public abstract class java.nio.channels.spi.AbstractSelectableChannel
  extends java.nio.channels.SelectableChannel
{
  public final boolean isBlocking();
  public final boolean isRegistered();
  public final java.lang.Object blockingLock();
  public final java.nio.channels.SelectableChannel configureBlocking(boolean)  throws java.io.IOException;
  public final java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector);
  public final java.nio.channels.SelectionKey register(java.nio.channels.Selector, int, java.lang.Object)  throws java.nio.channels.ClosedChannelException;
  public final java.nio.channels.spi.SelectorProvider provider();
  protected void <init>(java.nio.channels.spi.SelectorProvider);
  protected final void implCloseChannel()  throws java.io.IOException;
  protected abstract void implCloseSelectableChannel()  throws java.io.IOException;
  protected abstract void implConfigureBlocking(boolean)  throws java.io.IOException;
}
public abstract class java.nio.channels.spi.AbstractSelectionKey
  extends java.nio.channels.SelectionKey
{
  public final boolean isValid();
  public final void cancel();
  protected void <init>();
}
public abstract class java.nio.channels.spi.AbstractSelector
  extends java.nio.channels.Selector
{
  public final boolean isOpen();
  public final void close()  throws java.io.IOException;
  public final java.nio.channels.spi.SelectorProvider provider();
  protected void <init>(java.nio.channels.spi.SelectorProvider);
  protected final void begin();
  protected final void deregister(java.nio.channels.spi.AbstractSelectionKey);
  protected final void end();
  protected final java.util.Set cancelledKeys();
  protected abstract void implCloseSelector()  throws java.io.IOException;
  protected abstract java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel, int, java.lang.Object);
}
public abstract class java.nio.channels.spi.SelectorProvider
  extends java.lang.Object
{
  public static java.nio.channels.spi.SelectorProvider provider();
  public abstract java.nio.channels.DatagramChannel openDatagramChannel()  throws java.io.IOException;
  public abstract java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)  throws java.io.IOException;
  public abstract java.nio.channels.Pipe openPipe()  throws java.io.IOException;
  public abstract java.nio.channels.ServerSocketChannel openServerSocketChannel()  throws java.io.IOException;
  public abstract java.nio.channels.SocketChannel openSocketChannel()  throws java.io.IOException;
  public abstract java.nio.channels.spi.AbstractSelector openSelector()  throws java.io.IOException;
  public java.nio.channels.Channel inheritedChannel()  throws java.io.IOException;
  protected void <init>();
}
public class java.nio.charset.CharacterCodingException
  extends java.io.IOException
{
  public void <init>();
}
public abstract class java.nio.charset.Charset
  extends java.lang.Object
  implements java.lang.Comparable
{
  public static boolean isSupported(java.lang.String);
  public static java.nio.charset.Charset defaultCharset();
  public static java.nio.charset.Charset forName(java.lang.String);
  public static java.util.SortedMap availableCharsets();
  public final boolean equals(java.lang.Object);
  public final boolean isRegistered();
  public final int compareTo(java.nio.charset.Charset);
  public final int hashCode();
  public final java.lang.String name();
  public final java.lang.String toString();
  public final java.nio.ByteBuffer encode(java.lang.String);
  public final java.nio.ByteBuffer encode(java.nio.CharBuffer);
  public final java.nio.CharBuffer decode(java.nio.ByteBuffer);
  public final java.util.Set aliases();
  public abstract boolean contains(java.nio.charset.Charset);
  public abstract java.nio.charset.CharsetDecoder newDecoder();
  public abstract java.nio.charset.CharsetEncoder newEncoder();
  public boolean canEncode();
  public int compareTo(java.lang.Object);
  public java.lang.String displayName();
  public java.lang.String displayName(java.util.Locale);
  protected void <init>(java.lang.String, java.lang.String[]);
}
public abstract class java.nio.charset.CharsetDecoder
  extends java.lang.Object
{
  public final float averageCharsPerByte();
  public final float maxCharsPerByte();
  public final java.lang.String replacement();
  public final java.nio.CharBuffer decode(java.nio.ByteBuffer)  throws java.nio.charset.CharacterCodingException;
  public final java.nio.charset.Charset charset();
  public final java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction);
  public final java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction);
  public final java.nio.charset.CharsetDecoder replaceWith(java.lang.String);
  public final java.nio.charset.CharsetDecoder reset();
  public final java.nio.charset.CoderResult decode(java.nio.ByteBuffer, java.nio.CharBuffer, boolean);
  public final java.nio.charset.CoderResult flush(java.nio.CharBuffer);
  public boolean isAutoDetecting();
  public boolean isCharsetDetected();
  public java.nio.charset.Charset detectedCharset();
  public java.nio.charset.CodingErrorAction malformedInputAction();
  public java.nio.charset.CodingErrorAction unmappableCharacterAction();
  protected void <init>(java.nio.charset.Charset, float, float);
  protected abstract java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer, java.nio.CharBuffer);
  protected void implOnMalformedInput(java.nio.charset.CodingErrorAction);
  protected void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction);
  protected void implReplaceWith(java.lang.String);
  protected void implReset();
  protected java.nio.charset.CoderResult implFlush(java.nio.CharBuffer);
}
public abstract class java.nio.charset.CharsetEncoder
  extends java.lang.Object
{
  public final float averageBytesPerChar();
  public final float maxBytesPerChar();
  public final byte[] replacement();
  public final java.nio.ByteBuffer encode(java.nio.CharBuffer)  throws java.nio.charset.CharacterCodingException;
  public final java.nio.charset.Charset charset();
  public final java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction);
  public final java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction);
  public final java.nio.charset.CharsetEncoder replaceWith(byte[]);
  public final java.nio.charset.CharsetEncoder reset();
  public final java.nio.charset.CoderResult encode(java.nio.CharBuffer, java.nio.ByteBuffer, boolean);
  public final java.nio.charset.CoderResult flush(java.nio.ByteBuffer);
  public boolean canEncode(char);
  public boolean canEncode(java.lang.CharSequence);
  public boolean isLegalReplacement(byte[]);
  public java.nio.charset.CodingErrorAction malformedInputAction();
  public java.nio.charset.CodingErrorAction unmappableCharacterAction();
  protected void <init>(java.nio.charset.Charset, float, float);
  protected void <init>(java.nio.charset.Charset, float, float, byte[]);
  protected abstract java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer);
  protected void implOnMalformedInput(java.nio.charset.CodingErrorAction);
  protected void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction);
  protected void implReplaceWith(byte[]);
  protected void implReset();
  protected java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer);
}
public class java.nio.charset.CoderMalfunctionError
  extends java.lang.Error
{
  public void <init>(java.lang.Exception);
}
public class java.nio.charset.CoderResult
  extends java.lang.Object
{
  public static java.nio.charset.CoderResult malformedForLength(int);
  public static java.nio.charset.CoderResult unmappableForLength(int);
  public boolean isError();
  public boolean isMalformed();
  public boolean isOverflow();
  public boolean isUnderflow();
  public boolean isUnmappable();
  public int length();
  public void throwException()  throws java.nio.charset.CharacterCodingException;
  public java.lang.String toString();
  public static final java.nio.charset.CoderResult OVERFLOW;
  public static final java.nio.charset.CoderResult UNDERFLOW;
}
public class java.nio.charset.CodingErrorAction
  extends java.lang.Object
{
  public java.lang.String toString();
  public static final java.nio.charset.CodingErrorAction IGNORE;
  public static final java.nio.charset.CodingErrorAction REPLACE;
  public static final java.nio.charset.CodingErrorAction REPORT;
}
public class java.nio.charset.IllegalCharsetNameException
  extends java.lang.IllegalArgumentException
{
  public void <init>(java.lang.String);
  public java.lang.String getCharsetName();
}
public class java.nio.charset.MalformedInputException
  extends java.nio.charset.CharacterCodingException
{
  public void <init>(int);
  public int getInputLength();
  public java.lang.String getMessage();
}
public final class java.nio.charset.StandardCharsets
  extends java.lang.Object
{
  public static final java.nio.charset.Charset ISO_8859_1;
  public static final java.nio.charset.Charset US_ASCII;
  public static final java.nio.charset.Charset UTF_16;
  public static final java.nio.charset.Charset UTF_16BE;
  public static final java.nio.charset.Charset UTF_16LE;
  public static final java.nio.charset.Charset UTF_8;
}
public class java.nio.charset.UnmappableCharacterException
  extends java.nio.charset.CharacterCodingException
{
  public void <init>(int);
  public int getInputLength();
  public java.lang.String getMessage();
}
public class java.nio.charset.UnsupportedCharsetException
  extends java.lang.IllegalArgumentException
{
  public void <init>(java.lang.String);
  public java.lang.String getCharsetName();
}
public abstract class java.nio.charset.spi.CharsetProvider
  extends java.lang.Object
{
  public abstract java.nio.charset.Charset charsetForName(java.lang.String);
  public abstract java.util.Iterator charsets();
  protected void <init>();
}
public final class java.security.AccessControlContext
  extends java.lang.Object
{
  public void <init>(java.security.AccessControlContext, java.security.DomainCombiner);
  public void <init>(java.security.ProtectionDomain[]);
  public void checkPermission(java.security.Permission)  throws java.security.AccessControlException;
  public java.security.DomainCombiner getDomainCombiner();
}
public class java.security.AccessControlException
  extends java.lang.SecurityException
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.security.Permission);
  public java.security.Permission getPermission();
}
public final class java.security.AccessController
  extends java.lang.Object
{
  public static void checkPermission(java.security.Permission)  throws java.security.AccessControlException;
  public static java.lang.Object doPrivileged(java.security.PrivilegedAction);
  public static java.lang.Object doPrivileged(java.security.PrivilegedAction, java.security.AccessControlContext);
  public static java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)  throws java.security.PrivilegedActionException;
  public static java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction, java.security.AccessControlContext)  throws java.security.PrivilegedActionException;
  public static java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedAction);
  public static java.lang.Object doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction)  throws java.security.PrivilegedActionException;
  public static java.security.AccessControlContext getContext();
}
public interface java.security.AlgorithmConstraints
{
  public abstract boolean permits(java.util.Set, java.lang.String, java.security.AlgorithmParameters);
  public abstract boolean permits(java.util.Set, java.lang.String, java.security.Key, java.security.AlgorithmParameters);
  public abstract boolean permits(java.util.Set, java.security.Key);
}
public class java.security.AlgorithmParameterGenerator
  extends java.lang.Object
{
  public static java.security.AlgorithmParameterGenerator getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.AlgorithmParameterGenerator getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.AlgorithmParameterGenerator getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final void init(int);
  public final void init(int, java.security.SecureRandom);
  public final void init(java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException;
  public final void init(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException;
  public final java.lang.String getAlgorithm();
  public final java.security.AlgorithmParameters generateParameters();
  public final java.security.Provider getProvider();
  protected void <init>(java.security.AlgorithmParameterGeneratorSpi, java.security.Provider, java.lang.String);
}
public abstract class java.security.AlgorithmParameterGeneratorSpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract void engineInit(int, java.security.SecureRandom);
  protected abstract void engineInit(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException;
  protected abstract java.security.AlgorithmParameters engineGenerateParameters();
}
public class java.security.AlgorithmParameters
  extends java.lang.Object
{
  public static java.security.AlgorithmParameters getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.AlgorithmParameters getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.AlgorithmParameters getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final void init(byte[])  throws java.io.IOException;
  public final void init(byte[], java.lang.String)  throws java.io.IOException;
  public final void init(java.security.spec.AlgorithmParameterSpec)  throws java.security.spec.InvalidParameterSpecException;
  public final byte[] getEncoded()  throws java.io.IOException;
  public final byte[] getEncoded(java.lang.String)  throws java.io.IOException;
  public final java.lang.String getAlgorithm();
  public final java.lang.String toString();
  public final java.security.Provider getProvider();
  public final java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)  throws java.security.spec.InvalidParameterSpecException;
  protected void <init>(java.security.AlgorithmParametersSpi, java.security.Provider, java.lang.String);
}
public abstract class java.security.AlgorithmParametersSpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract void engineInit(byte[])  throws java.io.IOException;
  protected abstract void engineInit(byte[], java.lang.String)  throws java.io.IOException;
  protected abstract void engineInit(java.security.spec.AlgorithmParameterSpec)  throws java.security.spec.InvalidParameterSpecException;
  protected abstract byte[] engineGetEncoded()  throws java.io.IOException;
  protected abstract byte[] engineGetEncoded(java.lang.String)  throws java.io.IOException;
  protected abstract java.lang.String engineToString();
  protected abstract java.security.spec.AlgorithmParameterSpec engineGetParameterSpec(java.lang.Class)  throws java.security.spec.InvalidParameterSpecException;
}
public final class java.security.AllPermission
  extends java.security.Permission
{
  public void <init>();
  public void <init>(java.lang.String, java.lang.String);
  public boolean implies(java.security.Permission);
  public java.lang.String getActions();
}
public abstract class java.security.AuthProvider
  extends java.security.Provider
{
  public abstract void login(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler)  throws javax.security.auth.login.LoginException;
  public abstract void logout()  throws javax.security.auth.login.LoginException;
  public abstract void setCallbackHandler(javax.security.auth.callback.CallbackHandler);
  protected void <init>(java.lang.String, double, java.lang.String);
}
public abstract class java.security.BasicPermission
  extends java.security.Permission
  implements java.io.Serializable
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public boolean implies(java.security.Permission);
  public java.lang.String getActions();
}
public interface java.security.Certificate
{
  public abstract void decode(java.io.InputStream)  throws java.io.IOException, java.security.KeyException;
  public abstract void encode(java.io.OutputStream)  throws java.io.IOException, java.security.KeyException;
  public abstract java.lang.String getFormat();
  public abstract java.lang.String toString(boolean);
  public abstract java.security.Principal getGuarantor();
  public abstract java.security.Principal getPrincipal();
  public abstract java.security.PublicKey getPublicKey();
}
public final class java.security.CodeSigner
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.security.cert.CertPath, java.security.Timestamp);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.security.Timestamp getTimestamp();
  public java.security.cert.CertPath getSignerCertPath();
}
public class java.security.CodeSource
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.net.URL, java.security.CodeSigner[]);
  public void <init>(java.net.URL, java.security.cert.Certificate[]);
  public final java.net.URL getLocation();
  public final java.security.CodeSigner[] getCodeSigners();
  public final java.security.cert.Certificate[] getCertificates();
  public boolean implies(java.security.CodeSource);
}
public final class java.security.CryptoPrimitive
  extends java.lang.Enum
{
  public static java.security.CryptoPrimitive valueOf(java.lang.String);
  public static java.security.CryptoPrimitive[] values();
  public static final java.security.CryptoPrimitive BLOCK_CIPHER;
  public static final java.security.CryptoPrimitive KEY_AGREEMENT;
  public static final java.security.CryptoPrimitive KEY_ENCAPSULATION;
  public static final java.security.CryptoPrimitive KEY_WRAP;
  public static final java.security.CryptoPrimitive MAC;
  public static final java.security.CryptoPrimitive MESSAGE_DIGEST;
  public static final java.security.CryptoPrimitive PUBLIC_KEY_ENCRYPTION;
  public static final java.security.CryptoPrimitive SECURE_RANDOM;
  public static final java.security.CryptoPrimitive SIGNATURE;
  public static final java.security.CryptoPrimitive STREAM_CIPHER;
}
public class java.security.DigestException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.DigestInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream, java.security.MessageDigest);
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public void on(boolean);
  public void setMessageDigest(java.security.MessageDigest);
  public java.lang.String toString();
  public java.security.MessageDigest getMessageDigest();
  protected java.security.MessageDigest digest;
}
public class java.security.DigestOutputStream
  extends java.io.FilterOutputStream
{
  public void <init>(java.io.OutputStream, java.security.MessageDigest);
  public void on(boolean);
  public void setMessageDigest(java.security.MessageDigest);
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public java.lang.String toString();
  public java.security.MessageDigest getMessageDigest();
  protected java.security.MessageDigest digest;
}
public interface java.security.DomainCombiner
{
  public abstract java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[], java.security.ProtectionDomain[]);
}
public class java.security.GeneralSecurityException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.security.Guard
{
  public abstract void checkGuard(java.lang.Object)  throws java.lang.SecurityException;
}
public class java.security.GuardedObject
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.lang.Object, java.security.Guard);
  public java.lang.Object getObject()  throws java.lang.SecurityException;
}
public abstract class java.security.Identity
  extends java.lang.Object
  implements java.security.Principal, java.io.Serializable
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.security.IdentityScope)  throws java.security.KeyManagementException;
  public final boolean equals(java.lang.Object);
  public final java.lang.String getName();
  public final java.security.IdentityScope getScope();
  public int hashCode();
  public void addCertificate(java.security.Certificate)  throws java.security.KeyManagementException;
  public void removeCertificate(java.security.Certificate)  throws java.security.KeyManagementException;
  public void setInfo(java.lang.String);
  public void setPublicKey(java.security.PublicKey)  throws java.security.KeyManagementException;
  public java.lang.String getInfo();
  public java.lang.String toString();
  public java.lang.String toString(boolean);
  public java.security.Certificate[] certificates();
  public java.security.PublicKey getPublicKey();
  protected void <init>();
  protected boolean identityEquals(java.security.Identity);
}
public abstract class java.security.IdentityScope
  extends java.security.Identity
{
  public static java.security.IdentityScope getSystemScope();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.security.IdentityScope)  throws java.security.KeyManagementException;
  public abstract int size();
  public abstract void addIdentity(java.security.Identity)  throws java.security.KeyManagementException;
  public abstract void removeIdentity(java.security.Identity)  throws java.security.KeyManagementException;
  public abstract java.security.Identity getIdentity(java.lang.String);
  public abstract java.security.Identity getIdentity(java.security.PublicKey);
  public abstract java.util.Enumeration identities();
  public java.lang.String toString();
  public java.security.Identity getIdentity(java.security.Principal);
  protected static void setSystemScope(java.security.IdentityScope);
  protected void <init>();
}
public class java.security.InvalidAlgorithmParameterException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.InvalidKeyException
  extends java.security.KeyException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.InvalidParameterException
  extends java.lang.IllegalArgumentException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.security.Key
  extends java.io.Serializable
{
  public abstract byte[] getEncoded();
  public abstract java.lang.String getAlgorithm();
  public abstract java.lang.String getFormat();
  public static final long serialVersionUID;
}
public class java.security.KeyException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.KeyFactory
  extends java.lang.Object
{
  public static java.security.KeyFactory getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.KeyFactory getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.KeyFactory getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final java.lang.String getAlgorithm();
  public final java.security.Key translateKey(java.security.Key)  throws java.security.InvalidKeyException;
  public final java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)  throws java.security.spec.InvalidKeySpecException;
  public final java.security.Provider getProvider();
  public final java.security.PublicKey generatePublic(java.security.spec.KeySpec)  throws java.security.spec.InvalidKeySpecException;
  public final java.security.spec.KeySpec getKeySpec(java.security.Key, java.lang.Class)  throws java.security.spec.InvalidKeySpecException;
  protected void <init>(java.security.KeyFactorySpi, java.security.Provider, java.lang.String);
}
public abstract class java.security.KeyFactorySpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract java.security.Key engineTranslateKey(java.security.Key)  throws java.security.InvalidKeyException;
  protected abstract java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)  throws java.security.spec.InvalidKeySpecException;
  protected abstract java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)  throws java.security.spec.InvalidKeySpecException;
  protected abstract java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class)  throws java.security.spec.InvalidKeySpecException;
}
public class java.security.KeyManagementException
  extends java.security.KeyException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public final class java.security.KeyPair
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.security.PublicKey, java.security.PrivateKey);
  public java.security.PrivateKey getPrivate();
  public java.security.PublicKey getPublic();
}
public abstract class java.security.KeyPairGenerator
  extends java.security.KeyPairGeneratorSpi
{
  public static java.security.KeyPairGenerator getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.KeyPairGenerator getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.KeyPairGenerator getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final java.security.KeyPair genKeyPair();
  public final java.security.Provider getProvider();
  public void initialize(int);
  public void initialize(int, java.security.SecureRandom);
  public void initialize(java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException;
  public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException;
  public java.lang.String getAlgorithm();
  public java.security.KeyPair generateKeyPair();
  protected void <init>(java.lang.String);
}
public abstract class java.security.KeyPairGeneratorSpi
  extends java.lang.Object
{
  public void <init>();
  public abstract void initialize(int, java.security.SecureRandom);
  public abstract java.security.KeyPair generateKeyPair();
  public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException;
}
public class java.security.KeyRep
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.security.KeyRep$Type, java.lang.String, java.lang.String, byte[]);
  protected java.lang.Object readResolve()  throws java.io.ObjectStreamException;
}
public final class java.security.KeyRep$Type
  extends java.lang.Enum
{
  public static java.security.KeyRep$Type valueOf(java.lang.String);
  public static java.security.KeyRep$Type[] values();
  public static final java.security.KeyRep$Type PRIVATE;
  public static final java.security.KeyRep$Type PUBLIC;
  public static final java.security.KeyRep$Type SECRET;
}
public class java.security.KeyStore
  extends java.lang.Object
{
  public static final java.lang.String getDefaultType();
  public static java.security.KeyStore getInstance(java.lang.String)  throws java.security.KeyStoreException;
  public static java.security.KeyStore getInstance(java.lang.String, java.lang.String)  throws java.security.KeyStoreException, java.security.NoSuchProviderException;
  public static java.security.KeyStore getInstance(java.lang.String, java.security.Provider)  throws java.security.KeyStoreException;
  public final boolean containsAlias(java.lang.String)  throws java.security.KeyStoreException;
  public final boolean entryInstanceOf(java.lang.String, java.lang.Class)  throws java.security.KeyStoreException;
  public final boolean isCertificateEntry(java.lang.String)  throws java.security.KeyStoreException;
  public final boolean isKeyEntry(java.lang.String)  throws java.security.KeyStoreException;
  public final int size()  throws java.security.KeyStoreException;
  public final void deleteEntry(java.lang.String)  throws java.security.KeyStoreException;
  public final void load(java.io.InputStream, char[])  throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final void load(java.security.KeyStore$LoadStoreParameter)  throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final void setCertificateEntry(java.lang.String, java.security.cert.Certificate)  throws java.security.KeyStoreException;
  public final void setEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter)  throws java.security.KeyStoreException;
  public final void setKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[])  throws java.security.KeyStoreException;
  public final void setKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[])  throws java.security.KeyStoreException;
  public final void store(java.io.OutputStream, char[])  throws java.io.IOException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final void store(java.security.KeyStore$LoadStoreParameter)  throws java.io.IOException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final java.lang.String getCertificateAlias(java.security.cert.Certificate)  throws java.security.KeyStoreException;
  public final java.lang.String getType();
  public final java.security.Key getKey(java.lang.String, char[])  throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public final java.security.KeyStore$Entry getEntry(java.lang.String, java.security.KeyStore$ProtectionParameter)  throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException;
  public final java.security.Provider getProvider();
  public final java.security.cert.Certificate getCertificate(java.lang.String)  throws java.security.KeyStoreException;
  public final java.security.cert.Certificate[] getCertificateChain(java.lang.String)  throws java.security.KeyStoreException;
  public final java.util.Date getCreationDate(java.lang.String)  throws java.security.KeyStoreException;
  public final java.util.Enumeration aliases()  throws java.security.KeyStoreException;
  protected void <init>(java.security.KeyStoreSpi, java.security.Provider, java.lang.String);
}
public abstract class java.security.KeyStore$Builder
  extends java.lang.Object
{
  public static java.security.KeyStore$Builder newInstance(java.lang.String, java.security.Provider, java.io.File, java.security.KeyStore$ProtectionParameter);
  public static java.security.KeyStore$Builder newInstance(java.lang.String, java.security.Provider, java.security.KeyStore$ProtectionParameter);
  public static java.security.KeyStore$Builder newInstance(java.security.KeyStore, java.security.KeyStore$ProtectionParameter);
  public abstract java.security.KeyStore getKeyStore()  throws java.security.KeyStoreException;
  public abstract java.security.KeyStore$ProtectionParameter getProtectionParameter(java.lang.String)  throws java.security.KeyStoreException;
  protected void <init>();
}
public class java.security.KeyStore$CallbackHandlerProtection
  extends java.lang.Object
  implements java.security.KeyStore$ProtectionParameter
{
  public void <init>(javax.security.auth.callback.CallbackHandler);
  public javax.security.auth.callback.CallbackHandler getCallbackHandler();
}
public interface java.security.KeyStore$Entry
{
}
public interface java.security.KeyStore$LoadStoreParameter
{
  public abstract java.security.KeyStore$ProtectionParameter getProtectionParameter();
}
public class java.security.KeyStore$PasswordProtection
  extends java.lang.Object
  implements java.security.KeyStore$ProtectionParameter, javax.security.auth.Destroyable
{
  public void <init>(char[]);
  public boolean isDestroyed();
  public void destroy()  throws javax.security.auth.DestroyFailedException;
  public char[] getPassword();
}
public final class java.security.KeyStore$PrivateKeyEntry
  extends java.lang.Object
  implements java.security.KeyStore$Entry
{
  public void <init>(java.security.PrivateKey, java.security.cert.Certificate[]);
  public java.lang.String toString();
  public java.security.PrivateKey getPrivateKey();
  public java.security.cert.Certificate getCertificate();
  public java.security.cert.Certificate[] getCertificateChain();
}
public interface java.security.KeyStore$ProtectionParameter
{
}
public final class java.security.KeyStore$SecretKeyEntry
  extends java.lang.Object
  implements java.security.KeyStore$Entry
{
  public void <init>(javax.crypto.SecretKey);
  public java.lang.String toString();
  public javax.crypto.SecretKey getSecretKey();
}
public final class java.security.KeyStore$TrustedCertificateEntry
  extends java.lang.Object
  implements java.security.KeyStore$Entry
{
  public void <init>(java.security.cert.Certificate);
  public java.lang.String toString();
  public java.security.cert.Certificate getTrustedCertificate();
}
public class java.security.KeyStoreException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public abstract class java.security.KeyStoreSpi
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean engineContainsAlias(java.lang.String);
  public abstract boolean engineIsCertificateEntry(java.lang.String);
  public abstract boolean engineIsKeyEntry(java.lang.String);
  public abstract int engineSize();
  public abstract void engineDeleteEntry(java.lang.String)  throws java.security.KeyStoreException;
  public abstract void engineLoad(java.io.InputStream, char[])  throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public abstract void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate)  throws java.security.KeyStoreException;
  public abstract void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[])  throws java.security.KeyStoreException;
  public abstract void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[])  throws java.security.KeyStoreException;
  public abstract void engineStore(java.io.OutputStream, char[])  throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public abstract java.lang.String engineGetCertificateAlias(java.security.cert.Certificate);
  public abstract java.security.Key engineGetKey(java.lang.String, char[])  throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public abstract java.security.cert.Certificate engineGetCertificate(java.lang.String);
  public abstract java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String);
  public abstract java.util.Date engineGetCreationDate(java.lang.String);
  public abstract java.util.Enumeration engineAliases();
  public boolean engineEntryInstanceOf(java.lang.String, java.lang.Class);
  public void engineLoad(java.security.KeyStore$LoadStoreParameter)  throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public void engineSetEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter)  throws java.security.KeyStoreException;
  public void engineStore(java.security.KeyStore$LoadStoreParameter)  throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public java.security.KeyStore$Entry engineGetEntry(java.lang.String, java.security.KeyStore$ProtectionParameter)  throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException;
}
public abstract class java.security.MessageDigest
  extends java.security.MessageDigestSpi
{
  public static boolean isEqual(byte[], byte[]);
  public static java.security.MessageDigest getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.MessageDigest getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.MessageDigest getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final int getDigestLength();
  public final void update(java.nio.ByteBuffer);
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public int digest(byte[], int, int)  throws java.security.DigestException;
  public void reset();
  public void update(byte);
  public void update(byte[]);
  public void update(byte[], int, int);
  public byte[] digest();
  public byte[] digest(byte[]);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
  protected void <init>(java.lang.String);
}
public abstract class java.security.MessageDigestSpi
  extends java.lang.Object
{
  public void <init>();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected abstract void engineReset();
  protected abstract void engineUpdate(byte);
  protected abstract void engineUpdate(byte[], int, int);
  protected abstract byte[] engineDigest();
  protected int engineDigest(byte[], int, int)  throws java.security.DigestException;
  protected int engineGetDigestLength();
  protected void engineUpdate(java.nio.ByteBuffer);
}
public class java.security.NoSuchAlgorithmException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.NoSuchProviderException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class java.security.Permission
  extends java.lang.Object
  implements java.security.Guard, java.io.Serializable
{
  public void <init>(java.lang.String);
  public final java.lang.String getName();
  public abstract boolean implies(java.security.Permission);
  public abstract java.lang.String getActions();
  public void checkGuard(java.lang.Object)  throws java.lang.SecurityException;
  public java.security.PermissionCollection newPermissionCollection();
}
public abstract class java.security.PermissionCollection
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  public abstract boolean implies(java.security.Permission);
  public abstract void add(java.security.Permission);
  public abstract java.util.Enumeration elements();
  public boolean isReadOnly();
  public void setReadOnly();
}
public final class java.security.Permissions
  extends java.security.PermissionCollection
  implements java.io.Serializable
{
  public void <init>();
  public boolean implies(java.security.Permission);
  public void add(java.security.Permission);
  public java.util.Enumeration elements();
}
public abstract class java.security.Policy
  extends java.lang.Object
{
  public static void setPolicy(java.security.Policy);
  public static java.security.Policy getInstance(java.lang.String, java.security.Policy$Parameters)  throws java.security.NoSuchAlgorithmException;
  public static java.security.Policy getInstance(java.lang.String, java.security.Policy$Parameters, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.Policy getInstance(java.lang.String, java.security.Policy$Parameters, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public static java.security.Policy getPolicy();
  public void <init>();
  public boolean implies(java.security.ProtectionDomain, java.security.Permission);
  public void refresh();
  public java.lang.String getType();
  public java.security.PermissionCollection getPermissions(java.security.CodeSource);
  public java.security.PermissionCollection getPermissions(java.security.ProtectionDomain);
  public java.security.Policy$Parameters getParameters();
  public java.security.Provider getProvider();
  public static final java.security.PermissionCollection UNSUPPORTED_EMPTY_COLLECTION;
}
public interface java.security.Policy$Parameters
{
}
public abstract class java.security.PolicySpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract boolean engineImplies(java.security.ProtectionDomain, java.security.Permission);
  protected void engineRefresh();
  protected java.security.PermissionCollection engineGetPermissions(java.security.CodeSource);
  protected java.security.PermissionCollection engineGetPermissions(java.security.ProtectionDomain);
}
public interface java.security.Principal
{
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.String getName();
  public abstract java.lang.String toString();
}
public interface java.security.PrivateKey
  extends java.security.Key
{
  public static final long serialVersionUID;
}
public interface java.security.PrivilegedAction
{
  public abstract java.lang.Object run();
}
public class java.security.PrivilegedActionException
  extends java.lang.Exception
{
  public void <init>(java.lang.Exception);
  public java.lang.Exception getException();
}
public interface java.security.PrivilegedExceptionAction
{
  public abstract java.lang.Object run()  throws java.lang.Exception;
}
public class java.security.ProtectionDomain
  extends java.lang.Object
{
  public void <init>(java.security.CodeSource, java.security.PermissionCollection);
  public void <init>(java.security.CodeSource, java.security.PermissionCollection, java.lang.ClassLoader, java.security.Principal[]);
  public final java.lang.ClassLoader getClassLoader();
  public final java.security.CodeSource getCodeSource();
  public final java.security.PermissionCollection getPermissions();
  public final java.security.Principal[] getPrincipals();
  public boolean implies(java.security.Permission);
}
public abstract class java.security.Provider
  extends java.util.Properties
{
  public double getVersion();
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void load(java.io.InputStream)  throws java.io.IOException;
  public void putAll(java.util.Map);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.String getInfo();
  public java.lang.String getName();
  public java.lang.String getProperty(java.lang.String);
  public java.lang.String toString();
  public java.security.Provider$Service getService(java.lang.String, java.lang.String);
  public java.util.Collection values();
  public java.util.Enumeration elements();
  public java.util.Enumeration keys();
  public java.util.Set entrySet();
  public java.util.Set getServices();
  public java.util.Set keySet();
  protected void <init>(java.lang.String, double, java.lang.String);
  protected void putService(java.security.Provider$Service);
  protected void removeService(java.security.Provider$Service);
}
public class java.security.Provider$Service
  extends java.lang.Object
{
  public void <init>(java.security.Provider, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.util.Map);
  public final java.lang.String getAlgorithm();
  public final java.lang.String getAttribute(java.lang.String);
  public final java.lang.String getClassName();
  public final java.lang.String getType();
  public final java.security.Provider getProvider();
  public boolean supportsParameter(java.lang.Object);
  public java.lang.Object newInstance(java.lang.Object)  throws java.security.NoSuchAlgorithmException;
  public java.lang.String toString();
}
public class java.security.ProviderException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.security.PublicKey
  extends java.security.Key
{
  public static final long serialVersionUID;
}
public class java.security.SecureClassLoader
  extends java.lang.ClassLoader
{
  protected void <init>();
  protected void <init>(java.lang.ClassLoader);
  protected final java.lang.Class defineClass(java.lang.String, byte[], int, int, java.security.CodeSource);
  protected final java.lang.Class defineClass(java.lang.String, java.nio.ByteBuffer, java.security.CodeSource);
  protected java.security.PermissionCollection getPermissions(java.security.CodeSource);
}
public class java.security.SecureRandom
  extends java.util.Random
{
  public static byte[] getSeed(int);
  public static java.security.SecureRandom getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.SecureRandom getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.SecureRandom getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public void <init>();
  public void <init>(byte[]);
  public final java.security.Provider getProvider();
  public void nextBytes(byte[]);
  public void setSeed(byte[]);
  public void setSeed(long);
  public byte[] generateSeed(int);
  public java.lang.String getAlgorithm();
  protected void <init>(java.security.SecureRandomSpi, java.security.Provider);
  protected final int next(int);
}
public abstract class java.security.SecureRandomSpi
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  protected abstract void engineNextBytes(byte[]);
  protected abstract void engineSetSeed(byte[]);
  protected abstract byte[] engineGenerateSeed(int);
}
public final class java.security.Security
  extends java.lang.Object
{
  public static int addProvider(java.security.Provider);
  public static int insertProviderAt(java.security.Provider, int);
  public static void removeProvider(java.lang.String);
  public static void setProperty(java.lang.String, java.lang.String);
  public static java.lang.String getAlgorithmProperty(java.lang.String, java.lang.String);
  public static java.lang.String getProperty(java.lang.String);
  public static java.security.Provider getProvider(java.lang.String);
  public static java.security.Provider[] getProviders();
  public static java.security.Provider[] getProviders(java.lang.String);
  public static java.security.Provider[] getProviders(java.util.Map);
  public static java.util.Set getAlgorithms(java.lang.String);
}
public final class java.security.SecurityPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public abstract class java.security.Signature
  extends java.security.SignatureSpi
{
  public static java.security.Signature getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.Signature getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.Signature getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final boolean verify(byte[])  throws java.security.SignatureException;
  public final boolean verify(byte[], int, int)  throws java.security.SignatureException;
  public final int sign(byte[], int, int)  throws java.security.SignatureException;
  public final void initSign(java.security.PrivateKey)  throws java.security.InvalidKeyException;
  public final void initSign(java.security.PrivateKey, java.security.SecureRandom)  throws java.security.InvalidKeyException;
  public final void initVerify(java.security.PublicKey)  throws java.security.InvalidKeyException;
  public final void initVerify(java.security.cert.Certificate)  throws java.security.InvalidKeyException;
  public final void setParameter(java.lang.String, java.lang.Object)  throws java.security.InvalidParameterException;
  public final void setParameter(java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException;
  public final void update(byte)  throws java.security.SignatureException;
  public final void update(byte[])  throws java.security.SignatureException;
  public final void update(byte[], int, int)  throws java.security.SignatureException;
  public final void update(java.nio.ByteBuffer)  throws java.security.SignatureException;
  public final byte[] sign()  throws java.security.SignatureException;
  public final java.lang.Object getParameter(java.lang.String)  throws java.security.InvalidParameterException;
  public final java.lang.String getAlgorithm();
  public final java.security.AlgorithmParameters getParameters();
  public final java.security.Provider getProvider();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.String toString();
  protected void <init>(java.lang.String);
  protected static final int SIGN;
  protected static final int UNINITIALIZED;
  protected static final int VERIFY;
  protected int state;
}
public class java.security.SignatureException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public abstract class java.security.SignatureSpi
  extends java.lang.Object
{
  public void <init>();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected abstract boolean engineVerify(byte[])  throws java.security.SignatureException;
  protected abstract void engineInitSign(java.security.PrivateKey)  throws java.security.InvalidKeyException;
  protected abstract void engineInitVerify(java.security.PublicKey)  throws java.security.InvalidKeyException;
  protected abstract void engineSetParameter(java.lang.String, java.lang.Object)  throws java.security.InvalidParameterException;
  protected abstract void engineUpdate(byte)  throws java.security.SignatureException;
  protected abstract void engineUpdate(byte[], int, int)  throws java.security.SignatureException;
  protected abstract byte[] engineSign()  throws java.security.SignatureException;
  protected abstract java.lang.Object engineGetParameter(java.lang.String)  throws java.security.InvalidParameterException;
  protected boolean engineVerify(byte[], int, int)  throws java.security.SignatureException;
  protected int engineSign(byte[], int, int)  throws java.security.SignatureException;
  protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom)  throws java.security.InvalidKeyException;
  protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException;
  protected void engineUpdate(java.nio.ByteBuffer);
  protected java.security.AlgorithmParameters engineGetParameters();
  protected java.security.SecureRandom appRandom;
}
public final class java.security.SignedObject
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.io.Serializable, java.security.PrivateKey, java.security.Signature)  throws java.io.IOException, java.security.InvalidKeyException, java.security.SignatureException;
  public boolean verify(java.security.PublicKey, java.security.Signature)  throws java.security.InvalidKeyException, java.security.SignatureException;
  public byte[] getSignature();
  public java.lang.Object getObject()  throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.lang.String getAlgorithm();
}
public abstract class java.security.Signer
  extends java.security.Identity
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.security.IdentityScope)  throws java.security.KeyManagementException;
  public final void setKeyPair(java.security.KeyPair)  throws java.security.InvalidParameterException, java.security.KeyException;
  public java.lang.String toString();
  public java.security.PrivateKey getPrivateKey();
  protected void <init>();
}
public final class java.security.Timestamp
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.util.Date, java.security.cert.CertPath);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.security.cert.CertPath getSignerCertPath();
  public java.util.Date getTimestamp();
}
public class java.security.UnrecoverableEntryException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.security.UnrecoverableKeyException
  extends java.security.UnrecoverableEntryException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class java.security.UnresolvedPermission
  extends java.security.Permission
  implements java.io.Serializable
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String, java.security.cert.Certificate[]);
  public boolean implies(java.security.Permission);
  public java.lang.String getActions();
  public java.lang.String getUnresolvedActions();
  public java.lang.String getUnresolvedName();
  public java.lang.String getUnresolvedType();
  public java.security.cert.Certificate[] getUnresolvedCerts();
}
public interface java.security.acl.Acl
  extends java.security.acl.Owner
{
  public abstract boolean addEntry(java.security.Principal, java.security.acl.AclEntry)  throws java.security.acl.NotOwnerException;
  public abstract boolean checkPermission(java.security.Principal, java.security.acl.Permission);
  public abstract boolean removeEntry(java.security.Principal, java.security.acl.AclEntry)  throws java.security.acl.NotOwnerException;
  public abstract void setName(java.security.Principal, java.lang.String)  throws java.security.acl.NotOwnerException;
  public abstract java.lang.String getName();
  public abstract java.lang.String toString();
  public abstract java.util.Enumeration entries();
  public abstract java.util.Enumeration getPermissions(java.security.Principal);
}
public interface java.security.acl.AclEntry
  extends java.lang.Cloneable
{
  public abstract boolean addPermission(java.security.acl.Permission);
  public abstract boolean checkPermission(java.security.acl.Permission);
  public abstract boolean isNegative();
  public abstract boolean removePermission(java.security.acl.Permission);
  public abstract boolean setPrincipal(java.security.Principal);
  public abstract void setNegativePermissions();
  public abstract java.lang.Object clone();
  public abstract java.lang.String toString();
  public abstract java.security.Principal getPrincipal();
  public abstract java.util.Enumeration permissions();
}
public class java.security.acl.AclNotFoundException
  extends java.lang.Exception
{
  public void <init>();
}
public interface java.security.acl.Group
  extends java.security.Principal
{
  public abstract boolean addMember(java.security.Principal);
  public abstract boolean isMember(java.security.Principal);
  public abstract boolean removeMember(java.security.Principal);
  public abstract java.util.Enumeration members();
}
public class java.security.acl.LastOwnerException
  extends java.lang.Exception
{
  public void <init>();
}
public class java.security.acl.NotOwnerException
  extends java.lang.Exception
{
  public void <init>();
}
public interface java.security.acl.Owner
{
  public abstract boolean addOwner(java.security.Principal, java.security.Principal)  throws java.security.acl.NotOwnerException;
  public abstract boolean deleteOwner(java.security.Principal, java.security.Principal)  throws java.security.acl.LastOwnerException, java.security.acl.NotOwnerException;
  public abstract boolean isOwner(java.security.Principal);
}
public interface java.security.acl.Permission
{
}
public abstract class java.security.cert.CRL
  extends java.lang.Object
{
  public final java.lang.String getType();
  public abstract boolean isRevoked(java.security.cert.Certificate);
  public abstract java.lang.String toString();
  protected void <init>(java.lang.String);
}
public class java.security.cert.CRLException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public final class java.security.cert.CRLReason
  extends java.lang.Enum
{
  public static java.security.cert.CRLReason valueOf(java.lang.String);
  public static java.security.cert.CRLReason[] values();
  public static final java.security.cert.CRLReason AA_COMPROMISE;
  public static final java.security.cert.CRLReason AFFILIATION_CHANGED;
  public static final java.security.cert.CRLReason CA_COMPROMISE;
  public static final java.security.cert.CRLReason CERTIFICATE_HOLD;
  public static final java.security.cert.CRLReason CESSATION_OF_OPERATION;
  public static final java.security.cert.CRLReason KEY_COMPROMISE;
  public static final java.security.cert.CRLReason PRIVILEGE_WITHDRAWN;
  public static final java.security.cert.CRLReason REMOVE_FROM_CRL;
  public static final java.security.cert.CRLReason SUPERSEDED;
  public static final java.security.cert.CRLReason UNSPECIFIED;
  public static final java.security.cert.CRLReason UNUSED;
}
public interface java.security.cert.CRLSelector
  extends java.lang.Cloneable
{
  public abstract boolean match(java.security.cert.CRL);
  public abstract java.lang.Object clone();
}
public abstract class java.security.cert.CertPath
  extends java.lang.Object
  implements java.io.Serializable
{
  public abstract byte[] getEncoded()  throws java.security.cert.CertificateEncodingException;
  public abstract byte[] getEncoded(java.lang.String)  throws java.security.cert.CertificateEncodingException;
  public abstract java.util.Iterator getEncodings();
  public abstract java.util.List getCertificates();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String getType();
  public java.lang.String toString();
  protected void <init>(java.lang.String);
  protected java.lang.Object writeReplace()  throws java.io.ObjectStreamException;
}
public class java.security.cert.CertPath$CertPathRep
  extends java.lang.Object
  implements java.io.Serializable
{
  protected void <init>(java.lang.String, byte[]);
  protected java.lang.Object readResolve()  throws java.io.ObjectStreamException;
}
public class java.security.cert.CertPathBuilder
  extends java.lang.Object
{
  public static final java.lang.String getDefaultType();
  public static java.security.cert.CertPathBuilder getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.cert.CertPathBuilder getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.cert.CertPathBuilder getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.cert.CertPathBuilderException;
  public final java.security.cert.CertPathChecker getRevocationChecker();
  protected void <init>(java.security.cert.CertPathBuilderSpi, java.security.Provider, java.lang.String);
}
public class java.security.cert.CertPathBuilderException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.security.cert.CertPathBuilderResult
  extends java.lang.Cloneable
{
  public abstract java.lang.Object clone();
  public abstract java.security.cert.CertPath getCertPath();
}
public abstract class java.security.cert.CertPathBuilderSpi
  extends java.lang.Object
{
  public void <init>();
  public abstract java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.cert.CertPathBuilderException;
  public java.security.cert.CertPathChecker engineGetRevocationChecker();
}
public interface java.security.cert.CertPathChecker
{
  public abstract boolean isForwardCheckingSupported();
  public abstract void check(java.security.cert.Certificate)  throws java.security.cert.CertPathValidatorException;
  public abstract void init(boolean)  throws java.security.cert.CertPathValidatorException;
}
public interface java.security.cert.CertPathParameters
  extends java.lang.Cloneable
{
  public abstract java.lang.Object clone();
}
public class java.security.cert.CertPathValidator
  extends java.lang.Object
{
  public static final java.lang.String getDefaultType();
  public static java.security.cert.CertPathValidator getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static java.security.cert.CertPathValidator getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.cert.CertPathValidator getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final java.security.cert.CertPathChecker getRevocationChecker();
  public final java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath, java.security.cert.CertPathParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.cert.CertPathValidatorException;
  protected void <init>(java.security.cert.CertPathValidatorSpi, java.security.Provider, java.lang.String);
}
public class java.security.cert.CertPathValidatorException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable, java.security.cert.CertPath, int);
  public void <init>(java.lang.String, java.lang.Throwable, java.security.cert.CertPath, int, java.security.cert.CertPathValidatorException$Reason);
  public void <init>(java.lang.Throwable);
  public int getIndex();
  public java.security.cert.CertPath getCertPath();
  public java.security.cert.CertPathValidatorException$Reason getReason();
}
public final class java.security.cert.CertPathValidatorException$BasicReason
  extends java.lang.Enum
  implements java.security.cert.CertPathValidatorException$Reason
{
  public static java.security.cert.CertPathValidatorException$BasicReason valueOf(java.lang.String);
  public static java.security.cert.CertPathValidatorException$BasicReason[] values();
  public static final java.security.cert.CertPathValidatorException$BasicReason ALGORITHM_CONSTRAINED;
  public static final java.security.cert.CertPathValidatorException$BasicReason EXPIRED;
  public static final java.security.cert.CertPathValidatorException$BasicReason INVALID_SIGNATURE;
  public static final java.security.cert.CertPathValidatorException$BasicReason NOT_YET_VALID;
  public static final java.security.cert.CertPathValidatorException$BasicReason REVOKED;
  public static final java.security.cert.CertPathValidatorException$BasicReason UNDETERMINED_REVOCATION_STATUS;
  public static final java.security.cert.CertPathValidatorException$BasicReason UNSPECIFIED;
}
public interface java.security.cert.CertPathValidatorException$Reason
  extends java.io.Serializable
{
}
public interface java.security.cert.CertPathValidatorResult
  extends java.lang.Cloneable
{
  public abstract java.lang.Object clone();
}
public abstract class java.security.cert.CertPathValidatorSpi
  extends java.lang.Object
{
  public void <init>();
  public abstract java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath, java.security.cert.CertPathParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.cert.CertPathValidatorException;
  public java.security.cert.CertPathChecker engineGetRevocationChecker();
}
public interface java.security.cert.CertSelector
  extends java.lang.Cloneable
{
  public abstract boolean match(java.security.cert.Certificate);
  public abstract java.lang.Object clone();
}
public class java.security.cert.CertStore
  extends java.lang.Object
{
  public static final java.lang.String getDefaultType();
  public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException;
  public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters, java.lang.String)  throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters, java.security.Provider)  throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException;
  public final java.lang.String getType();
  public final java.security.Provider getProvider();
  public final java.security.cert.CertStoreParameters getCertStoreParameters();
  public final java.util.Collection getCRLs(java.security.cert.CRLSelector)  throws java.security.cert.CertStoreException;
  public final java.util.Collection getCertificates(java.security.cert.CertSelector)  throws java.security.cert.CertStoreException;
  protected void <init>(java.security.cert.CertStoreSpi, java.security.Provider, java.lang.String, java.security.cert.CertStoreParameters);
}
public class java.security.cert.CertStoreException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.security.cert.CertStoreParameters
  extends java.lang.Cloneable
{
  public abstract java.lang.Object clone();
}
public abstract class java.security.cert.CertStoreSpi
  extends java.lang.Object
{
  public void <init>(java.security.cert.CertStoreParameters)  throws java.security.InvalidAlgorithmParameterException;
  public abstract java.util.Collection engineGetCRLs(java.security.cert.CRLSelector)  throws java.security.cert.CertStoreException;
  public abstract java.util.Collection engineGetCertificates(java.security.cert.CertSelector)  throws java.security.cert.CertStoreException;
}
public abstract class java.security.cert.Certificate
  extends java.lang.Object
  implements java.io.Serializable
{
  public final java.lang.String getType();
  public abstract void verify(java.security.PublicKey)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CertificateException;
  public abstract void verify(java.security.PublicKey, java.lang.String)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CertificateException;
  public abstract byte[] getEncoded()  throws java.security.cert.CertificateEncodingException;
  public abstract java.lang.String toString();
  public abstract java.security.PublicKey getPublicKey();
  public boolean equals(java.lang.Object);
  public int hashCode();
  protected void <init>(java.lang.String);
  protected java.lang.Object writeReplace()  throws java.io.ObjectStreamException;
}
public class java.security.cert.Certificate$CertificateRep
  extends java.lang.Object
  implements java.io.Serializable
{
  protected void <init>(java.lang.String, byte[]);
  protected java.lang.Object readResolve()  throws java.io.ObjectStreamException;
}
public class java.security.cert.CertificateEncodingException
  extends java.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.cert.CertificateException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.cert.CertificateExpiredException
  extends java.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.security.cert.CertificateFactory
  extends java.lang.Object
{
  public static final java.security.cert.CertificateFactory getInstance(java.lang.String)  throws java.security.cert.CertificateException;
  public static final java.security.cert.CertificateFactory getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchProviderException, java.security.cert.CertificateException;
  public static final java.security.cert.CertificateFactory getInstance(java.lang.String, java.security.Provider)  throws java.security.cert.CertificateException;
  public final java.lang.String getType();
  public final java.security.Provider getProvider();
  public final java.security.cert.CRL generateCRL(java.io.InputStream)  throws java.security.cert.CRLException;
  public final java.security.cert.CertPath generateCertPath(java.io.InputStream)  throws java.security.cert.CertificateException;
  public final java.security.cert.CertPath generateCertPath(java.io.InputStream, java.lang.String)  throws java.security.cert.CertificateException;
  public final java.security.cert.CertPath generateCertPath(java.util.List)  throws java.security.cert.CertificateException;
  public final java.security.cert.Certificate generateCertificate(java.io.InputStream)  throws java.security.cert.CertificateException;
  public final java.util.Collection generateCRLs(java.io.InputStream)  throws java.security.cert.CRLException;
  public final java.util.Collection generateCertificates(java.io.InputStream)  throws java.security.cert.CertificateException;
  public final java.util.Iterator getCertPathEncodings();
  protected void <init>(java.security.cert.CertificateFactorySpi, java.security.Provider, java.lang.String);
}
public abstract class java.security.cert.CertificateFactorySpi
  extends java.lang.Object
{
  public void <init>();
  public abstract java.security.cert.CRL engineGenerateCRL(java.io.InputStream)  throws java.security.cert.CRLException;
  public abstract java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)  throws java.security.cert.CertificateException;
  public abstract java.util.Collection engineGenerateCRLs(java.io.InputStream)  throws java.security.cert.CRLException;
  public abstract java.util.Collection engineGenerateCertificates(java.io.InputStream)  throws java.security.cert.CertificateException;
  public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)  throws java.security.cert.CertificateException;
  public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream, java.lang.String)  throws java.security.cert.CertificateException;
  public java.security.cert.CertPath engineGenerateCertPath(java.util.List)  throws java.security.cert.CertificateException;
  public java.util.Iterator engineGetCertPathEncodings();
}
public class java.security.cert.CertificateNotYetValidException
  extends java.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.security.cert.CertificateParsingException
  extends java.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.cert.CertificateRevokedException
  extends java.security.cert.CertificateException
{
  public void <init>(java.util.Date, java.security.cert.CRLReason, javax.security.auth.x500.X500Principal, java.util.Map);
  public java.lang.String getMessage();
  public java.security.cert.CRLReason getRevocationReason();
  public java.util.Date getInvalidityDate();
  public java.util.Date getRevocationDate();
  public java.util.Map getExtensions();
  public javax.security.auth.x500.X500Principal getAuthorityName();
}
public class java.security.cert.CollectionCertStoreParameters
  extends java.lang.Object
  implements java.security.cert.CertStoreParameters
{
  public void <init>();
  public void <init>(java.util.Collection);
  public java.lang.Object clone();
  public java.lang.String toString();
  public java.util.Collection getCollection();
}
public interface java.security.cert.Extension
{
  public abstract boolean isCritical();
  public abstract void encode(java.io.OutputStream)  throws java.io.IOException;
  public abstract byte[] getValue();
  public abstract java.lang.String getId();
}
public class java.security.cert.LDAPCertStoreParameters
  extends java.lang.Object
  implements java.security.cert.CertStoreParameters
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int);
  public int getPort();
  public java.lang.Object clone();
  public java.lang.String getServerName();
  public java.lang.String toString();
}
public class java.security.cert.PKIXBuilderParameters
  extends java.security.cert.PKIXParameters
{
  public void <init>(java.security.KeyStore, java.security.cert.CertSelector)  throws java.security.InvalidAlgorithmParameterException, java.security.KeyStoreException;
  public void <init>(java.util.Set, java.security.cert.CertSelector)  throws java.security.InvalidAlgorithmParameterException;
  public int getMaxPathLength();
  public void setMaxPathLength(int);
  public java.lang.String toString();
}
public class java.security.cert.PKIXCertPathBuilderResult
  extends java.security.cert.PKIXCertPathValidatorResult
  implements java.security.cert.CertPathBuilderResult
{
  public void <init>(java.security.cert.CertPath, java.security.cert.TrustAnchor, java.security.cert.PolicyNode, java.security.PublicKey);
  public java.lang.String toString();
  public java.security.cert.CertPath getCertPath();
}
public abstract class java.security.cert.PKIXCertPathChecker
  extends java.lang.Object
  implements java.security.cert.CertPathChecker, java.lang.Cloneable
{
  public abstract boolean isForwardCheckingSupported();
  public abstract void check(java.security.cert.Certificate, java.util.Collection)  throws java.security.cert.CertPathValidatorException;
  public abstract void init(boolean)  throws java.security.cert.CertPathValidatorException;
  public abstract java.util.Set getSupportedExtensions();
  public void check(java.security.cert.Certificate)  throws java.security.cert.CertPathValidatorException;
  public java.lang.Object clone();
  protected void <init>();
}
public class java.security.cert.PKIXCertPathValidatorResult
  extends java.lang.Object
  implements java.security.cert.CertPathValidatorResult
{
  public void <init>(java.security.cert.TrustAnchor, java.security.cert.PolicyNode, java.security.PublicKey);
  public java.lang.Object clone();
  public java.lang.String toString();
  public java.security.PublicKey getPublicKey();
  public java.security.cert.PolicyNode getPolicyTree();
  public java.security.cert.TrustAnchor getTrustAnchor();
}
public class java.security.cert.PKIXParameters
  extends java.lang.Object
  implements java.security.cert.CertPathParameters
{
  public void <init>(java.security.KeyStore)  throws java.security.InvalidAlgorithmParameterException, java.security.KeyStoreException;
  public void <init>(java.util.Set)  throws java.security.InvalidAlgorithmParameterException;
  public boolean getPolicyQualifiersRejected();
  public boolean isAnyPolicyInhibited();
  public boolean isExplicitPolicyRequired();
  public boolean isPolicyMappingInhibited();
  public boolean isRevocationEnabled();
  public void addCertPathChecker(java.security.cert.PKIXCertPathChecker);
  public void addCertStore(java.security.cert.CertStore);
  public void setAnyPolicyInhibited(boolean);
  public void setCertPathCheckers(java.util.List);
  public void setCertStores(java.util.List);
  public void setDate(java.util.Date);
  public void setExplicitPolicyRequired(boolean);
  public void setInitialPolicies(java.util.Set);
  public void setPolicyMappingInhibited(boolean);
  public void setPolicyQualifiersRejected(boolean);
  public void setRevocationEnabled(boolean);
  public void setSigProvider(java.lang.String);
  public void setTargetCertConstraints(java.security.cert.CertSelector);
  public void setTrustAnchors(java.util.Set)  throws java.security.InvalidAlgorithmParameterException;
  public java.lang.Object clone();
  public java.lang.String getSigProvider();
  public java.lang.String toString();
  public java.security.cert.CertSelector getTargetCertConstraints();
  public java.util.Date getDate();
  public java.util.List getCertPathCheckers();
  public java.util.List getCertStores();
  public java.util.Set getInitialPolicies();
  public java.util.Set getTrustAnchors();
}
public final class java.security.cert.PKIXReason
  extends java.lang.Enum
  implements java.security.cert.CertPathValidatorException$Reason
{
  public static java.security.cert.PKIXReason valueOf(java.lang.String);
  public static java.security.cert.PKIXReason[] values();
  public static final java.security.cert.PKIXReason INVALID_KEY_USAGE;
  public static final java.security.cert.PKIXReason INVALID_NAME;
  public static final java.security.cert.PKIXReason INVALID_POLICY;
  public static final java.security.cert.PKIXReason NAME_CHAINING;
  public static final java.security.cert.PKIXReason NOT_CA_CERT;
  public static final java.security.cert.PKIXReason NO_TRUST_ANCHOR;
  public static final java.security.cert.PKIXReason PATH_TOO_LONG;
  public static final java.security.cert.PKIXReason UNRECOGNIZED_CRIT_EXT;
}
public abstract class java.security.cert.PKIXRevocationChecker
  extends java.security.cert.PKIXCertPathChecker
{
  public abstract java.util.List getSoftFailExceptions();
  public void setOcspExtensions(java.util.List);
  public void setOcspResponder(java.net.URI);
  public void setOcspResponderCert(java.security.cert.X509Certificate);
  public void setOcspResponses(java.util.Map);
  public void setOptions(java.util.Set);
  public java.lang.Object clone();
  public java.net.URI getOcspResponder();
  public java.security.cert.PKIXRevocationChecker clone();
  public java.security.cert.X509Certificate getOcspResponderCert();
  public java.util.List getOcspExtensions();
  public java.util.Map getOcspResponses();
  public java.util.Set getOptions();
  protected void <init>();
}
public final class java.security.cert.PKIXRevocationChecker$Option
  extends java.lang.Enum
{
  public static java.security.cert.PKIXRevocationChecker$Option valueOf(java.lang.String);
  public static java.security.cert.PKIXRevocationChecker$Option[] values();
  public static final java.security.cert.PKIXRevocationChecker$Option NO_FALLBACK;
  public static final java.security.cert.PKIXRevocationChecker$Option ONLY_END_ENTITY;
  public static final java.security.cert.PKIXRevocationChecker$Option PREFER_CRLS;
  public static final java.security.cert.PKIXRevocationChecker$Option SOFT_FAIL;
}
public interface java.security.cert.PolicyNode
{
  public abstract boolean isCritical();
  public abstract int getDepth();
  public abstract java.lang.String getValidPolicy();
  public abstract java.security.cert.PolicyNode getParent();
  public abstract java.util.Iterator getChildren();
  public abstract java.util.Set getExpectedPolicies();
  public abstract java.util.Set getPolicyQualifiers();
}
public class java.security.cert.PolicyQualifierInfo
  extends java.lang.Object
{
  public void <init>(byte[])  throws java.io.IOException;
  public final byte[] getEncoded();
  public final byte[] getPolicyQualifier();
  public final java.lang.String getPolicyQualifierId();
  public java.lang.String toString();
}
public class java.security.cert.TrustAnchor
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.security.PublicKey, byte[]);
  public void <init>(java.security.cert.X509Certificate, byte[]);
  public void <init>(javax.security.auth.x500.X500Principal, java.security.PublicKey, byte[]);
  public final byte[] getNameConstraints();
  public final java.lang.String getCAName();
  public final java.security.PublicKey getCAPublicKey();
  public final java.security.cert.X509Certificate getTrustedCert();
  public final javax.security.auth.x500.X500Principal getCA();
  public java.lang.String toString();
}
public abstract class java.security.cert.X509CRL
  extends java.security.cert.CRL
  implements java.security.cert.X509Extension
{
  public abstract int getVersion();
  public abstract void verify(java.security.PublicKey)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CRLException;
  public abstract void verify(java.security.PublicKey, java.lang.String)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CRLException;
  public abstract byte[] getEncoded()  throws java.security.cert.CRLException;
  public abstract byte[] getSigAlgParams();
  public abstract byte[] getSignature();
  public abstract byte[] getTBSCertList()  throws java.security.cert.CRLException;
  public abstract java.lang.String getSigAlgName();
  public abstract java.lang.String getSigAlgOID();
  public abstract java.security.Principal getIssuerDN();
  public abstract java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger);
  public abstract java.util.Date getNextUpdate();
  public abstract java.util.Date getThisUpdate();
  public abstract java.util.Set getRevokedCertificates();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate);
  public javax.security.auth.x500.X500Principal getIssuerX500Principal();
  protected void <init>();
}
public abstract class java.security.cert.X509CRLEntry
  extends java.lang.Object
  implements java.security.cert.X509Extension
{
  public void <init>();
  public abstract boolean hasExtensions();
  public abstract byte[] getEncoded()  throws java.security.cert.CRLException;
  public abstract java.lang.String toString();
  public abstract java.math.BigInteger getSerialNumber();
  public abstract java.util.Date getRevocationDate();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.security.cert.CRLReason getRevocationReason();
  public javax.security.auth.x500.X500Principal getCertificateIssuer();
}
public class java.security.cert.X509CRLSelector
  extends java.lang.Object
  implements java.security.cert.CRLSelector
{
  public void <init>();
  public boolean match(java.security.cert.CRL);
  public void addIssuer(javax.security.auth.x500.X500Principal);
  public void addIssuerName(byte[])  throws java.io.IOException;
  public void addIssuerName(java.lang.String)  throws java.io.IOException;
  public void setCertificateChecking(java.security.cert.X509Certificate);
  public void setDateAndTime(java.util.Date);
  public void setIssuerNames(java.util.Collection)  throws java.io.IOException;
  public void setIssuers(java.util.Collection);
  public void setMaxCRLNumber(java.math.BigInteger);
  public void setMinCRLNumber(java.math.BigInteger);
  public java.lang.Object clone();
  public java.lang.String toString();
  public java.math.BigInteger getMaxCRL();
  public java.math.BigInteger getMinCRL();
  public java.security.cert.X509Certificate getCertificateChecking();
  public java.util.Collection getIssuerNames();
  public java.util.Collection getIssuers();
  public java.util.Date getDateAndTime();
}
public class java.security.cert.X509CertSelector
  extends java.lang.Object
  implements java.security.cert.CertSelector
{
  public void <init>();
  public boolean getMatchAllSubjectAltNames();
  public boolean match(java.security.cert.Certificate);
  public int getBasicConstraints();
  public void addPathToName(int, byte[])  throws java.io.IOException;
  public void addPathToName(int, java.lang.String)  throws java.io.IOException;
  public void addSubjectAlternativeName(int, byte[])  throws java.io.IOException;
  public void addSubjectAlternativeName(int, java.lang.String)  throws java.io.IOException;
  public void setAuthorityKeyIdentifier(byte[]);
  public void setBasicConstraints(int);
  public void setCertificate(java.security.cert.X509Certificate);
  public void setCertificateValid(java.util.Date);
  public void setExtendedKeyUsage(java.util.Set)  throws java.io.IOException;
  public void setIssuer(byte[])  throws java.io.IOException;
  public void setIssuer(java.lang.String)  throws java.io.IOException;
  public void setIssuer(javax.security.auth.x500.X500Principal);
  public void setKeyUsage(boolean[]);
  public void setMatchAllSubjectAltNames(boolean);
  public void setNameConstraints(byte[])  throws java.io.IOException;
  public void setPathToNames(java.util.Collection)  throws java.io.IOException;
  public void setPolicy(java.util.Set)  throws java.io.IOException;
  public void setPrivateKeyValid(java.util.Date);
  public void setSerialNumber(java.math.BigInteger);
  public void setSubject(byte[])  throws java.io.IOException;
  public void setSubject(java.lang.String)  throws java.io.IOException;
  public void setSubject(javax.security.auth.x500.X500Principal);
  public void setSubjectAlternativeNames(java.util.Collection)  throws java.io.IOException;
  public void setSubjectKeyIdentifier(byte[]);
  public void setSubjectPublicKey(byte[])  throws java.io.IOException;
  public void setSubjectPublicKey(java.security.PublicKey);
  public void setSubjectPublicKeyAlgID(java.lang.String)  throws java.io.IOException;
  public boolean[] getKeyUsage();
  public byte[] getAuthorityKeyIdentifier();
  public byte[] getIssuerAsBytes()  throws java.io.IOException;
  public byte[] getNameConstraints();
  public byte[] getSubjectAsBytes()  throws java.io.IOException;
  public byte[] getSubjectKeyIdentifier();
  public java.lang.Object clone();
  public java.lang.String getIssuerAsString();
  public java.lang.String getSubjectAsString();
  public java.lang.String getSubjectPublicKeyAlgID();
  public java.lang.String toString();
  public java.math.BigInteger getSerialNumber();
  public java.security.PublicKey getSubjectPublicKey();
  public java.security.cert.X509Certificate getCertificate();
  public java.util.Collection getPathToNames();
  public java.util.Collection getSubjectAlternativeNames();
  public java.util.Date getCertificateValid();
  public java.util.Date getPrivateKeyValid();
  public java.util.Set getExtendedKeyUsage();
  public java.util.Set getPolicy();
  public javax.security.auth.x500.X500Principal getIssuer();
  public javax.security.auth.x500.X500Principal getSubject();
}
public abstract class java.security.cert.X509Certificate
  extends java.security.cert.Certificate
  implements java.security.cert.X509Extension
{
  public abstract int getBasicConstraints();
  public abstract int getVersion();
  public abstract void checkValidity()  throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;
  public abstract void checkValidity(java.util.Date)  throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;
  public abstract boolean[] getIssuerUniqueID();
  public abstract boolean[] getKeyUsage();
  public abstract boolean[] getSubjectUniqueID();
  public abstract byte[] getSigAlgParams();
  public abstract byte[] getSignature();
  public abstract byte[] getTBSCertificate()  throws java.security.cert.CertificateEncodingException;
  public abstract java.lang.String getSigAlgName();
  public abstract java.lang.String getSigAlgOID();
  public abstract java.math.BigInteger getSerialNumber();
  public abstract java.security.Principal getIssuerDN();
  public abstract java.security.Principal getSubjectDN();
  public abstract java.util.Date getNotAfter();
  public abstract java.util.Date getNotBefore();
  public void verify(java.security.PublicKey, java.security.Provider)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateException;
  public java.util.Collection getIssuerAlternativeNames()  throws java.security.cert.CertificateParsingException;
  public java.util.Collection getSubjectAlternativeNames()  throws java.security.cert.CertificateParsingException;
  public java.util.List getExtendedKeyUsage()  throws java.security.cert.CertificateParsingException;
  public javax.security.auth.x500.X500Principal getIssuerX500Principal();
  public javax.security.auth.x500.X500Principal getSubjectX500Principal();
  protected void <init>();
}
public interface java.security.cert.X509Extension
{
  public abstract boolean hasUnsupportedCriticalExtension();
  public abstract byte[] getExtensionValue(java.lang.String);
  public abstract java.util.Set getCriticalExtensionOIDs();
  public abstract java.util.Set getNonCriticalExtensionOIDs();
}
public interface java.security.interfaces.DSAKey
{
  public abstract java.security.interfaces.DSAParams getParams();
}
public interface java.security.interfaces.DSAKeyPairGenerator
{
  public abstract void initialize(int, boolean, java.security.SecureRandom)  throws java.security.InvalidParameterException;
  public abstract void initialize(java.security.interfaces.DSAParams, java.security.SecureRandom)  throws java.security.InvalidParameterException;
}
public interface java.security.interfaces.DSAParams
{
  public abstract java.math.BigInteger getG();
  public abstract java.math.BigInteger getP();
  public abstract java.math.BigInteger getQ();
}
public interface java.security.interfaces.DSAPrivateKey
  extends java.security.interfaces.DSAKey, java.security.PrivateKey
{
  public abstract java.math.BigInteger getX();
  public static final long serialVersionUID;
}
public interface java.security.interfaces.DSAPublicKey
  extends java.security.interfaces.DSAKey, java.security.PublicKey
{
  public abstract java.math.BigInteger getY();
  public static final long serialVersionUID;
}
public interface java.security.interfaces.ECKey
{
  public abstract java.security.spec.ECParameterSpec getParams();
}
public interface java.security.interfaces.ECPrivateKey
  extends java.security.PrivateKey, java.security.interfaces.ECKey
{
  public abstract java.math.BigInteger getS();
  public static final long serialVersionUID;
}
public interface java.security.interfaces.ECPublicKey
  extends java.security.PublicKey, java.security.interfaces.ECKey
{
  public abstract java.security.spec.ECPoint getW();
  public static final long serialVersionUID;
}
public interface java.security.interfaces.RSAKey
{
  public abstract java.math.BigInteger getModulus();
}
public interface java.security.interfaces.RSAMultiPrimePrivateCrtKey
  extends java.security.interfaces.RSAPrivateKey
{
  public abstract java.math.BigInteger getCrtCoefficient();
  public abstract java.math.BigInteger getPrimeExponentP();
  public abstract java.math.BigInteger getPrimeExponentQ();
  public abstract java.math.BigInteger getPrimeP();
  public abstract java.math.BigInteger getPrimeQ();
  public abstract java.math.BigInteger getPublicExponent();
  public abstract java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo();
  public static final long serialVersionUID;
}
public interface java.security.interfaces.RSAPrivateCrtKey
  extends java.security.interfaces.RSAPrivateKey
{
  public abstract java.math.BigInteger getCrtCoefficient();
  public abstract java.math.BigInteger getPrimeExponentP();
  public abstract java.math.BigInteger getPrimeExponentQ();
  public abstract java.math.BigInteger getPrimeP();
  public abstract java.math.BigInteger getPrimeQ();
  public abstract java.math.BigInteger getPublicExponent();
  public static final long serialVersionUID;
}
public interface java.security.interfaces.RSAPrivateKey
  extends java.security.PrivateKey, java.security.interfaces.RSAKey
{
  public abstract java.math.BigInteger getPrivateExponent();
  public static final long serialVersionUID;
}
public interface java.security.interfaces.RSAPublicKey
  extends java.security.PublicKey, java.security.interfaces.RSAKey
{
  public abstract java.math.BigInteger getPublicExponent();
  public static final long serialVersionUID;
}
public interface java.security.spec.AlgorithmParameterSpec
{
}
public class java.security.spec.DSAParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec, java.security.interfaces.DSAParams
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
  public java.math.BigInteger getQ();
}
public class java.security.spec.DSAPrivateKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
  public java.math.BigInteger getQ();
  public java.math.BigInteger getX();
}
public class java.security.spec.DSAPublicKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
  public java.math.BigInteger getQ();
  public java.math.BigInteger getY();
}
public interface java.security.spec.ECField
{
  public abstract int getFieldSize();
}
public class java.security.spec.ECFieldF2m
  extends java.lang.Object
  implements java.security.spec.ECField
{
  public void <init>(int);
  public void <init>(int, int[]);
  public void <init>(int, java.math.BigInteger);
  public boolean equals(java.lang.Object);
  public int getFieldSize();
  public int getM();
  public int hashCode();
  public int[] getMidTermsOfReductionPolynomial();
  public java.math.BigInteger getReductionPolynomial();
}
public class java.security.spec.ECFieldFp
  extends java.lang.Object
  implements java.security.spec.ECField
{
  public void <init>(java.math.BigInteger);
  public boolean equals(java.lang.Object);
  public int getFieldSize();
  public int hashCode();
  public java.math.BigInteger getP();
}
public class java.security.spec.ECGenParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(java.lang.String);
  public java.lang.String getName();
}
public class java.security.spec.ECParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(java.security.spec.EllipticCurve, java.security.spec.ECPoint, java.math.BigInteger, int);
  public int getCofactor();
  public java.math.BigInteger getOrder();
  public java.security.spec.ECPoint getGenerator();
  public java.security.spec.EllipticCurve getCurve();
}
public class java.security.spec.ECPoint
  extends java.lang.Object
{
  public void <init>(java.math.BigInteger, java.math.BigInteger);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.math.BigInteger getAffineX();
  public java.math.BigInteger getAffineY();
  public static final java.security.spec.ECPoint POINT_INFINITY;
}
public class java.security.spec.ECPrivateKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.math.BigInteger, java.security.spec.ECParameterSpec);
  public java.math.BigInteger getS();
  public java.security.spec.ECParameterSpec getParams();
}
public class java.security.spec.ECPublicKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.security.spec.ECPoint, java.security.spec.ECParameterSpec);
  public java.security.spec.ECParameterSpec getParams();
  public java.security.spec.ECPoint getW();
}
public class java.security.spec.EllipticCurve
  extends java.lang.Object
{
  public void <init>(java.security.spec.ECField, java.math.BigInteger, java.math.BigInteger);
  public void <init>(java.security.spec.ECField, java.math.BigInteger, java.math.BigInteger, byte[]);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public byte[] getSeed();
  public java.math.BigInteger getA();
  public java.math.BigInteger getB();
  public java.security.spec.ECField getField();
}
public abstract class java.security.spec.EncodedKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(byte[]);
  public abstract java.lang.String getFormat();
  public byte[] getEncoded();
}
public class java.security.spec.InvalidKeySpecException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.security.spec.InvalidParameterSpecException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.security.spec.KeySpec
{
}
public class java.security.spec.MGF1ParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(java.lang.String);
  public java.lang.String getDigestAlgorithm();
  public static final java.security.spec.MGF1ParameterSpec SHA1;
  public static final java.security.spec.MGF1ParameterSpec SHA256;
  public static final java.security.spec.MGF1ParameterSpec SHA384;
  public static final java.security.spec.MGF1ParameterSpec SHA512;
}
public class java.security.spec.PKCS8EncodedKeySpec
  extends java.security.spec.EncodedKeySpec
{
  public void <init>(byte[]);
  public final java.lang.String getFormat();
  public byte[] getEncoded();
}
public class java.security.spec.PSSParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(int);
  public void <init>(java.lang.String, java.lang.String, java.security.spec.AlgorithmParameterSpec, int, int);
  public int getSaltLength();
  public int getTrailerField();
  public java.lang.String getDigestAlgorithm();
  public java.lang.String getMGFAlgorithm();
  public java.security.spec.AlgorithmParameterSpec getMGFParameters();
  public static final java.security.spec.PSSParameterSpec DEFAULT;
}
public class java.security.spec.RSAKeyGenParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(int, java.math.BigInteger);
  public int getKeysize();
  public java.math.BigInteger getPublicExponent();
  public static final java.math.BigInteger F0;
  public static final java.math.BigInteger F4;
}
public class java.security.spec.RSAMultiPrimePrivateCrtKeySpec
  extends java.security.spec.RSAPrivateKeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.security.spec.RSAOtherPrimeInfo[]);
  public java.math.BigInteger getCrtCoefficient();
  public java.math.BigInteger getPrimeExponentP();
  public java.math.BigInteger getPrimeExponentQ();
  public java.math.BigInteger getPrimeP();
  public java.math.BigInteger getPrimeQ();
  public java.math.BigInteger getPublicExponent();
  public java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo();
}
public class java.security.spec.RSAOtherPrimeInfo
  extends java.lang.Object
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public final java.math.BigInteger getCrtCoefficient();
  public final java.math.BigInteger getExponent();
  public final java.math.BigInteger getPrime();
}
public class java.security.spec.RSAPrivateCrtKeySpec
  extends java.security.spec.RSAPrivateKeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getCrtCoefficient();
  public java.math.BigInteger getPrimeExponentP();
  public java.math.BigInteger getPrimeExponentQ();
  public java.math.BigInteger getPrimeP();
  public java.math.BigInteger getPrimeQ();
  public java.math.BigInteger getPublicExponent();
}
public class java.security.spec.RSAPrivateKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getModulus();
  public java.math.BigInteger getPrivateExponent();
}
public class java.security.spec.RSAPublicKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getModulus();
  public java.math.BigInteger getPublicExponent();
}
public class java.security.spec.X509EncodedKeySpec
  extends java.security.spec.EncodedKeySpec
{
  public void <init>(byte[]);
  public final java.lang.String getFormat();
  public byte[] getEncoded();
}
public interface java.sql.Array
{
  public abstract int getBaseType()  throws java.sql.SQLException;
  public abstract void free()  throws java.sql.SQLException;
  public abstract java.lang.Object getArray()  throws java.sql.SQLException;
  public abstract java.lang.Object getArray(java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.Object getArray(long, int)  throws java.sql.SQLException;
  public abstract java.lang.Object getArray(long, int, java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.String getBaseTypeName()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getResultSet()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getResultSet(java.util.Map)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getResultSet(long, int)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getResultSet(long, int, java.util.Map)  throws java.sql.SQLException;
}
public class java.sql.BatchUpdateException
  extends java.sql.SQLException
{
  public void <init>();
  public void <init>(int[]);
  public void <init>(int[], java.lang.Throwable);
  public void <init>(java.lang.String, int[]);
  public void <init>(java.lang.String, int[], java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, int, int[]);
  public void <init>(java.lang.String, java.lang.String, int, int[], java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, int[]);
  public void <init>(java.lang.String, java.lang.String, int[], java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  public int[] getUpdateCounts();
}
public interface java.sql.Blob
{
  public abstract int setBytes(long, byte[])  throws java.sql.SQLException;
  public abstract int setBytes(long, byte[], int, int)  throws java.sql.SQLException;
  public abstract long length()  throws java.sql.SQLException;
  public abstract long position(byte[], long)  throws java.sql.SQLException;
  public abstract long position(java.sql.Blob, long)  throws java.sql.SQLException;
  public abstract void free()  throws java.sql.SQLException;
  public abstract void truncate(long)  throws java.sql.SQLException;
  public abstract byte[] getBytes(long, int)  throws java.sql.SQLException;
  public abstract java.io.InputStream getBinaryStream()  throws java.sql.SQLException;
  public abstract java.io.InputStream getBinaryStream(long, long)  throws java.sql.SQLException;
  public abstract java.io.OutputStream setBinaryStream(long)  throws java.sql.SQLException;
}
public interface java.sql.CallableStatement
  extends java.sql.PreparedStatement
{
  public abstract boolean getBoolean(int)  throws java.sql.SQLException;
  public abstract boolean getBoolean(java.lang.String)  throws java.sql.SQLException;
  public abstract boolean wasNull()  throws java.sql.SQLException;
  public abstract byte getByte(int)  throws java.sql.SQLException;
  public abstract byte getByte(java.lang.String)  throws java.sql.SQLException;
  public abstract double getDouble(int)  throws java.sql.SQLException;
  public abstract double getDouble(java.lang.String)  throws java.sql.SQLException;
  public abstract float getFloat(int)  throws java.sql.SQLException;
  public abstract float getFloat(java.lang.String)  throws java.sql.SQLException;
  public abstract int getInt(int)  throws java.sql.SQLException;
  public abstract int getInt(java.lang.String)  throws java.sql.SQLException;
  public abstract long getLong(int)  throws java.sql.SQLException;
  public abstract long getLong(java.lang.String)  throws java.sql.SQLException;
  public abstract short getShort(int)  throws java.sql.SQLException;
  public abstract short getShort(java.lang.String)  throws java.sql.SQLException;
  public abstract void registerOutParameter(int, int)  throws java.sql.SQLException;
  public abstract void registerOutParameter(int, int, int)  throws java.sql.SQLException;
  public abstract void registerOutParameter(int, int, java.lang.String)  throws java.sql.SQLException;
  public abstract void registerOutParameter(java.lang.String, int)  throws java.sql.SQLException;
  public abstract void registerOutParameter(java.lang.String, int, int)  throws java.sql.SQLException;
  public abstract void registerOutParameter(java.lang.String, int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setAsciiStream(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setAsciiStream(java.lang.String, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setAsciiStream(java.lang.String, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBigDecimal(java.lang.String, java.math.BigDecimal)  throws java.sql.SQLException;
  public abstract void setBinaryStream(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBinaryStream(java.lang.String, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setBinaryStream(java.lang.String, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBlob(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBlob(java.lang.String, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBlob(java.lang.String, java.sql.Blob)  throws java.sql.SQLException;
  public abstract void setBoolean(java.lang.String, boolean)  throws java.sql.SQLException;
  public abstract void setByte(java.lang.String, byte)  throws java.sql.SQLException;
  public abstract void setBytes(java.lang.String, byte[])  throws java.sql.SQLException;
  public abstract void setCharacterStream(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setCharacterStream(java.lang.String, java.io.Reader, int)  throws java.sql.SQLException;
  public abstract void setCharacterStream(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setClob(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setClob(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setClob(java.lang.String, java.sql.Clob)  throws java.sql.SQLException;
  public abstract void setDate(java.lang.String, java.sql.Date)  throws java.sql.SQLException;
  public abstract void setDate(java.lang.String, java.sql.Date, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setDouble(java.lang.String, double)  throws java.sql.SQLException;
  public abstract void setFloat(java.lang.String, float)  throws java.sql.SQLException;
  public abstract void setInt(java.lang.String, int)  throws java.sql.SQLException;
  public abstract void setLong(java.lang.String, long)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNClob(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNClob(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNClob(java.lang.String, java.sql.NClob)  throws java.sql.SQLException;
  public abstract void setNString(java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract void setNull(java.lang.String, int)  throws java.sql.SQLException;
  public abstract void setNull(java.lang.String, int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setObject(java.lang.String, java.lang.Object)  throws java.sql.SQLException;
  public abstract void setObject(java.lang.String, java.lang.Object, int)  throws java.sql.SQLException;
  public abstract void setObject(java.lang.String, java.lang.Object, int, int)  throws java.sql.SQLException;
  public abstract void setRowId(java.lang.String, java.sql.RowId)  throws java.sql.SQLException;
  public abstract void setSQLXML(java.lang.String, java.sql.SQLXML)  throws java.sql.SQLException;
  public abstract void setShort(java.lang.String, short)  throws java.sql.SQLException;
  public abstract void setString(java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract void setTime(java.lang.String, java.sql.Time)  throws java.sql.SQLException;
  public abstract void setTime(java.lang.String, java.sql.Time, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setTimestamp(java.lang.String, java.sql.Timestamp)  throws java.sql.SQLException;
  public abstract void setTimestamp(java.lang.String, java.sql.Timestamp, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setURL(java.lang.String, java.net.URL)  throws java.sql.SQLException;
  public abstract byte[] getBytes(int)  throws java.sql.SQLException;
  public abstract byte[] getBytes(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.Reader getCharacterStream(int)  throws java.sql.SQLException;
  public abstract java.io.Reader getCharacterStream(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.Reader getNCharacterStream(int)  throws java.sql.SQLException;
  public abstract java.io.Reader getNCharacterStream(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(int)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(int, java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(java.lang.String, java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.String getNString(int)  throws java.sql.SQLException;
  public abstract java.lang.String getNString(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.String getString(int)  throws java.sql.SQLException;
  public abstract java.lang.String getString(java.lang.String)  throws java.sql.SQLException;
  public abstract java.math.BigDecimal getBigDecimal(int)  throws java.sql.SQLException;
  public abstract java.math.BigDecimal getBigDecimal(int, int)  throws java.sql.SQLException;
  public abstract java.math.BigDecimal getBigDecimal(java.lang.String)  throws java.sql.SQLException;
  public abstract java.net.URL getURL(int)  throws java.sql.SQLException;
  public abstract java.net.URL getURL(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Array getArray(int)  throws java.sql.SQLException;
  public abstract java.sql.Array getArray(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Blob getBlob(int)  throws java.sql.SQLException;
  public abstract java.sql.Blob getBlob(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Clob getClob(int)  throws java.sql.SQLException;
  public abstract java.sql.Clob getClob(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(int)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(int, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(java.lang.String, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.NClob getNClob(int)  throws java.sql.SQLException;
  public abstract java.sql.NClob getNClob(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Ref getRef(int)  throws java.sql.SQLException;
  public abstract java.sql.Ref getRef(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.RowId getRowId(int)  throws java.sql.SQLException;
  public abstract java.sql.RowId getRowId(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.SQLXML getSQLXML(int)  throws java.sql.SQLException;
  public abstract java.sql.SQLXML getSQLXML(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(int)  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(int, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(java.lang.String, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(int)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(int, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(java.lang.String, java.util.Calendar)  throws java.sql.SQLException;
}
public final class java.sql.ClientInfoStatus
  extends java.lang.Enum
{
  public static java.sql.ClientInfoStatus valueOf(java.lang.String);
  public static java.sql.ClientInfoStatus[] values();
  public static final java.sql.ClientInfoStatus REASON_UNKNOWN;
  public static final java.sql.ClientInfoStatus REASON_UNKNOWN_PROPERTY;
  public static final java.sql.ClientInfoStatus REASON_VALUE_INVALID;
  public static final java.sql.ClientInfoStatus REASON_VALUE_TRUNCATED;
}
public interface java.sql.Clob
{
  public abstract int setString(long, java.lang.String)  throws java.sql.SQLException;
  public abstract int setString(long, java.lang.String, int, int)  throws java.sql.SQLException;
  public abstract long length()  throws java.sql.SQLException;
  public abstract long position(java.lang.String, long)  throws java.sql.SQLException;
  public abstract long position(java.sql.Clob, long)  throws java.sql.SQLException;
  public abstract void free()  throws java.sql.SQLException;
  public abstract void truncate(long)  throws java.sql.SQLException;
  public abstract java.io.InputStream getAsciiStream()  throws java.sql.SQLException;
  public abstract java.io.OutputStream setAsciiStream(long)  throws java.sql.SQLException;
  public abstract java.io.Reader getCharacterStream()  throws java.sql.SQLException;
  public abstract java.io.Reader getCharacterStream(long, long)  throws java.sql.SQLException;
  public abstract java.io.Writer setCharacterStream(long)  throws java.sql.SQLException;
  public abstract java.lang.String getSubString(long, int)  throws java.sql.SQLException;
}
public interface java.sql.Connection
  extends java.sql.Wrapper, java.lang.AutoCloseable
{
  public abstract boolean getAutoCommit()  throws java.sql.SQLException;
  public abstract boolean isClosed()  throws java.sql.SQLException;
  public abstract boolean isReadOnly()  throws java.sql.SQLException;
  public abstract boolean isValid(int)  throws java.sql.SQLException;
  public abstract int getHoldability()  throws java.sql.SQLException;
  public abstract int getTransactionIsolation()  throws java.sql.SQLException;
  public abstract void clearWarnings()  throws java.sql.SQLException;
  public abstract void close()  throws java.sql.SQLException;
  public abstract void commit()  throws java.sql.SQLException;
  public abstract void releaseSavepoint(java.sql.Savepoint)  throws java.sql.SQLException;
  public abstract void rollback()  throws java.sql.SQLException;
  public abstract void rollback(java.sql.Savepoint)  throws java.sql.SQLException;
  public abstract void setAutoCommit(boolean)  throws java.sql.SQLException;
  public abstract void setCatalog(java.lang.String)  throws java.sql.SQLException;
  public abstract void setClientInfo(java.lang.String, java.lang.String)  throws java.sql.SQLClientInfoException;
  public abstract void setClientInfo(java.util.Properties)  throws java.sql.SQLClientInfoException;
  public abstract void setHoldability(int)  throws java.sql.SQLException;
  public abstract void setReadOnly(boolean)  throws java.sql.SQLException;
  public abstract void setTransactionIsolation(int)  throws java.sql.SQLException;
  public abstract void setTypeMap(java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.String getCatalog()  throws java.sql.SQLException;
  public abstract java.lang.String getClientInfo(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.String nativeSQL(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Array createArrayOf(java.lang.String, java.lang.Object[])  throws java.sql.SQLException;
  public abstract java.sql.Blob createBlob()  throws java.sql.SQLException;
  public abstract java.sql.CallableStatement prepareCall(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.CallableStatement prepareCall(java.lang.String, int, int)  throws java.sql.SQLException;
  public abstract java.sql.CallableStatement prepareCall(java.lang.String, int, int, int)  throws java.sql.SQLException;
  public abstract java.sql.Clob createClob()  throws java.sql.SQLException;
  public abstract java.sql.DatabaseMetaData getMetaData()  throws java.sql.SQLException;
  public abstract java.sql.NClob createNClob()  throws java.sql.SQLException;
  public abstract java.sql.PreparedStatement prepareStatement(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.PreparedStatement prepareStatement(java.lang.String, int)  throws java.sql.SQLException;
  public abstract java.sql.PreparedStatement prepareStatement(java.lang.String, int, int)  throws java.sql.SQLException;
  public abstract java.sql.PreparedStatement prepareStatement(java.lang.String, int, int, int)  throws java.sql.SQLException;
  public abstract java.sql.PreparedStatement prepareStatement(java.lang.String, int[])  throws java.sql.SQLException;
  public abstract java.sql.PreparedStatement prepareStatement(java.lang.String, java.lang.String[])  throws java.sql.SQLException;
  public abstract java.sql.SQLWarning getWarnings()  throws java.sql.SQLException;
  public abstract java.sql.SQLXML createSQLXML()  throws java.sql.SQLException;
  public abstract java.sql.Savepoint setSavepoint()  throws java.sql.SQLException;
  public abstract java.sql.Savepoint setSavepoint(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Statement createStatement()  throws java.sql.SQLException;
  public abstract java.sql.Statement createStatement(int, int)  throws java.sql.SQLException;
  public abstract java.sql.Statement createStatement(int, int, int)  throws java.sql.SQLException;
  public abstract java.sql.Struct createStruct(java.lang.String, java.lang.Object[])  throws java.sql.SQLException;
  public abstract java.util.Map getTypeMap()  throws java.sql.SQLException;
  public abstract java.util.Properties getClientInfo()  throws java.sql.SQLException;
  public static final int TRANSACTION_NONE;
  public static final int TRANSACTION_READ_COMMITTED;
  public static final int TRANSACTION_READ_UNCOMMITTED;
  public static final int TRANSACTION_REPEATABLE_READ;
  public static final int TRANSACTION_SERIALIZABLE;
}
public class java.sql.DataTruncation
  extends java.sql.SQLWarning
{
  public void <init>(int, boolean, boolean, int, int);
  public void <init>(int, boolean, boolean, int, int, java.lang.Throwable);
  public boolean getParameter();
  public boolean getRead();
  public int getDataSize();
  public int getIndex();
  public int getTransferSize();
}
public interface java.sql.DatabaseMetaData
  extends java.sql.Wrapper
{
  public abstract boolean allProceduresAreCallable()  throws java.sql.SQLException;
  public abstract boolean allTablesAreSelectable()  throws java.sql.SQLException;
  public abstract boolean autoCommitFailureClosesAllResultSets()  throws java.sql.SQLException;
  public abstract boolean dataDefinitionCausesTransactionCommit()  throws java.sql.SQLException;
  public abstract boolean dataDefinitionIgnoredInTransactions()  throws java.sql.SQLException;
  public abstract boolean deletesAreDetected(int)  throws java.sql.SQLException;
  public abstract boolean doesMaxRowSizeIncludeBlobs()  throws java.sql.SQLException;
  public abstract boolean insertsAreDetected(int)  throws java.sql.SQLException;
  public abstract boolean isCatalogAtStart()  throws java.sql.SQLException;
  public abstract boolean isReadOnly()  throws java.sql.SQLException;
  public abstract boolean locatorsUpdateCopy()  throws java.sql.SQLException;
  public abstract boolean nullPlusNonNullIsNull()  throws java.sql.SQLException;
  public abstract boolean nullsAreSortedAtEnd()  throws java.sql.SQLException;
  public abstract boolean nullsAreSortedAtStart()  throws java.sql.SQLException;
  public abstract boolean nullsAreSortedHigh()  throws java.sql.SQLException;
  public abstract boolean nullsAreSortedLow()  throws java.sql.SQLException;
  public abstract boolean othersDeletesAreVisible(int)  throws java.sql.SQLException;
  public abstract boolean othersInsertsAreVisible(int)  throws java.sql.SQLException;
  public abstract boolean othersUpdatesAreVisible(int)  throws java.sql.SQLException;
  public abstract boolean ownDeletesAreVisible(int)  throws java.sql.SQLException;
  public abstract boolean ownInsertsAreVisible(int)  throws java.sql.SQLException;
  public abstract boolean ownUpdatesAreVisible(int)  throws java.sql.SQLException;
  public abstract boolean storesLowerCaseIdentifiers()  throws java.sql.SQLException;
  public abstract boolean storesLowerCaseQuotedIdentifiers()  throws java.sql.SQLException;
  public abstract boolean storesMixedCaseIdentifiers()  throws java.sql.SQLException;
  public abstract boolean storesMixedCaseQuotedIdentifiers()  throws java.sql.SQLException;
  public abstract boolean storesUpperCaseIdentifiers()  throws java.sql.SQLException;
  public abstract boolean storesUpperCaseQuotedIdentifiers()  throws java.sql.SQLException;
  public abstract boolean supportsANSI92EntryLevelSQL()  throws java.sql.SQLException;
  public abstract boolean supportsANSI92FullSQL()  throws java.sql.SQLException;
  public abstract boolean supportsANSI92IntermediateSQL()  throws java.sql.SQLException;
  public abstract boolean supportsAlterTableWithAddColumn()  throws java.sql.SQLException;
  public abstract boolean supportsAlterTableWithDropColumn()  throws java.sql.SQLException;
  public abstract boolean supportsBatchUpdates()  throws java.sql.SQLException;
  public abstract boolean supportsCatalogsInDataManipulation()  throws java.sql.SQLException;
  public abstract boolean supportsCatalogsInIndexDefinitions()  throws java.sql.SQLException;
  public abstract boolean supportsCatalogsInPrivilegeDefinitions()  throws java.sql.SQLException;
  public abstract boolean supportsCatalogsInProcedureCalls()  throws java.sql.SQLException;
  public abstract boolean supportsCatalogsInTableDefinitions()  throws java.sql.SQLException;
  public abstract boolean supportsColumnAliasing()  throws java.sql.SQLException;
  public abstract boolean supportsConvert()  throws java.sql.SQLException;
  public abstract boolean supportsConvert(int, int)  throws java.sql.SQLException;
  public abstract boolean supportsCoreSQLGrammar()  throws java.sql.SQLException;
  public abstract boolean supportsCorrelatedSubqueries()  throws java.sql.SQLException;
  public abstract boolean supportsDataDefinitionAndDataManipulationTransactions()  throws java.sql.SQLException;
  public abstract boolean supportsDataManipulationTransactionsOnly()  throws java.sql.SQLException;
  public abstract boolean supportsDifferentTableCorrelationNames()  throws java.sql.SQLException;
  public abstract boolean supportsExpressionsInOrderBy()  throws java.sql.SQLException;
  public abstract boolean supportsExtendedSQLGrammar()  throws java.sql.SQLException;
  public abstract boolean supportsFullOuterJoins()  throws java.sql.SQLException;
  public abstract boolean supportsGetGeneratedKeys()  throws java.sql.SQLException;
  public abstract boolean supportsGroupBy()  throws java.sql.SQLException;
  public abstract boolean supportsGroupByBeyondSelect()  throws java.sql.SQLException;
  public abstract boolean supportsGroupByUnrelated()  throws java.sql.SQLException;
  public abstract boolean supportsIntegrityEnhancementFacility()  throws java.sql.SQLException;
  public abstract boolean supportsLikeEscapeClause()  throws java.sql.SQLException;
  public abstract boolean supportsLimitedOuterJoins()  throws java.sql.SQLException;
  public abstract boolean supportsMinimumSQLGrammar()  throws java.sql.SQLException;
  public abstract boolean supportsMixedCaseIdentifiers()  throws java.sql.SQLException;
  public abstract boolean supportsMixedCaseQuotedIdentifiers()  throws java.sql.SQLException;
  public abstract boolean supportsMultipleOpenResults()  throws java.sql.SQLException;
  public abstract boolean supportsMultipleResultSets()  throws java.sql.SQLException;
  public abstract boolean supportsMultipleTransactions()  throws java.sql.SQLException;
  public abstract boolean supportsNamedParameters()  throws java.sql.SQLException;
  public abstract boolean supportsNonNullableColumns()  throws java.sql.SQLException;
  public abstract boolean supportsOpenCursorsAcrossCommit()  throws java.sql.SQLException;
  public abstract boolean supportsOpenCursorsAcrossRollback()  throws java.sql.SQLException;
  public abstract boolean supportsOpenStatementsAcrossCommit()  throws java.sql.SQLException;
  public abstract boolean supportsOpenStatementsAcrossRollback()  throws java.sql.SQLException;
  public abstract boolean supportsOrderByUnrelated()  throws java.sql.SQLException;
  public abstract boolean supportsOuterJoins()  throws java.sql.SQLException;
  public abstract boolean supportsPositionedDelete()  throws java.sql.SQLException;
  public abstract boolean supportsPositionedUpdate()  throws java.sql.SQLException;
  public abstract boolean supportsResultSetConcurrency(int, int)  throws java.sql.SQLException;
  public abstract boolean supportsResultSetHoldability(int)  throws java.sql.SQLException;
  public abstract boolean supportsResultSetType(int)  throws java.sql.SQLException;
  public abstract boolean supportsSavepoints()  throws java.sql.SQLException;
  public abstract boolean supportsSchemasInDataManipulation()  throws java.sql.SQLException;
  public abstract boolean supportsSchemasInIndexDefinitions()  throws java.sql.SQLException;
  public abstract boolean supportsSchemasInPrivilegeDefinitions()  throws java.sql.SQLException;
  public abstract boolean supportsSchemasInProcedureCalls()  throws java.sql.SQLException;
  public abstract boolean supportsSchemasInTableDefinitions()  throws java.sql.SQLException;
  public abstract boolean supportsSelectForUpdate()  throws java.sql.SQLException;
  public abstract boolean supportsStatementPooling()  throws java.sql.SQLException;
  public abstract boolean supportsStoredFunctionsUsingCallSyntax()  throws java.sql.SQLException;
  public abstract boolean supportsStoredProcedures()  throws java.sql.SQLException;
  public abstract boolean supportsSubqueriesInComparisons()  throws java.sql.SQLException;
  public abstract boolean supportsSubqueriesInExists()  throws java.sql.SQLException;
  public abstract boolean supportsSubqueriesInIns()  throws java.sql.SQLException;
  public abstract boolean supportsSubqueriesInQuantifieds()  throws java.sql.SQLException;
  public abstract boolean supportsTableCorrelationNames()  throws java.sql.SQLException;
  public abstract boolean supportsTransactionIsolationLevel(int)  throws java.sql.SQLException;
  public abstract boolean supportsTransactions()  throws java.sql.SQLException;
  public abstract boolean supportsUnion()  throws java.sql.SQLException;
  public abstract boolean supportsUnionAll()  throws java.sql.SQLException;
  public abstract boolean updatesAreDetected(int)  throws java.sql.SQLException;
  public abstract boolean usesLocalFilePerTable()  throws java.sql.SQLException;
  public abstract boolean usesLocalFiles()  throws java.sql.SQLException;
  public abstract int getDatabaseMajorVersion()  throws java.sql.SQLException;
  public abstract int getDatabaseMinorVersion()  throws java.sql.SQLException;
  public abstract int getDefaultTransactionIsolation()  throws java.sql.SQLException;
  public abstract int getDriverMajorVersion();
  public abstract int getDriverMinorVersion();
  public abstract int getJDBCMajorVersion()  throws java.sql.SQLException;
  public abstract int getJDBCMinorVersion()  throws java.sql.SQLException;
  public abstract int getMaxBinaryLiteralLength()  throws java.sql.SQLException;
  public abstract int getMaxCatalogNameLength()  throws java.sql.SQLException;
  public abstract int getMaxCharLiteralLength()  throws java.sql.SQLException;
  public abstract int getMaxColumnNameLength()  throws java.sql.SQLException;
  public abstract int getMaxColumnsInGroupBy()  throws java.sql.SQLException;
  public abstract int getMaxColumnsInIndex()  throws java.sql.SQLException;
  public abstract int getMaxColumnsInOrderBy()  throws java.sql.SQLException;
  public abstract int getMaxColumnsInSelect()  throws java.sql.SQLException;
  public abstract int getMaxColumnsInTable()  throws java.sql.SQLException;
  public abstract int getMaxConnections()  throws java.sql.SQLException;
  public abstract int getMaxCursorNameLength()  throws java.sql.SQLException;
  public abstract int getMaxIndexLength()  throws java.sql.SQLException;
  public abstract int getMaxProcedureNameLength()  throws java.sql.SQLException;
  public abstract int getMaxRowSize()  throws java.sql.SQLException;
  public abstract int getMaxSchemaNameLength()  throws java.sql.SQLException;
  public abstract int getMaxStatementLength()  throws java.sql.SQLException;
  public abstract int getMaxStatements()  throws java.sql.SQLException;
  public abstract int getMaxTableNameLength()  throws java.sql.SQLException;
  public abstract int getMaxTablesInSelect()  throws java.sql.SQLException;
  public abstract int getMaxUserNameLength()  throws java.sql.SQLException;
  public abstract int getResultSetHoldability()  throws java.sql.SQLException;
  public abstract int getSQLStateType()  throws java.sql.SQLException;
  public abstract java.lang.String getCatalogSeparator()  throws java.sql.SQLException;
  public abstract java.lang.String getCatalogTerm()  throws java.sql.SQLException;
  public abstract java.lang.String getDatabaseProductName()  throws java.sql.SQLException;
  public abstract java.lang.String getDatabaseProductVersion()  throws java.sql.SQLException;
  public abstract java.lang.String getDriverName()  throws java.sql.SQLException;
  public abstract java.lang.String getDriverVersion()  throws java.sql.SQLException;
  public abstract java.lang.String getExtraNameCharacters()  throws java.sql.SQLException;
  public abstract java.lang.String getIdentifierQuoteString()  throws java.sql.SQLException;
  public abstract java.lang.String getNumericFunctions()  throws java.sql.SQLException;
  public abstract java.lang.String getProcedureTerm()  throws java.sql.SQLException;
  public abstract java.lang.String getSQLKeywords()  throws java.sql.SQLException;
  public abstract java.lang.String getSchemaTerm()  throws java.sql.SQLException;
  public abstract java.lang.String getSearchStringEscape()  throws java.sql.SQLException;
  public abstract java.lang.String getStringFunctions()  throws java.sql.SQLException;
  public abstract java.lang.String getSystemFunctions()  throws java.sql.SQLException;
  public abstract java.lang.String getTimeDateFunctions()  throws java.sql.SQLException;
  public abstract java.lang.String getURL()  throws java.sql.SQLException;
  public abstract java.lang.String getUserName()  throws java.sql.SQLException;
  public abstract java.sql.Connection getConnection()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getAttributes(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getBestRowIdentifier(java.lang.String, java.lang.String, java.lang.String, int, boolean)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getCatalogs()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getClientInfoProperties()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getColumnPrivileges(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getCrossReference(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getExportedKeys(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getFunctionColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getFunctions(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getImportedKeys(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getIndexInfo(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getPrimaryKeys(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getProcedureColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getProcedures(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getSchemas()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getSchemas(java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getSuperTables(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getSuperTypes(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getTablePrivileges(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getTableTypes()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[])  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getTypeInfo()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getUDTs(java.lang.String, java.lang.String, java.lang.String, int[])  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getVersionColumns(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.RowIdLifetime getRowIdLifetime()  throws java.sql.SQLException;
  public static final int bestRowNotPseudo;
  public static final int bestRowPseudo;
  public static final int bestRowSession;
  public static final int bestRowTemporary;
  public static final int bestRowTransaction;
  public static final int bestRowUnknown;
  public static final int columnNoNulls;
  public static final int columnNullable;
  public static final int columnNullableUnknown;
  public static final int functionColumnIn;
  public static final int functionColumnInOut;
  public static final int functionColumnOut;
  public static final int functionColumnResult;
  public static final int functionColumnUnknown;
  public static final int functionNoNulls;
  public static final int functionNoTable;
  public static final int functionNullable;
  public static final int functionNullableUnknown;
  public static final int functionResultUnknown;
  public static final int functionReturn;
  public static final int functionReturnsTable;
  public static final int importedKeyCascade;
  public static final int importedKeyInitiallyDeferred;
  public static final int importedKeyInitiallyImmediate;
  public static final int importedKeyNoAction;
  public static final int importedKeyNotDeferrable;
  public static final int importedKeyRestrict;
  public static final int importedKeySetDefault;
  public static final int importedKeySetNull;
  public static final int procedureColumnIn;
  public static final int procedureColumnInOut;
  public static final int procedureColumnOut;
  public static final int procedureColumnResult;
  public static final int procedureColumnReturn;
  public static final int procedureColumnUnknown;
  public static final int procedureNoNulls;
  public static final int procedureNoResult;
  public static final int procedureNullable;
  public static final int procedureNullableUnknown;
  public static final int procedureResultUnknown;
  public static final int procedureReturnsResult;
  public static final int sqlStateSQL99;
  public static final int sqlStateSQL;
  public static final int sqlStateXOpen;
  public static final int typeNoNulls;
  public static final int typeNullable;
  public static final int typeNullableUnknown;
  public static final int typePredBasic;
  public static final int typePredChar;
  public static final int typePredNone;
  public static final int typeSearchable;
  public static final int versionColumnNotPseudo;
  public static final int versionColumnPseudo;
  public static final int versionColumnUnknown;
  public static final short attributeNoNulls;
  public static final short attributeNullable;
  public static final short attributeNullableUnknown;
  public static final short tableIndexClustered;
  public static final short tableIndexHashed;
  public static final short tableIndexOther;
  public static final short tableIndexStatistic;
}
public class java.sql.Date
  extends java.util.Date
{
  public static java.sql.Date valueOf(java.lang.String);
  public void <init>(int, int, int);
  public void <init>(long);
  public int getHours();
  public int getMinutes();
  public int getSeconds();
  public void setHours(int);
  public void setMinutes(int);
  public void setSeconds(int);
  public void setTime(long);
  public java.lang.String toString();
}
public interface java.sql.Driver
{
  public abstract boolean acceptsURL(java.lang.String)  throws java.sql.SQLException;
  public abstract boolean jdbcCompliant();
  public abstract int getMajorVersion();
  public abstract int getMinorVersion();
  public abstract java.sql.Connection connect(java.lang.String, java.util.Properties)  throws java.sql.SQLException;
  public abstract java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String, java.util.Properties)  throws java.sql.SQLException;
}
public class java.sql.DriverManager
  extends java.lang.Object
{
  public static int getLoginTimeout();
  public static void deregisterDriver(java.sql.Driver)  throws java.sql.SQLException;
  public static void println(java.lang.String);
  public static void registerDriver(java.sql.Driver)  throws java.sql.SQLException;
  public static void setLogStream(java.io.PrintStream);
  public static void setLogWriter(java.io.PrintWriter);
  public static void setLoginTimeout(int);
  public static java.io.PrintStream getLogStream();
  public static java.io.PrintWriter getLogWriter();
  public static java.sql.Connection getConnection(java.lang.String)  throws java.sql.SQLException;
  public static java.sql.Connection getConnection(java.lang.String, java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public static java.sql.Connection getConnection(java.lang.String, java.util.Properties)  throws java.sql.SQLException;
  public static java.sql.Driver getDriver(java.lang.String)  throws java.sql.SQLException;
  public static java.util.Enumeration getDrivers();
}
public class java.sql.DriverPropertyInfo
  extends java.lang.Object
{
  public void <init>(java.lang.String, java.lang.String);
  public boolean required;
  public java.lang.String description;
  public java.lang.String name;
  public java.lang.String value;
  public java.lang.String[] choices;
}
public interface java.sql.NClob
  extends java.sql.Clob
{
}
public interface java.sql.ParameterMetaData
  extends java.sql.Wrapper
{
  public abstract boolean isSigned(int)  throws java.sql.SQLException;
  public abstract int getParameterCount()  throws java.sql.SQLException;
  public abstract int getParameterMode(int)  throws java.sql.SQLException;
  public abstract int getParameterType(int)  throws java.sql.SQLException;
  public abstract int getPrecision(int)  throws java.sql.SQLException;
  public abstract int getScale(int)  throws java.sql.SQLException;
  public abstract int isNullable(int)  throws java.sql.SQLException;
  public abstract java.lang.String getParameterClassName(int)  throws java.sql.SQLException;
  public abstract java.lang.String getParameterTypeName(int)  throws java.sql.SQLException;
  public static final int parameterModeIn;
  public static final int parameterModeInOut;
  public static final int parameterModeOut;
  public static final int parameterModeUnknown;
  public static final int parameterNoNulls;
  public static final int parameterNullable;
  public static final int parameterNullableUnknown;
}
public interface java.sql.PreparedStatement
  extends java.sql.Statement
{
  public abstract boolean execute()  throws java.sql.SQLException;
  public abstract int executeUpdate()  throws java.sql.SQLException;
  public abstract void addBatch()  throws java.sql.SQLException;
  public abstract void clearParameters()  throws java.sql.SQLException;
  public abstract void setArray(int, java.sql.Array)  throws java.sql.SQLException;
  public abstract void setAsciiStream(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setAsciiStream(int, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setAsciiStream(int, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBigDecimal(int, java.math.BigDecimal)  throws java.sql.SQLException;
  public abstract void setBinaryStream(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBinaryStream(int, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setBinaryStream(int, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBlob(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBlob(int, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBlob(int, java.sql.Blob)  throws java.sql.SQLException;
  public abstract void setBoolean(int, boolean)  throws java.sql.SQLException;
  public abstract void setByte(int, byte)  throws java.sql.SQLException;
  public abstract void setBytes(int, byte[])  throws java.sql.SQLException;
  public abstract void setCharacterStream(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setCharacterStream(int, java.io.Reader, int)  throws java.sql.SQLException;
  public abstract void setCharacterStream(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setClob(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setClob(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setClob(int, java.sql.Clob)  throws java.sql.SQLException;
  public abstract void setDate(int, java.sql.Date)  throws java.sql.SQLException;
  public abstract void setDate(int, java.sql.Date, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setDouble(int, double)  throws java.sql.SQLException;
  public abstract void setFloat(int, float)  throws java.sql.SQLException;
  public abstract void setInt(int, int)  throws java.sql.SQLException;
  public abstract void setLong(int, long)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNClob(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNClob(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNClob(int, java.sql.NClob)  throws java.sql.SQLException;
  public abstract void setNString(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setNull(int, int)  throws java.sql.SQLException;
  public abstract void setNull(int, int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setObject(int, java.lang.Object)  throws java.sql.SQLException;
  public abstract void setObject(int, java.lang.Object, int)  throws java.sql.SQLException;
  public abstract void setObject(int, java.lang.Object, int, int)  throws java.sql.SQLException;
  public abstract void setRef(int, java.sql.Ref)  throws java.sql.SQLException;
  public abstract void setRowId(int, java.sql.RowId)  throws java.sql.SQLException;
  public abstract void setSQLXML(int, java.sql.SQLXML)  throws java.sql.SQLException;
  public abstract void setShort(int, short)  throws java.sql.SQLException;
  public abstract void setString(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setTime(int, java.sql.Time)  throws java.sql.SQLException;
  public abstract void setTime(int, java.sql.Time, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setTimestamp(int, java.sql.Timestamp)  throws java.sql.SQLException;
  public abstract void setTimestamp(int, java.sql.Timestamp, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setURL(int, java.net.URL)  throws java.sql.SQLException;
  public abstract void setUnicodeStream(int, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract java.sql.ParameterMetaData getParameterMetaData()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet executeQuery()  throws java.sql.SQLException;
  public abstract java.sql.ResultSetMetaData getMetaData()  throws java.sql.SQLException;
}
public interface java.sql.Ref
{
  public abstract void setObject(java.lang.Object)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject()  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.String getBaseTypeName()  throws java.sql.SQLException;
}
public interface java.sql.ResultSet
  extends java.sql.Wrapper, java.lang.AutoCloseable
{
  public abstract boolean absolute(int)  throws java.sql.SQLException;
  public abstract boolean first()  throws java.sql.SQLException;
  public abstract boolean getBoolean(int)  throws java.sql.SQLException;
  public abstract boolean getBoolean(java.lang.String)  throws java.sql.SQLException;
  public abstract boolean isAfterLast()  throws java.sql.SQLException;
  public abstract boolean isBeforeFirst()  throws java.sql.SQLException;
  public abstract boolean isClosed()  throws java.sql.SQLException;
  public abstract boolean isFirst()  throws java.sql.SQLException;
  public abstract boolean isLast()  throws java.sql.SQLException;
  public abstract boolean last()  throws java.sql.SQLException;
  public abstract boolean next()  throws java.sql.SQLException;
  public abstract boolean previous()  throws java.sql.SQLException;
  public abstract boolean relative(int)  throws java.sql.SQLException;
  public abstract boolean rowDeleted()  throws java.sql.SQLException;
  public abstract boolean rowInserted()  throws java.sql.SQLException;
  public abstract boolean rowUpdated()  throws java.sql.SQLException;
  public abstract boolean wasNull()  throws java.sql.SQLException;
  public abstract byte getByte(int)  throws java.sql.SQLException;
  public abstract byte getByte(java.lang.String)  throws java.sql.SQLException;
  public abstract double getDouble(int)  throws java.sql.SQLException;
  public abstract double getDouble(java.lang.String)  throws java.sql.SQLException;
  public abstract float getFloat(int)  throws java.sql.SQLException;
  public abstract float getFloat(java.lang.String)  throws java.sql.SQLException;
  public abstract int findColumn(java.lang.String)  throws java.sql.SQLException;
  public abstract int getConcurrency()  throws java.sql.SQLException;
  public abstract int getFetchDirection()  throws java.sql.SQLException;
  public abstract int getFetchSize()  throws java.sql.SQLException;
  public abstract int getHoldability()  throws java.sql.SQLException;
  public abstract int getInt(int)  throws java.sql.SQLException;
  public abstract int getInt(java.lang.String)  throws java.sql.SQLException;
  public abstract int getRow()  throws java.sql.SQLException;
  public abstract int getType()  throws java.sql.SQLException;
  public abstract long getLong(int)  throws java.sql.SQLException;
  public abstract long getLong(java.lang.String)  throws java.sql.SQLException;
  public abstract short getShort(int)  throws java.sql.SQLException;
  public abstract short getShort(java.lang.String)  throws java.sql.SQLException;
  public abstract void afterLast()  throws java.sql.SQLException;
  public abstract void beforeFirst()  throws java.sql.SQLException;
  public abstract void cancelRowUpdates()  throws java.sql.SQLException;
  public abstract void clearWarnings()  throws java.sql.SQLException;
  public abstract void close()  throws java.sql.SQLException;
  public abstract void deleteRow()  throws java.sql.SQLException;
  public abstract void insertRow()  throws java.sql.SQLException;
  public abstract void moveToCurrentRow()  throws java.sql.SQLException;
  public abstract void moveToInsertRow()  throws java.sql.SQLException;
  public abstract void refreshRow()  throws java.sql.SQLException;
  public abstract void setFetchDirection(int)  throws java.sql.SQLException;
  public abstract void setFetchSize(int)  throws java.sql.SQLException;
  public abstract void updateArray(int, java.sql.Array)  throws java.sql.SQLException;
  public abstract void updateArray(java.lang.String, java.sql.Array)  throws java.sql.SQLException;
  public abstract void updateAsciiStream(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void updateAsciiStream(int, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void updateAsciiStream(int, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void updateAsciiStream(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void updateAsciiStream(java.lang.String, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void updateAsciiStream(java.lang.String, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void updateBigDecimal(int, java.math.BigDecimal)  throws java.sql.SQLException;
  public abstract void updateBigDecimal(java.lang.String, java.math.BigDecimal)  throws java.sql.SQLException;
  public abstract void updateBinaryStream(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void updateBinaryStream(int, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void updateBinaryStream(int, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void updateBinaryStream(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void updateBinaryStream(java.lang.String, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void updateBinaryStream(java.lang.String, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void updateBlob(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void updateBlob(int, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void updateBlob(int, java.sql.Blob)  throws java.sql.SQLException;
  public abstract void updateBlob(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void updateBlob(java.lang.String, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void updateBlob(java.lang.String, java.sql.Blob)  throws java.sql.SQLException;
  public abstract void updateBoolean(int, boolean)  throws java.sql.SQLException;
  public abstract void updateBoolean(java.lang.String, boolean)  throws java.sql.SQLException;
  public abstract void updateByte(int, byte)  throws java.sql.SQLException;
  public abstract void updateByte(java.lang.String, byte)  throws java.sql.SQLException;
  public abstract void updateBytes(int, byte[])  throws java.sql.SQLException;
  public abstract void updateBytes(java.lang.String, byte[])  throws java.sql.SQLException;
  public abstract void updateCharacterStream(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateCharacterStream(int, java.io.Reader, int)  throws java.sql.SQLException;
  public abstract void updateCharacterStream(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateCharacterStream(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateCharacterStream(java.lang.String, java.io.Reader, int)  throws java.sql.SQLException;
  public abstract void updateCharacterStream(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateClob(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateClob(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateClob(int, java.sql.Clob)  throws java.sql.SQLException;
  public abstract void updateClob(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateClob(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateClob(java.lang.String, java.sql.Clob)  throws java.sql.SQLException;
  public abstract void updateDate(int, java.sql.Date)  throws java.sql.SQLException;
  public abstract void updateDate(java.lang.String, java.sql.Date)  throws java.sql.SQLException;
  public abstract void updateDouble(int, double)  throws java.sql.SQLException;
  public abstract void updateDouble(java.lang.String, double)  throws java.sql.SQLException;
  public abstract void updateFloat(int, float)  throws java.sql.SQLException;
  public abstract void updateFloat(java.lang.String, float)  throws java.sql.SQLException;
  public abstract void updateInt(int, int)  throws java.sql.SQLException;
  public abstract void updateInt(java.lang.String, int)  throws java.sql.SQLException;
  public abstract void updateLong(int, long)  throws java.sql.SQLException;
  public abstract void updateLong(java.lang.String, long)  throws java.sql.SQLException;
  public abstract void updateNCharacterStream(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateNCharacterStream(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateNCharacterStream(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateNCharacterStream(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateNClob(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateNClob(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateNClob(int, java.sql.NClob)  throws java.sql.SQLException;
  public abstract void updateNClob(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void updateNClob(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void updateNClob(java.lang.String, java.sql.NClob)  throws java.sql.SQLException;
  public abstract void updateNString(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void updateNString(java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract void updateNull(int)  throws java.sql.SQLException;
  public abstract void updateNull(java.lang.String)  throws java.sql.SQLException;
  public abstract void updateObject(int, java.lang.Object)  throws java.sql.SQLException;
  public abstract void updateObject(int, java.lang.Object, int)  throws java.sql.SQLException;
  public abstract void updateObject(java.lang.String, java.lang.Object)  throws java.sql.SQLException;
  public abstract void updateObject(java.lang.String, java.lang.Object, int)  throws java.sql.SQLException;
  public abstract void updateRef(int, java.sql.Ref)  throws java.sql.SQLException;
  public abstract void updateRef(java.lang.String, java.sql.Ref)  throws java.sql.SQLException;
  public abstract void updateRow()  throws java.sql.SQLException;
  public abstract void updateRowId(int, java.sql.RowId)  throws java.sql.SQLException;
  public abstract void updateRowId(java.lang.String, java.sql.RowId)  throws java.sql.SQLException;
  public abstract void updateSQLXML(int, java.sql.SQLXML)  throws java.sql.SQLException;
  public abstract void updateSQLXML(java.lang.String, java.sql.SQLXML)  throws java.sql.SQLException;
  public abstract void updateShort(int, short)  throws java.sql.SQLException;
  public abstract void updateShort(java.lang.String, short)  throws java.sql.SQLException;
  public abstract void updateString(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void updateString(java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract void updateTime(int, java.sql.Time)  throws java.sql.SQLException;
  public abstract void updateTime(java.lang.String, java.sql.Time)  throws java.sql.SQLException;
  public abstract void updateTimestamp(int, java.sql.Timestamp)  throws java.sql.SQLException;
  public abstract void updateTimestamp(java.lang.String, java.sql.Timestamp)  throws java.sql.SQLException;
  public abstract byte[] getBytes(int)  throws java.sql.SQLException;
  public abstract byte[] getBytes(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.InputStream getAsciiStream(int)  throws java.sql.SQLException;
  public abstract java.io.InputStream getAsciiStream(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.InputStream getBinaryStream(int)  throws java.sql.SQLException;
  public abstract java.io.InputStream getBinaryStream(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.InputStream getUnicodeStream(int)  throws java.sql.SQLException;
  public abstract java.io.InputStream getUnicodeStream(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.Reader getCharacterStream(int)  throws java.sql.SQLException;
  public abstract java.io.Reader getCharacterStream(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.Reader getNCharacterStream(int)  throws java.sql.SQLException;
  public abstract java.io.Reader getNCharacterStream(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(int)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(int, java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.Object getObject(java.lang.String, java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.String getCursorName()  throws java.sql.SQLException;
  public abstract java.lang.String getNString(int)  throws java.sql.SQLException;
  public abstract java.lang.String getNString(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.String getString(int)  throws java.sql.SQLException;
  public abstract java.lang.String getString(java.lang.String)  throws java.sql.SQLException;
  public abstract java.math.BigDecimal getBigDecimal(int)  throws java.sql.SQLException;
  public abstract java.math.BigDecimal getBigDecimal(int, int)  throws java.sql.SQLException;
  public abstract java.math.BigDecimal getBigDecimal(java.lang.String)  throws java.sql.SQLException;
  public abstract java.math.BigDecimal getBigDecimal(java.lang.String, int)  throws java.sql.SQLException;
  public abstract java.net.URL getURL(int)  throws java.sql.SQLException;
  public abstract java.net.URL getURL(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Array getArray(int)  throws java.sql.SQLException;
  public abstract java.sql.Array getArray(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Blob getBlob(int)  throws java.sql.SQLException;
  public abstract java.sql.Blob getBlob(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Clob getClob(int)  throws java.sql.SQLException;
  public abstract java.sql.Clob getClob(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(int)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(int, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Date getDate(java.lang.String, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.NClob getNClob(int)  throws java.sql.SQLException;
  public abstract java.sql.NClob getNClob(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Ref getRef(int)  throws java.sql.SQLException;
  public abstract java.sql.Ref getRef(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSetMetaData getMetaData()  throws java.sql.SQLException;
  public abstract java.sql.RowId getRowId(int)  throws java.sql.SQLException;
  public abstract java.sql.RowId getRowId(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.SQLWarning getWarnings()  throws java.sql.SQLException;
  public abstract java.sql.SQLXML getSQLXML(int)  throws java.sql.SQLException;
  public abstract java.sql.SQLXML getSQLXML(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Statement getStatement()  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(int)  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(int, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Time getTime(java.lang.String, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(int)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(int, java.util.Calendar)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.Timestamp getTimestamp(java.lang.String, java.util.Calendar)  throws java.sql.SQLException;
  public static final int CLOSE_CURSORS_AT_COMMIT;
  public static final int CONCUR_READ_ONLY;
  public static final int CONCUR_UPDATABLE;
  public static final int FETCH_FORWARD;
  public static final int FETCH_REVERSE;
  public static final int FETCH_UNKNOWN;
  public static final int HOLD_CURSORS_OVER_COMMIT;
  public static final int TYPE_FORWARD_ONLY;
  public static final int TYPE_SCROLL_INSENSITIVE;
  public static final int TYPE_SCROLL_SENSITIVE;
}
public interface java.sql.ResultSetMetaData
  extends java.sql.Wrapper
{
  public abstract boolean isAutoIncrement(int)  throws java.sql.SQLException;
  public abstract boolean isCaseSensitive(int)  throws java.sql.SQLException;
  public abstract boolean isCurrency(int)  throws java.sql.SQLException;
  public abstract boolean isDefinitelyWritable(int)  throws java.sql.SQLException;
  public abstract boolean isReadOnly(int)  throws java.sql.SQLException;
  public abstract boolean isSearchable(int)  throws java.sql.SQLException;
  public abstract boolean isSigned(int)  throws java.sql.SQLException;
  public abstract boolean isWritable(int)  throws java.sql.SQLException;
  public abstract int getColumnCount()  throws java.sql.SQLException;
  public abstract int getColumnDisplaySize(int)  throws java.sql.SQLException;
  public abstract int getColumnType(int)  throws java.sql.SQLException;
  public abstract int getPrecision(int)  throws java.sql.SQLException;
  public abstract int getScale(int)  throws java.sql.SQLException;
  public abstract int isNullable(int)  throws java.sql.SQLException;
  public abstract java.lang.String getCatalogName(int)  throws java.sql.SQLException;
  public abstract java.lang.String getColumnClassName(int)  throws java.sql.SQLException;
  public abstract java.lang.String getColumnLabel(int)  throws java.sql.SQLException;
  public abstract java.lang.String getColumnName(int)  throws java.sql.SQLException;
  public abstract java.lang.String getColumnTypeName(int)  throws java.sql.SQLException;
  public abstract java.lang.String getSchemaName(int)  throws java.sql.SQLException;
  public abstract java.lang.String getTableName(int)  throws java.sql.SQLException;
  public static final int columnNoNulls;
  public static final int columnNullable;
  public static final int columnNullableUnknown;
}
public interface java.sql.RowId
{
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract byte[] getBytes();
  public abstract java.lang.String toString();
}
public final class java.sql.RowIdLifetime
  extends java.lang.Enum
{
  public static java.sql.RowIdLifetime valueOf(java.lang.String);
  public static java.sql.RowIdLifetime[] values();
  public static final java.sql.RowIdLifetime ROWID_UNSUPPORTED;
  public static final java.sql.RowIdLifetime ROWID_VALID_FOREVER;
  public static final java.sql.RowIdLifetime ROWID_VALID_OTHER;
  public static final java.sql.RowIdLifetime ROWID_VALID_SESSION;
  public static final java.sql.RowIdLifetime ROWID_VALID_TRANSACTION;
}
public class java.sql.SQLClientInfoException
  extends java.sql.SQLException
{
  public void <init>();
  public void <init>(java.lang.String, java.lang.String, int, java.util.Map);
  public void <init>(java.lang.String, java.lang.String, int, java.util.Map, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.util.Map);
  public void <init>(java.lang.String, java.lang.String, java.util.Map, java.lang.Throwable);
  public void <init>(java.lang.String, java.util.Map);
  public void <init>(java.lang.String, java.util.Map, java.lang.Throwable);
  public void <init>(java.util.Map);
  public void <init>(java.util.Map, java.lang.Throwable);
  public java.util.Map getFailedProperties();
}
public interface java.sql.SQLData
{
  public abstract void readSQL(java.sql.SQLInput, java.lang.String)  throws java.sql.SQLException;
  public abstract void writeSQL(java.sql.SQLOutput)  throws java.sql.SQLException;
  public abstract java.lang.String getSQLTypeName()  throws java.sql.SQLException;
}
public class java.sql.SQLDataException
  extends java.sql.SQLNonTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLException
  extends java.lang.Exception
  implements java.lang.Iterable
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  public int getErrorCode();
  public void setNextException(java.sql.SQLException);
  public java.lang.String getSQLState();
  public java.sql.SQLException getNextException();
  public java.util.Iterator iterator();
}
public class java.sql.SQLFeatureNotSupportedException
  extends java.sql.SQLNonTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.sql.SQLInput
{
  public abstract boolean readBoolean()  throws java.sql.SQLException;
  public abstract boolean wasNull()  throws java.sql.SQLException;
  public abstract byte readByte()  throws java.sql.SQLException;
  public abstract double readDouble()  throws java.sql.SQLException;
  public abstract float readFloat()  throws java.sql.SQLException;
  public abstract int readInt()  throws java.sql.SQLException;
  public abstract long readLong()  throws java.sql.SQLException;
  public abstract short readShort()  throws java.sql.SQLException;
  public abstract byte[] readBytes()  throws java.sql.SQLException;
  public abstract java.io.InputStream readAsciiStream()  throws java.sql.SQLException;
  public abstract java.io.InputStream readBinaryStream()  throws java.sql.SQLException;
  public abstract java.io.Reader readCharacterStream()  throws java.sql.SQLException;
  public abstract java.lang.Object readObject()  throws java.sql.SQLException;
  public abstract java.lang.String readNString()  throws java.sql.SQLException;
  public abstract java.lang.String readString()  throws java.sql.SQLException;
  public abstract java.math.BigDecimal readBigDecimal()  throws java.sql.SQLException;
  public abstract java.net.URL readURL()  throws java.sql.SQLException;
  public abstract java.sql.Array readArray()  throws java.sql.SQLException;
  public abstract java.sql.Blob readBlob()  throws java.sql.SQLException;
  public abstract java.sql.Clob readClob()  throws java.sql.SQLException;
  public abstract java.sql.Date readDate()  throws java.sql.SQLException;
  public abstract java.sql.NClob readNClob()  throws java.sql.SQLException;
  public abstract java.sql.Ref readRef()  throws java.sql.SQLException;
  public abstract java.sql.RowId readRowId()  throws java.sql.SQLException;
  public abstract java.sql.SQLXML readSQLXML()  throws java.sql.SQLException;
  public abstract java.sql.Time readTime()  throws java.sql.SQLException;
  public abstract java.sql.Timestamp readTimestamp()  throws java.sql.SQLException;
}
public class java.sql.SQLIntegrityConstraintViolationException
  extends java.sql.SQLNonTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLInvalidAuthorizationSpecException
  extends java.sql.SQLNonTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLNonTransientConnectionException
  extends java.sql.SQLNonTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLNonTransientException
  extends java.sql.SQLException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.sql.SQLOutput
{
  public abstract void writeArray(java.sql.Array)  throws java.sql.SQLException;
  public abstract void writeAsciiStream(java.io.InputStream)  throws java.sql.SQLException;
  public abstract void writeBigDecimal(java.math.BigDecimal)  throws java.sql.SQLException;
  public abstract void writeBinaryStream(java.io.InputStream)  throws java.sql.SQLException;
  public abstract void writeBlob(java.sql.Blob)  throws java.sql.SQLException;
  public abstract void writeBoolean(boolean)  throws java.sql.SQLException;
  public abstract void writeByte(byte)  throws java.sql.SQLException;
  public abstract void writeBytes(byte[])  throws java.sql.SQLException;
  public abstract void writeCharacterStream(java.io.Reader)  throws java.sql.SQLException;
  public abstract void writeClob(java.sql.Clob)  throws java.sql.SQLException;
  public abstract void writeDate(java.sql.Date)  throws java.sql.SQLException;
  public abstract void writeDouble(double)  throws java.sql.SQLException;
  public abstract void writeFloat(float)  throws java.sql.SQLException;
  public abstract void writeInt(int)  throws java.sql.SQLException;
  public abstract void writeLong(long)  throws java.sql.SQLException;
  public abstract void writeNClob(java.sql.NClob)  throws java.sql.SQLException;
  public abstract void writeNString(java.lang.String)  throws java.sql.SQLException;
  public abstract void writeObject(java.sql.SQLData)  throws java.sql.SQLException;
  public abstract void writeRef(java.sql.Ref)  throws java.sql.SQLException;
  public abstract void writeRowId(java.sql.RowId)  throws java.sql.SQLException;
  public abstract void writeSQLXML(java.sql.SQLXML)  throws java.sql.SQLException;
  public abstract void writeShort(short)  throws java.sql.SQLException;
  public abstract void writeString(java.lang.String)  throws java.sql.SQLException;
  public abstract void writeStruct(java.sql.Struct)  throws java.sql.SQLException;
  public abstract void writeTime(java.sql.Time)  throws java.sql.SQLException;
  public abstract void writeTimestamp(java.sql.Timestamp)  throws java.sql.SQLException;
  public abstract void writeURL(java.net.URL)  throws java.sql.SQLException;
}
public final class java.sql.SQLPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public class java.sql.SQLRecoverableException
  extends java.sql.SQLException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLSyntaxErrorException
  extends java.sql.SQLNonTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLTimeoutException
  extends java.sql.SQLTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLTransactionRollbackException
  extends java.sql.SQLTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLTransientConnectionException
  extends java.sql.SQLTransientException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLTransientException
  extends java.sql.SQLException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.sql.SQLWarning
  extends java.sql.SQLException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, int);
  public void <init>(java.lang.String, java.lang.String, int, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  public void setNextWarning(java.sql.SQLWarning);
  public java.sql.SQLWarning getNextWarning();
}
public interface java.sql.SQLXML
{
  public abstract void free()  throws java.sql.SQLException;
  public abstract void setString(java.lang.String)  throws java.sql.SQLException;
  public abstract java.io.InputStream getBinaryStream()  throws java.sql.SQLException;
  public abstract java.io.OutputStream setBinaryStream()  throws java.sql.SQLException;
  public abstract java.io.Reader getCharacterStream()  throws java.sql.SQLException;
  public abstract java.io.Writer setCharacterStream()  throws java.sql.SQLException;
  public abstract java.lang.String getString()  throws java.sql.SQLException;
  public abstract javax.xml.transform.Result setResult(java.lang.Class)  throws java.sql.SQLException;
  public abstract javax.xml.transform.Source getSource(java.lang.Class)  throws java.sql.SQLException;
}
public interface java.sql.Savepoint
{
  public abstract int getSavepointId()  throws java.sql.SQLException;
  public abstract java.lang.String getSavepointName()  throws java.sql.SQLException;
}
public interface java.sql.Statement
  extends java.sql.Wrapper, java.lang.AutoCloseable
{
  public abstract boolean execute(java.lang.String)  throws java.sql.SQLException;
  public abstract boolean execute(java.lang.String, int)  throws java.sql.SQLException;
  public abstract boolean execute(java.lang.String, int[])  throws java.sql.SQLException;
  public abstract boolean execute(java.lang.String, java.lang.String[])  throws java.sql.SQLException;
  public abstract boolean getMoreResults()  throws java.sql.SQLException;
  public abstract boolean getMoreResults(int)  throws java.sql.SQLException;
  public abstract boolean isClosed()  throws java.sql.SQLException;
  public abstract boolean isPoolable()  throws java.sql.SQLException;
  public abstract int executeUpdate(java.lang.String)  throws java.sql.SQLException;
  public abstract int executeUpdate(java.lang.String, int)  throws java.sql.SQLException;
  public abstract int executeUpdate(java.lang.String, int[])  throws java.sql.SQLException;
  public abstract int executeUpdate(java.lang.String, java.lang.String[])  throws java.sql.SQLException;
  public abstract int getFetchDirection()  throws java.sql.SQLException;
  public abstract int getFetchSize()  throws java.sql.SQLException;
  public abstract int getMaxFieldSize()  throws java.sql.SQLException;
  public abstract int getMaxRows()  throws java.sql.SQLException;
  public abstract int getQueryTimeout()  throws java.sql.SQLException;
  public abstract int getResultSetConcurrency()  throws java.sql.SQLException;
  public abstract int getResultSetHoldability()  throws java.sql.SQLException;
  public abstract int getResultSetType()  throws java.sql.SQLException;
  public abstract int getUpdateCount()  throws java.sql.SQLException;
  public abstract void addBatch(java.lang.String)  throws java.sql.SQLException;
  public abstract void cancel()  throws java.sql.SQLException;
  public abstract void clearBatch()  throws java.sql.SQLException;
  public abstract void clearWarnings()  throws java.sql.SQLException;
  public abstract void close()  throws java.sql.SQLException;
  public abstract void setCursorName(java.lang.String)  throws java.sql.SQLException;
  public abstract void setEscapeProcessing(boolean)  throws java.sql.SQLException;
  public abstract void setFetchDirection(int)  throws java.sql.SQLException;
  public abstract void setFetchSize(int)  throws java.sql.SQLException;
  public abstract void setMaxFieldSize(int)  throws java.sql.SQLException;
  public abstract void setMaxRows(int)  throws java.sql.SQLException;
  public abstract void setPoolable(boolean)  throws java.sql.SQLException;
  public abstract void setQueryTimeout(int)  throws java.sql.SQLException;
  public abstract int[] executeBatch()  throws java.sql.SQLException;
  public abstract java.sql.Connection getConnection()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet executeQuery(java.lang.String)  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getGeneratedKeys()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getResultSet()  throws java.sql.SQLException;
  public abstract java.sql.SQLWarning getWarnings()  throws java.sql.SQLException;
  public static final int CLOSE_ALL_RESULTS;
  public static final int CLOSE_CURRENT_RESULT;
  public static final int EXECUTE_FAILED;
  public static final int KEEP_CURRENT_RESULT;
  public static final int NO_GENERATED_KEYS;
  public static final int RETURN_GENERATED_KEYS;
  public static final int SUCCESS_NO_INFO;
}
public interface java.sql.Struct
{
  public abstract java.lang.Object[] getAttributes()  throws java.sql.SQLException;
  public abstract java.lang.Object[] getAttributes(java.util.Map)  throws java.sql.SQLException;
  public abstract java.lang.String getSQLTypeName()  throws java.sql.SQLException;
}
public class java.sql.Time
  extends java.util.Date
{
  public static java.sql.Time valueOf(java.lang.String);
  public void <init>(int, int, int);
  public void <init>(long);
  public int getDate();
  public int getDay();
  public int getMonth();
  public int getYear();
  public void setDate(int);
  public void setMonth(int);
  public void setTime(long);
  public void setYear(int);
  public java.lang.String toString();
}
public class java.sql.Timestamp
  extends java.util.Date
{
  public static java.sql.Timestamp valueOf(java.lang.String);
  public void <init>(int, int, int, int, int, int, int);
  public void <init>(long);
  public boolean after(java.sql.Timestamp);
  public boolean before(java.sql.Timestamp);
  public boolean equals(java.lang.Object);
  public boolean equals(java.sql.Timestamp);
  public int compareTo(java.lang.Object);
  public int compareTo(java.sql.Timestamp);
  public int compareTo(java.util.Date);
  public int getNanos();
  public int hashCode();
  public long getTime();
  public void setNanos(int);
  public void setTime(long);
  public java.lang.String toString();
}
public class java.sql.Types
  extends java.lang.Object
{
  public static final int ARRAY;
  public static final int BIGINT;
  public static final int BINARY;
  public static final int BIT;
  public static final int BLOB;
  public static final int BOOLEAN;
  public static final int CHAR;
  public static final int CLOB;
  public static final int DATALINK;
  public static final int DATE;
  public static final int DECIMAL;
  public static final int DISTINCT;
  public static final int DOUBLE;
  public static final int FLOAT;
  public static final int INTEGER;
  public static final int JAVA_OBJECT;
  public static final int LONGNVARCHAR;
  public static final int LONGVARBINARY;
  public static final int LONGVARCHAR;
  public static final int NCHAR;
  public static final int NCLOB;
  public static final int NULL;
  public static final int NUMERIC;
  public static final int NVARCHAR;
  public static final int OTHER;
  public static final int REAL;
  public static final int REF;
  public static final int ROWID;
  public static final int SMALLINT;
  public static final int SQLXML;
  public static final int STRUCT;
  public static final int TIME;
  public static final int TIMESTAMP;
  public static final int TINYINT;
  public static final int VARBINARY;
  public static final int VARCHAR;
}
public interface java.sql.Wrapper
{
  public abstract boolean isWrapperFor(java.lang.Class)  throws java.sql.SQLException;
  public abstract java.lang.Object unwrap(java.lang.Class)  throws java.sql.SQLException;
}
public class java.text.Annotation
  extends java.lang.Object
{
  public void <init>(java.lang.Object);
  public java.lang.Object getValue();
  public java.lang.String toString();
}
public interface java.text.AttributedCharacterIterator
  extends java.text.CharacterIterator
{
  public abstract int getRunLimit();
  public abstract int getRunLimit(java.text.AttributedCharacterIterator$Attribute);
  public abstract int getRunLimit(java.util.Set);
  public abstract int getRunStart();
  public abstract int getRunStart(java.text.AttributedCharacterIterator$Attribute);
  public abstract int getRunStart(java.util.Set);
  public abstract java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute);
  public abstract java.util.Map getAttributes();
  public abstract java.util.Set getAllAttributeKeys();
}
public class java.text.AttributedCharacterIterator$Attribute
  extends java.lang.Object
  implements java.io.Serializable
{
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String toString();
  protected void <init>(java.lang.String);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  protected java.lang.String getName();
  public static final java.text.AttributedCharacterIterator$Attribute INPUT_METHOD_SEGMENT;
  public static final java.text.AttributedCharacterIterator$Attribute LANGUAGE;
  public static final java.text.AttributedCharacterIterator$Attribute READING;
}
public class java.text.AttributedString
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.util.Map);
  public void <init>(java.text.AttributedCharacterIterator);
  public void <init>(java.text.AttributedCharacterIterator, int, int);
  public void <init>(java.text.AttributedCharacterIterator, int, int, java.text.AttributedCharacterIterator$Attribute[]);
  public void addAttribute(java.text.AttributedCharacterIterator$Attribute, java.lang.Object);
  public void addAttribute(java.text.AttributedCharacterIterator$Attribute, java.lang.Object, int, int);
  public void addAttributes(java.util.Map, int, int);
  public java.text.AttributedCharacterIterator getIterator();
  public java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[]);
  public java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[], int, int);
}
public final class java.text.Bidi
  extends java.lang.Object
{
  public static boolean requiresBidi(char[], int, int);
  public static void reorderVisually(byte[], int, java.lang.Object[], int, int);
  public void <init>(char[], int, byte[], int, int, int);
  public void <init>(java.lang.String, int);
  public void <init>(java.text.AttributedCharacterIterator);
  public boolean baseIsLeftToRight();
  public boolean isLeftToRight();
  public boolean isMixed();
  public boolean isRightToLeft();
  public int getBaseLevel();
  public int getLength();
  public int getLevelAt(int);
  public int getRunCount();
  public int getRunLevel(int);
  public int getRunLimit(int);
  public int getRunStart(int);
  public java.lang.String toString();
  public java.text.Bidi createLineBidi(int, int);
  public static final int DIRECTION_DEFAULT_LEFT_TO_RIGHT;
  public static final int DIRECTION_DEFAULT_RIGHT_TO_LEFT;
  public static final int DIRECTION_LEFT_TO_RIGHT;
  public static final int DIRECTION_RIGHT_TO_LEFT;
}
public abstract class java.text.BreakIterator
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static java.text.BreakIterator getCharacterInstance();
  public static java.text.BreakIterator getCharacterInstance(java.util.Locale);
  public static java.text.BreakIterator getLineInstance();
  public static java.text.BreakIterator getLineInstance(java.util.Locale);
  public static java.text.BreakIterator getSentenceInstance();
  public static java.text.BreakIterator getSentenceInstance(java.util.Locale);
  public static java.text.BreakIterator getWordInstance();
  public static java.text.BreakIterator getWordInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public abstract int current();
  public abstract int first();
  public abstract int following(int);
  public abstract int last();
  public abstract int next();
  public abstract int next(int);
  public abstract int previous();
  public abstract void setText(java.text.CharacterIterator);
  public abstract java.text.CharacterIterator getText();
  public boolean isBoundary(int);
  public int preceding(int);
  public void setText(java.lang.String);
  public java.lang.Object clone();
  protected void <init>();
  public static final int DONE;
}
public interface java.text.CharacterIterator
  extends java.lang.Cloneable
{
  public abstract char current();
  public abstract char first();
  public abstract char last();
  public abstract char next();
  public abstract char previous();
  public abstract char setIndex(int);
  public abstract int getBeginIndex();
  public abstract int getEndIndex();
  public abstract int getIndex();
  public abstract java.lang.Object clone();
  public static final char DONE;
}
public class java.text.ChoiceFormat
  extends java.text.NumberFormat
{
  public static final double nextDouble(double);
  public static final double previousDouble(double);
  public static double nextDouble(double, boolean);
  public void <init>(double[], java.lang.String[]);
  public void <init>(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void applyPattern(java.lang.String);
  public void setChoices(double[], java.lang.String[]);
  public double[] getLimits();
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public java.lang.Object clone();
  public java.lang.Object[] getFormats();
  public java.lang.String toPattern();
  public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
}
public final class java.text.CollationElementIterator
  extends java.lang.Object
{
  public static final int primaryOrder(int);
  public static final short secondaryOrder(int);
  public static final short tertiaryOrder(int);
  public int getMaxExpansion(int);
  public int getOffset();
  public int next();
  public int previous();
  public void reset();
  public void setOffset(int);
  public void setText(java.lang.String);
  public void setText(java.text.CharacterIterator);
  public static final int NULLORDER;
}
public abstract class java.text.CollationKey
  extends java.lang.Object
  implements java.lang.Comparable
{
  public abstract int compareTo(java.text.CollationKey);
  public abstract byte[] toByteArray();
  public int compareTo(java.lang.Object);
  public java.lang.String getSourceString();
  protected void <init>(java.lang.String);
}
public abstract class java.text.Collator
  extends java.lang.Object
  implements java.util.Comparator, java.lang.Cloneable
{
  public static java.text.Collator getInstance();
  public static java.text.Collator getInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public abstract int compare(java.lang.String, java.lang.String);
  public abstract int hashCode();
  public abstract java.text.CollationKey getCollationKey(java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean equals(java.lang.String, java.lang.String);
  public int compare(java.lang.Object, java.lang.Object);
  public int getDecomposition();
  public int getStrength();
  public void setDecomposition(int);
  public void setStrength(int);
  public java.lang.Object clone();
  protected void <init>();
  public static final int CANONICAL_DECOMPOSITION;
  public static final int FULL_DECOMPOSITION;
  public static final int IDENTICAL;
  public static final int NO_DECOMPOSITION;
  public static final int PRIMARY;
  public static final int SECONDARY;
  public static final int TERTIARY;
}
public abstract class java.text.DateFormat
  extends java.text.Format
{
  public static final java.text.DateFormat getDateInstance();
  public static final java.text.DateFormat getDateInstance(int);
  public static final java.text.DateFormat getDateInstance(int, java.util.Locale);
  public static final java.text.DateFormat getDateTimeInstance();
  public static final java.text.DateFormat getDateTimeInstance(int, int);
  public static final java.text.DateFormat getDateTimeInstance(int, int, java.util.Locale);
  public static final java.text.DateFormat getInstance();
  public static final java.text.DateFormat getTimeInstance();
  public static final java.text.DateFormat getTimeInstance(int);
  public static final java.text.DateFormat getTimeInstance(int, java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public final java.lang.String format(java.util.Date);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract java.util.Date parse(java.lang.String, java.text.ParsePosition);
  public boolean equals(java.lang.Object);
  public boolean isLenient();
  public int hashCode();
  public void setCalendar(java.util.Calendar);
  public void setLenient(boolean);
  public void setNumberFormat(java.text.NumberFormat);
  public void setTimeZone(java.util.TimeZone);
  public java.lang.Object clone();
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.text.NumberFormat getNumberFormat();
  public java.util.Calendar getCalendar();
  public java.util.Date parse(java.lang.String)  throws java.text.ParseException;
  public java.util.TimeZone getTimeZone();
  protected void <init>();
  public static final int AM_PM_FIELD;
  public static final int DATE_FIELD;
  public static final int DAY_OF_WEEK_FIELD;
  public static final int DAY_OF_WEEK_IN_MONTH_FIELD;
  public static final int DAY_OF_YEAR_FIELD;
  public static final int DEFAULT;
  public static final int ERA_FIELD;
  public static final int FULL;
  public static final int HOUR0_FIELD;
  public static final int HOUR1_FIELD;
  public static final int HOUR_OF_DAY0_FIELD;
  public static final int HOUR_OF_DAY1_FIELD;
  public static final int LONG;
  public static final int MEDIUM;
  public static final int MILLISECOND_FIELD;
  public static final int MINUTE_FIELD;
  public static final int MONTH_FIELD;
  public static final int SECOND_FIELD;
  public static final int SHORT;
  public static final int TIMEZONE_FIELD;
  public static final int WEEK_OF_MONTH_FIELD;
  public static final int WEEK_OF_YEAR_FIELD;
  public static final int YEAR_FIELD;
  protected java.text.NumberFormat numberFormat;
  protected java.util.Calendar calendar;
}
public class java.text.DateFormat$Field
  extends java.text.Format$Field
{
  public static java.text.DateFormat$Field ofCalendarField(int);
  public int getCalendarField();
  protected void <init>(java.lang.String, int);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  public static final java.text.DateFormat$Field AM_PM;
  public static final java.text.DateFormat$Field DAY_OF_MONTH;
  public static final java.text.DateFormat$Field DAY_OF_WEEK;
  public static final java.text.DateFormat$Field DAY_OF_WEEK_IN_MONTH;
  public static final java.text.DateFormat$Field DAY_OF_YEAR;
  public static final java.text.DateFormat$Field ERA;
  public static final java.text.DateFormat$Field HOUR0;
  public static final java.text.DateFormat$Field HOUR1;
  public static final java.text.DateFormat$Field HOUR_OF_DAY0;
  public static final java.text.DateFormat$Field HOUR_OF_DAY1;
  public static final java.text.DateFormat$Field MILLISECOND;
  public static final java.text.DateFormat$Field MINUTE;
  public static final java.text.DateFormat$Field MONTH;
  public static final java.text.DateFormat$Field SECOND;
  public static final java.text.DateFormat$Field TIME_ZONE;
  public static final java.text.DateFormat$Field WEEK_OF_MONTH;
  public static final java.text.DateFormat$Field WEEK_OF_YEAR;
  public static final java.text.DateFormat$Field YEAR;
}
public class java.text.DateFormatSymbols
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable
{
  public static final java.text.DateFormatSymbols getInstance();
  public static final java.text.DateFormatSymbols getInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public void <init>();
  public void <init>(java.util.Locale);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void setAmPmStrings(java.lang.String[]);
  public void setEras(java.lang.String[]);
  public void setLocalPatternChars(java.lang.String);
  public void setMonths(java.lang.String[]);
  public void setShortMonths(java.lang.String[]);
  public void setShortWeekdays(java.lang.String[]);
  public void setWeekdays(java.lang.String[]);
  public void setZoneStrings(java.lang.String[][]);
  public java.lang.Object clone();
  public java.lang.String getLocalPatternChars();
  public java.lang.String[] getAmPmStrings();
  public java.lang.String[] getEras();
  public java.lang.String[] getMonths();
  public java.lang.String[] getShortMonths();
  public java.lang.String[] getShortWeekdays();
  public java.lang.String[] getWeekdays();
  public java.lang.String[][] getZoneStrings();
}
public class java.text.DecimalFormat
  extends java.text.NumberFormat
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.text.DecimalFormatSymbols);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public boolean equals(java.lang.Object);
  public boolean isDecimalSeparatorAlwaysShown();
  public boolean isGroupingUsed();
  public boolean isParseBigDecimal();
  public boolean isParseIntegerOnly();
  public int getGroupingSize();
  public int getMaximumFractionDigits();
  public int getMaximumIntegerDigits();
  public int getMinimumFractionDigits();
  public int getMinimumIntegerDigits();
  public int getMultiplier();
  public int hashCode();
  public void applyLocalizedPattern(java.lang.String);
  public void applyPattern(java.lang.String);
  public void setCurrency(java.util.Currency);
  public void setDecimalFormatSymbols(java.text.DecimalFormatSymbols);
  public void setDecimalSeparatorAlwaysShown(boolean);
  public void setGroupingSize(int);
  public void setGroupingUsed(boolean);
  public void setMaximumFractionDigits(int);
  public void setMaximumIntegerDigits(int);
  public void setMinimumFractionDigits(int);
  public void setMinimumIntegerDigits(int);
  public void setMultiplier(int);
  public void setNegativePrefix(java.lang.String);
  public void setNegativeSuffix(java.lang.String);
  public void setParseBigDecimal(boolean);
  public void setParseIntegerOnly(boolean);
  public void setPositivePrefix(java.lang.String);
  public void setPositiveSuffix(java.lang.String);
  public void setRoundingMode(java.math.RoundingMode);
  public java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public java.lang.Object clone();
  public java.lang.String getNegativePrefix();
  public java.lang.String getNegativeSuffix();
  public java.lang.String getPositivePrefix();
  public java.lang.String getPositiveSuffix();
  public java.lang.String toLocalizedPattern();
  public java.lang.String toPattern();
  public java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public java.math.RoundingMode getRoundingMode();
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.text.DecimalFormatSymbols getDecimalFormatSymbols();
  public java.util.Currency getCurrency();
}
public class java.text.DecimalFormatSymbols
  extends java.lang.Object
  implements java.lang.Cloneable, java.io.Serializable
{
  public static final java.text.DecimalFormatSymbols getInstance();
  public static final java.text.DecimalFormatSymbols getInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public void <init>();
  public void <init>(java.util.Locale);
  public boolean equals(java.lang.Object);
  public char getDecimalSeparator();
  public char getDigit();
  public char getGroupingSeparator();
  public char getMinusSign();
  public char getMonetaryDecimalSeparator();
  public char getPatternSeparator();
  public char getPerMill();
  public char getPercent();
  public char getZeroDigit();
  public int hashCode();
  public void setCurrency(java.util.Currency);
  public void setCurrencySymbol(java.lang.String);
  public void setDecimalSeparator(char);
  public void setDigit(char);
  public void setExponentSeparator(java.lang.String);
  public void setGroupingSeparator(char);
  public void setInfinity(java.lang.String);
  public void setInternationalCurrencySymbol(java.lang.String);
  public void setMinusSign(char);
  public void setMonetaryDecimalSeparator(char);
  public void setNaN(java.lang.String);
  public void setPatternSeparator(char);
  public void setPerMill(char);
  public void setPercent(char);
  public void setZeroDigit(char);
  public java.lang.Object clone();
  public java.lang.String getCurrencySymbol();
  public java.lang.String getExponentSeparator();
  public java.lang.String getInfinity();
  public java.lang.String getInternationalCurrencySymbol();
  public java.lang.String getNaN();
  public java.util.Currency getCurrency();
}
public class java.text.FieldPosition
  extends java.lang.Object
{
  public void <init>(int);
  public void <init>(java.text.Format$Field);
  public void <init>(java.text.Format$Field, int);
  public boolean equals(java.lang.Object);
  public int getBeginIndex();
  public int getEndIndex();
  public int getField();
  public int hashCode();
  public void setBeginIndex(int);
  public void setEndIndex(int);
  public java.lang.String toString();
  public java.text.Format$Field getFieldAttribute();
}
public abstract class java.text.Format
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable
{
  public final java.lang.String format(java.lang.Object);
  public abstract java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public abstract java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.Object clone();
  public java.lang.Object parseObject(java.lang.String)  throws java.text.ParseException;
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  protected void <init>();
}
public class java.text.Format$Field
  extends java.text.AttributedCharacterIterator$Attribute
{
  protected void <init>(java.lang.String);
}
public class java.text.MessageFormat
  extends java.text.Format
{
  public static java.lang.String format(java.lang.String, java.lang.Object[]);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.util.Locale);
  public final java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public final java.lang.StringBuffer format(java.lang.Object[], java.lang.StringBuffer, java.text.FieldPosition);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void applyPattern(java.lang.String);
  public void setFormat(int, java.text.Format);
  public void setFormatByArgumentIndex(int, java.text.Format);
  public void setFormats(java.text.Format[]);
  public void setFormatsByArgumentIndex(java.text.Format[]);
  public void setLocale(java.util.Locale);
  public java.lang.Object clone();
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.Object[] parse(java.lang.String)  throws java.text.ParseException;
  public java.lang.Object[] parse(java.lang.String, java.text.ParsePosition);
  public java.lang.String toPattern();
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.text.Format[] getFormats();
  public java.text.Format[] getFormatsByArgumentIndex();
  public java.util.Locale getLocale();
}
public class java.text.MessageFormat$Field
  extends java.text.Format$Field
{
  protected void <init>(java.lang.String);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  public static final java.text.MessageFormat$Field ARGUMENT;
}
public final class java.text.Normalizer
  extends java.lang.Object
{
  public static boolean isNormalized(java.lang.CharSequence, java.text.Normalizer$Form);
  public static java.lang.String normalize(java.lang.CharSequence, java.text.Normalizer$Form);
}
public final class java.text.Normalizer$Form
  extends java.lang.Enum
{
  public static java.text.Normalizer$Form valueOf(java.lang.String);
  public static java.text.Normalizer$Form[] values();
  public static final java.text.Normalizer$Form NFC;
  public static final java.text.Normalizer$Form NFD;
  public static final java.text.Normalizer$Form NFKC;
  public static final java.text.Normalizer$Form NFKD;
}
public abstract class java.text.NumberFormat
  extends java.text.Format
{
  public static final java.text.NumberFormat getCurrencyInstance();
  public static final java.text.NumberFormat getInstance();
  public static final java.text.NumberFormat getIntegerInstance();
  public static final java.text.NumberFormat getNumberInstance();
  public static final java.text.NumberFormat getPercentInstance();
  public static java.text.NumberFormat getCurrencyInstance(java.util.Locale);
  public static java.text.NumberFormat getInstance(java.util.Locale);
  public static java.text.NumberFormat getIntegerInstance(java.util.Locale);
  public static java.text.NumberFormat getNumberInstance(java.util.Locale);
  public static java.text.NumberFormat getPercentInstance(java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public final java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public final java.lang.String format(double);
  public final java.lang.String format(long);
  public abstract java.lang.Number parse(java.lang.String, java.text.ParsePosition);
  public abstract java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);
  public abstract java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);
  public boolean equals(java.lang.Object);
  public boolean isGroupingUsed();
  public boolean isParseIntegerOnly();
  public int getMaximumFractionDigits();
  public int getMaximumIntegerDigits();
  public int getMinimumFractionDigits();
  public int getMinimumIntegerDigits();
  public int hashCode();
  public void setCurrency(java.util.Currency);
  public void setGroupingUsed(boolean);
  public void setMaximumFractionDigits(int);
  public void setMaximumIntegerDigits(int);
  public void setMinimumFractionDigits(int);
  public void setMinimumIntegerDigits(int);
  public void setParseIntegerOnly(boolean);
  public void setRoundingMode(java.math.RoundingMode);
  public java.lang.Number parse(java.lang.String)  throws java.text.ParseException;
  public java.lang.Object clone();
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.math.RoundingMode getRoundingMode();
  public java.util.Currency getCurrency();
  protected void <init>();
  public static final int FRACTION_FIELD;
  public static final int INTEGER_FIELD;
}
public class java.text.NumberFormat$Field
  extends java.text.Format$Field
{
  protected void <init>(java.lang.String);
  protected java.lang.Object readResolve()  throws java.io.InvalidObjectException;
  public static final java.text.NumberFormat$Field CURRENCY;
  public static final java.text.NumberFormat$Field DECIMAL_SEPARATOR;
  public static final java.text.NumberFormat$Field EXPONENT;
  public static final java.text.NumberFormat$Field EXPONENT_SIGN;
  public static final java.text.NumberFormat$Field EXPONENT_SYMBOL;
  public static final java.text.NumberFormat$Field FRACTION;
  public static final java.text.NumberFormat$Field GROUPING_SEPARATOR;
  public static final java.text.NumberFormat$Field INTEGER;
  public static final java.text.NumberFormat$Field PERCENT;
  public static final java.text.NumberFormat$Field PERMILLE;
  public static final java.text.NumberFormat$Field SIGN;
}
public class java.text.ParseException
  extends java.lang.Exception
{
  public void <init>(java.lang.String, int);
  public int getErrorOffset();
}
public class java.text.ParsePosition
  extends java.lang.Object
{
  public void <init>(int);
  public boolean equals(java.lang.Object);
  public int getErrorIndex();
  public int getIndex();
  public int hashCode();
  public void setErrorIndex(int);
  public void setIndex(int);
  public java.lang.String toString();
}
public class java.text.RuleBasedCollator
  extends java.text.Collator
{
  public void <init>(java.lang.String)  throws java.text.ParseException;
  public boolean equals(java.lang.Object);
  public int compare(java.lang.String, java.lang.String);
  public int hashCode();
  public java.lang.Object clone();
  public java.lang.String getRules();
  public java.text.CollationElementIterator getCollationElementIterator(java.lang.String);
  public java.text.CollationElementIterator getCollationElementIterator(java.text.CharacterIterator);
  public java.text.CollationKey getCollationKey(java.lang.String);
}
public class java.text.SimpleDateFormat
  extends java.text.DateFormat
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.text.DateFormatSymbols);
  public void <init>(java.lang.String, java.util.Locale);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void applyLocalizedPattern(java.lang.String);
  public void applyPattern(java.lang.String);
  public void set2DigitYearStart(java.util.Date);
  public void setDateFormatSymbols(java.text.DateFormatSymbols);
  public java.lang.Object clone();
  public java.lang.String toLocalizedPattern();
  public java.lang.String toPattern();
  public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition);
  public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object);
  public java.text.DateFormatSymbols getDateFormatSymbols();
  public java.util.Date get2DigitYearStart();
  public java.util.Date parse(java.lang.String, java.text.ParsePosition);
}
public final class java.text.StringCharacterIterator
  extends java.lang.Object
  implements java.text.CharacterIterator
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int);
  public void <init>(java.lang.String, int, int, int);
  public boolean equals(java.lang.Object);
  public char current();
  public char first();
  public char last();
  public char next();
  public char previous();
  public char setIndex(int);
  public int getBeginIndex();
  public int getEndIndex();
  public int getIndex();
  public int hashCode();
  public void setText(java.lang.String);
  public java.lang.Object clone();
}
public abstract class java.util.AbstractCollection
  extends java.lang.Object
  implements java.util.Collection
{
  public abstract int size();
  public abstract java.util.Iterator iterator();
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public boolean retainAll(java.util.Collection);
  public void clear();
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  protected void <init>();
}
public abstract class java.util.AbstractList
  extends java.util.AbstractCollection
  implements java.util.List
{
  public abstract java.lang.Object get(int);
  public boolean add(java.lang.Object);
  public boolean addAll(int, java.util.Collection);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public void add(int, java.lang.Object);
  public void clear();
  public java.lang.Object remove(int);
  public java.lang.Object set(int, java.lang.Object);
  public java.util.Iterator iterator();
  public java.util.List subList(int, int);
  public java.util.ListIterator listIterator();
  public java.util.ListIterator listIterator(int);
  protected void <init>();
  protected void removeRange(int, int);
  protected int modCount;
}
public abstract class java.util.AbstractMap
  extends java.lang.Object
  implements java.util.Map
{
  public abstract java.util.Set entrySet();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public int hashCode();
  public int size();
  public void clear();
  public void putAll(java.util.Map);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.String toString();
  public java.util.Collection values();
  public java.util.Set keySet();
  protected void <init>();
  protected java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
}
public class java.util.AbstractMap$SimpleEntry
  extends java.lang.Object
  implements java.util.Map$Entry, java.io.Serializable
{
  public void <init>(java.lang.Object, java.lang.Object);
  public void <init>(java.util.Map$Entry);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object getKey();
  public java.lang.Object getValue();
  public java.lang.Object setValue(java.lang.Object);
  public java.lang.String toString();
}
public class java.util.AbstractMap$SimpleImmutableEntry
  extends java.lang.Object
  implements java.util.Map$Entry, java.io.Serializable
{
  public void <init>(java.lang.Object, java.lang.Object);
  public void <init>(java.util.Map$Entry);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object getKey();
  public java.lang.Object getValue();
  public java.lang.Object setValue(java.lang.Object);
  public java.lang.String toString();
}
public abstract class java.util.AbstractQueue
  extends java.util.AbstractCollection
  implements java.util.Queue
{
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public void clear();
  public java.lang.Object element();
  public java.lang.Object remove();
  protected void <init>();
}
public abstract class java.util.AbstractSequentialList
  extends java.util.AbstractList
{
  public abstract java.util.ListIterator listIterator(int);
  public boolean addAll(int, java.util.Collection);
  public void add(int, java.lang.Object);
  public java.lang.Object get(int);
  public java.lang.Object remove(int);
  public java.lang.Object set(int, java.lang.Object);
  public java.util.Iterator iterator();
  protected void <init>();
}
public abstract class java.util.AbstractSet
  extends java.util.AbstractCollection
  implements java.util.Set
{
  public boolean equals(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public int hashCode();
  protected void <init>();
}
public class java.util.ArrayDeque
  extends java.util.AbstractCollection
  implements java.util.Deque, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public boolean offer(java.lang.Object);
  public boolean offerFirst(java.lang.Object);
  public boolean offerLast(java.lang.Object);
  public boolean remove(java.lang.Object);
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public int size();
  public void addFirst(java.lang.Object);
  public void addLast(java.lang.Object);
  public void clear();
  public void push(java.lang.Object);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object element();
  public java.lang.Object getFirst();
  public java.lang.Object getLast();
  public java.lang.Object peek();
  public java.lang.Object peekFirst();
  public java.lang.Object peekLast();
  public java.lang.Object poll();
  public java.lang.Object pollFirst();
  public java.lang.Object pollLast();
  public java.lang.Object pop();
  public java.lang.Object remove();
  public java.lang.Object removeFirst();
  public java.lang.Object removeLast();
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.util.ArrayDeque clone();
  public java.util.Iterator descendingIterator();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.ArrayList
  extends java.util.AbstractList
  implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean addAll(int, java.util.Collection);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public boolean removeIf(java.util.function.Predicate);
  public boolean retainAll(java.util.Collection);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public int size();
  public void add(int, java.lang.Object);
  public void clear();
  public void ensureCapacity(int);
  public void forEach(java.util.function.Consumer);
  public void replaceAll(java.util.function.UnaryOperator);
  public void sort(java.util.Comparator);
  public void trimToSize();
  public java.lang.Object clone();
  public java.lang.Object get(int);
  public java.lang.Object remove(int);
  public java.lang.Object set(int, java.lang.Object);
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.util.Iterator iterator();
  public java.util.List subList(int, int);
  public java.util.ListIterator listIterator();
  public java.util.ListIterator listIterator(int);
  public java.util.Spliterator spliterator();
  protected void removeRange(int, int);
}
public class java.util.Arrays
  extends java.lang.Object
{
  public static boolean deepEquals(java.lang.Object[], java.lang.Object[]);
  public static boolean equals(boolean[], boolean[]);
  public static boolean equals(byte[], byte[]);
  public static boolean equals(char[], char[]);
  public static boolean equals(double[], double[]);
  public static boolean equals(float[], float[]);
  public static boolean equals(int[], int[]);
  public static boolean equals(java.lang.Object[], java.lang.Object[]);
  public static boolean equals(long[], long[]);
  public static boolean equals(short[], short[]);
  public static int binarySearch(byte[], byte);
  public static int binarySearch(byte[], int, int, byte);
  public static int binarySearch(char[], char);
  public static int binarySearch(char[], int, int, char);
  public static int binarySearch(double[], double);
  public static int binarySearch(double[], int, int, double);
  public static int binarySearch(float[], float);
  public static int binarySearch(float[], int, int, float);
  public static int binarySearch(int[], int);
  public static int binarySearch(int[], int, int, int);
  public static int binarySearch(java.lang.Object[], int, int, java.lang.Object);
  public static int binarySearch(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator);
  public static int binarySearch(java.lang.Object[], java.lang.Object);
  public static int binarySearch(java.lang.Object[], java.lang.Object, java.util.Comparator);
  public static int binarySearch(long[], int, int, long);
  public static int binarySearch(long[], long);
  public static int binarySearch(short[], int, int, short);
  public static int binarySearch(short[], short);
  public static int deepHashCode(java.lang.Object[]);
  public static int hashCode(boolean[]);
  public static int hashCode(byte[]);
  public static int hashCode(char[]);
  public static int hashCode(double[]);
  public static int hashCode(float[]);
  public static int hashCode(int[]);
  public static int hashCode(java.lang.Object[]);
  public static int hashCode(long[]);
  public static int hashCode(short[]);
  public static void fill(boolean[], boolean);
  public static void fill(boolean[], int, int, boolean);
  public static void fill(byte[], byte);
  public static void fill(byte[], int, int, byte);
  public static void fill(char[], char);
  public static void fill(char[], int, int, char);
  public static void fill(double[], double);
  public static void fill(double[], int, int, double);
  public static void fill(float[], float);
  public static void fill(float[], int, int, float);
  public static void fill(int[], int);
  public static void fill(int[], int, int, int);
  public static void fill(java.lang.Object[], int, int, java.lang.Object);
  public static void fill(java.lang.Object[], java.lang.Object);
  public static void fill(long[], int, int, long);
  public static void fill(long[], long);
  public static void fill(short[], int, int, short);
  public static void fill(short[], short);
  public static void parallelPrefix(double[], int, int, java.util.function.DoubleBinaryOperator);
  public static void parallelPrefix(double[], java.util.function.DoubleBinaryOperator);
  public static void parallelPrefix(int[], int, int, java.util.function.IntBinaryOperator);
  public static void parallelPrefix(int[], java.util.function.IntBinaryOperator);
  public static void parallelPrefix(java.lang.Object[], int, int, java.util.function.BinaryOperator);
  public static void parallelPrefix(java.lang.Object[], java.util.function.BinaryOperator);
  public static void parallelPrefix(long[], int, int, java.util.function.LongBinaryOperator);
  public static void parallelPrefix(long[], java.util.function.LongBinaryOperator);
  public static void parallelSetAll(double[], java.util.function.IntToDoubleFunction);
  public static void parallelSetAll(int[], java.util.function.IntUnaryOperator);
  public static void parallelSetAll(java.lang.Object[], java.util.function.IntFunction);
  public static void parallelSetAll(long[], java.util.function.IntToLongFunction);
  public static void parallelSort(byte[]);
  public static void parallelSort(byte[], int, int);
  public static void parallelSort(char[]);
  public static void parallelSort(char[], int, int);
  public static void parallelSort(double[]);
  public static void parallelSort(double[], int, int);
  public static void parallelSort(float[]);
  public static void parallelSort(float[], int, int);
  public static void parallelSort(int[]);
  public static void parallelSort(int[], int, int);
  public static void parallelSort(java.lang.Comparable[]);
  public static void parallelSort(java.lang.Comparable[], int, int);
  public static void parallelSort(java.lang.Object[], int, int, java.util.Comparator);
  public static void parallelSort(java.lang.Object[], java.util.Comparator);
  public static void parallelSort(long[]);
  public static void parallelSort(long[], int, int);
  public static void parallelSort(short[]);
  public static void parallelSort(short[], int, int);
  public static void setAll(double[], java.util.function.IntToDoubleFunction);
  public static void setAll(int[], java.util.function.IntUnaryOperator);
  public static void setAll(java.lang.Object[], java.util.function.IntFunction);
  public static void setAll(long[], java.util.function.IntToLongFunction);
  public static void sort(byte[]);
  public static void sort(byte[], int, int);
  public static void sort(char[]);
  public static void sort(char[], int, int);
  public static void sort(double[]);
  public static void sort(double[], int, int);
  public static void sort(float[]);
  public static void sort(float[], int, int);
  public static void sort(int[]);
  public static void sort(int[], int, int);
  public static void sort(java.lang.Object[]);
  public static void sort(java.lang.Object[], int, int);
  public static void sort(java.lang.Object[], int, int, java.util.Comparator);
  public static void sort(java.lang.Object[], java.util.Comparator);
  public static void sort(long[]);
  public static void sort(long[], int, int);
  public static void sort(short[]);
  public static void sort(short[], int, int);
  public static boolean[] copyOf(boolean[], int);
  public static boolean[] copyOfRange(boolean[], int, int);
  public static byte[] copyOf(byte[], int);
  public static byte[] copyOfRange(byte[], int, int);
  public static char[] copyOf(char[], int);
  public static char[] copyOfRange(char[], int, int);
  public static double[] copyOf(double[], int);
  public static double[] copyOfRange(double[], int, int);
  public static float[] copyOf(float[], int);
  public static float[] copyOfRange(float[], int, int);
  public static int[] copyOf(int[], int);
  public static int[] copyOfRange(int[], int, int);
  public static java.lang.Object[] copyOf(java.lang.Object[], int);
  public static java.lang.Object[] copyOf(java.lang.Object[], int, java.lang.Class);
  public static java.lang.Object[] copyOfRange(java.lang.Object[], int, int);
  public static java.lang.Object[] copyOfRange(java.lang.Object[], int, int, java.lang.Class);
  public static java.lang.String deepToString(java.lang.Object[]);
  public static java.lang.String toString(boolean[]);
  public static java.lang.String toString(byte[]);
  public static java.lang.String toString(char[]);
  public static java.lang.String toString(double[]);
  public static java.lang.String toString(float[]);
  public static java.lang.String toString(int[]);
  public static java.lang.String toString(java.lang.Object[]);
  public static java.lang.String toString(long[]);
  public static java.lang.String toString(short[]);
  public static java.util.List asList(java.lang.Object[]);
  public static java.util.Spliterator spliterator(java.lang.Object[]);
  public static java.util.Spliterator spliterator(java.lang.Object[], int, int);
  public static java.util.Spliterator$OfDouble spliterator(double[]);
  public static java.util.Spliterator$OfDouble spliterator(double[], int, int);
  public static java.util.Spliterator$OfInt spliterator(int[]);
  public static java.util.Spliterator$OfInt spliterator(int[], int, int);
  public static java.util.Spliterator$OfLong spliterator(long[]);
  public static java.util.Spliterator$OfLong spliterator(long[], int, int);
  public static java.util.stream.DoubleStream stream(double[]);
  public static java.util.stream.DoubleStream stream(double[], int, int);
  public static java.util.stream.IntStream stream(int[]);
  public static java.util.stream.IntStream stream(int[], int, int);
  public static java.util.stream.LongStream stream(long[]);
  public static java.util.stream.LongStream stream(long[], int, int);
  public static java.util.stream.Stream stream(java.lang.Object[]);
  public static java.util.stream.Stream stream(java.lang.Object[], int, int);
  public static long[] copyOf(long[], int);
  public static long[] copyOfRange(long[], int, int);
  public static short[] copyOf(short[], int);
  public static short[] copyOfRange(short[], int, int);
}
public class java.util.BitSet
  extends java.lang.Object
  implements java.lang.Cloneable, java.io.Serializable
{
  public static java.util.BitSet valueOf(byte[]);
  public static java.util.BitSet valueOf(java.nio.ByteBuffer);
  public static java.util.BitSet valueOf(java.nio.LongBuffer);
  public static java.util.BitSet valueOf(long[]);
  public void <init>();
  public void <init>(int);
  public boolean equals(java.lang.Object);
  public boolean get(int);
  public boolean intersects(java.util.BitSet);
  public boolean isEmpty();
  public int cardinality();
  public int hashCode();
  public int length();
  public int nextClearBit(int);
  public int nextSetBit(int);
  public int previousClearBit(int);
  public int previousSetBit(int);
  public int size();
  public void and(java.util.BitSet);
  public void andNot(java.util.BitSet);
  public void clear();
  public void clear(int);
  public void clear(int, int);
  public void flip(int);
  public void flip(int, int);
  public void or(java.util.BitSet);
  public void set(int);
  public void set(int, boolean);
  public void set(int, int);
  public void set(int, int, boolean);
  public void xor(java.util.BitSet);
  public byte[] toByteArray();
  public java.lang.Object clone();
  public java.lang.String toString();
  public java.util.BitSet get(int, int);
  public java.util.stream.IntStream stream();
  public long[] toLongArray();
}
public abstract class java.util.Calendar
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable
{
  public static java.util.Calendar getInstance();
  public static java.util.Calendar getInstance(java.util.Locale);
  public static java.util.Calendar getInstance(java.util.TimeZone);
  public static java.util.Calendar getInstance(java.util.TimeZone, java.util.Locale);
  public static java.util.Locale[] getAvailableLocales();
  public final boolean isSet(int);
  public final void clear();
  public final void clear(int);
  public final void set(int, int, int);
  public final void set(int, int, int, int, int);
  public final void set(int, int, int, int, int, int);
  public final void setTime(java.util.Date);
  public final java.util.Date getTime();
  public abstract int getGreatestMinimum(int);
  public abstract int getLeastMaximum(int);
  public abstract int getMaximum(int);
  public abstract int getMinimum(int);
  public abstract void add(int, int);
  public abstract void roll(int, boolean);
  public boolean after(java.lang.Object);
  public boolean before(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isLenient();
  public boolean isWeekDateSupported();
  public int compareTo(java.lang.Object);
  public int compareTo(java.util.Calendar);
  public int get(int);
  public int getActualMaximum(int);
  public int getActualMinimum(int);
  public int getFirstDayOfWeek();
  public int getMinimalDaysInFirstWeek();
  public int getWeekYear();
  public int getWeeksInWeekYear();
  public int hashCode();
  public long getTimeInMillis();
  public void roll(int, int);
  public void set(int, int);
  public void setFirstDayOfWeek(int);
  public void setLenient(boolean);
  public void setMinimalDaysInFirstWeek(int);
  public void setTimeInMillis(long);
  public void setTimeZone(java.util.TimeZone);
  public void setWeekDate(int, int, int);
  public java.lang.Object clone();
  public java.lang.String getDisplayName(int, int, java.util.Locale);
  public java.lang.String toString();
  public java.util.Map getDisplayNames(int, int, java.util.Locale);
  public java.util.TimeZone getTimeZone();
  protected void <init>();
  protected void <init>(java.util.TimeZone, java.util.Locale);
  protected final int internalGet(int);
  protected abstract void computeFields();
  protected abstract void computeTime();
  protected void complete();
  public static final int ALL_STYLES;
  public static final int AM;
  public static final int AM_PM;
  public static final int APRIL;
  public static final int AUGUST;
  public static final int DATE;
  public static final int DAY_OF_MONTH;
  public static final int DAY_OF_WEEK;
  public static final int DAY_OF_WEEK_IN_MONTH;
  public static final int DAY_OF_YEAR;
  public static final int DECEMBER;
  public static final int DST_OFFSET;
  public static final int ERA;
  public static final int FEBRUARY;
  public static final int FIELD_COUNT;
  public static final int FRIDAY;
  public static final int HOUR;
  public static final int HOUR_OF_DAY;
  public static final int JANUARY;
  public static final int JULY;
  public static final int JUNE;
  public static final int LONG;
  public static final int MARCH;
  public static final int MAY;
  public static final int MILLISECOND;
  public static final int MINUTE;
  public static final int MONDAY;
  public static final int MONTH;
  public static final int NOVEMBER;
  public static final int OCTOBER;
  public static final int PM;
  public static final int SATURDAY;
  public static final int SECOND;
  public static final int SEPTEMBER;
  public static final int SHORT;
  public static final int SUNDAY;
  public static final int THURSDAY;
  public static final int TUESDAY;
  public static final int UNDECIMBER;
  public static final int WEDNESDAY;
  public static final int WEEK_OF_MONTH;
  public static final int WEEK_OF_YEAR;
  public static final int YEAR;
  public static final int ZONE_OFFSET;
  protected boolean areFieldsSet;
  protected boolean isTimeSet;
  protected long time;
  protected boolean[] isSet;
  protected int[] fields;
}
public interface java.util.Collection
  extends java.lang.Iterable
{
  public abstract boolean add(java.lang.Object);
  public abstract boolean addAll(java.util.Collection);
  public abstract boolean contains(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection);
  public abstract boolean equals(java.lang.Object);
  public abstract boolean isEmpty();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeAll(java.util.Collection);
  public abstract boolean retainAll(java.util.Collection);
  public abstract int hashCode();
  public abstract int size();
  public abstract void clear();
  public abstract java.lang.Object[] toArray();
  public abstract java.lang.Object[] toArray(java.lang.Object[]);
  public abstract java.util.Iterator iterator();
  public boolean removeIf(java.util.function.Predicate);
  public java.util.Spliterator spliterator();
  public java.util.stream.Stream parallelStream();
  public java.util.stream.Stream stream();
}
public class java.util.Collections
  extends java.lang.Object
{
  public static final java.util.List emptyList();
  public static final java.util.Map emptyMap();
  public static final java.util.Set emptySet();
  public static boolean addAll(java.util.Collection, java.lang.Object[]);
  public static boolean disjoint(java.util.Collection, java.util.Collection);
  public static boolean replaceAll(java.util.List, java.lang.Object, java.lang.Object);
  public static int binarySearch(java.util.List, java.lang.Object);
  public static int binarySearch(java.util.List, java.lang.Object, java.util.Comparator);
  public static int frequency(java.util.Collection, java.lang.Object);
  public static int indexOfSubList(java.util.List, java.util.List);
  public static int lastIndexOfSubList(java.util.List, java.util.List);
  public static void copy(java.util.List, java.util.List);
  public static void fill(java.util.List, java.lang.Object);
  public static void reverse(java.util.List);
  public static void rotate(java.util.List, int);
  public static void shuffle(java.util.List);
  public static void shuffle(java.util.List, java.util.Random);
  public static void sort(java.util.List);
  public static void sort(java.util.List, java.util.Comparator);
  public static void swap(java.util.List, int, int);
  public static java.lang.Object max(java.util.Collection);
  public static java.lang.Object max(java.util.Collection, java.util.Comparator);
  public static java.lang.Object min(java.util.Collection);
  public static java.lang.Object min(java.util.Collection, java.util.Comparator);
  public static java.util.ArrayList list(java.util.Enumeration);
  public static java.util.Collection checkedCollection(java.util.Collection, java.lang.Class);
  public static java.util.Collection synchronizedCollection(java.util.Collection);
  public static java.util.Collection unmodifiableCollection(java.util.Collection);
  public static java.util.Comparator reverseOrder();
  public static java.util.Comparator reverseOrder(java.util.Comparator);
  public static java.util.Enumeration emptyEnumeration();
  public static java.util.Enumeration enumeration(java.util.Collection);
  public static java.util.Iterator emptyIterator();
  public static java.util.List checkedList(java.util.List, java.lang.Class);
  public static java.util.List nCopies(int, java.lang.Object);
  public static java.util.List singletonList(java.lang.Object);
  public static java.util.List synchronizedList(java.util.List);
  public static java.util.List unmodifiableList(java.util.List);
  public static java.util.ListIterator emptyListIterator();
  public static java.util.Map checkedMap(java.util.Map, java.lang.Class, java.lang.Class);
  public static java.util.Map singletonMap(java.lang.Object, java.lang.Object);
  public static java.util.Map synchronizedMap(java.util.Map);
  public static java.util.Map unmodifiableMap(java.util.Map);
  public static java.util.Queue asLifoQueue(java.util.Deque);
  public static java.util.Set checkedSet(java.util.Set, java.lang.Class);
  public static java.util.Set newSetFromMap(java.util.Map);
  public static java.util.Set singleton(java.lang.Object);
  public static java.util.Set synchronizedSet(java.util.Set);
  public static java.util.Set unmodifiableSet(java.util.Set);
  public static java.util.SortedMap checkedSortedMap(java.util.SortedMap, java.lang.Class, java.lang.Class);
  public static java.util.SortedMap synchronizedSortedMap(java.util.SortedMap);
  public static java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap);
  public static java.util.SortedSet checkedSortedSet(java.util.SortedSet, java.lang.Class);
  public static java.util.SortedSet synchronizedSortedSet(java.util.SortedSet);
  public static java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet);
  public static final java.util.List EMPTY_LIST;
  public static final java.util.Map EMPTY_MAP;
  public static final java.util.Set EMPTY_SET;
}
public interface java.util.Comparator
{
  public static java.util.Comparator comparing(java.util.function.Function);
  public static java.util.Comparator comparing(java.util.function.Function, java.util.Comparator);
  public static java.util.Comparator comparingDouble(java.util.function.ToDoubleFunction);
  public static java.util.Comparator comparingInt(java.util.function.ToIntFunction);
  public static java.util.Comparator comparingLong(java.util.function.ToLongFunction);
  public static java.util.Comparator naturalOrder();
  public static java.util.Comparator nullsFirst(java.util.Comparator);
  public static java.util.Comparator nullsLast(java.util.Comparator);
  public static java.util.Comparator reverseOrder();
  public abstract boolean equals(java.lang.Object);
  public abstract int compare(java.lang.Object, java.lang.Object);
  public java.util.Comparator reversed();
  public java.util.Comparator thenComparing(java.util.Comparator);
  public java.util.Comparator thenComparing(java.util.function.Function);
  public java.util.Comparator thenComparing(java.util.function.Function, java.util.Comparator);
  public java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction);
  public java.util.Comparator thenComparingInt(java.util.function.ToIntFunction);
  public java.util.Comparator thenComparingLong(java.util.function.ToLongFunction);
}
public class java.util.ConcurrentModificationException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public final class java.util.Currency
  extends java.lang.Object
  implements java.io.Serializable
{
  public static java.util.Currency getInstance(java.lang.String);
  public static java.util.Currency getInstance(java.util.Locale);
  public static java.util.Set getAvailableCurrencies();
  public int getDefaultFractionDigits();
  public int getNumericCode();
  public java.lang.String getCurrencyCode();
  public java.lang.String getDisplayName();
  public java.lang.String getDisplayName(java.util.Locale);
  public java.lang.String getSymbol();
  public java.lang.String getSymbol(java.util.Locale);
  public java.lang.String toString();
}
public class java.util.Date
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable
{
  public static long UTC(int, int, int, int, int, int);
  public static long parse(java.lang.String);
  public void <init>();
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.lang.String);
  public void <init>(long);
  public boolean after(java.util.Date);
  public boolean before(java.util.Date);
  public boolean equals(java.lang.Object);
  public int compareTo(java.lang.Object);
  public int compareTo(java.util.Date);
  public int getDate();
  public int getDay();
  public int getHours();
  public int getMinutes();
  public int getMonth();
  public int getSeconds();
  public int getTimezoneOffset();
  public int getYear();
  public int hashCode();
  public long getTime();
  public void setDate(int);
  public void setHours(int);
  public void setMinutes(int);
  public void setMonth(int);
  public void setSeconds(int);
  public void setTime(long);
  public void setYear(int);
  public java.lang.Object clone();
  public java.lang.String toGMTString();
  public java.lang.String toLocaleString();
  public java.lang.String toString();
}
public interface java.util.Deque
  extends java.util.Queue
{
  public abstract boolean add(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract boolean offer(java.lang.Object);
  public abstract boolean offerFirst(java.lang.Object);
  public abstract boolean offerLast(java.lang.Object);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeFirstOccurrence(java.lang.Object);
  public abstract boolean removeLastOccurrence(java.lang.Object);
  public abstract int size();
  public abstract void addFirst(java.lang.Object);
  public abstract void addLast(java.lang.Object);
  public abstract void push(java.lang.Object);
  public abstract java.lang.Object element();
  public abstract java.lang.Object getFirst();
  public abstract java.lang.Object getLast();
  public abstract java.lang.Object peek();
  public abstract java.lang.Object peekFirst();
  public abstract java.lang.Object peekLast();
  public abstract java.lang.Object poll();
  public abstract java.lang.Object pollFirst();
  public abstract java.lang.Object pollLast();
  public abstract java.lang.Object pop();
  public abstract java.lang.Object remove();
  public abstract java.lang.Object removeFirst();
  public abstract java.lang.Object removeLast();
  public abstract java.util.Iterator descendingIterator();
  public abstract java.util.Iterator iterator();
}
public abstract class java.util.Dictionary
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean isEmpty();
  public abstract int size();
  public abstract java.lang.Object get(java.lang.Object);
  public abstract java.lang.Object put(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object remove(java.lang.Object);
  public abstract java.util.Enumeration elements();
  public abstract java.util.Enumeration keys();
}
public class java.util.DoubleSummaryStatistics
  extends java.lang.Object
  implements java.util.function.DoubleConsumer
{
  public void <init>();
  public final double getAverage();
  public final double getMax();
  public final double getMin();
  public final double getSum();
  public final long getCount();
  public void accept(double);
  public void combine(java.util.DoubleSummaryStatistics);
  public java.lang.String toString();
}
public class java.util.DuplicateFormatFlagsException
  extends java.util.IllegalFormatException
{
  public void <init>(java.lang.String);
  public java.lang.String getFlags();
  public java.lang.String getMessage();
}
public class java.util.EmptyStackException
  extends java.lang.RuntimeException
{
  public void <init>();
}
public class java.util.EnumMap
  extends java.util.AbstractMap
  implements java.io.Serializable, java.lang.Cloneable
{
  public void <init>(java.lang.Class);
  public void <init>(java.util.EnumMap);
  public void <init>(java.util.Map);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int size();
  public void clear();
  public void putAll(java.util.Map);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Enum, java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.util.Collection values();
  public java.util.EnumMap clone();
  public java.util.Set entrySet();
  public java.util.Set keySet();
}
public abstract class java.util.EnumSet
  extends java.util.AbstractSet
  implements java.lang.Cloneable, java.io.Serializable
{
  public static java.util.EnumSet allOf(java.lang.Class);
  public static java.util.EnumSet complementOf(java.util.EnumSet);
  public static java.util.EnumSet copyOf(java.util.Collection);
  public static java.util.EnumSet copyOf(java.util.EnumSet);
  public static java.util.EnumSet noneOf(java.lang.Class);
  public static java.util.EnumSet of(java.lang.Enum);
  public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum);
  public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum);
  public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum);
  public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum);
  public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum[]);
  public static java.util.EnumSet range(java.lang.Enum, java.lang.Enum);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.util.EnumSet clone();
}
public interface java.util.Enumeration
{
  public abstract boolean hasMoreElements();
  public abstract java.lang.Object nextElement();
}
public interface java.util.EventListener
{
}
public abstract class java.util.EventListenerProxy
  extends java.lang.Object
  implements java.util.EventListener
{
  public void <init>(java.util.EventListener);
  public java.util.EventListener getListener();
}
public class java.util.EventObject
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.lang.Object);
  public java.lang.Object getSource();
  public java.lang.String toString();
  protected java.lang.Object source;
}
public class java.util.FormatFlagsConversionMismatchException
  extends java.util.IllegalFormatException
{
  public void <init>(java.lang.String, char);
  public char getConversion();
  public java.lang.String getFlags();
  public java.lang.String getMessage();
}
public interface java.util.Formattable
{
  public abstract void formatTo(java.util.Formatter, int, int, int);
}
public class java.util.FormattableFlags
  extends java.lang.Object
{
  public static final int ALTERNATE;
  public static final int LEFT_JUSTIFY;
  public static final int UPPERCASE;
}
public final class java.util.Formatter
  extends java.lang.Object
  implements java.io.Closeable, java.io.Flushable
{
  public void <init>();
  public void <init>(java.io.File)  throws java.io.FileNotFoundException;
  public void <init>(java.io.File, java.lang.String)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public void <init>(java.io.File, java.lang.String, java.util.Locale)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, java.lang.String)  throws java.io.UnsupportedEncodingException;
  public void <init>(java.io.OutputStream, java.lang.String, java.util.Locale)  throws java.io.UnsupportedEncodingException;
  public void <init>(java.io.PrintStream);
  public void <init>(java.lang.Appendable);
  public void <init>(java.lang.Appendable, java.util.Locale);
  public void <init>(java.lang.String)  throws java.io.FileNotFoundException;
  public void <init>(java.lang.String, java.lang.String)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public void <init>(java.lang.String, java.lang.String, java.util.Locale)  throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException;
  public void <init>(java.util.Locale);
  public void close();
  public void flush();
  public java.io.IOException ioException();
  public java.lang.Appendable out();
  public java.lang.String toString();
  public java.util.Formatter format(java.lang.String, java.lang.Object[]);
  public java.util.Formatter format(java.util.Locale, java.lang.String, java.lang.Object[]);
  public java.util.Locale locale();
}
public final class java.util.Formatter$BigDecimalLayoutForm
  extends java.lang.Enum
{
  public static java.util.Formatter$BigDecimalLayoutForm valueOf(java.lang.String);
  public static java.util.Formatter$BigDecimalLayoutForm[] values();
  public static final java.util.Formatter$BigDecimalLayoutForm DECIMAL_FLOAT;
  public static final java.util.Formatter$BigDecimalLayoutForm SCIENTIFIC;
}
public class java.util.FormatterClosedException
  extends java.lang.IllegalStateException
{
  public void <init>();
}
public class java.util.GregorianCalendar
  extends java.util.Calendar
{
  public void <init>();
  public void <init>(int, int, int);
  public void <init>(int, int, int, int, int);
  public void <init>(int, int, int, int, int, int);
  public void <init>(java.util.Locale);
  public void <init>(java.util.TimeZone);
  public void <init>(java.util.TimeZone, java.util.Locale);
  public final boolean isWeekDateSupported();
  public final java.util.Date getGregorianChange();
  public boolean equals(java.lang.Object);
  public boolean isLeapYear(int);
  public int getActualMaximum(int);
  public int getActualMinimum(int);
  public int getGreatestMinimum(int);
  public int getLeastMaximum(int);
  public int getMaximum(int);
  public int getMinimum(int);
  public int getWeekYear();
  public int getWeeksInWeekYear();
  public int hashCode();
  public void add(int, int);
  public void roll(int, boolean);
  public void roll(int, int);
  public void setGregorianChange(java.util.Date);
  public void setTimeZone(java.util.TimeZone);
  public void setWeekDate(int, int, int);
  public java.lang.Object clone();
  public java.util.TimeZone getTimeZone();
  protected void computeFields();
  protected void computeTime();
  public static final int AD;
  public static final int BC;
}
public class java.util.HashMap
  extends java.util.AbstractMap
  implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, float);
  public void <init>(java.util.Map);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean isEmpty();
  public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public int size();
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void putAll(java.util.Map);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object clone();
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.util.Collection values();
  public java.util.Set entrySet();
  public java.util.Set keySet();
}
public class java.util.HashSet
  extends java.util.AbstractSet
  implements java.util.Set, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, float);
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public int size();
  public void clear();
  public java.lang.Object clone();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.Hashtable
  extends java.util.Dictionary
  implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, float);
  public void <init>(java.util.Map);
  public boolean contains(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object, java.lang.Object);
  public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public int hashCode();
  public int size();
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void putAll(java.util.Map);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object clone();
  public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object);
  public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object replace(java.lang.Object, java.lang.Object);
  public java.lang.String toString();
  public java.util.Collection values();
  public java.util.Enumeration elements();
  public java.util.Enumeration keys();
  public java.util.Set entrySet();
  public java.util.Set keySet();
  protected void rehash();
}
public class java.util.IdentityHashMap
  extends java.util.AbstractMap
  implements java.util.Map, java.io.Serializable, java.lang.Cloneable
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.util.Map);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public int hashCode();
  public int size();
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void putAll(java.util.Map);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object clone();
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.util.Collection values();
  public java.util.Set entrySet();
  public java.util.Set keySet();
}
public class java.util.IllegalFormatCodePointException
  extends java.util.IllegalFormatException
{
  public void <init>(int);
  public int getCodePoint();
  public java.lang.String getMessage();
}
public class java.util.IllegalFormatConversionException
  extends java.util.IllegalFormatException
{
  public void <init>(char, java.lang.Class);
  public char getConversion();
  public java.lang.Class getArgumentClass();
  public java.lang.String getMessage();
}
public class java.util.IllegalFormatException
  extends java.lang.IllegalArgumentException
{
}
public class java.util.IllegalFormatFlagsException
  extends java.util.IllegalFormatException
{
  public void <init>(java.lang.String);
  public java.lang.String getFlags();
  public java.lang.String getMessage();
}
public class java.util.IllegalFormatPrecisionException
  extends java.util.IllegalFormatException
{
  public void <init>(int);
  public int getPrecision();
  public java.lang.String getMessage();
}
public class java.util.IllegalFormatWidthException
  extends java.util.IllegalFormatException
{
  public void <init>(int);
  public int getWidth();
  public java.lang.String getMessage();
}
public class java.util.IllformedLocaleException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, int);
  public int getErrorIndex();
}
public class java.util.InputMismatchException
  extends java.util.NoSuchElementException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.util.IntSummaryStatistics
  extends java.lang.Object
  implements java.util.function.IntConsumer
{
  public void <init>();
  public final double getAverage();
  public final int getMax();
  public final int getMin();
  public final long getCount();
  public final long getSum();
  public void accept(int);
  public void combine(java.util.IntSummaryStatistics);
  public java.lang.String toString();
}
public class java.util.InvalidPropertiesFormatException
  extends java.io.IOException
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.Throwable);
}
public interface java.util.Iterator
{
  public abstract boolean hasNext();
  public abstract java.lang.Object next();
  public void forEachRemaining(java.util.function.Consumer);
  public void remove();
}
public class java.util.LinkedHashMap
  extends java.util.HashMap
  implements java.util.Map
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, float);
  public void <init>(int, float, boolean);
  public void <init>(java.util.Map);
  public boolean containsValue(java.lang.Object);
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object get(java.lang.Object);
  protected boolean removeEldestEntry(java.util.Map$Entry);
}
public class java.util.LinkedHashSet
  extends java.util.HashSet
  implements java.util.Set, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, float);
  public void <init>(java.util.Collection);
  public java.util.Spliterator spliterator();
}
public class java.util.LinkedList
  extends java.util.AbstractSequentialList
  implements java.util.List, java.util.Deque, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean addAll(int, java.util.Collection);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean offer(java.lang.Object);
  public boolean offerFirst(java.lang.Object);
  public boolean offerLast(java.lang.Object);
  public boolean remove(java.lang.Object);
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public int size();
  public void add(int, java.lang.Object);
  public void addFirst(java.lang.Object);
  public void addLast(java.lang.Object);
  public void clear();
  public void push(java.lang.Object);
  public java.lang.Object clone();
  public java.lang.Object element();
  public java.lang.Object get(int);
  public java.lang.Object getFirst();
  public java.lang.Object getLast();
  public java.lang.Object peek();
  public java.lang.Object peekFirst();
  public java.lang.Object peekLast();
  public java.lang.Object poll();
  public java.lang.Object pollFirst();
  public java.lang.Object pollLast();
  public java.lang.Object pop();
  public java.lang.Object remove();
  public java.lang.Object remove(int);
  public java.lang.Object removeFirst();
  public java.lang.Object removeLast();
  public java.lang.Object set(int, java.lang.Object);
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.util.Iterator descendingIterator();
  public java.util.ListIterator listIterator(int);
  public java.util.Spliterator spliterator();
}
public interface java.util.List
  extends java.util.Collection
{
  public abstract boolean add(java.lang.Object);
  public abstract boolean addAll(int, java.util.Collection);
  public abstract boolean addAll(java.util.Collection);
  public abstract boolean contains(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection);
  public abstract boolean equals(java.lang.Object);
  public abstract boolean isEmpty();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeAll(java.util.Collection);
  public abstract boolean retainAll(java.util.Collection);
  public abstract int hashCode();
  public abstract int indexOf(java.lang.Object);
  public abstract int lastIndexOf(java.lang.Object);
  public abstract int size();
  public abstract void add(int, java.lang.Object);
  public abstract void clear();
  public abstract java.lang.Object get(int);
  public abstract java.lang.Object remove(int);
  public abstract java.lang.Object set(int, java.lang.Object);
  public abstract java.lang.Object[] toArray();
  public abstract java.lang.Object[] toArray(java.lang.Object[]);
  public abstract java.util.Iterator iterator();
  public abstract java.util.List subList(int, int);
  public abstract java.util.ListIterator listIterator();
  public abstract java.util.ListIterator listIterator(int);
  public void replaceAll(java.util.function.UnaryOperator);
  public void sort(java.util.Comparator);
  public java.util.Spliterator spliterator();
}
public interface java.util.ListIterator
  extends java.util.Iterator
{
  public abstract boolean hasNext();
  public abstract boolean hasPrevious();
  public abstract int nextIndex();
  public abstract int previousIndex();
  public abstract void add(java.lang.Object);
  public abstract void remove();
  public abstract void set(java.lang.Object);
  public abstract java.lang.Object next();
  public abstract java.lang.Object previous();
}
public abstract class java.util.ListResourceBundle
  extends java.util.ResourceBundle
{
  public void <init>();
  public final java.lang.Object handleGetObject(java.lang.String);
  public java.util.Enumeration getKeys();
  protected abstract java.lang.Object[][] getContents();
  protected java.util.Set handleKeySet();
}
public final class java.util.Locale
  extends java.lang.Object
  implements java.lang.Cloneable, java.io.Serializable
{
  public static void setDefault(java.util.Locale$Category, java.util.Locale);
  public static void setDefault(java.util.Locale);
  public static java.lang.String[] getISOCountries();
  public static java.lang.String[] getISOLanguages();
  public static java.util.Locale forLanguageTag(java.lang.String);
  public static java.util.Locale getDefault();
  public static java.util.Locale getDefault(java.util.Locale$Category);
  public static java.util.Locale[] getAvailableLocales();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public final java.lang.String getDisplayCountry();
  public final java.lang.String getDisplayLanguage();
  public final java.lang.String getDisplayName();
  public final java.lang.String getDisplayVariant();
  public final java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object clone();
  public java.lang.String getCountry();
  public java.lang.String getDisplayCountry(java.util.Locale);
  public java.lang.String getDisplayLanguage(java.util.Locale);
  public java.lang.String getDisplayName(java.util.Locale);
  public java.lang.String getDisplayScript();
  public java.lang.String getDisplayScript(java.util.Locale);
  public java.lang.String getDisplayVariant(java.util.Locale);
  public java.lang.String getExtension(char);
  public java.lang.String getISO3Country()  throws java.util.MissingResourceException;
  public java.lang.String getISO3Language()  throws java.util.MissingResourceException;
  public java.lang.String getLanguage();
  public java.lang.String getScript();
  public java.lang.String getUnicodeLocaleType(java.lang.String);
  public java.lang.String getVariant();
  public java.lang.String toLanguageTag();
  public java.util.Set getExtensionKeys();
  public java.util.Set getUnicodeLocaleAttributes();
  public java.util.Set getUnicodeLocaleKeys();
  public static final char PRIVATE_USE_EXTENSION;
  public static final char UNICODE_LOCALE_EXTENSION;
  public static final java.util.Locale CANADA;
  public static final java.util.Locale CANADA_FRENCH;
  public static final java.util.Locale CHINA;
  public static final java.util.Locale CHINESE;
  public static final java.util.Locale ENGLISH;
  public static final java.util.Locale FRANCE;
  public static final java.util.Locale FRENCH;
  public static final java.util.Locale GERMAN;
  public static final java.util.Locale GERMANY;
  public static final java.util.Locale ITALIAN;
  public static final java.util.Locale ITALY;
  public static final java.util.Locale JAPAN;
  public static final java.util.Locale JAPANESE;
  public static final java.util.Locale KOREA;
  public static final java.util.Locale KOREAN;
  public static final java.util.Locale PRC;
  public static final java.util.Locale ROOT;
  public static final java.util.Locale SIMPLIFIED_CHINESE;
  public static final java.util.Locale TAIWAN;
  public static final java.util.Locale TRADITIONAL_CHINESE;
  public static final java.util.Locale UK;
  public static final java.util.Locale US;
}
public final class java.util.Locale$Builder
  extends java.lang.Object
{
  public void <init>();
  public java.util.Locale build();
  public java.util.Locale$Builder addUnicodeLocaleAttribute(java.lang.String);
  public java.util.Locale$Builder clear();
  public java.util.Locale$Builder clearExtensions();
  public java.util.Locale$Builder removeUnicodeLocaleAttribute(java.lang.String);
  public java.util.Locale$Builder setExtension(char, java.lang.String);
  public java.util.Locale$Builder setLanguage(java.lang.String);
  public java.util.Locale$Builder setLanguageTag(java.lang.String);
  public java.util.Locale$Builder setLocale(java.util.Locale);
  public java.util.Locale$Builder setRegion(java.lang.String);
  public java.util.Locale$Builder setScript(java.lang.String);
  public java.util.Locale$Builder setUnicodeLocaleKeyword(java.lang.String, java.lang.String);
  public java.util.Locale$Builder setVariant(java.lang.String);
}
public final class java.util.Locale$Category
  extends java.lang.Enum
{
  public static java.util.Locale$Category valueOf(java.lang.String);
  public static java.util.Locale$Category[] values();
  public static final java.util.Locale$Category DISPLAY;
  public static final java.util.Locale$Category FORMAT;
}
public class java.util.LongSummaryStatistics
  extends java.lang.Object
  implements java.util.function.LongConsumer, java.util.function.IntConsumer
{
  public void <init>();
  public final double getAverage();
  public final long getCount();
  public final long getMax();
  public final long getMin();
  public final long getSum();
  public void accept(int);
  public void accept(long);
  public void combine(java.util.LongSummaryStatistics);
  public java.lang.String toString();
}
public interface java.util.Map
{
  public abstract boolean containsKey(java.lang.Object);
  public abstract boolean containsValue(java.lang.Object);
  public abstract boolean equals(java.lang.Object);
  public abstract boolean isEmpty();
  public abstract int hashCode();
  public abstract int size();
  public abstract void clear();
  public abstract void putAll(java.util.Map);
  public abstract java.lang.Object get(java.lang.Object);
  public abstract java.lang.Object put(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object remove(java.lang.Object);
  public abstract java.util.Collection values();
  public abstract java.util.Set entrySet();
  public abstract java.util.Set keySet();
  public boolean remove(java.lang.Object, java.lang.Object);
  public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public void forEach(java.util.function.BiConsumer);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object);
  public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
  public java.lang.Object replace(java.lang.Object, java.lang.Object);
}
public interface java.util.Map$Entry
{
  public static java.util.Comparator comparingByKey();
  public static java.util.Comparator comparingByKey(java.util.Comparator);
  public static java.util.Comparator comparingByValue();
  public static java.util.Comparator comparingByValue(java.util.Comparator);
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract java.lang.Object getKey();
  public abstract java.lang.Object getValue();
  public abstract java.lang.Object setValue(java.lang.Object);
}
public class java.util.MissingFormatArgumentException
  extends java.util.IllegalFormatException
{
  public void <init>(java.lang.String);
  public java.lang.String getFormatSpecifier();
  public java.lang.String getMessage();
}
public class java.util.MissingFormatWidthException
  extends java.util.IllegalFormatException
{
  public void <init>(java.lang.String);
  public java.lang.String getFormatSpecifier();
  public java.lang.String getMessage();
}
public class java.util.MissingResourceException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getClassName();
  public java.lang.String getKey();
}
public interface java.util.NavigableMap
  extends java.util.SortedMap
{
  public abstract java.lang.Object ceilingKey(java.lang.Object);
  public abstract java.lang.Object floorKey(java.lang.Object);
  public abstract java.lang.Object higherKey(java.lang.Object);
  public abstract java.lang.Object lowerKey(java.lang.Object);
  public abstract java.util.Map$Entry ceilingEntry(java.lang.Object);
  public abstract java.util.Map$Entry firstEntry();
  public abstract java.util.Map$Entry floorEntry(java.lang.Object);
  public abstract java.util.Map$Entry higherEntry(java.lang.Object);
  public abstract java.util.Map$Entry lastEntry();
  public abstract java.util.Map$Entry lowerEntry(java.lang.Object);
  public abstract java.util.Map$Entry pollFirstEntry();
  public abstract java.util.Map$Entry pollLastEntry();
  public abstract java.util.NavigableMap descendingMap();
  public abstract java.util.NavigableMap headMap(java.lang.Object, boolean);
  public abstract java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean);
  public abstract java.util.NavigableMap tailMap(java.lang.Object, boolean);
  public abstract java.util.NavigableSet descendingKeySet();
  public abstract java.util.NavigableSet navigableKeySet();
  public abstract java.util.SortedMap headMap(java.lang.Object);
  public abstract java.util.SortedMap subMap(java.lang.Object, java.lang.Object);
  public abstract java.util.SortedMap tailMap(java.lang.Object);
}
public interface java.util.NavigableSet
  extends java.util.SortedSet
{
  public abstract java.lang.Object ceiling(java.lang.Object);
  public abstract java.lang.Object floor(java.lang.Object);
  public abstract java.lang.Object higher(java.lang.Object);
  public abstract java.lang.Object lower(java.lang.Object);
  public abstract java.lang.Object pollFirst();
  public abstract java.lang.Object pollLast();
  public abstract java.util.Iterator descendingIterator();
  public abstract java.util.Iterator iterator();
  public abstract java.util.NavigableSet descendingSet();
  public abstract java.util.NavigableSet headSet(java.lang.Object, boolean);
  public abstract java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean);
  public abstract java.util.NavigableSet tailSet(java.lang.Object, boolean);
  public abstract java.util.SortedSet headSet(java.lang.Object);
  public abstract java.util.SortedSet subSet(java.lang.Object, java.lang.Object);
  public abstract java.util.SortedSet tailSet(java.lang.Object);
}
public class java.util.NoSuchElementException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class java.util.Objects
  extends java.lang.Object
{
  public static boolean deepEquals(java.lang.Object, java.lang.Object);
  public static boolean equals(java.lang.Object, java.lang.Object);
  public static boolean isNull(java.lang.Object);
  public static boolean nonNull(java.lang.Object);
  public static int compare(java.lang.Object, java.lang.Object, java.util.Comparator);
  public static int hash(java.lang.Object[]);
  public static int hashCode(java.lang.Object);
  public static java.lang.Object requireNonNull(java.lang.Object);
  public static java.lang.Object requireNonNull(java.lang.Object, java.lang.String);
  public static java.lang.Object requireNonNull(java.lang.Object, java.util.function.Supplier);
  public static java.lang.String toString(java.lang.Object);
  public static java.lang.String toString(java.lang.Object, java.lang.String);
}
public class java.util.Observable
  extends java.lang.Object
{
  public void <init>();
  public boolean hasChanged();
  public int countObservers();
  public void addObserver(java.util.Observer);
  public void deleteObserver(java.util.Observer);
  public void deleteObservers();
  public void notifyObservers();
  public void notifyObservers(java.lang.Object);
  protected void clearChanged();
  protected void setChanged();
}
public interface java.util.Observer
{
  public abstract void update(java.util.Observable, java.lang.Object);
}
public final class java.util.Optional
  extends java.lang.Object
{
  public static java.util.Optional empty();
  public static java.util.Optional of(java.lang.Object);
  public static java.util.Optional ofNullable(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isPresent();
  public int hashCode();
  public void ifPresent(java.util.function.Consumer);
  public java.lang.Object get();
  public java.lang.Object orElse(java.lang.Object);
  public java.lang.Object orElseGet(java.util.function.Supplier);
  public java.lang.Object orElseThrow(java.util.function.Supplier)  throws java.lang.Throwable;
  public java.lang.String toString();
  public java.util.Optional filter(java.util.function.Predicate);
  public java.util.Optional flatMap(java.util.function.Function);
  public java.util.Optional map(java.util.function.Function);
}
public final class java.util.OptionalDouble
  extends java.lang.Object
{
  public static java.util.OptionalDouble empty();
  public static java.util.OptionalDouble of(double);
  public boolean equals(java.lang.Object);
  public boolean isPresent();
  public double getAsDouble();
  public double orElse(double);
  public double orElseGet(java.util.function.DoubleSupplier);
  public double orElseThrow(java.util.function.Supplier)  throws java.lang.Throwable;
  public int hashCode();
  public void ifPresent(java.util.function.DoubleConsumer);
  public java.lang.String toString();
}
public final class java.util.OptionalInt
  extends java.lang.Object
{
  public static java.util.OptionalInt empty();
  public static java.util.OptionalInt of(int);
  public boolean equals(java.lang.Object);
  public boolean isPresent();
  public int getAsInt();
  public int hashCode();
  public int orElse(int);
  public int orElseGet(java.util.function.IntSupplier);
  public int orElseThrow(java.util.function.Supplier)  throws java.lang.Throwable;
  public void ifPresent(java.util.function.IntConsumer);
  public java.lang.String toString();
}
public final class java.util.OptionalLong
  extends java.lang.Object
{
  public static java.util.OptionalLong empty();
  public static java.util.OptionalLong of(long);
  public boolean equals(java.lang.Object);
  public boolean isPresent();
  public int hashCode();
  public long getAsLong();
  public long orElse(long);
  public long orElseGet(java.util.function.LongSupplier);
  public long orElseThrow(java.util.function.Supplier)  throws java.lang.Throwable;
  public void ifPresent(java.util.function.LongConsumer);
  public java.lang.String toString();
}
public interface java.util.PrimitiveIterator
  extends java.util.Iterator
{
  public abstract void forEachRemaining(java.lang.Object);
}
public interface java.util.PrimitiveIterator$OfDouble
  extends java.util.PrimitiveIterator
{
  public abstract double nextDouble();
  public void forEachRemaining(java.lang.Object);
  public void forEachRemaining(java.util.function.Consumer);
  public void forEachRemaining(java.util.function.DoubleConsumer);
  public java.lang.Double next();
  public java.lang.Object next();
}
public interface java.util.PrimitiveIterator$OfInt
  extends java.util.PrimitiveIterator
{
  public abstract int nextInt();
  public void forEachRemaining(java.lang.Object);
  public void forEachRemaining(java.util.function.Consumer);
  public void forEachRemaining(java.util.function.IntConsumer);
  public java.lang.Integer next();
  public java.lang.Object next();
}
public interface java.util.PrimitiveIterator$OfLong
  extends java.util.PrimitiveIterator
{
  public abstract long nextLong();
  public void forEachRemaining(java.lang.Object);
  public void forEachRemaining(java.util.function.Consumer);
  public void forEachRemaining(java.util.function.LongConsumer);
  public java.lang.Long next();
  public java.lang.Object next();
}
public class java.util.PriorityQueue
  extends java.util.AbstractQueue
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, java.util.Comparator);
  public void <init>(java.util.Collection);
  public void <init>(java.util.Comparator);
  public void <init>(java.util.PriorityQueue);
  public void <init>(java.util.SortedSet);
  public final java.util.Spliterator spliterator();
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean offer(java.lang.Object);
  public boolean remove(java.lang.Object);
  public int size();
  public void clear();
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.util.Comparator comparator();
  public java.util.Iterator iterator();
}
public class java.util.Properties
  extends java.util.Hashtable
{
  public void <init>();
  public void <init>(java.util.Properties);
  public void list(java.io.PrintStream);
  public void list(java.io.PrintWriter);
  public void load(java.io.InputStream)  throws java.io.IOException;
  public void load(java.io.Reader)  throws java.io.IOException;
  public void loadFromXML(java.io.InputStream)  throws java.io.IOException, java.util.InvalidPropertiesFormatException;
  public void save(java.io.OutputStream, java.lang.String);
  public void store(java.io.OutputStream, java.lang.String)  throws java.io.IOException;
  public void store(java.io.Writer, java.lang.String)  throws java.io.IOException;
  public void storeToXML(java.io.OutputStream, java.lang.String)  throws java.io.IOException;
  public void storeToXML(java.io.OutputStream, java.lang.String, java.lang.String)  throws java.io.IOException;
  public java.lang.Object setProperty(java.lang.String, java.lang.String);
  public java.lang.String getProperty(java.lang.String);
  public java.lang.String getProperty(java.lang.String, java.lang.String);
  public java.util.Enumeration propertyNames();
  public java.util.Set stringPropertyNames();
  protected java.util.Properties defaults;
}
public final class java.util.PropertyPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String, java.lang.String);
}
public class java.util.PropertyResourceBundle
  extends java.util.ResourceBundle
{
  public void <init>(java.io.InputStream)  throws java.io.IOException;
  public void <init>(java.io.Reader)  throws java.io.IOException;
  public java.lang.Object handleGetObject(java.lang.String);
  public java.util.Enumeration getKeys();
  protected java.util.Set handleKeySet();
}
public interface java.util.Queue
  extends java.util.Collection
{
  public abstract boolean add(java.lang.Object);
  public abstract boolean offer(java.lang.Object);
  public abstract java.lang.Object element();
  public abstract java.lang.Object peek();
  public abstract java.lang.Object poll();
  public abstract java.lang.Object remove();
}
public class java.util.Random
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(long);
  public boolean nextBoolean();
  public double nextDouble();
  public double nextGaussian();
  public float nextFloat();
  public int nextInt();
  public int nextInt(int);
  public long nextLong();
  public void nextBytes(byte[]);
  public void setSeed(long);
  public java.util.stream.DoubleStream doubles();
  public java.util.stream.DoubleStream doubles(double, double);
  public java.util.stream.DoubleStream doubles(long);
  public java.util.stream.DoubleStream doubles(long, double, double);
  public java.util.stream.IntStream ints();
  public java.util.stream.IntStream ints(int, int);
  public java.util.stream.IntStream ints(long);
  public java.util.stream.IntStream ints(long, int, int);
  public java.util.stream.LongStream longs();
  public java.util.stream.LongStream longs(long);
  public java.util.stream.LongStream longs(long, long);
  public java.util.stream.LongStream longs(long, long, long);
  protected int next(int);
}
public interface java.util.RandomAccess
{
}
public abstract class java.util.ResourceBundle
  extends java.lang.Object
{
  public static final void clearCache();
  public static final void clearCache(java.lang.ClassLoader);
  public static final java.util.ResourceBundle getBundle(java.lang.String);
  public static final java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale);
  public static final java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.util.ResourceBundle$Control);
  public static final java.util.ResourceBundle getBundle(java.lang.String, java.util.ResourceBundle$Control);
  public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader);
  public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle$Control);
  public void <init>();
  public final java.lang.Object getObject(java.lang.String);
  public final java.lang.String getString(java.lang.String);
  public final java.lang.String[] getStringArray(java.lang.String);
  public abstract java.util.Enumeration getKeys();
  public boolean containsKey(java.lang.String);
  public java.util.Locale getLocale();
  public java.util.Set keySet();
  protected abstract java.lang.Object handleGetObject(java.lang.String);
  protected void setParent(java.util.ResourceBundle);
  protected java.util.Set handleKeySet();
  protected java.util.ResourceBundle parent;
}
public class java.util.ResourceBundle$Control
  extends java.lang.Object
{
  public static final java.util.ResourceBundle$Control getControl(java.util.List);
  public static final java.util.ResourceBundle$Control getNoFallbackControl(java.util.List);
  public final java.lang.String toResourceName(java.lang.String, java.lang.String);
  public boolean needsReload(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, java.util.ResourceBundle, long);
  public long getTimeToLive(java.lang.String, java.util.Locale);
  public java.lang.String toBundleName(java.lang.String, java.util.Locale);
  public java.util.List getCandidateLocales(java.lang.String, java.util.Locale);
  public java.util.List getFormats(java.lang.String);
  public java.util.Locale getFallbackLocale(java.lang.String, java.util.Locale);
  public java.util.ResourceBundle newBundle(java.lang.String, java.util.Locale, java.lang.String, java.lang.ClassLoader, boolean)  throws java.io.IOException, java.lang.IllegalAccessException, java.lang.InstantiationException;
  protected void <init>();
  public static final long TTL_DONT_CACHE;
  public static final long TTL_NO_EXPIRATION_CONTROL;
  public static final java.util.List FORMAT_CLASS;
  public static final java.util.List FORMAT_DEFAULT;
  public static final java.util.List FORMAT_PROPERTIES;
}
public final class java.util.Scanner
  extends java.lang.Object
  implements java.util.Iterator, java.io.Closeable
{
  public void <init>(java.io.File)  throws java.io.FileNotFoundException;
  public void <init>(java.io.File, java.lang.String)  throws java.io.FileNotFoundException;
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, java.lang.String);
  public void <init>(java.lang.Readable);
  public void <init>(java.lang.String);
  public void <init>(java.nio.channels.ReadableByteChannel);
  public void <init>(java.nio.channels.ReadableByteChannel, java.lang.String);
  public boolean hasNext();
  public boolean hasNext(java.lang.String);
  public boolean hasNext(java.util.regex.Pattern);
  public boolean hasNextBigDecimal();
  public boolean hasNextBigInteger();
  public boolean hasNextBigInteger(int);
  public boolean hasNextBoolean();
  public boolean hasNextByte();
  public boolean hasNextByte(int);
  public boolean hasNextDouble();
  public boolean hasNextFloat();
  public boolean hasNextInt();
  public boolean hasNextInt(int);
  public boolean hasNextLine();
  public boolean hasNextLong();
  public boolean hasNextLong(int);
  public boolean hasNextShort();
  public boolean hasNextShort(int);
  public boolean nextBoolean();
  public byte nextByte();
  public byte nextByte(int);
  public double nextDouble();
  public float nextFloat();
  public int nextInt();
  public int nextInt(int);
  public int radix();
  public long nextLong();
  public long nextLong(int);
  public short nextShort();
  public short nextShort(int);
  public void close();
  public void remove();
  public java.io.IOException ioException();
  public java.lang.Object next();
  public java.lang.String findInLine(java.lang.String);
  public java.lang.String findInLine(java.util.regex.Pattern);
  public java.lang.String findWithinHorizon(java.lang.String, int);
  public java.lang.String findWithinHorizon(java.util.regex.Pattern, int);
  public java.lang.String next();
  public java.lang.String next(java.lang.String);
  public java.lang.String next(java.util.regex.Pattern);
  public java.lang.String nextLine();
  public java.lang.String toString();
  public java.math.BigDecimal nextBigDecimal();
  public java.math.BigInteger nextBigInteger();
  public java.math.BigInteger nextBigInteger(int);
  public java.util.Locale locale();
  public java.util.Scanner reset();
  public java.util.Scanner skip(java.lang.String);
  public java.util.Scanner skip(java.util.regex.Pattern);
  public java.util.Scanner useDelimiter(java.lang.String);
  public java.util.Scanner useDelimiter(java.util.regex.Pattern);
  public java.util.Scanner useLocale(java.util.Locale);
  public java.util.Scanner useRadix(int);
  public java.util.regex.MatchResult match();
  public java.util.regex.Pattern delimiter();
}
public class java.util.ServiceConfigurationError
  extends java.lang.Error
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
}
public final class java.util.ServiceLoader
  extends java.lang.Object
  implements java.lang.Iterable
{
  public static java.util.ServiceLoader load(java.lang.Class);
  public static java.util.ServiceLoader load(java.lang.Class, java.lang.ClassLoader);
  public static java.util.ServiceLoader loadInstalled(java.lang.Class);
  public void reload();
  public java.lang.String toString();
  public java.util.Iterator iterator();
}
public interface java.util.Set
  extends java.util.Collection
{
  public abstract boolean add(java.lang.Object);
  public abstract boolean addAll(java.util.Collection);
  public abstract boolean contains(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection);
  public abstract boolean equals(java.lang.Object);
  public abstract boolean isEmpty();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeAll(java.util.Collection);
  public abstract boolean retainAll(java.util.Collection);
  public abstract int hashCode();
  public abstract int size();
  public abstract void clear();
  public abstract java.lang.Object[] toArray();
  public abstract java.lang.Object[] toArray(java.lang.Object[]);
  public abstract java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.SimpleTimeZone
  extends java.util.TimeZone
{
  public void <init>(int, java.lang.String);
  public void <init>(int, java.lang.String, int, int, int, int, int, int, int, int);
  public void <init>(int, java.lang.String, int, int, int, int, int, int, int, int, int);
  public void <init>(int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int);
  public boolean equals(java.lang.Object);
  public boolean hasSameRules(java.util.TimeZone);
  public boolean inDaylightTime(java.util.Date);
  public boolean observesDaylightTime();
  public boolean useDaylightTime();
  public int getDSTSavings();
  public int getOffset(int, int, int, int, int, int);
  public int getOffset(long);
  public int getRawOffset();
  public int hashCode();
  public void setDSTSavings(int);
  public void setEndRule(int, int, int);
  public void setEndRule(int, int, int, int);
  public void setEndRule(int, int, int, int, boolean);
  public void setRawOffset(int);
  public void setStartRule(int, int, int);
  public void setStartRule(int, int, int, int);
  public void setStartRule(int, int, int, int, boolean);
  public void setStartYear(int);
  public java.lang.Object clone();
  public java.lang.String toString();
  public static final int STANDARD_TIME;
  public static final int UTC_TIME;
  public static final int WALL_TIME;
}
public interface java.util.SortedMap
  extends java.util.Map
{
  public abstract java.lang.Object firstKey();
  public abstract java.lang.Object lastKey();
  public abstract java.util.Collection values();
  public abstract java.util.Comparator comparator();
  public abstract java.util.Set entrySet();
  public abstract java.util.Set keySet();
  public abstract java.util.SortedMap headMap(java.lang.Object);
  public abstract java.util.SortedMap subMap(java.lang.Object, java.lang.Object);
  public abstract java.util.SortedMap tailMap(java.lang.Object);
}
public interface java.util.SortedSet
  extends java.util.Set
{
  public abstract java.lang.Object first();
  public abstract java.lang.Object last();
  public abstract java.util.Comparator comparator();
  public abstract java.util.SortedSet headSet(java.lang.Object);
  public abstract java.util.SortedSet subSet(java.lang.Object, java.lang.Object);
  public abstract java.util.SortedSet tailSet(java.lang.Object);
  public java.util.Spliterator spliterator();
}
public interface java.util.Spliterator
{
  public abstract boolean tryAdvance(java.util.function.Consumer);
  public abstract int characteristics();
  public abstract long estimateSize();
  public abstract java.util.Spliterator trySplit();
  public boolean hasCharacteristics(int);
  public long getExactSizeIfKnown();
  public void forEachRemaining(java.util.function.Consumer);
  public java.util.Comparator getComparator();
  public static final int CONCURRENT;
  public static final int DISTINCT;
  public static final int IMMUTABLE;
  public static final int NONNULL;
  public static final int ORDERED;
  public static final int SIZED;
  public static final int SORTED;
  public static final int SUBSIZED;
}
public interface java.util.Spliterator$OfDouble
  extends java.util.Spliterator$OfPrimitive
{
  public abstract boolean tryAdvance(java.util.function.DoubleConsumer);
  public abstract java.util.Spliterator$OfDouble trySplit();
  public boolean tryAdvance(java.lang.Object);
  public boolean tryAdvance(java.util.function.Consumer);
  public void forEachRemaining(java.lang.Object);
  public void forEachRemaining(java.util.function.Consumer);
  public void forEachRemaining(java.util.function.DoubleConsumer);
  public java.util.Spliterator trySplit();
  public java.util.Spliterator$OfPrimitive trySplit();
}
public interface java.util.Spliterator$OfInt
  extends java.util.Spliterator$OfPrimitive
{
  public abstract boolean tryAdvance(java.util.function.IntConsumer);
  public abstract java.util.Spliterator$OfInt trySplit();
  public boolean tryAdvance(java.lang.Object);
  public boolean tryAdvance(java.util.function.Consumer);
  public void forEachRemaining(java.lang.Object);
  public void forEachRemaining(java.util.function.Consumer);
  public void forEachRemaining(java.util.function.IntConsumer);
  public java.util.Spliterator trySplit();
  public java.util.Spliterator$OfPrimitive trySplit();
}
public interface java.util.Spliterator$OfLong
  extends java.util.Spliterator$OfPrimitive
{
  public abstract boolean tryAdvance(java.util.function.LongConsumer);
  public abstract java.util.Spliterator$OfLong trySplit();
  public boolean tryAdvance(java.lang.Object);
  public boolean tryAdvance(java.util.function.Consumer);
  public void forEachRemaining(java.lang.Object);
  public void forEachRemaining(java.util.function.Consumer);
  public void forEachRemaining(java.util.function.LongConsumer);
  public java.util.Spliterator trySplit();
  public java.util.Spliterator$OfPrimitive trySplit();
}
public interface java.util.Spliterator$OfPrimitive
  extends java.util.Spliterator
{
  public abstract boolean tryAdvance(java.lang.Object);
  public abstract java.util.Spliterator$OfPrimitive trySplit();
  public void forEachRemaining(java.lang.Object);
  public java.util.Spliterator trySplit();
}
public final class java.util.Spliterators
  extends java.lang.Object
{
  public static java.util.Iterator iterator(java.util.Spliterator);
  public static java.util.PrimitiveIterator$OfDouble iterator(java.util.Spliterator$OfDouble);
  public static java.util.PrimitiveIterator$OfInt iterator(java.util.Spliterator$OfInt);
  public static java.util.PrimitiveIterator$OfLong iterator(java.util.Spliterator$OfLong);
  public static java.util.Spliterator emptySpliterator();
  public static java.util.Spliterator spliterator(java.lang.Object[], int);
  public static java.util.Spliterator spliterator(java.lang.Object[], int, int, int);
  public static java.util.Spliterator spliterator(java.util.Collection, int);
  public static java.util.Spliterator spliterator(java.util.Iterator, long, int);
  public static java.util.Spliterator spliteratorUnknownSize(java.util.Iterator, int);
  public static java.util.Spliterator$OfDouble emptyDoubleSpliterator();
  public static java.util.Spliterator$OfDouble spliterator(double[], int);
  public static java.util.Spliterator$OfDouble spliterator(double[], int, int, int);
  public static java.util.Spliterator$OfDouble spliterator(java.util.PrimitiveIterator$OfDouble, long, int);
  public static java.util.Spliterator$OfDouble spliteratorUnknownSize(java.util.PrimitiveIterator$OfDouble, int);
  public static java.util.Spliterator$OfInt emptyIntSpliterator();
  public static java.util.Spliterator$OfInt spliterator(int[], int);
  public static java.util.Spliterator$OfInt spliterator(int[], int, int, int);
  public static java.util.Spliterator$OfInt spliterator(java.util.PrimitiveIterator$OfInt, long, int);
  public static java.util.Spliterator$OfInt spliteratorUnknownSize(java.util.PrimitiveIterator$OfInt, int);
  public static java.util.Spliterator$OfLong emptyLongSpliterator();
  public static java.util.Spliterator$OfLong spliterator(java.util.PrimitiveIterator$OfLong, long, int);
  public static java.util.Spliterator$OfLong spliterator(long[], int);
  public static java.util.Spliterator$OfLong spliterator(long[], int, int, int);
  public static java.util.Spliterator$OfLong spliteratorUnknownSize(java.util.PrimitiveIterator$OfLong, int);
}
public abstract class java.util.Spliterators$AbstractDoubleSpliterator
  extends java.lang.Object
  implements java.util.Spliterator$OfDouble
{
  public int characteristics();
  public long estimateSize();
  public java.util.Spliterator trySplit();
  public java.util.Spliterator$OfDouble trySplit();
  public java.util.Spliterator$OfPrimitive trySplit();
  protected void <init>(long, int);
}
public abstract class java.util.Spliterators$AbstractIntSpliterator
  extends java.lang.Object
  implements java.util.Spliterator$OfInt
{
  public int characteristics();
  public long estimateSize();
  public java.util.Spliterator trySplit();
  public java.util.Spliterator$OfInt trySplit();
  public java.util.Spliterator$OfPrimitive trySplit();
  protected void <init>(long, int);
}
public abstract class java.util.Spliterators$AbstractLongSpliterator
  extends java.lang.Object
  implements java.util.Spliterator$OfLong
{
  public int characteristics();
  public long estimateSize();
  public java.util.Spliterator trySplit();
  public java.util.Spliterator$OfLong trySplit();
  public java.util.Spliterator$OfPrimitive trySplit();
  protected void <init>(long, int);
}
public abstract class java.util.Spliterators$AbstractSpliterator
  extends java.lang.Object
  implements java.util.Spliterator
{
  public int characteristics();
  public long estimateSize();
  public java.util.Spliterator trySplit();
  protected void <init>(long, int);
}
public final class java.util.SplittableRandom
  extends java.lang.Object
{
  public void <init>();
  public void <init>(long);
  public boolean nextBoolean();
  public double nextDouble();
  public double nextDouble(double);
  public double nextDouble(double, double);
  public int nextInt();
  public int nextInt(int);
  public int nextInt(int, int);
  public long nextLong();
  public long nextLong(long);
  public long nextLong(long, long);
  public java.util.SplittableRandom split();
  public java.util.stream.DoubleStream doubles();
  public java.util.stream.DoubleStream doubles(double, double);
  public java.util.stream.DoubleStream doubles(long);
  public java.util.stream.DoubleStream doubles(long, double, double);
  public java.util.stream.IntStream ints();
  public java.util.stream.IntStream ints(int, int);
  public java.util.stream.IntStream ints(long);
  public java.util.stream.IntStream ints(long, int, int);
  public java.util.stream.LongStream longs();
  public java.util.stream.LongStream longs(long);
  public java.util.stream.LongStream longs(long, long);
  public java.util.stream.LongStream longs(long, long, long);
}
public class java.util.Stack
  extends java.util.Vector
{
  public void <init>();
  public boolean empty();
  public int search(java.lang.Object);
  public java.lang.Object peek();
  public java.lang.Object pop();
  public java.lang.Object push(java.lang.Object);
}
public final class java.util.StringJoiner
  extends java.lang.Object
{
  public void <init>(java.lang.CharSequence);
  public void <init>(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence);
  public int length();
  public java.lang.String toString();
  public java.util.StringJoiner add(java.lang.CharSequence);
  public java.util.StringJoiner merge(java.util.StringJoiner);
  public java.util.StringJoiner setEmptyValue(java.lang.CharSequence);
}
public class java.util.StringTokenizer
  extends java.lang.Object
  implements java.util.Enumeration
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, boolean);
  public boolean hasMoreElements();
  public boolean hasMoreTokens();
  public int countTokens();
  public java.lang.Object nextElement();
  public java.lang.String nextToken();
  public java.lang.String nextToken(java.lang.String);
}
public abstract class java.util.TimeZone
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Cloneable
{
  public static void setDefault(java.util.TimeZone);
  public static java.lang.String[] getAvailableIDs();
  public static java.lang.String[] getAvailableIDs(int);
  public static java.util.TimeZone getDefault();
  public static java.util.TimeZone getTimeZone(java.lang.String);
  public void <init>();
  public final java.lang.String getDisplayName();
  public final java.lang.String getDisplayName(boolean, int);
  public final java.lang.String getDisplayName(java.util.Locale);
  public abstract boolean inDaylightTime(java.util.Date);
  public abstract boolean useDaylightTime();
  public abstract int getOffset(int, int, int, int, int, int);
  public abstract int getRawOffset();
  public abstract void setRawOffset(int);
  public boolean hasSameRules(java.util.TimeZone);
  public boolean observesDaylightTime();
  public int getDSTSavings();
  public int getOffset(long);
  public void setID(java.lang.String);
  public java.lang.Object clone();
  public java.lang.String getDisplayName(boolean, int, java.util.Locale);
  public java.lang.String getID();
  public static final int LONG;
  public static final int SHORT;
}
public class java.util.Timer
  extends java.lang.Object
{
  public void <init>();
  public void <init>(boolean);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, boolean);
  public int purge();
  public void cancel();
  public void schedule(java.util.TimerTask, java.util.Date);
  public void schedule(java.util.TimerTask, java.util.Date, long);
  public void schedule(java.util.TimerTask, long);
  public void schedule(java.util.TimerTask, long, long);
  public void scheduleAtFixedRate(java.util.TimerTask, java.util.Date, long);
  public void scheduleAtFixedRate(java.util.TimerTask, long, long);
}
public abstract class java.util.TimerTask
  extends java.lang.Object
  implements java.lang.Runnable
{
  public abstract void run();
  public boolean cancel();
  public long scheduledExecutionTime();
  protected void <init>();
}
public class java.util.TooManyListenersException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.util.TreeMap
  extends java.util.AbstractMap
  implements java.util.NavigableMap, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Comparator);
  public void <init>(java.util.Map);
  public void <init>(java.util.SortedMap);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public int size();
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void putAll(java.util.Map);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object ceilingKey(java.lang.Object);
  public java.lang.Object clone();
  public java.lang.Object firstKey();
  public java.lang.Object floorKey(java.lang.Object);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object higherKey(java.lang.Object);
  public java.lang.Object lastKey();
  public java.lang.Object lowerKey(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object replace(java.lang.Object, java.lang.Object);
  public java.util.Collection values();
  public java.util.Comparator comparator();
  public java.util.Map$Entry ceilingEntry(java.lang.Object);
  public java.util.Map$Entry firstEntry();
  public java.util.Map$Entry floorEntry(java.lang.Object);
  public java.util.Map$Entry higherEntry(java.lang.Object);
  public java.util.Map$Entry lastEntry();
  public java.util.Map$Entry lowerEntry(java.lang.Object);
  public java.util.Map$Entry pollFirstEntry();
  public java.util.Map$Entry pollLastEntry();
  public java.util.NavigableMap descendingMap();
  public java.util.NavigableMap headMap(java.lang.Object, boolean);
  public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean);
  public java.util.NavigableMap tailMap(java.lang.Object, boolean);
  public java.util.NavigableSet descendingKeySet();
  public java.util.NavigableSet navigableKeySet();
  public java.util.Set entrySet();
  public java.util.Set keySet();
  public java.util.SortedMap headMap(java.lang.Object);
  public java.util.SortedMap subMap(java.lang.Object, java.lang.Object);
  public java.util.SortedMap tailMap(java.lang.Object);
}
public class java.util.TreeSet
  extends java.util.AbstractSet
  implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Collection);
  public void <init>(java.util.Comparator);
  public void <init>(java.util.SortedSet);
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public int size();
  public void clear();
  public java.lang.Object ceiling(java.lang.Object);
  public java.lang.Object clone();
  public java.lang.Object first();
  public java.lang.Object floor(java.lang.Object);
  public java.lang.Object higher(java.lang.Object);
  public java.lang.Object last();
  public java.lang.Object lower(java.lang.Object);
  public java.lang.Object pollFirst();
  public java.lang.Object pollLast();
  public java.util.Comparator comparator();
  public java.util.Iterator descendingIterator();
  public java.util.Iterator iterator();
  public java.util.NavigableSet descendingSet();
  public java.util.NavigableSet headSet(java.lang.Object, boolean);
  public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean);
  public java.util.NavigableSet tailSet(java.lang.Object, boolean);
  public java.util.SortedSet headSet(java.lang.Object);
  public java.util.SortedSet subSet(java.lang.Object, java.lang.Object);
  public java.util.SortedSet tailSet(java.lang.Object);
  public java.util.Spliterator spliterator();
}
public final class java.util.UUID
  extends java.lang.Object
  implements java.io.Serializable, java.lang.Comparable
{
  public static java.util.UUID fromString(java.lang.String);
  public static java.util.UUID nameUUIDFromBytes(byte[]);
  public static java.util.UUID randomUUID();
  public void <init>(long, long);
  public boolean equals(java.lang.Object);
  public int clockSequence();
  public int compareTo(java.lang.Object);
  public int compareTo(java.util.UUID);
  public int hashCode();
  public int variant();
  public int version();
  public long getLeastSignificantBits();
  public long getMostSignificantBits();
  public long node();
  public long timestamp();
  public java.lang.String toString();
}
public class java.util.UnknownFormatConversionException
  extends java.util.IllegalFormatException
{
  public void <init>(java.lang.String);
  public java.lang.String getConversion();
  public java.lang.String getMessage();
}
public class java.util.UnknownFormatFlagsException
  extends java.util.IllegalFormatException
{
  public void <init>(java.lang.String);
  public java.lang.String getFlags();
  public java.lang.String getMessage();
}
public class java.util.Vector
  extends java.util.AbstractList
  implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, int);
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean addAll(int, java.util.Collection);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public boolean removeElement(java.lang.Object);
  public boolean removeIf(java.util.function.Predicate);
  public boolean retainAll(java.util.Collection);
  public int capacity();
  public int hashCode();
  public int indexOf(java.lang.Object);
  public int indexOf(java.lang.Object, int);
  public int lastIndexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object, int);
  public int size();
  public void add(int, java.lang.Object);
  public void addElement(java.lang.Object);
  public void clear();
  public void copyInto(java.lang.Object[]);
  public void ensureCapacity(int);
  public void forEach(java.util.function.Consumer);
  public void insertElementAt(java.lang.Object, int);
  public void removeAllElements();
  public void removeElementAt(int);
  public void replaceAll(java.util.function.UnaryOperator);
  public void setElementAt(java.lang.Object, int);
  public void setSize(int);
  public void sort(java.util.Comparator);
  public void trimToSize();
  public java.lang.Object clone();
  public java.lang.Object elementAt(int);
  public java.lang.Object firstElement();
  public java.lang.Object get(int);
  public java.lang.Object lastElement();
  public java.lang.Object remove(int);
  public java.lang.Object set(int, java.lang.Object);
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Enumeration elements();
  public java.util.Iterator iterator();
  public java.util.List subList(int, int);
  public java.util.ListIterator listIterator();
  public java.util.ListIterator listIterator(int);
  public java.util.Spliterator spliterator();
  protected void removeRange(int, int);
  protected int capacityIncrement;
  protected int elementCount;
  protected java.lang.Object[] elementData;
}
public class java.util.WeakHashMap
  extends java.util.AbstractMap
  implements java.util.Map
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, float);
  public void <init>(java.util.Map);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean isEmpty();
  public int size();
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void putAll(java.util.Map);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.util.Collection values();
  public java.util.Set entrySet();
  public java.util.Set keySet();
}
public abstract class java.util.concurrent.AbstractExecutorService
  extends java.lang.Object
  implements java.util.concurrent.ExecutorService
{
  public void <init>();
  public java.lang.Object invokeAny(java.util.Collection)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  public java.util.List invokeAll(java.util.Collection)  throws java.lang.InterruptedException;
  public java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.util.concurrent.Future submit(java.lang.Runnable);
  public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object);
  public java.util.concurrent.Future submit(java.util.concurrent.Callable);
  protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object);
  protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable);
}
public class java.util.concurrent.ArrayBlockingQueue
  extends java.util.AbstractQueue
  implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
  public void <init>(int);
  public void <init>(int, boolean);
  public void <init>(int, boolean, java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean offer(java.lang.Object);
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean remove(java.lang.Object);
  public int drainTo(java.util.Collection);
  public int drainTo(java.util.Collection, int);
  public int remainingCapacity();
  public int size();
  public void clear();
  public void put(java.lang.Object)  throws java.lang.InterruptedException;
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object take()  throws java.lang.InterruptedException;
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public interface java.util.concurrent.BlockingDeque
  extends java.util.concurrent.BlockingQueue, java.util.Deque
{
  public abstract boolean add(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract boolean offer(java.lang.Object);
  public abstract boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract boolean offerFirst(java.lang.Object);
  public abstract boolean offerFirst(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract boolean offerLast(java.lang.Object);
  public abstract boolean offerLast(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract boolean remove(java.lang.Object);
  public abstract boolean removeFirstOccurrence(java.lang.Object);
  public abstract boolean removeLastOccurrence(java.lang.Object);
  public abstract int size();
  public abstract void addFirst(java.lang.Object);
  public abstract void addLast(java.lang.Object);
  public abstract void push(java.lang.Object);
  public abstract void put(java.lang.Object)  throws java.lang.InterruptedException;
  public abstract void putFirst(java.lang.Object)  throws java.lang.InterruptedException;
  public abstract void putLast(java.lang.Object)  throws java.lang.InterruptedException;
  public abstract java.lang.Object element();
  public abstract java.lang.Object peek();
  public abstract java.lang.Object poll();
  public abstract java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract java.lang.Object pollFirst(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract java.lang.Object pollLast(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract java.lang.Object remove();
  public abstract java.lang.Object take()  throws java.lang.InterruptedException;
  public abstract java.lang.Object takeFirst()  throws java.lang.InterruptedException;
  public abstract java.lang.Object takeLast()  throws java.lang.InterruptedException;
  public abstract java.util.Iterator iterator();
}
public interface java.util.concurrent.BlockingQueue
  extends java.util.Queue
{
  public abstract boolean add(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract boolean offer(java.lang.Object);
  public abstract boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract boolean remove(java.lang.Object);
  public abstract int drainTo(java.util.Collection);
  public abstract int drainTo(java.util.Collection, int);
  public abstract int remainingCapacity();
  public abstract void put(java.lang.Object)  throws java.lang.InterruptedException;
  public abstract java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract java.lang.Object take()  throws java.lang.InterruptedException;
}
public class java.util.concurrent.BrokenBarrierException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.util.concurrent.Callable
{
  public abstract java.lang.Object call()  throws java.lang.Exception;
}
public class java.util.concurrent.CancellationException
  extends java.lang.IllegalStateException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.util.concurrent.CompletableFuture
  extends java.lang.Object
  implements java.util.concurrent.Future, java.util.concurrent.CompletionStage
{
  public static java.util.concurrent.CompletableFuture allOf(java.util.concurrent.CompletableFuture[]);
  public static java.util.concurrent.CompletableFuture anyOf(java.util.concurrent.CompletableFuture[]);
  public static java.util.concurrent.CompletableFuture completedFuture(java.lang.Object);
  public static java.util.concurrent.CompletableFuture runAsync(java.lang.Runnable);
  public static java.util.concurrent.CompletableFuture runAsync(java.lang.Runnable, java.util.concurrent.Executor);
  public static java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier);
  public static java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier, java.util.concurrent.Executor);
  public void <init>();
  public boolean cancel(boolean);
  public boolean complete(java.lang.Object);
  public boolean completeExceptionally(java.lang.Throwable);
  public boolean isCancelled();
  public boolean isCompletedExceptionally();
  public boolean isDone();
  public int getNumberOfDependents();
  public void obtrudeException(java.lang.Throwable);
  public void obtrudeValue(java.lang.Object);
  public java.lang.Object get()  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public java.lang.Object get(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  public java.lang.Object getNow(java.lang.Object);
  public java.lang.Object join();
  public java.lang.String toString();
  public java.util.concurrent.CompletableFuture acceptEither(java.util.concurrent.CompletionStage, java.util.function.Consumer);
  public java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer);
  public java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture applyToEither(java.util.concurrent.CompletionStage, java.util.function.Function);
  public java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function);
  public java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture exceptionally(java.util.function.Function);
  public java.util.concurrent.CompletableFuture handle(java.util.function.BiFunction);
  public java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction);
  public java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture runAfterBoth(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture runAfterEither(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture thenAccept(java.util.function.Consumer);
  public java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer);
  public java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture thenAcceptBoth(java.util.concurrent.CompletionStage, java.util.function.BiConsumer);
  public java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer);
  public java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture thenApply(java.util.function.Function);
  public java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function);
  public java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture thenCombine(java.util.concurrent.CompletionStage, java.util.function.BiFunction);
  public java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction);
  public java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture thenCompose(java.util.function.Function);
  public java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function);
  public java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture thenRun(java.lang.Runnable);
  public java.util.concurrent.CompletableFuture thenRunAsync(java.lang.Runnable);
  public java.util.concurrent.CompletableFuture thenRunAsync(java.lang.Runnable, java.util.concurrent.Executor);
  public java.util.concurrent.CompletableFuture toCompletableFuture();
  public java.util.concurrent.CompletableFuture whenComplete(java.util.function.BiConsumer);
  public java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer);
  public java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage acceptEither(java.util.concurrent.CompletionStage, java.util.function.Consumer);
  public java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer);
  public java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage applyToEither(java.util.concurrent.CompletionStage, java.util.function.Function);
  public java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function);
  public java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage exceptionally(java.util.function.Function);
  public java.util.concurrent.CompletionStage handle(java.util.function.BiFunction);
  public java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction);
  public java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage runAfterBoth(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage runAfterEither(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage thenAccept(java.util.function.Consumer);
  public java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer);
  public java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage thenAcceptBoth(java.util.concurrent.CompletionStage, java.util.function.BiConsumer);
  public java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer);
  public java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage thenApply(java.util.function.Function);
  public java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function);
  public java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage thenCombine(java.util.concurrent.CompletionStage, java.util.function.BiFunction);
  public java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction);
  public java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage thenCompose(java.util.function.Function);
  public java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function);
  public java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage thenRun(java.lang.Runnable);
  public java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable);
  public java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable, java.util.concurrent.Executor);
  public java.util.concurrent.CompletionStage whenComplete(java.util.function.BiConsumer);
  public java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer);
  public java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer, java.util.concurrent.Executor);
}
public interface java.util.concurrent.CompletableFuture$AsynchronousCompletionTask
{
}
public class java.util.concurrent.CompletionException
  extends java.lang.RuntimeException
{
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  protected void <init>();
  protected void <init>(java.lang.String);
}
public interface java.util.concurrent.CompletionService
{
  public abstract java.util.concurrent.Future poll();
  public abstract java.util.concurrent.Future poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object);
  public abstract java.util.concurrent.Future submit(java.util.concurrent.Callable);
  public abstract java.util.concurrent.Future take()  throws java.lang.InterruptedException;
}
public interface java.util.concurrent.CompletionStage
{
  public abstract java.util.concurrent.CompletableFuture toCompletableFuture();
  public abstract java.util.concurrent.CompletionStage acceptEither(java.util.concurrent.CompletionStage, java.util.function.Consumer);
  public abstract java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer);
  public abstract java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage applyToEither(java.util.concurrent.CompletionStage, java.util.function.Function);
  public abstract java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function);
  public abstract java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage exceptionally(java.util.function.Function);
  public abstract java.util.concurrent.CompletionStage handle(java.util.function.BiFunction);
  public abstract java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction);
  public abstract java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage runAfterBoth(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public abstract java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public abstract java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage runAfterEither(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public abstract java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable);
  public abstract java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage thenAccept(java.util.function.Consumer);
  public abstract java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer);
  public abstract java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage thenAcceptBoth(java.util.concurrent.CompletionStage, java.util.function.BiConsumer);
  public abstract java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer);
  public abstract java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage thenApply(java.util.function.Function);
  public abstract java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function);
  public abstract java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage thenCombine(java.util.concurrent.CompletionStage, java.util.function.BiFunction);
  public abstract java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction);
  public abstract java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage thenCompose(java.util.function.Function);
  public abstract java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function);
  public abstract java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage thenRun(java.lang.Runnable);
  public abstract java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable);
  public abstract java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable, java.util.concurrent.Executor);
  public abstract java.util.concurrent.CompletionStage whenComplete(java.util.function.BiConsumer);
  public abstract java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer);
  public abstract java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer, java.util.concurrent.Executor);
}
public class java.util.concurrent.ConcurrentHashMap
  extends java.util.AbstractMap
  implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
  public static java.util.concurrent.ConcurrentHashMap$KeySetView newKeySet();
  public static java.util.concurrent.ConcurrentHashMap$KeySetView newKeySet(int);
  public void <init>();
  public void <init>(int);
  public void <init>(int, float);
  public void <init>(int, float, int);
  public void <init>(java.util.Map);
  public boolean contains(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object, java.lang.Object);
  public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public double reduceEntriesToDouble(long, java.util.function.ToDoubleFunction, double, java.util.function.DoubleBinaryOperator);
  public double reduceKeysToDouble(long, java.util.function.ToDoubleFunction, double, java.util.function.DoubleBinaryOperator);
  public double reduceToDouble(long, java.util.function.ToDoubleBiFunction, double, java.util.function.DoubleBinaryOperator);
  public double reduceValuesToDouble(long, java.util.function.ToDoubleFunction, double, java.util.function.DoubleBinaryOperator);
  public int hashCode();
  public int reduceEntriesToInt(long, java.util.function.ToIntFunction, int, java.util.function.IntBinaryOperator);
  public int reduceKeysToInt(long, java.util.function.ToIntFunction, int, java.util.function.IntBinaryOperator);
  public int reduceToInt(long, java.util.function.ToIntBiFunction, int, java.util.function.IntBinaryOperator);
  public int reduceValuesToInt(long, java.util.function.ToIntFunction, int, java.util.function.IntBinaryOperator);
  public int size();
  public long mappingCount();
  public long reduceEntriesToLong(long, java.util.function.ToLongFunction, long, java.util.function.LongBinaryOperator);
  public long reduceKeysToLong(long, java.util.function.ToLongFunction, long, java.util.function.LongBinaryOperator);
  public long reduceToLong(long, java.util.function.ToLongBiFunction, long, java.util.function.LongBinaryOperator);
  public long reduceValuesToLong(long, java.util.function.ToLongFunction, long, java.util.function.LongBinaryOperator);
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void forEach(long, java.util.function.BiConsumer);
  public void forEach(long, java.util.function.BiFunction, java.util.function.Consumer);
  public void forEachEntry(long, java.util.function.Consumer);
  public void forEachEntry(long, java.util.function.Function, java.util.function.Consumer);
  public void forEachKey(long, java.util.function.Consumer);
  public void forEachKey(long, java.util.function.Function, java.util.function.Consumer);
  public void forEachValue(long, java.util.function.Consumer);
  public void forEachValue(long, java.util.function.Function, java.util.function.Consumer);
  public void putAll(java.util.Map);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object);
  public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
  public java.lang.Object reduce(long, java.util.function.BiFunction, java.util.function.BiFunction);
  public java.lang.Object reduceEntries(long, java.util.function.Function, java.util.function.BiFunction);
  public java.lang.Object reduceKeys(long, java.util.function.BiFunction);
  public java.lang.Object reduceKeys(long, java.util.function.Function, java.util.function.BiFunction);
  public java.lang.Object reduceValues(long, java.util.function.BiFunction);
  public java.lang.Object reduceValues(long, java.util.function.Function, java.util.function.BiFunction);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object replace(java.lang.Object, java.lang.Object);
  public java.lang.Object search(long, java.util.function.BiFunction);
  public java.lang.Object searchEntries(long, java.util.function.Function);
  public java.lang.Object searchKeys(long, java.util.function.Function);
  public java.lang.Object searchValues(long, java.util.function.Function);
  public java.lang.String toString();
  public java.util.Collection values();
  public java.util.Enumeration elements();
  public java.util.Enumeration keys();
  public java.util.Map$Entry reduceEntries(long, java.util.function.BiFunction);
  public java.util.Set entrySet();
  public java.util.Set keySet();
  public java.util.concurrent.ConcurrentHashMap$KeySetView keySet(java.lang.Object);
}
public class java.util.concurrent.ConcurrentHashMap$KeySetView
  extends java.util.concurrent.ConcurrentHashMap$CollectionView
  implements java.util.Set, java.io.Serializable
{
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean remove(java.lang.Object);
  public int hashCode();
  public void forEach(java.util.function.Consumer);
  public java.lang.Object getMappedValue();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
  public java.util.concurrent.ConcurrentHashMap getMap();
}
public class java.util.concurrent.ConcurrentLinkedDeque
  extends java.util.AbstractCollection
  implements java.util.Deque, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public boolean offer(java.lang.Object);
  public boolean offerFirst(java.lang.Object);
  public boolean offerLast(java.lang.Object);
  public boolean remove(java.lang.Object);
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public int size();
  public void addFirst(java.lang.Object);
  public void addLast(java.lang.Object);
  public void clear();
  public void push(java.lang.Object);
  public java.lang.Object element();
  public java.lang.Object getFirst();
  public java.lang.Object getLast();
  public java.lang.Object peek();
  public java.lang.Object peekFirst();
  public java.lang.Object peekLast();
  public java.lang.Object poll();
  public java.lang.Object pollFirst();
  public java.lang.Object pollLast();
  public java.lang.Object pop();
  public java.lang.Object remove();
  public java.lang.Object removeFirst();
  public java.lang.Object removeLast();
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator descendingIterator();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.concurrent.ConcurrentLinkedQueue
  extends java.util.AbstractQueue
  implements java.util.Queue, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public boolean offer(java.lang.Object);
  public boolean remove(java.lang.Object);
  public int size();
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public interface java.util.concurrent.ConcurrentMap
  extends java.util.Map
{
  public abstract boolean remove(java.lang.Object, java.lang.Object);
  public abstract boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public abstract java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object replace(java.lang.Object, java.lang.Object);
  public void forEach(java.util.function.BiConsumer);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object);
  public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction);
}
public interface java.util.concurrent.ConcurrentNavigableMap
  extends java.util.concurrent.ConcurrentMap, java.util.NavigableMap
{
  public abstract java.util.NavigableSet descendingKeySet();
  public abstract java.util.NavigableSet keySet();
  public abstract java.util.NavigableSet navigableKeySet();
  public abstract java.util.concurrent.ConcurrentNavigableMap descendingMap();
  public abstract java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object);
  public abstract java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean);
  public abstract java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean);
  public abstract java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object);
  public abstract java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object);
  public abstract java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean);
  public java.util.NavigableMap descendingMap();
  public java.util.NavigableMap headMap(java.lang.Object, boolean);
  public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean);
  public java.util.NavigableMap tailMap(java.lang.Object, boolean);
  public java.util.Set keySet();
  public java.util.SortedMap headMap(java.lang.Object);
  public java.util.SortedMap subMap(java.lang.Object, java.lang.Object);
  public java.util.SortedMap tailMap(java.lang.Object);
}
public class java.util.concurrent.ConcurrentSkipListMap
  extends java.util.AbstractMap
  implements java.util.concurrent.ConcurrentNavigableMap, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Comparator);
  public void <init>(java.util.Map);
  public void <init>(java.util.SortedMap);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object, java.lang.Object);
  public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
  public int size();
  public void clear();
  public void forEach(java.util.function.BiConsumer);
  public void replaceAll(java.util.function.BiFunction);
  public java.lang.Object ceilingKey(java.lang.Object);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object firstKey();
  public java.lang.Object floorKey(java.lang.Object);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object);
  public java.lang.Object higherKey(java.lang.Object);
  public java.lang.Object lastKey();
  public java.lang.Object lowerKey(java.lang.Object);
  public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.Object replace(java.lang.Object, java.lang.Object);
  public java.util.Collection values();
  public java.util.Comparator comparator();
  public java.util.Map$Entry ceilingEntry(java.lang.Object);
  public java.util.Map$Entry firstEntry();
  public java.util.Map$Entry floorEntry(java.lang.Object);
  public java.util.Map$Entry higherEntry(java.lang.Object);
  public java.util.Map$Entry lastEntry();
  public java.util.Map$Entry lowerEntry(java.lang.Object);
  public java.util.Map$Entry pollFirstEntry();
  public java.util.Map$Entry pollLastEntry();
  public java.util.NavigableMap descendingMap();
  public java.util.NavigableMap headMap(java.lang.Object, boolean);
  public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean);
  public java.util.NavigableMap tailMap(java.lang.Object, boolean);
  public java.util.NavigableSet descendingKeySet();
  public java.util.NavigableSet keySet();
  public java.util.NavigableSet navigableKeySet();
  public java.util.Set entrySet();
  public java.util.Set keySet();
  public java.util.SortedMap headMap(java.lang.Object);
  public java.util.SortedMap subMap(java.lang.Object, java.lang.Object);
  public java.util.SortedMap tailMap(java.lang.Object);
  public java.util.concurrent.ConcurrentNavigableMap descendingMap();
  public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object);
  public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean);
  public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean);
  public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object);
  public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object);
  public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean);
  public java.util.concurrent.ConcurrentSkipListMap clone();
}
public class java.util.concurrent.ConcurrentSkipListSet
  extends java.util.AbstractSet
  implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Collection);
  public void <init>(java.util.Comparator);
  public void <init>(java.util.SortedSet);
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public int size();
  public void clear();
  public java.lang.Object ceiling(java.lang.Object);
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public java.lang.Object first();
  public java.lang.Object floor(java.lang.Object);
  public java.lang.Object higher(java.lang.Object);
  public java.lang.Object last();
  public java.lang.Object lower(java.lang.Object);
  public java.lang.Object pollFirst();
  public java.lang.Object pollLast();
  public java.util.Comparator comparator();
  public java.util.Iterator descendingIterator();
  public java.util.Iterator iterator();
  public java.util.NavigableSet descendingSet();
  public java.util.NavigableSet headSet(java.lang.Object);
  public java.util.NavigableSet headSet(java.lang.Object, boolean);
  public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean);
  public java.util.NavigableSet subSet(java.lang.Object, java.lang.Object);
  public java.util.NavigableSet tailSet(java.lang.Object);
  public java.util.NavigableSet tailSet(java.lang.Object, boolean);
  public java.util.SortedSet headSet(java.lang.Object);
  public java.util.SortedSet subSet(java.lang.Object, java.lang.Object);
  public java.util.SortedSet tailSet(java.lang.Object);
  public java.util.Spliterator spliterator();
  public java.util.concurrent.ConcurrentSkipListSet clone();
}
public class java.util.concurrent.CopyOnWriteArrayList
  extends java.lang.Object
  implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
  public void <init>();
  public void <init>(java.lang.Object[]);
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean addAll(int, java.util.Collection);
  public boolean addAll(java.util.Collection);
  public boolean addIfAbsent(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public boolean retainAll(java.util.Collection);
  public int addAllAbsent(java.util.Collection);
  public int hashCode();
  public int indexOf(java.lang.Object);
  public int indexOf(java.lang.Object, int);
  public int lastIndexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object, int);
  public int size();
  public void add(int, java.lang.Object);
  public void clear();
  public void forEach(java.util.function.Consumer);
  public void replaceAll(java.util.function.UnaryOperator);
  public void sort(java.util.Comparator);
  public java.lang.Object clone();
  public java.lang.Object get(int);
  public java.lang.Object remove(int);
  public java.lang.Object set(int, java.lang.Object);
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator iterator();
  public java.util.List subList(int, int);
  public java.util.ListIterator listIterator();
  public java.util.ListIterator listIterator(int);
}
public class java.util.concurrent.CopyOnWriteArraySet
  extends java.util.AbstractSet
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean addAll(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public boolean removeIf(java.util.function.Predicate);
  public boolean retainAll(java.util.Collection);
  public int size();
  public void clear();
  public void forEach(java.util.function.Consumer);
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.concurrent.CountDownLatch
  extends java.lang.Object
{
  public void <init>(int);
  public boolean await(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public long getCount();
  public void await()  throws java.lang.InterruptedException;
  public void countDown();
  public java.lang.String toString();
}
public abstract class java.util.concurrent.CountedCompleter
  extends java.util.concurrent.ForkJoinTask
{
  public final boolean compareAndSetPendingCount(int, int);
  public final int decrementPendingCountUnlessZero();
  public final int getPendingCount();
  public final void addToPendingCount(int);
  public final void helpComplete(int);
  public final void propagateCompletion();
  public final void quietlyCompleteRoot();
  public final void setPendingCount(int);
  public final void tryComplete();
  public final java.util.concurrent.CountedCompleter firstComplete();
  public final java.util.concurrent.CountedCompleter getCompleter();
  public final java.util.concurrent.CountedCompleter getRoot();
  public final java.util.concurrent.CountedCompleter nextComplete();
  public abstract void compute();
  public boolean onExceptionalCompletion(java.lang.Throwable, java.util.concurrent.CountedCompleter);
  public void complete(java.lang.Object);
  public void onCompletion(java.util.concurrent.CountedCompleter);
  public java.lang.Object getRawResult();
  protected void <init>();
  protected void <init>(java.util.concurrent.CountedCompleter);
  protected void <init>(java.util.concurrent.CountedCompleter, int);
  protected final boolean exec();
  protected void setRawResult(java.lang.Object);
}
public class java.util.concurrent.CyclicBarrier
  extends java.lang.Object
{
  public void <init>(int);
  public void <init>(int, java.lang.Runnable);
  public boolean isBroken();
  public int await()  throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException;
  public int await(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException, java.util.concurrent.TimeoutException;
  public int getNumberWaiting();
  public int getParties();
  public void reset();
}
public class java.util.concurrent.DelayQueue
  extends java.util.AbstractQueue
  implements java.util.concurrent.BlockingQueue
{
  public void <init>();
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean add(java.util.concurrent.Delayed);
  public boolean offer(java.lang.Object);
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean offer(java.util.concurrent.Delayed);
  public boolean offer(java.util.concurrent.Delayed, long, java.util.concurrent.TimeUnit);
  public boolean remove(java.lang.Object);
  public int drainTo(java.util.Collection);
  public int drainTo(java.util.Collection, int);
  public int remainingCapacity();
  public int size();
  public void clear();
  public void put(java.lang.Object)  throws java.lang.InterruptedException;
  public void put(java.util.concurrent.Delayed);
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object take()  throws java.lang.InterruptedException;
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.util.Iterator iterator();
  public java.util.concurrent.Delayed peek();
  public java.util.concurrent.Delayed poll();
  public java.util.concurrent.Delayed poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.util.concurrent.Delayed take()  throws java.lang.InterruptedException;
}
public interface java.util.concurrent.Delayed
  extends java.lang.Comparable
{
  public abstract long getDelay(java.util.concurrent.TimeUnit);
}
public class java.util.concurrent.Exchanger
  extends java.lang.Object
{
  public void <init>();
  public java.lang.Object exchange(java.lang.Object)  throws java.lang.InterruptedException;
  public java.lang.Object exchange(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.TimeoutException;
}
public class java.util.concurrent.ExecutionException
  extends java.lang.Exception
{
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  protected void <init>();
  protected void <init>(java.lang.String);
}
public interface java.util.concurrent.Executor
{
  public abstract void execute(java.lang.Runnable);
}
public class java.util.concurrent.ExecutorCompletionService
  extends java.lang.Object
  implements java.util.concurrent.CompletionService
{
  public void <init>(java.util.concurrent.Executor);
  public void <init>(java.util.concurrent.Executor, java.util.concurrent.BlockingQueue);
  public java.util.concurrent.Future poll();
  public java.util.concurrent.Future poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object);
  public java.util.concurrent.Future submit(java.util.concurrent.Callable);
  public java.util.concurrent.Future take()  throws java.lang.InterruptedException;
}
public interface java.util.concurrent.ExecutorService
  extends java.util.concurrent.Executor
{
  public abstract boolean awaitTermination(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract boolean isShutdown();
  public abstract boolean isTerminated();
  public abstract void shutdown();
  public abstract java.lang.Object invokeAny(java.util.Collection)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public abstract java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  public abstract java.util.List invokeAll(java.util.Collection)  throws java.lang.InterruptedException;
  public abstract java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract java.util.List shutdownNow();
  public abstract java.util.concurrent.Future submit(java.lang.Runnable);
  public abstract java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object);
  public abstract java.util.concurrent.Future submit(java.util.concurrent.Callable);
}
public class java.util.concurrent.Executors
  extends java.lang.Object
{
  public static java.util.concurrent.Callable callable(java.lang.Runnable);
  public static java.util.concurrent.Callable callable(java.lang.Runnable, java.lang.Object);
  public static java.util.concurrent.Callable callable(java.security.PrivilegedAction);
  public static java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction);
  public static java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable);
  public static java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable);
  public static java.util.concurrent.ExecutorService newCachedThreadPool();
  public static java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ExecutorService newFixedThreadPool(int);
  public static java.util.concurrent.ExecutorService newFixedThreadPool(int, java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ExecutorService newSingleThreadExecutor();
  public static java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ExecutorService newWorkStealingPool();
  public static java.util.concurrent.ExecutorService newWorkStealingPool(int);
  public static java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService);
  public static java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int);
  public static java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int, java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor();
  public static java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory);
  public static java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService);
  public static java.util.concurrent.ThreadFactory defaultThreadFactory();
  public static java.util.concurrent.ThreadFactory privilegedThreadFactory();
}
public class java.util.concurrent.ForkJoinPool
  extends java.util.concurrent.AbstractExecutorService
{
  public static int getCommonPoolParallelism();
  public static void managedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker)  throws java.lang.InterruptedException;
  public static java.util.concurrent.ForkJoinPool commonPool();
  public void <init>();
  public void <init>(int);
  public void <init>(int, java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory, java.lang.Thread$UncaughtExceptionHandler, boolean);
  public boolean awaitQuiescence(long, java.util.concurrent.TimeUnit);
  public boolean awaitTermination(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean getAsyncMode();
  public boolean hasQueuedSubmissions();
  public boolean isQuiescent();
  public boolean isShutdown();
  public boolean isTerminated();
  public boolean isTerminating();
  public int getActiveThreadCount();
  public int getParallelism();
  public int getPoolSize();
  public int getQueuedSubmissionCount();
  public int getRunningThreadCount();
  public long getQueuedTaskCount();
  public long getStealCount();
  public void execute(java.lang.Runnable);
  public void execute(java.util.concurrent.ForkJoinTask);
  public void shutdown();
  public java.lang.Object invoke(java.util.concurrent.ForkJoinTask);
  public java.lang.String toString();
  public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
  public java.util.List invokeAll(java.util.Collection);
  public java.util.List shutdownNow();
  public java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory getFactory();
  public java.util.concurrent.ForkJoinTask submit(java.lang.Runnable);
  public java.util.concurrent.ForkJoinTask submit(java.lang.Runnable, java.lang.Object);
  public java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable);
  public java.util.concurrent.ForkJoinTask submit(java.util.concurrent.ForkJoinTask);
  public java.util.concurrent.Future submit(java.lang.Runnable);
  public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object);
  public java.util.concurrent.Future submit(java.util.concurrent.Callable);
  protected int drainTasksTo(java.util.Collection);
  protected java.util.concurrent.ForkJoinTask pollSubmission();
  protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object);
  protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable);
  public static final java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;
}
public interface java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory
{
  public abstract java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool);
}
public interface java.util.concurrent.ForkJoinPool$ManagedBlocker
{
  public abstract boolean block()  throws java.lang.InterruptedException;
  public abstract boolean isReleasable();
}
public abstract class java.util.concurrent.ForkJoinTask
  extends java.lang.Object
  implements java.util.concurrent.Future, java.io.Serializable
{
  public static boolean inForkJoinPool();
  public static int getQueuedTaskCount();
  public static int getSurplusQueuedTaskCount();
  public static void helpQuiesce();
  public static void invokeAll(java.util.concurrent.ForkJoinTask, java.util.concurrent.ForkJoinTask);
  public static void invokeAll(java.util.concurrent.ForkJoinTask[]);
  public static java.util.Collection invokeAll(java.util.Collection);
  public static java.util.concurrent.ForkJoinPool getPool();
  public static java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable);
  public static java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable, java.lang.Object);
  public static java.util.concurrent.ForkJoinTask adapt(java.util.concurrent.Callable);
  public void <init>();
  public final boolean compareAndSetForkJoinTaskTag(short, short);
  public final boolean isCancelled();
  public final boolean isCompletedAbnormally();
  public final boolean isCompletedNormally();
  public final boolean isDone();
  public final short getForkJoinTaskTag();
  public final short setForkJoinTaskTag(short);
  public final void quietlyComplete();
  public final void quietlyInvoke();
  public final void quietlyJoin();
  public final java.lang.Object get()  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public final java.lang.Object get(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  public final java.lang.Object invoke();
  public final java.lang.Object join();
  public final java.lang.Throwable getException();
  public final java.util.concurrent.ForkJoinTask fork();
  public abstract java.lang.Object getRawResult();
  public boolean cancel(boolean);
  public boolean tryUnfork();
  public void complete(java.lang.Object);
  public void completeExceptionally(java.lang.Throwable);
  public void reinitialize();
  protected static java.util.concurrent.ForkJoinTask peekNextLocalTask();
  protected static java.util.concurrent.ForkJoinTask pollNextLocalTask();
  protected static java.util.concurrent.ForkJoinTask pollTask();
  protected abstract boolean exec();
  protected abstract void setRawResult(java.lang.Object);
}
public class java.util.concurrent.ForkJoinWorkerThread
  extends java.lang.Thread
{
  public int getPoolIndex();
  public void run();
  public java.util.concurrent.ForkJoinPool getPool();
  protected void <init>(java.util.concurrent.ForkJoinPool);
  protected void onStart();
  protected void onTermination(java.lang.Throwable);
}
public interface java.util.concurrent.Future
{
  public abstract boolean cancel(boolean);
  public abstract boolean isCancelled();
  public abstract boolean isDone();
  public abstract java.lang.Object get()  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public abstract java.lang.Object get(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
}
public class java.util.concurrent.FutureTask
  extends java.lang.Object
  implements java.util.concurrent.RunnableFuture
{
  public void <init>(java.lang.Runnable, java.lang.Object);
  public void <init>(java.util.concurrent.Callable);
  public boolean cancel(boolean);
  public boolean isCancelled();
  public boolean isDone();
  public void run();
  public java.lang.Object get()  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public java.lang.Object get(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  protected boolean runAndReset();
  protected void done();
  protected void set(java.lang.Object);
  protected void setException(java.lang.Throwable);
}
public class java.util.concurrent.LinkedBlockingDeque
  extends java.util.AbstractQueue
  implements java.util.concurrent.BlockingDeque, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean offer(java.lang.Object);
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean offerFirst(java.lang.Object);
  public boolean offerFirst(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean offerLast(java.lang.Object);
  public boolean offerLast(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean remove(java.lang.Object);
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public int drainTo(java.util.Collection);
  public int drainTo(java.util.Collection, int);
  public int remainingCapacity();
  public int size();
  public void addFirst(java.lang.Object);
  public void addLast(java.lang.Object);
  public void clear();
  public void push(java.lang.Object);
  public void put(java.lang.Object)  throws java.lang.InterruptedException;
  public void putFirst(java.lang.Object)  throws java.lang.InterruptedException;
  public void putLast(java.lang.Object)  throws java.lang.InterruptedException;
  public java.lang.Object element();
  public java.lang.Object getFirst();
  public java.lang.Object getLast();
  public java.lang.Object peek();
  public java.lang.Object peekFirst();
  public java.lang.Object peekLast();
  public java.lang.Object poll();
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object pollFirst();
  public java.lang.Object pollFirst(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object pollLast();
  public java.lang.Object pollLast(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object pop();
  public java.lang.Object remove();
  public java.lang.Object removeFirst();
  public java.lang.Object removeLast();
  public java.lang.Object take()  throws java.lang.InterruptedException;
  public java.lang.Object takeFirst()  throws java.lang.InterruptedException;
  public java.lang.Object takeLast()  throws java.lang.InterruptedException;
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator descendingIterator();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.concurrent.LinkedBlockingQueue
  extends java.util.AbstractQueue
  implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.util.Collection);
  public boolean contains(java.lang.Object);
  public boolean offer(java.lang.Object);
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean remove(java.lang.Object);
  public int drainTo(java.util.Collection);
  public int drainTo(java.util.Collection, int);
  public int remainingCapacity();
  public int size();
  public void clear();
  public void put(java.lang.Object)  throws java.lang.InterruptedException;
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object take()  throws java.lang.InterruptedException;
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.concurrent.LinkedTransferQueue
  extends java.util.AbstractQueue
  implements java.util.concurrent.TransferQueue, java.io.Serializable
{
  public void <init>();
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean hasWaitingConsumer();
  public boolean isEmpty();
  public boolean offer(java.lang.Object);
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit);
  public boolean remove(java.lang.Object);
  public boolean tryTransfer(java.lang.Object);
  public boolean tryTransfer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public int drainTo(java.util.Collection);
  public int drainTo(java.util.Collection, int);
  public int getWaitingConsumerCount();
  public int remainingCapacity();
  public int size();
  public void put(java.lang.Object);
  public void transfer(java.lang.Object)  throws java.lang.InterruptedException;
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object take()  throws java.lang.InterruptedException;
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public class java.util.concurrent.Phaser
  extends java.lang.Object
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.util.concurrent.Phaser);
  public void <init>(java.util.concurrent.Phaser, int);
  public final int getPhase();
  public boolean isTerminated();
  public int arrive();
  public int arriveAndAwaitAdvance();
  public int arriveAndDeregister();
  public int awaitAdvance(int);
  public int awaitAdvanceInterruptibly(int)  throws java.lang.InterruptedException;
  public int awaitAdvanceInterruptibly(int, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException, java.util.concurrent.TimeoutException;
  public int bulkRegister(int);
  public int getArrivedParties();
  public int getRegisteredParties();
  public int getUnarrivedParties();
  public int register();
  public void forceTermination();
  public java.lang.String toString();
  public java.util.concurrent.Phaser getParent();
  public java.util.concurrent.Phaser getRoot();
  protected boolean onAdvance(int, int);
}
public class java.util.concurrent.PriorityBlockingQueue
  extends java.util.AbstractQueue
  implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, java.util.Comparator);
  public void <init>(java.util.Collection);
  public boolean add(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean offer(java.lang.Object);
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit);
  public boolean remove(java.lang.Object);
  public int drainTo(java.util.Collection);
  public int drainTo(java.util.Collection, int);
  public int remainingCapacity();
  public int size();
  public void clear();
  public void put(java.lang.Object);
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object take()  throws java.lang.InterruptedException;
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Comparator comparator();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public abstract class java.util.concurrent.RecursiveAction
  extends java.util.concurrent.ForkJoinTask
{
  public void <init>();
  public final java.lang.Void getRawResult();
  public java.lang.Object getRawResult();
  protected final boolean exec();
  protected final void setRawResult(java.lang.Void);
  protected abstract void compute();
  protected void setRawResult(java.lang.Object);
}
public abstract class java.util.concurrent.RecursiveTask
  extends java.util.concurrent.ForkJoinTask
{
  public void <init>();
  public final java.lang.Object getRawResult();
  protected final boolean exec();
  protected final void setRawResult(java.lang.Object);
  protected abstract java.lang.Object compute();
}
public class java.util.concurrent.RejectedExecutionException
  extends java.lang.RuntimeException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public interface java.util.concurrent.RejectedExecutionHandler
{
  public abstract void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
}
public interface java.util.concurrent.RunnableFuture
  extends java.lang.Runnable, java.util.concurrent.Future
{
  public abstract void run();
}
public interface java.util.concurrent.RunnableScheduledFuture
  extends java.util.concurrent.RunnableFuture, java.util.concurrent.ScheduledFuture
{
  public abstract boolean isPeriodic();
}
public interface java.util.concurrent.ScheduledExecutorService
  extends java.util.concurrent.ExecutorService
{
  public abstract java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
  public abstract java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit);
  public abstract java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public abstract java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
}
public interface java.util.concurrent.ScheduledFuture
  extends java.util.concurrent.Delayed, java.util.concurrent.Future
{
}
public class java.util.concurrent.ScheduledThreadPoolExecutor
  extends java.util.concurrent.ThreadPoolExecutor
  implements java.util.concurrent.ScheduledExecutorService
{
  public void <init>(int);
  public void <init>(int, java.util.concurrent.RejectedExecutionHandler);
  public void <init>(int, java.util.concurrent.ThreadFactory);
  public void <init>(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler);
  public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy();
  public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy();
  public boolean getRemoveOnCancelPolicy();
  public void execute(java.lang.Runnable);
  public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean);
  public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean);
  public void setRemoveOnCancelPolicy(boolean);
  public void shutdown();
  public java.util.List shutdownNow();
  public java.util.concurrent.BlockingQueue getQueue();
  public java.util.concurrent.Future submit(java.lang.Runnable);
  public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object);
  public java.util.concurrent.Future submit(java.util.concurrent.Callable);
  public java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  protected java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture);
  protected java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable, java.util.concurrent.RunnableScheduledFuture);
}
public class java.util.concurrent.Semaphore
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(int);
  public void <init>(int, boolean);
  public final boolean hasQueuedThreads();
  public final int getQueueLength();
  public boolean isFair();
  public boolean tryAcquire();
  public boolean tryAcquire(int);
  public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean tryAcquire(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public int availablePermits();
  public int drainPermits();
  public void acquire()  throws java.lang.InterruptedException;
  public void acquire(int)  throws java.lang.InterruptedException;
  public void acquireUninterruptibly();
  public void acquireUninterruptibly(int);
  public void release();
  public void release(int);
  public java.lang.String toString();
  protected void reducePermits(int);
  protected java.util.Collection getQueuedThreads();
}
public class java.util.concurrent.SynchronousQueue
  extends java.util.AbstractQueue
  implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
  public void <init>();
  public void <init>(boolean);
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection);
  public boolean isEmpty();
  public boolean offer(java.lang.Object);
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean remove(java.lang.Object);
  public boolean removeAll(java.util.Collection);
  public boolean retainAll(java.util.Collection);
  public int drainTo(java.util.Collection);
  public int drainTo(java.util.Collection, int);
  public int remainingCapacity();
  public int size();
  public void clear();
  public void put(java.lang.Object)  throws java.lang.InterruptedException;
  public java.lang.Object peek();
  public java.lang.Object poll();
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public java.lang.Object take()  throws java.lang.InterruptedException;
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.lang.Object[]);
  public java.lang.String toString();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
}
public interface java.util.concurrent.ThreadFactory
{
  public abstract java.lang.Thread newThread(java.lang.Runnable);
}
public class java.util.concurrent.ThreadLocalRandom
  extends java.util.Random
{
  public static java.util.concurrent.ThreadLocalRandom current();
  public boolean nextBoolean();
  public double nextDouble();
  public double nextDouble(double);
  public double nextDouble(double, double);
  public double nextGaussian();
  public float nextFloat();
  public int nextInt();
  public int nextInt(int);
  public int nextInt(int, int);
  public long nextLong();
  public long nextLong(long);
  public long nextLong(long, long);
  public void setSeed(long);
  public java.util.stream.DoubleStream doubles();
  public java.util.stream.DoubleStream doubles(double, double);
  public java.util.stream.DoubleStream doubles(long);
  public java.util.stream.DoubleStream doubles(long, double, double);
  public java.util.stream.IntStream ints();
  public java.util.stream.IntStream ints(int, int);
  public java.util.stream.IntStream ints(long);
  public java.util.stream.IntStream ints(long, int, int);
  public java.util.stream.LongStream longs();
  public java.util.stream.LongStream longs(long);
  public java.util.stream.LongStream longs(long, long);
  public java.util.stream.LongStream longs(long, long, long);
  protected int next(int);
}
public class java.util.concurrent.ThreadPoolExecutor
  extends java.util.concurrent.AbstractExecutorService
{
  public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue);
  public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler);
  public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory);
  public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler);
  public boolean allowsCoreThreadTimeOut();
  public boolean awaitTermination(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public boolean isShutdown();
  public boolean isTerminated();
  public boolean isTerminating();
  public boolean prestartCoreThread();
  public boolean remove(java.lang.Runnable);
  public int getActiveCount();
  public int getCorePoolSize();
  public int getLargestPoolSize();
  public int getMaximumPoolSize();
  public int getPoolSize();
  public int prestartAllCoreThreads();
  public long getCompletedTaskCount();
  public long getKeepAliveTime(java.util.concurrent.TimeUnit);
  public long getTaskCount();
  public void allowCoreThreadTimeOut(boolean);
  public void execute(java.lang.Runnable);
  public void purge();
  public void setCorePoolSize(int);
  public void setKeepAliveTime(long, java.util.concurrent.TimeUnit);
  public void setMaximumPoolSize(int);
  public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler);
  public void setThreadFactory(java.util.concurrent.ThreadFactory);
  public void shutdown();
  public java.lang.String toString();
  public java.util.List shutdownNow();
  public java.util.concurrent.BlockingQueue getQueue();
  public java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler();
  public java.util.concurrent.ThreadFactory getThreadFactory();
  protected void afterExecute(java.lang.Runnable, java.lang.Throwable);
  protected void beforeExecute(java.lang.Thread, java.lang.Runnable);
  protected void finalize();
  protected void terminated();
}
public class java.util.concurrent.ThreadPoolExecutor$AbortPolicy
  extends java.lang.Object
  implements java.util.concurrent.RejectedExecutionHandler
{
  public void <init>();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
}
public class java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy
  extends java.lang.Object
  implements java.util.concurrent.RejectedExecutionHandler
{
  public void <init>();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
}
public class java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy
  extends java.lang.Object
  implements java.util.concurrent.RejectedExecutionHandler
{
  public void <init>();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
}
public class java.util.concurrent.ThreadPoolExecutor$DiscardPolicy
  extends java.lang.Object
  implements java.util.concurrent.RejectedExecutionHandler
{
  public void <init>();
  public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor);
}
public final class java.util.concurrent.TimeUnit
  extends java.lang.Enum
{
  public static java.util.concurrent.TimeUnit valueOf(java.lang.String);
  public static java.util.concurrent.TimeUnit[] values();
  public long convert(long, java.util.concurrent.TimeUnit);
  public long toDays(long);
  public long toHours(long);
  public long toMicros(long);
  public long toMillis(long);
  public long toMinutes(long);
  public long toNanos(long);
  public long toSeconds(long);
  public void sleep(long)  throws java.lang.InterruptedException;
  public void timedJoin(java.lang.Thread, long)  throws java.lang.InterruptedException;
  public void timedWait(java.lang.Object, long)  throws java.lang.InterruptedException;
  public static final java.util.concurrent.TimeUnit DAYS;
  public static final java.util.concurrent.TimeUnit HOURS;
  public static final java.util.concurrent.TimeUnit MICROSECONDS;
  public static final java.util.concurrent.TimeUnit MILLISECONDS;
  public static final java.util.concurrent.TimeUnit MINUTES;
  public static final java.util.concurrent.TimeUnit NANOSECONDS;
  public static final java.util.concurrent.TimeUnit SECONDS;
}
public class java.util.concurrent.TimeoutException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface java.util.concurrent.TransferQueue
  extends java.util.concurrent.BlockingQueue
{
  public abstract boolean hasWaitingConsumer();
  public abstract boolean tryTransfer(java.lang.Object);
  public abstract boolean tryTransfer(java.lang.Object, long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract int getWaitingConsumerCount();
  public abstract void transfer(java.lang.Object)  throws java.lang.InterruptedException;
}
public class java.util.concurrent.atomic.AtomicBoolean
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(boolean);
  public final boolean compareAndSet(boolean, boolean);
  public final boolean get();
  public final boolean getAndSet(boolean);
  public final void lazySet(boolean);
  public final void set(boolean);
  public boolean weakCompareAndSet(boolean, boolean);
  public java.lang.String toString();
}
public class java.util.concurrent.atomic.AtomicInteger
  extends java.lang.Number
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(int);
  public final boolean compareAndSet(int, int);
  public final boolean weakCompareAndSet(int, int);
  public final int accumulateAndGet(int, java.util.function.IntBinaryOperator);
  public final int addAndGet(int);
  public final int decrementAndGet();
  public final int get();
  public final int getAndAccumulate(int, java.util.function.IntBinaryOperator);
  public final int getAndAdd(int);
  public final int getAndDecrement();
  public final int getAndIncrement();
  public final int getAndSet(int);
  public final int getAndUpdate(java.util.function.IntUnaryOperator);
  public final int incrementAndGet();
  public final int updateAndGet(java.util.function.IntUnaryOperator);
  public final void lazySet(int);
  public final void set(int);
  public double doubleValue();
  public float floatValue();
  public int intValue();
  public long longValue();
  public java.lang.String toString();
}
public class java.util.concurrent.atomic.AtomicIntegerArray
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(int);
  public void <init>(int[]);
  public final boolean compareAndSet(int, int, int);
  public final boolean weakCompareAndSet(int, int, int);
  public final int accumulateAndGet(int, int, java.util.function.IntBinaryOperator);
  public final int addAndGet(int, int);
  public final int decrementAndGet(int);
  public final int get(int);
  public final int getAndAccumulate(int, int, java.util.function.IntBinaryOperator);
  public final int getAndAdd(int, int);
  public final int getAndDecrement(int);
  public final int getAndIncrement(int);
  public final int getAndSet(int, int);
  public final int getAndUpdate(int, java.util.function.IntUnaryOperator);
  public final int incrementAndGet(int);
  public final int length();
  public final int updateAndGet(int, java.util.function.IntUnaryOperator);
  public final void lazySet(int, int);
  public final void set(int, int);
  public java.lang.String toString();
}
public abstract class java.util.concurrent.atomic.AtomicIntegerFieldUpdater
  extends java.lang.Object
{
  public static java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class, java.lang.String);
  public final int accumulateAndGet(java.lang.Object, int, java.util.function.IntBinaryOperator);
  public final int getAndAccumulate(java.lang.Object, int, java.util.function.IntBinaryOperator);
  public final int getAndUpdate(java.lang.Object, java.util.function.IntUnaryOperator);
  public final int updateAndGet(java.lang.Object, java.util.function.IntUnaryOperator);
  public abstract boolean compareAndSet(java.lang.Object, int, int);
  public abstract boolean weakCompareAndSet(java.lang.Object, int, int);
  public abstract int get(java.lang.Object);
  public abstract void lazySet(java.lang.Object, int);
  public abstract void set(java.lang.Object, int);
  public int addAndGet(java.lang.Object, int);
  public int decrementAndGet(java.lang.Object);
  public int getAndAdd(java.lang.Object, int);
  public int getAndDecrement(java.lang.Object);
  public int getAndIncrement(java.lang.Object);
  public int getAndSet(java.lang.Object, int);
  public int incrementAndGet(java.lang.Object);
  protected void <init>();
}
public class java.util.concurrent.atomic.AtomicLong
  extends java.lang.Number
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(long);
  public final boolean compareAndSet(long, long);
  public final boolean weakCompareAndSet(long, long);
  public final long accumulateAndGet(long, java.util.function.LongBinaryOperator);
  public final long addAndGet(long);
  public final long decrementAndGet();
  public final long get();
  public final long getAndAccumulate(long, java.util.function.LongBinaryOperator);
  public final long getAndAdd(long);
  public final long getAndDecrement();
  public final long getAndIncrement();
  public final long getAndSet(long);
  public final long getAndUpdate(java.util.function.LongUnaryOperator);
  public final long incrementAndGet();
  public final long updateAndGet(java.util.function.LongUnaryOperator);
  public final void lazySet(long);
  public final void set(long);
  public double doubleValue();
  public float floatValue();
  public int intValue();
  public long longValue();
  public java.lang.String toString();
}
public class java.util.concurrent.atomic.AtomicLongArray
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(int);
  public void <init>(long[]);
  public final boolean compareAndSet(int, long, long);
  public final boolean weakCompareAndSet(int, long, long);
  public final int length();
  public final long accumulateAndGet(int, long, java.util.function.LongBinaryOperator);
  public final long decrementAndGet(int);
  public final long get(int);
  public final long getAndAccumulate(int, long, java.util.function.LongBinaryOperator);
  public final long getAndAdd(int, long);
  public final long getAndDecrement(int);
  public final long getAndIncrement(int);
  public final long getAndSet(int, long);
  public final long getAndUpdate(int, java.util.function.LongUnaryOperator);
  public final long incrementAndGet(int);
  public final long updateAndGet(int, java.util.function.LongUnaryOperator);
  public final void lazySet(int, long);
  public final void set(int, long);
  public long addAndGet(int, long);
  public java.lang.String toString();
}
public abstract class java.util.concurrent.atomic.AtomicLongFieldUpdater
  extends java.lang.Object
{
  public static java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class, java.lang.String);
  public final long accumulateAndGet(java.lang.Object, long, java.util.function.LongBinaryOperator);
  public final long getAndAccumulate(java.lang.Object, long, java.util.function.LongBinaryOperator);
  public final long getAndUpdate(java.lang.Object, java.util.function.LongUnaryOperator);
  public final long updateAndGet(java.lang.Object, java.util.function.LongUnaryOperator);
  public abstract boolean compareAndSet(java.lang.Object, long, long);
  public abstract boolean weakCompareAndSet(java.lang.Object, long, long);
  public abstract long get(java.lang.Object);
  public abstract void lazySet(java.lang.Object, long);
  public abstract void set(java.lang.Object, long);
  public long addAndGet(java.lang.Object, long);
  public long decrementAndGet(java.lang.Object);
  public long getAndAdd(java.lang.Object, long);
  public long getAndDecrement(java.lang.Object);
  public long getAndIncrement(java.lang.Object);
  public long getAndSet(java.lang.Object, long);
  public long incrementAndGet(java.lang.Object);
  protected void <init>();
}
public class java.util.concurrent.atomic.AtomicMarkableReference
  extends java.lang.Object
{
  public void <init>(java.lang.Object, boolean);
  public boolean attemptMark(java.lang.Object, boolean);
  public boolean compareAndSet(java.lang.Object, java.lang.Object, boolean, boolean);
  public boolean isMarked();
  public boolean weakCompareAndSet(java.lang.Object, java.lang.Object, boolean, boolean);
  public void set(java.lang.Object, boolean);
  public java.lang.Object get(boolean[]);
  public java.lang.Object getReference();
}
public class java.util.concurrent.atomic.AtomicReference
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  public void <init>(java.lang.Object);
  public final boolean compareAndSet(java.lang.Object, java.lang.Object);
  public final boolean weakCompareAndSet(java.lang.Object, java.lang.Object);
  public final void lazySet(java.lang.Object);
  public final void set(java.lang.Object);
  public final java.lang.Object accumulateAndGet(java.lang.Object, java.util.function.BinaryOperator);
  public final java.lang.Object get();
  public final java.lang.Object getAndAccumulate(java.lang.Object, java.util.function.BinaryOperator);
  public final java.lang.Object getAndSet(java.lang.Object);
  public final java.lang.Object getAndUpdate(java.util.function.UnaryOperator);
  public final java.lang.Object updateAndGet(java.util.function.UnaryOperator);
  public java.lang.String toString();
}
public class java.util.concurrent.atomic.AtomicReferenceArray
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(int);
  public void <init>(java.lang.Object[]);
  public final boolean compareAndSet(int, java.lang.Object, java.lang.Object);
  public final boolean weakCompareAndSet(int, java.lang.Object, java.lang.Object);
  public final int length();
  public final void lazySet(int, java.lang.Object);
  public final void set(int, java.lang.Object);
  public final java.lang.Object accumulateAndGet(int, java.lang.Object, java.util.function.BinaryOperator);
  public final java.lang.Object get(int);
  public final java.lang.Object getAndAccumulate(int, java.lang.Object, java.util.function.BinaryOperator);
  public final java.lang.Object getAndSet(int, java.lang.Object);
  public final java.lang.Object getAndUpdate(int, java.util.function.UnaryOperator);
  public final java.lang.Object updateAndGet(int, java.util.function.UnaryOperator);
  public java.lang.String toString();
}
public abstract class java.util.concurrent.atomic.AtomicReferenceFieldUpdater
  extends java.lang.Object
{
  public static java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class, java.lang.Class, java.lang.String);
  public final java.lang.Object accumulateAndGet(java.lang.Object, java.lang.Object, java.util.function.BinaryOperator);
  public final java.lang.Object getAndAccumulate(java.lang.Object, java.lang.Object, java.util.function.BinaryOperator);
  public final java.lang.Object getAndUpdate(java.lang.Object, java.util.function.UnaryOperator);
  public final java.lang.Object updateAndGet(java.lang.Object, java.util.function.UnaryOperator);
  public abstract boolean compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object);
  public abstract boolean weakCompareAndSet(java.lang.Object, java.lang.Object, java.lang.Object);
  public abstract void lazySet(java.lang.Object, java.lang.Object);
  public abstract void set(java.lang.Object, java.lang.Object);
  public abstract java.lang.Object get(java.lang.Object);
  public java.lang.Object getAndSet(java.lang.Object, java.lang.Object);
  protected void <init>();
}
public class java.util.concurrent.atomic.AtomicStampedReference
  extends java.lang.Object
{
  public void <init>(java.lang.Object, int);
  public boolean attemptStamp(java.lang.Object, int);
  public boolean compareAndSet(java.lang.Object, java.lang.Object, int, int);
  public boolean weakCompareAndSet(java.lang.Object, java.lang.Object, int, int);
  public int getStamp();
  public void set(java.lang.Object, int);
  public java.lang.Object get(int[]);
  public java.lang.Object getReference();
}
public class java.util.concurrent.atomic.DoubleAccumulator
  extends java.util.concurrent.atomic.Striped64
  implements java.io.Serializable
{
  public void <init>(java.util.function.DoubleBinaryOperator, double);
  public double doubleValue();
  public double get();
  public double getThenReset();
  public float floatValue();
  public int intValue();
  public long longValue();
  public void accumulate(double);
  public void reset();
  public java.lang.String toString();
}
public class java.util.concurrent.atomic.DoubleAdder
  extends java.util.concurrent.atomic.Striped64
  implements java.io.Serializable
{
  public void <init>();
  public double doubleValue();
  public double sum();
  public double sumThenReset();
  public float floatValue();
  public int intValue();
  public long longValue();
  public void add(double);
  public void reset();
  public java.lang.String toString();
}
public class java.util.concurrent.atomic.LongAccumulator
  extends java.util.concurrent.atomic.Striped64
  implements java.io.Serializable
{
  public void <init>(java.util.function.LongBinaryOperator, long);
  public double doubleValue();
  public float floatValue();
  public int intValue();
  public long get();
  public long getThenReset();
  public long longValue();
  public void accumulate(long);
  public void reset();
  public java.lang.String toString();
}
public class java.util.concurrent.atomic.LongAdder
  extends java.util.concurrent.atomic.Striped64
  implements java.io.Serializable
{
  public void <init>();
  public double doubleValue();
  public float floatValue();
  public int intValue();
  public long longValue();
  public long sum();
  public long sumThenReset();
  public void add(long);
  public void decrement();
  public void increment();
  public void reset();
  public java.lang.String toString();
}
public abstract class java.util.concurrent.locks.AbstractOwnableSynchronizer
  extends java.lang.Object
  implements java.io.Serializable
{
  protected void <init>();
  protected final void setExclusiveOwnerThread(java.lang.Thread);
  protected final java.lang.Thread getExclusiveOwnerThread();
}
public abstract class java.util.concurrent.locks.AbstractQueuedLongSynchronizer
  extends java.util.concurrent.locks.AbstractOwnableSynchronizer
  implements java.io.Serializable
{
  public final boolean hasContended();
  public final boolean hasQueuedPredecessors();
  public final boolean hasQueuedThreads();
  public final boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject);
  public final boolean isQueued(java.lang.Thread);
  public final boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject);
  public final boolean release(long);
  public final boolean releaseShared(long);
  public final boolean tryAcquireNanos(long, long)  throws java.lang.InterruptedException;
  public final boolean tryAcquireSharedNanos(long, long)  throws java.lang.InterruptedException;
  public final int getQueueLength();
  public final int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject);
  public final void acquire(long);
  public final void acquireInterruptibly(long)  throws java.lang.InterruptedException;
  public final void acquireShared(long);
  public final void acquireSharedInterruptibly(long)  throws java.lang.InterruptedException;
  public final java.lang.Thread getFirstQueuedThread();
  public final java.util.Collection getExclusiveQueuedThreads();
  public final java.util.Collection getQueuedThreads();
  public final java.util.Collection getSharedQueuedThreads();
  public final java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject);
  public java.lang.String toString();
  protected void <init>();
  protected final boolean compareAndSetState(long, long);
  protected final long getState();
  protected final void setState(long);
  protected boolean isHeldExclusively();
  protected boolean tryAcquire(long);
  protected boolean tryRelease(long);
  protected boolean tryReleaseShared(long);
  protected long tryAcquireShared(long);
}
public class java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject
  extends java.lang.Object
  implements java.util.concurrent.locks.Condition, java.io.Serializable
{
  public void <init>(java.util.concurrent.locks.AbstractQueuedLongSynchronizer);
  public final boolean await(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public final boolean awaitUntil(java.util.Date)  throws java.lang.InterruptedException;
  public final long awaitNanos(long)  throws java.lang.InterruptedException;
  public final void await()  throws java.lang.InterruptedException;
  public final void awaitUninterruptibly();
  public final void signal();
  public final void signalAll();
  protected final boolean hasWaiters();
  protected final int getWaitQueueLength();
  protected final java.util.Collection getWaitingThreads();
}
public abstract class java.util.concurrent.locks.AbstractQueuedSynchronizer
  extends java.util.concurrent.locks.AbstractOwnableSynchronizer
  implements java.io.Serializable
{
  public final boolean hasContended();
  public final boolean hasQueuedPredecessors();
  public final boolean hasQueuedThreads();
  public final boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final boolean isQueued(java.lang.Thread);
  public final boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final boolean release(int);
  public final boolean releaseShared(int);
  public final boolean tryAcquireNanos(int, long)  throws java.lang.InterruptedException;
  public final boolean tryAcquireSharedNanos(int, long)  throws java.lang.InterruptedException;
  public final int getQueueLength();
  public final int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final void acquire(int);
  public final void acquireInterruptibly(int)  throws java.lang.InterruptedException;
  public final void acquireShared(int);
  public final void acquireSharedInterruptibly(int)  throws java.lang.InterruptedException;
  public final java.lang.Thread getFirstQueuedThread();
  public final java.util.Collection getExclusiveQueuedThreads();
  public final java.util.Collection getQueuedThreads();
  public final java.util.Collection getSharedQueuedThreads();
  public final java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public java.lang.String toString();
  protected void <init>();
  protected final boolean compareAndSetState(int, int);
  protected final int getState();
  protected final void setState(int);
  protected boolean isHeldExclusively();
  protected boolean tryAcquire(int);
  protected boolean tryRelease(int);
  protected boolean tryReleaseShared(int);
  protected int tryAcquireShared(int);
}
public class java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject
  extends java.lang.Object
  implements java.util.concurrent.locks.Condition, java.io.Serializable
{
  public void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer);
  public final boolean await(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public final boolean awaitUntil(java.util.Date)  throws java.lang.InterruptedException;
  public final long awaitNanos(long)  throws java.lang.InterruptedException;
  public final void await()  throws java.lang.InterruptedException;
  public final void awaitUninterruptibly();
  public final void signal();
  public final void signalAll();
  protected final boolean hasWaiters();
  protected final int getWaitQueueLength();
  protected final java.util.Collection getWaitingThreads();
}
public interface java.util.concurrent.locks.Condition
{
  public abstract boolean await(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract boolean awaitUntil(java.util.Date)  throws java.lang.InterruptedException;
  public abstract long awaitNanos(long)  throws java.lang.InterruptedException;
  public abstract void await()  throws java.lang.InterruptedException;
  public abstract void awaitUninterruptibly();
  public abstract void signal();
  public abstract void signalAll();
}
public interface java.util.concurrent.locks.Lock
{
  public abstract boolean tryLock();
  public abstract boolean tryLock(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public abstract void lock();
  public abstract void lockInterruptibly()  throws java.lang.InterruptedException;
  public abstract void unlock();
  public abstract java.util.concurrent.locks.Condition newCondition();
}
public class java.util.concurrent.locks.LockSupport
  extends java.lang.Object
{
  public static void park();
  public static void park(java.lang.Object);
  public static void parkNanos(java.lang.Object, long);
  public static void parkNanos(long);
  public static void parkUntil(java.lang.Object, long);
  public static void parkUntil(long);
  public static void unpark(java.lang.Thread);
  public static java.lang.Object getBlocker(java.lang.Thread);
}
public interface java.util.concurrent.locks.ReadWriteLock
{
  public abstract java.util.concurrent.locks.Lock readLock();
  public abstract java.util.concurrent.locks.Lock writeLock();
}
public class java.util.concurrent.locks.ReentrantLock
  extends java.lang.Object
  implements java.util.concurrent.locks.Lock, java.io.Serializable
{
  public void <init>();
  public void <init>(boolean);
  public final boolean hasQueuedThread(java.lang.Thread);
  public final boolean hasQueuedThreads();
  public final boolean isFair();
  public final int getQueueLength();
  public boolean hasWaiters(java.util.concurrent.locks.Condition);
  public boolean isHeldByCurrentThread();
  public boolean isLocked();
  public boolean tryLock();
  public boolean tryLock(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public int getHoldCount();
  public int getWaitQueueLength(java.util.concurrent.locks.Condition);
  public void lock();
  public void lockInterruptibly()  throws java.lang.InterruptedException;
  public void unlock();
  public java.lang.String toString();
  public java.util.concurrent.locks.Condition newCondition();
  protected java.lang.Thread getOwner();
  protected java.util.Collection getQueuedThreads();
  protected java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition);
}
public class java.util.concurrent.locks.ReentrantReadWriteLock
  extends java.lang.Object
  implements java.util.concurrent.locks.ReadWriteLock, java.io.Serializable
{
  public void <init>();
  public void <init>(boolean);
  public final boolean hasQueuedThread(java.lang.Thread);
  public final boolean hasQueuedThreads();
  public final boolean isFair();
  public final int getQueueLength();
  public boolean hasWaiters(java.util.concurrent.locks.Condition);
  public boolean isWriteLocked();
  public boolean isWriteLockedByCurrentThread();
  public int getReadHoldCount();
  public int getReadLockCount();
  public int getWaitQueueLength(java.util.concurrent.locks.Condition);
  public int getWriteHoldCount();
  public java.lang.String toString();
  public java.util.concurrent.locks.Lock readLock();
  public java.util.concurrent.locks.Lock writeLock();
  public java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock();
  public java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock();
  protected java.lang.Thread getOwner();
  protected java.util.Collection getQueuedReaderThreads();
  protected java.util.Collection getQueuedThreads();
  protected java.util.Collection getQueuedWriterThreads();
  protected java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition);
}
public class java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock
  extends java.lang.Object
  implements java.util.concurrent.locks.Lock, java.io.Serializable
{
  public boolean tryLock();
  public boolean tryLock(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public void lock();
  public void lockInterruptibly()  throws java.lang.InterruptedException;
  public void unlock();
  public java.lang.String toString();
  public java.util.concurrent.locks.Condition newCondition();
  protected void <init>(java.util.concurrent.locks.ReentrantReadWriteLock);
}
public class java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock
  extends java.lang.Object
  implements java.util.concurrent.locks.Lock, java.io.Serializable
{
  public boolean isHeldByCurrentThread();
  public boolean tryLock();
  public boolean tryLock(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public int getHoldCount();
  public void lock();
  public void lockInterruptibly()  throws java.lang.InterruptedException;
  public void unlock();
  public java.lang.String toString();
  public java.util.concurrent.locks.Condition newCondition();
  protected void <init>(java.util.concurrent.locks.ReentrantReadWriteLock);
}
public class java.util.concurrent.locks.StampedLock
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>();
  public boolean isReadLocked();
  public boolean isWriteLocked();
  public boolean tryUnlockRead();
  public boolean tryUnlockWrite();
  public boolean validate(long);
  public int getReadLockCount();
  public long readLock();
  public long readLockInterruptibly()  throws java.lang.InterruptedException;
  public long tryConvertToOptimisticRead(long);
  public long tryConvertToReadLock(long);
  public long tryConvertToWriteLock(long);
  public long tryOptimisticRead();
  public long tryReadLock();
  public long tryReadLock(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public long tryWriteLock();
  public long tryWriteLock(long, java.util.concurrent.TimeUnit)  throws java.lang.InterruptedException;
  public long writeLock();
  public long writeLockInterruptibly()  throws java.lang.InterruptedException;
  public void unlock(long);
  public void unlockRead(long);
  public void unlockWrite(long);
  public java.lang.String toString();
  public java.util.concurrent.locks.Lock asReadLock();
  public java.util.concurrent.locks.Lock asWriteLock();
  public java.util.concurrent.locks.ReadWriteLock asReadWriteLock();
}
public interface java.util.function.BiConsumer
{
  public abstract void accept(java.lang.Object, java.lang.Object);
  public java.util.function.BiConsumer andThen(java.util.function.BiConsumer);
}
public interface java.util.function.BiFunction
{
  public abstract java.lang.Object apply(java.lang.Object, java.lang.Object);
  public java.util.function.BiFunction andThen(java.util.function.Function);
}
public interface java.util.function.BiPredicate
{
  public abstract boolean test(java.lang.Object, java.lang.Object);
  public java.util.function.BiPredicate and(java.util.function.BiPredicate);
  public java.util.function.BiPredicate negate();
  public java.util.function.BiPredicate or(java.util.function.BiPredicate);
}
public interface java.util.function.BinaryOperator
  extends java.util.function.BiFunction
{
  public static java.util.function.BinaryOperator maxBy(java.util.Comparator);
  public static java.util.function.BinaryOperator minBy(java.util.Comparator);
}
public interface java.util.function.BooleanSupplier
{
  public abstract boolean getAsBoolean();
}
public interface java.util.function.Consumer
{
  public abstract void accept(java.lang.Object);
  public java.util.function.Consumer andThen(java.util.function.Consumer);
}
public interface java.util.function.DoubleBinaryOperator
{
  public abstract double applyAsDouble(double, double);
}
public interface java.util.function.DoubleConsumer
{
  public abstract void accept(double);
  public java.util.function.DoubleConsumer andThen(java.util.function.DoubleConsumer);
}
public interface java.util.function.DoubleFunction
{
  public abstract java.lang.Object apply(double);
}
public interface java.util.function.DoublePredicate
{
  public abstract boolean test(double);
  public java.util.function.DoublePredicate and(java.util.function.DoublePredicate);
  public java.util.function.DoublePredicate negate();
  public java.util.function.DoublePredicate or(java.util.function.DoublePredicate);
}
public interface java.util.function.DoubleSupplier
{
  public abstract double getAsDouble();
}
public interface java.util.function.DoubleToIntFunction
{
  public abstract int applyAsInt(double);
}
public interface java.util.function.DoubleToLongFunction
{
  public abstract long applyAsLong(double);
}
public interface java.util.function.DoubleUnaryOperator
{
  public static java.util.function.DoubleUnaryOperator identity();
  public abstract double applyAsDouble(double);
  public java.util.function.DoubleUnaryOperator andThen(java.util.function.DoubleUnaryOperator);
  public java.util.function.DoubleUnaryOperator compose(java.util.function.DoubleUnaryOperator);
}
public interface java.util.function.Function
{
  public static java.util.function.Function identity();
  public abstract java.lang.Object apply(java.lang.Object);
  public java.util.function.Function andThen(java.util.function.Function);
  public java.util.function.Function compose(java.util.function.Function);
}
public interface java.util.function.IntBinaryOperator
{
  public abstract int applyAsInt(int, int);
}
public interface java.util.function.IntConsumer
{
  public abstract void accept(int);
  public java.util.function.IntConsumer andThen(java.util.function.IntConsumer);
}
public interface java.util.function.IntFunction
{
  public abstract java.lang.Object apply(int);
}
public interface java.util.function.IntPredicate
{
  public abstract boolean test(int);
  public java.util.function.IntPredicate and(java.util.function.IntPredicate);
  public java.util.function.IntPredicate negate();
  public java.util.function.IntPredicate or(java.util.function.IntPredicate);
}
public interface java.util.function.IntSupplier
{
  public abstract int getAsInt();
}
public interface java.util.function.IntToDoubleFunction
{
  public abstract double applyAsDouble(int);
}
public interface java.util.function.IntToLongFunction
{
  public abstract long applyAsLong(int);
}
public interface java.util.function.IntUnaryOperator
{
  public static java.util.function.IntUnaryOperator identity();
  public abstract int applyAsInt(int);
  public java.util.function.IntUnaryOperator andThen(java.util.function.IntUnaryOperator);
  public java.util.function.IntUnaryOperator compose(java.util.function.IntUnaryOperator);
}
public interface java.util.function.LongBinaryOperator
{
  public abstract long applyAsLong(long, long);
}
public interface java.util.function.LongConsumer
{
  public abstract void accept(long);
  public java.util.function.LongConsumer andThen(java.util.function.LongConsumer);
}
public interface java.util.function.LongFunction
{
  public abstract java.lang.Object apply(long);
}
public interface java.util.function.LongPredicate
{
  public abstract boolean test(long);
  public java.util.function.LongPredicate and(java.util.function.LongPredicate);
  public java.util.function.LongPredicate negate();
  public java.util.function.LongPredicate or(java.util.function.LongPredicate);
}
public interface java.util.function.LongSupplier
{
  public abstract long getAsLong();
}
public interface java.util.function.LongToDoubleFunction
{
  public abstract double applyAsDouble(long);
}
public interface java.util.function.LongToIntFunction
{
  public abstract int applyAsInt(long);
}
public interface java.util.function.LongUnaryOperator
{
  public static java.util.function.LongUnaryOperator identity();
  public abstract long applyAsLong(long);
  public java.util.function.LongUnaryOperator andThen(java.util.function.LongUnaryOperator);
  public java.util.function.LongUnaryOperator compose(java.util.function.LongUnaryOperator);
}
public interface java.util.function.ObjDoubleConsumer
{
  public abstract void accept(java.lang.Object, double);
}
public interface java.util.function.ObjIntConsumer
{
  public abstract void accept(java.lang.Object, int);
}
public interface java.util.function.ObjLongConsumer
{
  public abstract void accept(java.lang.Object, long);
}
public interface java.util.function.Predicate
{
  public static java.util.function.Predicate isEqual(java.lang.Object);
  public abstract boolean test(java.lang.Object);
  public java.util.function.Predicate and(java.util.function.Predicate);
  public java.util.function.Predicate negate();
  public java.util.function.Predicate or(java.util.function.Predicate);
}
public interface java.util.function.Supplier
{
  public abstract java.lang.Object get();
}
public interface java.util.function.ToDoubleBiFunction
{
  public abstract double applyAsDouble(java.lang.Object, java.lang.Object);
}
public interface java.util.function.ToDoubleFunction
{
  public abstract double applyAsDouble(java.lang.Object);
}
public interface java.util.function.ToIntBiFunction
{
  public abstract int applyAsInt(java.lang.Object, java.lang.Object);
}
public interface java.util.function.ToIntFunction
{
  public abstract int applyAsInt(java.lang.Object);
}
public interface java.util.function.ToLongBiFunction
{
  public abstract long applyAsLong(java.lang.Object, java.lang.Object);
}
public interface java.util.function.ToLongFunction
{
  public abstract long applyAsLong(java.lang.Object);
}
public interface java.util.function.UnaryOperator
  extends java.util.function.Function
{
  public static java.util.function.UnaryOperator identity();
}
public class java.util.jar.Attributes
  extends java.lang.Object
  implements java.util.Map, java.lang.Cloneable
{
  public void <init>();
  public void <init>(int);
  public void <init>(java.util.jar.Attributes);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public boolean equals(java.lang.Object);
  public boolean isEmpty();
  public int hashCode();
  public int size();
  public void clear();
  public void putAll(java.util.Map);
  public java.lang.Object clone();
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public java.lang.String getValue(java.lang.String);
  public java.lang.String getValue(java.util.jar.Attributes$Name);
  public java.lang.String putValue(java.lang.String, java.lang.String);
  public java.util.Collection values();
  public java.util.Set entrySet();
  public java.util.Set keySet();
  protected java.util.Map map;
}
public class java.util.jar.Attributes$Name
  extends java.lang.Object
{
  public void <init>(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public static final java.util.jar.Attributes$Name CLASS_PATH;
  public static final java.util.jar.Attributes$Name CONTENT_TYPE;
  public static final java.util.jar.Attributes$Name EXTENSION_INSTALLATION;
  public static final java.util.jar.Attributes$Name EXTENSION_LIST;
  public static final java.util.jar.Attributes$Name EXTENSION_NAME;
  public static final java.util.jar.Attributes$Name IMPLEMENTATION_TITLE;
  public static final java.util.jar.Attributes$Name IMPLEMENTATION_URL;
  public static final java.util.jar.Attributes$Name IMPLEMENTATION_VENDOR;
  public static final java.util.jar.Attributes$Name IMPLEMENTATION_VENDOR_ID;
  public static final java.util.jar.Attributes$Name IMPLEMENTATION_VERSION;
  public static final java.util.jar.Attributes$Name MAIN_CLASS;
  public static final java.util.jar.Attributes$Name MANIFEST_VERSION;
  public static final java.util.jar.Attributes$Name SEALED;
  public static final java.util.jar.Attributes$Name SIGNATURE_VERSION;
  public static final java.util.jar.Attributes$Name SPECIFICATION_TITLE;
  public static final java.util.jar.Attributes$Name SPECIFICATION_VENDOR;
  public static final java.util.jar.Attributes$Name SPECIFICATION_VERSION;
}
public class java.util.jar.JarEntry
  extends java.util.zip.ZipEntry
{
  public void <init>(java.lang.String);
  public void <init>(java.util.jar.JarEntry);
  public void <init>(java.util.zip.ZipEntry);
  public java.security.CodeSigner[] getCodeSigners();
  public java.security.cert.Certificate[] getCertificates();
  public java.util.jar.Attributes getAttributes()  throws java.io.IOException;
}
public class java.util.jar.JarException
  extends java.util.zip.ZipException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.util.jar.JarFile
  extends java.util.zip.ZipFile
{
  public void <init>(java.io.File)  throws java.io.IOException;
  public void <init>(java.io.File, boolean)  throws java.io.IOException;
  public void <init>(java.io.File, boolean, int)  throws java.io.IOException;
  public void <init>(java.lang.String)  throws java.io.IOException;
  public void <init>(java.lang.String, boolean)  throws java.io.IOException;
  public java.io.InputStream getInputStream(java.util.zip.ZipEntry)  throws java.io.IOException;
  public java.util.Enumeration entries();
  public java.util.jar.JarEntry getJarEntry(java.lang.String);
  public java.util.jar.Manifest getManifest()  throws java.io.IOException;
  public java.util.zip.ZipEntry getEntry(java.lang.String);
  public static final java.lang.String MANIFEST_NAME;
}
public class java.util.jar.JarInputStream
  extends java.util.zip.ZipInputStream
{
  public void <init>(java.io.InputStream)  throws java.io.IOException;
  public void <init>(java.io.InputStream, boolean)  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public java.util.jar.JarEntry getNextJarEntry()  throws java.io.IOException;
  public java.util.jar.Manifest getManifest();
  public java.util.zip.ZipEntry getNextEntry()  throws java.io.IOException;
  protected java.util.zip.ZipEntry createZipEntry(java.lang.String);
}
public class java.util.jar.JarOutputStream
  extends java.util.zip.ZipOutputStream
{
  public void <init>(java.io.OutputStream)  throws java.io.IOException;
  public void <init>(java.io.OutputStream, java.util.jar.Manifest)  throws java.io.IOException;
  public void putNextEntry(java.util.zip.ZipEntry)  throws java.io.IOException;
}
public class java.util.jar.Manifest
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public void <init>(java.io.InputStream)  throws java.io.IOException;
  public void <init>(java.util.jar.Manifest);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public void clear();
  public void read(java.io.InputStream)  throws java.io.IOException;
  public void write(java.io.OutputStream)  throws java.io.IOException;
  public java.lang.Object clone();
  public java.util.Map getEntries();
  public java.util.jar.Attributes getAttributes(java.lang.String);
  public java.util.jar.Attributes getMainAttributes();
}
public abstract class java.util.jar.Pack200
  extends java.lang.Object
{
  public static java.util.jar.Pack200$Packer newPacker();
  public static java.util.jar.Pack200$Unpacker newUnpacker();
}
public interface java.util.jar.Pack200$Packer
{
  public abstract void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public abstract void pack(java.util.jar.JarFile, java.io.OutputStream)  throws java.io.IOException;
  public abstract void pack(java.util.jar.JarInputStream, java.io.OutputStream)  throws java.io.IOException;
  public abstract void removePropertyChangeListener(java.beans.PropertyChangeListener);
  public abstract java.util.SortedMap properties();
  public static final java.lang.String CLASS_ATTRIBUTE_PFX;
  public static final java.lang.String CODE_ATTRIBUTE_PFX;
  public static final java.lang.String DEFLATE_HINT;
  public static final java.lang.String EFFORT;
  public static final java.lang.String ERROR;
  public static final java.lang.String FALSE;
  public static final java.lang.String FIELD_ATTRIBUTE_PFX;
  public static final java.lang.String KEEP;
  public static final java.lang.String KEEP_FILE_ORDER;
  public static final java.lang.String LATEST;
  public static final java.lang.String METHOD_ATTRIBUTE_PFX;
  public static final java.lang.String MODIFICATION_TIME;
  public static final java.lang.String PASS;
  public static final java.lang.String PASS_FILE_PFX;
  public static final java.lang.String PROGRESS;
  public static final java.lang.String SEGMENT_LIMIT;
  public static final java.lang.String STRIP;
  public static final java.lang.String TRUE;
  public static final java.lang.String UNKNOWN_ATTRIBUTE;
}
public interface java.util.jar.Pack200$Unpacker
{
  public abstract void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public abstract void removePropertyChangeListener(java.beans.PropertyChangeListener);
  public abstract void unpack(java.io.File, java.util.jar.JarOutputStream)  throws java.io.IOException;
  public abstract void unpack(java.io.InputStream, java.util.jar.JarOutputStream)  throws java.io.IOException;
  public abstract java.util.SortedMap properties();
  public static final java.lang.String DEFLATE_HINT;
  public static final java.lang.String FALSE;
  public static final java.lang.String KEEP;
  public static final java.lang.String PROGRESS;
  public static final java.lang.String TRUE;
}
public class java.util.logging.ConsoleHandler
  extends java.util.logging.StreamHandler
{
  public void <init>();
  public void close();
  public void publish(java.util.logging.LogRecord);
}
public class java.util.logging.ErrorManager
  extends java.lang.Object
{
  public void <init>();
  public void error(java.lang.String, java.lang.Exception, int);
  public static final int CLOSE_FAILURE;
  public static final int FLUSH_FAILURE;
  public static final int FORMAT_FAILURE;
  public static final int GENERIC_FAILURE;
  public static final int OPEN_FAILURE;
  public static final int WRITE_FAILURE;
}
public class java.util.logging.FileHandler
  extends java.util.logging.StreamHandler
{
  public void <init>()  throws java.io.IOException, java.lang.SecurityException;
  public void <init>(java.lang.String)  throws java.io.IOException, java.lang.SecurityException;
  public void <init>(java.lang.String, boolean)  throws java.io.IOException, java.lang.SecurityException;
  public void <init>(java.lang.String, int, int)  throws java.io.IOException, java.lang.SecurityException;
  public void <init>(java.lang.String, int, int, boolean)  throws java.io.IOException, java.lang.SecurityException;
  public void close()  throws java.lang.SecurityException;
  public void publish(java.util.logging.LogRecord);
}
public interface java.util.logging.Filter
{
  public abstract boolean isLoggable(java.util.logging.LogRecord);
}
public abstract class java.util.logging.Formatter
  extends java.lang.Object
{
  public abstract java.lang.String format(java.util.logging.LogRecord);
  public java.lang.String formatMessage(java.util.logging.LogRecord);
  public java.lang.String getHead(java.util.logging.Handler);
  public java.lang.String getTail(java.util.logging.Handler);
  protected void <init>();
}
public abstract class java.util.logging.Handler
  extends java.lang.Object
{
  public abstract void close()  throws java.lang.SecurityException;
  public abstract void flush();
  public abstract void publish(java.util.logging.LogRecord);
  public boolean isLoggable(java.util.logging.LogRecord);
  public void setEncoding(java.lang.String)  throws java.io.UnsupportedEncodingException, java.lang.SecurityException;
  public void setErrorManager(java.util.logging.ErrorManager);
  public void setFilter(java.util.logging.Filter)  throws java.lang.SecurityException;
  public void setFormatter(java.util.logging.Formatter)  throws java.lang.SecurityException;
  public void setLevel(java.util.logging.Level)  throws java.lang.SecurityException;
  public java.lang.String getEncoding();
  public java.util.logging.ErrorManager getErrorManager();
  public java.util.logging.Filter getFilter();
  public java.util.logging.Formatter getFormatter();
  public java.util.logging.Level getLevel();
  protected void <init>();
  protected void reportError(java.lang.String, java.lang.Exception, int);
}
public class java.util.logging.Level
  extends java.lang.Object
  implements java.io.Serializable
{
  public static java.util.logging.Level parse(java.lang.String)  throws java.lang.IllegalArgumentException;
  public final int intValue();
  public final java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String getLocalizedName();
  public java.lang.String getName();
  public java.lang.String getResourceBundleName();
  protected void <init>(java.lang.String, int);
  protected void <init>(java.lang.String, int, java.lang.String);
  public static final java.util.logging.Level ALL;
  public static final java.util.logging.Level CONFIG;
  public static final java.util.logging.Level FINE;
  public static final java.util.logging.Level FINER;
  public static final java.util.logging.Level FINEST;
  public static final java.util.logging.Level INFO;
  public static final java.util.logging.Level OFF;
  public static final java.util.logging.Level SEVERE;
  public static final java.util.logging.Level WARNING;
}
public class java.util.logging.LogManager
  extends java.lang.Object
{
  public static java.util.logging.LogManager getLogManager();
  public static java.util.logging.LoggingMXBean getLoggingMXBean();
  public boolean addLogger(java.util.logging.Logger);
  public void addPropertyChangeListener(java.beans.PropertyChangeListener)  throws java.lang.SecurityException;
  public void checkAccess()  throws java.lang.SecurityException;
  public void readConfiguration()  throws java.io.IOException, java.lang.SecurityException;
  public void readConfiguration(java.io.InputStream)  throws java.io.IOException, java.lang.SecurityException;
  public void removePropertyChangeListener(java.beans.PropertyChangeListener)  throws java.lang.SecurityException;
  public void reset()  throws java.lang.SecurityException;
  public java.lang.String getProperty(java.lang.String);
  public java.util.Enumeration getLoggerNames();
  public java.util.logging.Logger getLogger(java.lang.String);
  protected void <init>();
  public static final java.lang.String LOGGING_MXBEAN_NAME;
}
public class java.util.logging.LogRecord
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.util.logging.Level, java.lang.String);
  public int getThreadID();
  public long getMillis();
  public long getSequenceNumber();
  public void setLevel(java.util.logging.Level);
  public void setLoggerName(java.lang.String);
  public void setMessage(java.lang.String);
  public void setMillis(long);
  public void setParameters(java.lang.Object[]);
  public void setResourceBundle(java.util.ResourceBundle);
  public void setResourceBundleName(java.lang.String);
  public void setSequenceNumber(long);
  public void setSourceClassName(java.lang.String);
  public void setSourceMethodName(java.lang.String);
  public void setThreadID(int);
  public void setThrown(java.lang.Throwable);
  public java.lang.Object[] getParameters();
  public java.lang.String getLoggerName();
  public java.lang.String getMessage();
  public java.lang.String getResourceBundleName();
  public java.lang.String getSourceClassName();
  public java.lang.String getSourceMethodName();
  public java.lang.Throwable getThrown();
  public java.util.ResourceBundle getResourceBundle();
  public java.util.logging.Level getLevel();
}
public class java.util.logging.Logger
  extends java.lang.Object
{
  public static final java.util.logging.Logger getGlobal();
  public static java.util.logging.Logger getAnonymousLogger();
  public static java.util.logging.Logger getAnonymousLogger(java.lang.String);
  public static java.util.logging.Logger getLogger(java.lang.String);
  public static java.util.logging.Logger getLogger(java.lang.String, java.lang.String);
  public boolean getUseParentHandlers();
  public boolean isLoggable(java.util.logging.Level);
  public void addHandler(java.util.logging.Handler)  throws java.lang.SecurityException;
  public void config(java.lang.String);
  public void entering(java.lang.String, java.lang.String);
  public void entering(java.lang.String, java.lang.String, java.lang.Object);
  public void entering(java.lang.String, java.lang.String, java.lang.Object[]);
  public void exiting(java.lang.String, java.lang.String);
  public void exiting(java.lang.String, java.lang.String, java.lang.Object);
  public void fine(java.lang.String);
  public void finer(java.lang.String);
  public void finest(java.lang.String);
  public void info(java.lang.String);
  public void log(java.util.logging.Level, java.lang.String);
  public void log(java.util.logging.Level, java.lang.String, java.lang.Object);
  public void log(java.util.logging.Level, java.lang.String, java.lang.Object[]);
  public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable);
  public void log(java.util.logging.LogRecord);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[]);
  public void logp(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[]);
  public void logrb(java.util.logging.Level, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable);
  public void removeHandler(java.util.logging.Handler)  throws java.lang.SecurityException;
  public void setFilter(java.util.logging.Filter)  throws java.lang.SecurityException;
  public void setLevel(java.util.logging.Level)  throws java.lang.SecurityException;
  public void setParent(java.util.logging.Logger);
  public void setUseParentHandlers(boolean);
  public void severe(java.lang.String);
  public void throwing(java.lang.String, java.lang.String, java.lang.Throwable);
  public void warning(java.lang.String);
  public java.lang.String getName();
  public java.lang.String getResourceBundleName();
  public java.util.ResourceBundle getResourceBundle();
  public java.util.logging.Filter getFilter();
  public java.util.logging.Handler[] getHandlers();
  public java.util.logging.Level getLevel();
  public java.util.logging.Logger getParent();
  protected void <init>(java.lang.String, java.lang.String);
  public static final java.lang.String GLOBAL_LOGGER_NAME;
  public static final java.util.logging.Logger global;
}
public interface java.util.logging.LoggingMXBean
{
  public abstract void setLoggerLevel(java.lang.String, java.lang.String);
  public abstract java.lang.String getLoggerLevel(java.lang.String);
  public abstract java.lang.String getParentLoggerName(java.lang.String);
  public abstract java.util.List getLoggerNames();
}
public final class java.util.logging.LoggingPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String, java.lang.String)  throws java.lang.IllegalArgumentException;
}
public class java.util.logging.MemoryHandler
  extends java.util.logging.Handler
{
  public void <init>();
  public void <init>(java.util.logging.Handler, int, java.util.logging.Level);
  public boolean isLoggable(java.util.logging.LogRecord);
  public void close()  throws java.lang.SecurityException;
  public void flush();
  public void publish(java.util.logging.LogRecord);
  public void push();
  public void setPushLevel(java.util.logging.Level)  throws java.lang.SecurityException;
  public java.util.logging.Level getPushLevel();
}
public class java.util.logging.SimpleFormatter
  extends java.util.logging.Formatter
{
  public void <init>();
  public java.lang.String format(java.util.logging.LogRecord);
}
public class java.util.logging.SocketHandler
  extends java.util.logging.StreamHandler
{
  public void <init>()  throws java.io.IOException;
  public void <init>(java.lang.String, int)  throws java.io.IOException;
  public void close()  throws java.lang.SecurityException;
  public void publish(java.util.logging.LogRecord);
}
public class java.util.logging.StreamHandler
  extends java.util.logging.Handler
{
  public void <init>();
  public void <init>(java.io.OutputStream, java.util.logging.Formatter);
  public boolean isLoggable(java.util.logging.LogRecord);
  public void close()  throws java.lang.SecurityException;
  public void flush();
  public void publish(java.util.logging.LogRecord);
  public void setEncoding(java.lang.String)  throws java.io.UnsupportedEncodingException, java.lang.SecurityException;
  protected void setOutputStream(java.io.OutputStream)  throws java.lang.SecurityException;
}
public class java.util.logging.XMLFormatter
  extends java.util.logging.Formatter
{
  public void <init>();
  public java.lang.String format(java.util.logging.LogRecord);
  public java.lang.String getHead(java.util.logging.Handler);
  public java.lang.String getTail(java.util.logging.Handler);
}
public abstract class java.util.prefs.AbstractPreferences
  extends java.util.prefs.Preferences
{
  public boolean getBoolean(java.lang.String, boolean);
  public boolean isUserNode();
  public boolean nodeExists(java.lang.String)  throws java.util.prefs.BackingStoreException;
  public double getDouble(java.lang.String, double);
  public float getFloat(java.lang.String, float);
  public int getInt(java.lang.String, int);
  public long getLong(java.lang.String, long);
  public void addNodeChangeListener(java.util.prefs.NodeChangeListener);
  public void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener);
  public void clear()  throws java.util.prefs.BackingStoreException;
  public void exportNode(java.io.OutputStream)  throws java.io.IOException, java.util.prefs.BackingStoreException;
  public void exportSubtree(java.io.OutputStream)  throws java.io.IOException, java.util.prefs.BackingStoreException;
  public void flush()  throws java.util.prefs.BackingStoreException;
  public void put(java.lang.String, java.lang.String);
  public void putBoolean(java.lang.String, boolean);
  public void putByteArray(java.lang.String, byte[]);
  public void putDouble(java.lang.String, double);
  public void putFloat(java.lang.String, float);
  public void putInt(java.lang.String, int);
  public void putLong(java.lang.String, long);
  public void remove(java.lang.String);
  public void removeNode()  throws java.util.prefs.BackingStoreException;
  public void removeNodeChangeListener(java.util.prefs.NodeChangeListener);
  public void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener);
  public void sync()  throws java.util.prefs.BackingStoreException;
  public byte[] getByteArray(java.lang.String, byte[]);
  public java.lang.String absolutePath();
  public java.lang.String get(java.lang.String, java.lang.String);
  public java.lang.String name();
  public java.lang.String toString();
  public java.lang.String[] childrenNames()  throws java.util.prefs.BackingStoreException;
  public java.lang.String[] keys()  throws java.util.prefs.BackingStoreException;
  public java.util.prefs.Preferences node(java.lang.String);
  public java.util.prefs.Preferences parent();
  protected void <init>(java.util.prefs.AbstractPreferences, java.lang.String);
  protected final java.util.prefs.AbstractPreferences[] cachedChildren();
  protected abstract void flushSpi()  throws java.util.prefs.BackingStoreException;
  protected abstract void putSpi(java.lang.String, java.lang.String);
  protected abstract void removeNodeSpi()  throws java.util.prefs.BackingStoreException;
  protected abstract void removeSpi(java.lang.String);
  protected abstract void syncSpi()  throws java.util.prefs.BackingStoreException;
  protected abstract java.lang.String getSpi(java.lang.String);
  protected abstract java.lang.String[] childrenNamesSpi()  throws java.util.prefs.BackingStoreException;
  protected abstract java.lang.String[] keysSpi()  throws java.util.prefs.BackingStoreException;
  protected abstract java.util.prefs.AbstractPreferences childSpi(java.lang.String);
  protected boolean isRemoved();
  protected java.util.prefs.AbstractPreferences getChild(java.lang.String)  throws java.util.prefs.BackingStoreException;
  protected final java.lang.Object lock;
  protected boolean newNode;
}
public class java.util.prefs.BackingStoreException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.Throwable);
}
public class java.util.prefs.InvalidPreferencesFormatException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class java.util.prefs.NodeChangeEvent
  extends java.util.EventObject
{
  public void <init>(java.util.prefs.Preferences, java.util.prefs.Preferences);
  public java.util.prefs.Preferences getChild();
  public java.util.prefs.Preferences getParent();
}
public interface java.util.prefs.NodeChangeListener
  extends java.util.EventListener
{
  public abstract void childAdded(java.util.prefs.NodeChangeEvent);
  public abstract void childRemoved(java.util.prefs.NodeChangeEvent);
}
public class java.util.prefs.PreferenceChangeEvent
  extends java.util.EventObject
{
  public void <init>(java.util.prefs.Preferences, java.lang.String, java.lang.String);
  public java.lang.String getKey();
  public java.lang.String getNewValue();
  public java.util.prefs.Preferences getNode();
}
public interface java.util.prefs.PreferenceChangeListener
  extends java.util.EventListener
{
  public abstract void preferenceChange(java.util.prefs.PreferenceChangeEvent);
}
public abstract class java.util.prefs.Preferences
  extends java.lang.Object
{
  public static void importPreferences(java.io.InputStream)  throws java.io.IOException, java.util.prefs.InvalidPreferencesFormatException;
  public static java.util.prefs.Preferences systemNodeForPackage(java.lang.Class);
  public static java.util.prefs.Preferences systemRoot();
  public static java.util.prefs.Preferences userNodeForPackage(java.lang.Class);
  public static java.util.prefs.Preferences userRoot();
  public abstract boolean getBoolean(java.lang.String, boolean);
  public abstract boolean isUserNode();
  public abstract boolean nodeExists(java.lang.String)  throws java.util.prefs.BackingStoreException;
  public abstract double getDouble(java.lang.String, double);
  public abstract float getFloat(java.lang.String, float);
  public abstract int getInt(java.lang.String, int);
  public abstract long getLong(java.lang.String, long);
  public abstract void addNodeChangeListener(java.util.prefs.NodeChangeListener);
  public abstract void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener);
  public abstract void clear()  throws java.util.prefs.BackingStoreException;
  public abstract void exportNode(java.io.OutputStream)  throws java.io.IOException, java.util.prefs.BackingStoreException;
  public abstract void exportSubtree(java.io.OutputStream)  throws java.io.IOException, java.util.prefs.BackingStoreException;
  public abstract void flush()  throws java.util.prefs.BackingStoreException;
  public abstract void put(java.lang.String, java.lang.String);
  public abstract void putBoolean(java.lang.String, boolean);
  public abstract void putByteArray(java.lang.String, byte[]);
  public abstract void putDouble(java.lang.String, double);
  public abstract void putFloat(java.lang.String, float);
  public abstract void putInt(java.lang.String, int);
  public abstract void putLong(java.lang.String, long);
  public abstract void remove(java.lang.String);
  public abstract void removeNode()  throws java.util.prefs.BackingStoreException;
  public abstract void removeNodeChangeListener(java.util.prefs.NodeChangeListener);
  public abstract void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener);
  public abstract void sync()  throws java.util.prefs.BackingStoreException;
  public abstract byte[] getByteArray(java.lang.String, byte[]);
  public abstract java.lang.String absolutePath();
  public abstract java.lang.String get(java.lang.String, java.lang.String);
  public abstract java.lang.String name();
  public abstract java.lang.String toString();
  public abstract java.lang.String[] childrenNames()  throws java.util.prefs.BackingStoreException;
  public abstract java.lang.String[] keys()  throws java.util.prefs.BackingStoreException;
  public abstract java.util.prefs.Preferences node(java.lang.String);
  public abstract java.util.prefs.Preferences parent();
  protected void <init>();
  public static final int MAX_KEY_LENGTH;
  public static final int MAX_NAME_LENGTH;
  public static final int MAX_VALUE_LENGTH;
}
public interface java.util.prefs.PreferencesFactory
{
  public abstract java.util.prefs.Preferences systemRoot();
  public abstract java.util.prefs.Preferences userRoot();
}
public interface java.util.regex.MatchResult
{
  public abstract int end();
  public abstract int end(int);
  public abstract int groupCount();
  public abstract int start();
  public abstract int start(int);
  public abstract java.lang.String group();
  public abstract java.lang.String group(int);
}
public final class java.util.regex.Matcher
  extends java.lang.Object
  implements java.util.regex.MatchResult
{
  public static java.lang.String quoteReplacement(java.lang.String);
  public boolean find();
  public boolean find(int);
  public boolean hasAnchoringBounds();
  public boolean hasTransparentBounds();
  public boolean hitEnd();
  public boolean lookingAt();
  public boolean matches();
  public boolean requireEnd();
  public int end();
  public int end(int);
  public int groupCount();
  public int regionEnd();
  public int regionStart();
  public int start();
  public int start(int)  throws java.lang.IllegalStateException;
  public java.lang.String group();
  public java.lang.String group(int);
  public java.lang.String replaceAll(java.lang.String);
  public java.lang.String replaceFirst(java.lang.String);
  public java.lang.String toString();
  public java.lang.StringBuffer appendTail(java.lang.StringBuffer);
  public java.util.regex.MatchResult toMatchResult();
  public java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String);
  public java.util.regex.Matcher region(int, int);
  public java.util.regex.Matcher reset();
  public java.util.regex.Matcher reset(java.lang.CharSequence);
  public java.util.regex.Matcher useAnchoringBounds(boolean);
  public java.util.regex.Matcher usePattern(java.util.regex.Pattern);
  public java.util.regex.Matcher useTransparentBounds(boolean);
  public java.util.regex.Pattern pattern();
}
public final class java.util.regex.Pattern
  extends java.lang.Object
  implements java.io.Serializable
{
  public static boolean matches(java.lang.String, java.lang.CharSequence);
  public static java.lang.String quote(java.lang.String);
  public static java.util.regex.Pattern compile(java.lang.String);
  public static java.util.regex.Pattern compile(java.lang.String, int)  throws java.util.regex.PatternSyntaxException;
  public int flags();
  public java.lang.String pattern();
  public java.lang.String toString();
  public java.lang.String[] split(java.lang.CharSequence);
  public java.lang.String[] split(java.lang.CharSequence, int);
  public java.util.function.Predicate asPredicate();
  public java.util.regex.Matcher matcher(java.lang.CharSequence);
  public java.util.stream.Stream splitAsStream(java.lang.CharSequence);
  public static final int CANON_EQ;
  public static final int CASE_INSENSITIVE;
  public static final int COMMENTS;
  public static final int DOTALL;
  public static final int LITERAL;
  public static final int MULTILINE;
  public static final int UNICODE_CASE;
  public static final int UNICODE_CHARACTER_CLASS;
  public static final int UNIX_LINES;
}
public class java.util.regex.PatternSyntaxException
  extends java.lang.IllegalArgumentException
{
  public void <init>(java.lang.String, java.lang.String, int);
  public int getIndex();
  public java.lang.String getDescription();
  public java.lang.String getMessage();
  public java.lang.String getPattern();
}
public interface java.util.stream.BaseStream
  extends java.lang.AutoCloseable
{
  public abstract boolean isParallel();
  public abstract void close();
  public abstract java.util.Iterator iterator();
  public abstract java.util.Spliterator spliterator();
  public abstract java.util.stream.BaseStream onClose(java.lang.Runnable);
  public abstract java.util.stream.BaseStream parallel();
  public abstract java.util.stream.BaseStream sequential();
  public abstract java.util.stream.BaseStream unordered();
}
public interface java.util.stream.Collector
{
  public static java.util.stream.Collector of(java.util.function.Supplier, java.util.function.BiConsumer, java.util.function.BinaryOperator, java.util.function.Function, java.util.stream.Collector$Characteristics[]);
  public static java.util.stream.Collector of(java.util.function.Supplier, java.util.function.BiConsumer, java.util.function.BinaryOperator, java.util.stream.Collector$Characteristics[]);
  public abstract java.util.Set characteristics();
  public abstract java.util.function.BiConsumer accumulator();
  public abstract java.util.function.BinaryOperator combiner();
  public abstract java.util.function.Function finisher();
  public abstract java.util.function.Supplier supplier();
}
public final class java.util.stream.Collector$Characteristics
  extends java.lang.Enum
{
  public static java.util.stream.Collector$Characteristics valueOf(java.lang.String);
  public static java.util.stream.Collector$Characteristics[] values();
  public static final java.util.stream.Collector$Characteristics CONCURRENT;
  public static final java.util.stream.Collector$Characteristics IDENTITY_FINISH;
  public static final java.util.stream.Collector$Characteristics UNORDERED;
}
public final class java.util.stream.Collectors
  extends java.lang.Object
{
  public static java.util.stream.Collector averagingDouble(java.util.function.ToDoubleFunction);
  public static java.util.stream.Collector averagingInt(java.util.function.ToIntFunction);
  public static java.util.stream.Collector averagingLong(java.util.function.ToLongFunction);
  public static java.util.stream.Collector collectingAndThen(java.util.stream.Collector, java.util.function.Function);
  public static java.util.stream.Collector counting();
  public static java.util.stream.Collector groupingBy(java.util.function.Function);
  public static java.util.stream.Collector groupingBy(java.util.function.Function, java.util.function.Supplier, java.util.stream.Collector);
  public static java.util.stream.Collector groupingBy(java.util.function.Function, java.util.stream.Collector);
  public static java.util.stream.Collector groupingByConcurrent(java.util.function.Function);
  public static java.util.stream.Collector groupingByConcurrent(java.util.function.Function, java.util.function.Supplier, java.util.stream.Collector);
  public static java.util.stream.Collector groupingByConcurrent(java.util.function.Function, java.util.stream.Collector);
  public static java.util.stream.Collector joining();
  public static java.util.stream.Collector joining(java.lang.CharSequence);
  public static java.util.stream.Collector joining(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence);
  public static java.util.stream.Collector mapping(java.util.function.Function, java.util.stream.Collector);
  public static java.util.stream.Collector maxBy(java.util.Comparator);
  public static java.util.stream.Collector minBy(java.util.Comparator);
  public static java.util.stream.Collector partitioningBy(java.util.function.Predicate);
  public static java.util.stream.Collector partitioningBy(java.util.function.Predicate, java.util.stream.Collector);
  public static java.util.stream.Collector reducing(java.lang.Object, java.util.function.BinaryOperator);
  public static java.util.stream.Collector reducing(java.lang.Object, java.util.function.Function, java.util.function.BinaryOperator);
  public static java.util.stream.Collector reducing(java.util.function.BinaryOperator);
  public static java.util.stream.Collector summarizingDouble(java.util.function.ToDoubleFunction);
  public static java.util.stream.Collector summarizingInt(java.util.function.ToIntFunction);
  public static java.util.stream.Collector summarizingLong(java.util.function.ToLongFunction);
  public static java.util.stream.Collector summingDouble(java.util.function.ToDoubleFunction);
  public static java.util.stream.Collector summingInt(java.util.function.ToIntFunction);
  public static java.util.stream.Collector summingLong(java.util.function.ToLongFunction);
  public static java.util.stream.Collector toCollection(java.util.function.Supplier);
  public static java.util.stream.Collector toConcurrentMap(java.util.function.Function, java.util.function.Function);
  public static java.util.stream.Collector toConcurrentMap(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator);
  public static java.util.stream.Collector toConcurrentMap(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, java.util.function.Supplier);
  public static java.util.stream.Collector toList();
  public static java.util.stream.Collector toMap(java.util.function.Function, java.util.function.Function);
  public static java.util.stream.Collector toMap(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator);
  public static java.util.stream.Collector toMap(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, java.util.function.Supplier);
  public static java.util.stream.Collector toSet();
}
public interface java.util.stream.DoubleStream
  extends java.util.stream.BaseStream
{
  public static java.util.stream.DoubleStream concat(java.util.stream.DoubleStream, java.util.stream.DoubleStream);
  public static java.util.stream.DoubleStream empty();
  public static java.util.stream.DoubleStream generate(java.util.function.DoubleSupplier);
  public static java.util.stream.DoubleStream iterate(double, java.util.function.DoubleUnaryOperator);
  public static java.util.stream.DoubleStream of(double);
  public static java.util.stream.DoubleStream of(double[]);
  public static java.util.stream.DoubleStream$Builder builder();
  public abstract boolean allMatch(java.util.function.DoublePredicate);
  public abstract boolean anyMatch(java.util.function.DoublePredicate);
  public abstract boolean noneMatch(java.util.function.DoublePredicate);
  public abstract double reduce(double, java.util.function.DoubleBinaryOperator);
  public abstract double sum();
  public abstract long count();
  public abstract void forEach(java.util.function.DoubleConsumer);
  public abstract void forEachOrdered(java.util.function.DoubleConsumer);
  public abstract double[] toArray();
  public abstract java.lang.Object collect(java.util.function.Supplier, java.util.function.ObjDoubleConsumer, java.util.function.BiConsumer);
  public abstract java.util.DoubleSummaryStatistics summaryStatistics();
  public abstract java.util.OptionalDouble average();
  public abstract java.util.OptionalDouble findAny();
  public abstract java.util.OptionalDouble findFirst();
  public abstract java.util.OptionalDouble max();
  public abstract java.util.OptionalDouble min();
  public abstract java.util.OptionalDouble reduce(java.util.function.DoubleBinaryOperator);
  public abstract java.util.PrimitiveIterator$OfDouble iterator();
  public abstract java.util.Spliterator$OfDouble spliterator();
  public abstract java.util.stream.DoubleStream distinct();
  public abstract java.util.stream.DoubleStream filter(java.util.function.DoublePredicate);
  public abstract java.util.stream.DoubleStream flatMap(java.util.function.DoubleFunction);
  public abstract java.util.stream.DoubleStream limit(long);
  public abstract java.util.stream.DoubleStream map(java.util.function.DoubleUnaryOperator);
  public abstract java.util.stream.DoubleStream parallel();
  public abstract java.util.stream.DoubleStream peek(java.util.function.DoubleConsumer);
  public abstract java.util.stream.DoubleStream sequential();
  public abstract java.util.stream.DoubleStream skip(long);
  public abstract java.util.stream.DoubleStream sorted();
  public abstract java.util.stream.IntStream mapToInt(java.util.function.DoubleToIntFunction);
  public abstract java.util.stream.LongStream mapToLong(java.util.function.DoubleToLongFunction);
  public abstract java.util.stream.Stream boxed();
  public abstract java.util.stream.Stream mapToObj(java.util.function.DoubleFunction);
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
  public java.util.stream.BaseStream parallel();
  public java.util.stream.BaseStream sequential();
}
public interface java.util.stream.DoubleStream$Builder
  extends java.util.function.DoubleConsumer
{
  public abstract void accept(double);
  public abstract java.util.stream.DoubleStream build();
  public java.util.stream.DoubleStream$Builder add(double);
}
public interface java.util.stream.IntStream
  extends java.util.stream.BaseStream
{
  public static java.util.stream.IntStream concat(java.util.stream.IntStream, java.util.stream.IntStream);
  public static java.util.stream.IntStream empty();
  public static java.util.stream.IntStream generate(java.util.function.IntSupplier);
  public static java.util.stream.IntStream iterate(int, java.util.function.IntUnaryOperator);
  public static java.util.stream.IntStream of(int);
  public static java.util.stream.IntStream of(int[]);
  public static java.util.stream.IntStream range(int, int);
  public static java.util.stream.IntStream rangeClosed(int, int);
  public static java.util.stream.IntStream$Builder builder();
  public abstract boolean allMatch(java.util.function.IntPredicate);
  public abstract boolean anyMatch(java.util.function.IntPredicate);
  public abstract boolean noneMatch(java.util.function.IntPredicate);
  public abstract int reduce(int, java.util.function.IntBinaryOperator);
  public abstract int sum();
  public abstract long count();
  public abstract void forEach(java.util.function.IntConsumer);
  public abstract void forEachOrdered(java.util.function.IntConsumer);
  public abstract int[] toArray();
  public abstract java.lang.Object collect(java.util.function.Supplier, java.util.function.ObjIntConsumer, java.util.function.BiConsumer);
  public abstract java.util.IntSummaryStatistics summaryStatistics();
  public abstract java.util.OptionalDouble average();
  public abstract java.util.OptionalInt findAny();
  public abstract java.util.OptionalInt findFirst();
  public abstract java.util.OptionalInt max();
  public abstract java.util.OptionalInt min();
  public abstract java.util.OptionalInt reduce(java.util.function.IntBinaryOperator);
  public abstract java.util.PrimitiveIterator$OfInt iterator();
  public abstract java.util.Spliterator$OfInt spliterator();
  public abstract java.util.stream.DoubleStream asDoubleStream();
  public abstract java.util.stream.DoubleStream mapToDouble(java.util.function.IntToDoubleFunction);
  public abstract java.util.stream.IntStream distinct();
  public abstract java.util.stream.IntStream filter(java.util.function.IntPredicate);
  public abstract java.util.stream.IntStream flatMap(java.util.function.IntFunction);
  public abstract java.util.stream.IntStream limit(long);
  public abstract java.util.stream.IntStream map(java.util.function.IntUnaryOperator);
  public abstract java.util.stream.IntStream parallel();
  public abstract java.util.stream.IntStream peek(java.util.function.IntConsumer);
  public abstract java.util.stream.IntStream sequential();
  public abstract java.util.stream.IntStream skip(long);
  public abstract java.util.stream.IntStream sorted();
  public abstract java.util.stream.LongStream asLongStream();
  public abstract java.util.stream.LongStream mapToLong(java.util.function.IntToLongFunction);
  public abstract java.util.stream.Stream boxed();
  public abstract java.util.stream.Stream mapToObj(java.util.function.IntFunction);
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
  public java.util.stream.BaseStream parallel();
  public java.util.stream.BaseStream sequential();
}
public interface java.util.stream.IntStream$Builder
  extends java.util.function.IntConsumer
{
  public abstract void accept(int);
  public abstract java.util.stream.IntStream build();
  public java.util.stream.IntStream$Builder add(int);
}
public interface java.util.stream.LongStream
  extends java.util.stream.BaseStream
{
  public static java.util.stream.LongStream concat(java.util.stream.LongStream, java.util.stream.LongStream);
  public static java.util.stream.LongStream empty();
  public static java.util.stream.LongStream generate(java.util.function.LongSupplier);
  public static java.util.stream.LongStream iterate(long, java.util.function.LongUnaryOperator);
  public static java.util.stream.LongStream of(long);
  public static java.util.stream.LongStream of(long[]);
  public static java.util.stream.LongStream range(long, long);
  public static java.util.stream.LongStream rangeClosed(long, long);
  public static java.util.stream.LongStream$Builder builder();
  public abstract boolean allMatch(java.util.function.LongPredicate);
  public abstract boolean anyMatch(java.util.function.LongPredicate);
  public abstract boolean noneMatch(java.util.function.LongPredicate);
  public abstract long count();
  public abstract long reduce(long, java.util.function.LongBinaryOperator);
  public abstract long sum();
  public abstract void forEach(java.util.function.LongConsumer);
  public abstract void forEachOrdered(java.util.function.LongConsumer);
  public abstract java.lang.Object collect(java.util.function.Supplier, java.util.function.ObjLongConsumer, java.util.function.BiConsumer);
  public abstract java.util.LongSummaryStatistics summaryStatistics();
  public abstract java.util.OptionalDouble average();
  public abstract java.util.OptionalLong findAny();
  public abstract java.util.OptionalLong findFirst();
  public abstract java.util.OptionalLong max();
  public abstract java.util.OptionalLong min();
  public abstract java.util.OptionalLong reduce(java.util.function.LongBinaryOperator);
  public abstract java.util.PrimitiveIterator$OfLong iterator();
  public abstract java.util.Spliterator$OfLong spliterator();
  public abstract java.util.stream.DoubleStream asDoubleStream();
  public abstract java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction);
  public abstract java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction);
  public abstract java.util.stream.LongStream distinct();
  public abstract java.util.stream.LongStream filter(java.util.function.LongPredicate);
  public abstract java.util.stream.LongStream flatMap(java.util.function.LongFunction);
  public abstract java.util.stream.LongStream limit(long);
  public abstract java.util.stream.LongStream map(java.util.function.LongUnaryOperator);
  public abstract java.util.stream.LongStream parallel();
  public abstract java.util.stream.LongStream peek(java.util.function.LongConsumer);
  public abstract java.util.stream.LongStream sequential();
  public abstract java.util.stream.LongStream skip(long);
  public abstract java.util.stream.LongStream sorted();
  public abstract java.util.stream.Stream boxed();
  public abstract java.util.stream.Stream mapToObj(java.util.function.LongFunction);
  public abstract long[] toArray();
  public java.util.Iterator iterator();
  public java.util.Spliterator spliterator();
  public java.util.stream.BaseStream parallel();
  public java.util.stream.BaseStream sequential();
}
public interface java.util.stream.LongStream$Builder
  extends java.util.function.LongConsumer
{
  public abstract void accept(long);
  public abstract java.util.stream.LongStream build();
  public java.util.stream.LongStream$Builder add(long);
}
public interface java.util.stream.Stream
  extends java.util.stream.BaseStream
{
  public static java.util.stream.Stream concat(java.util.stream.Stream, java.util.stream.Stream);
  public static java.util.stream.Stream empty();
  public static java.util.stream.Stream generate(java.util.function.Supplier);
  public static java.util.stream.Stream iterate(java.lang.Object, java.util.function.UnaryOperator);
  public static java.util.stream.Stream of(java.lang.Object);
  public static java.util.stream.Stream of(java.lang.Object[]);
  public static java.util.stream.Stream$Builder builder();
  public abstract boolean allMatch(java.util.function.Predicate);
  public abstract boolean anyMatch(java.util.function.Predicate);
  public abstract boolean noneMatch(java.util.function.Predicate);
  public abstract long count();
  public abstract void forEach(java.util.function.Consumer);
  public abstract void forEachOrdered(java.util.function.Consumer);
  public abstract java.lang.Object collect(java.util.function.Supplier, java.util.function.BiConsumer, java.util.function.BiConsumer);
  public abstract java.lang.Object collect(java.util.stream.Collector);
  public abstract java.lang.Object reduce(java.lang.Object, java.util.function.BiFunction, java.util.function.BinaryOperator);
  public abstract java.lang.Object reduce(java.lang.Object, java.util.function.BinaryOperator);
  public abstract java.lang.Object[] toArray();
  public abstract java.lang.Object[] toArray(java.util.function.IntFunction);
  public abstract java.util.Optional findAny();
  public abstract java.util.Optional findFirst();
  public abstract java.util.Optional max(java.util.Comparator);
  public abstract java.util.Optional min(java.util.Comparator);
  public abstract java.util.Optional reduce(java.util.function.BinaryOperator);
  public abstract java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function);
  public abstract java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction);
  public abstract java.util.stream.IntStream flatMapToInt(java.util.function.Function);
  public abstract java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction);
  public abstract java.util.stream.LongStream flatMapToLong(java.util.function.Function);
  public abstract java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction);
  public abstract java.util.stream.Stream distinct();
  public abstract java.util.stream.Stream filter(java.util.function.Predicate);
  public abstract java.util.stream.Stream flatMap(java.util.function.Function);
  public abstract java.util.stream.Stream limit(long);
  public abstract java.util.stream.Stream map(java.util.function.Function);
  public abstract java.util.stream.Stream peek(java.util.function.Consumer);
  public abstract java.util.stream.Stream skip(long);
  public abstract java.util.stream.Stream sorted();
  public abstract java.util.stream.Stream sorted(java.util.Comparator);
}
public interface java.util.stream.Stream$Builder
  extends java.util.function.Consumer
{
  public abstract void accept(java.lang.Object);
  public abstract java.util.stream.Stream build();
  public java.util.stream.Stream$Builder add(java.lang.Object);
}
public final class java.util.stream.StreamSupport
  extends java.lang.Object
{
  public static java.util.stream.DoubleStream doubleStream(java.util.Spliterator$OfDouble, boolean);
  public static java.util.stream.DoubleStream doubleStream(java.util.function.Supplier, int, boolean);
  public static java.util.stream.IntStream intStream(java.util.Spliterator$OfInt, boolean);
  public static java.util.stream.IntStream intStream(java.util.function.Supplier, int, boolean);
  public static java.util.stream.LongStream longStream(java.util.Spliterator$OfLong, boolean);
  public static java.util.stream.LongStream longStream(java.util.function.Supplier, int, boolean);
  public static java.util.stream.Stream stream(java.util.Spliterator, boolean);
  public static java.util.stream.Stream stream(java.util.function.Supplier, int, boolean);
}
public class java.util.zip.Adler32
  extends java.lang.Object
  implements java.util.zip.Checksum
{
  public void <init>();
  public long getValue();
  public void reset();
  public void update(byte[]);
  public void update(byte[], int, int);
  public void update(int);
}
public class java.util.zip.CRC32
  extends java.lang.Object
  implements java.util.zip.Checksum
{
  public void <init>();
  public long getValue();
  public void reset();
  public void update(byte[]);
  public void update(byte[], int, int);
  public void update(int);
}
public class java.util.zip.CheckedInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream, java.util.zip.Checksum);
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public java.util.zip.Checksum getChecksum();
}
public class java.util.zip.CheckedOutputStream
  extends java.io.FilterOutputStream
{
  public void <init>(java.io.OutputStream, java.util.zip.Checksum);
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  public java.util.zip.Checksum getChecksum();
}
public interface java.util.zip.Checksum
{
  public abstract long getValue();
  public abstract void reset();
  public abstract void update(byte[], int, int);
  public abstract void update(int);
}
public class java.util.zip.DataFormatException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.util.zip.Deflater
  extends java.lang.Object
{
  public void <init>();
  public void <init>(int);
  public void <init>(int, boolean);
  public boolean finished();
  public boolean needsInput();
  public int deflate(byte[]);
  public int deflate(byte[], int, int);
  public int deflate(byte[], int, int, int);
  public int getAdler();
  public int getTotalIn();
  public int getTotalOut();
  public long getBytesRead();
  public long getBytesWritten();
  public void end();
  public void finish();
  public void reset();
  public void setDictionary(byte[]);
  public void setDictionary(byte[], int, int);
  public void setInput(byte[]);
  public void setInput(byte[], int, int);
  public void setLevel(int);
  public void setStrategy(int);
  protected void finalize();
  public static final int BEST_COMPRESSION;
  public static final int BEST_SPEED;
  public static final int DEFAULT_COMPRESSION;
  public static final int DEFAULT_STRATEGY;
  public static final int DEFLATED;
  public static final int FILTERED;
  public static final int FULL_FLUSH;
  public static final int HUFFMAN_ONLY;
  public static final int NO_COMPRESSION;
  public static final int NO_FLUSH;
  public static final int SYNC_FLUSH;
}
public class java.util.zip.DeflaterInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, java.util.zip.Deflater);
  public void <init>(java.io.InputStream, java.util.zip.Deflater, int);
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
  protected final byte[] buf;
  protected final java.util.zip.Deflater def;
}
public class java.util.zip.DeflaterOutputStream
  extends java.io.FilterOutputStream
{
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, boolean);
  public void <init>(java.io.OutputStream, java.util.zip.Deflater);
  public void <init>(java.io.OutputStream, java.util.zip.Deflater, boolean);
  public void <init>(java.io.OutputStream, java.util.zip.Deflater, int);
  public void <init>(java.io.OutputStream, java.util.zip.Deflater, int, boolean);
  public void close()  throws java.io.IOException;
  public void finish()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  protected void deflate()  throws java.io.IOException;
  protected byte[] buf;
  protected java.util.zip.Deflater def;
}
public class java.util.zip.GZIPInputStream
  extends java.util.zip.InflaterInputStream
{
  public void <init>(java.io.InputStream)  throws java.io.IOException;
  public void <init>(java.io.InputStream, int)  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public static final int GZIP_MAGIC;
  protected boolean eos;
  protected java.util.zip.CRC32 crc;
}
public class java.util.zip.GZIPOutputStream
  extends java.util.zip.DeflaterOutputStream
{
  public void <init>(java.io.OutputStream)  throws java.io.IOException;
  public void <init>(java.io.OutputStream, boolean)  throws java.io.IOException;
  public void <init>(java.io.OutputStream, int)  throws java.io.IOException;
  public void <init>(java.io.OutputStream, int, boolean)  throws java.io.IOException;
  public void finish()  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  protected java.util.zip.CRC32 crc;
}
public class java.util.zip.Inflater
  extends java.lang.Object
{
  public void <init>();
  public void <init>(boolean);
  public boolean finished();
  public boolean needsDictionary();
  public boolean needsInput();
  public int getAdler();
  public int getRemaining();
  public int getTotalIn();
  public int getTotalOut();
  public int inflate(byte[])  throws java.util.zip.DataFormatException;
  public int inflate(byte[], int, int)  throws java.util.zip.DataFormatException;
  public long getBytesRead();
  public long getBytesWritten();
  public void end();
  public void reset();
  public void setDictionary(byte[]);
  public void setDictionary(byte[], int, int);
  public void setInput(byte[]);
  public void setInput(byte[], int, int);
  protected void finalize();
}
public class java.util.zip.InflaterInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, java.util.zip.Inflater);
  public void <init>(java.io.InputStream, java.util.zip.Inflater, int);
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void mark(int);
  public void reset()  throws java.io.IOException;
  protected void fill()  throws java.io.IOException;
  protected boolean closed;
  protected int len;
  protected byte[] buf;
  protected java.util.zip.Inflater inf;
}
public class java.util.zip.InflaterOutputStream
  extends java.io.FilterOutputStream
{
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, java.util.zip.Inflater);
  public void <init>(java.io.OutputStream, java.util.zip.Inflater, int);
  public void close()  throws java.io.IOException;
  public void finish()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  protected final byte[] buf;
  protected final java.util.zip.Inflater inf;
}
public class java.util.zip.ZipEntry
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>(java.lang.String);
  public void <init>(java.util.zip.ZipEntry);
  public boolean isDirectory();
  public int getMethod();
  public int hashCode();
  public long getCompressedSize();
  public long getCrc();
  public long getSize();
  public long getTime();
  public void setComment(java.lang.String);
  public void setCompressedSize(long);
  public void setCrc(long);
  public void setExtra(byte[]);
  public void setMethod(int);
  public void setSize(long);
  public void setTime(long);
  public byte[] getExtra();
  public java.lang.Object clone();
  public java.lang.String getComment();
  public java.lang.String getName();
  public java.lang.String toString();
  public static final int CENATT;
  public static final int CENATX;
  public static final int CENCOM;
  public static final int CENCRC;
  public static final int CENDSK;
  public static final int CENEXT;
  public static final int CENFLG;
  public static final int CENHDR;
  public static final int CENHOW;
  public static final int CENLEN;
  public static final int CENNAM;
  public static final int CENOFF;
  public static final int CENSIZ;
  public static final int CENTIM;
  public static final int CENVEM;
  public static final int CENVER;
  public static final int DEFLATED;
  public static final int ENDCOM;
  public static final int ENDHDR;
  public static final int ENDOFF;
  public static final int ENDSIZ;
  public static final int ENDSUB;
  public static final int ENDTOT;
  public static final int EXTCRC;
  public static final int EXTHDR;
  public static final int EXTLEN;
  public static final int EXTSIZ;
  public static final int LOCCRC;
  public static final int LOCEXT;
  public static final int LOCFLG;
  public static final int LOCHDR;
  public static final int LOCHOW;
  public static final int LOCLEN;
  public static final int LOCNAM;
  public static final int LOCSIZ;
  public static final int LOCTIM;
  public static final int LOCVER;
  public static final int STORED;
  public static final long CENSIG;
  public static final long ENDSIG;
  public static final long EXTSIG;
  public static final long LOCSIG;
}
public class java.util.zip.ZipError
  extends java.lang.InternalError
{
  public void <init>(java.lang.String);
}
public class java.util.zip.ZipException
  extends java.io.IOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class java.util.zip.ZipFile
  extends java.lang.Object
  implements java.io.Closeable
{
  public void <init>(java.io.File)  throws java.io.IOException, java.util.zip.ZipException;
  public void <init>(java.io.File, int)  throws java.io.IOException;
  public void <init>(java.io.File, int, java.nio.charset.Charset)  throws java.io.IOException;
  public void <init>(java.io.File, java.nio.charset.Charset)  throws java.io.IOException;
  public void <init>(java.lang.String)  throws java.io.IOException;
  public void <init>(java.lang.String, java.nio.charset.Charset)  throws java.io.IOException;
  public int size();
  public void close()  throws java.io.IOException;
  public java.io.InputStream getInputStream(java.util.zip.ZipEntry)  throws java.io.IOException;
  public java.lang.String getComment();
  public java.lang.String getName();
  public java.util.Enumeration entries();
  public java.util.zip.ZipEntry getEntry(java.lang.String);
  protected void finalize()  throws java.io.IOException;
  public static final int CENATT;
  public static final int CENATX;
  public static final int CENCOM;
  public static final int CENCRC;
  public static final int CENDSK;
  public static final int CENEXT;
  public static final int CENFLG;
  public static final int CENHDR;
  public static final int CENHOW;
  public static final int CENLEN;
  public static final int CENNAM;
  public static final int CENOFF;
  public static final int CENSIZ;
  public static final int CENTIM;
  public static final int CENVEM;
  public static final int CENVER;
  public static final int ENDCOM;
  public static final int ENDHDR;
  public static final int ENDOFF;
  public static final int ENDSIZ;
  public static final int ENDSUB;
  public static final int ENDTOT;
  public static final int EXTCRC;
  public static final int EXTHDR;
  public static final int EXTLEN;
  public static final int EXTSIZ;
  public static final int LOCCRC;
  public static final int LOCEXT;
  public static final int LOCFLG;
  public static final int LOCHDR;
  public static final int LOCHOW;
  public static final int LOCLEN;
  public static final int LOCNAM;
  public static final int LOCSIZ;
  public static final int LOCTIM;
  public static final int LOCVER;
  public static final int OPEN_DELETE;
  public static final int OPEN_READ;
  public static final long CENSIG;
  public static final long ENDSIG;
  public static final long EXTSIG;
  public static final long LOCSIG;
}
public class java.util.zip.ZipInputStream
  extends java.util.zip.InflaterInputStream
{
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, java.nio.charset.Charset);
  public int available()  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  public void closeEntry()  throws java.io.IOException;
  public java.util.zip.ZipEntry getNextEntry()  throws java.io.IOException;
  protected java.util.zip.ZipEntry createZipEntry(java.lang.String);
  public static final int CENATT;
  public static final int CENATX;
  public static final int CENCOM;
  public static final int CENCRC;
  public static final int CENDSK;
  public static final int CENEXT;
  public static final int CENFLG;
  public static final int CENHDR;
  public static final int CENHOW;
  public static final int CENLEN;
  public static final int CENNAM;
  public static final int CENOFF;
  public static final int CENSIZ;
  public static final int CENTIM;
  public static final int CENVEM;
  public static final int CENVER;
  public static final int ENDCOM;
  public static final int ENDHDR;
  public static final int ENDOFF;
  public static final int ENDSIZ;
  public static final int ENDSUB;
  public static final int ENDTOT;
  public static final int EXTCRC;
  public static final int EXTHDR;
  public static final int EXTLEN;
  public static final int EXTSIZ;
  public static final int LOCCRC;
  public static final int LOCEXT;
  public static final int LOCFLG;
  public static final int LOCHDR;
  public static final int LOCHOW;
  public static final int LOCLEN;
  public static final int LOCNAM;
  public static final int LOCSIZ;
  public static final int LOCTIM;
  public static final int LOCVER;
  public static final long CENSIG;
  public static final long ENDSIG;
  public static final long EXTSIG;
  public static final long LOCSIG;
}
public class java.util.zip.ZipOutputStream
  extends java.util.zip.DeflaterOutputStream
{
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.OutputStream, java.nio.charset.Charset);
  public void close()  throws java.io.IOException;
  public void closeEntry()  throws java.io.IOException;
  public void finish()  throws java.io.IOException;
  public void putNextEntry(java.util.zip.ZipEntry)  throws java.io.IOException;
  public void setComment(java.lang.String);
  public void setLevel(int);
  public void setMethod(int);
  public void write(byte[], int, int)  throws java.io.IOException;
  public static final int CENATT;
  public static final int CENATX;
  public static final int CENCOM;
  public static final int CENCRC;
  public static final int CENDSK;
  public static final int CENEXT;
  public static final int CENFLG;
  public static final int CENHDR;
  public static final int CENHOW;
  public static final int CENLEN;
  public static final int CENNAM;
  public static final int CENOFF;
  public static final int CENSIZ;
  public static final int CENTIM;
  public static final int CENVEM;
  public static final int CENVER;
  public static final int DEFLATED;
  public static final int ENDCOM;
  public static final int ENDHDR;
  public static final int ENDOFF;
  public static final int ENDSIZ;
  public static final int ENDSUB;
  public static final int ENDTOT;
  public static final int EXTCRC;
  public static final int EXTHDR;
  public static final int EXTLEN;
  public static final int EXTSIZ;
  public static final int LOCCRC;
  public static final int LOCEXT;
  public static final int LOCFLG;
  public static final int LOCHDR;
  public static final int LOCHOW;
  public static final int LOCLEN;
  public static final int LOCNAM;
  public static final int LOCSIZ;
  public static final int LOCTIM;
  public static final int LOCVER;
  public static final int STORED;
  public static final long CENSIG;
  public static final long ENDSIG;
  public static final long EXTSIG;
  public static final long LOCSIG;
}
public class javax.crypto.AEADBadTagException
  extends javax.crypto.BadPaddingException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.crypto.BadPaddingException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.crypto.Cipher
  extends java.lang.Object
{
  public static final int getMaxAllowedKeyLength(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.crypto.Cipher getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException;
  public static final javax.crypto.Cipher getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException;
  public static final javax.crypto.Cipher getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException;
  public final int doFinal(byte[], int)  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException;
  public final int doFinal(byte[], int, int, byte[])  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException;
  public final int doFinal(byte[], int, int, byte[], int)  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException;
  public final int doFinal(java.nio.ByteBuffer, java.nio.ByteBuffer)  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException;
  public final int getBlockSize();
  public final int getOutputSize(int);
  public final int update(byte[], int, int, byte[])  throws javax.crypto.ShortBufferException;
  public final int update(byte[], int, int, byte[], int)  throws javax.crypto.ShortBufferException;
  public final int update(java.nio.ByteBuffer, java.nio.ByteBuffer)  throws javax.crypto.ShortBufferException;
  public final void init(int, java.security.Key)  throws java.security.InvalidKeyException;
  public final void init(int, java.security.Key, java.security.AlgorithmParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  public final void init(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  public final void init(int, java.security.Key, java.security.SecureRandom)  throws java.security.InvalidKeyException;
  public final void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  public final void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  public final void init(int, java.security.cert.Certificate)  throws java.security.InvalidKeyException;
  public final void init(int, java.security.cert.Certificate, java.security.SecureRandom)  throws java.security.InvalidKeyException;
  public final void updateAAD(byte[]);
  public final void updateAAD(byte[], int, int);
  public final void updateAAD(java.nio.ByteBuffer);
  public final byte[] doFinal()  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException;
  public final byte[] doFinal(byte[])  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException;
  public final byte[] doFinal(byte[], int, int)  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException;
  public final byte[] getIV();
  public final byte[] update(byte[]);
  public final byte[] update(byte[], int, int);
  public final byte[] wrap(java.security.Key)  throws java.security.InvalidKeyException, javax.crypto.IllegalBlockSizeException;
  public final java.lang.String getAlgorithm();
  public final java.security.AlgorithmParameters getParameters();
  public final java.security.Key unwrap(byte[], java.lang.String, int)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
  public final java.security.Provider getProvider();
  public final javax.crypto.ExemptionMechanism getExemptionMechanism();
  protected void <init>(javax.crypto.CipherSpi, java.security.Provider, java.lang.String);
  public static final int DECRYPT_MODE;
  public static final int ENCRYPT_MODE;
  public static final int PRIVATE_KEY;
  public static final int PUBLIC_KEY;
  public static final int SECRET_KEY;
  public static final int UNWRAP_MODE;
  public static final int WRAP_MODE;
}
public class javax.crypto.CipherInputStream
  extends java.io.FilterInputStream
{
  public void <init>(java.io.InputStream, javax.crypto.Cipher);
  public boolean markSupported();
  public int available()  throws java.io.IOException;
  public int read()  throws java.io.IOException;
  public int read(byte[])  throws java.io.IOException;
  public int read(byte[], int, int)  throws java.io.IOException;
  public long skip(long)  throws java.io.IOException;
  public void close()  throws java.io.IOException;
  protected void <init>(java.io.InputStream);
}
public class javax.crypto.CipherOutputStream
  extends java.io.FilterOutputStream
{
  public void <init>(java.io.OutputStream, javax.crypto.Cipher);
  public void close()  throws java.io.IOException;
  public void flush()  throws java.io.IOException;
  public void write(byte[])  throws java.io.IOException;
  public void write(byte[], int, int)  throws java.io.IOException;
  public void write(int)  throws java.io.IOException;
  protected void <init>(java.io.OutputStream);
}
public abstract class javax.crypto.CipherSpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract int engineDoFinal(byte[], int, int, byte[], int)  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException;
  protected abstract int engineGetBlockSize();
  protected abstract int engineGetOutputSize(int);
  protected abstract int engineUpdate(byte[], int, int, byte[], int)  throws javax.crypto.ShortBufferException;
  protected abstract void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  protected abstract void engineInit(int, java.security.Key, java.security.SecureRandom)  throws java.security.InvalidKeyException;
  protected abstract void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  protected abstract void engineSetMode(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  protected abstract void engineSetPadding(java.lang.String)  throws javax.crypto.NoSuchPaddingException;
  protected abstract byte[] engineDoFinal(byte[], int, int)  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException;
  protected abstract byte[] engineGetIV();
  protected abstract byte[] engineUpdate(byte[], int, int);
  protected abstract java.security.AlgorithmParameters engineGetParameters();
  protected int engineDoFinal(java.nio.ByteBuffer, java.nio.ByteBuffer)  throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException;
  protected int engineGetKeySize(java.security.Key)  throws java.security.InvalidKeyException;
  protected int engineUpdate(java.nio.ByteBuffer, java.nio.ByteBuffer)  throws javax.crypto.ShortBufferException;
  protected void engineUpdateAAD(byte[], int, int);
  protected void engineUpdateAAD(java.nio.ByteBuffer);
  protected byte[] engineWrap(java.security.Key)  throws java.security.InvalidKeyException, javax.crypto.IllegalBlockSizeException;
  protected java.security.Key engineUnwrap(byte[], java.lang.String, int)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
}
public class javax.crypto.EncryptedPrivateKeyInfo
  extends java.lang.Object
{
  public void <init>(byte[])  throws java.io.IOException;
  public void <init>(java.lang.String, byte[])  throws java.security.NoSuchAlgorithmException;
  public void <init>(java.security.AlgorithmParameters, byte[])  throws java.security.NoSuchAlgorithmException;
  public byte[] getEncoded()  throws java.io.IOException;
  public byte[] getEncryptedData();
  public java.lang.String getAlgName();
  public java.security.AlgorithmParameters getAlgParameters();
  public java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
  public java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key, java.lang.String)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key, java.security.Provider)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
  public java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher)  throws java.security.spec.InvalidKeySpecException;
}
public class javax.crypto.ExemptionMechanism
  extends java.lang.Object
{
  public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final boolean isCryptoAllowed(java.security.Key)  throws javax.crypto.ExemptionMechanismException;
  public final int genExemptionBlob(byte[])  throws java.lang.IllegalStateException, javax.crypto.ExemptionMechanismException, javax.crypto.ShortBufferException;
  public final int genExemptionBlob(byte[], int)  throws java.lang.IllegalStateException, javax.crypto.ExemptionMechanismException, javax.crypto.ShortBufferException;
  public final int getOutputSize(int)  throws java.lang.IllegalStateException;
  public final void init(java.security.Key)  throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException;
  public final void init(java.security.Key, java.security.AlgorithmParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException;
  public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException;
  public final byte[] genExemptionBlob()  throws java.lang.IllegalStateException, javax.crypto.ExemptionMechanismException;
  public final java.lang.String getName();
  public final java.security.Provider getProvider();
  protected void <init>(javax.crypto.ExemptionMechanismSpi, java.security.Provider, java.lang.String);
  protected void finalize();
}
public class javax.crypto.ExemptionMechanismException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class javax.crypto.ExemptionMechanismSpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract int engineGenExemptionBlob(byte[], int)  throws javax.crypto.ExemptionMechanismException, javax.crypto.ShortBufferException;
  protected abstract int engineGetOutputSize(int);
  protected abstract void engineInit(java.security.Key)  throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException;
  protected abstract void engineInit(java.security.Key, java.security.AlgorithmParameters)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException;
  protected abstract void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException;
  protected abstract byte[] engineGenExemptionBlob()  throws javax.crypto.ExemptionMechanismException;
}
public class javax.crypto.IllegalBlockSizeException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.crypto.KeyAgreement
  extends java.lang.Object
{
  public static final javax.crypto.KeyAgreement getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.crypto.KeyAgreement getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static final javax.crypto.KeyAgreement getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final int generateSecret(byte[], int)  throws java.lang.IllegalStateException, javax.crypto.ShortBufferException;
  public final void init(java.security.Key)  throws java.security.InvalidKeyException;
  public final void init(java.security.Key, java.security.SecureRandom)  throws java.security.InvalidKeyException;
  public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  public final byte[] generateSecret()  throws java.lang.IllegalStateException;
  public final java.lang.String getAlgorithm();
  public final java.security.Key doPhase(java.security.Key, boolean)  throws java.lang.IllegalStateException, java.security.InvalidKeyException;
  public final java.security.Provider getProvider();
  public final javax.crypto.SecretKey generateSecret(java.lang.String)  throws java.lang.IllegalStateException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
  protected void <init>(javax.crypto.KeyAgreementSpi, java.security.Provider, java.lang.String);
}
public abstract class javax.crypto.KeyAgreementSpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract int engineGenerateSecret(byte[], int)  throws java.lang.IllegalStateException, javax.crypto.ShortBufferException;
  protected abstract void engineInit(java.security.Key, java.security.SecureRandom)  throws java.security.InvalidKeyException;
  protected abstract void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  protected abstract byte[] engineGenerateSecret()  throws java.lang.IllegalStateException;
  protected abstract java.security.Key engineDoPhase(java.security.Key, boolean)  throws java.lang.IllegalStateException, java.security.InvalidKeyException;
  protected abstract javax.crypto.SecretKey engineGenerateSecret(java.lang.String)  throws java.lang.IllegalStateException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
}
public class javax.crypto.KeyGenerator
  extends java.lang.Object
{
  public static final javax.crypto.KeyGenerator getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.crypto.KeyGenerator getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static final javax.crypto.KeyGenerator getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final void init(int);
  public final void init(int, java.security.SecureRandom);
  public final void init(java.security.SecureRandom);
  public final void init(java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException;
  public final void init(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException;
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final javax.crypto.SecretKey generateKey();
  protected void <init>(javax.crypto.KeyGeneratorSpi, java.security.Provider, java.lang.String);
}
public abstract class javax.crypto.KeyGeneratorSpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract void engineInit(int, java.security.SecureRandom);
  protected abstract void engineInit(java.security.SecureRandom);
  protected abstract void engineInit(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom)  throws java.security.InvalidAlgorithmParameterException;
  protected abstract javax.crypto.SecretKey engineGenerateKey();
}
public class javax.crypto.Mac
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public static final javax.crypto.Mac getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.crypto.Mac getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static final javax.crypto.Mac getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final int getMacLength();
  public final void doFinal(byte[], int)  throws java.lang.IllegalStateException, javax.crypto.ShortBufferException;
  public final void init(java.security.Key)  throws java.security.InvalidKeyException;
  public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  public final void reset();
  public final void update(byte)  throws java.lang.IllegalStateException;
  public final void update(byte[])  throws java.lang.IllegalStateException;
  public final void update(byte[], int, int)  throws java.lang.IllegalStateException;
  public final void update(java.nio.ByteBuffer);
  public final byte[] doFinal()  throws java.lang.IllegalStateException;
  public final byte[] doFinal(byte[])  throws java.lang.IllegalStateException;
  public final java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  protected void <init>(javax.crypto.MacSpi, java.security.Provider, java.lang.String);
}
public abstract class javax.crypto.MacSpi
  extends java.lang.Object
{
  public void <init>();
  public java.lang.Object clone()  throws java.lang.CloneNotSupportedException;
  protected abstract int engineGetMacLength();
  protected abstract void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec)  throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException;
  protected abstract void engineReset();
  protected abstract void engineUpdate(byte);
  protected abstract void engineUpdate(byte[], int, int);
  protected abstract byte[] engineDoFinal();
  protected void engineUpdate(java.nio.ByteBuffer);
}
public class javax.crypto.NoSuchPaddingException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.crypto.NullCipher
  extends javax.crypto.Cipher
{
  public void <init>();
}
public class javax.crypto.SealedObject
  extends java.lang.Object
  implements java.io.Serializable
{
  public void <init>(java.io.Serializable, javax.crypto.Cipher)  throws java.io.IOException, javax.crypto.IllegalBlockSizeException;
  public final java.lang.Object getObject(java.security.Key)  throws java.io.IOException, java.lang.ClassNotFoundException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException;
  public final java.lang.Object getObject(java.security.Key, java.lang.String)  throws java.io.IOException, java.lang.ClassNotFoundException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public final java.lang.Object getObject(javax.crypto.Cipher)  throws java.io.IOException, java.lang.ClassNotFoundException, javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException;
  public final java.lang.String getAlgorithm();
  protected void <init>(javax.crypto.SealedObject);
  protected byte[] encodedParams;
}
public interface javax.crypto.SecretKey
  extends java.security.Key
{
  public static final long serialVersionUID;
}
public class javax.crypto.SecretKeyFactory
  extends java.lang.Object
{
  public static final javax.crypto.SecretKeyFactory getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.crypto.SecretKeyFactory getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static final javax.crypto.SecretKeyFactory getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey, java.lang.Class)  throws java.security.spec.InvalidKeySpecException;
  public final javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)  throws java.security.spec.InvalidKeySpecException;
  public final javax.crypto.SecretKey translateKey(javax.crypto.SecretKey)  throws java.security.InvalidKeyException;
  protected void <init>(javax.crypto.SecretKeyFactorySpi, java.security.Provider, java.lang.String);
}
public abstract class javax.crypto.SecretKeyFactorySpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey, java.lang.Class)  throws java.security.spec.InvalidKeySpecException;
  protected abstract javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)  throws java.security.spec.InvalidKeySpecException;
  protected abstract javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)  throws java.security.InvalidKeyException;
}
public class javax.crypto.ShortBufferException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface javax.crypto.interfaces.DHKey
{
  public abstract javax.crypto.spec.DHParameterSpec getParams();
}
public interface javax.crypto.interfaces.DHPrivateKey
  extends javax.crypto.interfaces.DHKey, java.security.PrivateKey
{
  public abstract java.math.BigInteger getX();
  public static final long serialVersionUID;
}
public interface javax.crypto.interfaces.DHPublicKey
  extends javax.crypto.interfaces.DHKey, java.security.PublicKey
{
  public abstract java.math.BigInteger getY();
  public static final long serialVersionUID;
}
public interface javax.crypto.interfaces.PBEKey
  extends javax.crypto.SecretKey
{
  public abstract int getIterationCount();
  public abstract byte[] getSalt();
  public abstract char[] getPassword();
  public static final long serialVersionUID;
}
public class javax.crypto.spec.DESKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public static boolean isParityAdjusted(byte[], int)  throws java.security.InvalidKeyException;
  public static boolean isWeak(byte[], int)  throws java.security.InvalidKeyException;
  public void <init>(byte[])  throws java.security.InvalidKeyException;
  public void <init>(byte[], int)  throws java.security.InvalidKeyException;
  public byte[] getKey();
  public static final int DES_KEY_LEN;
}
public class javax.crypto.spec.DESedeKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public static boolean isParityAdjusted(byte[], int)  throws java.security.InvalidKeyException;
  public void <init>(byte[])  throws java.security.InvalidKeyException;
  public void <init>(byte[], int)  throws java.security.InvalidKeyException;
  public byte[] getKey();
  public static final int DES_EDE_KEY_LEN;
}
public class javax.crypto.spec.DHGenParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(int, int);
  public int getExponentSize();
  public int getPrimeSize();
}
public class javax.crypto.spec.DHParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger);
  public void <init>(java.math.BigInteger, java.math.BigInteger, int);
  public int getL();
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
}
public class javax.crypto.spec.DHPrivateKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
  public java.math.BigInteger getX();
}
public class javax.crypto.spec.DHPublicKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public java.math.BigInteger getG();
  public java.math.BigInteger getP();
  public java.math.BigInteger getY();
}
public class javax.crypto.spec.GCMParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(int, byte[]);
  public void <init>(int, byte[], int, int);
  public int getTLen();
  public byte[] getIV();
}
public class javax.crypto.spec.IvParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(byte[]);
  public void <init>(byte[], int, int);
  public byte[] getIV();
}
public class javax.crypto.spec.OAEPParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(java.lang.String, java.lang.String, java.security.spec.AlgorithmParameterSpec, javax.crypto.spec.PSource);
  public java.lang.String getDigestAlgorithm();
  public java.lang.String getMGFAlgorithm();
  public java.security.spec.AlgorithmParameterSpec getMGFParameters();
  public javax.crypto.spec.PSource getPSource();
  public static final javax.crypto.spec.OAEPParameterSpec DEFAULT;
}
public class javax.crypto.spec.PBEKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec
{
  public void <init>(char[]);
  public void <init>(char[], byte[], int);
  public void <init>(char[], byte[], int, int);
  public final int getIterationCount();
  public final int getKeyLength();
  public final void clearPassword();
  public final byte[] getSalt();
  public final char[] getPassword();
}
public class javax.crypto.spec.PBEParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(byte[], int);
  public int getIterationCount();
  public byte[] getSalt();
}
public class javax.crypto.spec.PSource
  extends java.lang.Object
{
  public java.lang.String getAlgorithm();
  protected void <init>(java.lang.String);
}
public final class javax.crypto.spec.PSource$PSpecified
  extends javax.crypto.spec.PSource
{
  public void <init>(byte[]);
  public byte[] getValue();
  public static final javax.crypto.spec.PSource$PSpecified DEFAULT;
}
public class javax.crypto.spec.RC2ParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(int);
  public void <init>(int, byte[]);
  public void <init>(int, byte[], int);
  public boolean equals(java.lang.Object);
  public int getEffectiveKeyBits();
  public int hashCode();
  public byte[] getIV();
}
public class javax.crypto.spec.RC5ParameterSpec
  extends java.lang.Object
  implements java.security.spec.AlgorithmParameterSpec
{
  public void <init>(int, int, int);
  public void <init>(int, int, int, byte[]);
  public void <init>(int, int, int, byte[], int);
  public boolean equals(java.lang.Object);
  public int getRounds();
  public int getVersion();
  public int getWordSize();
  public int hashCode();
  public byte[] getIV();
}
public class javax.crypto.spec.SecretKeySpec
  extends java.lang.Object
  implements java.security.spec.KeySpec, javax.crypto.SecretKey
{
  public void <init>(byte[], int, int, java.lang.String);
  public void <init>(byte[], java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public byte[] getEncoded();
  public java.lang.String getAlgorithm();
  public java.lang.String getFormat();
}
public interface javax.microedition.khronos.egl.EGL
{
}
public interface javax.microedition.khronos.egl.EGL10
  extends javax.microedition.khronos.egl.EGL
{
  public abstract boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay, int[], javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public abstract boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, java.lang.Object);
  public abstract boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext);
  public abstract boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public abstract boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int, int[]);
  public abstract boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[], int, int[]);
  public abstract boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay, int[]);
  public abstract boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLSurface, javax.microedition.khronos.egl.EGLContext);
  public abstract boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLContext, int, int[]);
  public abstract boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface, int, int[]);
  public abstract boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLSurface);
  public abstract boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay);
  public abstract boolean eglWaitGL();
  public abstract boolean eglWaitNative(int, java.lang.Object);
  public abstract int eglGetError();
  public abstract java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay, int);
  public abstract javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, javax.microedition.khronos.egl.EGLContext, int[]);
  public abstract javax.microedition.khronos.egl.EGLContext eglGetCurrentContext();
  public abstract javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay();
  public abstract javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object);
  public abstract javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, int[]);
  public abstract javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public abstract javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig, java.lang.Object, int[]);
  public abstract javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int);
  public static final int EGL_ALPHA_FORMAT;
  public static final int EGL_ALPHA_MASK_SIZE;
  public static final int EGL_ALPHA_SIZE;
  public static final int EGL_BAD_ACCESS;
  public static final int EGL_BAD_ALLOC;
  public static final int EGL_BAD_ATTRIBUTE;
  public static final int EGL_BAD_CONFIG;
  public static final int EGL_BAD_CONTEXT;
  public static final int EGL_BAD_CURRENT_SURFACE;
  public static final int EGL_BAD_DISPLAY;
  public static final int EGL_BAD_MATCH;
  public static final int EGL_BAD_NATIVE_PIXMAP;
  public static final int EGL_BAD_NATIVE_WINDOW;
  public static final int EGL_BAD_PARAMETER;
  public static final int EGL_BAD_SURFACE;
  public static final int EGL_BLUE_SIZE;
  public static final int EGL_BUFFER_SIZE;
  public static final int EGL_COLORSPACE;
  public static final int EGL_COLOR_BUFFER_TYPE;
  public static final int EGL_CONFIG_CAVEAT;
  public static final int EGL_CONFIG_ID;
  public static final int EGL_CORE_NATIVE_ENGINE;
  public static final int EGL_DEPTH_SIZE;
  public static final int EGL_DONT_CARE;
  public static final int EGL_DRAW;
  public static final int EGL_EXTENSIONS;
  public static final int EGL_GREEN_SIZE;
  public static final int EGL_HEIGHT;
  public static final int EGL_HORIZONTAL_RESOLUTION;
  public static final int EGL_LARGEST_PBUFFER;
  public static final int EGL_LEVEL;
  public static final int EGL_LUMINANCE_BUFFER;
  public static final int EGL_LUMINANCE_SIZE;
  public static final int EGL_MAX_PBUFFER_HEIGHT;
  public static final int EGL_MAX_PBUFFER_PIXELS;
  public static final int EGL_MAX_PBUFFER_WIDTH;
  public static final int EGL_NATIVE_RENDERABLE;
  public static final int EGL_NATIVE_VISUAL_ID;
  public static final int EGL_NATIVE_VISUAL_TYPE;
  public static final int EGL_NONE;
  public static final int EGL_NON_CONFORMANT_CONFIG;
  public static final int EGL_NOT_INITIALIZED;
  public static final int EGL_PBUFFER_BIT;
  public static final int EGL_PIXEL_ASPECT_RATIO;
  public static final int EGL_PIXMAP_BIT;
  public static final int EGL_READ;
  public static final int EGL_RED_SIZE;
  public static final int EGL_RENDERABLE_TYPE;
  public static final int EGL_RENDER_BUFFER;
  public static final int EGL_RGB_BUFFER;
  public static final int EGL_SAMPLES;
  public static final int EGL_SAMPLE_BUFFERS;
  public static final int EGL_SINGLE_BUFFER;
  public static final int EGL_SLOW_CONFIG;
  public static final int EGL_STENCIL_SIZE;
  public static final int EGL_SUCCESS;
  public static final int EGL_SURFACE_TYPE;
  public static final int EGL_TRANSPARENT_BLUE_VALUE;
  public static final int EGL_TRANSPARENT_GREEN_VALUE;
  public static final int EGL_TRANSPARENT_RED_VALUE;
  public static final int EGL_TRANSPARENT_RGB;
  public static final int EGL_TRANSPARENT_TYPE;
  public static final int EGL_VENDOR;
  public static final int EGL_VERSION;
  public static final int EGL_VERTICAL_RESOLUTION;
  public static final int EGL_WIDTH;
  public static final int EGL_WINDOW_BIT;
  public static final java.lang.Object EGL_DEFAULT_DISPLAY;
  public static final javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT;
  public static final javax.microedition.khronos.egl.EGLDisplay EGL_NO_DISPLAY;
  public static final javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE;
}
public interface javax.microedition.khronos.egl.EGL11
  extends javax.microedition.khronos.egl.EGL10
{
  public static final int EGL_CONTEXT_LOST;
}
public abstract class javax.microedition.khronos.egl.EGLConfig
  extends java.lang.Object
{
  public void <init>();
}
public abstract class javax.microedition.khronos.egl.EGLContext
  extends java.lang.Object
{
  public static javax.microedition.khronos.egl.EGL getEGL();
  public void <init>();
  public abstract javax.microedition.khronos.opengles.GL getGL();
}
public abstract class javax.microedition.khronos.egl.EGLDisplay
  extends java.lang.Object
{
  public void <init>();
}
public abstract class javax.microedition.khronos.egl.EGLSurface
  extends java.lang.Object
{
  public void <init>();
}
public interface javax.microedition.khronos.opengles.GL
{
}
public interface javax.microedition.khronos.opengles.GL10
  extends javax.microedition.khronos.opengles.GL
{
  public abstract int glGetError();
  public abstract void glActiveTexture(int);
  public abstract void glAlphaFunc(int, float);
  public abstract void glAlphaFuncx(int, int);
  public abstract void glBindTexture(int, int);
  public abstract void glBlendFunc(int, int);
  public abstract void glClear(int);
  public abstract void glClearColor(float, float, float, float);
  public abstract void glClearColorx(int, int, int, int);
  public abstract void glClearDepthf(float);
  public abstract void glClearDepthx(int);
  public abstract void glClearStencil(int);
  public abstract void glClientActiveTexture(int);
  public abstract void glColor4f(float, float, float, float);
  public abstract void glColor4x(int, int, int, int);
  public abstract void glColorMask(boolean, boolean, boolean, boolean);
  public abstract void glColorPointer(int, int, int, java.nio.Buffer);
  public abstract void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glCompressedTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public abstract void glCopyTexSubImage2D(int, int, int, int, int, int, int, int);
  public abstract void glCullFace(int);
  public abstract void glDeleteTextures(int, int[], int);
  public abstract void glDeleteTextures(int, java.nio.IntBuffer);
  public abstract void glDepthFunc(int);
  public abstract void glDepthMask(boolean);
  public abstract void glDepthRangef(float, float);
  public abstract void glDepthRangex(int, int);
  public abstract void glDisable(int);
  public abstract void glDisableClientState(int);
  public abstract void glDrawArrays(int, int, int);
  public abstract void glDrawElements(int, int, int, java.nio.Buffer);
  public abstract void glEnable(int);
  public abstract void glEnableClientState(int);
  public abstract void glFinish();
  public abstract void glFlush();
  public abstract void glFogf(int, float);
  public abstract void glFogfv(int, float[], int);
  public abstract void glFogfv(int, java.nio.FloatBuffer);
  public abstract void glFogx(int, int);
  public abstract void glFogxv(int, int[], int);
  public abstract void glFogxv(int, java.nio.IntBuffer);
  public abstract void glFrontFace(int);
  public abstract void glFrustumf(float, float, float, float, float, float);
  public abstract void glFrustumx(int, int, int, int, int, int);
  public abstract void glGenTextures(int, int[], int);
  public abstract void glGenTextures(int, java.nio.IntBuffer);
  public abstract void glGetIntegerv(int, int[], int);
  public abstract void glGetIntegerv(int, java.nio.IntBuffer);
  public abstract void glHint(int, int);
  public abstract void glLightModelf(int, float);
  public abstract void glLightModelfv(int, float[], int);
  public abstract void glLightModelfv(int, java.nio.FloatBuffer);
  public abstract void glLightModelx(int, int);
  public abstract void glLightModelxv(int, int[], int);
  public abstract void glLightModelxv(int, java.nio.IntBuffer);
  public abstract void glLightf(int, int, float);
  public abstract void glLightfv(int, int, float[], int);
  public abstract void glLightfv(int, int, java.nio.FloatBuffer);
  public abstract void glLightx(int, int, int);
  public abstract void glLightxv(int, int, int[], int);
  public abstract void glLightxv(int, int, java.nio.IntBuffer);
  public abstract void glLineWidth(float);
  public abstract void glLineWidthx(int);
  public abstract void glLoadIdentity();
  public abstract void glLoadMatrixf(float[], int);
  public abstract void glLoadMatrixf(java.nio.FloatBuffer);
  public abstract void glLoadMatrixx(int[], int);
  public abstract void glLoadMatrixx(java.nio.IntBuffer);
  public abstract void glLogicOp(int);
  public abstract void glMaterialf(int, int, float);
  public abstract void glMaterialfv(int, int, float[], int);
  public abstract void glMaterialfv(int, int, java.nio.FloatBuffer);
  public abstract void glMaterialx(int, int, int);
  public abstract void glMaterialxv(int, int, int[], int);
  public abstract void glMaterialxv(int, int, java.nio.IntBuffer);
  public abstract void glMatrixMode(int);
  public abstract void glMultMatrixf(float[], int);
  public abstract void glMultMatrixf(java.nio.FloatBuffer);
  public abstract void glMultMatrixx(int[], int);
  public abstract void glMultMatrixx(java.nio.IntBuffer);
  public abstract void glMultiTexCoord4f(int, float, float, float, float);
  public abstract void glMultiTexCoord4x(int, int, int, int, int);
  public abstract void glNormal3f(float, float, float);
  public abstract void glNormal3x(int, int, int);
  public abstract void glNormalPointer(int, int, java.nio.Buffer);
  public abstract void glOrthof(float, float, float, float, float, float);
  public abstract void glOrthox(int, int, int, int, int, int);
  public abstract void glPixelStorei(int, int);
  public abstract void glPointSize(float);
  public abstract void glPointSizex(int);
  public abstract void glPolygonOffset(float, float);
  public abstract void glPolygonOffsetx(int, int);
  public abstract void glPopMatrix();
  public abstract void glPushMatrix();
  public abstract void glReadPixels(int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glRotatef(float, float, float, float);
  public abstract void glRotatex(int, int, int, int);
  public abstract void glSampleCoverage(float, boolean);
  public abstract void glSampleCoveragex(int, boolean);
  public abstract void glScalef(float, float, float);
  public abstract void glScalex(int, int, int);
  public abstract void glScissor(int, int, int, int);
  public abstract void glShadeModel(int);
  public abstract void glStencilFunc(int, int, int);
  public abstract void glStencilMask(int);
  public abstract void glStencilOp(int, int, int);
  public abstract void glTexCoordPointer(int, int, int, java.nio.Buffer);
  public abstract void glTexEnvf(int, int, float);
  public abstract void glTexEnvfv(int, int, float[], int);
  public abstract void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexEnvx(int, int, int);
  public abstract void glTexEnvxv(int, int, int[], int);
  public abstract void glTexEnvxv(int, int, java.nio.IntBuffer);
  public abstract void glTexImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glTexParameterf(int, int, float);
  public abstract void glTexParameterx(int, int, int);
  public abstract void glTexSubImage2D(int, int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glTranslatef(float, float, float);
  public abstract void glTranslatex(int, int, int);
  public abstract void glVertexPointer(int, int, int, java.nio.Buffer);
  public abstract void glViewport(int, int, int, int);
  public abstract java.lang.String glGetString(int);
  public static final int GL_ADD;
  public static final int GL_ALIASED_LINE_WIDTH_RANGE;
  public static final int GL_ALIASED_POINT_SIZE_RANGE;
  public static final int GL_ALPHA;
  public static final int GL_ALPHA_BITS;
  public static final int GL_ALPHA_TEST;
  public static final int GL_ALWAYS;
  public static final int GL_AMBIENT;
  public static final int GL_AMBIENT_AND_DIFFUSE;
  public static final int GL_AND;
  public static final int GL_AND_INVERTED;
  public static final int GL_AND_REVERSE;
  public static final int GL_BACK;
  public static final int GL_BLEND;
  public static final int GL_BLUE_BITS;
  public static final int GL_BYTE;
  public static final int GL_CCW;
  public static final int GL_CLAMP_TO_EDGE;
  public static final int GL_CLEAR;
  public static final int GL_COLOR_ARRAY;
  public static final int GL_COLOR_BUFFER_BIT;
  public static final int GL_COLOR_LOGIC_OP;
  public static final int GL_COLOR_MATERIAL;
  public static final int GL_COMPRESSED_TEXTURE_FORMATS;
  public static final int GL_CONSTANT_ATTENUATION;
  public static final int GL_COPY;
  public static final int GL_COPY_INVERTED;
  public static final int GL_CULL_FACE;
  public static final int GL_CW;
  public static final int GL_DECAL;
  public static final int GL_DECR;
  public static final int GL_DEPTH_BITS;
  public static final int GL_DEPTH_BUFFER_BIT;
  public static final int GL_DEPTH_TEST;
  public static final int GL_DIFFUSE;
  public static final int GL_DITHER;
  public static final int GL_DONT_CARE;
  public static final int GL_DST_ALPHA;
  public static final int GL_DST_COLOR;
  public static final int GL_EMISSION;
  public static final int GL_EQUAL;
  public static final int GL_EQUIV;
  public static final int GL_EXP2;
  public static final int GL_EXP;
  public static final int GL_EXTENSIONS;
  public static final int GL_FALSE;
  public static final int GL_FASTEST;
  public static final int GL_FIXED;
  public static final int GL_FLAT;
  public static final int GL_FLOAT;
  public static final int GL_FOG;
  public static final int GL_FOG_COLOR;
  public static final int GL_FOG_DENSITY;
  public static final int GL_FOG_END;
  public static final int GL_FOG_HINT;
  public static final int GL_FOG_MODE;
  public static final int GL_FOG_START;
  public static final int GL_FRONT;
  public static final int GL_FRONT_AND_BACK;
  public static final int GL_GEQUAL;
  public static final int GL_GREATER;
  public static final int GL_GREEN_BITS;
  public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES;
  public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES;
  public static final int GL_INCR;
  public static final int GL_INVALID_ENUM;
  public static final int GL_INVALID_OPERATION;
  public static final int GL_INVALID_VALUE;
  public static final int GL_INVERT;
  public static final int GL_KEEP;
  public static final int GL_LEQUAL;
  public static final int GL_LESS;
  public static final int GL_LIGHT0;
  public static final int GL_LIGHT1;
  public static final int GL_LIGHT2;
  public static final int GL_LIGHT3;
  public static final int GL_LIGHT4;
  public static final int GL_LIGHT5;
  public static final int GL_LIGHT6;
  public static final int GL_LIGHT7;
  public static final int GL_LIGHTING;
  public static final int GL_LIGHT_MODEL_AMBIENT;
  public static final int GL_LIGHT_MODEL_TWO_SIDE;
  public static final int GL_LINEAR;
  public static final int GL_LINEAR_ATTENUATION;
  public static final int GL_LINEAR_MIPMAP_LINEAR;
  public static final int GL_LINEAR_MIPMAP_NEAREST;
  public static final int GL_LINES;
  public static final int GL_LINE_LOOP;
  public static final int GL_LINE_SMOOTH;
  public static final int GL_LINE_SMOOTH_HINT;
  public static final int GL_LINE_STRIP;
  public static final int GL_LUMINANCE;
  public static final int GL_LUMINANCE_ALPHA;
  public static final int GL_MAX_ELEMENTS_INDICES;
  public static final int GL_MAX_ELEMENTS_VERTICES;
  public static final int GL_MAX_LIGHTS;
  public static final int GL_MAX_MODELVIEW_STACK_DEPTH;
  public static final int GL_MAX_PROJECTION_STACK_DEPTH;
  public static final int GL_MAX_TEXTURE_SIZE;
  public static final int GL_MAX_TEXTURE_STACK_DEPTH;
  public static final int GL_MAX_TEXTURE_UNITS;
  public static final int GL_MAX_VIEWPORT_DIMS;
  public static final int GL_MODELVIEW;
  public static final int GL_MODULATE;
  public static final int GL_MULTISAMPLE;
  public static final int GL_NAND;
  public static final int GL_NEAREST;
  public static final int GL_NEAREST_MIPMAP_LINEAR;
  public static final int GL_NEAREST_MIPMAP_NEAREST;
  public static final int GL_NEVER;
  public static final int GL_NICEST;
  public static final int GL_NOOP;
  public static final int GL_NOR;
  public static final int GL_NORMALIZE;
  public static final int GL_NORMAL_ARRAY;
  public static final int GL_NOTEQUAL;
  public static final int GL_NO_ERROR;
  public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS;
  public static final int GL_ONE;
  public static final int GL_ONE_MINUS_DST_ALPHA;
  public static final int GL_ONE_MINUS_DST_COLOR;
  public static final int GL_ONE_MINUS_SRC_ALPHA;
  public static final int GL_ONE_MINUS_SRC_COLOR;
  public static final int GL_OR;
  public static final int GL_OR_INVERTED;
  public static final int GL_OR_REVERSE;
  public static final int GL_OUT_OF_MEMORY;
  public static final int GL_PACK_ALIGNMENT;
  public static final int GL_PALETTE4_R5_G6_B5_OES;
  public static final int GL_PALETTE4_RGB5_A1_OES;
  public static final int GL_PALETTE4_RGB8_OES;
  public static final int GL_PALETTE4_RGBA4_OES;
  public static final int GL_PALETTE4_RGBA8_OES;
  public static final int GL_PALETTE8_R5_G6_B5_OES;
  public static final int GL_PALETTE8_RGB5_A1_OES;
  public static final int GL_PALETTE8_RGB8_OES;
  public static final int GL_PALETTE8_RGBA4_OES;
  public static final int GL_PALETTE8_RGBA8_OES;
  public static final int GL_PERSPECTIVE_CORRECTION_HINT;
  public static final int GL_POINTS;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE;
  public static final int GL_POINT_SIZE;
  public static final int GL_POINT_SMOOTH;
  public static final int GL_POINT_SMOOTH_HINT;
  public static final int GL_POLYGON_OFFSET_FILL;
  public static final int GL_POLYGON_SMOOTH_HINT;
  public static final int GL_POSITION;
  public static final int GL_PROJECTION;
  public static final int GL_QUADRATIC_ATTENUATION;
  public static final int GL_RED_BITS;
  public static final int GL_RENDERER;
  public static final int GL_REPEAT;
  public static final int GL_REPLACE;
  public static final int GL_RESCALE_NORMAL;
  public static final int GL_RGB;
  public static final int GL_RGBA;
  public static final int GL_SAMPLE_ALPHA_TO_COVERAGE;
  public static final int GL_SAMPLE_ALPHA_TO_ONE;
  public static final int GL_SAMPLE_COVERAGE;
  public static final int GL_SCISSOR_TEST;
  public static final int GL_SET;
  public static final int GL_SHININESS;
  public static final int GL_SHORT;
  public static final int GL_SMOOTH;
  public static final int GL_SMOOTH_LINE_WIDTH_RANGE;
  public static final int GL_SMOOTH_POINT_SIZE_RANGE;
  public static final int GL_SPECULAR;
  public static final int GL_SPOT_CUTOFF;
  public static final int GL_SPOT_DIRECTION;
  public static final int GL_SPOT_EXPONENT;
  public static final int GL_SRC_ALPHA;
  public static final int GL_SRC_ALPHA_SATURATE;
  public static final int GL_SRC_COLOR;
  public static final int GL_STACK_OVERFLOW;
  public static final int GL_STACK_UNDERFLOW;
  public static final int GL_STENCIL_BITS;
  public static final int GL_STENCIL_BUFFER_BIT;
  public static final int GL_STENCIL_TEST;
  public static final int GL_SUBPIXEL_BITS;
  public static final int GL_TEXTURE0;
  public static final int GL_TEXTURE10;
  public static final int GL_TEXTURE11;
  public static final int GL_TEXTURE12;
  public static final int GL_TEXTURE13;
  public static final int GL_TEXTURE14;
  public static final int GL_TEXTURE15;
  public static final int GL_TEXTURE16;
  public static final int GL_TEXTURE17;
  public static final int GL_TEXTURE18;
  public static final int GL_TEXTURE19;
  public static final int GL_TEXTURE1;
  public static final int GL_TEXTURE20;
  public static final int GL_TEXTURE21;
  public static final int GL_TEXTURE22;
  public static final int GL_TEXTURE23;
  public static final int GL_TEXTURE24;
  public static final int GL_TEXTURE25;
  public static final int GL_TEXTURE26;
  public static final int GL_TEXTURE27;
  public static final int GL_TEXTURE28;
  public static final int GL_TEXTURE29;
  public static final int GL_TEXTURE2;
  public static final int GL_TEXTURE30;
  public static final int GL_TEXTURE31;
  public static final int GL_TEXTURE3;
  public static final int GL_TEXTURE4;
  public static final int GL_TEXTURE5;
  public static final int GL_TEXTURE6;
  public static final int GL_TEXTURE7;
  public static final int GL_TEXTURE8;
  public static final int GL_TEXTURE9;
  public static final int GL_TEXTURE;
  public static final int GL_TEXTURE_2D;
  public static final int GL_TEXTURE_COORD_ARRAY;
  public static final int GL_TEXTURE_ENV;
  public static final int GL_TEXTURE_ENV_COLOR;
  public static final int GL_TEXTURE_ENV_MODE;
  public static final int GL_TEXTURE_MAG_FILTER;
  public static final int GL_TEXTURE_MIN_FILTER;
  public static final int GL_TEXTURE_WRAP_S;
  public static final int GL_TEXTURE_WRAP_T;
  public static final int GL_TRIANGLES;
  public static final int GL_TRIANGLE_FAN;
  public static final int GL_TRIANGLE_STRIP;
  public static final int GL_TRUE;
  public static final int GL_UNPACK_ALIGNMENT;
  public static final int GL_UNSIGNED_BYTE;
  public static final int GL_UNSIGNED_SHORT;
  public static final int GL_UNSIGNED_SHORT_4_4_4_4;
  public static final int GL_UNSIGNED_SHORT_5_5_5_1;
  public static final int GL_UNSIGNED_SHORT_5_6_5;
  public static final int GL_VENDOR;
  public static final int GL_VERSION;
  public static final int GL_VERTEX_ARRAY;
  public static final int GL_XOR;
  public static final int GL_ZERO;
}
public interface javax.microedition.khronos.opengles.GL10Ext
  extends javax.microedition.khronos.opengles.GL
{
  public abstract int glQueryMatrixxOES(int[], int, int[], int);
  public abstract int glQueryMatrixxOES(java.nio.IntBuffer, java.nio.IntBuffer);
}
public interface javax.microedition.khronos.opengles.GL11
  extends javax.microedition.khronos.opengles.GL10
{
  public abstract boolean glIsBuffer(int);
  public abstract boolean glIsEnabled(int);
  public abstract boolean glIsTexture(int);
  public abstract void glBindBuffer(int, int);
  public abstract void glBufferData(int, int, java.nio.Buffer, int);
  public abstract void glBufferSubData(int, int, int, java.nio.Buffer);
  public abstract void glClipPlanef(int, float[], int);
  public abstract void glClipPlanef(int, java.nio.FloatBuffer);
  public abstract void glClipPlanex(int, int[], int);
  public abstract void glClipPlanex(int, java.nio.IntBuffer);
  public abstract void glColor4ub(byte, byte, byte, byte);
  public abstract void glColorPointer(int, int, int, int);
  public abstract void glDeleteBuffers(int, int[], int);
  public abstract void glDeleteBuffers(int, java.nio.IntBuffer);
  public abstract void glDrawElements(int, int, int, int);
  public abstract void glGenBuffers(int, int[], int);
  public abstract void glGenBuffers(int, java.nio.IntBuffer);
  public abstract void glGetBooleanv(int, boolean[], int);
  public abstract void glGetBooleanv(int, java.nio.IntBuffer);
  public abstract void glGetBufferParameteriv(int, int, int[], int);
  public abstract void glGetBufferParameteriv(int, int, java.nio.IntBuffer);
  public abstract void glGetClipPlanef(int, float[], int);
  public abstract void glGetClipPlanef(int, java.nio.FloatBuffer);
  public abstract void glGetClipPlanex(int, int[], int);
  public abstract void glGetClipPlanex(int, java.nio.IntBuffer);
  public abstract void glGetFixedv(int, int[], int);
  public abstract void glGetFixedv(int, java.nio.IntBuffer);
  public abstract void glGetFloatv(int, float[], int);
  public abstract void glGetFloatv(int, java.nio.FloatBuffer);
  public abstract void glGetLightfv(int, int, float[], int);
  public abstract void glGetLightfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetLightxv(int, int, int[], int);
  public abstract void glGetLightxv(int, int, java.nio.IntBuffer);
  public abstract void glGetMaterialfv(int, int, float[], int);
  public abstract void glGetMaterialfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetMaterialxv(int, int, int[], int);
  public abstract void glGetMaterialxv(int, int, java.nio.IntBuffer);
  public abstract void glGetPointerv(int, java.nio.Buffer[]);
  public abstract void glGetTexEnviv(int, int, int[], int);
  public abstract void glGetTexEnviv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexEnvxv(int, int, int[], int);
  public abstract void glGetTexEnvxv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexParameterfv(int, int, float[], int);
  public abstract void glGetTexParameterfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetTexParameteriv(int, int, int[], int);
  public abstract void glGetTexParameteriv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexParameterxv(int, int, int[], int);
  public abstract void glGetTexParameterxv(int, int, java.nio.IntBuffer);
  public abstract void glNormalPointer(int, int, int);
  public abstract void glPointParameterf(int, float);
  public abstract void glPointParameterfv(int, float[], int);
  public abstract void glPointParameterfv(int, java.nio.FloatBuffer);
  public abstract void glPointParameterx(int, int);
  public abstract void glPointParameterxv(int, int[], int);
  public abstract void glPointParameterxv(int, java.nio.IntBuffer);
  public abstract void glPointSizePointerOES(int, int, java.nio.Buffer);
  public abstract void glTexCoordPointer(int, int, int, int);
  public abstract void glTexEnvi(int, int, int);
  public abstract void glTexEnviv(int, int, int[], int);
  public abstract void glTexEnviv(int, int, java.nio.IntBuffer);
  public abstract void glTexParameterfv(int, int, float[], int);
  public abstract void glTexParameterfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexParameteri(int, int, int);
  public abstract void glTexParameteriv(int, int, int[], int);
  public abstract void glTexParameteriv(int, int, java.nio.IntBuffer);
  public abstract void glTexParameterxv(int, int, int[], int);
  public abstract void glTexParameterxv(int, int, java.nio.IntBuffer);
  public abstract void glVertexPointer(int, int, int, int);
  public static final int GL_ACTIVE_TEXTURE;
  public static final int GL_ADD_SIGNED;
  public static final int GL_ALPHA_SCALE;
  public static final int GL_ALPHA_TEST_FUNC;
  public static final int GL_ALPHA_TEST_REF;
  public static final int GL_ARRAY_BUFFER;
  public static final int GL_ARRAY_BUFFER_BINDING;
  public static final int GL_BLEND_DST;
  public static final int GL_BLEND_SRC;
  public static final int GL_BUFFER_ACCESS;
  public static final int GL_BUFFER_SIZE;
  public static final int GL_BUFFER_USAGE;
  public static final int GL_CLIENT_ACTIVE_TEXTURE;
  public static final int GL_CLIP_PLANE0;
  public static final int GL_CLIP_PLANE1;
  public static final int GL_CLIP_PLANE2;
  public static final int GL_CLIP_PLANE3;
  public static final int GL_CLIP_PLANE4;
  public static final int GL_CLIP_PLANE5;
  public static final int GL_COLOR_ARRAY_BUFFER_BINDING;
  public static final int GL_COLOR_ARRAY_POINTER;
  public static final int GL_COLOR_ARRAY_SIZE;
  public static final int GL_COLOR_ARRAY_STRIDE;
  public static final int GL_COLOR_ARRAY_TYPE;
  public static final int GL_COLOR_CLEAR_VALUE;
  public static final int GL_COLOR_WRITEMASK;
  public static final int GL_COMBINE;
  public static final int GL_COMBINE_ALPHA;
  public static final int GL_COMBINE_RGB;
  public static final int GL_CONSTANT;
  public static final int GL_COORD_REPLACE_OES;
  public static final int GL_CULL_FACE_MODE;
  public static final int GL_CURRENT_COLOR;
  public static final int GL_CURRENT_NORMAL;
  public static final int GL_CURRENT_TEXTURE_COORDS;
  public static final int GL_DEPTH_CLEAR_VALUE;
  public static final int GL_DEPTH_FUNC;
  public static final int GL_DEPTH_RANGE;
  public static final int GL_DEPTH_WRITEMASK;
  public static final int GL_DOT3_RGB;
  public static final int GL_DOT3_RGBA;
  public static final int GL_DYNAMIC_DRAW;
  public static final int GL_ELEMENT_ARRAY_BUFFER;
  public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING;
  public static final int GL_FRONT_FACE;
  public static final int GL_GENERATE_MIPMAP;
  public static final int GL_GENERATE_MIPMAP_HINT;
  public static final int GL_INTERPOLATE;
  public static final int GL_LINE_WIDTH;
  public static final int GL_LOGIC_OP_MODE;
  public static final int GL_MATRIX_MODE;
  public static final int GL_MAX_CLIP_PLANES;
  public static final int GL_MODELVIEW_MATRIX;
  public static final int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_MODELVIEW_STACK_DEPTH;
  public static final int GL_NORMAL_ARRAY_BUFFER_BINDING;
  public static final int GL_NORMAL_ARRAY_POINTER;
  public static final int GL_NORMAL_ARRAY_STRIDE;
  public static final int GL_NORMAL_ARRAY_TYPE;
  public static final int GL_OPERAND0_ALPHA;
  public static final int GL_OPERAND0_RGB;
  public static final int GL_OPERAND1_ALPHA;
  public static final int GL_OPERAND1_RGB;
  public static final int GL_OPERAND2_ALPHA;
  public static final int GL_OPERAND2_RGB;
  public static final int GL_POINT_DISTANCE_ATTENUATION;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE;
  public static final int GL_POINT_SIZE;
  public static final int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES;
  public static final int GL_POINT_SIZE_ARRAY_OES;
  public static final int GL_POINT_SIZE_ARRAY_POINTER_OES;
  public static final int GL_POINT_SIZE_ARRAY_STRIDE_OES;
  public static final int GL_POINT_SIZE_ARRAY_TYPE_OES;
  public static final int GL_POINT_SIZE_MAX;
  public static final int GL_POINT_SIZE_MIN;
  public static final int GL_POINT_SPRITE_OES;
  public static final int GL_POLYGON_OFFSET_FACTOR;
  public static final int GL_POLYGON_OFFSET_UNITS;
  public static final int GL_PREVIOUS;
  public static final int GL_PRIMARY_COLOR;
  public static final int GL_PROJECTION_MATRIX;
  public static final int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_PROJECTION_STACK_DEPTH;
  public static final int GL_RGB_SCALE;
  public static final int GL_SAMPLES;
  public static final int GL_SAMPLE_BUFFERS;
  public static final int GL_SAMPLE_COVERAGE_INVERT;
  public static final int GL_SAMPLE_COVERAGE_VALUE;
  public static final int GL_SCISSOR_BOX;
  public static final int GL_SHADE_MODEL;
  public static final int GL_SRC0_ALPHA;
  public static final int GL_SRC0_RGB;
  public static final int GL_SRC1_ALPHA;
  public static final int GL_SRC1_RGB;
  public static final int GL_SRC2_ALPHA;
  public static final int GL_SRC2_RGB;
  public static final int GL_STATIC_DRAW;
  public static final int GL_STENCIL_CLEAR_VALUE;
  public static final int GL_STENCIL_FAIL;
  public static final int GL_STENCIL_FUNC;
  public static final int GL_STENCIL_PASS_DEPTH_FAIL;
  public static final int GL_STENCIL_PASS_DEPTH_PASS;
  public static final int GL_STENCIL_REF;
  public static final int GL_STENCIL_VALUE_MASK;
  public static final int GL_STENCIL_WRITEMASK;
  public static final int GL_SUBTRACT;
  public static final int GL_TEXTURE_BINDING_2D;
  public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING;
  public static final int GL_TEXTURE_COORD_ARRAY_POINTER;
  public static final int GL_TEXTURE_COORD_ARRAY_SIZE;
  public static final int GL_TEXTURE_COORD_ARRAY_STRIDE;
  public static final int GL_TEXTURE_COORD_ARRAY_TYPE;
  public static final int GL_TEXTURE_MATRIX;
  public static final int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES;
  public static final int GL_TEXTURE_STACK_DEPTH;
  public static final int GL_VERTEX_ARRAY_BUFFER_BINDING;
  public static final int GL_VERTEX_ARRAY_POINTER;
  public static final int GL_VERTEX_ARRAY_SIZE;
  public static final int GL_VERTEX_ARRAY_STRIDE;
  public static final int GL_VERTEX_ARRAY_TYPE;
  public static final int GL_VIEWPORT;
  public static final int GL_WRITE_ONLY;
}
public interface javax.microedition.khronos.opengles.GL11Ext
  extends javax.microedition.khronos.opengles.GL
{
  public abstract void glCurrentPaletteMatrixOES(int);
  public abstract void glDrawTexfOES(float, float, float, float, float);
  public abstract void glDrawTexfvOES(float[], int);
  public abstract void glDrawTexfvOES(java.nio.FloatBuffer);
  public abstract void glDrawTexiOES(int, int, int, int, int);
  public abstract void glDrawTexivOES(int[], int);
  public abstract void glDrawTexivOES(java.nio.IntBuffer);
  public abstract void glDrawTexsOES(short, short, short, short, short);
  public abstract void glDrawTexsvOES(java.nio.ShortBuffer);
  public abstract void glDrawTexsvOES(short[], int);
  public abstract void glDrawTexxOES(int, int, int, int, int);
  public abstract void glDrawTexxvOES(int[], int);
  public abstract void glDrawTexxvOES(java.nio.IntBuffer);
  public abstract void glEnable(int);
  public abstract void glEnableClientState(int);
  public abstract void glLoadPaletteFromModelViewMatrixOES();
  public abstract void glMatrixIndexPointerOES(int, int, int, int);
  public abstract void glMatrixIndexPointerOES(int, int, int, java.nio.Buffer);
  public abstract void glTexParameterfv(int, int, float[], int);
  public abstract void glWeightPointerOES(int, int, int, int);
  public abstract void glWeightPointerOES(int, int, int, java.nio.Buffer);
  public static final int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_POINTER_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_SIZE_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_STRIDE_OES;
  public static final int GL_MATRIX_INDEX_ARRAY_TYPE_OES;
  public static final int GL_MATRIX_PALETTE_OES;
  public static final int GL_MAX_PALETTE_MATRICES_OES;
  public static final int GL_MAX_VERTEX_UNITS_OES;
  public static final int GL_TEXTURE_CROP_RECT_OES;
  public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES;
  public static final int GL_WEIGHT_ARRAY_OES;
  public static final int GL_WEIGHT_ARRAY_POINTER_OES;
  public static final int GL_WEIGHT_ARRAY_SIZE_OES;
  public static final int GL_WEIGHT_ARRAY_STRIDE_OES;
  public static final int GL_WEIGHT_ARRAY_TYPE_OES;
}
public interface javax.microedition.khronos.opengles.GL11ExtensionPack
  extends javax.microedition.khronos.opengles.GL
{
  public abstract boolean glIsFramebufferOES(int);
  public abstract boolean glIsRenderbufferOES(int);
  public abstract int glCheckFramebufferStatusOES(int);
  public abstract void glBindFramebufferOES(int, int);
  public abstract void glBindRenderbufferOES(int, int);
  public abstract void glBindTexture(int, int);
  public abstract void glBlendEquation(int);
  public abstract void glBlendEquationSeparate(int, int);
  public abstract void glBlendFuncSeparate(int, int, int, int);
  public abstract void glCompressedTexImage2D(int, int, int, int, int, int, int, java.nio.Buffer);
  public abstract void glCopyTexImage2D(int, int, int, int, int, int, int, int);
  public abstract void glDeleteFramebuffersOES(int, int[], int);
  public abstract void glDeleteFramebuffersOES(int, java.nio.IntBuffer);
  public abstract void glDeleteRenderbuffersOES(int, int[], int);
  public abstract void glDeleteRenderbuffersOES(int, java.nio.IntBuffer);
  public abstract void glEnable(int);
  public abstract void glFramebufferRenderbufferOES(int, int, int, int);
  public abstract void glFramebufferTexture2DOES(int, int, int, int, int);
  public abstract void glGenFramebuffersOES(int, int[], int);
  public abstract void glGenFramebuffersOES(int, java.nio.IntBuffer);
  public abstract void glGenRenderbuffersOES(int, int[], int);
  public abstract void glGenRenderbuffersOES(int, java.nio.IntBuffer);
  public abstract void glGenerateMipmapOES(int);
  public abstract void glGetFramebufferAttachmentParameterivOES(int, int, int, int[], int);
  public abstract void glGetFramebufferAttachmentParameterivOES(int, int, int, java.nio.IntBuffer);
  public abstract void glGetIntegerv(int, int[], int);
  public abstract void glGetIntegerv(int, java.nio.IntBuffer);
  public abstract void glGetRenderbufferParameterivOES(int, int, int[], int);
  public abstract void glGetRenderbufferParameterivOES(int, int, java.nio.IntBuffer);
  public abstract void glGetTexGenfv(int, int, float[], int);
  public abstract void glGetTexGenfv(int, int, java.nio.FloatBuffer);
  public abstract void glGetTexGeniv(int, int, int[], int);
  public abstract void glGetTexGeniv(int, int, java.nio.IntBuffer);
  public abstract void glGetTexGenxv(int, int, int[], int);
  public abstract void glGetTexGenxv(int, int, java.nio.IntBuffer);
  public abstract void glRenderbufferStorageOES(int, int, int, int);
  public abstract void glStencilOp(int, int, int);
  public abstract void glTexEnvf(int, int, float);
  public abstract void glTexEnvfv(int, int, float[], int);
  public abstract void glTexEnvfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexEnvx(int, int, int);
  public abstract void glTexEnvxv(int, int, int[], int);
  public abstract void glTexEnvxv(int, int, java.nio.IntBuffer);
  public abstract void glTexGenf(int, int, float);
  public abstract void glTexGenfv(int, int, float[], int);
  public abstract void glTexGenfv(int, int, java.nio.FloatBuffer);
  public abstract void glTexGeni(int, int, int);
  public abstract void glTexGeniv(int, int, int[], int);
  public abstract void glTexGeniv(int, int, java.nio.IntBuffer);
  public abstract void glTexGenx(int, int, int);
  public abstract void glTexGenxv(int, int, int[], int);
  public abstract void glTexGenxv(int, int, java.nio.IntBuffer);
  public abstract void glTexParameterf(int, int, float);
  public static final int GL_BLEND_DST_ALPHA;
  public static final int GL_BLEND_DST_RGB;
  public static final int GL_BLEND_EQUATION;
  public static final int GL_BLEND_EQUATION_ALPHA;
  public static final int GL_BLEND_EQUATION_RGB;
  public static final int GL_BLEND_SRC_ALPHA;
  public static final int GL_BLEND_SRC_RGB;
  public static final int GL_COLOR_ATTACHMENT0_OES;
  public static final int GL_COLOR_ATTACHMENT10_OES;
  public static final int GL_COLOR_ATTACHMENT11_OES;
  public static final int GL_COLOR_ATTACHMENT12_OES;
  public static final int GL_COLOR_ATTACHMENT13_OES;
  public static final int GL_COLOR_ATTACHMENT14_OES;
  public static final int GL_COLOR_ATTACHMENT15_OES;
  public static final int GL_COLOR_ATTACHMENT1_OES;
  public static final int GL_COLOR_ATTACHMENT2_OES;
  public static final int GL_COLOR_ATTACHMENT3_OES;
  public static final int GL_COLOR_ATTACHMENT4_OES;
  public static final int GL_COLOR_ATTACHMENT5_OES;
  public static final int GL_COLOR_ATTACHMENT6_OES;
  public static final int GL_COLOR_ATTACHMENT7_OES;
  public static final int GL_COLOR_ATTACHMENT8_OES;
  public static final int GL_COLOR_ATTACHMENT9_OES;
  public static final int GL_DECR_WRAP;
  public static final int GL_DEPTH_ATTACHMENT_OES;
  public static final int GL_DEPTH_COMPONENT16;
  public static final int GL_DEPTH_COMPONENT24;
  public static final int GL_DEPTH_COMPONENT32;
  public static final int GL_DEPTH_COMPONENT;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES;
  public static final int GL_FRAMEBUFFER_BINDING_OES;
  public static final int GL_FRAMEBUFFER_COMPLETE_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES;
  public static final int GL_FRAMEBUFFER_OES;
  public static final int GL_FRAMEBUFFER_UNSUPPORTED_OES;
  public static final int GL_FUNC_ADD;
  public static final int GL_FUNC_REVERSE_SUBTRACT;
  public static final int GL_FUNC_SUBTRACT;
  public static final int GL_INCR_WRAP;
  public static final int GL_INVALID_FRAMEBUFFER_OPERATION_OES;
  public static final int GL_MAX_COLOR_ATTACHMENTS_OES;
  public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE;
  public static final int GL_MAX_RENDERBUFFER_SIZE_OES;
  public static final int GL_MIRRORED_REPEAT;
  public static final int GL_NORMAL_MAP;
  public static final int GL_REFLECTION_MAP;
  public static final int GL_RENDERBUFFER_ALPHA_SIZE_OES;
  public static final int GL_RENDERBUFFER_BINDING_OES;
  public static final int GL_RENDERBUFFER_BLUE_SIZE_OES;
  public static final int GL_RENDERBUFFER_DEPTH_SIZE_OES;
  public static final int GL_RENDERBUFFER_GREEN_SIZE_OES;
  public static final int GL_RENDERBUFFER_HEIGHT_OES;
  public static final int GL_RENDERBUFFER_INTERNAL_FORMAT_OES;
  public static final int GL_RENDERBUFFER_OES;
  public static final int GL_RENDERBUFFER_RED_SIZE_OES;
  public static final int GL_RENDERBUFFER_STENCIL_SIZE_OES;
  public static final int GL_RENDERBUFFER_WIDTH_OES;
  public static final int GL_RGB565_OES;
  public static final int GL_RGB5_A1;
  public static final int GL_RGB8;
  public static final int GL_RGBA4;
  public static final int GL_RGBA8;
  public static final int GL_STENCIL_ATTACHMENT_OES;
  public static final int GL_STENCIL_INDEX1_OES;
  public static final int GL_STENCIL_INDEX4_OES;
  public static final int GL_STENCIL_INDEX8_OES;
  public static final int GL_STENCIL_INDEX;
  public static final int GL_STR;
  public static final int GL_TEXTURE_BINDING_CUBE_MAP;
  public static final int GL_TEXTURE_CUBE_MAP;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z;
  public static final int GL_TEXTURE_GEN_MODE;
  public static final int GL_TEXTURE_GEN_STR;
}
public abstract class javax.net.ServerSocketFactory
  extends java.lang.Object
{
  public static javax.net.ServerSocketFactory getDefault();
  public abstract java.net.ServerSocket createServerSocket(int)  throws java.io.IOException;
  public abstract java.net.ServerSocket createServerSocket(int, int)  throws java.io.IOException;
  public abstract java.net.ServerSocket createServerSocket(int, int, java.net.InetAddress)  throws java.io.IOException;
  public java.net.ServerSocket createServerSocket()  throws java.io.IOException;
  protected void <init>();
}
public abstract class javax.net.SocketFactory
  extends java.lang.Object
{
  public static javax.net.SocketFactory getDefault();
  public abstract java.net.Socket createSocket(java.lang.String, int)  throws java.io.IOException, java.net.UnknownHostException;
  public abstract java.net.Socket createSocket(java.lang.String, int, java.net.InetAddress, int)  throws java.io.IOException, java.net.UnknownHostException;
  public abstract java.net.Socket createSocket(java.net.InetAddress, int)  throws java.io.IOException;
  public abstract java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int)  throws java.io.IOException;
  public java.net.Socket createSocket()  throws java.io.IOException;
  protected void <init>();
}
public class javax.net.ssl.CertPathTrustManagerParameters
  extends java.lang.Object
  implements javax.net.ssl.ManagerFactoryParameters
{
  public void <init>(java.security.cert.CertPathParameters);
  public java.security.cert.CertPathParameters getParameters();
}
public abstract class javax.net.ssl.ExtendedSSLSession
  extends java.lang.Object
  implements javax.net.ssl.SSLSession
{
  public void <init>();
  public abstract java.lang.String[] getLocalSupportedSignatureAlgorithms();
  public abstract java.lang.String[] getPeerSupportedSignatureAlgorithms();
  public java.util.List getRequestedServerNames();
}
public class javax.net.ssl.HandshakeCompletedEvent
  extends java.util.EventObject
{
  public void <init>(javax.net.ssl.SSLSocket, javax.net.ssl.SSLSession);
  public java.lang.String getCipherSuite();
  public java.security.Principal getLocalPrincipal();
  public java.security.Principal getPeerPrincipal()  throws javax.net.ssl.SSLPeerUnverifiedException;
  public java.security.cert.Certificate[] getLocalCertificates();
  public java.security.cert.Certificate[] getPeerCertificates()  throws javax.net.ssl.SSLPeerUnverifiedException;
  public javax.net.ssl.SSLSession getSession();
  public javax.net.ssl.SSLSocket getSocket();
  public javax.security.cert.X509Certificate[] getPeerCertificateChain()  throws javax.net.ssl.SSLPeerUnverifiedException;
}
public interface javax.net.ssl.HandshakeCompletedListener
  extends java.util.EventListener
{
  public abstract void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent);
}
public interface javax.net.ssl.HostnameVerifier
{
  public abstract boolean verify(java.lang.String, javax.net.ssl.SSLSession);
}
public abstract class javax.net.ssl.HttpsURLConnection
  extends java.net.HttpURLConnection
{
  public static void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier);
  public static void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory);
  public static javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier();
  public static javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory();
  public abstract java.lang.String getCipherSuite();
  public abstract java.security.cert.Certificate[] getLocalCertificates();
  public abstract java.security.cert.Certificate[] getServerCertificates()  throws javax.net.ssl.SSLPeerUnverifiedException;
  public void setHostnameVerifier(javax.net.ssl.HostnameVerifier);
  public void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory);
  public java.security.Principal getLocalPrincipal();
  public java.security.Principal getPeerPrincipal()  throws javax.net.ssl.SSLPeerUnverifiedException;
  public javax.net.ssl.HostnameVerifier getHostnameVerifier();
  public javax.net.ssl.SSLSocketFactory getSSLSocketFactory();
  protected void <init>(java.net.URL);
  protected javax.net.ssl.HostnameVerifier hostnameVerifier;
}
public interface javax.net.ssl.KeyManager
{
}
public class javax.net.ssl.KeyManagerFactory
  extends java.lang.Object
{
  public static final java.lang.String getDefaultAlgorithm();
  public static final javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.net.ssl.KeyManagerFactory getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static final javax.net.ssl.KeyManagerFactory getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final void init(java.security.KeyStore, char[])  throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public final void init(javax.net.ssl.ManagerFactoryParameters)  throws java.security.InvalidAlgorithmParameterException;
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final javax.net.ssl.KeyManager[] getKeyManagers();
  protected void <init>(javax.net.ssl.KeyManagerFactorySpi, java.security.Provider, java.lang.String);
}
public abstract class javax.net.ssl.KeyManagerFactorySpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract void engineInit(java.security.KeyStore, char[])  throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  protected abstract void engineInit(javax.net.ssl.ManagerFactoryParameters)  throws java.security.InvalidAlgorithmParameterException;
  protected abstract javax.net.ssl.KeyManager[] engineGetKeyManagers();
}
public class javax.net.ssl.KeyStoreBuilderParameters
  extends java.lang.Object
  implements javax.net.ssl.ManagerFactoryParameters
{
  public void <init>(java.security.KeyStore$Builder);
  public void <init>(java.util.List);
  public java.util.List getParameters();
}
public interface javax.net.ssl.ManagerFactoryParameters
{
}
public final class javax.net.ssl.SNIHostName
  extends javax.net.ssl.SNIServerName
{
  public static javax.net.ssl.SNIMatcher createSNIMatcher(java.lang.String);
  public void <init>(byte[]);
  public void <init>(java.lang.String);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String getAsciiName();
  public java.lang.String toString();
}
public abstract class javax.net.ssl.SNIMatcher
  extends java.lang.Object
{
  public final int getType();
  public abstract boolean matches(javax.net.ssl.SNIServerName);
  protected void <init>(int);
}
public abstract class javax.net.ssl.SNIServerName
  extends java.lang.Object
{
  public final int getType();
  public final byte[] getEncoded();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  protected void <init>(int, byte[]);
}
public class javax.net.ssl.SSLContext
  extends java.lang.Object
{
  public static void setDefault(javax.net.ssl.SSLContext);
  public static javax.net.ssl.SSLContext getDefault()  throws java.security.NoSuchAlgorithmException;
  public static javax.net.ssl.SSLContext getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static javax.net.ssl.SSLContext getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static javax.net.ssl.SSLContext getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final void init(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom)  throws java.security.KeyManagementException;
  public final java.lang.String getProtocol();
  public final java.security.Provider getProvider();
  public final javax.net.ssl.SSLEngine createSSLEngine();
  public final javax.net.ssl.SSLEngine createSSLEngine(java.lang.String, int);
  public final javax.net.ssl.SSLParameters getDefaultSSLParameters();
  public final javax.net.ssl.SSLParameters getSupportedSSLParameters();
  public final javax.net.ssl.SSLServerSocketFactory getServerSocketFactory();
  public final javax.net.ssl.SSLSessionContext getClientSessionContext();
  public final javax.net.ssl.SSLSessionContext getServerSessionContext();
  public final javax.net.ssl.SSLSocketFactory getSocketFactory();
  protected void <init>(javax.net.ssl.SSLContextSpi, java.security.Provider, java.lang.String);
}
public abstract class javax.net.ssl.SSLContextSpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract void engineInit(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom)  throws java.security.KeyManagementException;
  protected abstract javax.net.ssl.SSLEngine engineCreateSSLEngine();
  protected abstract javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String, int);
  protected abstract javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory();
  protected abstract javax.net.ssl.SSLSessionContext engineGetClientSessionContext();
  protected abstract javax.net.ssl.SSLSessionContext engineGetServerSessionContext();
  protected abstract javax.net.ssl.SSLSocketFactory engineGetSocketFactory();
  protected javax.net.ssl.SSLParameters engineGetDefaultSSLParameters();
  protected javax.net.ssl.SSLParameters engineGetSupportedSSLParameters();
}
public abstract class javax.net.ssl.SSLEngine
  extends java.lang.Object
{
  public abstract boolean getEnableSessionCreation();
  public abstract boolean getNeedClientAuth();
  public abstract boolean getUseClientMode();
  public abstract boolean getWantClientAuth();
  public abstract boolean isInboundDone();
  public abstract boolean isOutboundDone();
  public abstract void beginHandshake()  throws javax.net.ssl.SSLException;
  public abstract void closeInbound()  throws javax.net.ssl.SSLException;
  public abstract void closeOutbound();
  public abstract void setEnableSessionCreation(boolean);
  public abstract void setEnabledCipherSuites(java.lang.String[]);
  public abstract void setEnabledProtocols(java.lang.String[]);
  public abstract void setNeedClientAuth(boolean);
  public abstract void setUseClientMode(boolean);
  public abstract void setWantClientAuth(boolean);
  public abstract java.lang.Runnable getDelegatedTask();
  public abstract java.lang.String[] getEnabledCipherSuites();
  public abstract java.lang.String[] getEnabledProtocols();
  public abstract java.lang.String[] getSupportedCipherSuites();
  public abstract java.lang.String[] getSupportedProtocols();
  public abstract javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int)  throws javax.net.ssl.SSLException;
  public abstract javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer)  throws javax.net.ssl.SSLException;
  public abstract javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
  public abstract javax.net.ssl.SSLSession getSession();
  public int getPeerPort();
  public void setSSLParameters(javax.net.ssl.SSLParameters);
  public java.lang.String getPeerHost();
  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer)  throws javax.net.ssl.SSLException;
  public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[])  throws javax.net.ssl.SSLException;
  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer, java.nio.ByteBuffer)  throws javax.net.ssl.SSLException;
  public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], java.nio.ByteBuffer)  throws javax.net.ssl.SSLException;
  public javax.net.ssl.SSLParameters getSSLParameters();
  public javax.net.ssl.SSLSession getHandshakeSession();
  protected void <init>();
  protected void <init>(java.lang.String, int);
}
public class javax.net.ssl.SSLEngineResult
  extends java.lang.Object
{
  public void <init>(javax.net.ssl.SSLEngineResult$Status, javax.net.ssl.SSLEngineResult$HandshakeStatus, int, int);
  public final int bytesConsumed();
  public final int bytesProduced();
  public final javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();
  public final javax.net.ssl.SSLEngineResult$Status getStatus();
  public java.lang.String toString();
}
public final class javax.net.ssl.SSLEngineResult$HandshakeStatus
  extends java.lang.Enum
{
  public static javax.net.ssl.SSLEngineResult$HandshakeStatus valueOf(java.lang.String);
  public static javax.net.ssl.SSLEngineResult$HandshakeStatus[] values();
  public static final javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED;
  public static final javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK;
  public static final javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP;
  public static final javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP;
  public static final javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING;
}
public final class javax.net.ssl.SSLEngineResult$Status
  extends java.lang.Enum
{
  public static javax.net.ssl.SSLEngineResult$Status valueOf(java.lang.String);
  public static javax.net.ssl.SSLEngineResult$Status[] values();
  public static final javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW;
  public static final javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW;
  public static final javax.net.ssl.SSLEngineResult$Status CLOSED;
  public static final javax.net.ssl.SSLEngineResult$Status OK;
}
public class javax.net.ssl.SSLException
  extends java.io.IOException
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class javax.net.ssl.SSLHandshakeException
  extends javax.net.ssl.SSLException
{
  public void <init>(java.lang.String);
}
public class javax.net.ssl.SSLKeyException
  extends javax.net.ssl.SSLException
{
  public void <init>(java.lang.String);
}
public class javax.net.ssl.SSLParameters
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.String[]);
  public void <init>(java.lang.String[], java.lang.String[]);
  public final boolean getUseCipherSuitesOrder();
  public final void setSNIMatchers(java.util.Collection);
  public final void setServerNames(java.util.List);
  public final void setUseCipherSuitesOrder(boolean);
  public final java.util.Collection getSNIMatchers();
  public final java.util.List getServerNames();
  public boolean getNeedClientAuth();
  public boolean getWantClientAuth();
  public void setAlgorithmConstraints(java.security.AlgorithmConstraints);
  public void setCipherSuites(java.lang.String[]);
  public void setEndpointIdentificationAlgorithm(java.lang.String);
  public void setNeedClientAuth(boolean);
  public void setProtocols(java.lang.String[]);
  public void setWantClientAuth(boolean);
  public java.lang.String getEndpointIdentificationAlgorithm();
  public java.lang.String[] getCipherSuites();
  public java.lang.String[] getProtocols();
  public java.security.AlgorithmConstraints getAlgorithmConstraints();
}
public class javax.net.ssl.SSLPeerUnverifiedException
  extends javax.net.ssl.SSLException
{
  public void <init>(java.lang.String);
}
public final class javax.net.ssl.SSLPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public class javax.net.ssl.SSLProtocolException
  extends javax.net.ssl.SSLException
{
  public void <init>(java.lang.String);
}
public abstract class javax.net.ssl.SSLServerSocket
  extends java.net.ServerSocket
{
  public abstract boolean getEnableSessionCreation();
  public abstract boolean getNeedClientAuth();
  public abstract boolean getUseClientMode();
  public abstract boolean getWantClientAuth();
  public abstract void setEnableSessionCreation(boolean);
  public abstract void setEnabledCipherSuites(java.lang.String[]);
  public abstract void setEnabledProtocols(java.lang.String[]);
  public abstract void setNeedClientAuth(boolean);
  public abstract void setUseClientMode(boolean);
  public abstract void setWantClientAuth(boolean);
  public abstract java.lang.String[] getEnabledCipherSuites();
  public abstract java.lang.String[] getEnabledProtocols();
  public abstract java.lang.String[] getSupportedCipherSuites();
  public abstract java.lang.String[] getSupportedProtocols();
  public void setSSLParameters(javax.net.ssl.SSLParameters);
  public javax.net.ssl.SSLParameters getSSLParameters();
  protected void <init>()  throws java.io.IOException;
  protected void <init>(int)  throws java.io.IOException;
  protected void <init>(int, int)  throws java.io.IOException;
  protected void <init>(int, int, java.net.InetAddress)  throws java.io.IOException;
}
public abstract class javax.net.ssl.SSLServerSocketFactory
  extends javax.net.ServerSocketFactory
{
  public static javax.net.ServerSocketFactory getDefault();
  public abstract java.lang.String[] getDefaultCipherSuites();
  public abstract java.lang.String[] getSupportedCipherSuites();
  protected void <init>();
}
public interface javax.net.ssl.SSLSession
{
  public abstract boolean isValid();
  public abstract int getApplicationBufferSize();
  public abstract int getPacketBufferSize();
  public abstract int getPeerPort();
  public abstract long getCreationTime();
  public abstract long getLastAccessedTime();
  public abstract void invalidate();
  public abstract void putValue(java.lang.String, java.lang.Object);
  public abstract void removeValue(java.lang.String);
  public abstract byte[] getId();
  public abstract java.lang.Object getValue(java.lang.String);
  public abstract java.lang.String getCipherSuite();
  public abstract java.lang.String getPeerHost();
  public abstract java.lang.String getProtocol();
  public abstract java.lang.String[] getValueNames();
  public abstract java.security.Principal getLocalPrincipal();
  public abstract java.security.Principal getPeerPrincipal()  throws javax.net.ssl.SSLPeerUnverifiedException;
  public abstract java.security.cert.Certificate[] getLocalCertificates();
  public abstract java.security.cert.Certificate[] getPeerCertificates()  throws javax.net.ssl.SSLPeerUnverifiedException;
  public abstract javax.net.ssl.SSLSessionContext getSessionContext();
  public abstract javax.security.cert.X509Certificate[] getPeerCertificateChain()  throws javax.net.ssl.SSLPeerUnverifiedException;
}
public class javax.net.ssl.SSLSessionBindingEvent
  extends java.util.EventObject
{
  public void <init>(javax.net.ssl.SSLSession, java.lang.String);
  public java.lang.String getName();
  public javax.net.ssl.SSLSession getSession();
}
public interface javax.net.ssl.SSLSessionBindingListener
  extends java.util.EventListener
{
  public abstract void valueBound(javax.net.ssl.SSLSessionBindingEvent);
  public abstract void valueUnbound(javax.net.ssl.SSLSessionBindingEvent);
}
public interface javax.net.ssl.SSLSessionContext
{
  public abstract int getSessionCacheSize();
  public abstract int getSessionTimeout();
  public abstract void setSessionCacheSize(int)  throws java.lang.IllegalArgumentException;
  public abstract void setSessionTimeout(int)  throws java.lang.IllegalArgumentException;
  public abstract java.util.Enumeration getIds();
  public abstract javax.net.ssl.SSLSession getSession(byte[]);
}
public abstract class javax.net.ssl.SSLSocket
  extends java.net.Socket
{
  public abstract boolean getEnableSessionCreation();
  public abstract boolean getNeedClientAuth();
  public abstract boolean getUseClientMode();
  public abstract boolean getWantClientAuth();
  public abstract void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public abstract void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public abstract void setEnableSessionCreation(boolean);
  public abstract void setEnabledCipherSuites(java.lang.String[]);
  public abstract void setEnabledProtocols(java.lang.String[]);
  public abstract void setNeedClientAuth(boolean);
  public abstract void setUseClientMode(boolean);
  public abstract void setWantClientAuth(boolean);
  public abstract void startHandshake()  throws java.io.IOException;
  public abstract java.lang.String[] getEnabledCipherSuites();
  public abstract java.lang.String[] getEnabledProtocols();
  public abstract java.lang.String[] getSupportedCipherSuites();
  public abstract java.lang.String[] getSupportedProtocols();
  public abstract javax.net.ssl.SSLSession getSession();
  public void setSSLParameters(javax.net.ssl.SSLParameters);
  public javax.net.ssl.SSLParameters getSSLParameters();
  public javax.net.ssl.SSLSession getHandshakeSession();
  protected void <init>();
  protected void <init>(java.lang.String, int)  throws java.io.IOException, java.net.UnknownHostException;
  protected void <init>(java.lang.String, int, java.net.InetAddress, int)  throws java.io.IOException, java.net.UnknownHostException;
  protected void <init>(java.net.InetAddress, int)  throws java.io.IOException;
  protected void <init>(java.net.InetAddress, int, java.net.InetAddress, int)  throws java.io.IOException;
}
public abstract class javax.net.ssl.SSLSocketFactory
  extends javax.net.SocketFactory
{
  public static javax.net.SocketFactory getDefault();
  public void <init>();
  public abstract java.lang.String[] getDefaultCipherSuites();
  public abstract java.lang.String[] getSupportedCipherSuites();
  public abstract java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean)  throws java.io.IOException;
}
public final class javax.net.ssl.StandardConstants
  extends java.lang.Object
{
  public static final int SNI_HOST_NAME;
}
public interface javax.net.ssl.TrustManager
{
}
public class javax.net.ssl.TrustManagerFactory
  extends java.lang.Object
{
  public static final java.lang.String getDefaultAlgorithm();
  public static final javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)  throws java.security.NoSuchAlgorithmException;
  public static final javax.net.ssl.TrustManagerFactory getInstance(java.lang.String, java.lang.String)  throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException;
  public static final javax.net.ssl.TrustManagerFactory getInstance(java.lang.String, java.security.Provider)  throws java.security.NoSuchAlgorithmException;
  public final void init(java.security.KeyStore)  throws java.security.KeyStoreException;
  public final void init(javax.net.ssl.ManagerFactoryParameters)  throws java.security.InvalidAlgorithmParameterException;
  public final java.lang.String getAlgorithm();
  public final java.security.Provider getProvider();
  public final javax.net.ssl.TrustManager[] getTrustManagers();
  protected void <init>(javax.net.ssl.TrustManagerFactorySpi, java.security.Provider, java.lang.String);
}
public abstract class javax.net.ssl.TrustManagerFactorySpi
  extends java.lang.Object
{
  public void <init>();
  protected abstract void engineInit(java.security.KeyStore)  throws java.security.KeyStoreException;
  protected abstract void engineInit(javax.net.ssl.ManagerFactoryParameters)  throws java.security.InvalidAlgorithmParameterException;
  protected abstract javax.net.ssl.TrustManager[] engineGetTrustManagers();
}
public abstract class javax.net.ssl.X509ExtendedKeyManager
  extends java.lang.Object
  implements javax.net.ssl.X509KeyManager
{
  public java.lang.String chooseEngineClientAlias(java.lang.String[], java.security.Principal[], javax.net.ssl.SSLEngine);
  public java.lang.String chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine);
  protected void <init>();
}
public abstract class javax.net.ssl.X509ExtendedTrustManager
  extends java.lang.Object
  implements javax.net.ssl.X509TrustManager
{
  public void <init>();
  public abstract void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String, java.net.Socket)  throws java.security.cert.CertificateException;
  public abstract void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String, javax.net.ssl.SSLEngine)  throws java.security.cert.CertificateException;
  public abstract void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, java.net.Socket)  throws java.security.cert.CertificateException;
  public abstract void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, javax.net.ssl.SSLEngine)  throws java.security.cert.CertificateException;
}
public interface javax.net.ssl.X509KeyManager
  extends javax.net.ssl.KeyManager
{
  public abstract java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket);
  public abstract java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket);
  public abstract java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[]);
  public abstract java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[]);
  public abstract java.security.PrivateKey getPrivateKey(java.lang.String);
  public abstract java.security.cert.X509Certificate[] getCertificateChain(java.lang.String);
}
public interface javax.net.ssl.X509TrustManager
  extends javax.net.ssl.TrustManager
{
  public abstract void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)  throws java.security.cert.CertificateException;
  public abstract void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)  throws java.security.cert.CertificateException;
  public abstract java.security.cert.X509Certificate[] getAcceptedIssuers();
}
public final class javax.security.auth.AuthPermission
  extends java.security.BasicPermission
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
}
public class javax.security.auth.DestroyFailedException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface javax.security.auth.Destroyable
{
  public abstract boolean isDestroyed();
  public abstract void destroy()  throws javax.security.auth.DestroyFailedException;
}
public final class javax.security.auth.PrivateCredentialPermission
  extends java.security.Permission
{
  public void <init>(java.lang.String, java.lang.String);
  public boolean implies(java.security.Permission);
  public java.lang.String getActions();
  public java.lang.String getCredentialClass();
  public java.lang.String[][] getPrincipals();
}
public final class javax.security.auth.Subject
  extends java.lang.Object
  implements java.io.Serializable
{
  public static java.lang.Object doAs(javax.security.auth.Subject, java.security.PrivilegedAction);
  public static java.lang.Object doAs(javax.security.auth.Subject, java.security.PrivilegedExceptionAction)  throws java.security.PrivilegedActionException;
  public static java.lang.Object doAsPrivileged(javax.security.auth.Subject, java.security.PrivilegedAction, java.security.AccessControlContext);
  public static java.lang.Object doAsPrivileged(javax.security.auth.Subject, java.security.PrivilegedExceptionAction, java.security.AccessControlContext)  throws java.security.PrivilegedActionException;
  public static javax.security.auth.Subject getSubject(java.security.AccessControlContext);
  public void <init>();
  public void <init>(boolean, java.util.Set, java.util.Set, java.util.Set);
  public boolean equals(java.lang.Object);
  public boolean isReadOnly();
  public int hashCode();
  public void setReadOnly();
  public java.lang.String toString();
  public java.util.Set getPrincipals();
  public java.util.Set getPrincipals(java.lang.Class);
  public java.util.Set getPrivateCredentials();
  public java.util.Set getPrivateCredentials(java.lang.Class);
  public java.util.Set getPublicCredentials();
  public java.util.Set getPublicCredentials(java.lang.Class);
}
public class javax.security.auth.SubjectDomainCombiner
  extends java.lang.Object
  implements java.security.DomainCombiner
{
  public void <init>(javax.security.auth.Subject);
  public java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[], java.security.ProtectionDomain[]);
  public javax.security.auth.Subject getSubject();
}
public interface javax.security.auth.callback.Callback
{
}
public interface javax.security.auth.callback.CallbackHandler
{
  public abstract void handle(javax.security.auth.callback.Callback[])  throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException;
}
public class javax.security.auth.callback.PasswordCallback
  extends java.lang.Object
  implements javax.security.auth.callback.Callback, java.io.Serializable
{
  public void <init>(java.lang.String, boolean);
  public boolean isEchoOn();
  public void clearPassword();
  public void setPassword(char[]);
  public char[] getPassword();
  public java.lang.String getPrompt();
}
public class javax.security.auth.callback.UnsupportedCallbackException
  extends java.lang.Exception
{
  public void <init>(javax.security.auth.callback.Callback);
  public void <init>(javax.security.auth.callback.Callback, java.lang.String);
  public javax.security.auth.callback.Callback getCallback();
}
public class javax.security.auth.login.LoginException
  extends java.security.GeneralSecurityException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public final class javax.security.auth.x500.X500Principal
  extends java.lang.Object
  implements java.security.Principal, java.io.Serializable
{
  public void <init>(byte[]);
  public void <init>(java.io.InputStream);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.util.Map);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public byte[] getEncoded();
  public java.lang.String getName();
  public java.lang.String getName(java.lang.String);
  public java.lang.String getName(java.lang.String, java.util.Map);
  public java.lang.String toString();
  public static final java.lang.String CANONICAL;
  public static final java.lang.String RFC1779;
  public static final java.lang.String RFC2253;
}
public abstract class javax.security.cert.Certificate
  extends java.lang.Object
{
  public void <init>();
  public abstract void verify(java.security.PublicKey)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, javax.security.cert.CertificateException;
  public abstract void verify(java.security.PublicKey, java.lang.String)  throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, javax.security.cert.CertificateException;
  public abstract byte[] getEncoded()  throws javax.security.cert.CertificateEncodingException;
  public abstract java.lang.String toString();
  public abstract java.security.PublicKey getPublicKey();
  public boolean equals(java.lang.Object);
  public int hashCode();
}
public class javax.security.cert.CertificateEncodingException
  extends javax.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.security.cert.CertificateException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.security.cert.CertificateExpiredException
  extends javax.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.security.cert.CertificateNotYetValidException
  extends javax.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class javax.security.cert.CertificateParsingException
  extends javax.security.cert.CertificateException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class javax.security.cert.X509Certificate
  extends javax.security.cert.Certificate
{
  public static final javax.security.cert.X509Certificate getInstance(byte[])  throws javax.security.cert.CertificateException;
  public static final javax.security.cert.X509Certificate getInstance(java.io.InputStream)  throws javax.security.cert.CertificateException;
  public void <init>();
  public abstract int getVersion();
  public abstract void checkValidity()  throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException;
  public abstract void checkValidity(java.util.Date)  throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException;
  public abstract byte[] getSigAlgParams();
  public abstract java.lang.String getSigAlgName();
  public abstract java.lang.String getSigAlgOID();
  public abstract java.math.BigInteger getSerialNumber();
  public abstract java.security.Principal getIssuerDN();
  public abstract java.security.Principal getSubjectDN();
  public abstract java.util.Date getNotAfter();
  public abstract java.util.Date getNotBefore();
}
public interface javax.sql.CommonDataSource
{
  public abstract int getLoginTimeout()  throws java.sql.SQLException;
  public abstract void setLogWriter(java.io.PrintWriter)  throws java.sql.SQLException;
  public abstract void setLoginTimeout(int)  throws java.sql.SQLException;
  public abstract java.io.PrintWriter getLogWriter()  throws java.sql.SQLException;
  public abstract java.util.logging.Logger getParentLogger()  throws java.sql.SQLFeatureNotSupportedException;
}
public class javax.sql.ConnectionEvent
  extends java.util.EventObject
{
  public void <init>(javax.sql.PooledConnection);
  public void <init>(javax.sql.PooledConnection, java.sql.SQLException);
  public java.sql.SQLException getSQLException();
}
public interface javax.sql.ConnectionEventListener
  extends java.util.EventListener
{
  public abstract void connectionClosed(javax.sql.ConnectionEvent);
  public abstract void connectionErrorOccurred(javax.sql.ConnectionEvent);
}
public interface javax.sql.ConnectionPoolDataSource
  extends javax.sql.CommonDataSource
{
  public abstract javax.sql.PooledConnection getPooledConnection()  throws java.sql.SQLException;
  public abstract javax.sql.PooledConnection getPooledConnection(java.lang.String, java.lang.String)  throws java.sql.SQLException;
}
public interface javax.sql.DataSource
  extends javax.sql.CommonDataSource, java.sql.Wrapper
{
  public abstract java.sql.Connection getConnection()  throws java.sql.SQLException;
  public abstract java.sql.Connection getConnection(java.lang.String, java.lang.String)  throws java.sql.SQLException;
}
public interface javax.sql.PooledConnection
{
  public abstract void addConnectionEventListener(javax.sql.ConnectionEventListener);
  public abstract void addStatementEventListener(javax.sql.StatementEventListener);
  public abstract void close()  throws java.sql.SQLException;
  public abstract void removeConnectionEventListener(javax.sql.ConnectionEventListener);
  public abstract void removeStatementEventListener(javax.sql.StatementEventListener);
  public abstract java.sql.Connection getConnection()  throws java.sql.SQLException;
}
public interface javax.sql.RowSet
  extends java.sql.ResultSet
{
  public abstract boolean getEscapeProcessing()  throws java.sql.SQLException;
  public abstract boolean isReadOnly();
  public abstract int getMaxFieldSize()  throws java.sql.SQLException;
  public abstract int getMaxRows()  throws java.sql.SQLException;
  public abstract int getQueryTimeout()  throws java.sql.SQLException;
  public abstract int getTransactionIsolation();
  public abstract void addRowSetListener(javax.sql.RowSetListener);
  public abstract void clearParameters()  throws java.sql.SQLException;
  public abstract void execute()  throws java.sql.SQLException;
  public abstract void removeRowSetListener(javax.sql.RowSetListener);
  public abstract void setArray(int, java.sql.Array)  throws java.sql.SQLException;
  public abstract void setAsciiStream(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setAsciiStream(int, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setAsciiStream(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setAsciiStream(java.lang.String, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setBigDecimal(int, java.math.BigDecimal)  throws java.sql.SQLException;
  public abstract void setBigDecimal(java.lang.String, java.math.BigDecimal)  throws java.sql.SQLException;
  public abstract void setBinaryStream(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBinaryStream(int, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setBinaryStream(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBinaryStream(java.lang.String, java.io.InputStream, int)  throws java.sql.SQLException;
  public abstract void setBlob(int, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBlob(int, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBlob(int, java.sql.Blob)  throws java.sql.SQLException;
  public abstract void setBlob(java.lang.String, java.io.InputStream)  throws java.sql.SQLException;
  public abstract void setBlob(java.lang.String, java.io.InputStream, long)  throws java.sql.SQLException;
  public abstract void setBlob(java.lang.String, java.sql.Blob)  throws java.sql.SQLException;
  public abstract void setBoolean(int, boolean)  throws java.sql.SQLException;
  public abstract void setBoolean(java.lang.String, boolean)  throws java.sql.SQLException;
  public abstract void setByte(int, byte)  throws java.sql.SQLException;
  public abstract void setByte(java.lang.String, byte)  throws java.sql.SQLException;
  public abstract void setBytes(int, byte[])  throws java.sql.SQLException;
  public abstract void setBytes(java.lang.String, byte[])  throws java.sql.SQLException;
  public abstract void setCharacterStream(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setCharacterStream(int, java.io.Reader, int)  throws java.sql.SQLException;
  public abstract void setCharacterStream(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setCharacterStream(java.lang.String, java.io.Reader, int)  throws java.sql.SQLException;
  public abstract void setClob(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setClob(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setClob(int, java.sql.Clob)  throws java.sql.SQLException;
  public abstract void setClob(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setClob(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setClob(java.lang.String, java.sql.Clob)  throws java.sql.SQLException;
  public abstract void setCommand(java.lang.String)  throws java.sql.SQLException;
  public abstract void setConcurrency(int)  throws java.sql.SQLException;
  public abstract void setDataSourceName(java.lang.String)  throws java.sql.SQLException;
  public abstract void setDate(int, java.sql.Date)  throws java.sql.SQLException;
  public abstract void setDate(int, java.sql.Date, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setDate(java.lang.String, java.sql.Date)  throws java.sql.SQLException;
  public abstract void setDate(java.lang.String, java.sql.Date, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setDouble(int, double)  throws java.sql.SQLException;
  public abstract void setDouble(java.lang.String, double)  throws java.sql.SQLException;
  public abstract void setEscapeProcessing(boolean)  throws java.sql.SQLException;
  public abstract void setFloat(int, float)  throws java.sql.SQLException;
  public abstract void setFloat(java.lang.String, float)  throws java.sql.SQLException;
  public abstract void setInt(int, int)  throws java.sql.SQLException;
  public abstract void setInt(java.lang.String, int)  throws java.sql.SQLException;
  public abstract void setLong(int, long)  throws java.sql.SQLException;
  public abstract void setLong(java.lang.String, long)  throws java.sql.SQLException;
  public abstract void setMaxFieldSize(int)  throws java.sql.SQLException;
  public abstract void setMaxRows(int)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNCharacterStream(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNClob(int, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNClob(int, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNClob(int, java.sql.NClob)  throws java.sql.SQLException;
  public abstract void setNClob(java.lang.String, java.io.Reader)  throws java.sql.SQLException;
  public abstract void setNClob(java.lang.String, java.io.Reader, long)  throws java.sql.SQLException;
  public abstract void setNClob(java.lang.String, java.sql.NClob)  throws java.sql.SQLException;
  public abstract void setNString(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setNString(java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract void setNull(int, int)  throws java.sql.SQLException;
  public abstract void setNull(int, int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setNull(java.lang.String, int)  throws java.sql.SQLException;
  public abstract void setNull(java.lang.String, int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setObject(int, java.lang.Object)  throws java.sql.SQLException;
  public abstract void setObject(int, java.lang.Object, int)  throws java.sql.SQLException;
  public abstract void setObject(int, java.lang.Object, int, int)  throws java.sql.SQLException;
  public abstract void setObject(java.lang.String, java.lang.Object)  throws java.sql.SQLException;
  public abstract void setObject(java.lang.String, java.lang.Object, int)  throws java.sql.SQLException;
  public abstract void setObject(java.lang.String, java.lang.Object, int, int)  throws java.sql.SQLException;
  public abstract void setPassword(java.lang.String)  throws java.sql.SQLException;
  public abstract void setQueryTimeout(int)  throws java.sql.SQLException;
  public abstract void setReadOnly(boolean)  throws java.sql.SQLException;
  public abstract void setRef(int, java.sql.Ref)  throws java.sql.SQLException;
  public abstract void setRowId(int, java.sql.RowId)  throws java.sql.SQLException;
  public abstract void setRowId(java.lang.String, java.sql.RowId)  throws java.sql.SQLException;
  public abstract void setSQLXML(int, java.sql.SQLXML)  throws java.sql.SQLException;
  public abstract void setSQLXML(java.lang.String, java.sql.SQLXML)  throws java.sql.SQLException;
  public abstract void setShort(int, short)  throws java.sql.SQLException;
  public abstract void setShort(java.lang.String, short)  throws java.sql.SQLException;
  public abstract void setString(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setString(java.lang.String, java.lang.String)  throws java.sql.SQLException;
  public abstract void setTime(int, java.sql.Time)  throws java.sql.SQLException;
  public abstract void setTime(int, java.sql.Time, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setTime(java.lang.String, java.sql.Time)  throws java.sql.SQLException;
  public abstract void setTime(java.lang.String, java.sql.Time, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setTimestamp(int, java.sql.Timestamp)  throws java.sql.SQLException;
  public abstract void setTimestamp(int, java.sql.Timestamp, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setTimestamp(java.lang.String, java.sql.Timestamp)  throws java.sql.SQLException;
  public abstract void setTimestamp(java.lang.String, java.sql.Timestamp, java.util.Calendar)  throws java.sql.SQLException;
  public abstract void setTransactionIsolation(int)  throws java.sql.SQLException;
  public abstract void setType(int)  throws java.sql.SQLException;
  public abstract void setTypeMap(java.util.Map)  throws java.sql.SQLException;
  public abstract void setURL(int, java.net.URL)  throws java.sql.SQLException;
  public abstract void setUrl(java.lang.String)  throws java.sql.SQLException;
  public abstract void setUsername(java.lang.String)  throws java.sql.SQLException;
  public abstract java.lang.String getCommand();
  public abstract java.lang.String getDataSourceName();
  public abstract java.lang.String getPassword();
  public abstract java.lang.String getUrl()  throws java.sql.SQLException;
  public abstract java.lang.String getUsername();
  public abstract java.util.Map getTypeMap()  throws java.sql.SQLException;
}
public class javax.sql.RowSetEvent
  extends java.util.EventObject
{
  public void <init>(javax.sql.RowSet);
}
public interface javax.sql.RowSetInternal
{
  public abstract void setMetaData(javax.sql.RowSetMetaData)  throws java.sql.SQLException;
  public abstract java.lang.Object[] getParams()  throws java.sql.SQLException;
  public abstract java.sql.Connection getConnection()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getOriginal()  throws java.sql.SQLException;
  public abstract java.sql.ResultSet getOriginalRow()  throws java.sql.SQLException;
}
public interface javax.sql.RowSetListener
  extends java.util.EventListener
{
  public abstract void cursorMoved(javax.sql.RowSetEvent);
  public abstract void rowChanged(javax.sql.RowSetEvent);
  public abstract void rowSetChanged(javax.sql.RowSetEvent);
}
public interface javax.sql.RowSetMetaData
  extends java.sql.ResultSetMetaData
{
  public abstract void setAutoIncrement(int, boolean)  throws java.sql.SQLException;
  public abstract void setCaseSensitive(int, boolean)  throws java.sql.SQLException;
  public abstract void setCatalogName(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setColumnCount(int)  throws java.sql.SQLException;
  public abstract void setColumnDisplaySize(int, int)  throws java.sql.SQLException;
  public abstract void setColumnLabel(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setColumnName(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setColumnType(int, int)  throws java.sql.SQLException;
  public abstract void setColumnTypeName(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setCurrency(int, boolean)  throws java.sql.SQLException;
  public abstract void setNullable(int, int)  throws java.sql.SQLException;
  public abstract void setPrecision(int, int)  throws java.sql.SQLException;
  public abstract void setScale(int, int)  throws java.sql.SQLException;
  public abstract void setSchemaName(int, java.lang.String)  throws java.sql.SQLException;
  public abstract void setSearchable(int, boolean)  throws java.sql.SQLException;
  public abstract void setSigned(int, boolean)  throws java.sql.SQLException;
  public abstract void setTableName(int, java.lang.String)  throws java.sql.SQLException;
}
public interface javax.sql.RowSetReader
{
  public abstract void readData(javax.sql.RowSetInternal)  throws java.sql.SQLException;
}
public interface javax.sql.RowSetWriter
{
  public abstract boolean writeData(javax.sql.RowSetInternal)  throws java.sql.SQLException;
}
public class javax.sql.StatementEvent
  extends java.util.EventObject
{
  public void <init>(javax.sql.PooledConnection, java.sql.PreparedStatement);
  public void <init>(javax.sql.PooledConnection, java.sql.PreparedStatement, java.sql.SQLException);
  public java.sql.PreparedStatement getStatement();
  public java.sql.SQLException getSQLException();
}
public interface javax.sql.StatementEventListener
  extends java.util.EventListener
{
  public abstract void statementClosed(javax.sql.StatementEvent);
  public abstract void statementErrorOccurred(javax.sql.StatementEvent);
}
public final class javax.xml.XMLConstants
  extends java.lang.Object
{
  public static final java.lang.String DEFAULT_NS_PREFIX;
  public static final java.lang.String FEATURE_SECURE_PROCESSING;
  public static final java.lang.String NULL_NS_URI;
  public static final java.lang.String RELAXNG_NS_URI;
  public static final java.lang.String W3C_XML_SCHEMA_INSTANCE_NS_URI;
  public static final java.lang.String W3C_XML_SCHEMA_NS_URI;
  public static final java.lang.String W3C_XPATH_DATATYPE_NS_URI;
  public static final java.lang.String XMLNS_ATTRIBUTE;
  public static final java.lang.String XMLNS_ATTRIBUTE_NS_URI;
  public static final java.lang.String XML_DTD_NS_URI;
  public static final java.lang.String XML_NS_PREFIX;
  public static final java.lang.String XML_NS_URI;
}
public class javax.xml.datatype.DatatypeConfigurationException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  public void printStackTrace();
  public void printStackTrace(java.io.PrintStream);
  public void printStackTrace(java.io.PrintWriter);
}
public final class javax.xml.datatype.DatatypeConstants
  extends java.lang.Object
{
  public static final int APRIL;
  public static final int AUGUST;
  public static final int DECEMBER;
  public static final int EQUAL;
  public static final int FEBRUARY;
  public static final int FIELD_UNDEFINED;
  public static final int GREATER;
  public static final int INDETERMINATE;
  public static final int JANUARY;
  public static final int JULY;
  public static final int JUNE;
  public static final int LESSER;
  public static final int MARCH;
  public static final int MAX_TIMEZONE_OFFSET;
  public static final int MAY;
  public static final int MIN_TIMEZONE_OFFSET;
  public static final int NOVEMBER;
  public static final int OCTOBER;
  public static final int SEPTEMBER;
  public static final javax.xml.datatype.DatatypeConstants$Field DAYS;
  public static final javax.xml.datatype.DatatypeConstants$Field HOURS;
  public static final javax.xml.datatype.DatatypeConstants$Field MINUTES;
  public static final javax.xml.datatype.DatatypeConstants$Field MONTHS;
  public static final javax.xml.datatype.DatatypeConstants$Field SECONDS;
  public static final javax.xml.datatype.DatatypeConstants$Field YEARS;
  public static final javax.xml.namespace.QName DATE;
  public static final javax.xml.namespace.QName DATETIME;
  public static final javax.xml.namespace.QName DURATION;
  public static final javax.xml.namespace.QName DURATION_DAYTIME;
  public static final javax.xml.namespace.QName DURATION_YEARMONTH;
  public static final javax.xml.namespace.QName GDAY;
  public static final javax.xml.namespace.QName GMONTH;
  public static final javax.xml.namespace.QName GMONTHDAY;
  public static final javax.xml.namespace.QName GYEAR;
  public static final javax.xml.namespace.QName GYEARMONTH;
  public static final javax.xml.namespace.QName TIME;
}
public final class javax.xml.datatype.DatatypeConstants$Field
  extends java.lang.Object
{
  public int getId();
  public java.lang.String toString();
}
public abstract class javax.xml.datatype.DatatypeFactory
  extends java.lang.Object
{
  public static javax.xml.datatype.DatatypeFactory newInstance()  throws javax.xml.datatype.DatatypeConfigurationException;
  public static javax.xml.datatype.DatatypeFactory newInstance(java.lang.String, java.lang.ClassLoader)  throws javax.xml.datatype.DatatypeConfigurationException;
  public abstract javax.xml.datatype.Duration newDuration(boolean, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigDecimal);
  public abstract javax.xml.datatype.Duration newDuration(java.lang.String);
  public abstract javax.xml.datatype.Duration newDuration(long);
  public abstract javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar();
  public abstract javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String);
  public abstract javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.math.BigInteger, int, int, int, int, int, java.math.BigDecimal, int);
  public abstract javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.util.GregorianCalendar);
  public javax.xml.datatype.Duration newDuration(boolean, int, int, int, int, int, int);
  public javax.xml.datatype.Duration newDurationDayTime(boolean, int, int, int, int);
  public javax.xml.datatype.Duration newDurationDayTime(boolean, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger);
  public javax.xml.datatype.Duration newDurationDayTime(java.lang.String);
  public javax.xml.datatype.Duration newDurationDayTime(long);
  public javax.xml.datatype.Duration newDurationYearMonth(boolean, int, int);
  public javax.xml.datatype.Duration newDurationYearMonth(boolean, java.math.BigInteger, java.math.BigInteger);
  public javax.xml.datatype.Duration newDurationYearMonth(java.lang.String);
  public javax.xml.datatype.Duration newDurationYearMonth(long);
  public javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(int, int, int, int, int, int, int, int);
  public javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarDate(int, int, int, int);
  public javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int, int, int, int);
  public javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int, int, int, int, int);
  public javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendarTime(int, int, int, java.math.BigDecimal, int);
  protected void <init>();
  public static final java.lang.String DATATYPEFACTORY_IMPLEMENTATION_CLASS;
  public static final java.lang.String DATATYPEFACTORY_PROPERTY;
}
public abstract class javax.xml.datatype.Duration
  extends java.lang.Object
{
  public void <init>();
  public abstract boolean isSet(javax.xml.datatype.DatatypeConstants$Field);
  public abstract int compare(javax.xml.datatype.Duration);
  public abstract int getSign();
  public abstract int hashCode();
  public abstract void addTo(java.util.Calendar);
  public abstract java.lang.Number getField(javax.xml.datatype.DatatypeConstants$Field);
  public abstract javax.xml.datatype.Duration add(javax.xml.datatype.Duration);
  public abstract javax.xml.datatype.Duration multiply(java.math.BigDecimal);
  public abstract javax.xml.datatype.Duration negate();
  public abstract javax.xml.datatype.Duration normalizeWith(java.util.Calendar);
  public boolean equals(java.lang.Object);
  public boolean isLongerThan(javax.xml.datatype.Duration);
  public boolean isShorterThan(javax.xml.datatype.Duration);
  public int getDays();
  public int getHours();
  public int getMinutes();
  public int getMonths();
  public int getSeconds();
  public int getYears();
  public long getTimeInMillis(java.util.Calendar);
  public long getTimeInMillis(java.util.Date);
  public void addTo(java.util.Date);
  public java.lang.String toString();
  public javax.xml.datatype.Duration multiply(int);
  public javax.xml.datatype.Duration subtract(javax.xml.datatype.Duration);
  public javax.xml.namespace.QName getXMLSchemaType();
}
public abstract class javax.xml.datatype.XMLGregorianCalendar
  extends java.lang.Object
  implements java.lang.Cloneable
{
  public void <init>();
  public abstract boolean isValid();
  public abstract int compare(javax.xml.datatype.XMLGregorianCalendar);
  public abstract int getDay();
  public abstract int getHour();
  public abstract int getMinute();
  public abstract int getMonth();
  public abstract int getSecond();
  public abstract int getTimezone();
  public abstract int getYear();
  public abstract void add(javax.xml.datatype.Duration);
  public abstract void clear();
  public abstract void reset();
  public abstract void setDay(int);
  public abstract void setFractionalSecond(java.math.BigDecimal);
  public abstract void setHour(int);
  public abstract void setMillisecond(int);
  public abstract void setMinute(int);
  public abstract void setMonth(int);
  public abstract void setSecond(int);
  public abstract void setTimezone(int);
  public abstract void setYear(int);
  public abstract void setYear(java.math.BigInteger);
  public abstract java.lang.Object clone();
  public abstract java.lang.String toXMLFormat();
  public abstract java.math.BigDecimal getFractionalSecond();
  public abstract java.math.BigInteger getEon();
  public abstract java.math.BigInteger getEonAndYear();
  public abstract java.util.GregorianCalendar toGregorianCalendar();
  public abstract java.util.GregorianCalendar toGregorianCalendar(java.util.TimeZone, java.util.Locale, javax.xml.datatype.XMLGregorianCalendar);
  public abstract java.util.TimeZone getTimeZone(int);
  public abstract javax.xml.datatype.XMLGregorianCalendar normalize();
  public abstract javax.xml.namespace.QName getXMLSchemaType();
  public boolean equals(java.lang.Object);
  public int getMillisecond();
  public int hashCode();
  public void setTime(int, int, int);
  public void setTime(int, int, int, int);
  public void setTime(int, int, int, java.math.BigDecimal);
  public java.lang.String toString();
}
public interface javax.xml.namespace.NamespaceContext
{
  public abstract java.lang.String getNamespaceURI(java.lang.String);
  public abstract java.lang.String getPrefix(java.lang.String);
  public abstract java.util.Iterator getPrefixes(java.lang.String);
}
public class javax.xml.namespace.QName
  extends java.lang.Object
  implements java.io.Serializable
{
  public static javax.xml.namespace.QName valueOf(java.lang.String);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.String);
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public final boolean equals(java.lang.Object);
  public final int hashCode();
  public java.lang.String getLocalPart();
  public java.lang.String getNamespaceURI();
  public java.lang.String getPrefix();
  public java.lang.String toString();
}
public abstract class javax.xml.parsers.DocumentBuilder
  extends java.lang.Object
{
  public abstract boolean isNamespaceAware();
  public abstract boolean isValidating();
  public abstract void setEntityResolver(org.xml.sax.EntityResolver);
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract org.w3c.dom.DOMImplementation getDOMImplementation();
  public abstract org.w3c.dom.Document newDocument();
  public abstract org.w3c.dom.Document parse(org.xml.sax.InputSource)  throws java.io.IOException, org.xml.sax.SAXException;
  public boolean isXIncludeAware();
  public void reset();
  public javax.xml.validation.Schema getSchema();
  public org.w3c.dom.Document parse(java.io.File)  throws java.io.IOException, org.xml.sax.SAXException;
  public org.w3c.dom.Document parse(java.io.InputStream)  throws java.io.IOException, org.xml.sax.SAXException;
  public org.w3c.dom.Document parse(java.io.InputStream, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public org.w3c.dom.Document parse(java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  protected void <init>();
}
public abstract class javax.xml.parsers.DocumentBuilderFactory
  extends java.lang.Object
{
  public static javax.xml.parsers.DocumentBuilderFactory newInstance();
  public static javax.xml.parsers.DocumentBuilderFactory newInstance(java.lang.String, java.lang.ClassLoader);
  public abstract boolean getFeature(java.lang.String)  throws javax.xml.parsers.ParserConfigurationException;
  public abstract void setAttribute(java.lang.String, java.lang.Object)  throws java.lang.IllegalArgumentException;
  public abstract void setFeature(java.lang.String, boolean)  throws javax.xml.parsers.ParserConfigurationException;
  public abstract java.lang.Object getAttribute(java.lang.String)  throws java.lang.IllegalArgumentException;
  public abstract javax.xml.parsers.DocumentBuilder newDocumentBuilder()  throws javax.xml.parsers.ParserConfigurationException;
  public boolean isCoalescing();
  public boolean isExpandEntityReferences();
  public boolean isIgnoringComments();
  public boolean isIgnoringElementContentWhitespace();
  public boolean isNamespaceAware();
  public boolean isValidating();
  public boolean isXIncludeAware();
  public void setCoalescing(boolean);
  public void setExpandEntityReferences(boolean);
  public void setIgnoringComments(boolean);
  public void setIgnoringElementContentWhitespace(boolean);
  public void setNamespaceAware(boolean);
  public void setSchema(javax.xml.validation.Schema);
  public void setValidating(boolean);
  public void setXIncludeAware(boolean);
  public javax.xml.validation.Schema getSchema();
  protected void <init>();
}
public class javax.xml.parsers.FactoryConfigurationError
  extends java.lang.Error
{
  public void <init>();
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.Exception, java.lang.String);
  public void <init>(java.lang.String);
  public java.lang.Exception getException();
  public java.lang.String getMessage();
}
public class javax.xml.parsers.ParserConfigurationException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.String);
}
public abstract class javax.xml.parsers.SAXParser
  extends java.lang.Object
{
  public abstract boolean isNamespaceAware();
  public abstract boolean isValidating();
  public abstract void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract org.xml.sax.Parser getParser()  throws org.xml.sax.SAXException;
  public abstract org.xml.sax.XMLReader getXMLReader()  throws org.xml.sax.SAXException;
  public boolean isXIncludeAware();
  public void parse(java.io.File, org.xml.sax.HandlerBase)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(java.io.File, org.xml.sax.helpers.DefaultHandler)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(java.io.InputStream, org.xml.sax.HandlerBase)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(java.io.InputStream, org.xml.sax.HandlerBase, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(java.io.InputStream, org.xml.sax.helpers.DefaultHandler)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(java.io.InputStream, org.xml.sax.helpers.DefaultHandler, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(java.lang.String, org.xml.sax.HandlerBase)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(java.lang.String, org.xml.sax.helpers.DefaultHandler)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(org.xml.sax.InputSource, org.xml.sax.HandlerBase)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(org.xml.sax.InputSource, org.xml.sax.helpers.DefaultHandler)  throws java.io.IOException, org.xml.sax.SAXException;
  public void reset();
  public javax.xml.validation.Schema getSchema();
  protected void <init>();
}
public abstract class javax.xml.parsers.SAXParserFactory
  extends java.lang.Object
{
  public static javax.xml.parsers.SAXParserFactory newInstance();
  public static javax.xml.parsers.SAXParserFactory newInstance(java.lang.String, java.lang.ClassLoader);
  public abstract boolean getFeature(java.lang.String)  throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract void setFeature(java.lang.String, boolean)  throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract javax.xml.parsers.SAXParser newSAXParser()  throws javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException;
  public boolean isNamespaceAware();
  public boolean isValidating();
  public boolean isXIncludeAware();
  public void setNamespaceAware(boolean);
  public void setSchema(javax.xml.validation.Schema);
  public void setValidating(boolean);
  public void setXIncludeAware(boolean);
  public javax.xml.validation.Schema getSchema();
  protected void <init>();
}
public interface javax.xml.transform.ErrorListener
{
  public abstract void error(javax.xml.transform.TransformerException)  throws javax.xml.transform.TransformerException;
  public abstract void fatalError(javax.xml.transform.TransformerException)  throws javax.xml.transform.TransformerException;
  public abstract void warning(javax.xml.transform.TransformerException)  throws javax.xml.transform.TransformerException;
}
public class javax.xml.transform.OutputKeys
  extends java.lang.Object
{
  public static final java.lang.String CDATA_SECTION_ELEMENTS;
  public static final java.lang.String DOCTYPE_PUBLIC;
  public static final java.lang.String DOCTYPE_SYSTEM;
  public static final java.lang.String ENCODING;
  public static final java.lang.String INDENT;
  public static final java.lang.String MEDIA_TYPE;
  public static final java.lang.String METHOD;
  public static final java.lang.String OMIT_XML_DECLARATION;
  public static final java.lang.String STANDALONE;
  public static final java.lang.String VERSION;
}
public interface javax.xml.transform.Result
{
  public abstract void setSystemId(java.lang.String);
  public abstract java.lang.String getSystemId();
  public static final java.lang.String PI_DISABLE_OUTPUT_ESCAPING;
  public static final java.lang.String PI_ENABLE_OUTPUT_ESCAPING;
}
public interface javax.xml.transform.Source
{
  public abstract void setSystemId(java.lang.String);
  public abstract java.lang.String getSystemId();
}
public interface javax.xml.transform.SourceLocator
{
  public abstract int getColumnNumber();
  public abstract int getLineNumber();
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
}
public interface javax.xml.transform.Templates
{
  public abstract java.util.Properties getOutputProperties();
  public abstract javax.xml.transform.Transformer newTransformer()  throws javax.xml.transform.TransformerConfigurationException;
}
public abstract class javax.xml.transform.Transformer
  extends java.lang.Object
{
  public abstract void clearParameters();
  public abstract void setErrorListener(javax.xml.transform.ErrorListener)  throws java.lang.IllegalArgumentException;
  public abstract void setOutputProperties(java.util.Properties);
  public abstract void setOutputProperty(java.lang.String, java.lang.String)  throws java.lang.IllegalArgumentException;
  public abstract void setParameter(java.lang.String, java.lang.Object);
  public abstract void setURIResolver(javax.xml.transform.URIResolver);
  public abstract void transform(javax.xml.transform.Source, javax.xml.transform.Result)  throws javax.xml.transform.TransformerException;
  public abstract java.lang.Object getParameter(java.lang.String);
  public abstract java.lang.String getOutputProperty(java.lang.String)  throws java.lang.IllegalArgumentException;
  public abstract java.util.Properties getOutputProperties();
  public abstract javax.xml.transform.ErrorListener getErrorListener();
  public abstract javax.xml.transform.URIResolver getURIResolver();
  public void reset();
  protected void <init>();
}
public class javax.xml.transform.TransformerConfigurationException
  extends javax.xml.transform.TransformerException
{
  public void <init>();
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, javax.xml.transform.SourceLocator);
  public void <init>(java.lang.String, javax.xml.transform.SourceLocator, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
}
public class javax.xml.transform.TransformerException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Throwable);
  public void <init>(java.lang.String, javax.xml.transform.SourceLocator);
  public void <init>(java.lang.String, javax.xml.transform.SourceLocator, java.lang.Throwable);
  public void <init>(java.lang.Throwable);
  public void printStackTrace();
  public void printStackTrace(java.io.PrintStream);
  public void printStackTrace(java.io.PrintWriter);
  public void setLocator(javax.xml.transform.SourceLocator);
  public java.lang.String getLocationAsString();
  public java.lang.String getMessageAndLocation();
  public java.lang.Throwable getCause();
  public java.lang.Throwable getException();
  public java.lang.Throwable initCause(java.lang.Throwable);
  public javax.xml.transform.SourceLocator getLocator();
}
public abstract class javax.xml.transform.TransformerFactory
  extends java.lang.Object
{
  public static javax.xml.transform.TransformerFactory newInstance()  throws javax.xml.transform.TransformerFactoryConfigurationError;
  public static javax.xml.transform.TransformerFactory newInstance(java.lang.String, java.lang.ClassLoader)  throws javax.xml.transform.TransformerFactoryConfigurationError;
  public abstract boolean getFeature(java.lang.String);
  public abstract void setAttribute(java.lang.String, java.lang.Object);
  public abstract void setErrorListener(javax.xml.transform.ErrorListener);
  public abstract void setFeature(java.lang.String, boolean)  throws javax.xml.transform.TransformerConfigurationException;
  public abstract void setURIResolver(javax.xml.transform.URIResolver);
  public abstract java.lang.Object getAttribute(java.lang.String);
  public abstract javax.xml.transform.ErrorListener getErrorListener();
  public abstract javax.xml.transform.Source getAssociatedStylesheet(javax.xml.transform.Source, java.lang.String, java.lang.String, java.lang.String)  throws javax.xml.transform.TransformerConfigurationException;
  public abstract javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)  throws javax.xml.transform.TransformerConfigurationException;
  public abstract javax.xml.transform.Transformer newTransformer()  throws javax.xml.transform.TransformerConfigurationException;
  public abstract javax.xml.transform.Transformer newTransformer(javax.xml.transform.Source)  throws javax.xml.transform.TransformerConfigurationException;
  public abstract javax.xml.transform.URIResolver getURIResolver();
  protected void <init>();
}
public class javax.xml.transform.TransformerFactoryConfigurationError
  extends java.lang.Error
{
  public void <init>();
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.Exception, java.lang.String);
  public void <init>(java.lang.String);
  public java.lang.Exception getException();
  public java.lang.String getMessage();
}
public interface javax.xml.transform.URIResolver
{
  public abstract javax.xml.transform.Source resolve(java.lang.String, java.lang.String)  throws javax.xml.transform.TransformerException;
}
public interface javax.xml.transform.dom.DOMLocator
  extends javax.xml.transform.SourceLocator
{
  public abstract org.w3c.dom.Node getOriginatingNode();
}
public class javax.xml.transform.dom.DOMResult
  extends java.lang.Object
  implements javax.xml.transform.Result
{
  public void <init>();
  public void <init>(org.w3c.dom.Node);
  public void <init>(org.w3c.dom.Node, java.lang.String);
  public void <init>(org.w3c.dom.Node, org.w3c.dom.Node);
  public void <init>(org.w3c.dom.Node, org.w3c.dom.Node, java.lang.String);
  public void setNextSibling(org.w3c.dom.Node);
  public void setNode(org.w3c.dom.Node);
  public void setSystemId(java.lang.String);
  public java.lang.String getSystemId();
  public org.w3c.dom.Node getNextSibling();
  public org.w3c.dom.Node getNode();
  public static final java.lang.String FEATURE;
}
public class javax.xml.transform.dom.DOMSource
  extends java.lang.Object
  implements javax.xml.transform.Source
{
  public void <init>();
  public void <init>(org.w3c.dom.Node);
  public void <init>(org.w3c.dom.Node, java.lang.String);
  public void setNode(org.w3c.dom.Node);
  public void setSystemId(java.lang.String);
  public java.lang.String getSystemId();
  public org.w3c.dom.Node getNode();
  public static final java.lang.String FEATURE;
}
public class javax.xml.transform.sax.SAXResult
  extends java.lang.Object
  implements javax.xml.transform.Result
{
  public void <init>();
  public void <init>(org.xml.sax.ContentHandler);
  public void setHandler(org.xml.sax.ContentHandler);
  public void setLexicalHandler(org.xml.sax.ext.LexicalHandler);
  public void setSystemId(java.lang.String);
  public java.lang.String getSystemId();
  public org.xml.sax.ContentHandler getHandler();
  public org.xml.sax.ext.LexicalHandler getLexicalHandler();
  public static final java.lang.String FEATURE;
}
public class javax.xml.transform.sax.SAXSource
  extends java.lang.Object
  implements javax.xml.transform.Source
{
  public static org.xml.sax.InputSource sourceToInputSource(javax.xml.transform.Source);
  public void <init>();
  public void <init>(org.xml.sax.InputSource);
  public void <init>(org.xml.sax.XMLReader, org.xml.sax.InputSource);
  public void setInputSource(org.xml.sax.InputSource);
  public void setSystemId(java.lang.String);
  public void setXMLReader(org.xml.sax.XMLReader);
  public java.lang.String getSystemId();
  public org.xml.sax.InputSource getInputSource();
  public org.xml.sax.XMLReader getXMLReader();
  public static final java.lang.String FEATURE;
}
public abstract class javax.xml.transform.sax.SAXTransformerFactory
  extends javax.xml.transform.TransformerFactory
{
  public abstract javax.xml.transform.sax.TemplatesHandler newTemplatesHandler()  throws javax.xml.transform.TransformerConfigurationException;
  public abstract javax.xml.transform.sax.TransformerHandler newTransformerHandler()  throws javax.xml.transform.TransformerConfigurationException;
  public abstract javax.xml.transform.sax.TransformerHandler newTransformerHandler(javax.xml.transform.Source)  throws javax.xml.transform.TransformerConfigurationException;
  public abstract javax.xml.transform.sax.TransformerHandler newTransformerHandler(javax.xml.transform.Templates)  throws javax.xml.transform.TransformerConfigurationException;
  public abstract org.xml.sax.XMLFilter newXMLFilter(javax.xml.transform.Source)  throws javax.xml.transform.TransformerConfigurationException;
  public abstract org.xml.sax.XMLFilter newXMLFilter(javax.xml.transform.Templates)  throws javax.xml.transform.TransformerConfigurationException;
  protected void <init>();
  public static final java.lang.String FEATURE;
  public static final java.lang.String FEATURE_XMLFILTER;
}
public interface javax.xml.transform.sax.TemplatesHandler
  extends org.xml.sax.ContentHandler
{
  public abstract void setSystemId(java.lang.String);
  public abstract java.lang.String getSystemId();
  public abstract javax.xml.transform.Templates getTemplates();
}
public interface javax.xml.transform.sax.TransformerHandler
  extends org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler, org.xml.sax.DTDHandler
{
  public abstract void setResult(javax.xml.transform.Result)  throws java.lang.IllegalArgumentException;
  public abstract void setSystemId(java.lang.String);
  public abstract java.lang.String getSystemId();
  public abstract javax.xml.transform.Transformer getTransformer();
}
public class javax.xml.transform.stream.StreamResult
  extends java.lang.Object
  implements javax.xml.transform.Result
{
  public void <init>();
  public void <init>(java.io.File);
  public void <init>(java.io.OutputStream);
  public void <init>(java.io.Writer);
  public void <init>(java.lang.String);
  public void setOutputStream(java.io.OutputStream);
  public void setSystemId(java.io.File);
  public void setSystemId(java.lang.String);
  public void setWriter(java.io.Writer);
  public java.io.OutputStream getOutputStream();
  public java.io.Writer getWriter();
  public java.lang.String getSystemId();
  public static final java.lang.String FEATURE;
}
public class javax.xml.transform.stream.StreamSource
  extends java.lang.Object
  implements javax.xml.transform.Source
{
  public void <init>();
  public void <init>(java.io.File);
  public void <init>(java.io.InputStream);
  public void <init>(java.io.InputStream, java.lang.String);
  public void <init>(java.io.Reader);
  public void <init>(java.io.Reader, java.lang.String);
  public void <init>(java.lang.String);
  public void setInputStream(java.io.InputStream);
  public void setPublicId(java.lang.String);
  public void setReader(java.io.Reader);
  public void setSystemId(java.io.File);
  public void setSystemId(java.lang.String);
  public java.io.InputStream getInputStream();
  public java.io.Reader getReader();
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
  public static final java.lang.String FEATURE;
}
public abstract class javax.xml.validation.Schema
  extends java.lang.Object
{
  public abstract javax.xml.validation.Validator newValidator();
  public abstract javax.xml.validation.ValidatorHandler newValidatorHandler();
  protected void <init>();
}
public abstract class javax.xml.validation.SchemaFactory
  extends java.lang.Object
{
  public static javax.xml.validation.SchemaFactory newInstance(java.lang.String);
  public static javax.xml.validation.SchemaFactory newInstance(java.lang.String, java.lang.String, java.lang.ClassLoader);
  public abstract boolean isSchemaLanguageSupported(java.lang.String);
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract void setResourceResolver(org.w3c.dom.ls.LSResourceResolver);
  public abstract javax.xml.validation.Schema newSchema()  throws org.xml.sax.SAXException;
  public abstract javax.xml.validation.Schema newSchema(javax.xml.transform.Source[])  throws org.xml.sax.SAXException;
  public abstract org.w3c.dom.ls.LSResourceResolver getResourceResolver();
  public abstract org.xml.sax.ErrorHandler getErrorHandler();
  public boolean getFeature(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setFeature(java.lang.String, boolean)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public javax.xml.validation.Schema newSchema(java.io.File)  throws org.xml.sax.SAXException;
  public javax.xml.validation.Schema newSchema(java.net.URL)  throws org.xml.sax.SAXException;
  public javax.xml.validation.Schema newSchema(javax.xml.transform.Source)  throws org.xml.sax.SAXException;
  protected void <init>();
}
public abstract class javax.xml.validation.SchemaFactoryLoader
  extends java.lang.Object
{
  public abstract javax.xml.validation.SchemaFactory newFactory(java.lang.String);
  protected void <init>();
}
public abstract class javax.xml.validation.TypeInfoProvider
  extends java.lang.Object
{
  public abstract boolean isIdAttribute(int);
  public abstract boolean isSpecified(int);
  public abstract org.w3c.dom.TypeInfo getAttributeTypeInfo(int);
  public abstract org.w3c.dom.TypeInfo getElementTypeInfo();
  protected void <init>();
}
public abstract class javax.xml.validation.Validator
  extends java.lang.Object
{
  public abstract void reset();
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract void setResourceResolver(org.w3c.dom.ls.LSResourceResolver);
  public abstract void validate(javax.xml.transform.Source, javax.xml.transform.Result)  throws java.io.IOException, org.xml.sax.SAXException;
  public abstract org.w3c.dom.ls.LSResourceResolver getResourceResolver();
  public abstract org.xml.sax.ErrorHandler getErrorHandler();
  public boolean getFeature(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setFeature(java.lang.String, boolean)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void validate(javax.xml.transform.Source)  throws java.io.IOException, org.xml.sax.SAXException;
  public java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  protected void <init>();
}
public abstract class javax.xml.validation.ValidatorHandler
  extends java.lang.Object
  implements org.xml.sax.ContentHandler
{
  public abstract void setContentHandler(org.xml.sax.ContentHandler);
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract void setResourceResolver(org.w3c.dom.ls.LSResourceResolver);
  public abstract javax.xml.validation.TypeInfoProvider getTypeInfoProvider();
  public abstract org.w3c.dom.ls.LSResourceResolver getResourceResolver();
  public abstract org.xml.sax.ContentHandler getContentHandler();
  public abstract org.xml.sax.ErrorHandler getErrorHandler();
  public boolean getFeature(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setFeature(java.lang.String, boolean)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  protected void <init>();
}
public interface javax.xml.xpath.XPath
{
  public abstract void reset();
  public abstract void setNamespaceContext(javax.xml.namespace.NamespaceContext);
  public abstract void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver);
  public abstract void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver);
  public abstract java.lang.Object evaluate(java.lang.String, java.lang.Object, javax.xml.namespace.QName)  throws javax.xml.xpath.XPathExpressionException;
  public abstract java.lang.Object evaluate(java.lang.String, org.xml.sax.InputSource, javax.xml.namespace.QName)  throws javax.xml.xpath.XPathExpressionException;
  public abstract java.lang.String evaluate(java.lang.String, java.lang.Object)  throws javax.xml.xpath.XPathExpressionException;
  public abstract java.lang.String evaluate(java.lang.String, org.xml.sax.InputSource)  throws javax.xml.xpath.XPathExpressionException;
  public abstract javax.xml.namespace.NamespaceContext getNamespaceContext();
  public abstract javax.xml.xpath.XPathExpression compile(java.lang.String)  throws javax.xml.xpath.XPathExpressionException;
  public abstract javax.xml.xpath.XPathFunctionResolver getXPathFunctionResolver();
  public abstract javax.xml.xpath.XPathVariableResolver getXPathVariableResolver();
}
public class javax.xml.xpath.XPathConstants
  extends java.lang.Object
{
  public static final java.lang.String DOM_OBJECT_MODEL;
  public static final javax.xml.namespace.QName BOOLEAN;
  public static final javax.xml.namespace.QName NODE;
  public static final javax.xml.namespace.QName NODESET;
  public static final javax.xml.namespace.QName NUMBER;
  public static final javax.xml.namespace.QName STRING;
}
public class javax.xml.xpath.XPathException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.Throwable);
  public void printStackTrace();
  public void printStackTrace(java.io.PrintStream);
  public void printStackTrace(java.io.PrintWriter);
  public java.lang.Throwable getCause();
}
public interface javax.xml.xpath.XPathExpression
{
  public abstract java.lang.Object evaluate(java.lang.Object, javax.xml.namespace.QName)  throws javax.xml.xpath.XPathExpressionException;
  public abstract java.lang.Object evaluate(org.xml.sax.InputSource, javax.xml.namespace.QName)  throws javax.xml.xpath.XPathExpressionException;
  public abstract java.lang.String evaluate(java.lang.Object)  throws javax.xml.xpath.XPathExpressionException;
  public abstract java.lang.String evaluate(org.xml.sax.InputSource)  throws javax.xml.xpath.XPathExpressionException;
}
public class javax.xml.xpath.XPathExpressionException
  extends javax.xml.xpath.XPathException
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.Throwable);
}
public abstract class javax.xml.xpath.XPathFactory
  extends java.lang.Object
{
  public static final javax.xml.xpath.XPathFactory newInstance();
  public static final javax.xml.xpath.XPathFactory newInstance(java.lang.String)  throws javax.xml.xpath.XPathFactoryConfigurationException;
  public static javax.xml.xpath.XPathFactory newInstance(java.lang.String, java.lang.String, java.lang.ClassLoader)  throws javax.xml.xpath.XPathFactoryConfigurationException;
  public abstract boolean getFeature(java.lang.String)  throws javax.xml.xpath.XPathFactoryConfigurationException;
  public abstract boolean isObjectModelSupported(java.lang.String);
  public abstract void setFeature(java.lang.String, boolean)  throws javax.xml.xpath.XPathFactoryConfigurationException;
  public abstract void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver);
  public abstract void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver);
  public abstract javax.xml.xpath.XPath newXPath();
  protected void <init>();
  public static final java.lang.String DEFAULT_OBJECT_MODEL_URI;
  public static final java.lang.String DEFAULT_PROPERTY_NAME;
}
public class javax.xml.xpath.XPathFactoryConfigurationException
  extends javax.xml.xpath.XPathException
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.Throwable);
}
public interface javax.xml.xpath.XPathFunction
{
  public abstract java.lang.Object evaluate(java.util.List)  throws javax.xml.xpath.XPathFunctionException;
}
public class javax.xml.xpath.XPathFunctionException
  extends javax.xml.xpath.XPathExpressionException
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.Throwable);
}
public interface javax.xml.xpath.XPathFunctionResolver
{
  public abstract javax.xml.xpath.XPathFunction resolveFunction(javax.xml.namespace.QName, int);
}
public interface javax.xml.xpath.XPathVariableResolver
{
  public abstract java.lang.Object resolveVariable(javax.xml.namespace.QName);
}
public class junit.framework.Assert
  extends java.lang.Object
{
  public static void assertEquals(boolean, boolean);
  public static void assertEquals(byte, byte);
  public static void assertEquals(char, char);
  public static void assertEquals(double, double, double);
  public static void assertEquals(float, float, float);
  public static void assertEquals(int, int);
  public static void assertEquals(java.lang.Object, java.lang.Object);
  public static void assertEquals(java.lang.String, boolean, boolean);
  public static void assertEquals(java.lang.String, byte, byte);
  public static void assertEquals(java.lang.String, char, char);
  public static void assertEquals(java.lang.String, double, double, double);
  public static void assertEquals(java.lang.String, float, float, float);
  public static void assertEquals(java.lang.String, int, int);
  public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object);
  public static void assertEquals(java.lang.String, java.lang.String);
  public static void assertEquals(java.lang.String, java.lang.String, java.lang.String);
  public static void assertEquals(java.lang.String, long, long);
  public static void assertEquals(java.lang.String, short, short);
  public static void assertEquals(long, long);
  public static void assertEquals(short, short);
  public static void assertFalse(boolean);
  public static void assertFalse(java.lang.String, boolean);
  public static void assertNotNull(java.lang.Object);
  public static void assertNotNull(java.lang.String, java.lang.Object);
  public static void assertNotSame(java.lang.Object, java.lang.Object);
  public static void assertNotSame(java.lang.String, java.lang.Object, java.lang.Object);
  public static void assertNull(java.lang.Object);
  public static void assertNull(java.lang.String, java.lang.Object);
  public static void assertSame(java.lang.Object, java.lang.Object);
  public static void assertSame(java.lang.String, java.lang.Object, java.lang.Object);
  public static void assertTrue(boolean);
  public static void assertTrue(java.lang.String, boolean);
  public static void fail();
  public static void fail(java.lang.String);
  public static void failNotEquals(java.lang.String, java.lang.Object, java.lang.Object);
  public static void failNotSame(java.lang.String, java.lang.Object, java.lang.Object);
  public static void failSame(java.lang.String);
  public static java.lang.String format(java.lang.String, java.lang.Object, java.lang.Object);
  protected void <init>();
}
public class junit.framework.AssertionFailedError
  extends java.lang.AssertionError
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class junit.framework.ComparisonFailure
  extends junit.framework.AssertionFailedError
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String);
  public java.lang.String getActual();
  public java.lang.String getExpected();
  public java.lang.String getMessage();
}
public interface junit.framework.Protectable
{
  public abstract void protect()  throws java.lang.Throwable;
}
public interface junit.framework.Test
{
  public abstract int countTestCases();
  public abstract void run(junit.framework.TestResult);
}
public abstract class junit.framework.TestCase
  extends junit.framework.Assert
  implements junit.framework.Test
{
  public void <init>();
  public void <init>(java.lang.String);
  public int countTestCases();
  public void run(junit.framework.TestResult);
  public void runBare()  throws java.lang.Throwable;
  public void setName(java.lang.String);
  public java.lang.String getName();
  public java.lang.String toString();
  public junit.framework.TestResult run();
  protected void runTest()  throws java.lang.Throwable;
  protected void setUp()  throws java.lang.Exception;
  protected void tearDown()  throws java.lang.Exception;
  protected junit.framework.TestResult createResult();
}
public class junit.framework.TestFailure
  extends java.lang.Object
{
  public void <init>(junit.framework.Test, java.lang.Throwable);
  public boolean isFailure();
  public java.lang.String exceptionMessage();
  public java.lang.String toString();
  public java.lang.String trace();
  public java.lang.Throwable thrownException();
  public junit.framework.Test failedTest();
  protected java.lang.Throwable fThrownException;
  protected junit.framework.Test fFailedTest;
}
public interface junit.framework.TestListener
{
  public abstract void addError(junit.framework.Test, java.lang.Throwable);
  public abstract void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public abstract void endTest(junit.framework.Test);
  public abstract void startTest(junit.framework.Test);
}
public class junit.framework.TestResult
  extends java.lang.Object
{
  public void <init>();
  public boolean shouldStop();
  public boolean wasSuccessful();
  public int errorCount();
  public int failureCount();
  public int runCount();
  public void addError(junit.framework.Test, java.lang.Throwable);
  public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public void addListener(junit.framework.TestListener);
  public void endTest(junit.framework.Test);
  public void removeListener(junit.framework.TestListener);
  public void runProtected(junit.framework.Test, junit.framework.Protectable);
  public void startTest(junit.framework.Test);
  public void stop();
  public java.util.Enumeration errors();
  public java.util.Enumeration failures();
  protected void run(junit.framework.TestCase);
  protected int fRunTests;
  protected java.util.Vector fErrors;
  protected java.util.Vector fFailures;
  protected java.util.Vector fListeners;
}
public class junit.framework.TestSuite
  extends java.lang.Object
  implements junit.framework.Test
{
  public static java.lang.reflect.Constructor getTestConstructor(java.lang.Class)  throws java.lang.NoSuchMethodException;
  public static junit.framework.Test createTest(java.lang.Class, java.lang.String);
  public static junit.framework.Test warning(java.lang.String);
  public void <init>();
  public void <init>(java.lang.Class);
  public void <init>(java.lang.Class, java.lang.String);
  public void <init>(java.lang.Class[]);
  public void <init>(java.lang.Class[], java.lang.String);
  public void <init>(java.lang.String);
  public int countTestCases();
  public int testCount();
  public void addTest(junit.framework.Test);
  public void addTestSuite(java.lang.Class);
  public void run(junit.framework.TestResult);
  public void runTest(junit.framework.Test, junit.framework.TestResult);
  public void setName(java.lang.String);
  public java.lang.String getName();
  public java.lang.String toString();
  public java.util.Enumeration tests();
  public junit.framework.Test testAt(int);
}
public abstract class junit.runner.BaseTestRunner
  extends java.lang.Object
  implements junit.framework.TestListener
{
  public static boolean inVAJava();
  public static int getPreference(java.lang.String, int);
  public static void savePreferences()  throws java.io.IOException;
  public static java.lang.String getFilteredTrace(java.lang.String);
  public static java.lang.String getFilteredTrace(java.lang.Throwable);
  public static java.lang.String getPreference(java.lang.String);
  public static java.lang.String truncate(java.lang.String);
  public void <init>();
  public abstract void testEnded(java.lang.String);
  public abstract void testFailed(int, junit.framework.Test, java.lang.Throwable);
  public abstract void testStarted(java.lang.String);
  public void addError(junit.framework.Test, java.lang.Throwable);
  public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError);
  public void endTest(junit.framework.Test);
  public void setLoading(boolean);
  public void setPreference(java.lang.String, java.lang.String);
  public void startTest(junit.framework.Test);
  public java.lang.String elapsedTimeAsString(long);
  public java.lang.String extractClassName(java.lang.String);
  public junit.framework.Test getTest(java.lang.String);
  public junit.runner.TestSuiteLoader getLoader();
  protected static boolean showStackRaw();
  protected static void setPreferences(java.util.Properties);
  protected static java.util.Properties getPreferences();
  protected abstract void runFailed(java.lang.String);
  protected boolean useReloadingTestSuiteLoader();
  protected void clearStatus();
  protected java.lang.Class loadSuiteClass(java.lang.String)  throws java.lang.ClassNotFoundException;
  protected java.lang.String processArguments(java.lang.String[]);
  public static final java.lang.String SUITE_METHODNAME;
}
public interface junit.runner.TestSuiteLoader
{
  public abstract java.lang.Class load(java.lang.String)  throws java.lang.ClassNotFoundException;
  public abstract java.lang.Class reload(java.lang.Class)  throws java.lang.ClassNotFoundException;
}
public class junit.runner.Version
  extends java.lang.Object
{
  public static java.lang.String id();
}
public class org.apache.http.conn.ConnectTimeoutException
  extends java.io.InterruptedIOException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public interface org.apache.http.conn.scheme.HostNameResolver
{
  public abstract java.net.InetAddress resolve(java.lang.String)  throws java.io.IOException;
}
public interface org.apache.http.conn.scheme.LayeredSocketFactory
  extends org.apache.http.conn.scheme.SocketFactory
{
  public abstract java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean)  throws java.io.IOException, java.net.UnknownHostException;
}
public interface org.apache.http.conn.scheme.SocketFactory
{
  public abstract boolean isSecure(java.net.Socket)  throws java.lang.IllegalArgumentException;
  public abstract java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams)  throws java.io.IOException, java.net.UnknownHostException, org.apache.http.conn.ConnectTimeoutException;
  public abstract java.net.Socket createSocket()  throws java.io.IOException;
}
public abstract class org.apache.http.conn.ssl.AbstractVerifier
  extends java.lang.Object
  implements org.apache.http.conn.ssl.X509HostnameVerifier
{
  public static boolean acceptableCountryWildcard(java.lang.String);
  public static int countDots(java.lang.String);
  public static java.lang.String[] getCNs(java.security.cert.X509Certificate);
  public static java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate);
  public void <init>();
  public final boolean verify(java.lang.String, javax.net.ssl.SSLSession);
  public final void verify(java.lang.String, java.lang.String[], java.lang.String[], boolean)  throws javax.net.ssl.SSLException;
  public final void verify(java.lang.String, java.security.cert.X509Certificate)  throws javax.net.ssl.SSLException;
  public final void verify(java.lang.String, javax.net.ssl.SSLSocket)  throws java.io.IOException;
}
public class org.apache.http.conn.ssl.AllowAllHostnameVerifier
  extends org.apache.http.conn.ssl.AbstractVerifier
{
  public void <init>();
  public final void verify(java.lang.String, java.lang.String[], java.lang.String[]);
  public final java.lang.String toString();
}
public class org.apache.http.conn.ssl.BrowserCompatHostnameVerifier
  extends org.apache.http.conn.ssl.AbstractVerifier
{
  public void <init>();
  public final void verify(java.lang.String, java.lang.String[], java.lang.String[])  throws javax.net.ssl.SSLException;
  public final java.lang.String toString();
}
public class org.apache.http.conn.ssl.SSLSocketFactory
  extends java.lang.Object
  implements org.apache.http.conn.scheme.LayeredSocketFactory
{
  public static org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory();
  public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.scheme.HostNameResolver)  throws java.security.KeyManagementException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public void <init>(java.security.KeyStore)  throws java.security.KeyManagementException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public void <init>(java.security.KeyStore, java.lang.String)  throws java.security.KeyManagementException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public void <init>(java.security.KeyStore, java.lang.String, java.security.KeyStore)  throws java.security.KeyManagementException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public boolean isSecure(java.net.Socket)  throws java.lang.IllegalArgumentException;
  public void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier);
  public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams)  throws java.io.IOException;
  public java.net.Socket createSocket()  throws java.io.IOException;
  public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean)  throws java.io.IOException, java.net.UnknownHostException;
  public org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier();
  public static final java.lang.String SSL;
  public static final java.lang.String SSLV2;
  public static final java.lang.String TLS;
  public static final org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
  public static final org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
  public static final org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
}
public class org.apache.http.conn.ssl.StrictHostnameVerifier
  extends org.apache.http.conn.ssl.AbstractVerifier
{
  public void <init>();
  public final void verify(java.lang.String, java.lang.String[], java.lang.String[])  throws javax.net.ssl.SSLException;
  public final java.lang.String toString();
}
public interface org.apache.http.conn.ssl.X509HostnameVerifier
  extends javax.net.ssl.HostnameVerifier
{
  public abstract boolean verify(java.lang.String, javax.net.ssl.SSLSession);
  public abstract void verify(java.lang.String, java.lang.String[], java.lang.String[])  throws javax.net.ssl.SSLException;
  public abstract void verify(java.lang.String, java.security.cert.X509Certificate)  throws javax.net.ssl.SSLException;
  public abstract void verify(java.lang.String, javax.net.ssl.SSLSocket)  throws java.io.IOException;
}
public interface org.apache.http.params.CoreConnectionPNames
{
  public static final java.lang.String CONNECTION_TIMEOUT;
  public static final java.lang.String MAX_HEADER_COUNT;
  public static final java.lang.String MAX_LINE_LENGTH;
  public static final java.lang.String SOCKET_BUFFER_SIZE;
  public static final java.lang.String SO_LINGER;
  public static final java.lang.String SO_TIMEOUT;
  public static final java.lang.String STALE_CONNECTION_CHECK;
  public static final java.lang.String TCP_NODELAY;
}
public final class org.apache.http.params.HttpConnectionParams
  extends java.lang.Object
  implements org.apache.http.params.CoreConnectionPNames
{
  public static boolean getTcpNoDelay(org.apache.http.params.HttpParams);
  public static boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams);
  public static int getConnectionTimeout(org.apache.http.params.HttpParams);
  public static int getLinger(org.apache.http.params.HttpParams);
  public static int getSoTimeout(org.apache.http.params.HttpParams);
  public static int getSocketBufferSize(org.apache.http.params.HttpParams);
  public static void setConnectionTimeout(org.apache.http.params.HttpParams, int);
  public static void setLinger(org.apache.http.params.HttpParams, int);
  public static void setSoTimeout(org.apache.http.params.HttpParams, int);
  public static void setSocketBufferSize(org.apache.http.params.HttpParams, int);
  public static void setStaleCheckingEnabled(org.apache.http.params.HttpParams, boolean);
  public static void setTcpNoDelay(org.apache.http.params.HttpParams, boolean);
}
public interface org.apache.http.params.HttpParams
{
  public abstract boolean getBooleanParameter(java.lang.String, boolean);
  public abstract boolean isParameterFalse(java.lang.String);
  public abstract boolean isParameterTrue(java.lang.String);
  public abstract boolean removeParameter(java.lang.String);
  public abstract double getDoubleParameter(java.lang.String, double);
  public abstract int getIntParameter(java.lang.String, int);
  public abstract long getLongParameter(java.lang.String, long);
  public abstract java.lang.Object getParameter(java.lang.String);
  public abstract org.apache.http.params.HttpParams copy();
  public abstract org.apache.http.params.HttpParams setBooleanParameter(java.lang.String, boolean);
  public abstract org.apache.http.params.HttpParams setDoubleParameter(java.lang.String, double);
  public abstract org.apache.http.params.HttpParams setIntParameter(java.lang.String, int);
  public abstract org.apache.http.params.HttpParams setLongParameter(java.lang.String, long);
  public abstract org.apache.http.params.HttpParams setParameter(java.lang.String, java.lang.Object);
}
public class org.json.JSONArray
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.lang.Object)  throws org.json.JSONException;
  public void <init>(java.lang.String)  throws org.json.JSONException;
  public void <init>(java.util.Collection);
  public void <init>(org.json.JSONTokener)  throws org.json.JSONException;
  public boolean equals(java.lang.Object);
  public boolean getBoolean(int)  throws org.json.JSONException;
  public boolean isNull(int);
  public boolean optBoolean(int);
  public boolean optBoolean(int, boolean);
  public double getDouble(int)  throws org.json.JSONException;
  public double optDouble(int);
  public double optDouble(int, double);
  public int getInt(int)  throws org.json.JSONException;
  public int hashCode();
  public int length();
  public int optInt(int);
  public int optInt(int, int);
  public long getLong(int)  throws org.json.JSONException;
  public long optLong(int);
  public long optLong(int, long);
  public java.lang.Object get(int)  throws org.json.JSONException;
  public java.lang.Object opt(int);
  public java.lang.Object remove(int);
  public java.lang.String getString(int)  throws org.json.JSONException;
  public java.lang.String join(java.lang.String)  throws org.json.JSONException;
  public java.lang.String optString(int);
  public java.lang.String optString(int, java.lang.String);
  public java.lang.String toString();
  public java.lang.String toString(int)  throws org.json.JSONException;
  public org.json.JSONArray getJSONArray(int)  throws org.json.JSONException;
  public org.json.JSONArray optJSONArray(int);
  public org.json.JSONArray put(boolean);
  public org.json.JSONArray put(double)  throws org.json.JSONException;
  public org.json.JSONArray put(int);
  public org.json.JSONArray put(int, boolean)  throws org.json.JSONException;
  public org.json.JSONArray put(int, double)  throws org.json.JSONException;
  public org.json.JSONArray put(int, int)  throws org.json.JSONException;
  public org.json.JSONArray put(int, java.lang.Object)  throws org.json.JSONException;
  public org.json.JSONArray put(int, long)  throws org.json.JSONException;
  public org.json.JSONArray put(java.lang.Object);
  public org.json.JSONArray put(long);
  public org.json.JSONObject getJSONObject(int)  throws org.json.JSONException;
  public org.json.JSONObject optJSONObject(int);
  public org.json.JSONObject toJSONObject(org.json.JSONArray)  throws org.json.JSONException;
}
public class org.json.JSONException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
}
public class org.json.JSONObject
  extends java.lang.Object
{
  public static java.lang.Object wrap(java.lang.Object);
  public static java.lang.String numberToString(java.lang.Number)  throws org.json.JSONException;
  public static java.lang.String quote(java.lang.String);
  public void <init>();
  public void <init>(java.lang.String)  throws org.json.JSONException;
  public void <init>(java.util.Map);
  public void <init>(org.json.JSONObject, java.lang.String[])  throws org.json.JSONException;
  public void <init>(org.json.JSONTokener)  throws org.json.JSONException;
  public boolean getBoolean(java.lang.String)  throws org.json.JSONException;
  public boolean has(java.lang.String);
  public boolean isNull(java.lang.String);
  public boolean optBoolean(java.lang.String);
  public boolean optBoolean(java.lang.String, boolean);
  public double getDouble(java.lang.String)  throws org.json.JSONException;
  public double optDouble(java.lang.String);
  public double optDouble(java.lang.String, double);
  public int getInt(java.lang.String)  throws org.json.JSONException;
  public int length();
  public int optInt(java.lang.String);
  public int optInt(java.lang.String, int);
  public long getLong(java.lang.String)  throws org.json.JSONException;
  public long optLong(java.lang.String);
  public long optLong(java.lang.String, long);
  public java.lang.Object get(java.lang.String)  throws org.json.JSONException;
  public java.lang.Object opt(java.lang.String);
  public java.lang.Object remove(java.lang.String);
  public java.lang.String getString(java.lang.String)  throws org.json.JSONException;
  public java.lang.String optString(java.lang.String);
  public java.lang.String optString(java.lang.String, java.lang.String);
  public java.lang.String toString();
  public java.lang.String toString(int)  throws org.json.JSONException;
  public java.util.Iterator keys();
  public org.json.JSONArray getJSONArray(java.lang.String)  throws org.json.JSONException;
  public org.json.JSONArray names();
  public org.json.JSONArray optJSONArray(java.lang.String);
  public org.json.JSONArray toJSONArray(org.json.JSONArray)  throws org.json.JSONException;
  public org.json.JSONObject accumulate(java.lang.String, java.lang.Object)  throws org.json.JSONException;
  public org.json.JSONObject getJSONObject(java.lang.String)  throws org.json.JSONException;
  public org.json.JSONObject optJSONObject(java.lang.String);
  public org.json.JSONObject put(java.lang.String, boolean)  throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, double)  throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, int)  throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, java.lang.Object)  throws org.json.JSONException;
  public org.json.JSONObject put(java.lang.String, long)  throws org.json.JSONException;
  public org.json.JSONObject putOpt(java.lang.String, java.lang.Object)  throws org.json.JSONException;
  public static final java.lang.Object NULL;
}
public class org.json.JSONStringer
  extends java.lang.Object
{
  public void <init>();
  public java.lang.String toString();
  public org.json.JSONStringer array()  throws org.json.JSONException;
  public org.json.JSONStringer endArray()  throws org.json.JSONException;
  public org.json.JSONStringer endObject()  throws org.json.JSONException;
  public org.json.JSONStringer key(java.lang.String)  throws org.json.JSONException;
  public org.json.JSONStringer object()  throws org.json.JSONException;
  public org.json.JSONStringer value(boolean)  throws org.json.JSONException;
  public org.json.JSONStringer value(double)  throws org.json.JSONException;
  public org.json.JSONStringer value(java.lang.Object)  throws org.json.JSONException;
  public org.json.JSONStringer value(long)  throws org.json.JSONException;
}
public class org.json.JSONTokener
  extends java.lang.Object
{
  public static int dehexchar(char);
  public void <init>(java.lang.String);
  public boolean more();
  public char next();
  public char next(char)  throws org.json.JSONException;
  public char nextClean()  throws org.json.JSONException;
  public char skipTo(char);
  public void back();
  public void skipPast(java.lang.String);
  public java.lang.Object nextValue()  throws org.json.JSONException;
  public java.lang.String next(int)  throws org.json.JSONException;
  public java.lang.String nextString(char)  throws org.json.JSONException;
  public java.lang.String nextTo(char);
  public java.lang.String nextTo(java.lang.String);
  public java.lang.String toString();
  public org.json.JSONException syntaxError(java.lang.String);
}
public interface org.w3c.dom.Attr
  extends org.w3c.dom.Node
{
  public abstract boolean getSpecified();
  public abstract boolean isId();
  public abstract void setValue(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract java.lang.String getName();
  public abstract java.lang.String getValue();
  public abstract org.w3c.dom.Element getOwnerElement();
  public abstract org.w3c.dom.TypeInfo getSchemaTypeInfo();
}
public interface org.w3c.dom.CDATASection
  extends org.w3c.dom.Text
{
}
public interface org.w3c.dom.CharacterData
  extends org.w3c.dom.Node
{
  public abstract int getLength();
  public abstract void appendData(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void deleteData(int, int)  throws org.w3c.dom.DOMException;
  public abstract void insertData(int, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void replaceData(int, int, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void setData(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract java.lang.String getData()  throws org.w3c.dom.DOMException;
  public abstract java.lang.String substringData(int, int)  throws org.w3c.dom.DOMException;
}
public interface org.w3c.dom.Comment
  extends org.w3c.dom.CharacterData
{
}
public interface org.w3c.dom.DOMConfiguration
{
  public abstract boolean canSetParameter(java.lang.String, java.lang.Object);
  public abstract void setParameter(java.lang.String, java.lang.Object)  throws org.w3c.dom.DOMException;
  public abstract java.lang.Object getParameter(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.DOMStringList getParameterNames();
}
public interface org.w3c.dom.DOMError
{
  public abstract short getSeverity();
  public abstract java.lang.Object getRelatedData();
  public abstract java.lang.Object getRelatedException();
  public abstract java.lang.String getMessage();
  public abstract java.lang.String getType();
  public abstract org.w3c.dom.DOMLocator getLocation();
  public static final short SEVERITY_ERROR;
  public static final short SEVERITY_FATAL_ERROR;
  public static final short SEVERITY_WARNING;
}
public interface org.w3c.dom.DOMErrorHandler
{
  public abstract boolean handleError(org.w3c.dom.DOMError);
}
public class org.w3c.dom.DOMException
  extends java.lang.RuntimeException
{
  public void <init>(short, java.lang.String);
  public static final short DOMSTRING_SIZE_ERR;
  public static final short HIERARCHY_REQUEST_ERR;
  public static final short INDEX_SIZE_ERR;
  public static final short INUSE_ATTRIBUTE_ERR;
  public static final short INVALID_ACCESS_ERR;
  public static final short INVALID_CHARACTER_ERR;
  public static final short INVALID_MODIFICATION_ERR;
  public static final short INVALID_STATE_ERR;
  public static final short NAMESPACE_ERR;
  public static final short NOT_FOUND_ERR;
  public static final short NOT_SUPPORTED_ERR;
  public static final short NO_DATA_ALLOWED_ERR;
  public static final short NO_MODIFICATION_ALLOWED_ERR;
  public static final short SYNTAX_ERR;
  public static final short TYPE_MISMATCH_ERR;
  public static final short VALIDATION_ERR;
  public static final short WRONG_DOCUMENT_ERR;
  public short code;
}
public interface org.w3c.dom.DOMImplementation
{
  public abstract boolean hasFeature(java.lang.String, java.lang.String);
  public abstract java.lang.Object getFeature(java.lang.String, java.lang.String);
  public abstract org.w3c.dom.Document createDocument(java.lang.String, java.lang.String, org.w3c.dom.DocumentType)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.DocumentType createDocumentType(java.lang.String, java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
}
public interface org.w3c.dom.DOMImplementationList
{
  public abstract int getLength();
  public abstract org.w3c.dom.DOMImplementation item(int);
}
public interface org.w3c.dom.DOMImplementationSource
{
  public abstract org.w3c.dom.DOMImplementation getDOMImplementation(java.lang.String);
  public abstract org.w3c.dom.DOMImplementationList getDOMImplementationList(java.lang.String);
}
public interface org.w3c.dom.DOMLocator
{
  public abstract int getByteOffset();
  public abstract int getColumnNumber();
  public abstract int getLineNumber();
  public abstract int getUtf16Offset();
  public abstract java.lang.String getUri();
  public abstract org.w3c.dom.Node getRelatedNode();
}
public interface org.w3c.dom.DOMStringList
{
  public abstract boolean contains(java.lang.String);
  public abstract int getLength();
  public abstract java.lang.String item(int);
}
public interface org.w3c.dom.Document
  extends org.w3c.dom.Node
{
  public abstract boolean getStrictErrorChecking();
  public abstract boolean getXmlStandalone();
  public abstract void normalizeDocument();
  public abstract void setDocumentURI(java.lang.String);
  public abstract void setStrictErrorChecking(boolean);
  public abstract void setXmlStandalone(boolean)  throws org.w3c.dom.DOMException;
  public abstract void setXmlVersion(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract java.lang.String getDocumentURI();
  public abstract java.lang.String getInputEncoding();
  public abstract java.lang.String getXmlEncoding();
  public abstract java.lang.String getXmlVersion();
  public abstract org.w3c.dom.Attr createAttribute(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Attr createAttributeNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.CDATASection createCDATASection(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Comment createComment(java.lang.String);
  public abstract org.w3c.dom.DOMConfiguration getDomConfig();
  public abstract org.w3c.dom.DOMImplementation getImplementation();
  public abstract org.w3c.dom.DocumentFragment createDocumentFragment();
  public abstract org.w3c.dom.DocumentType getDoctype();
  public abstract org.w3c.dom.Element createElement(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Element createElementNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Element getDocumentElement();
  public abstract org.w3c.dom.Element getElementById(java.lang.String);
  public abstract org.w3c.dom.EntityReference createEntityReference(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node adoptNode(org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node importNode(org.w3c.dom.Node, boolean)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public abstract org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String);
  public abstract org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Text createTextNode(java.lang.String);
}
public interface org.w3c.dom.DocumentFragment
  extends org.w3c.dom.Node
{
}
public interface org.w3c.dom.DocumentType
  extends org.w3c.dom.Node
{
  public abstract java.lang.String getInternalSubset();
  public abstract java.lang.String getName();
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
  public abstract org.w3c.dom.NamedNodeMap getEntities();
  public abstract org.w3c.dom.NamedNodeMap getNotations();
}
public interface org.w3c.dom.Element
  extends org.w3c.dom.Node
{
  public abstract boolean hasAttribute(java.lang.String);
  public abstract boolean hasAttributeNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void removeAttribute(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void removeAttributeNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void setAttribute(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void setAttributeNS(java.lang.String, java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void setIdAttribute(java.lang.String, boolean)  throws org.w3c.dom.DOMException;
  public abstract void setIdAttributeNS(java.lang.String, java.lang.String, boolean)  throws org.w3c.dom.DOMException;
  public abstract void setIdAttributeNode(org.w3c.dom.Attr, boolean)  throws org.w3c.dom.DOMException;
  public abstract java.lang.String getAttribute(java.lang.String);
  public abstract java.lang.String getAttributeNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract java.lang.String getTagName();
  public abstract org.w3c.dom.Attr getAttributeNode(java.lang.String);
  public abstract org.w3c.dom.Attr getAttributeNodeNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.NodeList getElementsByTagName(java.lang.String);
  public abstract org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.TypeInfo getSchemaTypeInfo();
}
public interface org.w3c.dom.Entity
  extends org.w3c.dom.Node
{
  public abstract java.lang.String getInputEncoding();
  public abstract java.lang.String getNotationName();
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
  public abstract java.lang.String getXmlEncoding();
  public abstract java.lang.String getXmlVersion();
}
public interface org.w3c.dom.EntityReference
  extends org.w3c.dom.Node
{
}
public interface org.w3c.dom.NameList
{
  public abstract boolean contains(java.lang.String);
  public abstract boolean containsNS(java.lang.String, java.lang.String);
  public abstract int getLength();
  public abstract java.lang.String getName(int);
  public abstract java.lang.String getNamespaceURI(int);
}
public interface org.w3c.dom.NamedNodeMap
{
  public abstract int getLength();
  public abstract org.w3c.dom.Node getNamedItem(java.lang.String);
  public abstract org.w3c.dom.Node getNamedItemNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node item(int);
  public abstract org.w3c.dom.Node removeNamedItem(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node removeNamedItemNS(java.lang.String, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
}
public interface org.w3c.dom.Node
{
  public abstract boolean hasAttributes();
  public abstract boolean hasChildNodes();
  public abstract boolean isDefaultNamespace(java.lang.String);
  public abstract boolean isEqualNode(org.w3c.dom.Node);
  public abstract boolean isSameNode(org.w3c.dom.Node);
  public abstract boolean isSupported(java.lang.String, java.lang.String);
  public abstract short compareDocumentPosition(org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
  public abstract short getNodeType();
  public abstract void normalize();
  public abstract void setNodeValue(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void setPrefix(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract void setTextContent(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract java.lang.Object getFeature(java.lang.String, java.lang.String);
  public abstract java.lang.Object getUserData(java.lang.String);
  public abstract java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler);
  public abstract java.lang.String getBaseURI();
  public abstract java.lang.String getLocalName();
  public abstract java.lang.String getNamespaceURI();
  public abstract java.lang.String getNodeName();
  public abstract java.lang.String getNodeValue()  throws org.w3c.dom.DOMException;
  public abstract java.lang.String getPrefix();
  public abstract java.lang.String getTextContent()  throws org.w3c.dom.DOMException;
  public abstract java.lang.String lookupNamespaceURI(java.lang.String);
  public abstract java.lang.String lookupPrefix(java.lang.String);
  public abstract org.w3c.dom.Document getOwnerDocument();
  public abstract org.w3c.dom.NamedNodeMap getAttributes();
  public abstract org.w3c.dom.Node appendChild(org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node cloneNode(boolean);
  public abstract org.w3c.dom.Node getFirstChild();
  public abstract org.w3c.dom.Node getLastChild();
  public abstract org.w3c.dom.Node getNextSibling();
  public abstract org.w3c.dom.Node getParentNode();
  public abstract org.w3c.dom.Node getPreviousSibling();
  public abstract org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node removeChild(org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.NodeList getChildNodes();
  public static final short ATTRIBUTE_NODE;
  public static final short CDATA_SECTION_NODE;
  public static final short COMMENT_NODE;
  public static final short DOCUMENT_FRAGMENT_NODE;
  public static final short DOCUMENT_NODE;
  public static final short DOCUMENT_POSITION_CONTAINED_BY;
  public static final short DOCUMENT_POSITION_CONTAINS;
  public static final short DOCUMENT_POSITION_DISCONNECTED;
  public static final short DOCUMENT_POSITION_FOLLOWING;
  public static final short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
  public static final short DOCUMENT_POSITION_PRECEDING;
  public static final short DOCUMENT_TYPE_NODE;
  public static final short ELEMENT_NODE;
  public static final short ENTITY_NODE;
  public static final short ENTITY_REFERENCE_NODE;
  public static final short NOTATION_NODE;
  public static final short PROCESSING_INSTRUCTION_NODE;
  public static final short TEXT_NODE;
}
public interface org.w3c.dom.NodeList
{
  public abstract int getLength();
  public abstract org.w3c.dom.Node item(int);
}
public interface org.w3c.dom.Notation
  extends org.w3c.dom.Node
{
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
}
public interface org.w3c.dom.ProcessingInstruction
  extends org.w3c.dom.Node
{
  public abstract void setData(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract java.lang.String getData();
  public abstract java.lang.String getTarget();
}
public interface org.w3c.dom.Text
  extends org.w3c.dom.CharacterData
{
  public abstract boolean isElementContentWhitespace();
  public abstract java.lang.String getWholeText();
  public abstract org.w3c.dom.Text replaceWholeText(java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.Text splitText(int)  throws org.w3c.dom.DOMException;
}
public interface org.w3c.dom.TypeInfo
{
  public abstract boolean isDerivedFrom(java.lang.String, java.lang.String, int);
  public abstract java.lang.String getTypeName();
  public abstract java.lang.String getTypeNamespace();
  public static final int DERIVATION_EXTENSION;
  public static final int DERIVATION_LIST;
  public static final int DERIVATION_RESTRICTION;
  public static final int DERIVATION_UNION;
}
public interface org.w3c.dom.UserDataHandler
{
  public abstract void handle(short, java.lang.String, java.lang.Object, org.w3c.dom.Node, org.w3c.dom.Node);
  public static final short NODE_ADOPTED;
  public static final short NODE_CLONED;
  public static final short NODE_DELETED;
  public static final short NODE_IMPORTED;
  public static final short NODE_RENAMED;
}
public interface org.w3c.dom.ls.DOMImplementationLS
{
  public abstract org.w3c.dom.ls.LSInput createLSInput();
  public abstract org.w3c.dom.ls.LSOutput createLSOutput();
  public abstract org.w3c.dom.ls.LSParser createLSParser(short, java.lang.String)  throws org.w3c.dom.DOMException;
  public abstract org.w3c.dom.ls.LSSerializer createLSSerializer();
  public static final short MODE_ASYNCHRONOUS;
  public static final short MODE_SYNCHRONOUS;
}
public class org.w3c.dom.ls.LSException
  extends java.lang.RuntimeException
{
  public void <init>(short, java.lang.String);
  public static final short PARSE_ERR;
  public static final short SERIALIZE_ERR;
  public short code;
}
public interface org.w3c.dom.ls.LSInput
{
  public abstract boolean getCertifiedText();
  public abstract void setBaseURI(java.lang.String);
  public abstract void setByteStream(java.io.InputStream);
  public abstract void setCertifiedText(boolean);
  public abstract void setCharacterStream(java.io.Reader);
  public abstract void setEncoding(java.lang.String);
  public abstract void setPublicId(java.lang.String);
  public abstract void setStringData(java.lang.String);
  public abstract void setSystemId(java.lang.String);
  public abstract java.io.InputStream getByteStream();
  public abstract java.io.Reader getCharacterStream();
  public abstract java.lang.String getBaseURI();
  public abstract java.lang.String getEncoding();
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getStringData();
  public abstract java.lang.String getSystemId();
}
public interface org.w3c.dom.ls.LSOutput
{
  public abstract void setByteStream(java.io.OutputStream);
  public abstract void setCharacterStream(java.io.Writer);
  public abstract void setEncoding(java.lang.String);
  public abstract void setSystemId(java.lang.String);
  public abstract java.io.OutputStream getByteStream();
  public abstract java.io.Writer getCharacterStream();
  public abstract java.lang.String getEncoding();
  public abstract java.lang.String getSystemId();
}
public interface org.w3c.dom.ls.LSParser
{
  public abstract boolean getAsync();
  public abstract boolean getBusy();
  public abstract void abort();
  public abstract void setFilter(org.w3c.dom.ls.LSParserFilter);
  public abstract org.w3c.dom.DOMConfiguration getDomConfig();
  public abstract org.w3c.dom.Document parse(org.w3c.dom.ls.LSInput)  throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException;
  public abstract org.w3c.dom.Document parseURI(java.lang.String)  throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException;
  public abstract org.w3c.dom.Node parseWithContext(org.w3c.dom.ls.LSInput, org.w3c.dom.Node, short)  throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException;
  public abstract org.w3c.dom.ls.LSParserFilter getFilter();
  public static final short ACTION_APPEND_AS_CHILDREN;
  public static final short ACTION_INSERT_AFTER;
  public static final short ACTION_INSERT_BEFORE;
  public static final short ACTION_REPLACE;
  public static final short ACTION_REPLACE_CHILDREN;
}
public interface org.w3c.dom.ls.LSParserFilter
{
  public abstract int getWhatToShow();
  public abstract short acceptNode(org.w3c.dom.Node);
  public abstract short startElement(org.w3c.dom.Element);
  public static final short FILTER_ACCEPT;
  public static final short FILTER_INTERRUPT;
  public static final short FILTER_REJECT;
  public static final short FILTER_SKIP;
}
public interface org.w3c.dom.ls.LSResourceResolver
{
  public abstract org.w3c.dom.ls.LSInput resolveResource(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
}
public interface org.w3c.dom.ls.LSSerializer
{
  public abstract boolean write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput)  throws org.w3c.dom.ls.LSException;
  public abstract boolean writeToURI(org.w3c.dom.Node, java.lang.String)  throws org.w3c.dom.ls.LSException;
  public abstract void setNewLine(java.lang.String);
  public abstract java.lang.String getNewLine();
  public abstract java.lang.String writeToString(org.w3c.dom.Node)  throws org.w3c.dom.DOMException, org.w3c.dom.ls.LSException;
  public abstract org.w3c.dom.DOMConfiguration getDomConfig();
}
public interface org.xml.sax.AttributeList
{
  public abstract int getLength();
  public abstract java.lang.String getName(int);
  public abstract java.lang.String getType(int);
  public abstract java.lang.String getType(java.lang.String);
  public abstract java.lang.String getValue(int);
  public abstract java.lang.String getValue(java.lang.String);
}
public interface org.xml.sax.Attributes
{
  public abstract int getIndex(java.lang.String);
  public abstract int getIndex(java.lang.String, java.lang.String);
  public abstract int getLength();
  public abstract java.lang.String getLocalName(int);
  public abstract java.lang.String getQName(int);
  public abstract java.lang.String getType(int);
  public abstract java.lang.String getType(java.lang.String);
  public abstract java.lang.String getType(java.lang.String, java.lang.String);
  public abstract java.lang.String getURI(int);
  public abstract java.lang.String getValue(int);
  public abstract java.lang.String getValue(java.lang.String);
  public abstract java.lang.String getValue(java.lang.String, java.lang.String);
}
public interface org.xml.sax.ContentHandler
{
  public abstract void characters(char[], int, int)  throws org.xml.sax.SAXException;
  public abstract void endDocument()  throws org.xml.sax.SAXException;
  public abstract void endElement(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void endPrefixMapping(java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void ignorableWhitespace(char[], int, int)  throws org.xml.sax.SAXException;
  public abstract void processingInstruction(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void setDocumentLocator(org.xml.sax.Locator);
  public abstract void skippedEntity(java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void startDocument()  throws org.xml.sax.SAXException;
  public abstract void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)  throws org.xml.sax.SAXException;
  public abstract void startPrefixMapping(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
}
public interface org.xml.sax.DTDHandler
{
  public abstract void notationDecl(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
}
public interface org.xml.sax.DocumentHandler
{
  public abstract void characters(char[], int, int)  throws org.xml.sax.SAXException;
  public abstract void endDocument()  throws org.xml.sax.SAXException;
  public abstract void endElement(java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void ignorableWhitespace(char[], int, int)  throws org.xml.sax.SAXException;
  public abstract void processingInstruction(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void setDocumentLocator(org.xml.sax.Locator);
  public abstract void startDocument()  throws org.xml.sax.SAXException;
  public abstract void startElement(java.lang.String, org.xml.sax.AttributeList)  throws org.xml.sax.SAXException;
}
public interface org.xml.sax.EntityResolver
{
  public abstract org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
}
public interface org.xml.sax.ErrorHandler
{
  public abstract void error(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public abstract void fatalError(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public abstract void warning(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
}
public class org.xml.sax.HandlerBase
  extends java.lang.Object
  implements org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.DocumentHandler, org.xml.sax.ErrorHandler
{
  public void <init>();
  public void characters(char[], int, int)  throws org.xml.sax.SAXException;
  public void endDocument()  throws org.xml.sax.SAXException;
  public void endElement(java.lang.String)  throws org.xml.sax.SAXException;
  public void error(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public void fatalError(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public void ignorableWhitespace(char[], int, int)  throws org.xml.sax.SAXException;
  public void notationDecl(java.lang.String, java.lang.String, java.lang.String);
  public void processingInstruction(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void setDocumentLocator(org.xml.sax.Locator);
  public void startDocument()  throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, org.xml.sax.AttributeList)  throws org.xml.sax.SAXException;
  public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void warning(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
}
public class org.xml.sax.InputSource
  extends java.lang.Object
{
  public void <init>();
  public void <init>(java.io.InputStream);
  public void <init>(java.io.Reader);
  public void <init>(java.lang.String);
  public void setByteStream(java.io.InputStream);
  public void setCharacterStream(java.io.Reader);
  public void setEncoding(java.lang.String);
  public void setPublicId(java.lang.String);
  public void setSystemId(java.lang.String);
  public java.io.InputStream getByteStream();
  public java.io.Reader getCharacterStream();
  public java.lang.String getEncoding();
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
}
public interface org.xml.sax.Locator
{
  public abstract int getColumnNumber();
  public abstract int getLineNumber();
  public abstract java.lang.String getPublicId();
  public abstract java.lang.String getSystemId();
}
public interface org.xml.sax.Parser
{
  public abstract void parse(java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public abstract void parse(org.xml.sax.InputSource)  throws java.io.IOException, org.xml.sax.SAXException;
  public abstract void setDTDHandler(org.xml.sax.DTDHandler);
  public abstract void setDocumentHandler(org.xml.sax.DocumentHandler);
  public abstract void setEntityResolver(org.xml.sax.EntityResolver);
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract void setLocale(java.util.Locale)  throws org.xml.sax.SAXException;
}
public class org.xml.sax.SAXException
  extends java.lang.Exception
{
  public void <init>();
  public void <init>(java.lang.Exception);
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, java.lang.Exception);
  public java.lang.Exception getException();
  public java.lang.String getMessage();
  public java.lang.String toString();
}
public class org.xml.sax.SAXNotRecognizedException
  extends org.xml.sax.SAXException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class org.xml.sax.SAXNotSupportedException
  extends org.xml.sax.SAXException
{
  public void <init>();
  public void <init>(java.lang.String);
}
public class org.xml.sax.SAXParseException
  extends org.xml.sax.SAXException
{
  public void <init>(java.lang.String, java.lang.String, java.lang.String, int, int);
  public void <init>(java.lang.String, java.lang.String, java.lang.String, int, int, java.lang.Exception);
  public void <init>(java.lang.String, org.xml.sax.Locator);
  public void <init>(java.lang.String, org.xml.sax.Locator, java.lang.Exception);
  public int getColumnNumber();
  public int getLineNumber();
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
}
public interface org.xml.sax.XMLFilter
  extends org.xml.sax.XMLReader
{
  public abstract void setParent(org.xml.sax.XMLReader);
  public abstract org.xml.sax.XMLReader getParent();
}
public interface org.xml.sax.XMLReader
{
  public abstract boolean getFeature(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract void parse(java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public abstract void parse(org.xml.sax.InputSource)  throws java.io.IOException, org.xml.sax.SAXException;
  public abstract void setContentHandler(org.xml.sax.ContentHandler);
  public abstract void setDTDHandler(org.xml.sax.DTDHandler);
  public abstract void setEntityResolver(org.xml.sax.EntityResolver);
  public abstract void setErrorHandler(org.xml.sax.ErrorHandler);
  public abstract void setFeature(java.lang.String, boolean)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public abstract org.xml.sax.ContentHandler getContentHandler();
  public abstract org.xml.sax.DTDHandler getDTDHandler();
  public abstract org.xml.sax.EntityResolver getEntityResolver();
  public abstract org.xml.sax.ErrorHandler getErrorHandler();
}
public interface org.xml.sax.ext.Attributes2
  extends org.xml.sax.Attributes
{
  public abstract boolean isDeclared(int);
  public abstract boolean isDeclared(java.lang.String);
  public abstract boolean isDeclared(java.lang.String, java.lang.String);
  public abstract boolean isSpecified(int);
  public abstract boolean isSpecified(java.lang.String);
  public abstract boolean isSpecified(java.lang.String, java.lang.String);
}
public class org.xml.sax.ext.Attributes2Impl
  extends org.xml.sax.helpers.AttributesImpl
  implements org.xml.sax.ext.Attributes2
{
  public void <init>();
  public void <init>(org.xml.sax.Attributes);
  public boolean isDeclared(int);
  public boolean isDeclared(java.lang.String);
  public boolean isDeclared(java.lang.String, java.lang.String);
  public boolean isSpecified(int);
  public boolean isSpecified(java.lang.String);
  public boolean isSpecified(java.lang.String, java.lang.String);
  public void addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void removeAttribute(int);
  public void setAttributes(org.xml.sax.Attributes);
  public void setDeclared(int, boolean);
  public void setSpecified(int, boolean);
}
public interface org.xml.sax.ext.DeclHandler
{
  public abstract void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void elementDecl(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void internalEntityDecl(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
}
public class org.xml.sax.ext.DefaultHandler2
  extends org.xml.sax.helpers.DefaultHandler
  implements org.xml.sax.ext.LexicalHandler, org.xml.sax.ext.DeclHandler, org.xml.sax.ext.EntityResolver2
{
  public void <init>();
  public void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void comment(char[], int, int)  throws org.xml.sax.SAXException;
  public void elementDecl(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void endCDATA()  throws org.xml.sax.SAXException;
  public void endDTD()  throws org.xml.sax.SAXException;
  public void endEntity(java.lang.String)  throws org.xml.sax.SAXException;
  public void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void internalEntityDecl(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void startCDATA()  throws org.xml.sax.SAXException;
  public void startDTD(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void startEntity(java.lang.String)  throws org.xml.sax.SAXException;
  public org.xml.sax.InputSource getExternalSubset(java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
}
public interface org.xml.sax.ext.EntityResolver2
  extends org.xml.sax.EntityResolver
{
  public abstract org.xml.sax.InputSource getExternalSubset(java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public abstract org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
}
public interface org.xml.sax.ext.LexicalHandler
{
  public abstract void comment(char[], int, int)  throws org.xml.sax.SAXException;
  public abstract void endCDATA()  throws org.xml.sax.SAXException;
  public abstract void endDTD()  throws org.xml.sax.SAXException;
  public abstract void endEntity(java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void startCDATA()  throws org.xml.sax.SAXException;
  public abstract void startDTD(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public abstract void startEntity(java.lang.String)  throws org.xml.sax.SAXException;
}
public interface org.xml.sax.ext.Locator2
  extends org.xml.sax.Locator
{
  public abstract java.lang.String getEncoding();
  public abstract java.lang.String getXMLVersion();
}
public class org.xml.sax.ext.Locator2Impl
  extends org.xml.sax.helpers.LocatorImpl
  implements org.xml.sax.ext.Locator2
{
  public void <init>();
  public void <init>(org.xml.sax.Locator);
  public void setEncoding(java.lang.String);
  public void setXMLVersion(java.lang.String);
  public java.lang.String getEncoding();
  public java.lang.String getXMLVersion();
}
public class org.xml.sax.helpers.AttributeListImpl
  extends java.lang.Object
  implements org.xml.sax.AttributeList
{
  public void <init>();
  public void <init>(org.xml.sax.AttributeList);
  public int getLength();
  public void addAttribute(java.lang.String, java.lang.String, java.lang.String);
  public void clear();
  public void removeAttribute(java.lang.String);
  public void setAttributeList(org.xml.sax.AttributeList);
  public java.lang.String getName(int);
  public java.lang.String getType(int);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getValue(int);
  public java.lang.String getValue(java.lang.String);
}
public class org.xml.sax.helpers.AttributesImpl
  extends java.lang.Object
  implements org.xml.sax.Attributes
{
  public void <init>();
  public void <init>(org.xml.sax.Attributes);
  public int getIndex(java.lang.String);
  public int getIndex(java.lang.String, java.lang.String);
  public int getLength();
  public void addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void clear();
  public void removeAttribute(int);
  public void setAttribute(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void setAttributes(org.xml.sax.Attributes);
  public void setLocalName(int, java.lang.String);
  public void setQName(int, java.lang.String);
  public void setType(int, java.lang.String);
  public void setURI(int, java.lang.String);
  public void setValue(int, java.lang.String);
  public java.lang.String getLocalName(int);
  public java.lang.String getQName(int);
  public java.lang.String getType(int);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getType(java.lang.String, java.lang.String);
  public java.lang.String getURI(int);
  public java.lang.String getValue(int);
  public java.lang.String getValue(java.lang.String);
  public java.lang.String getValue(java.lang.String, java.lang.String);
}
public class org.xml.sax.helpers.DefaultHandler
  extends java.lang.Object
  implements org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.ContentHandler, org.xml.sax.ErrorHandler
{
  public void <init>();
  public void characters(char[], int, int)  throws org.xml.sax.SAXException;
  public void endDocument()  throws org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void endPrefixMapping(java.lang.String)  throws org.xml.sax.SAXException;
  public void error(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public void fatalError(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public void ignorableWhitespace(char[], int, int)  throws org.xml.sax.SAXException;
  public void notationDecl(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void processingInstruction(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void setDocumentLocator(org.xml.sax.Locator);
  public void skippedEntity(java.lang.String)  throws org.xml.sax.SAXException;
  public void startDocument()  throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)  throws org.xml.sax.SAXException;
  public void startPrefixMapping(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void warning(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
}
public class org.xml.sax.helpers.LocatorImpl
  extends java.lang.Object
  implements org.xml.sax.Locator
{
  public void <init>();
  public void <init>(org.xml.sax.Locator);
  public int getColumnNumber();
  public int getLineNumber();
  public void setColumnNumber(int);
  public void setLineNumber(int);
  public void setPublicId(java.lang.String);
  public void setSystemId(java.lang.String);
  public java.lang.String getPublicId();
  public java.lang.String getSystemId();
}
public class org.xml.sax.helpers.NamespaceSupport
  extends java.lang.Object
{
  public void <init>();
  public boolean declarePrefix(java.lang.String, java.lang.String);
  public boolean isNamespaceDeclUris();
  public void popContext();
  public void pushContext();
  public void reset();
  public void setNamespaceDeclUris(boolean);
  public java.lang.String getPrefix(java.lang.String);
  public java.lang.String getURI(java.lang.String);
  public java.lang.String[] processName(java.lang.String, java.lang.String[], boolean);
  public java.util.Enumeration getDeclaredPrefixes();
  public java.util.Enumeration getPrefixes();
  public java.util.Enumeration getPrefixes(java.lang.String);
  public static final java.lang.String NSDECL;
  public static final java.lang.String XMLNS;
}
public class org.xml.sax.helpers.ParserAdapter
  extends java.lang.Object
  implements org.xml.sax.XMLReader, org.xml.sax.DocumentHandler
{
  public void <init>()  throws org.xml.sax.SAXException;
  public void <init>(org.xml.sax.Parser);
  public boolean getFeature(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void characters(char[], int, int)  throws org.xml.sax.SAXException;
  public void endDocument()  throws org.xml.sax.SAXException;
  public void endElement(java.lang.String)  throws org.xml.sax.SAXException;
  public void ignorableWhitespace(char[], int, int)  throws org.xml.sax.SAXException;
  public void parse(java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(org.xml.sax.InputSource)  throws java.io.IOException, org.xml.sax.SAXException;
  public void processingInstruction(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void setContentHandler(org.xml.sax.ContentHandler);
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public void setDocumentLocator(org.xml.sax.Locator);
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public void setFeature(java.lang.String, boolean)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void startDocument()  throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, org.xml.sax.AttributeList)  throws org.xml.sax.SAXException;
  public java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public org.xml.sax.ContentHandler getContentHandler();
  public org.xml.sax.DTDHandler getDTDHandler();
  public org.xml.sax.EntityResolver getEntityResolver();
  public org.xml.sax.ErrorHandler getErrorHandler();
}
public class org.xml.sax.helpers.ParserFactory
  extends java.lang.Object
{
  public static org.xml.sax.Parser makeParser()  throws java.lang.ClassCastException, java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NullPointerException;
  public static org.xml.sax.Parser makeParser(java.lang.String)  throws java.lang.ClassCastException, java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException;
}
public class org.xml.sax.helpers.XMLFilterImpl
  extends java.lang.Object
  implements org.xml.sax.XMLFilter, org.xml.sax.EntityResolver, org.xml.sax.DTDHandler, org.xml.sax.ContentHandler, org.xml.sax.ErrorHandler
{
  public void <init>();
  public void <init>(org.xml.sax.XMLReader);
  public boolean getFeature(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void characters(char[], int, int)  throws org.xml.sax.SAXException;
  public void endDocument()  throws org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void endPrefixMapping(java.lang.String)  throws org.xml.sax.SAXException;
  public void error(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public void fatalError(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public void ignorableWhitespace(char[], int, int)  throws org.xml.sax.SAXException;
  public void notationDecl(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void parse(java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(org.xml.sax.InputSource)  throws java.io.IOException, org.xml.sax.SAXException;
  public void processingInstruction(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void setContentHandler(org.xml.sax.ContentHandler);
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public void setDocumentLocator(org.xml.sax.Locator);
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public void setFeature(java.lang.String, boolean)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setParent(org.xml.sax.XMLReader);
  public void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void skippedEntity(java.lang.String)  throws org.xml.sax.SAXException;
  public void startDocument()  throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)  throws org.xml.sax.SAXException;
  public void startPrefixMapping(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void warning(org.xml.sax.SAXParseException)  throws org.xml.sax.SAXException;
  public java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public org.xml.sax.ContentHandler getContentHandler();
  public org.xml.sax.DTDHandler getDTDHandler();
  public org.xml.sax.EntityResolver getEntityResolver();
  public org.xml.sax.ErrorHandler getErrorHandler();
  public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public org.xml.sax.XMLReader getParent();
}
public class org.xml.sax.helpers.XMLReaderAdapter
  extends java.lang.Object
  implements org.xml.sax.Parser, org.xml.sax.ContentHandler
{
  public void <init>()  throws org.xml.sax.SAXException;
  public void <init>(org.xml.sax.XMLReader);
  public void characters(char[], int, int)  throws org.xml.sax.SAXException;
  public void endDocument()  throws org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void endPrefixMapping(java.lang.String);
  public void ignorableWhitespace(char[], int, int)  throws org.xml.sax.SAXException;
  public void parse(java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(org.xml.sax.InputSource)  throws java.io.IOException, org.xml.sax.SAXException;
  public void processingInstruction(java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public void setDocumentHandler(org.xml.sax.DocumentHandler);
  public void setDocumentLocator(org.xml.sax.Locator);
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public void setLocale(java.util.Locale)  throws org.xml.sax.SAXException;
  public void skippedEntity(java.lang.String)  throws org.xml.sax.SAXException;
  public void startDocument()  throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)  throws org.xml.sax.SAXException;
  public void startPrefixMapping(java.lang.String, java.lang.String);
}
public final class org.xml.sax.helpers.XMLReaderFactory
  extends java.lang.Object
{
  public static org.xml.sax.XMLReader createXMLReader()  throws org.xml.sax.SAXException;
  public static org.xml.sax.XMLReader createXMLReader(java.lang.String)  throws org.xml.sax.SAXException;
}
public interface org.xmlpull.v1.XmlPullParser
{
  public abstract boolean getFeature(java.lang.String);
  public abstract boolean isAttributeDefault(int);
  public abstract boolean isEmptyElementTag()  throws org.xmlpull.v1.XmlPullParserException;
  public abstract boolean isWhitespace()  throws org.xmlpull.v1.XmlPullParserException;
  public abstract int getAttributeCount();
  public abstract int getColumnNumber();
  public abstract int getDepth();
  public abstract int getEventType()  throws org.xmlpull.v1.XmlPullParserException;
  public abstract int getLineNumber();
  public abstract int getNamespaceCount(int)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract int next()  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public abstract int nextTag()  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public abstract int nextToken()  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public abstract void defineEntityReplacementText(java.lang.String, java.lang.String)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract void require(int, java.lang.String, java.lang.String)  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public abstract void setFeature(java.lang.String, boolean)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract void setInput(java.io.InputStream, java.lang.String)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract void setInput(java.io.Reader)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract void setProperty(java.lang.String, java.lang.Object)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract char[] getTextCharacters(int[]);
  public abstract java.lang.Object getProperty(java.lang.String);
  public abstract java.lang.String getAttributeName(int);
  public abstract java.lang.String getAttributeNamespace(int);
  public abstract java.lang.String getAttributePrefix(int);
  public abstract java.lang.String getAttributeType(int);
  public abstract java.lang.String getAttributeValue(int);
  public abstract java.lang.String getAttributeValue(java.lang.String, java.lang.String);
  public abstract java.lang.String getInputEncoding();
  public abstract java.lang.String getName();
  public abstract java.lang.String getNamespace();
  public abstract java.lang.String getNamespace(java.lang.String);
  public abstract java.lang.String getNamespacePrefix(int)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract java.lang.String getNamespaceUri(int)  throws org.xmlpull.v1.XmlPullParserException;
  public abstract java.lang.String getPositionDescription();
  public abstract java.lang.String getPrefix();
  public abstract java.lang.String getText();
  public abstract java.lang.String nextText()  throws java.io.IOException, org.xmlpull.v1.XmlPullParserException;
  public static final int CDSECT;
  public static final int COMMENT;
  public static final int DOCDECL;
  public static final int END_DOCUMENT;
  public static final int END_TAG;
  public static final int ENTITY_REF;
  public static final int IGNORABLE_WHITESPACE;
  public static final int PROCESSING_INSTRUCTION;
  public static final int START_DOCUMENT;
  public static final int START_TAG;
  public static final int TEXT;
  public static final java.lang.String FEATURE_PROCESS_DOCDECL;
  public static final java.lang.String FEATURE_PROCESS_NAMESPACES;
  public static final java.lang.String FEATURE_REPORT_NAMESPACE_ATTRIBUTES;
  public static final java.lang.String FEATURE_VALIDATION;
  public static final java.lang.String NO_NAMESPACE;
  public static final java.lang.String[] TYPES;
}
public class org.xmlpull.v1.XmlPullParserException
  extends java.lang.Exception
{
  public void <init>(java.lang.String);
  public void <init>(java.lang.String, org.xmlpull.v1.XmlPullParser, java.lang.Throwable);
  public int getColumnNumber();
  public int getLineNumber();
  public void printStackTrace();
  public java.lang.Throwable getDetail();
  protected int column;
  protected int row;
  protected java.lang.Throwable detail;
}
public class org.xmlpull.v1.XmlPullParserFactory
  extends java.lang.Object
{
  public static org.xmlpull.v1.XmlPullParserFactory newInstance()  throws org.xmlpull.v1.XmlPullParserException;
  public static org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String, java.lang.Class)  throws org.xmlpull.v1.XmlPullParserException;
  public boolean getFeature(java.lang.String);
  public boolean isNamespaceAware();
  public boolean isValidating();
  public void setFeature(java.lang.String, boolean)  throws org.xmlpull.v1.XmlPullParserException;
  public void setNamespaceAware(boolean);
  public void setValidating(boolean);
  public org.xmlpull.v1.XmlPullParser newPullParser()  throws org.xmlpull.v1.XmlPullParserException;
  public org.xmlpull.v1.XmlSerializer newSerializer()  throws org.xmlpull.v1.XmlPullParserException;
  protected void <init>();
  public static final java.lang.String PROPERTY_NAME;
  protected java.lang.String classNamesLocation;
  protected java.util.ArrayList parserClasses;
  protected java.util.ArrayList serializerClasses;
  protected java.util.HashMap features;
}
public interface org.xmlpull.v1.XmlSerializer
{
  public abstract boolean getFeature(java.lang.String);
  public abstract int getDepth();
  public abstract void cdsect(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void comment(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void docdecl(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void endDocument()  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void entityRef(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void flush()  throws java.io.IOException;
  public abstract void ignorableWhitespace(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void processingInstruction(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void setFeature(java.lang.String, boolean)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void setOutput(java.io.OutputStream, java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void setOutput(java.io.Writer)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void setPrefix(java.lang.String, java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void setProperty(java.lang.String, java.lang.Object)  throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract void startDocument(java.lang.String, java.lang.Boolean)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract java.lang.Object getProperty(java.lang.String);
  public abstract java.lang.String getName();
  public abstract java.lang.String getNamespace();
  public abstract java.lang.String getPrefix(java.lang.String, boolean)  throws java.lang.IllegalArgumentException;
  public abstract org.xmlpull.v1.XmlSerializer attribute(java.lang.String, java.lang.String, java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract org.xmlpull.v1.XmlSerializer endTag(java.lang.String, java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract org.xmlpull.v1.XmlSerializer startTag(java.lang.String, java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract org.xmlpull.v1.XmlSerializer text(char[], int, int)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
  public abstract org.xmlpull.v1.XmlSerializer text(java.lang.String)  throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;
}
public class org.xmlpull.v1.sax2.Driver
  extends java.lang.Object
  implements org.xml.sax.Locator, org.xml.sax.XMLReader, org.xml.sax.Attributes
{
  public void <init>()  throws org.xmlpull.v1.XmlPullParserException;
  public void <init>(org.xmlpull.v1.XmlPullParser)  throws org.xmlpull.v1.XmlPullParserException;
  public boolean getFeature(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public int getColumnNumber();
  public int getIndex(java.lang.String);
  public int getIndex(java.lang.String, java.lang.String);
  public int getLength();
  public int getLineNumber();
  public void parse(java.lang.String)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parse(org.xml.sax.InputSource)  throws java.io.IOException, org.xml.sax.SAXException;
  public void parseSubTree(org.xmlpull.v1.XmlPullParser)  throws java.io.IOException, org.xml.sax.SAXException;
  public void setContentHandler(org.xml.sax.ContentHandler);
  public void setDTDHandler(org.xml.sax.DTDHandler);
  public void setEntityResolver(org.xml.sax.EntityResolver);
  public void setErrorHandler(org.xml.sax.ErrorHandler);
  public void setFeature(java.lang.String, boolean)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public void setProperty(java.lang.String, java.lang.Object)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public java.lang.Object getProperty(java.lang.String)  throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;
  public java.lang.String getLocalName(int);
  public java.lang.String getPublicId();
  public java.lang.String getQName(int);
  public java.lang.String getSystemId();
  public java.lang.String getType(int);
  public java.lang.String getType(java.lang.String);
  public java.lang.String getType(java.lang.String, java.lang.String);
  public java.lang.String getURI(int);
  public java.lang.String getValue(int);
  public java.lang.String getValue(java.lang.String);
  public java.lang.String getValue(java.lang.String, java.lang.String);
  public org.xml.sax.ContentHandler getContentHandler();
  public org.xml.sax.DTDHandler getDTDHandler();
  public org.xml.sax.EntityResolver getEntityResolver();
  public org.xml.sax.ErrorHandler getErrorHandler();
  protected void startElement(java.lang.String, java.lang.String, java.lang.String)  throws org.xml.sax.SAXException;
  protected static final java.lang.String APACHE_DYNAMIC_VALIDATION_FEATURE;
  protected static final java.lang.String APACHE_SCHEMA_VALIDATION_FEATURE;
  protected static final java.lang.String DECLARATION_HANDLER_PROPERTY;
  protected static final java.lang.String LEXICAL_HANDLER_PROPERTY;
  protected static final java.lang.String NAMESPACES_FEATURE;
  protected static final java.lang.String NAMESPACE_PREFIXES_FEATURE;
  protected static final java.lang.String VALIDATION_FEATURE;
  protected java.lang.String systemId;
  protected org.xml.sax.ContentHandler contentHandler;
  protected org.xml.sax.ErrorHandler errorHandler;
  protected org.xmlpull.v1.XmlPullParser pp;
}

